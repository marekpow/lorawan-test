
Seeed-LoRa-E5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ed20  08000138  08000138  00010138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fc4  0801ee58  0801ee58  0002ee58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .USER_embedded_Keys 000000d8  0801fe1c  0801fe1c  0002fe1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0801fef4  0801fef4  0003014c  2**0
                  CONTENTS
  5 .ARM          00000008  0801fef4  0801fef4  0002fef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0801fefc  0801fefc  0003014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0801fefc  0801fefc  0002fefc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0801ff00  0801ff00  0002ff00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         0000014c  20000000  0801ff04  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00002124  2000014c  08020050  0003014c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002270  08020050  00032270  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0003014c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030176  2**0
                  CONTENTS, READONLY
 14 .debug_info   00047131  00000000  00000000  000301b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000affe  00000000  00000000  000772ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003718  00000000  00000000  000822e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000029dc  00000000  00000000  00085a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002a3e5  00000000  00000000  000883dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00046d50  00000000  00000000  000b27c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cfaf1  00000000  00000000  000f9511  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000e474  00000000  00000000  001c9004  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  001d7478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	2000014c 	.word	0x2000014c
 8000154:	00000000 	.word	0x00000000
 8000158:	0801ee40 	.word	0x0801ee40

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000150 	.word	0x20000150
 8000174:	0801ee40 	.word	0x0801ee40

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	; 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__aeabi_dmul>:
 8000500:	b570      	push	{r4, r5, r6, lr}
 8000502:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000506:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800050a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800050e:	bf1d      	ittte	ne
 8000510:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000514:	ea94 0f0c 	teqne	r4, ip
 8000518:	ea95 0f0c 	teqne	r5, ip
 800051c:	f000 f8de 	bleq	80006dc <__aeabi_dmul+0x1dc>
 8000520:	442c      	add	r4, r5
 8000522:	ea81 0603 	eor.w	r6, r1, r3
 8000526:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800052a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800052e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000532:	bf18      	it	ne
 8000534:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000538:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800053c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000540:	d038      	beq.n	80005b4 <__aeabi_dmul+0xb4>
 8000542:	fba0 ce02 	umull	ip, lr, r0, r2
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800054e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000552:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000556:	f04f 0600 	mov.w	r6, #0
 800055a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800055e:	f09c 0f00 	teq	ip, #0
 8000562:	bf18      	it	ne
 8000564:	f04e 0e01 	orrne.w	lr, lr, #1
 8000568:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800056c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000570:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000574:	d204      	bcs.n	8000580 <__aeabi_dmul+0x80>
 8000576:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800057a:	416d      	adcs	r5, r5
 800057c:	eb46 0606 	adc.w	r6, r6, r6
 8000580:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000584:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000588:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800058c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000590:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000594:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000598:	bf88      	it	hi
 800059a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800059e:	d81e      	bhi.n	80005de <__aeabi_dmul+0xde>
 80005a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005a4:	bf08      	it	eq
 80005a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005aa:	f150 0000 	adcs.w	r0, r0, #0
 80005ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005b2:	bd70      	pop	{r4, r5, r6, pc}
 80005b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b8:	ea46 0101 	orr.w	r1, r6, r1
 80005bc:	ea40 0002 	orr.w	r0, r0, r2
 80005c0:	ea81 0103 	eor.w	r1, r1, r3
 80005c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c8:	bfc2      	ittt	gt
 80005ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005d2:	bd70      	popgt	{r4, r5, r6, pc}
 80005d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d8:	f04f 0e00 	mov.w	lr, #0
 80005dc:	3c01      	subs	r4, #1
 80005de:	f300 80ab 	bgt.w	8000738 <__aeabi_dmul+0x238>
 80005e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005e6:	bfde      	ittt	le
 80005e8:	2000      	movle	r0, #0
 80005ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ee:	bd70      	pople	{r4, r5, r6, pc}
 80005f0:	f1c4 0400 	rsb	r4, r4, #0
 80005f4:	3c20      	subs	r4, #32
 80005f6:	da35      	bge.n	8000664 <__aeabi_dmul+0x164>
 80005f8:	340c      	adds	r4, #12
 80005fa:	dc1b      	bgt.n	8000634 <__aeabi_dmul+0x134>
 80005fc:	f104 0414 	add.w	r4, r4, #20
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f305 	lsl.w	r3, r0, r5
 8000608:	fa20 f004 	lsr.w	r0, r0, r4
 800060c:	fa01 f205 	lsl.w	r2, r1, r5
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000618:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800061c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000620:	fa21 f604 	lsr.w	r6, r1, r4
 8000624:	eb42 0106 	adc.w	r1, r2, r6
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 040c 	rsb	r4, r4, #12
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f304 	lsl.w	r3, r0, r4
 8000640:	fa20 f005 	lsr.w	r0, r0, r5
 8000644:	fa01 f204 	lsl.w	r2, r1, r4
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000650:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000654:	f141 0100 	adc.w	r1, r1, #0
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f205 	lsl.w	r2, r0, r5
 800066c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000670:	fa20 f304 	lsr.w	r3, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea43 0302 	orr.w	r3, r3, r2
 800067c:	fa21 f004 	lsr.w	r0, r1, r4
 8000680:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000684:	fa21 f204 	lsr.w	r2, r1, r4
 8000688:	ea20 0002 	bic.w	r0, r0, r2
 800068c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f094 0f00 	teq	r4, #0
 80006a0:	d10f      	bne.n	80006c2 <__aeabi_dmul+0x1c2>
 80006a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006a6:	0040      	lsls	r0, r0, #1
 80006a8:	eb41 0101 	adc.w	r1, r1, r1
 80006ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b0:	bf08      	it	eq
 80006b2:	3c01      	subeq	r4, #1
 80006b4:	d0f7      	beq.n	80006a6 <__aeabi_dmul+0x1a6>
 80006b6:	ea41 0106 	orr.w	r1, r1, r6
 80006ba:	f095 0f00 	teq	r5, #0
 80006be:	bf18      	it	ne
 80006c0:	4770      	bxne	lr
 80006c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006c6:	0052      	lsls	r2, r2, #1
 80006c8:	eb43 0303 	adc.w	r3, r3, r3
 80006cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d0:	bf08      	it	eq
 80006d2:	3d01      	subeq	r5, #1
 80006d4:	d0f7      	beq.n	80006c6 <__aeabi_dmul+0x1c6>
 80006d6:	ea43 0306 	orr.w	r3, r3, r6
 80006da:	4770      	bx	lr
 80006dc:	ea94 0f0c 	teq	r4, ip
 80006e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006e4:	bf18      	it	ne
 80006e6:	ea95 0f0c 	teqne	r5, ip
 80006ea:	d00c      	beq.n	8000706 <__aeabi_dmul+0x206>
 80006ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f0:	bf18      	it	ne
 80006f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006f6:	d1d1      	bne.n	800069c <__aeabi_dmul+0x19c>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f04f 0000 	mov.w	r0, #0
 8000704:	bd70      	pop	{r4, r5, r6, pc}
 8000706:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800070a:	bf06      	itte	eq
 800070c:	4610      	moveq	r0, r2
 800070e:	4619      	moveq	r1, r3
 8000710:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000714:	d019      	beq.n	800074a <__aeabi_dmul+0x24a>
 8000716:	ea94 0f0c 	teq	r4, ip
 800071a:	d102      	bne.n	8000722 <__aeabi_dmul+0x222>
 800071c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000720:	d113      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000722:	ea95 0f0c 	teq	r5, ip
 8000726:	d105      	bne.n	8000734 <__aeabi_dmul+0x234>
 8000728:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800072c:	bf1c      	itt	ne
 800072e:	4610      	movne	r0, r2
 8000730:	4619      	movne	r1, r3
 8000732:	d10a      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000734:	ea81 0103 	eor.w	r1, r1, r3
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000740:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	bd70      	pop	{r4, r5, r6, pc}
 800074a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800074e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000752:	bd70      	pop	{r4, r5, r6, pc}

08000754 <__aeabi_ddiv>:
 8000754:	b570      	push	{r4, r5, r6, lr}
 8000756:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800075a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800075e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000762:	bf1d      	ittte	ne
 8000764:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000768:	ea94 0f0c 	teqne	r4, ip
 800076c:	ea95 0f0c 	teqne	r5, ip
 8000770:	f000 f8a7 	bleq	80008c2 <__aeabi_ddiv+0x16e>
 8000774:	eba4 0405 	sub.w	r4, r4, r5
 8000778:	ea81 0e03 	eor.w	lr, r1, r3
 800077c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000780:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000784:	f000 8088 	beq.w	8000898 <__aeabi_ddiv+0x144>
 8000788:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800078c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000790:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000794:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000798:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800079c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ac:	429d      	cmp	r5, r3
 80007ae:	bf08      	it	eq
 80007b0:	4296      	cmpeq	r6, r2
 80007b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007ba:	d202      	bcs.n	80007c2 <__aeabi_ddiv+0x6e>
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	1ab6      	subs	r6, r6, r2
 80007c4:	eb65 0503 	sbc.w	r5, r5, r3
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000830:	ea55 0e06 	orrs.w	lr, r5, r6
 8000834:	d018      	beq.n	8000868 <__aeabi_ddiv+0x114>
 8000836:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800083a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800083e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000842:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000846:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800084a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800084e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000852:	d1c0      	bne.n	80007d6 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	d10b      	bne.n	8000872 <__aeabi_ddiv+0x11e>
 800085a:	ea41 0100 	orr.w	r1, r1, r0
 800085e:	f04f 0000 	mov.w	r0, #0
 8000862:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000866:	e7b6      	b.n	80007d6 <__aeabi_ddiv+0x82>
 8000868:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800086c:	bf04      	itt	eq
 800086e:	4301      	orreq	r1, r0
 8000870:	2000      	moveq	r0, #0
 8000872:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000876:	bf88      	it	hi
 8000878:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800087c:	f63f aeaf 	bhi.w	80005de <__aeabi_dmul+0xde>
 8000880:	ebb5 0c03 	subs.w	ip, r5, r3
 8000884:	bf04      	itt	eq
 8000886:	ebb6 0c02 	subseq.w	ip, r6, r2
 800088a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800088e:	f150 0000 	adcs.w	r0, r0, #0
 8000892:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000896:	bd70      	pop	{r4, r5, r6, pc}
 8000898:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800089c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008a4:	bfc2      	ittt	gt
 80008a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ae:	bd70      	popgt	{r4, r5, r6, pc}
 80008b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008b4:	f04f 0e00 	mov.w	lr, #0
 80008b8:	3c01      	subs	r4, #1
 80008ba:	e690      	b.n	80005de <__aeabi_dmul+0xde>
 80008bc:	ea45 0e06 	orr.w	lr, r5, r6
 80008c0:	e68d      	b.n	80005de <__aeabi_dmul+0xde>
 80008c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008c6:	ea94 0f0c 	teq	r4, ip
 80008ca:	bf08      	it	eq
 80008cc:	ea95 0f0c 	teqeq	r5, ip
 80008d0:	f43f af3b 	beq.w	800074a <__aeabi_dmul+0x24a>
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	d10a      	bne.n	80008f0 <__aeabi_ddiv+0x19c>
 80008da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008de:	f47f af34 	bne.w	800074a <__aeabi_dmul+0x24a>
 80008e2:	ea95 0f0c 	teq	r5, ip
 80008e6:	f47f af25 	bne.w	8000734 <__aeabi_dmul+0x234>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e72c      	b.n	800074a <__aeabi_dmul+0x24a>
 80008f0:	ea95 0f0c 	teq	r5, ip
 80008f4:	d106      	bne.n	8000904 <__aeabi_ddiv+0x1b0>
 80008f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008fa:	f43f aefd 	beq.w	80006f8 <__aeabi_dmul+0x1f8>
 80008fe:	4610      	mov	r0, r2
 8000900:	4619      	mov	r1, r3
 8000902:	e722      	b.n	800074a <__aeabi_dmul+0x24a>
 8000904:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090e:	f47f aec5 	bne.w	800069c <__aeabi_dmul+0x19c>
 8000912:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000916:	f47f af0d 	bne.w	8000734 <__aeabi_dmul+0x234>
 800091a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800091e:	f47f aeeb 	bne.w	80006f8 <__aeabi_dmul+0x1f8>
 8000922:	e712      	b.n	800074a <__aeabi_dmul+0x24a>

08000924 <__gedf2>:
 8000924:	f04f 3cff 	mov.w	ip, #4294967295
 8000928:	e006      	b.n	8000938 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__ledf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	e002      	b.n	8000938 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__cmpdf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	f84d cd04 	str.w	ip, [sp, #-4]!
 800093c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000940:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000944:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800094e:	d01b      	beq.n	8000988 <__cmpdf2+0x54>
 8000950:	b001      	add	sp, #4
 8000952:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000956:	bf0c      	ite	eq
 8000958:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800095c:	ea91 0f03 	teqne	r1, r3
 8000960:	bf02      	ittt	eq
 8000962:	ea90 0f02 	teqeq	r0, r2
 8000966:	2000      	moveq	r0, #0
 8000968:	4770      	bxeq	lr
 800096a:	f110 0f00 	cmn.w	r0, #0
 800096e:	ea91 0f03 	teq	r1, r3
 8000972:	bf58      	it	pl
 8000974:	4299      	cmppl	r1, r3
 8000976:	bf08      	it	eq
 8000978:	4290      	cmpeq	r0, r2
 800097a:	bf2c      	ite	cs
 800097c:	17d8      	asrcs	r0, r3, #31
 800097e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000982:	f040 0001 	orr.w	r0, r0, #1
 8000986:	4770      	bx	lr
 8000988:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800098c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000990:	d102      	bne.n	8000998 <__cmpdf2+0x64>
 8000992:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000996:	d107      	bne.n	80009a8 <__cmpdf2+0x74>
 8000998:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800099c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a0:	d1d6      	bne.n	8000950 <__cmpdf2+0x1c>
 80009a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009a6:	d0d3      	beq.n	8000950 <__cmpdf2+0x1c>
 80009a8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop

080009b0 <__aeabi_cdrcmple>:
 80009b0:	4684      	mov	ip, r0
 80009b2:	4610      	mov	r0, r2
 80009b4:	4662      	mov	r2, ip
 80009b6:	468c      	mov	ip, r1
 80009b8:	4619      	mov	r1, r3
 80009ba:	4663      	mov	r3, ip
 80009bc:	e000      	b.n	80009c0 <__aeabi_cdcmpeq>
 80009be:	bf00      	nop

080009c0 <__aeabi_cdcmpeq>:
 80009c0:	b501      	push	{r0, lr}
 80009c2:	f7ff ffb7 	bl	8000934 <__cmpdf2>
 80009c6:	2800      	cmp	r0, #0
 80009c8:	bf48      	it	mi
 80009ca:	f110 0f00 	cmnmi.w	r0, #0
 80009ce:	bd01      	pop	{r0, pc}

080009d0 <__aeabi_dcmpeq>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff fff4 	bl	80009c0 <__aeabi_cdcmpeq>
 80009d8:	bf0c      	ite	eq
 80009da:	2001      	moveq	r0, #1
 80009dc:	2000      	movne	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmplt>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffea 	bl	80009c0 <__aeabi_cdcmpeq>
 80009ec:	bf34      	ite	cc
 80009ee:	2001      	movcc	r0, #1
 80009f0:	2000      	movcs	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmple>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffe0 	bl	80009c0 <__aeabi_cdcmpeq>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpge>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffce 	bl	80009b0 <__aeabi_cdrcmple>
 8000a14:	bf94      	ite	ls
 8000a16:	2001      	movls	r0, #1
 8000a18:	2000      	movhi	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpgt>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff ffc4 	bl	80009b0 <__aeabi_cdrcmple>
 8000a28:	bf34      	ite	cc
 8000a2a:	2001      	movcc	r0, #1
 8000a2c:	2000      	movcs	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_d2iz>:
 8000a34:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a38:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a3c:	d215      	bcs.n	8000a6a <__aeabi_d2iz+0x36>
 8000a3e:	d511      	bpl.n	8000a64 <__aeabi_d2iz+0x30>
 8000a40:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a44:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a48:	d912      	bls.n	8000a70 <__aeabi_d2iz+0x3c>
 8000a4a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a52:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a56:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5e:	bf18      	it	ne
 8000a60:	4240      	negne	r0, r0
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d105      	bne.n	8000a7c <__aeabi_d2iz+0x48>
 8000a70:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a74:	bf08      	it	eq
 8000a76:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2f>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a8c:	bf24      	itt	cs
 8000a8e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a92:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a96:	d90d      	bls.n	8000ab4 <__aeabi_d2f+0x30>
 8000a98:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a9c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aa8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aac:	bf08      	it	eq
 8000aae:	f020 0001 	biceq.w	r0, r0, #1
 8000ab2:	4770      	bx	lr
 8000ab4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ab8:	d121      	bne.n	8000afe <__aeabi_d2f+0x7a>
 8000aba:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000abe:	bfbc      	itt	lt
 8000ac0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	4770      	bxlt	lr
 8000ac6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ace:	f1c2 0218 	rsb	r2, r2, #24
 8000ad2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ad6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ada:	fa20 f002 	lsr.w	r0, r0, r2
 8000ade:	bf18      	it	ne
 8000ae0:	f040 0001 	orrne.w	r0, r0, #1
 8000ae4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aec:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af0:	ea40 000c 	orr.w	r0, r0, ip
 8000af4:	fa23 f302 	lsr.w	r3, r3, r2
 8000af8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000afc:	e7cc      	b.n	8000a98 <__aeabi_d2f+0x14>
 8000afe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b02:	d107      	bne.n	8000b14 <__aeabi_d2f+0x90>
 8000b04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b08:	bf1e      	ittt	ne
 8000b0a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b0e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b12:	4770      	bxne	lr
 8000b14:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b18:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_frsub>:
 8000b24:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b28:	e002      	b.n	8000b30 <__addsf3>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_fsub>:
 8000b2c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b30 <__addsf3>:
 8000b30:	0042      	lsls	r2, r0, #1
 8000b32:	bf1f      	itttt	ne
 8000b34:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b38:	ea92 0f03 	teqne	r2, r3
 8000b3c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b40:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b44:	d06a      	beq.n	8000c1c <__addsf3+0xec>
 8000b46:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b4e:	bfc1      	itttt	gt
 8000b50:	18d2      	addgt	r2, r2, r3
 8000b52:	4041      	eorgt	r1, r0
 8000b54:	4048      	eorgt	r0, r1
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	bfb8      	it	lt
 8000b5a:	425b      	neglt	r3, r3
 8000b5c:	2b19      	cmp	r3, #25
 8000b5e:	bf88      	it	hi
 8000b60:	4770      	bxhi	lr
 8000b62:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b66:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b6e:	bf18      	it	ne
 8000b70:	4240      	negne	r0, r0
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b7e:	bf18      	it	ne
 8000b80:	4249      	negne	r1, r1
 8000b82:	ea92 0f03 	teq	r2, r3
 8000b86:	d03f      	beq.n	8000c08 <__addsf3+0xd8>
 8000b88:	f1a2 0201 	sub.w	r2, r2, #1
 8000b8c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b90:	eb10 000c 	adds.w	r0, r0, ip
 8000b94:	f1c3 0320 	rsb	r3, r3, #32
 8000b98:	fa01 f103 	lsl.w	r1, r1, r3
 8000b9c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba0:	d502      	bpl.n	8000ba8 <__addsf3+0x78>
 8000ba2:	4249      	negs	r1, r1
 8000ba4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ba8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bac:	d313      	bcc.n	8000bd6 <__addsf3+0xa6>
 8000bae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb2:	d306      	bcc.n	8000bc2 <__addsf3+0x92>
 8000bb4:	0840      	lsrs	r0, r0, #1
 8000bb6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bba:	f102 0201 	add.w	r2, r2, #1
 8000bbe:	2afe      	cmp	r2, #254	; 0xfe
 8000bc0:	d251      	bcs.n	8000c66 <__addsf3+0x136>
 8000bc2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bc6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bca:	bf08      	it	eq
 8000bcc:	f020 0001 	biceq.w	r0, r0, #1
 8000bd0:	ea40 0003 	orr.w	r0, r0, r3
 8000bd4:	4770      	bx	lr
 8000bd6:	0049      	lsls	r1, r1, #1
 8000bd8:	eb40 0000 	adc.w	r0, r0, r0
 8000bdc:	3a01      	subs	r2, #1
 8000bde:	bf28      	it	cs
 8000be0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be4:	d2ed      	bcs.n	8000bc2 <__addsf3+0x92>
 8000be6:	fab0 fc80 	clz	ip, r0
 8000bea:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bee:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bf6:	bfaa      	itet	ge
 8000bf8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bfc:	4252      	neglt	r2, r2
 8000bfe:	4318      	orrge	r0, r3
 8000c00:	bfbc      	itt	lt
 8000c02:	40d0      	lsrlt	r0, r2
 8000c04:	4318      	orrlt	r0, r3
 8000c06:	4770      	bx	lr
 8000c08:	f092 0f00 	teq	r2, #0
 8000c0c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c10:	bf06      	itte	eq
 8000c12:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c16:	3201      	addeq	r2, #1
 8000c18:	3b01      	subne	r3, #1
 8000c1a:	e7b5      	b.n	8000b88 <__addsf3+0x58>
 8000c1c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c20:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c24:	bf18      	it	ne
 8000c26:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2a:	d021      	beq.n	8000c70 <__addsf3+0x140>
 8000c2c:	ea92 0f03 	teq	r2, r3
 8000c30:	d004      	beq.n	8000c3c <__addsf3+0x10c>
 8000c32:	f092 0f00 	teq	r2, #0
 8000c36:	bf08      	it	eq
 8000c38:	4608      	moveq	r0, r1
 8000c3a:	4770      	bx	lr
 8000c3c:	ea90 0f01 	teq	r0, r1
 8000c40:	bf1c      	itt	ne
 8000c42:	2000      	movne	r0, #0
 8000c44:	4770      	bxne	lr
 8000c46:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4a:	d104      	bne.n	8000c56 <__addsf3+0x126>
 8000c4c:	0040      	lsls	r0, r0, #1
 8000c4e:	bf28      	it	cs
 8000c50:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c54:	4770      	bx	lr
 8000c56:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5a:	bf3c      	itt	cc
 8000c5c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c60:	4770      	bxcc	lr
 8000c62:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c66:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c6e:	4770      	bx	lr
 8000c70:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c74:	bf16      	itet	ne
 8000c76:	4608      	movne	r0, r1
 8000c78:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c7c:	4601      	movne	r1, r0
 8000c7e:	0242      	lsls	r2, r0, #9
 8000c80:	bf06      	itte	eq
 8000c82:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c86:	ea90 0f01 	teqeq	r0, r1
 8000c8a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c8e:	4770      	bx	lr

08000c90 <__aeabi_ui2f>:
 8000c90:	f04f 0300 	mov.w	r3, #0
 8000c94:	e004      	b.n	8000ca0 <__aeabi_i2f+0x8>
 8000c96:	bf00      	nop

08000c98 <__aeabi_i2f>:
 8000c98:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c9c:	bf48      	it	mi
 8000c9e:	4240      	negmi	r0, r0
 8000ca0:	ea5f 0c00 	movs.w	ip, r0
 8000ca4:	bf08      	it	eq
 8000ca6:	4770      	bxeq	lr
 8000ca8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cac:	4601      	mov	r1, r0
 8000cae:	f04f 0000 	mov.w	r0, #0
 8000cb2:	e01c      	b.n	8000cee <__aeabi_l2f+0x2a>

08000cb4 <__aeabi_ul2f>:
 8000cb4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cb8:	bf08      	it	eq
 8000cba:	4770      	bxeq	lr
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e00a      	b.n	8000cd8 <__aeabi_l2f+0x14>
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_l2f>:
 8000cc4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc8:	bf08      	it	eq
 8000cca:	4770      	bxeq	lr
 8000ccc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd0:	d502      	bpl.n	8000cd8 <__aeabi_l2f+0x14>
 8000cd2:	4240      	negs	r0, r0
 8000cd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd8:	ea5f 0c01 	movs.w	ip, r1
 8000cdc:	bf02      	ittt	eq
 8000cde:	4684      	moveq	ip, r0
 8000ce0:	4601      	moveq	r1, r0
 8000ce2:	2000      	moveq	r0, #0
 8000ce4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ce8:	bf08      	it	eq
 8000cea:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cee:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf2:	fabc f28c 	clz	r2, ip
 8000cf6:	3a08      	subs	r2, #8
 8000cf8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cfc:	db10      	blt.n	8000d20 <__aeabi_l2f+0x5c>
 8000cfe:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d02:	4463      	add	r3, ip
 8000d04:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d08:	f1c2 0220 	rsb	r2, r2, #32
 8000d0c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d10:	fa20 f202 	lsr.w	r2, r0, r2
 8000d14:	eb43 0002 	adc.w	r0, r3, r2
 8000d18:	bf08      	it	eq
 8000d1a:	f020 0001 	biceq.w	r0, r0, #1
 8000d1e:	4770      	bx	lr
 8000d20:	f102 0220 	add.w	r2, r2, #32
 8000d24:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d28:	f1c2 0220 	rsb	r2, r2, #32
 8000d2c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d30:	fa21 f202 	lsr.w	r2, r1, r2
 8000d34:	eb43 0002 	adc.w	r0, r3, r2
 8000d38:	bf08      	it	eq
 8000d3a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d3e:	4770      	bx	lr

08000d40 <__aeabi_fmul>:
 8000d40:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d44:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d48:	bf1e      	ittt	ne
 8000d4a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d4e:	ea92 0f0c 	teqne	r2, ip
 8000d52:	ea93 0f0c 	teqne	r3, ip
 8000d56:	d06f      	beq.n	8000e38 <__aeabi_fmul+0xf8>
 8000d58:	441a      	add	r2, r3
 8000d5a:	ea80 0c01 	eor.w	ip, r0, r1
 8000d5e:	0240      	lsls	r0, r0, #9
 8000d60:	bf18      	it	ne
 8000d62:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d66:	d01e      	beq.n	8000da6 <__aeabi_fmul+0x66>
 8000d68:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d6c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d70:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d74:	fba0 3101 	umull	r3, r1, r0, r1
 8000d78:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d7c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d80:	bf3e      	ittt	cc
 8000d82:	0049      	lslcc	r1, r1, #1
 8000d84:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d88:	005b      	lslcc	r3, r3, #1
 8000d8a:	ea40 0001 	orr.w	r0, r0, r1
 8000d8e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d92:	2afd      	cmp	r2, #253	; 0xfd
 8000d94:	d81d      	bhi.n	8000dd2 <__aeabi_fmul+0x92>
 8000d96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d9e:	bf08      	it	eq
 8000da0:	f020 0001 	biceq.w	r0, r0, #1
 8000da4:	4770      	bx	lr
 8000da6:	f090 0f00 	teq	r0, #0
 8000daa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dae:	bf08      	it	eq
 8000db0:	0249      	lsleq	r1, r1, #9
 8000db2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000db6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dba:	3a7f      	subs	r2, #127	; 0x7f
 8000dbc:	bfc2      	ittt	gt
 8000dbe:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dc6:	4770      	bxgt	lr
 8000dc8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dcc:	f04f 0300 	mov.w	r3, #0
 8000dd0:	3a01      	subs	r2, #1
 8000dd2:	dc5d      	bgt.n	8000e90 <__aeabi_fmul+0x150>
 8000dd4:	f112 0f19 	cmn.w	r2, #25
 8000dd8:	bfdc      	itt	le
 8000dda:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dde:	4770      	bxle	lr
 8000de0:	f1c2 0200 	rsb	r2, r2, #0
 8000de4:	0041      	lsls	r1, r0, #1
 8000de6:	fa21 f102 	lsr.w	r1, r1, r2
 8000dea:	f1c2 0220 	rsb	r2, r2, #32
 8000dee:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df2:	ea5f 0031 	movs.w	r0, r1, rrx
 8000df6:	f140 0000 	adc.w	r0, r0, #0
 8000dfa:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dfe:	bf08      	it	eq
 8000e00:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e04:	4770      	bx	lr
 8000e06:	f092 0f00 	teq	r2, #0
 8000e0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e0e:	bf02      	ittt	eq
 8000e10:	0040      	lsleq	r0, r0, #1
 8000e12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e16:	3a01      	subeq	r2, #1
 8000e18:	d0f9      	beq.n	8000e0e <__aeabi_fmul+0xce>
 8000e1a:	ea40 000c 	orr.w	r0, r0, ip
 8000e1e:	f093 0f00 	teq	r3, #0
 8000e22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e26:	bf02      	ittt	eq
 8000e28:	0049      	lsleq	r1, r1, #1
 8000e2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e2e:	3b01      	subeq	r3, #1
 8000e30:	d0f9      	beq.n	8000e26 <__aeabi_fmul+0xe6>
 8000e32:	ea41 010c 	orr.w	r1, r1, ip
 8000e36:	e78f      	b.n	8000d58 <__aeabi_fmul+0x18>
 8000e38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e3c:	ea92 0f0c 	teq	r2, ip
 8000e40:	bf18      	it	ne
 8000e42:	ea93 0f0c 	teqne	r3, ip
 8000e46:	d00a      	beq.n	8000e5e <__aeabi_fmul+0x11e>
 8000e48:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e4c:	bf18      	it	ne
 8000e4e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e52:	d1d8      	bne.n	8000e06 <__aeabi_fmul+0xc6>
 8000e54:	ea80 0001 	eor.w	r0, r0, r1
 8000e58:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e5c:	4770      	bx	lr
 8000e5e:	f090 0f00 	teq	r0, #0
 8000e62:	bf17      	itett	ne
 8000e64:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e68:	4608      	moveq	r0, r1
 8000e6a:	f091 0f00 	teqne	r1, #0
 8000e6e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e72:	d014      	beq.n	8000e9e <__aeabi_fmul+0x15e>
 8000e74:	ea92 0f0c 	teq	r2, ip
 8000e78:	d101      	bne.n	8000e7e <__aeabi_fmul+0x13e>
 8000e7a:	0242      	lsls	r2, r0, #9
 8000e7c:	d10f      	bne.n	8000e9e <__aeabi_fmul+0x15e>
 8000e7e:	ea93 0f0c 	teq	r3, ip
 8000e82:	d103      	bne.n	8000e8c <__aeabi_fmul+0x14c>
 8000e84:	024b      	lsls	r3, r1, #9
 8000e86:	bf18      	it	ne
 8000e88:	4608      	movne	r0, r1
 8000e8a:	d108      	bne.n	8000e9e <__aeabi_fmul+0x15e>
 8000e8c:	ea80 0001 	eor.w	r0, r0, r1
 8000e90:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e9c:	4770      	bx	lr
 8000e9e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ea6:	4770      	bx	lr

08000ea8 <__aeabi_fdiv>:
 8000ea8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb0:	bf1e      	ittt	ne
 8000eb2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eb6:	ea92 0f0c 	teqne	r2, ip
 8000eba:	ea93 0f0c 	teqne	r3, ip
 8000ebe:	d069      	beq.n	8000f94 <__aeabi_fdiv+0xec>
 8000ec0:	eba2 0203 	sub.w	r2, r2, r3
 8000ec4:	ea80 0c01 	eor.w	ip, r0, r1
 8000ec8:	0249      	lsls	r1, r1, #9
 8000eca:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ece:	d037      	beq.n	8000f40 <__aeabi_fdiv+0x98>
 8000ed0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ed8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000edc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	bf38      	it	cc
 8000ee4:	005b      	lslcc	r3, r3, #1
 8000ee6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eea:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	bf24      	itt	cs
 8000ef2:	1a5b      	subcs	r3, r3, r1
 8000ef4:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ef8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000efc:	bf24      	itt	cs
 8000efe:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f02:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f06:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0a:	bf24      	itt	cs
 8000f0c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f10:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f14:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f18:	bf24      	itt	cs
 8000f1a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f1e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f22:	011b      	lsls	r3, r3, #4
 8000f24:	bf18      	it	ne
 8000f26:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2a:	d1e0      	bne.n	8000eee <__aeabi_fdiv+0x46>
 8000f2c:	2afd      	cmp	r2, #253	; 0xfd
 8000f2e:	f63f af50 	bhi.w	8000dd2 <__aeabi_fmul+0x92>
 8000f32:	428b      	cmp	r3, r1
 8000f34:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f38:	bf08      	it	eq
 8000f3a:	f020 0001 	biceq.w	r0, r0, #1
 8000f3e:	4770      	bx	lr
 8000f40:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f44:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f48:	327f      	adds	r2, #127	; 0x7f
 8000f4a:	bfc2      	ittt	gt
 8000f4c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f50:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f54:	4770      	bxgt	lr
 8000f56:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5a:	f04f 0300 	mov.w	r3, #0
 8000f5e:	3a01      	subs	r2, #1
 8000f60:	e737      	b.n	8000dd2 <__aeabi_fmul+0x92>
 8000f62:	f092 0f00 	teq	r2, #0
 8000f66:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6a:	bf02      	ittt	eq
 8000f6c:	0040      	lsleq	r0, r0, #1
 8000f6e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f72:	3a01      	subeq	r2, #1
 8000f74:	d0f9      	beq.n	8000f6a <__aeabi_fdiv+0xc2>
 8000f76:	ea40 000c 	orr.w	r0, r0, ip
 8000f7a:	f093 0f00 	teq	r3, #0
 8000f7e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f82:	bf02      	ittt	eq
 8000f84:	0049      	lsleq	r1, r1, #1
 8000f86:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8a:	3b01      	subeq	r3, #1
 8000f8c:	d0f9      	beq.n	8000f82 <__aeabi_fdiv+0xda>
 8000f8e:	ea41 010c 	orr.w	r1, r1, ip
 8000f92:	e795      	b.n	8000ec0 <__aeabi_fdiv+0x18>
 8000f94:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f98:	ea92 0f0c 	teq	r2, ip
 8000f9c:	d108      	bne.n	8000fb0 <__aeabi_fdiv+0x108>
 8000f9e:	0242      	lsls	r2, r0, #9
 8000fa0:	f47f af7d 	bne.w	8000e9e <__aeabi_fmul+0x15e>
 8000fa4:	ea93 0f0c 	teq	r3, ip
 8000fa8:	f47f af70 	bne.w	8000e8c <__aeabi_fmul+0x14c>
 8000fac:	4608      	mov	r0, r1
 8000fae:	e776      	b.n	8000e9e <__aeabi_fmul+0x15e>
 8000fb0:	ea93 0f0c 	teq	r3, ip
 8000fb4:	d104      	bne.n	8000fc0 <__aeabi_fdiv+0x118>
 8000fb6:	024b      	lsls	r3, r1, #9
 8000fb8:	f43f af4c 	beq.w	8000e54 <__aeabi_fmul+0x114>
 8000fbc:	4608      	mov	r0, r1
 8000fbe:	e76e      	b.n	8000e9e <__aeabi_fmul+0x15e>
 8000fc0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc4:	bf18      	it	ne
 8000fc6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fca:	d1ca      	bne.n	8000f62 <__aeabi_fdiv+0xba>
 8000fcc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd0:	f47f af5c 	bne.w	8000e8c <__aeabi_fmul+0x14c>
 8000fd4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fd8:	f47f af3c 	bne.w	8000e54 <__aeabi_fmul+0x114>
 8000fdc:	e75f      	b.n	8000e9e <__aeabi_fmul+0x15e>
 8000fde:	bf00      	nop

08000fe0 <__gesf2>:
 8000fe0:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe4:	e006      	b.n	8000ff4 <__cmpsf2+0x4>
 8000fe6:	bf00      	nop

08000fe8 <__lesf2>:
 8000fe8:	f04f 0c01 	mov.w	ip, #1
 8000fec:	e002      	b.n	8000ff4 <__cmpsf2+0x4>
 8000fee:	bf00      	nop

08000ff0 <__cmpsf2>:
 8000ff0:	f04f 0c01 	mov.w	ip, #1
 8000ff4:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ff8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ffc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001000:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001004:	bf18      	it	ne
 8001006:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100a:	d011      	beq.n	8001030 <__cmpsf2+0x40>
 800100c:	b001      	add	sp, #4
 800100e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001012:	bf18      	it	ne
 8001014:	ea90 0f01 	teqne	r0, r1
 8001018:	bf58      	it	pl
 800101a:	ebb2 0003 	subspl.w	r0, r2, r3
 800101e:	bf88      	it	hi
 8001020:	17c8      	asrhi	r0, r1, #31
 8001022:	bf38      	it	cc
 8001024:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001028:	bf18      	it	ne
 800102a:	f040 0001 	orrne.w	r0, r0, #1
 800102e:	4770      	bx	lr
 8001030:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001034:	d102      	bne.n	800103c <__cmpsf2+0x4c>
 8001036:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103a:	d105      	bne.n	8001048 <__cmpsf2+0x58>
 800103c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001040:	d1e4      	bne.n	800100c <__cmpsf2+0x1c>
 8001042:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001046:	d0e1      	beq.n	800100c <__cmpsf2+0x1c>
 8001048:	f85d 0b04 	ldr.w	r0, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop

08001050 <__aeabi_cfrcmple>:
 8001050:	4684      	mov	ip, r0
 8001052:	4608      	mov	r0, r1
 8001054:	4661      	mov	r1, ip
 8001056:	e7ff      	b.n	8001058 <__aeabi_cfcmpeq>

08001058 <__aeabi_cfcmpeq>:
 8001058:	b50f      	push	{r0, r1, r2, r3, lr}
 800105a:	f7ff ffc9 	bl	8000ff0 <__cmpsf2>
 800105e:	2800      	cmp	r0, #0
 8001060:	bf48      	it	mi
 8001062:	f110 0f00 	cmnmi.w	r0, #0
 8001066:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001068 <__aeabi_fcmpeq>:
 8001068:	f84d ed08 	str.w	lr, [sp, #-8]!
 800106c:	f7ff fff4 	bl	8001058 <__aeabi_cfcmpeq>
 8001070:	bf0c      	ite	eq
 8001072:	2001      	moveq	r0, #1
 8001074:	2000      	movne	r0, #0
 8001076:	f85d fb08 	ldr.w	pc, [sp], #8
 800107a:	bf00      	nop

0800107c <__aeabi_fcmplt>:
 800107c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001080:	f7ff ffea 	bl	8001058 <__aeabi_cfcmpeq>
 8001084:	bf34      	ite	cc
 8001086:	2001      	movcc	r0, #1
 8001088:	2000      	movcs	r0, #0
 800108a:	f85d fb08 	ldr.w	pc, [sp], #8
 800108e:	bf00      	nop

08001090 <__aeabi_fcmple>:
 8001090:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001094:	f7ff ffe0 	bl	8001058 <__aeabi_cfcmpeq>
 8001098:	bf94      	ite	ls
 800109a:	2001      	movls	r0, #1
 800109c:	2000      	movhi	r0, #0
 800109e:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a2:	bf00      	nop

080010a4 <__aeabi_fcmpge>:
 80010a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a8:	f7ff ffd2 	bl	8001050 <__aeabi_cfrcmple>
 80010ac:	bf94      	ite	ls
 80010ae:	2001      	movls	r0, #1
 80010b0:	2000      	movhi	r0, #0
 80010b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010b6:	bf00      	nop

080010b8 <__aeabi_fcmpgt>:
 80010b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010bc:	f7ff ffc8 	bl	8001050 <__aeabi_cfrcmple>
 80010c0:	bf34      	ite	cc
 80010c2:	2001      	movcc	r0, #1
 80010c4:	2000      	movcs	r0, #0
 80010c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ca:	bf00      	nop

080010cc <__aeabi_f2iz>:
 80010cc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010d4:	d30f      	bcc.n	80010f6 <__aeabi_f2iz+0x2a>
 80010d6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010da:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010de:	d90d      	bls.n	80010fc <__aeabi_f2iz+0x30>
 80010e0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010e8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010ec:	fa23 f002 	lsr.w	r0, r3, r2
 80010f0:	bf18      	it	ne
 80010f2:	4240      	negne	r0, r0
 80010f4:	4770      	bx	lr
 80010f6:	f04f 0000 	mov.w	r0, #0
 80010fa:	4770      	bx	lr
 80010fc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001100:	d101      	bne.n	8001106 <__aeabi_f2iz+0x3a>
 8001102:	0242      	lsls	r2, r0, #9
 8001104:	d105      	bne.n	8001112 <__aeabi_f2iz+0x46>
 8001106:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800110a:	bf08      	it	eq
 800110c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001110:	4770      	bx	lr
 8001112:	f04f 0000 	mov.w	r0, #0
 8001116:	4770      	bx	lr

08001118 <__aeabi_f2uiz>:
 8001118:	0042      	lsls	r2, r0, #1
 800111a:	d20e      	bcs.n	800113a <__aeabi_f2uiz+0x22>
 800111c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001120:	d30b      	bcc.n	800113a <__aeabi_f2uiz+0x22>
 8001122:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001126:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800112a:	d409      	bmi.n	8001140 <__aeabi_f2uiz+0x28>
 800112c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001130:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001134:	fa23 f002 	lsr.w	r0, r3, r2
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr
 8001140:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001144:	d101      	bne.n	800114a <__aeabi_f2uiz+0x32>
 8001146:	0242      	lsls	r2, r0, #9
 8001148:	d102      	bne.n	8001150 <__aeabi_f2uiz+0x38>
 800114a:	f04f 30ff 	mov.w	r0, #4294967295
 800114e:	4770      	bx	lr
 8001150:	f04f 0000 	mov.w	r0, #0
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop

08001158 <__aeabi_uldivmod>:
 8001158:	b953      	cbnz	r3, 8001170 <__aeabi_uldivmod+0x18>
 800115a:	b94a      	cbnz	r2, 8001170 <__aeabi_uldivmod+0x18>
 800115c:	2900      	cmp	r1, #0
 800115e:	bf08      	it	eq
 8001160:	2800      	cmpeq	r0, #0
 8001162:	bf1c      	itt	ne
 8001164:	f04f 31ff 	movne.w	r1, #4294967295
 8001168:	f04f 30ff 	movne.w	r0, #4294967295
 800116c:	f000 b970 	b.w	8001450 <__aeabi_idiv0>
 8001170:	f1ad 0c08 	sub.w	ip, sp, #8
 8001174:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001178:	f000 f806 	bl	8001188 <__udivmoddi4>
 800117c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001180:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001184:	b004      	add	sp, #16
 8001186:	4770      	bx	lr

08001188 <__udivmoddi4>:
 8001188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800118c:	9e08      	ldr	r6, [sp, #32]
 800118e:	460d      	mov	r5, r1
 8001190:	4604      	mov	r4, r0
 8001192:	460f      	mov	r7, r1
 8001194:	2b00      	cmp	r3, #0
 8001196:	d14a      	bne.n	800122e <__udivmoddi4+0xa6>
 8001198:	428a      	cmp	r2, r1
 800119a:	4694      	mov	ip, r2
 800119c:	d965      	bls.n	800126a <__udivmoddi4+0xe2>
 800119e:	fab2 f382 	clz	r3, r2
 80011a2:	b143      	cbz	r3, 80011b6 <__udivmoddi4+0x2e>
 80011a4:	fa02 fc03 	lsl.w	ip, r2, r3
 80011a8:	f1c3 0220 	rsb	r2, r3, #32
 80011ac:	409f      	lsls	r7, r3
 80011ae:	fa20 f202 	lsr.w	r2, r0, r2
 80011b2:	4317      	orrs	r7, r2
 80011b4:	409c      	lsls	r4, r3
 80011b6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80011ba:	fa1f f58c 	uxth.w	r5, ip
 80011be:	fbb7 f1fe 	udiv	r1, r7, lr
 80011c2:	0c22      	lsrs	r2, r4, #16
 80011c4:	fb0e 7711 	mls	r7, lr, r1, r7
 80011c8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80011cc:	fb01 f005 	mul.w	r0, r1, r5
 80011d0:	4290      	cmp	r0, r2
 80011d2:	d90a      	bls.n	80011ea <__udivmoddi4+0x62>
 80011d4:	eb1c 0202 	adds.w	r2, ip, r2
 80011d8:	f101 37ff 	add.w	r7, r1, #4294967295
 80011dc:	f080 811b 	bcs.w	8001416 <__udivmoddi4+0x28e>
 80011e0:	4290      	cmp	r0, r2
 80011e2:	f240 8118 	bls.w	8001416 <__udivmoddi4+0x28e>
 80011e6:	3902      	subs	r1, #2
 80011e8:	4462      	add	r2, ip
 80011ea:	1a12      	subs	r2, r2, r0
 80011ec:	b2a4      	uxth	r4, r4
 80011ee:	fbb2 f0fe 	udiv	r0, r2, lr
 80011f2:	fb0e 2210 	mls	r2, lr, r0, r2
 80011f6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80011fa:	fb00 f505 	mul.w	r5, r0, r5
 80011fe:	42a5      	cmp	r5, r4
 8001200:	d90a      	bls.n	8001218 <__udivmoddi4+0x90>
 8001202:	eb1c 0404 	adds.w	r4, ip, r4
 8001206:	f100 32ff 	add.w	r2, r0, #4294967295
 800120a:	f080 8106 	bcs.w	800141a <__udivmoddi4+0x292>
 800120e:	42a5      	cmp	r5, r4
 8001210:	f240 8103 	bls.w	800141a <__udivmoddi4+0x292>
 8001214:	4464      	add	r4, ip
 8001216:	3802      	subs	r0, #2
 8001218:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800121c:	1b64      	subs	r4, r4, r5
 800121e:	2100      	movs	r1, #0
 8001220:	b11e      	cbz	r6, 800122a <__udivmoddi4+0xa2>
 8001222:	40dc      	lsrs	r4, r3
 8001224:	2300      	movs	r3, #0
 8001226:	e9c6 4300 	strd	r4, r3, [r6]
 800122a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800122e:	428b      	cmp	r3, r1
 8001230:	d908      	bls.n	8001244 <__udivmoddi4+0xbc>
 8001232:	2e00      	cmp	r6, #0
 8001234:	f000 80ec 	beq.w	8001410 <__udivmoddi4+0x288>
 8001238:	2100      	movs	r1, #0
 800123a:	e9c6 0500 	strd	r0, r5, [r6]
 800123e:	4608      	mov	r0, r1
 8001240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001244:	fab3 f183 	clz	r1, r3
 8001248:	2900      	cmp	r1, #0
 800124a:	d149      	bne.n	80012e0 <__udivmoddi4+0x158>
 800124c:	42ab      	cmp	r3, r5
 800124e:	d302      	bcc.n	8001256 <__udivmoddi4+0xce>
 8001250:	4282      	cmp	r2, r0
 8001252:	f200 80f7 	bhi.w	8001444 <__udivmoddi4+0x2bc>
 8001256:	1a84      	subs	r4, r0, r2
 8001258:	eb65 0203 	sbc.w	r2, r5, r3
 800125c:	2001      	movs	r0, #1
 800125e:	4617      	mov	r7, r2
 8001260:	2e00      	cmp	r6, #0
 8001262:	d0e2      	beq.n	800122a <__udivmoddi4+0xa2>
 8001264:	e9c6 4700 	strd	r4, r7, [r6]
 8001268:	e7df      	b.n	800122a <__udivmoddi4+0xa2>
 800126a:	b902      	cbnz	r2, 800126e <__udivmoddi4+0xe6>
 800126c:	deff      	udf	#255	; 0xff
 800126e:	fab2 f382 	clz	r3, r2
 8001272:	2b00      	cmp	r3, #0
 8001274:	f040 808f 	bne.w	8001396 <__udivmoddi4+0x20e>
 8001278:	1a8a      	subs	r2, r1, r2
 800127a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800127e:	fa1f fe8c 	uxth.w	lr, ip
 8001282:	2101      	movs	r1, #1
 8001284:	fbb2 f5f7 	udiv	r5, r2, r7
 8001288:	fb07 2015 	mls	r0, r7, r5, r2
 800128c:	0c22      	lsrs	r2, r4, #16
 800128e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8001292:	fb0e f005 	mul.w	r0, lr, r5
 8001296:	4290      	cmp	r0, r2
 8001298:	d908      	bls.n	80012ac <__udivmoddi4+0x124>
 800129a:	eb1c 0202 	adds.w	r2, ip, r2
 800129e:	f105 38ff 	add.w	r8, r5, #4294967295
 80012a2:	d202      	bcs.n	80012aa <__udivmoddi4+0x122>
 80012a4:	4290      	cmp	r0, r2
 80012a6:	f200 80ca 	bhi.w	800143e <__udivmoddi4+0x2b6>
 80012aa:	4645      	mov	r5, r8
 80012ac:	1a12      	subs	r2, r2, r0
 80012ae:	b2a4      	uxth	r4, r4
 80012b0:	fbb2 f0f7 	udiv	r0, r2, r7
 80012b4:	fb07 2210 	mls	r2, r7, r0, r2
 80012b8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80012bc:	fb0e fe00 	mul.w	lr, lr, r0
 80012c0:	45a6      	cmp	lr, r4
 80012c2:	d908      	bls.n	80012d6 <__udivmoddi4+0x14e>
 80012c4:	eb1c 0404 	adds.w	r4, ip, r4
 80012c8:	f100 32ff 	add.w	r2, r0, #4294967295
 80012cc:	d202      	bcs.n	80012d4 <__udivmoddi4+0x14c>
 80012ce:	45a6      	cmp	lr, r4
 80012d0:	f200 80ba 	bhi.w	8001448 <__udivmoddi4+0x2c0>
 80012d4:	4610      	mov	r0, r2
 80012d6:	eba4 040e 	sub.w	r4, r4, lr
 80012da:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80012de:	e79f      	b.n	8001220 <__udivmoddi4+0x98>
 80012e0:	f1c1 0720 	rsb	r7, r1, #32
 80012e4:	408b      	lsls	r3, r1
 80012e6:	fa22 fc07 	lsr.w	ip, r2, r7
 80012ea:	ea4c 0c03 	orr.w	ip, ip, r3
 80012ee:	fa05 f401 	lsl.w	r4, r5, r1
 80012f2:	fa20 f307 	lsr.w	r3, r0, r7
 80012f6:	40fd      	lsrs	r5, r7
 80012f8:	4323      	orrs	r3, r4
 80012fa:	fa00 f901 	lsl.w	r9, r0, r1
 80012fe:	ea4f 401c 	mov.w	r0, ip, lsr #16
 8001302:	fa1f fe8c 	uxth.w	lr, ip
 8001306:	fbb5 f8f0 	udiv	r8, r5, r0
 800130a:	0c1c      	lsrs	r4, r3, #16
 800130c:	fb00 5518 	mls	r5, r0, r8, r5
 8001310:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001314:	fb08 f50e 	mul.w	r5, r8, lr
 8001318:	42a5      	cmp	r5, r4
 800131a:	fa02 f201 	lsl.w	r2, r2, r1
 800131e:	d90b      	bls.n	8001338 <__udivmoddi4+0x1b0>
 8001320:	eb1c 0404 	adds.w	r4, ip, r4
 8001324:	f108 3aff 	add.w	sl, r8, #4294967295
 8001328:	f080 8087 	bcs.w	800143a <__udivmoddi4+0x2b2>
 800132c:	42a5      	cmp	r5, r4
 800132e:	f240 8084 	bls.w	800143a <__udivmoddi4+0x2b2>
 8001332:	f1a8 0802 	sub.w	r8, r8, #2
 8001336:	4464      	add	r4, ip
 8001338:	1b64      	subs	r4, r4, r5
 800133a:	b29d      	uxth	r5, r3
 800133c:	fbb4 f3f0 	udiv	r3, r4, r0
 8001340:	fb00 4413 	mls	r4, r0, r3, r4
 8001344:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001348:	fb03 fe0e 	mul.w	lr, r3, lr
 800134c:	45a6      	cmp	lr, r4
 800134e:	d908      	bls.n	8001362 <__udivmoddi4+0x1da>
 8001350:	eb1c 0404 	adds.w	r4, ip, r4
 8001354:	f103 30ff 	add.w	r0, r3, #4294967295
 8001358:	d26b      	bcs.n	8001432 <__udivmoddi4+0x2aa>
 800135a:	45a6      	cmp	lr, r4
 800135c:	d969      	bls.n	8001432 <__udivmoddi4+0x2aa>
 800135e:	3b02      	subs	r3, #2
 8001360:	4464      	add	r4, ip
 8001362:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001366:	fba0 8302 	umull	r8, r3, r0, r2
 800136a:	eba4 040e 	sub.w	r4, r4, lr
 800136e:	429c      	cmp	r4, r3
 8001370:	46c6      	mov	lr, r8
 8001372:	461d      	mov	r5, r3
 8001374:	d355      	bcc.n	8001422 <__udivmoddi4+0x29a>
 8001376:	d052      	beq.n	800141e <__udivmoddi4+0x296>
 8001378:	b156      	cbz	r6, 8001390 <__udivmoddi4+0x208>
 800137a:	ebb9 030e 	subs.w	r3, r9, lr
 800137e:	eb64 0405 	sbc.w	r4, r4, r5
 8001382:	fa04 f707 	lsl.w	r7, r4, r7
 8001386:	40cb      	lsrs	r3, r1
 8001388:	40cc      	lsrs	r4, r1
 800138a:	431f      	orrs	r7, r3
 800138c:	e9c6 7400 	strd	r7, r4, [r6]
 8001390:	2100      	movs	r1, #0
 8001392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001396:	f1c3 0120 	rsb	r1, r3, #32
 800139a:	fa02 fc03 	lsl.w	ip, r2, r3
 800139e:	fa20 f201 	lsr.w	r2, r0, r1
 80013a2:	fa25 f101 	lsr.w	r1, r5, r1
 80013a6:	409d      	lsls	r5, r3
 80013a8:	432a      	orrs	r2, r5
 80013aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80013ae:	fa1f fe8c 	uxth.w	lr, ip
 80013b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80013b6:	fb07 1510 	mls	r5, r7, r0, r1
 80013ba:	0c11      	lsrs	r1, r2, #16
 80013bc:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80013c0:	fb00 f50e 	mul.w	r5, r0, lr
 80013c4:	428d      	cmp	r5, r1
 80013c6:	fa04 f403 	lsl.w	r4, r4, r3
 80013ca:	d908      	bls.n	80013de <__udivmoddi4+0x256>
 80013cc:	eb1c 0101 	adds.w	r1, ip, r1
 80013d0:	f100 38ff 	add.w	r8, r0, #4294967295
 80013d4:	d22f      	bcs.n	8001436 <__udivmoddi4+0x2ae>
 80013d6:	428d      	cmp	r5, r1
 80013d8:	d92d      	bls.n	8001436 <__udivmoddi4+0x2ae>
 80013da:	3802      	subs	r0, #2
 80013dc:	4461      	add	r1, ip
 80013de:	1b49      	subs	r1, r1, r5
 80013e0:	b292      	uxth	r2, r2
 80013e2:	fbb1 f5f7 	udiv	r5, r1, r7
 80013e6:	fb07 1115 	mls	r1, r7, r5, r1
 80013ea:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80013ee:	fb05 f10e 	mul.w	r1, r5, lr
 80013f2:	4291      	cmp	r1, r2
 80013f4:	d908      	bls.n	8001408 <__udivmoddi4+0x280>
 80013f6:	eb1c 0202 	adds.w	r2, ip, r2
 80013fa:	f105 38ff 	add.w	r8, r5, #4294967295
 80013fe:	d216      	bcs.n	800142e <__udivmoddi4+0x2a6>
 8001400:	4291      	cmp	r1, r2
 8001402:	d914      	bls.n	800142e <__udivmoddi4+0x2a6>
 8001404:	3d02      	subs	r5, #2
 8001406:	4462      	add	r2, ip
 8001408:	1a52      	subs	r2, r2, r1
 800140a:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800140e:	e739      	b.n	8001284 <__udivmoddi4+0xfc>
 8001410:	4631      	mov	r1, r6
 8001412:	4630      	mov	r0, r6
 8001414:	e709      	b.n	800122a <__udivmoddi4+0xa2>
 8001416:	4639      	mov	r1, r7
 8001418:	e6e7      	b.n	80011ea <__udivmoddi4+0x62>
 800141a:	4610      	mov	r0, r2
 800141c:	e6fc      	b.n	8001218 <__udivmoddi4+0x90>
 800141e:	45c1      	cmp	r9, r8
 8001420:	d2aa      	bcs.n	8001378 <__udivmoddi4+0x1f0>
 8001422:	ebb8 0e02 	subs.w	lr, r8, r2
 8001426:	eb63 050c 	sbc.w	r5, r3, ip
 800142a:	3801      	subs	r0, #1
 800142c:	e7a4      	b.n	8001378 <__udivmoddi4+0x1f0>
 800142e:	4645      	mov	r5, r8
 8001430:	e7ea      	b.n	8001408 <__udivmoddi4+0x280>
 8001432:	4603      	mov	r3, r0
 8001434:	e795      	b.n	8001362 <__udivmoddi4+0x1da>
 8001436:	4640      	mov	r0, r8
 8001438:	e7d1      	b.n	80013de <__udivmoddi4+0x256>
 800143a:	46d0      	mov	r8, sl
 800143c:	e77c      	b.n	8001338 <__udivmoddi4+0x1b0>
 800143e:	3d02      	subs	r5, #2
 8001440:	4462      	add	r2, ip
 8001442:	e733      	b.n	80012ac <__udivmoddi4+0x124>
 8001444:	4608      	mov	r0, r1
 8001446:	e70b      	b.n	8001260 <__udivmoddi4+0xd8>
 8001448:	4464      	add	r4, ip
 800144a:	3802      	subs	r0, #2
 800144c:	e743      	b.n	80012d6 <__udivmoddi4+0x14e>
 800144e:	bf00      	nop

08001450 <__aeabi_idiv0>:
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	0000      	movs	r0, r0
	...

08001458 <process_temp_code>:
static uint16_t convert_to_uint16(uint8_t bytes[]);
static int8_t w_reg(uint8_t value, Si7021_registers_t reg);
static int8_t r_reg(Si7021_registers_t reg);

static float process_temp_code(uint16_t temp_code)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	80fb      	strh	r3, [r7, #6]
  return (float)(((175.72 * temp_code) / 65536.0) - 46.85);
 8001462:	88fb      	ldrh	r3, [r7, #6]
 8001464:	4618      	mov	r0, r3
 8001466:	f7fe ffe1 	bl	800042c <__aeabi_i2d>
 800146a:	a311      	add	r3, pc, #68	; (adr r3, 80014b0 <process_temp_code+0x58>)
 800146c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001470:	f7ff f846 	bl	8000500 <__aeabi_dmul>
 8001474:	4602      	mov	r2, r0
 8001476:	460b      	mov	r3, r1
 8001478:	4610      	mov	r0, r2
 800147a:	4619      	mov	r1, r3
 800147c:	f04f 0200 	mov.w	r2, #0
 8001480:	4b0f      	ldr	r3, [pc, #60]	; (80014c0 <process_temp_code+0x68>)
 8001482:	f7ff f967 	bl	8000754 <__aeabi_ddiv>
 8001486:	4602      	mov	r2, r0
 8001488:	460b      	mov	r3, r1
 800148a:	4610      	mov	r0, r2
 800148c:	4619      	mov	r1, r3
 800148e:	a30a      	add	r3, pc, #40	; (adr r3, 80014b8 <process_temp_code+0x60>)
 8001490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001494:	f7fe fe7c 	bl	8000190 <__aeabi_dsub>
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
 800149c:	4610      	mov	r0, r2
 800149e:	4619      	mov	r1, r3
 80014a0:	f7ff faf0 	bl	8000a84 <__aeabi_d2f>
 80014a4:	4603      	mov	r3, r0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	3d70a3d7 	.word	0x3d70a3d7
 80014b4:	4065f70a 	.word	0x4065f70a
 80014b8:	cccccccd 	.word	0xcccccccd
 80014bc:	40476ccc 	.word	0x40476ccc
 80014c0:	40f00000 	.word	0x40f00000

080014c4 <process_humi_code>:

static float process_humi_code(uint16_t humi_code)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	80fb      	strh	r3, [r7, #6]
  float value = (float)(((125.0 * humi_code) / 65536.0) - 6.0);
 80014ce:	88fb      	ldrh	r3, [r7, #6]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7fe ffab 	bl	800042c <__aeabi_i2d>
 80014d6:	f04f 0200 	mov.w	r2, #0
 80014da:	4b1b      	ldr	r3, [pc, #108]	; (8001548 <process_humi_code+0x84>)
 80014dc:	f7ff f810 	bl	8000500 <__aeabi_dmul>
 80014e0:	4602      	mov	r2, r0
 80014e2:	460b      	mov	r3, r1
 80014e4:	4610      	mov	r0, r2
 80014e6:	4619      	mov	r1, r3
 80014e8:	f04f 0200 	mov.w	r2, #0
 80014ec:	4b17      	ldr	r3, [pc, #92]	; (800154c <process_humi_code+0x88>)
 80014ee:	f7ff f931 	bl	8000754 <__aeabi_ddiv>
 80014f2:	4602      	mov	r2, r0
 80014f4:	460b      	mov	r3, r1
 80014f6:	4610      	mov	r0, r2
 80014f8:	4619      	mov	r1, r3
 80014fa:	f04f 0200 	mov.w	r2, #0
 80014fe:	4b14      	ldr	r3, [pc, #80]	; (8001550 <process_humi_code+0x8c>)
 8001500:	f7fe fe46 	bl	8000190 <__aeabi_dsub>
 8001504:	4602      	mov	r2, r0
 8001506:	460b      	mov	r3, r1
 8001508:	4610      	mov	r0, r2
 800150a:	4619      	mov	r1, r3
 800150c:	f7ff faba 	bl	8000a84 <__aeabi_d2f>
 8001510:	4603      	mov	r3, r0
 8001512:	60fb      	str	r3, [r7, #12]

  if(value < 0)
 8001514:	f04f 0100 	mov.w	r1, #0
 8001518:	68f8      	ldr	r0, [r7, #12]
 800151a:	f7ff fdaf 	bl	800107c <__aeabi_fcmplt>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d002      	beq.n	800152a <process_humi_code+0x66>
    return 0;
 8001524:	f04f 0300 	mov.w	r3, #0
 8001528:	e009      	b.n	800153e <process_humi_code+0x7a>
  else if(value > 100)
 800152a:	490a      	ldr	r1, [pc, #40]	; (8001554 <process_humi_code+0x90>)
 800152c:	68f8      	ldr	r0, [r7, #12]
 800152e:	f7ff fdc3 	bl	80010b8 <__aeabi_fcmpgt>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <process_humi_code+0x78>
    return 100;
 8001538:	4b06      	ldr	r3, [pc, #24]	; (8001554 <process_humi_code+0x90>)
 800153a:	e000      	b.n	800153e <process_humi_code+0x7a>
  else
    return (float)value;
 800153c:	68fb      	ldr	r3, [r7, #12]
}
 800153e:	4618      	mov	r0, r3
 8001540:	3710      	adds	r7, #16
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	405f4000 	.word	0x405f4000
 800154c:	40f00000 	.word	0x40f00000
 8001550:	40180000 	.word	0x40180000
 8001554:	42c80000 	.word	0x42c80000

08001558 <convert_to_uint16>:

static uint16_t convert_to_uint16(uint8_t bytes[])
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  return (uint16_t)((bytes[0]<<8) | bytes[1]);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	021b      	lsls	r3, r3, #8
 8001566:	b21a      	sxth	r2, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	3301      	adds	r3, #1
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	b21b      	sxth	r3, r3
 8001570:	4313      	orrs	r3, r2
 8001572:	b21b      	sxth	r3, r3
 8001574:	b29b      	uxth	r3, r3
}
 8001576:	4618      	mov	r0, r3
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	bc80      	pop	{r7}
 800157e:	4770      	bx	lr

08001580 <w_reg>:
  else
    return 0;
}

static int8_t w_reg(uint8_t value, Si7021_registers_t reg)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b088      	sub	sp, #32
 8001584:	af04      	add	r7, sp, #16
 8001586:	4603      	mov	r3, r0
 8001588:	460a      	mov	r2, r1
 800158a:	71fb      	strb	r3, [r7, #7]
 800158c:	4613      	mov	r3, r2
 800158e:	71bb      	strb	r3, [r7, #6]
  uint16_t cmd;

  if(reg == User_Register_1)
 8001590:	79bb      	ldrb	r3, [r7, #6]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d102      	bne.n	800159c <w_reg+0x1c>
  {
    cmd = W_RHT_U_reg;
 8001596:	23e6      	movs	r3, #230	; 0xe6
 8001598:	81fb      	strh	r3, [r7, #14]
 800159a:	e008      	b.n	80015ae <w_reg+0x2e>
  }
  else if(reg == Heater_Control_Register)
 800159c:	79bb      	ldrb	r3, [r7, #6]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d102      	bne.n	80015a8 <w_reg+0x28>
  {
    cmd = W_Heater_C_reg;
 80015a2:	2351      	movs	r3, #81	; 0x51
 80015a4:	81fb      	strh	r3, [r7, #14]
 80015a6:	e002      	b.n	80015ae <w_reg+0x2e>
  }
  else
    return -1;
 80015a8:	f04f 33ff 	mov.w	r3, #4294967295
 80015ac:	e013      	b.n	80015d6 <w_reg+0x56>

  if(HAL_OK != HAL_I2C_Mem_Write(&hi2c3, I2C_ADDR, cmd, 1, &value, 1, 10000))
 80015ae:	2180      	movs	r1, #128	; 0x80
 80015b0:	89fa      	ldrh	r2, [r7, #14]
 80015b2:	f242 7310 	movw	r3, #10000	; 0x2710
 80015b6:	9302      	str	r3, [sp, #8]
 80015b8:	2301      	movs	r3, #1
 80015ba:	9301      	str	r3, [sp, #4]
 80015bc:	1dfb      	adds	r3, r7, #7
 80015be:	9300      	str	r3, [sp, #0]
 80015c0:	2301      	movs	r3, #1
 80015c2:	4807      	ldr	r0, [pc, #28]	; (80015e0 <w_reg+0x60>)
 80015c4:	f004 fca8 	bl	8005f18 <HAL_I2C_Mem_Write>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d002      	beq.n	80015d4 <w_reg+0x54>
    return -1;
 80015ce:	f04f 33ff 	mov.w	r3, #4294967295
 80015d2:	e000      	b.n	80015d6 <w_reg+0x56>
  else
    return 0;
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3710      	adds	r7, #16
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	200001d0 	.word	0x200001d0

080015e4 <r_both_Si7021>:

  return 0;
}

int8_t r_both_Si7021(float* humidity, float* temperature)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af02      	add	r7, sp, #8
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	6039      	str	r1, [r7, #0]
  uint8_t cmd = Humi_HM;
 80015ee:	23e5      	movs	r3, #229	; 0xe5
 80015f0:	737b      	strb	r3, [r7, #13]
  uint8_t buffer[2];
  uint16_t code;

  if(HAL_OK != HAL_I2C_Master_Transmit(&hi2c3, I2C_ADDR, &cmd, 1, 10000))
 80015f2:	2180      	movs	r1, #128	; 0x80
 80015f4:	f107 020d 	add.w	r2, r7, #13
 80015f8:	f242 7310 	movw	r3, #10000	; 0x2710
 80015fc:	9300      	str	r3, [sp, #0]
 80015fe:	2301      	movs	r3, #1
 8001600:	482d      	ldr	r0, [pc, #180]	; (80016b8 <r_both_Si7021+0xd4>)
 8001602:	f004 fa9f 	bl	8005b44 <HAL_I2C_Master_Transmit>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d002      	beq.n	8001612 <r_both_Si7021+0x2e>
    return -1;
 800160c:	f04f 33ff 	mov.w	r3, #4294967295
 8001610:	e04e      	b.n	80016b0 <r_both_Si7021+0xcc>

  if(HAL_OK != HAL_I2C_Master_Receive(&hi2c3, I2C_ADDR, buffer, 2, 10000))
 8001612:	2180      	movs	r1, #128	; 0x80
 8001614:	f107 0208 	add.w	r2, r7, #8
 8001618:	f242 7310 	movw	r3, #10000	; 0x2710
 800161c:	9300      	str	r3, [sp, #0]
 800161e:	2302      	movs	r3, #2
 8001620:	4825      	ldr	r0, [pc, #148]	; (80016b8 <r_both_Si7021+0xd4>)
 8001622:	f004 fb83 	bl	8005d2c <HAL_I2C_Master_Receive>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d002      	beq.n	8001632 <r_both_Si7021+0x4e>
    return -1;
 800162c:	f04f 33ff 	mov.w	r3, #4294967295
 8001630:	e03e      	b.n	80016b0 <r_both_Si7021+0xcc>

  code = convert_to_uint16(buffer);
 8001632:	f107 0308 	add.w	r3, r7, #8
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff ff8e 	bl	8001558 <convert_to_uint16>
 800163c:	4603      	mov	r3, r0
 800163e:	81fb      	strh	r3, [r7, #14]
  *humidity = process_humi_code(code);
 8001640:	89fb      	ldrh	r3, [r7, #14]
 8001642:	4618      	mov	r0, r3
 8001644:	f7ff ff3e 	bl	80014c4 <process_humi_code>
 8001648:	4602      	mov	r2, r0
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	601a      	str	r2, [r3, #0]

  /* There is a temperature measurement with each RH measurement */
  cmd = Temp_AH;
 800164e:	23e0      	movs	r3, #224	; 0xe0
 8001650:	737b      	strb	r3, [r7, #13]

  if(HAL_OK != HAL_I2C_Master_Transmit(&hi2c3, I2C_ADDR, &cmd, 1, 10000))
 8001652:	2180      	movs	r1, #128	; 0x80
 8001654:	f107 020d 	add.w	r2, r7, #13
 8001658:	f242 7310 	movw	r3, #10000	; 0x2710
 800165c:	9300      	str	r3, [sp, #0]
 800165e:	2301      	movs	r3, #1
 8001660:	4815      	ldr	r0, [pc, #84]	; (80016b8 <r_both_Si7021+0xd4>)
 8001662:	f004 fa6f 	bl	8005b44 <HAL_I2C_Master_Transmit>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d002      	beq.n	8001672 <r_both_Si7021+0x8e>
    return -1;
 800166c:	f04f 33ff 	mov.w	r3, #4294967295
 8001670:	e01e      	b.n	80016b0 <r_both_Si7021+0xcc>

  if(HAL_OK != HAL_I2C_Master_Receive(&hi2c3, I2C_ADDR, buffer, 2, 10000))
 8001672:	2180      	movs	r1, #128	; 0x80
 8001674:	f107 0208 	add.w	r2, r7, #8
 8001678:	f242 7310 	movw	r3, #10000	; 0x2710
 800167c:	9300      	str	r3, [sp, #0]
 800167e:	2302      	movs	r3, #2
 8001680:	480d      	ldr	r0, [pc, #52]	; (80016b8 <r_both_Si7021+0xd4>)
 8001682:	f004 fb53 	bl	8005d2c <HAL_I2C_Master_Receive>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d002      	beq.n	8001692 <r_both_Si7021+0xae>
    return -1;
 800168c:	f04f 33ff 	mov.w	r3, #4294967295
 8001690:	e00e      	b.n	80016b0 <r_both_Si7021+0xcc>

  code = convert_to_uint16(buffer);
 8001692:	f107 0308 	add.w	r3, r7, #8
 8001696:	4618      	mov	r0, r3
 8001698:	f7ff ff5e 	bl	8001558 <convert_to_uint16>
 800169c:	4603      	mov	r3, r0
 800169e:	81fb      	strh	r3, [r7, #14]
  *temperature = process_temp_code(code);
 80016a0:	89fb      	ldrh	r3, [r7, #14]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7ff fed8 	bl	8001458 <process_temp_code>
 80016a8:	4602      	mov	r2, r0
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	601a      	str	r2, [r3, #0]

  return 0;
 80016ae:	2300      	movs	r3, #0
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3710      	adds	r7, #16
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	200001d0 	.word	0x200001d0

080016bc <enable_heater_Si7021>:
  else
    return 0;
}

int8_t enable_heater_Si7021(uint8_t val)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	71fb      	strb	r3, [r7, #7]
  int8_t rv;
  uint8_t temp = user_register_1;
 80016c6:	4b19      	ldr	r3, [pc, #100]	; (800172c <enable_heater_Si7021+0x70>)
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	73bb      	strb	r3, [r7, #14]

  if(val == 0)
 80016cc:	79fb      	ldrb	r3, [r7, #7]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d10f      	bne.n	80016f2 <enable_heater_Si7021+0x36>
  {
    user_register_1 &= ~(1<<HTRE);
 80016d2:	4b16      	ldr	r3, [pc, #88]	; (800172c <enable_heater_Si7021+0x70>)
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	f023 0304 	bic.w	r3, r3, #4
 80016da:	b2da      	uxtb	r2, r3
 80016dc:	4b13      	ldr	r3, [pc, #76]	; (800172c <enable_heater_Si7021+0x70>)
 80016de:	701a      	strb	r2, [r3, #0]
    rv = w_reg(user_register_1, User_Register_1);
 80016e0:	4b12      	ldr	r3, [pc, #72]	; (800172c <enable_heater_Si7021+0x70>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	2100      	movs	r1, #0
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff ff4a 	bl	8001580 <w_reg>
 80016ec:	4603      	mov	r3, r0
 80016ee:	73fb      	strb	r3, [r7, #15]
 80016f0:	e00e      	b.n	8001710 <enable_heater_Si7021+0x54>
  }
  else
  {
    user_register_1 |= (1<<HTRE);
 80016f2:	4b0e      	ldr	r3, [pc, #56]	; (800172c <enable_heater_Si7021+0x70>)
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	f043 0304 	orr.w	r3, r3, #4
 80016fa:	b2da      	uxtb	r2, r3
 80016fc:	4b0b      	ldr	r3, [pc, #44]	; (800172c <enable_heater_Si7021+0x70>)
 80016fe:	701a      	strb	r2, [r3, #0]
    rv = w_reg(user_register_1, User_Register_1);
 8001700:	4b0a      	ldr	r3, [pc, #40]	; (800172c <enable_heater_Si7021+0x70>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	2100      	movs	r1, #0
 8001706:	4618      	mov	r0, r3
 8001708:	f7ff ff3a 	bl	8001580 <w_reg>
 800170c:	4603      	mov	r3, r0
 800170e:	73fb      	strb	r3, [r7, #15]
  }

  /* in case of write error restore local copy of the register value */
  if(rv < 0)
 8001710:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001714:	2b00      	cmp	r3, #0
 8001716:	da02      	bge.n	800171e <enable_heater_Si7021+0x62>
    user_register_1 = temp;
 8001718:	4a04      	ldr	r2, [pc, #16]	; (800172c <enable_heater_Si7021+0x70>)
 800171a:	7bbb      	ldrb	r3, [r7, #14]
 800171c:	7013      	strb	r3, [r2, #0]

  return rv;
 800171e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001722:	4618      	mov	r0, r3
 8001724:	3710      	adds	r7, #16
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	20000000 	.word	0x20000000

08001730 <rst_Si7021>:

int8_t rst_Si7021()
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af02      	add	r7, sp, #8
  uint8_t cmd = Si7021_Reset;
 8001736:	23fe      	movs	r3, #254	; 0xfe
 8001738:	71fb      	strb	r3, [r7, #7]

  if(HAL_OK != HAL_I2C_Master_Transmit(&hi2c3, I2C_ADDR, &cmd, 1, 10000))
 800173a:	2180      	movs	r1, #128	; 0x80
 800173c:	1dfa      	adds	r2, r7, #7
 800173e:	f242 7310 	movw	r3, #10000	; 0x2710
 8001742:	9300      	str	r3, [sp, #0]
 8001744:	2301      	movs	r3, #1
 8001746:	4807      	ldr	r0, [pc, #28]	; (8001764 <rst_Si7021+0x34>)
 8001748:	f004 f9fc 	bl	8005b44 <HAL_I2C_Master_Transmit>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d002      	beq.n	8001758 <rst_Si7021+0x28>
    return -1;
 8001752:	f04f 33ff 	mov.w	r3, #4294967295
 8001756:	e000      	b.n	800175a <rst_Si7021+0x2a>
  else
    return 0;
 8001758:	2300      	movs	r3, #0
}
 800175a:	4618      	mov	r0, r3
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	200001d0 	.word	0x200001d0

08001768 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001770:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001774:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001776:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4313      	orrs	r3, r2
 800177e:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001780:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001784:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4013      	ands	r3, r2
 800178a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800178c:	68fb      	ldr	r3, [r7, #12]
}
 800178e:	bf00      	nop
 8001790:	3714      	adds	r7, #20
 8001792:	46bd      	mov	sp, r7
 8001794:	bc80      	pop	{r7}
 8001796:	4770      	bx	lr

08001798 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80017a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017a4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	43db      	mvns	r3, r3
 80017aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017ae:	4013      	ands	r3, r2
 80017b0:	660b      	str	r3, [r1, #96]	; 0x60
}
 80017b2:	bf00      	nop
 80017b4:	370c      	adds	r7, #12
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bc80      	pop	{r7}
 80017ba:	4770      	bx	lr

080017bc <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 80017c0:	4b23      	ldr	r3, [pc, #140]	; (8001850 <MX_ADC_Init+0x94>)
 80017c2:	4a24      	ldr	r2, [pc, #144]	; (8001854 <MX_ADC_Init+0x98>)
 80017c4:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80017c6:	4b22      	ldr	r3, [pc, #136]	; (8001850 <MX_ADC_Init+0x94>)
 80017c8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80017cc:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80017ce:	4b20      	ldr	r3, [pc, #128]	; (8001850 <MX_ADC_Init+0x94>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017d4:	4b1e      	ldr	r3, [pc, #120]	; (8001850 <MX_ADC_Init+0x94>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80017da:	4b1d      	ldr	r3, [pc, #116]	; (8001850 <MX_ADC_Init+0x94>)
 80017dc:	2200      	movs	r2, #0
 80017de:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017e0:	4b1b      	ldr	r3, [pc, #108]	; (8001850 <MX_ADC_Init+0x94>)
 80017e2:	2204      	movs	r2, #4
 80017e4:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80017e6:	4b1a      	ldr	r3, [pc, #104]	; (8001850 <MX_ADC_Init+0x94>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80017ec:	4b18      	ldr	r3, [pc, #96]	; (8001850 <MX_ADC_Init+0x94>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80017f2:	4b17      	ldr	r3, [pc, #92]	; (8001850 <MX_ADC_Init+0x94>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 80017f8:	4b15      	ldr	r3, [pc, #84]	; (8001850 <MX_ADC_Init+0x94>)
 80017fa:	2201      	movs	r2, #1
 80017fc:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80017fe:	4b14      	ldr	r3, [pc, #80]	; (8001850 <MX_ADC_Init+0x94>)
 8001800:	2200      	movs	r2, #0
 8001802:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001806:	4b12      	ldr	r3, [pc, #72]	; (8001850 <MX_ADC_Init+0x94>)
 8001808:	2200      	movs	r2, #0
 800180a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800180c:	4b10      	ldr	r3, [pc, #64]	; (8001850 <MX_ADC_Init+0x94>)
 800180e:	2200      	movs	r2, #0
 8001810:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001812:	4b0f      	ldr	r3, [pc, #60]	; (8001850 <MX_ADC_Init+0x94>)
 8001814:	2200      	movs	r2, #0
 8001816:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800181a:	4b0d      	ldr	r3, [pc, #52]	; (8001850 <MX_ADC_Init+0x94>)
 800181c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001820:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8001822:	4b0b      	ldr	r3, [pc, #44]	; (8001850 <MX_ADC_Init+0x94>)
 8001824:	2207      	movs	r2, #7
 8001826:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8001828:	4b09      	ldr	r3, [pc, #36]	; (8001850 <MX_ADC_Init+0x94>)
 800182a:	2207      	movs	r2, #7
 800182c:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 800182e:	4b08      	ldr	r3, [pc, #32]	; (8001850 <MX_ADC_Init+0x94>)
 8001830:	2200      	movs	r2, #0
 8001832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001836:	4b06      	ldr	r3, [pc, #24]	; (8001850 <MX_ADC_Init+0x94>)
 8001838:	2200      	movs	r2, #0
 800183a:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800183c:	4804      	ldr	r0, [pc, #16]	; (8001850 <MX_ADC_Init+0x94>)
 800183e:	f002 f893 	bl	8003968 <HAL_ADC_Init>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <MX_ADC_Init+0x90>
  {
    Error_Handler();
 8001848:	f000 fd1e 	bl	8002288 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800184c:	bf00      	nop
 800184e:	bd80      	pop	{r7, pc}
 8001850:	20000168 	.word	0x20000168
 8001854:	40012400 	.word	0x40012400

08001858 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a05      	ldr	r2, [pc, #20]	; (800187c <HAL_ADC_MspInit+0x24>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d103      	bne.n	8001872 <HAL_ADC_MspInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800186a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800186e:	f7ff ff7b 	bl	8001768 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8001872:	bf00      	nop
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40012400 	.word	0x40012400

08001880 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a05      	ldr	r2, [pc, #20]	; (80018a4 <HAL_ADC_MspDeInit+0x24>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d103      	bne.n	800189a <HAL_ADC_MspDeInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 8001892:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001896:	f7ff ff7f 	bl	8001798 <LL_APB2_GRP1_DisableClock>
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 800189a:	bf00      	nop
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40012400 	.word	0x40012400

080018a8 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 80018ac:	4b03      	ldr	r3, [pc, #12]	; (80018bc <SYS_InitMeasurement+0x14>)
 80018ae:	4a04      	ldr	r2, [pc, #16]	; (80018c0 <SYS_InitMeasurement+0x18>)
 80018b0:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 80018b2:	bf00      	nop
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bc80      	pop	{r7}
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	20000168 	.word	0x20000168
 80018c0:	40012400 	.word	0x40012400

080018c4 <SYS_GetBatteryLevel>:

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}

uint16_t SYS_GetBatteryLevel(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 80018ca:	2300      	movs	r3, #0
 80018cc:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 80018ce:	2300      	movs	r3, #0
 80018d0:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 80018d2:	4813      	ldr	r0, [pc, #76]	; (8001920 <SYS_GetBatteryLevel+0x5c>)
 80018d4:	f000 f82a 	bl	800192c <ADC_ReadChannels>
 80018d8:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d102      	bne.n	80018e6 <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 80018e0:	2300      	movs	r3, #0
 80018e2:	80fb      	strh	r3, [r7, #6]
 80018e4:	e016      	b.n	8001914 <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 80018e6:	4b0f      	ldr	r3, [pc, #60]	; (8001924 <SYS_GetBatteryLevel+0x60>)
 80018e8:	881b      	ldrh	r3, [r3, #0]
 80018ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d00b      	beq.n	800190a <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 80018f2:	4b0c      	ldr	r3, [pc, #48]	; (8001924 <SYS_GetBatteryLevel+0x60>)
 80018f4:	881b      	ldrh	r3, [r3, #0]
 80018f6:	461a      	mov	r2, r3
 80018f8:	f640 43e4 	movw	r3, #3300	; 0xce4
 80018fc:	fb03 f202 	mul.w	r2, r3, r2
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	fbb2 f3f3 	udiv	r3, r2, r3
 8001906:	80fb      	strh	r3, [r7, #6]
 8001908:	e004      	b.n	8001914 <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 800190a:	4a07      	ldr	r2, [pc, #28]	; (8001928 <SYS_GetBatteryLevel+0x64>)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001912:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 8001914:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 8001916:	4618      	mov	r0, r3
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	b4002000 	.word	0xb4002000
 8001924:	1fff75aa 	.word	0x1fff75aa
 8001928:	004c08d8 	.word	0x004c08d8

0800192c <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b086      	sub	sp, #24
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 8001934:	2300      	movs	r3, #0
 8001936:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001938:	f107 0308 	add.w	r3, r7, #8
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	605a      	str	r2, [r3, #4]
 8001942:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 8001944:	f7ff ff3a 	bl	80017bc <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8001948:	481a      	ldr	r0, [pc, #104]	; (80019b4 <ADC_ReadChannels+0x88>)
 800194a:	f002 fe2c 	bl	80045a6 <HAL_ADCEx_Calibration_Start>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 8001954:	f000 fc98 	bl	8002288 <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800195c:	2300      	movs	r3, #0
 800195e:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001960:	2300      	movs	r3, #0
 8001962:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001964:	f107 0308 	add.w	r3, r7, #8
 8001968:	4619      	mov	r1, r3
 800196a:	4812      	ldr	r0, [pc, #72]	; (80019b4 <ADC_ReadChannels+0x88>)
 800196c:	f002 fb38 	bl	8003fe0 <HAL_ADC_ConfigChannel>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 8001976:	f000 fc87 	bl	8002288 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 800197a:	480e      	ldr	r0, [pc, #56]	; (80019b4 <ADC_ReadChannels+0x88>)
 800197c:	f002 fa14 	bl	8003da8 <HAL_ADC_Start>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 8001986:	f000 fc7f 	bl	8002288 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 800198a:	f04f 31ff 	mov.w	r1, #4294967295
 800198e:	4809      	ldr	r0, [pc, #36]	; (80019b4 <ADC_ReadChannels+0x88>)
 8001990:	f002 fa82 	bl	8003e98 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 8001994:	4807      	ldr	r0, [pc, #28]	; (80019b4 <ADC_ReadChannels+0x88>)
 8001996:	f002 fa4d 	bl	8003e34 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 800199a:	4806      	ldr	r0, [pc, #24]	; (80019b4 <ADC_ReadChannels+0x88>)
 800199c:	f002 fb13 	bl	8003fc6 <HAL_ADC_GetValue>
 80019a0:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 80019a2:	4804      	ldr	r0, [pc, #16]	; (80019b4 <ADC_ReadChannels+0x88>)
 80019a4:	f002 f974 	bl	8003c90 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 80019a8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3718      	adds	r7, #24
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	20000168 	.word	0x20000168

080019b8 <LL_AHB1_GRP1_EnableClock>:
{
 80019b8:	b480      	push	{r7}
 80019ba:	b085      	sub	sp, #20
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80019c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80019c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80019d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019d4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4013      	ands	r3, r2
 80019da:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019dc:	68fb      	ldr	r3, [r7, #12]
}
 80019de:	bf00      	nop
 80019e0:	3714      	adds	r7, #20
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bc80      	pop	{r7}
 80019e6:	4770      	bx	lr

080019e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80019ec:	2004      	movs	r0, #4
 80019ee:	f7ff ffe3 	bl	80019b8 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019f2:	2001      	movs	r0, #1
 80019f4:	f7ff ffe0 	bl	80019b8 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 80019f8:	2200      	movs	r2, #0
 80019fa:	2102      	movs	r1, #2
 80019fc:	200b      	movs	r0, #11
 80019fe:	f002 ff78 	bl	80048f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001a02:	200b      	movs	r0, #11
 8001a04:	f002 ff8f 	bl	8004926 <HAL_NVIC_EnableIRQ>

}
 8001a08:	bf00      	nop
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <FLASH_IF_Write>:
  /* USER CODE END FLASH_IF_DeInit_2 */
  return ret_status;
}

FLASH_IF_StatusTypedef FLASH_IF_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001a18:	23ff      	movs	r3, #255	; 0xff
 8001a1a:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Write_1 */

  /* USER CODE END FLASH_IF_Write_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001a22:	d311      	bcc.n	8001a48 <FLASH_IF_Write+0x3c>
 8001a24:	4b0b      	ldr	r3, [pc, #44]	; (8001a54 <FLASH_IF_Write+0x48>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	029a      	lsls	r2, r3, #10
 8001a2a:	4b0b      	ldr	r3, [pc, #44]	; (8001a58 <FLASH_IF_Write+0x4c>)
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001a32:	3b01      	subs	r3, #1
 8001a34:	68fa      	ldr	r2, [r7, #12]
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d306      	bcc.n	8001a48 <FLASH_IF_Write+0x3c>
  {
    ret_status = FLASH_IF_INT_Write(pDestination, pSource, uLength);
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	68b9      	ldr	r1, [r7, #8]
 8001a3e:	68f8      	ldr	r0, [r7, #12]
 8001a40:	f000 f85a 	bl	8001af8 <FLASH_IF_INT_Write>
 8001a44:	4603      	mov	r3, r0
 8001a46:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Write_2 */

  /* USER CODE END FLASH_IF_Write_2 */
  return ret_status;
 8001a48:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3718      	adds	r7, #24
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	1fff75e0 	.word	0x1fff75e0
 8001a58:	03fffc00 	.word	0x03fffc00

08001a5c <FLASH_IF_Read>:

FLASH_IF_StatusTypedef FLASH_IF_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	60b9      	str	r1, [r7, #8]
 8001a66:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001a68:	23ff      	movs	r3, #255	; 0xff
 8001a6a:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Read_1 */

  /* USER CODE END FLASH_IF_Read_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001a72:	d311      	bcc.n	8001a98 <FLASH_IF_Read+0x3c>
 8001a74:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <FLASH_IF_Read+0x48>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	029a      	lsls	r2, r3, #10
 8001a7a:	4b0b      	ldr	r3, [pc, #44]	; (8001aa8 <FLASH_IF_Read+0x4c>)
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001a82:	3b01      	subs	r3, #1
 8001a84:	68ba      	ldr	r2, [r7, #8]
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d306      	bcc.n	8001a98 <FLASH_IF_Read+0x3c>
  {
    ret_status = FLASH_IF_INT_Read(pDestination, pSource, uLength);
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	68b9      	ldr	r1, [r7, #8]
 8001a8e:	68f8      	ldr	r0, [r7, #12]
 8001a90:	f000 f93a 	bl	8001d08 <FLASH_IF_INT_Read>
 8001a94:	4603      	mov	r3, r0
 8001a96:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Read_2 */

  /* USER CODE END FLASH_IF_Read_2 */
  return ret_status;
 8001a98:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3718      	adds	r7, #24
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	1fff75e0 	.word	0x1fff75e0
 8001aa8:	03fffc00 	.word	0x03fffc00

08001aac <FLASH_IF_Erase>:

FLASH_IF_StatusTypedef FLASH_IF_Erase(void *pStart, uint32_t uLength)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001ab6:	23ff      	movs	r3, #255	; 0xff
 8001ab8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN FLASH_IF_Erase_1 */

  /* USER CODE END FLASH_IF_Erase_1 */
  /* Check Flash start address */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001ac0:	d310      	bcc.n	8001ae4 <FLASH_IF_Erase+0x38>
 8001ac2:	4b0b      	ldr	r3, [pc, #44]	; (8001af0 <FLASH_IF_Erase+0x44>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	029a      	lsls	r2, r3, #10
 8001ac8:	4b0a      	ldr	r3, [pc, #40]	; (8001af4 <FLASH_IF_Erase+0x48>)
 8001aca:	4013      	ands	r3, r2
 8001acc:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001ad0:	3b01      	subs	r3, #1
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d305      	bcc.n	8001ae4 <FLASH_IF_Erase+0x38>
  {
    ret_status = FLASH_IF_INT_Erase(pStart, uLength);
 8001ad8:	6839      	ldr	r1, [r7, #0]
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f000 f932 	bl	8001d44 <FLASH_IF_INT_Erase>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE BEGIN FLASH_IF_Erase_2 */

  /* USER CODE END FLASH_IF_Erase_2 */
  return ret_status;
 8001ae4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3710      	adds	r7, #16
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	1fff75e0 	.word	0x1fff75e0
 8001af4:	03fffc00 	.word	0x03fffc00

08001af8 <FLASH_IF_INT_Write>:

/* Private Functions Definition -----------------------------------------------*/

/* Private Functions : internal flash -----------------------------------------*/
static FLASH_IF_StatusTypedef FLASH_IF_INT_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b090      	sub	sp, #64	; 0x40
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	60b9      	str	r1, [r7, #8]
 8001b02:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 8001b04:	2300      	movs	r3, #0
 8001b06:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  /* USER CODE BEGIN FLASH_IF_INT_Write_1 */

  /* USER CODE END FLASH_IF_INT_Write_1 */
  uint32_t uDest = (uint32_t)pDestination;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t uSource = (uint32_t)pSource;
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t length = uLength;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t number_pages;
  uint32_t current_dest;
  uint32_t current_source;
  uint32_t current_length;

  if ((pDestination == NULL) || (pSource == NULL) || !IS_ADDR_ALIGNED_64BITS(uLength)
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d00c      	beq.n	8001b36 <FLASH_IF_INT_Write+0x3e>
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d009      	beq.n	8001b36 <FLASH_IF_INT_Write+0x3e>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f003 0307 	and.w	r3, r3, #7
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d104      	bne.n	8001b36 <FLASH_IF_INT_Write+0x3e>
      || !IS_ADDR_ALIGNED_64BITS((uint32_t)pDestination))
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	f003 0307 	and.w	r3, r3, #7
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d002      	beq.n	8001b3c <FLASH_IF_INT_Write+0x44>
  {
    return FLASH_IF_PARAM_ERROR;
 8001b36:	f06f 0305 	mvn.w	r3, #5
 8001b3a:	e0da      	b.n	8001cf2 <FLASH_IF_INT_Write+0x1fa>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 8001b3c:	f000 f992 	bl	8001e64 <FLASH_IF_INT_Clear_Error>
 8001b40:	4603      	mov	r3, r0
 8001b42:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (ret_status == FLASH_IF_OK)
 8001b46:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	f040 80cf 	bne.w	8001cee <FLASH_IF_INT_Write+0x1f6>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 8001b50:	f003 fb34 	bl	80051bc <HAL_FLASH_Unlock>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	f040 80c6 	bne.w	8001ce8 <FLASH_IF_INT_Write+0x1f0>
    {
      start_page_index = PAGE_INDEX(uDest);
 8001b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b5e:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
 8001b62:	4b66      	ldr	r3, [pc, #408]	; (8001cfc <FLASH_IF_INT_Write+0x204>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	0299      	lsls	r1, r3, #10
 8001b68:	4b65      	ldr	r3, [pc, #404]	; (8001d00 <FLASH_IF_INT_Write+0x208>)
 8001b6a:	400b      	ands	r3, r1
 8001b6c:	fbb2 f1f3 	udiv	r1, r2, r3
 8001b70:	fb01 f303 	mul.w	r3, r1, r3
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	0adb      	lsrs	r3, r3, #11
 8001b78:	61bb      	str	r3, [r7, #24]
      number_pages = PAGE_INDEX(uDest + uLength - 1U) - start_page_index + 1U;
 8001b7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	4413      	add	r3, r2
 8001b80:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8001b84:	3b01      	subs	r3, #1
 8001b86:	4a5d      	ldr	r2, [pc, #372]	; (8001cfc <FLASH_IF_INT_Write+0x204>)
 8001b88:	6812      	ldr	r2, [r2, #0]
 8001b8a:	0291      	lsls	r1, r2, #10
 8001b8c:	4a5c      	ldr	r2, [pc, #368]	; (8001d00 <FLASH_IF_INT_Write+0x208>)
 8001b8e:	400a      	ands	r2, r1
 8001b90:	fbb3 f1f2 	udiv	r1, r3, r2
 8001b94:	fb01 f202 	mul.w	r2, r1, r2
 8001b98:	1a9b      	subs	r3, r3, r2
 8001b9a:	0ada      	lsrs	r2, r3, #11
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	617b      	str	r3, [r7, #20]

      if (number_pages > 1)
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d905      	bls.n	8001bb6 <FLASH_IF_INT_Write+0xbe>
      {
        length = FLASH_PAGE_SIZE - (uDest % FLASH_PAGE_SIZE);
 8001baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bb0:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8001bb4:	633b      	str	r3, [r7, #48]	; 0x30
      }

      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bba:	e089      	b.n	8001cd0 <FLASH_IF_INT_Write+0x1d8>
      {
        page_address = page_index * FLASH_PAGE_SIZE + FLASH_BASE;
 8001bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bbe:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001bc2:	02db      	lsls	r3, r3, #11
 8001bc4:	613b      	str	r3, [r7, #16]
        if (FLASH_IF_INT_IsEmpty(pDestination, length) != FLASH_IF_MEM_EMPTY)
 8001bc6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001bc8:	68f8      	ldr	r0, [r7, #12]
 8001bca:	f000 f925 	bl	8001e18 <FLASH_IF_INT_IsEmpty>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d031      	beq.n	8001c38 <FLASH_IF_INT_Write+0x140>
        {
          if (pAllocatedBuffer == NULL)
 8001bd4:	4b4b      	ldr	r3, [pc, #300]	; (8001d04 <FLASH_IF_INT_Write+0x20c>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d103      	bne.n	8001be4 <FLASH_IF_INT_Write+0xec>
          {
            ret_status = FLASH_IF_PARAM_ERROR;
 8001bdc:	23fa      	movs	r3, #250	; 0xfa
 8001bde:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            break; /* exit for loop */
 8001be2:	e07e      	b.n	8001ce2 <FLASH_IF_INT_Write+0x1ea>
          }

          /* backup initial Flash page data in RAM area */
          FLASH_IF_INT_Read(pAllocatedBuffer, (const void *)page_address, FLASH_PAGE_SIZE);
 8001be4:	4b47      	ldr	r3, [pc, #284]	; (8001d04 <FLASH_IF_INT_Write+0x20c>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	6939      	ldr	r1, [r7, #16]
 8001bea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f000 f88a 	bl	8001d08 <FLASH_IF_INT_Read>
          /* copy fragment into RAM area */
          UTIL_MEM_cpy_8(&pAllocatedBuffer[uDest % FLASH_PAGE_SIZE], (const void *)uSource, length);
 8001bf4:	4b43      	ldr	r3, [pc, #268]	; (8001d04 <FLASH_IF_INT_Write+0x20c>)
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bfa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bfe:	4413      	add	r3, r2
 8001c00:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001c02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c04:	b292      	uxth	r2, r2
 8001c06:	4618      	mov	r0, r3
 8001c08:	f01b fdaa 	bl	801d760 <UTIL_MEM_cpy_8>

          /*  erase the Flash sector, to avoid writing twice in RAM */
          if (FLASH_IF_INT_Erase((void *)page_address, FLASH_PAGE_SIZE) != FLASH_IF_OK)
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c12:	4618      	mov	r0, r3
 8001c14:	f000 f896 	bl	8001d44 <FLASH_IF_INT_Erase>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d003      	beq.n	8001c26 <FLASH_IF_INT_Write+0x12e>
          {
            ret_status = FLASH_IF_ERASE_ERROR;
 8001c1e:	23fe      	movs	r3, #254	; 0xfe
 8001c20:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            break; /* exit for loop */
 8001c24:	e05d      	b.n	8001ce2 <FLASH_IF_INT_Write+0x1ea>
          }

          /* copy the whole flash sector including fragment from RAM to Flash */
          current_dest = page_address;
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	627b      	str	r3, [r7, #36]	; 0x24
          current_source = (uint32_t)pAllocatedBuffer;
 8001c2a:	4b36      	ldr	r3, [pc, #216]	; (8001d04 <FLASH_IF_INT_Write+0x20c>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	623b      	str	r3, [r7, #32]
          current_length = FLASH_PAGE_SIZE;
 8001c30:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c34:	61fb      	str	r3, [r7, #28]
 8001c36:	e005      	b.n	8001c44 <FLASH_IF_INT_Write+0x14c>
        }
        else
        {
          /* write a part of flash page from selected source data */
          current_dest = uDest;
 8001c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c3a:	627b      	str	r3, [r7, #36]	; 0x24
          current_source = uSource;
 8001c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c3e:	623b      	str	r3, [r7, #32]
          current_length = length;
 8001c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c42:	61fb      	str	r3, [r7, #28]
        }

        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 8001c44:	2300      	movs	r3, #0
 8001c46:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c48:	e026      	b.n	8001c98 <FLASH_IF_INT_Write+0x1a0>
        {
          /* Device voltage range supposed to be [2.7V to 3.6V], the operation will be done by word */
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
                                *((uint64_t *)(current_source + address_offset))) == HAL_OK)
 8001c4a:	6a3a      	ldr	r2, [r7, #32]
 8001c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c4e:	4413      	add	r3, r2
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
 8001c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c56:	2001      	movs	r0, #1
 8001c58:	f003 fa6c 	bl	8005134 <HAL_FLASH_Program>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d113      	bne.n	8001c8a <FLASH_IF_INT_Write+0x192>
          {
            /* Check the written value */
            if (*(uint64_t *)current_dest != *(uint64_t *)(current_source + address_offset))
 8001c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c64:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c68:	6a3a      	ldr	r2, [r7, #32]
 8001c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c6c:	4413      	add	r3, r2
 8001c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c72:	4299      	cmp	r1, r3
 8001c74:	bf08      	it	eq
 8001c76:	4290      	cmpeq	r0, r2
 8001c78:	d003      	beq.n	8001c82 <FLASH_IF_INT_Write+0x18a>
            {
              /* Flash content doesn't match SRAM content */
              ret_status = FLASH_IF_WRITE_ERROR;
 8001c7a:	23fc      	movs	r3, #252	; 0xfc
 8001c7c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
              break;
 8001c80:	e00e      	b.n	8001ca0 <FLASH_IF_INT_Write+0x1a8>
            }
            /* Increment FLASH Destination address */
            current_dest = current_dest + 8U;
 8001c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c84:	3308      	adds	r3, #8
 8001c86:	627b      	str	r3, [r7, #36]	; 0x24
 8001c88:	e003      	b.n	8001c92 <FLASH_IF_INT_Write+0x19a>
          }
          else
          {
            /* Error occurred while writing data in Flash memory */
            ret_status = FLASH_IF_WRITE_ERROR;
 8001c8a:	23fc      	movs	r3, #252	; 0xfc
 8001c8c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            break;
 8001c90:	e006      	b.n	8001ca0 <FLASH_IF_INT_Write+0x1a8>
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 8001c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c94:	3308      	adds	r3, #8
 8001c96:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d3d4      	bcc.n	8001c4a <FLASH_IF_INT_Write+0x152>
          }
        }

        if (ret_status != FLASH_IF_OK)
 8001ca0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d11b      	bne.n	8001ce0 <FLASH_IF_INT_Write+0x1e8>
          /* Error occurred while writing data in Flash memory */
          break;
        }

        /* Increment FLASH destination address, source address, and decrease remaining length */
        uDest += length;
 8001ca8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cac:	4413      	add	r3, r2
 8001cae:	63bb      	str	r3, [r7, #56]	; 0x38
        uSource += length;
 8001cb0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cb4:	4413      	add	r3, r2
 8001cb6:	637b      	str	r3, [r7, #52]	; 0x34
        length = ((uLength - length) > FLASH_PAGE_SIZE) ? FLASH_PAGE_SIZE : uLength - length;
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001cc2:	bf28      	it	cs
 8001cc4:	f44f 6300 	movcs.w	r3, #2048	; 0x800
 8001cc8:	633b      	str	r3, [r7, #48]	; 0x30
      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 8001cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ccc:	3301      	adds	r3, #1
 8001cce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	f4ff af6f 	bcc.w	8001bbc <FLASH_IF_INT_Write+0xc4>
 8001cde:	e000      	b.n	8001ce2 <FLASH_IF_INT_Write+0x1ea>
          break;
 8001ce0:	bf00      	nop
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 8001ce2:	f003 fa8d 	bl	8005200 <HAL_FLASH_Lock>
 8001ce6:	e002      	b.n	8001cee <FLASH_IF_INT_Write+0x1f6>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 8001ce8:	23fb      	movs	r3, #251	; 0xfb
 8001cea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Write_2 */

  /* USER CODE END FLASH_IF_INT_Write_2 */
  return ret_status;
 8001cee:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3740      	adds	r7, #64	; 0x40
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	1fff75e0 	.word	0x1fff75e0
 8001d00:	03fffc00 	.word	0x03fffc00
 8001d04:	200001cc 	.word	0x200001cc

08001d08 <FLASH_IF_INT_Read>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b086      	sub	sp, #24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	60f8      	str	r0, [r7, #12]
 8001d10:	60b9      	str	r1, [r7, #8]
 8001d12:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 8001d14:	2300      	movs	r3, #0
 8001d16:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_INT_Read_1 */

  /* USER CODE END FLASH_IF_INT_Read_1 */
  if ((pDestination == NULL) || (pSource == NULL))
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d002      	beq.n	8001d24 <FLASH_IF_INT_Read+0x1c>
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d102      	bne.n	8001d2a <FLASH_IF_INT_Read+0x22>
  {
    return FLASH_IF_PARAM_ERROR;
 8001d24:	f06f 0305 	mvn.w	r3, #5
 8001d28:	e008      	b.n	8001d3c <FLASH_IF_INT_Read+0x34>
  }

  UTIL_MEM_cpy_8(pDestination, pSource, uLength);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	461a      	mov	r2, r3
 8001d30:	68b9      	ldr	r1, [r7, #8]
 8001d32:	68f8      	ldr	r0, [r7, #12]
 8001d34:	f01b fd14 	bl	801d760 <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN FLASH_IF_INT_Read_2 */

  /* USER CODE END FLASH_IF_INT_Read_2 */
  return ret_status;
 8001d38:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3718      	adds	r7, #24
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <FLASH_IF_INT_Erase>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Erase(void *pStart, uint32_t uLength)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b088      	sub	sp, #32
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	77fb      	strb	r3, [r7, #31]
  /* USER CODE BEGIN FLASH_IF_INT_Erase_1 */

  /* USER CODE END FLASH_IF_INT_Erase_1 */
  HAL_StatusTypeDef hal_status = HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	77bb      	strb	r3, [r7, #30]
  uint32_t page_error = 0U;
 8001d56:	2300      	movs	r3, #0
 8001d58:	617b      	str	r3, [r7, #20]
  uint32_t uStart = (uint32_t)pStart;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef erase_init;

  if (pStart == NULL)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d102      	bne.n	8001d6a <FLASH_IF_INT_Erase+0x26>
  {
    return FLASH_IF_PARAM_ERROR;
 8001d64:	f06f 0305 	mvn.w	r3, #5
 8001d68:	e04e      	b.n	8001e08 <FLASH_IF_INT_Erase+0xc4>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 8001d6a:	f000 f87b 	bl	8001e64 <FLASH_IF_INT_Clear_Error>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	77fb      	strb	r3, [r7, #31]

  if (ret_status == FLASH_IF_OK)
 8001d72:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d144      	bne.n	8001e04 <FLASH_IF_INT_Erase+0xc0>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 8001d7a:	f003 fa1f 	bl	80051bc <HAL_FLASH_Unlock>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d13d      	bne.n	8001e00 <FLASH_IF_INT_Erase+0xbc>
    {
      erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 8001d84:	2302      	movs	r3, #2
 8001d86:	60bb      	str	r3, [r7, #8]
      erase_init.Page = PAGE_INDEX(uStart);
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
 8001d8e:	4b20      	ldr	r3, [pc, #128]	; (8001e10 <FLASH_IF_INT_Erase+0xcc>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	0299      	lsls	r1, r3, #10
 8001d94:	4b1f      	ldr	r3, [pc, #124]	; (8001e14 <FLASH_IF_INT_Erase+0xd0>)
 8001d96:	400b      	ands	r3, r1
 8001d98:	fbb2 f1f3 	udiv	r1, r2, r3
 8001d9c:	fb01 f303 	mul.w	r3, r1, r3
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	0adb      	lsrs	r3, r3, #11
 8001da4:	60fb      	str	r3, [r7, #12]
      /* Get the number of pages to erase from 1st page */
      erase_init.NbPages = PAGE_INDEX(uStart + uLength - 1U) - erase_init.Page + 1U;
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	4413      	add	r3, r2
 8001dac:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8001db0:	3b01      	subs	r3, #1
 8001db2:	4a17      	ldr	r2, [pc, #92]	; (8001e10 <FLASH_IF_INT_Erase+0xcc>)
 8001db4:	6812      	ldr	r2, [r2, #0]
 8001db6:	0291      	lsls	r1, r2, #10
 8001db8:	4a16      	ldr	r2, [pc, #88]	; (8001e14 <FLASH_IF_INT_Erase+0xd0>)
 8001dba:	400a      	ands	r2, r1
 8001dbc:	fbb3 f1f2 	udiv	r1, r3, r2
 8001dc0:	fb01 f202 	mul.w	r2, r1, r2
 8001dc4:	1a9b      	subs	r3, r3, r2
 8001dc6:	0ada      	lsrs	r2, r3, #11
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	3301      	adds	r3, #1
 8001dce:	613b      	str	r3, [r7, #16]

      /* Erase the Page */
      hal_status = HAL_FLASHEx_Erase(&erase_init, &page_error);
 8001dd0:	f107 0214 	add.w	r2, r7, #20
 8001dd4:	f107 0308 	add.w	r3, r7, #8
 8001dd8:	4611      	mov	r1, r2
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f003 faf0 	bl	80053c0 <HAL_FLASHEx_Erase>
 8001de0:	4603      	mov	r3, r0
 8001de2:	77bb      	strb	r3, [r7, #30]

      if (hal_status != HAL_OK)
 8001de4:	7fbb      	ldrb	r3, [r7, #30]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d007      	beq.n	8001dfa <FLASH_IF_INT_Erase+0xb6>
      {
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 8001dea:	7fbb      	ldrb	r3, [r7, #30]
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d101      	bne.n	8001df4 <FLASH_IF_INT_Erase+0xb0>
 8001df0:	2301      	movs	r3, #1
 8001df2:	e001      	b.n	8001df8 <FLASH_IF_INT_Erase+0xb4>
 8001df4:	f06f 0301 	mvn.w	r3, #1
 8001df8:	77fb      	strb	r3, [r7, #31]
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 8001dfa:	f003 fa01 	bl	8005200 <HAL_FLASH_Lock>
 8001dfe:	e001      	b.n	8001e04 <FLASH_IF_INT_Erase+0xc0>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 8001e00:	23fb      	movs	r3, #251	; 0xfb
 8001e02:	77fb      	strb	r3, [r7, #31]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Erase_2 */

  /* USER CODE END FLASH_IF_INT_Erase_2 */
  return ret_status;
 8001e04:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3720      	adds	r7, #32
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	1fff75e0 	.word	0x1fff75e0
 8001e14:	03fffc00 	.word	0x03fffc00

08001e18 <FLASH_IF_INT_IsEmpty>:

static int32_t FLASH_IF_INT_IsEmpty(void *pStart, uint32_t uLength)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
  int32_t status = FLASH_IF_MEM_EMPTY;
 8001e22:	2300      	movs	r3, #0
 8001e24:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_1 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_1 */
  uint32_t index;
  for (index = 0; index < uLength; index += 8)
 8001e26:	2300      	movs	r3, #0
 8001e28:	60bb      	str	r3, [r7, #8]
 8001e2a:	e011      	b.n	8001e50 <FLASH_IF_INT_IsEmpty+0x38>
  {
    if (*(uint64_t *)pStart != UINT64_MAX)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e36:	bf08      	it	eq
 8001e38:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8001e3c:	d002      	beq.n	8001e44 <FLASH_IF_INT_IsEmpty+0x2c>
    {
      status = FLASH_IF_MEM_NOT_EMPTY;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	60fb      	str	r3, [r7, #12]
      break;
 8001e42:	e009      	b.n	8001e58 <FLASH_IF_INT_IsEmpty+0x40>
    }
    pStart = (void *)((uint32_t)pStart + 8U);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	3308      	adds	r3, #8
 8001e48:	607b      	str	r3, [r7, #4]
  for (index = 0; index < uLength; index += 8)
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	3308      	adds	r3, #8
 8001e4e:	60bb      	str	r3, [r7, #8]
 8001e50:	68ba      	ldr	r2, [r7, #8]
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d3e9      	bcc.n	8001e2c <FLASH_IF_INT_IsEmpty+0x14>
  }
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_2 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_2 */
  return status;
 8001e58:	68fb      	ldr	r3, [r7, #12]
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3714      	adds	r7, #20
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bc80      	pop	{r7}
 8001e62:	4770      	bx	lr

08001e64 <FLASH_IF_INT_Clear_Error>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Clear_Error(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
 8001e6a:	23fb      	movs	r3, #251	; 0xfb
 8001e6c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_1 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_1 */
  /* Unlock the Program memory */
  if (HAL_FLASH_Unlock() == HAL_OK)
 8001e6e:	f003 f9a5 	bl	80051bc <HAL_FLASH_Unlock>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d110      	bne.n	8001e9a <FLASH_IF_INT_Clear_Error+0x36>
  {
    /* Clear all FLASH flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8001e78:	4b0b      	ldr	r3, [pc, #44]	; (8001ea8 <FLASH_IF_INT_Clear_Error+0x44>)
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	4a0a      	ldr	r2, [pc, #40]	; (8001ea8 <FLASH_IF_INT_Clear_Error+0x44>)
 8001e7e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001e82:	6193      	str	r3, [r2, #24]
 8001e84:	4b08      	ldr	r3, [pc, #32]	; (8001ea8 <FLASH_IF_INT_Clear_Error+0x44>)
 8001e86:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 8001e8a:	611a      	str	r2, [r3, #16]
    /* Unlock the Program memory */
    if (HAL_FLASH_Lock() == HAL_OK)
 8001e8c:	f003 f9b8 	bl	8005200 <HAL_FLASH_Lock>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d101      	bne.n	8001e9a <FLASH_IF_INT_Clear_Error+0x36>
    {
      ret_status = FLASH_IF_OK;
 8001e96:	2300      	movs	r3, #0
 8001e98:	71fb      	strb	r3, [r7, #7]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_2 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_2 */
  return ret_status;
 8001e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	58004000 	.word	0x58004000

08001eac <LL_AHB2_GRP1_EnableClock>:
{
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001eb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eb8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001eba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001ec4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ec8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
}
 8001ed2:	bf00      	nop
 8001ed4:	3714      	adds	r7, #20
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bc80      	pop	{r7}
 8001eda:	4770      	bx	lr

08001edc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b086      	sub	sp, #24
 8001ee0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee2:	1d3b      	adds	r3, r7, #4
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	605a      	str	r2, [r3, #4]
 8001eea:	609a      	str	r2, [r3, #8]
 8001eec:	60da      	str	r2, [r3, #12]
 8001eee:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ef0:	2004      	movs	r0, #4
 8001ef2:	f7ff ffdb 	bl	8001eac <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ef6:	2002      	movs	r0, #2
 8001ef8:	f7ff ffd8 	bl	8001eac <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001efc:	2001      	movs	r0, #1
 8001efe:	f7ff ffd5 	bl	8001eac <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DBG3_Pin|DBG4_Pin|DBG2_Pin, GPIO_PIN_RESET);
 8001f02:	2200      	movs	r2, #0
 8001f04:	f44f 6183 	mov.w	r1, #1048	; 0x418
 8001f08:	4821      	ldr	r0, [pc, #132]	; (8001f90 <MX_GPIO_Init+0xb4>)
 8001f0a:	f003 fd5b 	bl	80059c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001f0e:	2201      	movs	r2, #1
 8001f10:	2120      	movs	r1, #32
 8001f12:	481f      	ldr	r0, [pc, #124]	; (8001f90 <MX_GPIO_Init+0xb4>)
 8001f14:	f003 fd56 	bl	80059c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DBG1_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin, GPIO_PIN_RESET);
 8001f18:	2200      	movs	r2, #0
 8001f1a:	2131      	movs	r1, #49	; 0x31
 8001f1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f20:	f003 fd50 	bl	80059c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DBG3_Pin|DBG4_Pin|LED2_Pin|DBG2_Pin;
 8001f24:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8001f28:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f32:	2303      	movs	r3, #3
 8001f34:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f36:	1d3b      	adds	r3, r7, #4
 8001f38:	4619      	mov	r1, r3
 8001f3a:	4815      	ldr	r0, [pc, #84]	; (8001f90 <MX_GPIO_Init+0xb4>)
 8001f3c:	f003 fb14 	bl	8005568 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DBG1_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin;
 8001f40:	2331      	movs	r3, #49	; 0x31
 8001f42:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f44:	2301      	movs	r3, #1
 8001f46:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f50:	1d3b      	adds	r3, r7, #4
 8001f52:	4619      	mov	r1, r3
 8001f54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f58:	f003 fb06 	bl	8005568 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUT1_Pin;
 8001f5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f60:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001f62:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001f66:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUT1_GPIO_Port, &GPIO_InitStruct);
 8001f6c:	1d3b      	adds	r3, r7, #4
 8001f6e:	4619      	mov	r1, r3
 8001f70:	4807      	ldr	r0, [pc, #28]	; (8001f90 <MX_GPIO_Init+0xb4>)
 8001f72:	f003 faf9 	bl	8005568 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001f76:	2200      	movs	r2, #0
 8001f78:	2100      	movs	r1, #0
 8001f7a:	2029      	movs	r0, #41	; 0x29
 8001f7c:	f002 fcb9 	bl	80048f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001f80:	2029      	movs	r0, #41	; 0x29
 8001f82:	f002 fcd0 	bl	8004926 <HAL_NVIC_EnableIRQ>

}
 8001f86:	bf00      	nop
 8001f88:	3718      	adds	r7, #24
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	48000400 	.word	0x48000400

08001f94 <LL_AHB2_GRP1_EnableClock>:
{
 8001f94:	b480      	push	{r7}
 8001f96:	b085      	sub	sp, #20
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001f9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fa0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001fa2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001fac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fb0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
}
 8001fba:	bf00      	nop
 8001fbc:	3714      	adds	r7, #20
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bc80      	pop	{r7}
 8001fc2:	4770      	bx	lr

08001fc4 <LL_APB1_GRP1_EnableClock>:
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b085      	sub	sp, #20
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001fcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fd0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001fd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001fdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fe0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
}
 8001fea:	bf00      	nop
 8001fec:	3714      	adds	r7, #20
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bc80      	pop	{r7}
 8001ff2:	4770      	bx	lr

08001ff4 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001ff8:	4b1b      	ldr	r3, [pc, #108]	; (8002068 <MX_I2C3_Init+0x74>)
 8001ffa:	4a1c      	ldr	r2, [pc, #112]	; (800206c <MX_I2C3_Init+0x78>)
 8001ffc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20303E5D;
 8001ffe:	4b1a      	ldr	r3, [pc, #104]	; (8002068 <MX_I2C3_Init+0x74>)
 8002000:	4a1b      	ldr	r2, [pc, #108]	; (8002070 <MX_I2C3_Init+0x7c>)
 8002002:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8002004:	4b18      	ldr	r3, [pc, #96]	; (8002068 <MX_I2C3_Init+0x74>)
 8002006:	2200      	movs	r2, #0
 8002008:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800200a:	4b17      	ldr	r3, [pc, #92]	; (8002068 <MX_I2C3_Init+0x74>)
 800200c:	2201      	movs	r2, #1
 800200e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002010:	4b15      	ldr	r3, [pc, #84]	; (8002068 <MX_I2C3_Init+0x74>)
 8002012:	2200      	movs	r2, #0
 8002014:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8002016:	4b14      	ldr	r3, [pc, #80]	; (8002068 <MX_I2C3_Init+0x74>)
 8002018:	2200      	movs	r2, #0
 800201a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800201c:	4b12      	ldr	r3, [pc, #72]	; (8002068 <MX_I2C3_Init+0x74>)
 800201e:	2200      	movs	r2, #0
 8002020:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002022:	4b11      	ldr	r3, [pc, #68]	; (8002068 <MX_I2C3_Init+0x74>)
 8002024:	2200      	movs	r2, #0
 8002026:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002028:	4b0f      	ldr	r3, [pc, #60]	; (8002068 <MX_I2C3_Init+0x74>)
 800202a:	2200      	movs	r2, #0
 800202c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800202e:	480e      	ldr	r0, [pc, #56]	; (8002068 <MX_I2C3_Init+0x74>)
 8002030:	f003 fcf8 	bl	8005a24 <HAL_I2C_Init>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800203a:	f000 f925 	bl	8002288 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800203e:	2100      	movs	r1, #0
 8002040:	4809      	ldr	r0, [pc, #36]	; (8002068 <MX_I2C3_Init+0x74>)
 8002042:	f004 fb3b 	bl	80066bc <HAL_I2CEx_ConfigAnalogFilter>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800204c:	f000 f91c 	bl	8002288 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002050:	2100      	movs	r1, #0
 8002052:	4805      	ldr	r0, [pc, #20]	; (8002068 <MX_I2C3_Init+0x74>)
 8002054:	f004 fb7c 	bl	8006750 <HAL_I2CEx_ConfigDigitalFilter>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800205e:	f000 f913 	bl	8002288 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002062:	bf00      	nop
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	200001d0 	.word	0x200001d0
 800206c:	40005c00 	.word	0x40005c00
 8002070:	20303e5d 	.word	0x20303e5d

08002074 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b096      	sub	sp, #88	; 0x58
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800207c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
 8002084:	605a      	str	r2, [r3, #4]
 8002086:	609a      	str	r2, [r3, #8]
 8002088:	60da      	str	r2, [r3, #12]
 800208a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800208c:	f107 030c 	add.w	r3, r7, #12
 8002090:	2238      	movs	r2, #56	; 0x38
 8002092:	2100      	movs	r1, #0
 8002094:	4618      	mov	r0, r3
 8002096:	f01c fe27 	bl	801ece8 <memset>
  if(i2cHandle->Instance==I2C3)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a21      	ldr	r2, [pc, #132]	; (8002124 <HAL_I2C_MspInit+0xb0>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d13a      	bne.n	800211a <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80020a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020a8:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80020aa:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 80020ae:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020b0:	f107 030c 	add.w	r3, r7, #12
 80020b4:	4618      	mov	r0, r3
 80020b6:	f005 fe07 	bl	8007cc8 <HAL_RCCEx_PeriphCLKConfig>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 80020c0:	f000 f8e2 	bl	8002288 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020c4:	2002      	movs	r0, #2
 80020c6:	f7ff ff65 	bl	8001f94 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020ca:	2004      	movs	r0, #4
 80020cc:	f7ff ff62 	bl	8001f94 <LL_AHB2_GRP1_EnableClock>
    /**I2C3 GPIO Configuration
    PB14     ------> I2C3_SDA
    PC0     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80020d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80020d4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020d6:	2312      	movs	r3, #18
 80020d8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020da:	2300      	movs	r3, #0
 80020dc:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020de:	2300      	movs	r3, #0
 80020e0:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80020e2:	2304      	movs	r3, #4
 80020e4:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020e6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80020ea:	4619      	mov	r1, r3
 80020ec:	480e      	ldr	r0, [pc, #56]	; (8002128 <HAL_I2C_MspInit+0xb4>)
 80020ee:	f003 fa3b 	bl	8005568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80020f2:	2301      	movs	r3, #1
 80020f4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020f6:	2312      	movs	r3, #18
 80020f8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fa:	2300      	movs	r3, #0
 80020fc:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020fe:	2300      	movs	r3, #0
 8002100:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002102:	2304      	movs	r3, #4
 8002104:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002106:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800210a:	4619      	mov	r1, r3
 800210c:	4807      	ldr	r0, [pc, #28]	; (800212c <HAL_I2C_MspInit+0xb8>)
 800210e:	f003 fa2b 	bl	8005568 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002112:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002116:	f7ff ff55 	bl	8001fc4 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800211a:	bf00      	nop
 800211c:	3758      	adds	r7, #88	; 0x58
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	40005c00 	.word	0x40005c00
 8002128:	48000400 	.word	0x48000400
 800212c:	48000800 	.word	0x48000800

08002130 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8002138:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800213c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002140:	f023 0218 	bic.w	r2, r3, #24
 8002144:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4313      	orrs	r3, r2
 800214c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002150:	bf00      	nop
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	bc80      	pop	{r7}
 8002158:	4770      	bx	lr
	...

0800215c <SI7201_Init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void SI7201_Init()
  {
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
#ifdef ENABLE_SENSOR_SI7201
  int8_t enable_status = enable_heater_Si7021(1);
 8002162:	2001      	movs	r0, #1
 8002164:	f7ff faaa 	bl	80016bc <enable_heater_Si7021>
 8002168:	4603      	mov	r3, r0
 800216a:	71fb      	strb	r3, [r7, #7]

  int8_t reset_status = rst_Si7021();
 800216c:	f7ff fae0 	bl	8001730 <rst_Si7021>
 8002170:	4603      	mov	r3, r0
 8002172:	71bb      	strb	r3, [r7, #6]

  if(enable_status == 0 && reset_status == 0){
 8002174:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d10a      	bne.n	8002192 <SI7201_Init+0x36>
 800217c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d106      	bne.n	8002192 <SI7201_Init+0x36>
  	  APP_LOG(0, VLEVEL_M, "Si7021 status => OK");
 8002184:	4b08      	ldr	r3, [pc, #32]	; (80021a8 <SI7201_Init+0x4c>)
 8002186:	2200      	movs	r2, #0
 8002188:	2100      	movs	r1, #0
 800218a:	2002      	movs	r0, #2
 800218c:	f01c fb34 	bl	801e7f8 <UTIL_ADV_TRACE_COND_FSend>
 8002190:	e006      	b.n	80021a0 <SI7201_Init+0x44>
    }
    else
    {
      APP_LOG(0, VLEVEL_M, "Si7021 status => Error");
 8002192:	4b06      	ldr	r3, [pc, #24]	; (80021ac <SI7201_Init+0x50>)
 8002194:	2200      	movs	r2, #0
 8002196:	2100      	movs	r1, #0
 8002198:	2002      	movs	r0, #2
 800219a:	f01c fb2d 	bl	801e7f8 <UTIL_ADV_TRACE_COND_FSend>
    }
#endif
  }
 800219e:	bf00      	nop
 80021a0:	bf00      	nop
 80021a2:	3708      	adds	r7, #8
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	0801ee58 	.word	0x0801ee58
 80021ac:	0801ee6c 	.word	0x0801ee6c

080021b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021b4:	f001 f9ea 	bl	800358c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021b8:	f000 f80c 	bl	80021d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021bc:	f7ff fe8e 	bl	8001edc <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 80021c0:	f009 f91a 	bl	800b3f8 <MX_LoRaWAN_Init>
  MX_I2C3_Init();
 80021c4:	f7ff ff16 	bl	8001ff4 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  SI7201_Init();
 80021c8:	f7ff ffc8 	bl	800215c <SI7201_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_LoRaWAN_Process();
 80021cc:	f009 f91c 	bl	800b408 <MX_LoRaWAN_Process>
 80021d0:	e7fc      	b.n	80021cc <main+0x1c>
	...

080021d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b09a      	sub	sp, #104	; 0x68
 80021d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021da:	f107 0320 	add.w	r3, r7, #32
 80021de:	2248      	movs	r2, #72	; 0x48
 80021e0:	2100      	movs	r1, #0
 80021e2:	4618      	mov	r0, r3
 80021e4:	f01c fd80 	bl	801ece8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021e8:	f107 0308 	add.w	r3, r7, #8
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	605a      	str	r2, [r3, #4]
 80021f2:	609a      	str	r2, [r3, #8]
 80021f4:	60da      	str	r2, [r3, #12]
 80021f6:	611a      	str	r2, [r3, #16]
 80021f8:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80021fa:	f004 faf5 	bl	80067e8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80021fe:	2000      	movs	r0, #0
 8002200:	f7ff ff96 	bl	8002130 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002204:	4b1f      	ldr	r3, [pc, #124]	; (8002284 <SystemClock_Config+0xb0>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800220c:	4a1d      	ldr	r2, [pc, #116]	; (8002284 <SystemClock_Config+0xb0>)
 800220e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002212:	6013      	str	r3, [r2, #0]
 8002214:	4b1b      	ldr	r3, [pc, #108]	; (8002284 <SystemClock_Config+0xb0>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800221c:	607b      	str	r3, [r7, #4]
 800221e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8002220:	2324      	movs	r3, #36	; 0x24
 8002222:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002224:	2381      	movs	r3, #129	; 0x81
 8002226:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002228:	2301      	movs	r3, #1
 800222a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800222c:	2300      	movs	r3, #0
 800222e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8002230:	23b0      	movs	r3, #176	; 0xb0
 8002232:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002234:	2300      	movs	r3, #0
 8002236:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002238:	f107 0320 	add.w	r3, r7, #32
 800223c:	4618      	mov	r0, r3
 800223e:	f004 fe1f 	bl	8006e80 <HAL_RCC_OscConfig>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d001      	beq.n	800224c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8002248:	f000 f81e 	bl	8002288 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 800224c:	234f      	movs	r3, #79	; 0x4f
 800224e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002250:	2300      	movs	r3, #0
 8002252:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002254:	2300      	movs	r3, #0
 8002256:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002258:	2300      	movs	r3, #0
 800225a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800225c:	2300      	movs	r3, #0
 800225e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8002260:	2300      	movs	r3, #0
 8002262:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002264:	f107 0308 	add.w	r3, r7, #8
 8002268:	2102      	movs	r1, #2
 800226a:	4618      	mov	r0, r3
 800226c:	f005 f98a 	bl	8007584 <HAL_RCC_ClockConfig>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002276:	f000 f807 	bl	8002288 <Error_Handler>
  }
}
 800227a:	bf00      	nop
 800227c:	3768      	adds	r7, #104	; 0x68
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	58000400 	.word	0x58000400

08002288 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800228c:	b672      	cpsid	i
}
 800228e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002290:	e7fe      	b.n	8002290 <Error_Handler+0x8>

08002292 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8002292:	b480      	push	{r7}
 8002294:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002296:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800229a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800229e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80022aa:	bf00      	nop
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bc80      	pop	{r7}
 80022b0:	4770      	bx	lr

080022b2 <LL_APB1_GRP1_EnableClock>:
{
 80022b2:	b480      	push	{r7}
 80022b4:	b085      	sub	sp, #20
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80022ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022be:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80022c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80022ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022ce:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	4013      	ands	r3, r2
 80022d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80022d6:	68fb      	ldr	r3, [r7, #12]
}
 80022d8:	bf00      	nop
 80022da:	3714      	adds	r7, #20
 80022dc:	46bd      	mov	sp, r7
 80022de:	bc80      	pop	{r7}
 80022e0:	4770      	bx	lr
	...

080022e4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b08c      	sub	sp, #48	; 0x30
 80022e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 80022ea:	1d3b      	adds	r3, r7, #4
 80022ec:	222c      	movs	r2, #44	; 0x2c
 80022ee:	2100      	movs	r1, #0
 80022f0:	4618      	mov	r0, r3
 80022f2:	f01c fcf9 	bl	801ece8 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80022f6:	4b22      	ldr	r3, [pc, #136]	; (8002380 <MX_RTC_Init+0x9c>)
 80022f8:	4a22      	ldr	r2, [pc, #136]	; (8002384 <MX_RTC_Init+0xa0>)
 80022fa:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 80022fc:	4b20      	ldr	r3, [pc, #128]	; (8002380 <MX_RTC_Init+0x9c>)
 80022fe:	221f      	movs	r2, #31
 8002300:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002302:	4b1f      	ldr	r3, [pc, #124]	; (8002380 <MX_RTC_Init+0x9c>)
 8002304:	2200      	movs	r2, #0
 8002306:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002308:	4b1d      	ldr	r3, [pc, #116]	; (8002380 <MX_RTC_Init+0x9c>)
 800230a:	2200      	movs	r2, #0
 800230c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800230e:	4b1c      	ldr	r3, [pc, #112]	; (8002380 <MX_RTC_Init+0x9c>)
 8002310:	2200      	movs	r2, #0
 8002312:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002314:	4b1a      	ldr	r3, [pc, #104]	; (8002380 <MX_RTC_Init+0x9c>)
 8002316:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800231a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800231c:	4b18      	ldr	r3, [pc, #96]	; (8002380 <MX_RTC_Init+0x9c>)
 800231e:	2200      	movs	r2, #0
 8002320:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8002322:	4b17      	ldr	r3, [pc, #92]	; (8002380 <MX_RTC_Init+0x9c>)
 8002324:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002328:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800232a:	4815      	ldr	r0, [pc, #84]	; (8002380 <MX_RTC_Init+0x9c>)
 800232c:	f005 fde6 	bl	8007efc <HAL_RTC_Init>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8002336:	f7ff ffa7 	bl	8002288 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 800233a:	4811      	ldr	r0, [pc, #68]	; (8002380 <MX_RTC_Init+0x9c>)
 800233c:	f006 f8dc 	bl	80084f8 <HAL_RTCEx_SetSSRU_IT>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8002346:	f7ff ff9f 	bl	8002288 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 800234a:	2300      	movs	r3, #0
 800234c:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800234e:	2300      	movs	r3, #0
 8002350:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002352:	2300      	movs	r3, #0
 8002354:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8002356:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800235a:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 800235c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002360:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8002362:	1d3b      	adds	r3, r7, #4
 8002364:	2200      	movs	r2, #0
 8002366:	4619      	mov	r1, r3
 8002368:	4805      	ldr	r0, [pc, #20]	; (8002380 <MX_RTC_Init+0x9c>)
 800236a:	f005 fe49 	bl	8008000 <HAL_RTC_SetAlarm_IT>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8002374:	f7ff ff88 	bl	8002288 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002378:	bf00      	nop
 800237a:	3730      	adds	r7, #48	; 0x30
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	20000224 	.word	0x20000224
 8002384:	40002800 	.word	0x40002800

08002388 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b090      	sub	sp, #64	; 0x40
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002390:	f107 0308 	add.w	r3, r7, #8
 8002394:	2238      	movs	r2, #56	; 0x38
 8002396:	2100      	movs	r1, #0
 8002398:	4618      	mov	r0, r3
 800239a:	f01c fca5 	bl	801ece8 <memset>
  if(rtcHandle->Instance==RTC)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a16      	ldr	r2, [pc, #88]	; (80023fc <HAL_RTC_MspInit+0x74>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d125      	bne.n	80023f4 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80023a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023ac:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80023ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023b2:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023b4:	f107 0308 	add.w	r3, r7, #8
 80023b8:	4618      	mov	r0, r3
 80023ba:	f005 fc85 	bl	8007cc8 <HAL_RCCEx_PeriphCLKConfig>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80023c4:	f7ff ff60 	bl	8002288 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80023c8:	f7ff ff63 	bl	8002292 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80023cc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80023d0:	f7ff ff6f 	bl	80022b2 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 80023d4:	2200      	movs	r2, #0
 80023d6:	2100      	movs	r1, #0
 80023d8:	2002      	movs	r0, #2
 80023da:	f002 fa8a 	bl	80048f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 80023de:	2002      	movs	r0, #2
 80023e0:	f002 faa1 	bl	8004926 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80023e4:	2200      	movs	r2, #0
 80023e6:	2100      	movs	r1, #0
 80023e8:	202a      	movs	r0, #42	; 0x2a
 80023ea:	f002 fa82 	bl	80048f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80023ee:	202a      	movs	r0, #42	; 0x2a
 80023f0:	f002 fa99 	bl	8004926 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80023f4:	bf00      	nop
 80023f6:	3740      	adds	r7, #64	; 0x40
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	40002800 	.word	0x40002800

08002400 <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8002404:	4b03      	ldr	r3, [pc, #12]	; (8002414 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 8002406:	2201      	movs	r2, #1
 8002408:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800240c:	bf00      	nop
 800240e:	46bd      	mov	sp, r7
 8002410:	bc80      	pop	{r7}
 8002412:	4770      	bx	lr
 8002414:	58000400 	.word	0x58000400

08002418 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 800241c:	bf00      	nop
 800241e:	46bd      	mov	sp, r7
 8002420:	bc80      	pop	{r7}
 8002422:	4770      	bx	lr

08002424 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8002428:	bf00      	nop
 800242a:	46bd      	mov	sp, r7
 800242c:	bc80      	pop	{r7}
 800242e:	4770      	bx	lr

08002430 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8002434:	f001 f8ca 	bl	80035cc <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 8002438:	f7ff ffe2 	bl	8002400 <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 800243c:	2001      	movs	r0, #1
 800243e:	f004 fa65 	bl	800690c <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8002442:	bf00      	nop
 8002444:	bd80      	pop	{r7, pc}

08002446 <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 8002446:	b580      	push	{r7, lr}
 8002448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 800244a:	f001 f8cd 	bl	80035e8 <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 800244e:	f000 ff4d 	bl	80032ec <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 8002452:	bf00      	nop
 8002454:	bd80      	pop	{r7, pc}

08002456 <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 8002456:	b580      	push	{r7, lr}
 8002458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 800245a:	f001 f8b7 	bl	80035cc <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800245e:	2101      	movs	r1, #1
 8002460:	2000      	movs	r0, #0
 8002462:	f004 f9cf 	bl	8006804 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 8002466:	bf00      	nop
 8002468:	bd80      	pop	{r7, pc}

0800246a <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 800246a:	b580      	push	{r7, lr}
 800246c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 800246e:	f001 f8bb 	bl	80035e8 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 8002472:	bf00      	nop
 8002474:	bd80      	pop	{r7, pc}

08002476 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002476:	b480      	push	{r7}
 8002478:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800247a:	bf00      	nop
 800247c:	46bd      	mov	sp, r7
 800247e:	bc80      	pop	{r7}
 8002480:	4770      	bx	lr

08002482 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002482:	b480      	push	{r7}
 8002484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002486:	e7fe      	b.n	8002486 <NMI_Handler+0x4>

08002488 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800248c:	e7fe      	b.n	800248c <HardFault_Handler+0x4>

0800248e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800248e:	b480      	push	{r7}
 8002490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002492:	e7fe      	b.n	8002492 <MemManage_Handler+0x4>

08002494 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002498:	e7fe      	b.n	8002498 <BusFault_Handler+0x4>

0800249a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800249a:	b480      	push	{r7}
 800249c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800249e:	e7fe      	b.n	800249e <UsageFault_Handler+0x4>

080024a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024a4:	bf00      	nop
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bc80      	pop	{r7}
 80024aa:	4770      	bx	lr

080024ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024b0:	bf00      	nop
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bc80      	pop	{r7}
 80024b6:	4770      	bx	lr

080024b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024bc:	bf00      	nop
 80024be:	46bd      	mov	sp, r7
 80024c0:	bc80      	pop	{r7}
 80024c2:	4770      	bx	lr

080024c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024c8:	bf00      	nop
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bc80      	pop	{r7}
 80024ce:	4770      	bx	lr

080024d0 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 80024d4:	4802      	ldr	r0, [pc, #8]	; (80024e0 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 80024d6:	f006 f84b 	bl	8008570 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 80024da:	bf00      	nop
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	20000224 	.word	0x20000224

080024e4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80024e8:	4802      	ldr	r0, [pc, #8]	; (80024f4 <DMA1_Channel1_IRQHandler+0x10>)
 80024ea:	f002 fcb3 	bl	8004e54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80024ee:	bf00      	nop
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	20000304 	.word	0x20000304

080024f8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80024fc:	4802      	ldr	r0, [pc, #8]	; (8002508 <USART1_IRQHandler+0x10>)
 80024fe:	f006 fe81 	bl	8009204 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002502:	bf00      	nop
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	20000270 	.word	0x20000270

0800250c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [15:10] Interrupt.
  */
void EXTI15_10_IRQHandler(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 8002510:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002514:	f003 fa6e 	bl	80059f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002518:	bf00      	nop
 800251a:	bd80      	pop	{r7, pc}

0800251c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002520:	4802      	ldr	r0, [pc, #8]	; (800252c <RTC_Alarm_IRQHandler+0x10>)
 8002522:	f005 fed5 	bl	80082d0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8002526:	bf00      	nop
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	20000224 	.word	0x20000224

08002530 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8002534:	4802      	ldr	r0, [pc, #8]	; (8002540 <SUBGHZ_Radio_IRQHandler+0x10>)
 8002536:	f006 fb89 	bl	8008c4c <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 800253a:	bf00      	nop
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	2000025c 	.word	0x2000025c

08002544 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8002544:	b480      	push	{r7}
 8002546:	b085      	sub	sp, #20
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 800254c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002550:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002552:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4313      	orrs	r3, r2
 800255a:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 800255c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002560:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4013      	ands	r3, r2
 8002566:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002568:	68fb      	ldr	r3, [r7, #12]
}
 800256a:	bf00      	nop
 800256c:	3714      	adds	r7, #20
 800256e:	46bd      	mov	sp, r7
 8002570:	bc80      	pop	{r7}
 8002572:	4770      	bx	lr

08002574 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8002578:	4b06      	ldr	r3, [pc, #24]	; (8002594 <MX_SUBGHZ_Init+0x20>)
 800257a:	2208      	movs	r2, #8
 800257c:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 800257e:	4805      	ldr	r0, [pc, #20]	; (8002594 <MX_SUBGHZ_Init+0x20>)
 8002580:	f006 f8e2 	bl	8008748 <HAL_SUBGHZ_Init>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d001      	beq.n	800258e <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 800258a:	f7ff fe7d 	bl	8002288 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 800258e:	bf00      	nop
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	2000025c 	.word	0x2000025c

08002598 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 80025a0:	2001      	movs	r0, #1
 80025a2:	f7ff ffcf 	bl	8002544 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 80025a6:	2200      	movs	r2, #0
 80025a8:	2100      	movs	r1, #0
 80025aa:	2032      	movs	r0, #50	; 0x32
 80025ac:	f002 f9a1 	bl	80048f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 80025b0:	2032      	movs	r0, #50	; 0x32
 80025b2:	f002 f9b8 	bl	8004926 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 80025b6:	bf00      	nop
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <LL_RCC_SetClkAfterWakeFromStop>:
{
 80025be:	b480      	push	{r7}
 80025c0:	b083      	sub	sp, #12
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80025c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80025d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	608b      	str	r3, [r1, #8]
}
 80025da:	bf00      	nop
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	bc80      	pop	{r7}
 80025e2:	4770      	bx	lr

080025e4 <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 80025e8:	4b02      	ldr	r3, [pc, #8]	; (80025f4 <LL_FLASH_GetUDN+0x10>)
 80025ea:	681b      	ldr	r3, [r3, #0]
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bc80      	pop	{r7}
 80025f2:	4770      	bx	lr
 80025f4:	1fff7580 	.word	0x1fff7580

080025f8 <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 80025fc:	4b03      	ldr	r3, [pc, #12]	; (800260c <LL_FLASH_GetDeviceID+0x14>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	b2db      	uxtb	r3, r3
}
 8002602:	4618      	mov	r0, r3
 8002604:	46bd      	mov	sp, r7
 8002606:	bc80      	pop	{r7}
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	1fff7584 	.word	0x1fff7584

08002610 <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8002614:	4b03      	ldr	r3, [pc, #12]	; (8002624 <LL_FLASH_GetSTCompanyID+0x14>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	0a1b      	lsrs	r3, r3, #8
}
 800261a:	4618      	mov	r0, r3
 800261c:	46bd      	mov	sp, r7
 800261e:	bc80      	pop	{r7}
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	1fff7584 	.word	0x1fff7584

08002628 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 800262c:	2000      	movs	r0, #0
 800262e:	f7ff ffc6 	bl	80025be <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 8002632:	f01b fe23 	bl	801e27c <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8002636:	4b0e      	ldr	r3, [pc, #56]	; (8002670 <SystemApp_Init+0x48>)
 8002638:	2201      	movs	r2, #1
 800263a:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 800263c:	f000 f98c 	bl	8002958 <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8002640:	f01c f8ac 	bl	801e79c <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8002644:	480b      	ldr	r0, [pc, #44]	; (8002674 <SystemApp_Init+0x4c>)
 8002646:	f01c f957 	bl	801e8f8 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /* #warning "should be removed when proper obl is done" */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800264a:	4b0b      	ldr	r3, [pc, #44]	; (8002678 <SystemApp_Init+0x50>)
 800264c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002650:	611a      	str	r2, [r3, #16]

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8002652:	2002      	movs	r0, #2
 8002654:	f01c f95e 	bl	801e914 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 8002658:	f7ff f926 	bl	80018a8 <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 800265c:	f000 fa16 	bl	8002a8c <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8002660:	f01a ffd8 	bl	801d614 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8002664:	2101      	movs	r1, #1
 8002666:	2001      	movs	r0, #1
 8002668:	f01b f814 	bl	801d694 <UTIL_LPM_SetOffMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 800266c:	bf00      	nop
 800266e:	bd80      	pop	{r7, pc}
 8002670:	20000268 	.word	0x20000268
 8002674:	08002849 	.word	0x08002849
 8002678:	58004000 	.word	0x58004000

0800267c <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 8002680:	f01b f838 	bl	801d6f4 <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8002684:	bf00      	nop
 8002686:	bd80      	pop	{r7, pc}

08002688 <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 800268e:	2300      	movs	r3, #0
 8002690:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8002692:	f7ff f917 	bl	80018c4 <SYS_GetBatteryLevel>
 8002696:	4603      	mov	r3, r0
 8002698:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 800269a:	88bb      	ldrh	r3, [r7, #4]
 800269c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d902      	bls.n	80026aa <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 80026a4:	23fe      	movs	r3, #254	; 0xfe
 80026a6:	71fb      	strb	r3, [r7, #7]
 80026a8:	e014      	b.n	80026d4 <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 80026aa:	88bb      	ldrh	r3, [r7, #4]
 80026ac:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80026b0:	d202      	bcs.n	80026b8 <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 80026b2:	2300      	movs	r3, #0
 80026b4:	71fb      	strb	r3, [r7, #7]
 80026b6:	e00d      	b.n	80026d4 <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 80026b8:	88bb      	ldrh	r3, [r7, #4]
 80026ba:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 80026be:	461a      	mov	r2, r3
 80026c0:	4613      	mov	r3, r2
 80026c2:	01db      	lsls	r3, r3, #7
 80026c4:	1a9b      	subs	r3, r3, r2
 80026c6:	005b      	lsls	r3, r3, #1
 80026c8:	461a      	mov	r2, r3
 80026ca:	4b05      	ldr	r3, [pc, #20]	; (80026e0 <GetBatteryLevel+0x58>)
 80026cc:	fba3 2302 	umull	r2, r3, r3, r2
 80026d0:	09db      	lsrs	r3, r3, #7
 80026d2:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 80026d4:	79fb      	ldrb	r3, [r7, #7]
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	1b4e81b5 	.word	0x1b4e81b5

080026e4 <GetTemperatureLevel>:

int16_t GetTemperatureLevel(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b088      	sub	sp, #32
 80026e8:	af00      	add	r7, sp, #0
  int16_t temperatureLevel = 0;
 80026ea:	2300      	movs	r3, #0
 80026ec:	83fb      	strh	r3, [r7, #30]

  sensor_t sensor_data;

  EnvSensors_Read(&sensor_data);
 80026ee:	1d3b      	adds	r3, r7, #4
 80026f0:	4618      	mov	r0, r3
 80026f2:	f000 f98d 	bl	8002a10 <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7fe fce7 	bl	80010cc <__aeabi_f2iz>
 80026fe:	4603      	mov	r3, r0
 8002700:	83fb      	strh	r3, [r7, #30]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 8002702:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8002706:	4618      	mov	r0, r3
 8002708:	3720      	adds	r7, #32
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 800270e:	b590      	push	{r4, r7, lr}
 8002710:	b087      	sub	sp, #28
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 8002716:	2300      	movs	r3, #0
 8002718:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 800271a:	f7ff ff63 	bl	80025e4 <LL_FLASH_GetUDN>
 800271e:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002726:	d138      	bne.n	800279a <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8002728:	f000 ff6c 	bl	8003604 <HAL_GetUIDw0>
 800272c:	4604      	mov	r4, r0
 800272e:	f000 ff7d 	bl	800362c <HAL_GetUIDw2>
 8002732:	4603      	mov	r3, r0
 8002734:	4423      	add	r3, r4
 8002736:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 8002738:	f000 ff6e 	bl	8003618 <HAL_GetUIDw1>
 800273c:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	0e1a      	lsrs	r2, r3, #24
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	3307      	adds	r3, #7
 8002746:	b2d2      	uxtb	r2, r2
 8002748:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	0c1a      	lsrs	r2, r3, #16
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	3306      	adds	r3, #6
 8002752:	b2d2      	uxtb	r2, r2
 8002754:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	0a1a      	lsrs	r2, r3, #8
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	3305      	adds	r3, #5
 800275e:	b2d2      	uxtb	r2, r2
 8002760:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	3304      	adds	r3, #4
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	b2d2      	uxtb	r2, r2
 800276a:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	0e1a      	lsrs	r2, r3, #24
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	3303      	adds	r3, #3
 8002774:	b2d2      	uxtb	r2, r2
 8002776:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	0c1a      	lsrs	r2, r3, #16
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	3302      	adds	r3, #2
 8002780:	b2d2      	uxtb	r2, r2
 8002782:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	0a1a      	lsrs	r2, r3, #8
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	3301      	adds	r3, #1
 800278c:	b2d2      	uxtb	r2, r2
 800278e:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	b2da      	uxtb	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 8002798:	e031      	b.n	80027fe <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	3307      	adds	r3, #7
 800279e:	697a      	ldr	r2, [r7, #20]
 80027a0:	b2d2      	uxtb	r2, r2
 80027a2:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	0a1a      	lsrs	r2, r3, #8
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	3306      	adds	r3, #6
 80027ac:	b2d2      	uxtb	r2, r2
 80027ae:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	0c1a      	lsrs	r2, r3, #16
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	3305      	adds	r3, #5
 80027b8:	b2d2      	uxtb	r2, r2
 80027ba:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	0e1a      	lsrs	r2, r3, #24
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	3304      	adds	r3, #4
 80027c4:	b2d2      	uxtb	r2, r2
 80027c6:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 80027c8:	f7ff ff16 	bl	80025f8 <LL_FLASH_GetDeviceID>
 80027cc:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	3303      	adds	r3, #3
 80027d2:	697a      	ldr	r2, [r7, #20]
 80027d4:	b2d2      	uxtb	r2, r2
 80027d6:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 80027d8:	f7ff ff1a 	bl	8002610 <LL_FLASH_GetSTCompanyID>
 80027dc:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	3302      	adds	r3, #2
 80027e2:	697a      	ldr	r2, [r7, #20]
 80027e4:	b2d2      	uxtb	r2, r2
 80027e6:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	0a1a      	lsrs	r2, r3, #8
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	3301      	adds	r3, #1
 80027f0:	b2d2      	uxtb	r2, r2
 80027f2:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	0c1b      	lsrs	r3, r3, #16
 80027f8:	b2da      	uxtb	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	701a      	strb	r2, [r3, #0]
}
 80027fe:	bf00      	nop
 8002800:	371c      	adds	r7, #28
 8002802:	46bd      	mov	sp, r7
 8002804:	bd90      	pop	{r4, r7, pc}

08002806 <GetDevAddr>:

void GetDevAddr(uint32_t *devAddr)
{
 8002806:	b590      	push	{r4, r7, lr}
 8002808:	b083      	sub	sp, #12
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  *devAddr = LL_FLASH_GetUDN();
 800280e:	f7ff fee9 	bl	80025e4 <LL_FLASH_GetUDN>
 8002812:	4602      	mov	r2, r0
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	601a      	str	r2, [r3, #0]
  if (*devAddr == 0xFFFFFFFF)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002820:	d10d      	bne.n	800283e <GetDevAddr+0x38>
  {
    *devAddr = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8002822:	f000 feef 	bl	8003604 <HAL_GetUIDw0>
 8002826:	4604      	mov	r4, r0
 8002828:	f000 fef6 	bl	8003618 <HAL_GetUIDw1>
 800282c:	4603      	mov	r3, r0
 800282e:	405c      	eors	r4, r3
 8002830:	f000 fefc 	bl	800362c <HAL_GetUIDw2>
 8002834:	4603      	mov	r3, r0
 8002836:	ea84 0203 	eor.w	r2, r4, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	601a      	str	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
}
 800283e:	bf00      	nop
 8002840:	370c      	adds	r7, #12
 8002842:	46bd      	mov	sp, r7
 8002844:	bd90      	pop	{r4, r7, pc}
	...

08002848 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b086      	sub	sp, #24
 800284c:	af02      	add	r7, sp, #8
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 8002852:	f107 0308 	add.w	r3, r7, #8
 8002856:	4618      	mov	r0, r3
 8002858:	f01b f85c 	bl	801d914 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002862:	9200      	str	r2, [sp, #0]
 8002864:	4a07      	ldr	r2, [pc, #28]	; (8002884 <TimestampNow+0x3c>)
 8002866:	2110      	movs	r1, #16
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f000 f81d 	bl	80028a8 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f7fd fc82 	bl	8000178 <strlen>
 8002874:	4603      	mov	r3, r0
 8002876:	b29a      	uxth	r2, r3
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 800287c:	bf00      	nop
 800287e:	3710      	adds	r7, #16
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	0801ee84 	.word	0x0801ee84

08002888 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 800288c:	2101      	movs	r1, #1
 800288e:	2002      	movs	r0, #2
 8002890:	f01a fed0 	bl	801d634 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8002894:	bf00      	nop
 8002896:	bd80      	pop	{r7, pc}

08002898 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 800289c:	2100      	movs	r1, #0
 800289e:	2002      	movs	r0, #2
 80028a0:	f01a fec8 	bl	801d634 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 80028a4:	bf00      	nop
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 80028a8:	b40c      	push	{r2, r3}
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b084      	sub	sp, #16
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
 80028b2:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 80028b4:	f107 031c 	add.w	r3, r7, #28
 80028b8:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 80028ba:	6839      	ldr	r1, [r7, #0]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f01b f9f9 	bl	801dcb8 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 80028c6:	bf00      	nop
 80028c8:	3710      	adds	r7, #16
 80028ca:	46bd      	mov	sp, r7
 80028cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80028d0:	b002      	add	sp, #8
 80028d2:	4770      	bx	lr

080028d4 <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 80028dc:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 80028de:	4618      	mov	r0, r3
 80028e0:	370c      	adds	r7, #12
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bc80      	pop	{r7}
 80028e6:	4770      	bx	lr

080028e8 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80028ee:	2300      	movs	r3, #0
 80028f0:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 80028f2:	4b06      	ldr	r3, [pc, #24]	; (800290c <HAL_GetTick+0x24>)
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d002      	beq.n	8002900 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 80028fa:	f000 f993 	bl	8002c24 <TIMER_IF_GetTimerValue>
 80028fe:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8002900:	687b      	ldr	r3, [r7, #4]
}
 8002902:	4618      	mov	r0, r3
 8002904:	3708      	adds	r7, #8
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	20000268 	.word	0x20000268

08002910 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4618      	mov	r0, r3
 800291c:	f000 fa09 	bl	8002d32 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8002920:	bf00      	nop
 8002922:	3708      	adds	r7, #8
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <LL_AHB2_GRP1_EnableClock>:
{
 8002928:	b480      	push	{r7}
 800292a:	b085      	sub	sp, #20
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002930:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002934:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002936:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4313      	orrs	r3, r2
 800293e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002940:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002944:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4013      	ands	r3, r2
 800294a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800294c:	68fb      	ldr	r3, [r7, #12]
}
 800294e:	bf00      	nop
 8002950:	3714      	adds	r7, #20
 8002952:	46bd      	mov	sp, r7
 8002954:	bc80      	pop	{r7}
 8002956:	4770      	bx	lr

08002958 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af00      	add	r7, sp, #0

  /* USER CODE END DBG_Init_1 */

  /* SW probes */
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 0 )
  HAL_DBGMCU_DisableDBGSleepMode();
 800295e:	f000 fe6f 	bl	8003640 <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 8002962:	f000 fe73 	bl	800364c <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 8002966:	f000 fe77 	bl	8003658 <HAL_DBGMCU_DisableDBGStandbyMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 800296a:	1d3b      	adds	r3, r7, #4
 800296c:	2200      	movs	r2, #0
 800296e:	601a      	str	r2, [r3, #0]
 8002970:	605a      	str	r2, [r3, #4]
 8002972:	609a      	str	r2, [r3, #8]
 8002974:	60da      	str	r2, [r3, #12]
 8002976:	611a      	str	r2, [r3, #16]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8002978:	2301      	movs	r3, #1
 800297a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 800297c:	2300      	movs	r3, #0
 800297e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8002980:	2303      	movs	r3, #3
 8002982:	613b      	str	r3, [r7, #16]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
 8002984:	2001      	movs	r0, #1
 8002986:	f7ff ffcf 	bl	8002928 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE2_CLK_ENABLE();
 800298a:	2002      	movs	r0, #2
 800298c:	f7ff ffcc 	bl	8002928 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE3_CLK_ENABLE();
 8002990:	2002      	movs	r0, #2
 8002992:	f7ff ffc9 	bl	8002928 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE4_CLK_ENABLE();
 8002996:	2002      	movs	r0, #2
 8002998:	f7ff ffc6 	bl	8002928 <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 800299c:	2301      	movs	r3, #1
 800299e:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 80029a0:	1d3b      	adds	r3, r7, #4
 80029a2:	4619      	mov	r1, r3
 80029a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029a8:	f002 fdde 	bl	8005568 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 80029ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029b0:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 80029b2:	1d3b      	adds	r3, r7, #4
 80029b4:	4619      	mov	r1, r3
 80029b6:	4815      	ldr	r0, [pc, #84]	; (8002a0c <DBG_Init+0xb4>)
 80029b8:	f002 fdd6 	bl	8005568 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE3_PIN;
 80029bc:	2308      	movs	r3, #8
 80029be:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE3_PORT, &GPIO_InitStruct);
 80029c0:	1d3b      	adds	r3, r7, #4
 80029c2:	4619      	mov	r1, r3
 80029c4:	4811      	ldr	r0, [pc, #68]	; (8002a0c <DBG_Init+0xb4>)
 80029c6:	f002 fdcf 	bl	8005568 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE4_PIN;
 80029ca:	2310      	movs	r3, #16
 80029cc:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE4_PORT, &GPIO_InitStruct);
 80029ce:	1d3b      	adds	r3, r7, #4
 80029d0:	4619      	mov	r1, r3
 80029d2:	480e      	ldr	r0, [pc, #56]	; (8002a0c <DBG_Init+0xb4>)
 80029d4:	f002 fdc8 	bl	8005568 <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 80029d8:	2200      	movs	r2, #0
 80029da:	2101      	movs	r1, #1
 80029dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029e0:	f002 fff0 	bl	80059c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 80029e4:	2200      	movs	r2, #0
 80029e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80029ea:	4808      	ldr	r0, [pc, #32]	; (8002a0c <DBG_Init+0xb4>)
 80029ec:	f002 ffea 	bl	80059c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE3_PORT, PROBE_LINE3_PIN, GPIO_PIN_RESET);
 80029f0:	2200      	movs	r2, #0
 80029f2:	2108      	movs	r1, #8
 80029f4:	4805      	ldr	r0, [pc, #20]	; (8002a0c <DBG_Init+0xb4>)
 80029f6:	f002 ffe5 	bl	80059c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE4_PORT, PROBE_LINE4_PIN, GPIO_PIN_RESET);
 80029fa:	2200      	movs	r2, #0
 80029fc:	2110      	movs	r1, #16
 80029fe:	4803      	ldr	r0, [pc, #12]	; (8002a0c <DBG_Init+0xb4>)
 8002a00:	f002 ffe0 	bl	80059c4 <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8002a04:	bf00      	nop
 8002a06:	3718      	adds	r7, #24
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	48000400 	.word	0x48000400

08002a10 <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 8002a18:	4b16      	ldr	r3, [pc, #88]	; (8002a74 <EnvSensors_Read+0x64>)
 8002a1a:	60fb      	str	r3, [r7, #12]
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 8002a1c:	4b16      	ldr	r3, [pc, #88]	; (8002a78 <EnvSensors_Read+0x68>)
 8002a1e:	60bb      	str	r3, [r7, #8]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 8002a20:	4b16      	ldr	r3, [pc, #88]	; (8002a7c <EnvSensors_Read+0x6c>)
 8002a22:	617b      	str	r3, [r7, #20]
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif  /* SENSOR_ENABLED */

#ifdef ENABLE_SENSOR_SI7201
  int8_t status = r_both_Si7021(&HUMIDITY_Value, &TEMPERATURE_Value);
 8002a24:	f107 0208 	add.w	r2, r7, #8
 8002a28:	f107 030c 	add.w	r3, r7, #12
 8002a2c:	4611      	mov	r1, r2
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7fe fdd8 	bl	80015e4 <r_both_Si7021>
 8002a34:	4603      	mov	r3, r0
 8002a36:	74fb      	strb	r3, [r7, #19]

  if(status != 0)
 8002a38:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d005      	beq.n	8002a4c <EnvSensors_Read+0x3c>
  {
	  APP_LOG(1, VLEVEL_M, "Read temperature & humidity error");
 8002a40:	4b0f      	ldr	r3, [pc, #60]	; (8002a80 <EnvSensors_Read+0x70>)
 8002a42:	2201      	movs	r2, #1
 8002a44:	2100      	movs	r1, #0
 8002a46:	2002      	movs	r0, #2
 8002a48:	f01b fed6 	bl	801e7f8 <UTIL_ADV_TRACE_COND_FSend>
  }
#endif

  sensor_data->humidity    = HUMIDITY_Value;
 8002a4c:	68fa      	ldr	r2, [r7, #12]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8002a52:	68ba      	ldr	r2, [r7, #8]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	697a      	ldr	r2, [r7, #20]
 8002a5c:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a08      	ldr	r2, [pc, #32]	; (8002a84 <EnvSensors_Read+0x74>)
 8002a62:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	4a08      	ldr	r2, [pc, #32]	; (8002a88 <EnvSensors_Read+0x78>)
 8002a68:	611a      	str	r2, [r3, #16]

  return 0;
 8002a6a:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3718      	adds	r7, #24
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	42480000 	.word	0x42480000
 8002a78:	41900000 	.word	0x41900000
 8002a7c:	447a0000 	.word	0x447a0000
 8002a80:	0801ee90 	.word	0x0801ee90
 8002a84:	003e090d 	.word	0x003e090d
 8002a88:	000503ab 	.word	0x000503ab

08002a8c <EnvSensors_Init>:

int32_t EnvSensors_Init(void)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
  int32_t ret = 0;
 8002a92:	2300      	movs	r3, #0
 8002a94:	607b      	str	r3, [r7, #4]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
 8002a96:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bc80      	pop	{r7}
 8002aa0:	4770      	bx	lr

08002aa2 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8002aa6:	bf00      	nop
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bc80      	pop	{r7}
 8002aac:	4770      	bx	lr

08002aae <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	b083      	sub	sp, #12
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	689b      	ldr	r3, [r3, #8]
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	370c      	adds	r7, #12
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bc80      	pop	{r7}
 8002ac2:	4770      	bx	lr

08002ac4 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002aca:	2300      	movs	r3, #0
 8002acc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8002ace:	4b14      	ldr	r3, [pc, #80]	; (8002b20 <TIMER_IF_Init+0x5c>)
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	f083 0301 	eor.w	r3, r3, #1
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d01b      	beq.n	8002b14 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002adc:	4b11      	ldr	r3, [pc, #68]	; (8002b24 <TIMER_IF_Init+0x60>)
 8002ade:	f04f 32ff 	mov.w	r2, #4294967295
 8002ae2:	631a      	str	r2, [r3, #48]	; 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8002ae4:	f7ff fbfe 	bl	80022e4 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8002ae8:	f000 f856 	bl	8002b98 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002aec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002af0:	480c      	ldr	r0, [pc, #48]	; (8002b24 <TIMER_IF_Init+0x60>)
 8002af2:	f005 fb91 	bl	8008218 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002af6:	4b0b      	ldr	r3, [pc, #44]	; (8002b24 <TIMER_IF_Init+0x60>)
 8002af8:	f04f 32ff 	mov.w	r2, #4294967295
 8002afc:	631a      	str	r2, [r3, #48]	; 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8002afe:	4809      	ldr	r0, [pc, #36]	; (8002b24 <TIMER_IF_Init+0x60>)
 8002b00:	f005 fcc8 	bl	8008494 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8002b04:	2000      	movs	r0, #0
 8002b06:	f000 f9d3 	bl	8002eb0 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8002b0a:	f000 f85f 	bl	8002bcc <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8002b0e:	4b04      	ldr	r3, [pc, #16]	; (8002b20 <TIMER_IF_Init+0x5c>)
 8002b10:	2201      	movs	r2, #1
 8002b12:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8002b14:	79fb      	ldrb	r3, [r7, #7]
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	20000269 	.word	0x20000269
 8002b24:	20000224 	.word	0x20000224

08002b28 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b08e      	sub	sp, #56	; 0x38
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002b30:	2300      	movs	r3, #0
 8002b32:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 8002b36:	f107 0308 	add.w	r3, r7, #8
 8002b3a:	222c      	movs	r2, #44	; 0x2c
 8002b3c:	2100      	movs	r1, #0
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f01c f8d2 	bl	801ece8 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8002b44:	f000 f828 	bl	8002b98 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8002b48:	4b11      	ldr	r3, [pc, #68]	; (8002b90 <TIMER_IF_StartTimer+0x68>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	4413      	add	r3, r2
 8002b50:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8002b52:	2300      	movs	r3, #0
 8002b54:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	43db      	mvns	r3, r3
 8002b5a:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8002b60:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002b64:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8002b66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b6a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002b6c:	f107 0308 	add.w	r3, r7, #8
 8002b70:	2201      	movs	r2, #1
 8002b72:	4619      	mov	r1, r3
 8002b74:	4807      	ldr	r0, [pc, #28]	; (8002b94 <TIMER_IF_StartTimer+0x6c>)
 8002b76:	f005 fa43 	bl	8008000 <HAL_RTC_SetAlarm_IT>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d001      	beq.n	8002b84 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8002b80:	f7ff fb82 	bl	8002288 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8002b84:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3738      	adds	r7, #56	; 0x38
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	2000026c 	.word	0x2000026c
 8002b94:	20000224 	.word	0x20000224

08002b98 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8002ba2:	4b08      	ldr	r3, [pc, #32]	; (8002bc4 <TIMER_IF_StopTimer+0x2c>)
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002ba8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002bac:	4806      	ldr	r0, [pc, #24]	; (8002bc8 <TIMER_IF_StopTimer+0x30>)
 8002bae:	f005 fb33 	bl	8008218 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002bb2:	4b05      	ldr	r3, [pc, #20]	; (8002bc8 <TIMER_IF_StopTimer+0x30>)
 8002bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8002bb8:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 8002bba:	79fb      	ldrb	r3, [r7, #7]
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3708      	adds	r7, #8
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	40002800 	.word	0x40002800
 8002bc8:	20000224 	.word	0x20000224

08002bcc <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8002bd0:	f000 f98e 	bl	8002ef0 <GetTimerTicks>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	4a03      	ldr	r2, [pc, #12]	; (8002be4 <TIMER_IF_SetTimerContext+0x18>)
 8002bd8:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002bda:	4b02      	ldr	r3, [pc, #8]	; (8002be4 <TIMER_IF_SetTimerContext+0x18>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	2000026c 	.word	0x2000026c

08002be8 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002bec:	4b02      	ldr	r3, [pc, #8]	; (8002bf8 <TIMER_IF_GetTimerContext+0x10>)
 8002bee:	681b      	ldr	r3, [r3, #0]
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bc80      	pop	{r7}
 8002bf6:	4770      	bx	lr
 8002bf8:	2000026c 	.word	0x2000026c

08002bfc <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002c02:	2300      	movs	r3, #0
 8002c04:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8002c06:	f000 f973 	bl	8002ef0 <GetTimerTicks>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	4b04      	ldr	r3, [pc, #16]	; (8002c20 <TIMER_IF_GetTimerElapsedTime+0x24>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 8002c14:	687b      	ldr	r3, [r7, #4]
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3708      	adds	r7, #8
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	2000026c 	.word	0x2000026c

08002c24 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 8002c2e:	4b06      	ldr	r3, [pc, #24]	; (8002c48 <TIMER_IF_GetTimerValue+0x24>)
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d002      	beq.n	8002c3c <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 8002c36:	f000 f95b 	bl	8002ef0 <GetTimerTicks>
 8002c3a:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8002c3c:	687b      	ldr	r3, [r7, #4]
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3708      	adds	r7, #8
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	20000269 	.word	0x20000269

08002c4c <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002c52:	2300      	movs	r3, #0
 8002c54:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 8002c56:	2303      	movs	r3, #3
 8002c58:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 8002c5a:	687b      	ldr	r3, [r7, #4]
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bc80      	pop	{r7}
 8002c64:	4770      	bx	lr

08002c66 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8002c66:	b5b0      	push	{r4, r5, r7, lr}
 8002c68:	b084      	sub	sp, #16
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002c6e:	2100      	movs	r1, #0
 8002c70:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8002c72:	6879      	ldr	r1, [r7, #4]
 8002c74:	2000      	movs	r0, #0
 8002c76:	460a      	mov	r2, r1
 8002c78:	4603      	mov	r3, r0
 8002c7a:	0d95      	lsrs	r5, r2, #22
 8002c7c:	0294      	lsls	r4, r2, #10
 8002c7e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002c82:	f04f 0300 	mov.w	r3, #0
 8002c86:	4620      	mov	r0, r4
 8002c88:	4629      	mov	r1, r5
 8002c8a:	f7fe fa65 	bl	8001158 <__aeabi_uldivmod>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	460b      	mov	r3, r1
 8002c92:	4613      	mov	r3, r2
 8002c94:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 8002c96:	68fb      	ldr	r3, [r7, #12]
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3710      	adds	r7, #16
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bdb0      	pop	{r4, r5, r7, pc}

08002ca0 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8002ca0:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002ca4:	b085      	sub	sp, #20
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002caa:	2100      	movs	r1, #0
 8002cac:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8002cae:	6879      	ldr	r1, [r7, #4]
 8002cb0:	2000      	movs	r0, #0
 8002cb2:	460c      	mov	r4, r1
 8002cb4:	4605      	mov	r5, r0
 8002cb6:	4620      	mov	r0, r4
 8002cb8:	4629      	mov	r1, r5
 8002cba:	f04f 0a00 	mov.w	sl, #0
 8002cbe:	f04f 0b00 	mov.w	fp, #0
 8002cc2:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8002cc6:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8002cca:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 8002cce:	4650      	mov	r0, sl
 8002cd0:	4659      	mov	r1, fp
 8002cd2:	1b02      	subs	r2, r0, r4
 8002cd4:	eb61 0305 	sbc.w	r3, r1, r5
 8002cd8:	f04f 0000 	mov.w	r0, #0
 8002cdc:	f04f 0100 	mov.w	r1, #0
 8002ce0:	0099      	lsls	r1, r3, #2
 8002ce2:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002ce6:	0090      	lsls	r0, r2, #2
 8002ce8:	4602      	mov	r2, r0
 8002cea:	460b      	mov	r3, r1
 8002cec:	eb12 0804 	adds.w	r8, r2, r4
 8002cf0:	eb43 0905 	adc.w	r9, r3, r5
 8002cf4:	f04f 0200 	mov.w	r2, #0
 8002cf8:	f04f 0300 	mov.w	r3, #0
 8002cfc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d00:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d04:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d08:	4690      	mov	r8, r2
 8002d0a:	4699      	mov	r9, r3
 8002d0c:	4640      	mov	r0, r8
 8002d0e:	4649      	mov	r1, r9
 8002d10:	f04f 0200 	mov.w	r2, #0
 8002d14:	f04f 0300 	mov.w	r3, #0
 8002d18:	0a82      	lsrs	r2, r0, #10
 8002d1a:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002d1e:	0a8b      	lsrs	r3, r1, #10
 8002d20:	4613      	mov	r3, r2
 8002d22:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8002d24:	68fb      	ldr	r3, [r7, #12]
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3714      	adds	r7, #20
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002d30:	4770      	bx	lr

08002d32 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b084      	sub	sp, #16
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f7ff ff93 	bl	8002c66 <TIMER_IF_Convert_ms2Tick>
 8002d40:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 8002d42:	f000 f8d5 	bl	8002ef0 <GetTimerTicks>
 8002d46:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002d48:	e000      	b.n	8002d4c <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8002d4a:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002d4c:	f000 f8d0 	bl	8002ef0 <GetTimerTicks>
 8002d50:	4602      	mov	r2, r0
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	68fa      	ldr	r2, [r7, #12]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d8f6      	bhi.n	8002d4a <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8002d5c:	bf00      	nop
 8002d5e:	bf00      	nop
 8002d60:	3710      	adds	r7, #16
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b082      	sub	sp, #8
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8002d6e:	f01b fbd3 	bl	801e518 <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 8002d72:	bf00      	nop
 8002d74:	3708      	adds	r7, #8
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}

08002d7a <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	b084      	sub	sp, #16
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8002d82:	f000 f8a5 	bl	8002ed0 <TIMER_IF_BkUp_Read_MSBticks>
 8002d86:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f000 f88f 	bl	8002eb0 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 8002d92:	bf00      	nop
 8002d94:	3710      	adds	r7, #16
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8002d9a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d9e:	b08c      	sub	sp, #48	; 0x30
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 8002da4:	2300      	movs	r3, #0
 8002da6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8002da8:	f000 f8a2 	bl	8002ef0 <GetTimerTicks>
 8002dac:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8002dae:	f000 f88f 	bl	8002ed0 <TIMER_IF_BkUp_Read_MSBticks>
 8002db2:	6278      	str	r0, [r7, #36]	; 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8002db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db6:	2200      	movs	r2, #0
 8002db8:	60bb      	str	r3, [r7, #8]
 8002dba:	60fa      	str	r2, [r7, #12]
 8002dbc:	f04f 0200 	mov.w	r2, #0
 8002dc0:	f04f 0300 	mov.w	r3, #0
 8002dc4:	68b9      	ldr	r1, [r7, #8]
 8002dc6:	000b      	movs	r3, r1
 8002dc8:	2200      	movs	r2, #0
 8002dca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002dcc:	2000      	movs	r0, #0
 8002dce:	460c      	mov	r4, r1
 8002dd0:	4605      	mov	r5, r0
 8002dd2:	eb12 0804 	adds.w	r8, r2, r4
 8002dd6:	eb43 0905 	adc.w	r9, r3, r5
 8002dda:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8002dde:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002de2:	f04f 0200 	mov.w	r2, #0
 8002de6:	f04f 0300 	mov.w	r3, #0
 8002dea:	0a82      	lsrs	r2, r0, #10
 8002dec:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002df0:	0a8b      	lsrs	r3, r1, #10
 8002df2:	4613      	mov	r3, r2
 8002df4:	62fb      	str	r3, [r7, #44]	; 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	603b      	str	r3, [r7, #0]
 8002dfc:	607a      	str	r2, [r7, #4]
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8002e04:	f04f 0b00 	mov.w	fp, #0
 8002e08:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7ff ff46 	bl	8002ca0 <TIMER_IF_Convert_Tick2ms>
 8002e14:	4603      	mov	r3, r0
 8002e16:	b29a      	uxth	r2, r3
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 8002e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3730      	adds	r7, #48	; 0x30
 8002e22:	46bd      	mov	sp, r7
 8002e24:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002e28 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	2100      	movs	r1, #0
 8002e34:	4803      	ldr	r0, [pc, #12]	; (8002e44 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 8002e36:	f005 fbbf 	bl	80085b8 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 8002e3a:	bf00      	nop
 8002e3c:	3708      	adds	r7, #8
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	20000224 	.word	0x20000224

08002e48 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	2101      	movs	r1, #1
 8002e54:	4803      	ldr	r0, [pc, #12]	; (8002e64 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 8002e56:	f005 fbaf 	bl	80085b8 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 8002e5a:	bf00      	nop
 8002e5c:	3708      	adds	r7, #8
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	20000224 	.word	0x20000224

08002e68 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8002e72:	2100      	movs	r1, #0
 8002e74:	4804      	ldr	r0, [pc, #16]	; (8002e88 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 8002e76:	f005 fbb7 	bl	80085e8 <HAL_RTCEx_BKUPRead>
 8002e7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 8002e7c:	687b      	ldr	r3, [r7, #4]
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3708      	adds	r7, #8
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	20000224 	.word	0x20000224

08002e8c <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002e92:	2300      	movs	r3, #0
 8002e94:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8002e96:	2101      	movs	r1, #1
 8002e98:	4804      	ldr	r0, [pc, #16]	; (8002eac <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 8002e9a:	f005 fba5 	bl	80085e8 <HAL_RTCEx_BKUPRead>
 8002e9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 8002ea0:	687b      	ldr	r3, [r7, #4]
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3708      	adds	r7, #8
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	20000224 	.word	0x20000224

08002eb0 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	2102      	movs	r1, #2
 8002ebc:	4803      	ldr	r0, [pc, #12]	; (8002ecc <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 8002ebe:	f005 fb7b 	bl	80085b8 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 8002ec2:	bf00      	nop
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	20000224 	.word	0x20000224

08002ed0 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8002ed6:	2102      	movs	r1, #2
 8002ed8:	4804      	ldr	r0, [pc, #16]	; (8002eec <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 8002eda:	f005 fb85 	bl	80085e8 <HAL_RTCEx_BKUPRead>
 8002ede:	6078      	str	r0, [r7, #4]
  return MSBticks;
 8002ee0:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3708      	adds	r7, #8
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	20000224 	.word	0x20000224

08002ef0 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8002ef6:	480b      	ldr	r0, [pc, #44]	; (8002f24 <GetTimerTicks+0x34>)
 8002ef8:	f7ff fdd9 	bl	8002aae <LL_RTC_TIME_GetSubSecond>
 8002efc:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002efe:	e003      	b.n	8002f08 <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8002f00:	4808      	ldr	r0, [pc, #32]	; (8002f24 <GetTimerTicks+0x34>)
 8002f02:	f7ff fdd4 	bl	8002aae <LL_RTC_TIME_GetSubSecond>
 8002f06:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002f08:	4806      	ldr	r0, [pc, #24]	; (8002f24 <GetTimerTicks+0x34>)
 8002f0a:	f7ff fdd0 	bl	8002aae <LL_RTC_TIME_GetSubSecond>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d1f4      	bne.n	8002f00 <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3708      	adds	r7, #8
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	40002800 	.word	0x40002800

08002f28 <LL_AHB2_GRP1_EnableClock>:
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b085      	sub	sp, #20
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002f30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f34:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002f36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002f40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f44:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4013      	ands	r3, r2
 8002f4a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
}
 8002f4e:	bf00      	nop
 8002f50:	3714      	adds	r7, #20
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bc80      	pop	{r7}
 8002f56:	4770      	bx	lr

08002f58 <LL_APB2_GRP1_EnableClock>:
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b085      	sub	sp, #20
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002f60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f64:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002f66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002f70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f74:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4013      	ands	r3, r2
 8002f7a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
}
 8002f7e:	bf00      	nop
 8002f80:	3714      	adds	r7, #20
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bc80      	pop	{r7}
 8002f86:	4770      	bx	lr

08002f88 <LL_APB2_GRP1_DisableClock>:
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8002f90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f94:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	43db      	mvns	r3, r3
 8002f9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	660b      	str	r3, [r1, #96]	; 0x60
}
 8002fa2:	bf00      	nop
 8002fa4:	370c      	adds	r7, #12
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bc80      	pop	{r7}
 8002faa:	4770      	bx	lr

08002fac <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002fb0:	4b22      	ldr	r3, [pc, #136]	; (800303c <MX_USART1_UART_Init+0x90>)
 8002fb2:	4a23      	ldr	r2, [pc, #140]	; (8003040 <MX_USART1_UART_Init+0x94>)
 8002fb4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002fb6:	4b21      	ldr	r3, [pc, #132]	; (800303c <MX_USART1_UART_Init+0x90>)
 8002fb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002fbc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002fbe:	4b1f      	ldr	r3, [pc, #124]	; (800303c <MX_USART1_UART_Init+0x90>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002fc4:	4b1d      	ldr	r3, [pc, #116]	; (800303c <MX_USART1_UART_Init+0x90>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002fca:	4b1c      	ldr	r3, [pc, #112]	; (800303c <MX_USART1_UART_Init+0x90>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002fd0:	4b1a      	ldr	r3, [pc, #104]	; (800303c <MX_USART1_UART_Init+0x90>)
 8002fd2:	220c      	movs	r2, #12
 8002fd4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fd6:	4b19      	ldr	r3, [pc, #100]	; (800303c <MX_USART1_UART_Init+0x90>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fdc:	4b17      	ldr	r3, [pc, #92]	; (800303c <MX_USART1_UART_Init+0x90>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002fe2:	4b16      	ldr	r3, [pc, #88]	; (800303c <MX_USART1_UART_Init+0x90>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002fe8:	4b14      	ldr	r3, [pc, #80]	; (800303c <MX_USART1_UART_Init+0x90>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002fee:	4b13      	ldr	r3, [pc, #76]	; (800303c <MX_USART1_UART_Init+0x90>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002ff4:	4811      	ldr	r0, [pc, #68]	; (800303c <MX_USART1_UART_Init+0x90>)
 8002ff6:	f005 ffe8 	bl	8008fca <HAL_UART_Init>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d001      	beq.n	8003004 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003000:	f7ff f942 	bl	8002288 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003004:	2100      	movs	r1, #0
 8003006:	480d      	ldr	r0, [pc, #52]	; (800303c <MX_USART1_UART_Init+0x90>)
 8003008:	f008 f90b 	bl	800b222 <HAL_UARTEx_SetTxFifoThreshold>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d001      	beq.n	8003016 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003012:	f7ff f939 	bl	8002288 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003016:	2100      	movs	r1, #0
 8003018:	4808      	ldr	r0, [pc, #32]	; (800303c <MX_USART1_UART_Init+0x90>)
 800301a:	f008 f940 	bl	800b29e <HAL_UARTEx_SetRxFifoThreshold>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d001      	beq.n	8003028 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003024:	f7ff f930 	bl	8002288 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8003028:	4804      	ldr	r0, [pc, #16]	; (800303c <MX_USART1_UART_Init+0x90>)
 800302a:	f008 f8bf 	bl	800b1ac <HAL_UARTEx_EnableFifoMode>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d001      	beq.n	8003038 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003034:	f7ff f928 	bl	8002288 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003038:	bf00      	nop
 800303a:	bd80      	pop	{r7, pc}
 800303c:	20000270 	.word	0x20000270
 8003040:	40013800 	.word	0x40013800

08003044 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b096      	sub	sp, #88	; 0x58
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800304c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003050:	2200      	movs	r2, #0
 8003052:	601a      	str	r2, [r3, #0]
 8003054:	605a      	str	r2, [r3, #4]
 8003056:	609a      	str	r2, [r3, #8]
 8003058:	60da      	str	r2, [r3, #12]
 800305a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800305c:	f107 030c 	add.w	r3, r7, #12
 8003060:	2238      	movs	r2, #56	; 0x38
 8003062:	2100      	movs	r1, #0
 8003064:	4618      	mov	r0, r3
 8003066:	f01b fe3f 	bl	801ece8 <memset>
  if(uartHandle->Instance==USART1)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a2f      	ldr	r2, [pc, #188]	; (800312c <HAL_UART_MspInit+0xe8>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d156      	bne.n	8003122 <HAL_UART_MspInit+0xde>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003074:	2301      	movs	r3, #1
 8003076:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003078:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800307c:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800307e:	f107 030c 	add.w	r3, r7, #12
 8003082:	4618      	mov	r0, r3
 8003084:	f004 fe20 	bl	8007cc8 <HAL_RCCEx_PeriphCLKConfig>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d001      	beq.n	8003092 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800308e:	f7ff f8fb 	bl	8002288 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003092:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003096:	f7ff ff5f 	bl	8002f58 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800309a:	2002      	movs	r0, #2
 800309c:	f7ff ff44 	bl	8002f28 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 80030a0:	23c0      	movs	r3, #192	; 0xc0
 80030a2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030a4:	2302      	movs	r3, #2
 80030a6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a8:	2300      	movs	r3, #0
 80030aa:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030ac:	2303      	movs	r3, #3
 80030ae:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80030b0:	2307      	movs	r3, #7
 80030b2:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030b4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80030b8:	4619      	mov	r1, r3
 80030ba:	481d      	ldr	r0, [pc, #116]	; (8003130 <HAL_UART_MspInit+0xec>)
 80030bc:	f002 fa54 	bl	8005568 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 80030c0:	4b1c      	ldr	r3, [pc, #112]	; (8003134 <HAL_UART_MspInit+0xf0>)
 80030c2:	4a1d      	ldr	r2, [pc, #116]	; (8003138 <HAL_UART_MspInit+0xf4>)
 80030c4:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80030c6:	4b1b      	ldr	r3, [pc, #108]	; (8003134 <HAL_UART_MspInit+0xf0>)
 80030c8:	2212      	movs	r2, #18
 80030ca:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80030cc:	4b19      	ldr	r3, [pc, #100]	; (8003134 <HAL_UART_MspInit+0xf0>)
 80030ce:	2210      	movs	r2, #16
 80030d0:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030d2:	4b18      	ldr	r3, [pc, #96]	; (8003134 <HAL_UART_MspInit+0xf0>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80030d8:	4b16      	ldr	r3, [pc, #88]	; (8003134 <HAL_UART_MspInit+0xf0>)
 80030da:	2280      	movs	r2, #128	; 0x80
 80030dc:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80030de:	4b15      	ldr	r3, [pc, #84]	; (8003134 <HAL_UART_MspInit+0xf0>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80030e4:	4b13      	ldr	r3, [pc, #76]	; (8003134 <HAL_UART_MspInit+0xf0>)
 80030e6:	2200      	movs	r2, #0
 80030e8:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80030ea:	4b12      	ldr	r3, [pc, #72]	; (8003134 <HAL_UART_MspInit+0xf0>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80030f0:	4b10      	ldr	r3, [pc, #64]	; (8003134 <HAL_UART_MspInit+0xf0>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80030f6:	480f      	ldr	r0, [pc, #60]	; (8003134 <HAL_UART_MspInit+0xf0>)
 80030f8:	f001 fc32 	bl	8004960 <HAL_DMA_Init>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d001      	beq.n	8003106 <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 8003102:	f7ff f8c1 	bl	8002288 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a0a      	ldr	r2, [pc, #40]	; (8003134 <HAL_UART_MspInit+0xf0>)
 800310a:	67da      	str	r2, [r3, #124]	; 0x7c
 800310c:	4a09      	ldr	r2, [pc, #36]	; (8003134 <HAL_UART_MspInit+0xf0>)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8003112:	2200      	movs	r2, #0
 8003114:	2102      	movs	r1, #2
 8003116:	2024      	movs	r0, #36	; 0x24
 8003118:	f001 fbeb 	bl	80048f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800311c:	2024      	movs	r0, #36	; 0x24
 800311e:	f001 fc02 	bl	8004926 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003122:	bf00      	nop
 8003124:	3758      	adds	r7, #88	; 0x58
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	40013800 	.word	0x40013800
 8003130:	48000400 	.word	0x48000400
 8003134:	20000304 	.word	0x20000304
 8003138:	40020008 	.word	0x40020008

0800313c <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a0b      	ldr	r2, [pc, #44]	; (8003178 <HAL_UART_MspDeInit+0x3c>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d10f      	bne.n	800316e <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800314e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003152:	f7ff ff19 	bl	8002f88 <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, USARTx_RX_Pin|USARTx_TX_Pin);
 8003156:	21c0      	movs	r1, #192	; 0xc0
 8003158:	4808      	ldr	r0, [pc, #32]	; (800317c <HAL_UART_MspDeInit+0x40>)
 800315a:	f002 fb65 	bl	8005828 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003162:	4618      	mov	r0, r3
 8003164:	f001 fca4 	bl	8004ab0 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8003168:	2024      	movs	r0, #36	; 0x24
 800316a:	f001 fbea 	bl	8004942 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 800316e:	bf00      	nop
 8003170:	3708      	adds	r7, #8
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	40013800 	.word	0x40013800
 800317c:	48000400 	.word	0x48000400

08003180 <LL_APB2_GRP1_ForceReset>:
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 8003188:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800318c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800318e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4313      	orrs	r3, r2
 8003196:	640b      	str	r3, [r1, #64]	; 0x40
}
 8003198:	bf00      	nop
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	bc80      	pop	{r7}
 80031a0:	4770      	bx	lr

080031a2 <LL_APB2_GRP1_ReleaseReset>:
{
 80031a2:	b480      	push	{r7}
 80031a4:	b083      	sub	sp, #12
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 80031aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	43db      	mvns	r3, r3
 80031b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031b8:	4013      	ands	r3, r2
 80031ba:	640b      	str	r3, [r1, #64]	; 0x40
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bc80      	pop	{r7}
 80031c4:	4770      	bx	lr
	...

080031c8 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80031d0:	4b06      	ldr	r3, [pc, #24]	; (80031ec <LL_EXTI_EnableIT_0_31+0x24>)
 80031d2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80031d6:	4905      	ldr	r1, [pc, #20]	; (80031ec <LL_EXTI_EnableIT_0_31+0x24>)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4313      	orrs	r3, r2
 80031dc:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80031e0:	bf00      	nop
 80031e2:	370c      	adds	r7, #12
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bc80      	pop	{r7}
 80031e8:	4770      	bx	lr
 80031ea:	bf00      	nop
 80031ec:	58000800 	.word	0x58000800

080031f0 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 80031f8:	4a07      	ldr	r2, [pc, #28]	; (8003218 <vcom_Init+0x28>)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 80031fe:	f7fe fbf3 	bl	80019e8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8003202:	f7ff fed3 	bl	8002fac <MX_USART1_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_26);
 8003206:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800320a:	f7ff ffdd 	bl	80031c8 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 800320e:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8003210:	4618      	mov	r0, r3
 8003212:	3708      	adds	r7, #8
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	20000368 	.word	0x20000368

0800321c <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 8003220:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003224:	f7ff ffac 	bl	8003180 <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 8003228:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800322c:	f7ff ffb9 	bl	80031a2 <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 8003230:	4804      	ldr	r0, [pc, #16]	; (8003244 <vcom_DeInit+0x28>)
 8003232:	f7ff ff83 	bl	800313c <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8003236:	200f      	movs	r0, #15
 8003238:	f001 fb83 	bl	8004942 <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 800323c:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 800323e:	4618      	mov	r0, r3
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	20000270 	.word	0x20000270

08003248 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	460b      	mov	r3, r1
 8003252:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8003254:	887b      	ldrh	r3, [r7, #2]
 8003256:	461a      	mov	r2, r3
 8003258:	6879      	ldr	r1, [r7, #4]
 800325a:	4804      	ldr	r0, [pc, #16]	; (800326c <vcom_Trace_DMA+0x24>)
 800325c:	f005 ff52 	bl	8009104 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 8003260:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8003262:	4618      	mov	r0, r3
 8003264:	3708      	adds	r7, #8
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	20000270 	.word	0x20000270

08003270 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8003278:	4a19      	ldr	r2, [pc, #100]	; (80032e0 <vcom_ReceiveInit+0x70>)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 800327e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003282:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 8003284:	f107 0308 	add.w	r3, r7, #8
 8003288:	e893 0006 	ldmia.w	r3, {r1, r2}
 800328c:	4815      	ldr	r0, [pc, #84]	; (80032e4 <vcom_ReceiveInit+0x74>)
 800328e:	f007 ff00 	bl	800b092 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8003292:	bf00      	nop
 8003294:	4b13      	ldr	r3, [pc, #76]	; (80032e4 <vcom_ReceiveInit+0x74>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	69db      	ldr	r3, [r3, #28]
 800329a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800329e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032a2:	d0f7      	beq.n	8003294 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 80032a4:	bf00      	nop
 80032a6:	4b0f      	ldr	r3, [pc, #60]	; (80032e4 <vcom_ReceiveInit+0x74>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	69db      	ldr	r3, [r3, #28]
 80032ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032b4:	d1f7      	bne.n	80032a6 <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 80032b6:	4b0b      	ldr	r3, [pc, #44]	; (80032e4 <vcom_ReceiveInit+0x74>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	689a      	ldr	r2, [r3, #8]
 80032bc:	4b09      	ldr	r3, [pc, #36]	; (80032e4 <vcom_ReceiveInit+0x74>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80032c4:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 80032c6:	4807      	ldr	r0, [pc, #28]	; (80032e4 <vcom_ReceiveInit+0x74>)
 80032c8:	f007 ff3e 	bl	800b148 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 80032cc:	2201      	movs	r2, #1
 80032ce:	4906      	ldr	r1, [pc, #24]	; (80032e8 <vcom_ReceiveInit+0x78>)
 80032d0:	4804      	ldr	r0, [pc, #16]	; (80032e4 <vcom_ReceiveInit+0x74>)
 80032d2:	f005 fecb 	bl	800906c <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 80032d6:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3710      	adds	r7, #16
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	2000036c 	.word	0x2000036c
 80032e4:	20000270 	.word	0x20000270
 80032e8:	20000364 	.word	0x20000364

080032ec <vcom_Resume>:

void vcom_Resume(void)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80032f0:	4808      	ldr	r0, [pc, #32]	; (8003314 <vcom_Resume+0x28>)
 80032f2:	f005 fe6a 	bl	8008fca <HAL_UART_Init>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d001      	beq.n	8003300 <vcom_Resume+0x14>
  {
    Error_Handler();
 80032fc:	f7fe ffc4 	bl	8002288 <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003300:	4805      	ldr	r0, [pc, #20]	; (8003318 <vcom_Resume+0x2c>)
 8003302:	f001 fb2d 	bl	8004960 <HAL_DMA_Init>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d001      	beq.n	8003310 <vcom_Resume+0x24>
  {
    Error_Handler();
 800330c:	f7fe ffbc 	bl	8002288 <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8003310:	bf00      	nop
 8003312:	bd80      	pop	{r7, pc}
 8003314:	20000270 	.word	0x20000270
 8003318:	20000304 	.word	0x20000304

0800331c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART1)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a05      	ldr	r2, [pc, #20]	; (8003340 <HAL_UART_TxCpltCallback+0x24>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d103      	bne.n	8003336 <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 800332e:	4b05      	ldr	r3, [pc, #20]	; (8003344 <HAL_UART_TxCpltCallback+0x28>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2000      	movs	r0, #0
 8003334:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8003336:	bf00      	nop
 8003338:	3708      	adds	r7, #8
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	40013800 	.word	0x40013800
 8003344:	20000368 	.word	0x20000368

08003348 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART1)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a0d      	ldr	r2, [pc, #52]	; (800338c <HAL_UART_RxCpltCallback+0x44>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d113      	bne.n	8003382 <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 800335a:	4b0d      	ldr	r3, [pc, #52]	; (8003390 <HAL_UART_RxCpltCallback+0x48>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00a      	beq.n	8003378 <HAL_UART_RxCpltCallback+0x30>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003368:	2b00      	cmp	r3, #0
 800336a:	d105      	bne.n	8003378 <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 800336c:	4b08      	ldr	r3, [pc, #32]	; (8003390 <HAL_UART_RxCpltCallback+0x48>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2200      	movs	r2, #0
 8003372:	2101      	movs	r1, #1
 8003374:	4807      	ldr	r0, [pc, #28]	; (8003394 <HAL_UART_RxCpltCallback+0x4c>)
 8003376:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8003378:	2201      	movs	r2, #1
 800337a:	4906      	ldr	r1, [pc, #24]	; (8003394 <HAL_UART_RxCpltCallback+0x4c>)
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f005 fe75 	bl	800906c <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8003382:	bf00      	nop
 8003384:	3708      	adds	r7, #8
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	40013800 	.word	0x40013800
 8003390:	2000036c 	.word	0x2000036c
 8003394:	20000364 	.word	0x20000364

08003398 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003398:	480d      	ldr	r0, [pc, #52]	; (80033d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800339a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800339c:	f7ff fb81 	bl	8002aa2 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80033a0:	480c      	ldr	r0, [pc, #48]	; (80033d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80033a2:	490d      	ldr	r1, [pc, #52]	; (80033d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80033a4:	4a0d      	ldr	r2, [pc, #52]	; (80033dc <LoopForever+0xe>)
  movs r3, #0
 80033a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033a8:	e002      	b.n	80033b0 <LoopCopyDataInit>

080033aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033ae:	3304      	adds	r3, #4

080033b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033b4:	d3f9      	bcc.n	80033aa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033b6:	4a0a      	ldr	r2, [pc, #40]	; (80033e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80033b8:	4c0a      	ldr	r4, [pc, #40]	; (80033e4 <LoopForever+0x16>)
  movs r3, #0
 80033ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033bc:	e001      	b.n	80033c2 <LoopFillZerobss>

080033be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033c0:	3204      	adds	r2, #4

080033c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033c4:	d3fb      	bcc.n	80033be <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80033c6:	f01b fc97 	bl	801ecf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80033ca:	f7fe fef1 	bl	80021b0 <main>

080033ce <LoopForever>:

LoopForever:
    b LoopForever
 80033ce:	e7fe      	b.n	80033ce <LoopForever>
  ldr   r0, =_estack
 80033d0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80033d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80033d8:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 80033dc:	0801ff04 	.word	0x0801ff04
  ldr r2, =_sbss
 80033e0:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 80033e4:	20002270 	.word	0x20002270

080033e8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80033e8:	e7fe      	b.n	80033e8 <ADC_IRQHandler>

080033ea <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 80033ea:	b580      	push	{r7, lr}
 80033ec:	b086      	sub	sp, #24
 80033ee:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 80033f0:	1d3b      	adds	r3, r7, #4
 80033f2:	2200      	movs	r2, #0
 80033f4:	601a      	str	r2, [r3, #0]
 80033f6:	605a      	str	r2, [r3, #4]
 80033f8:	609a      	str	r2, [r3, #8]
 80033fa:	60da      	str	r2, [r3, #12]
 80033fc:	611a      	str	r2, [r3, #16]
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 80033fe:	2310      	movs	r3, #16
 8003400:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8003402:	2301      	movs	r3, #1
 8003404:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8003406:	2300      	movs	r3, #0
 8003408:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800340a:	2303      	movs	r3, #3
 800340c:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 800340e:	1d3b      	adds	r3, r7, #4
 8003410:	4619      	mov	r1, r3
 8003412:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003416:	f002 f8a7 	bl	8005568 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 800341a:	2320      	movs	r3, #32
 800341c:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 800341e:	1d3b      	adds	r3, r7, #4
 8003420:	4619      	mov	r1, r3
 8003422:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003426:	f002 f89f 	bl	8005568 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 800342a:	2200      	movs	r2, #0
 800342c:	2120      	movs	r1, #32
 800342e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003432:	f002 fac7 	bl	80059c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8003436:	2200      	movs	r2, #0
 8003438:	2110      	movs	r1, #16
 800343a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800343e:	f002 fac1 	bl	80059c4 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8003442:	2300      	movs	r3, #0
}
 8003444:	4618      	mov	r0, r3
 8003446:	3718      	adds	r7, #24
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	4603      	mov	r3, r0
 8003454:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8003456:	79fb      	ldrb	r3, [r7, #7]
 8003458:	2b03      	cmp	r3, #3
 800345a:	d83f      	bhi.n	80034dc <BSP_RADIO_ConfigRFSwitch+0x90>
 800345c:	a201      	add	r2, pc, #4	; (adr r2, 8003464 <BSP_RADIO_ConfigRFSwitch+0x18>)
 800345e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003462:	bf00      	nop
 8003464:	08003475 	.word	0x08003475
 8003468:	0800348f 	.word	0x0800348f
 800346c:	080034a9 	.word	0x080034a9
 8003470:	080034c3 	.word	0x080034c3
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8003474:	2200      	movs	r2, #0
 8003476:	2110      	movs	r1, #16
 8003478:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800347c:	f002 faa2 	bl	80059c4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8003480:	2200      	movs	r2, #0
 8003482:	2120      	movs	r1, #32
 8003484:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003488:	f002 fa9c 	bl	80059c4 <HAL_GPIO_WritePin>
      break;      
 800348c:	e027      	b.n	80034de <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 800348e:	2201      	movs	r2, #1
 8003490:	2110      	movs	r1, #16
 8003492:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003496:	f002 fa95 	bl	80059c4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 800349a:	2200      	movs	r2, #0
 800349c:	2120      	movs	r1, #32
 800349e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034a2:	f002 fa8f 	bl	80059c4 <HAL_GPIO_WritePin>
      break;
 80034a6:	e01a      	b.n	80034de <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 80034a8:	2201      	movs	r2, #1
 80034aa:	2110      	movs	r1, #16
 80034ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034b0:	f002 fa88 	bl	80059c4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 80034b4:	2201      	movs	r2, #1
 80034b6:	2120      	movs	r1, #32
 80034b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034bc:	f002 fa82 	bl	80059c4 <HAL_GPIO_WritePin>
      break;
 80034c0:	e00d      	b.n	80034de <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80034c2:	2200      	movs	r2, #0
 80034c4:	2110      	movs	r1, #16
 80034c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034ca:	f002 fa7b 	bl	80059c4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 80034ce:	2201      	movs	r2, #1
 80034d0:	2120      	movs	r1, #32
 80034d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034d6:	f002 fa75 	bl	80059c4 <HAL_GPIO_WritePin>
      break;
 80034da:	e000      	b.n	80034de <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 80034dc:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 80034de:	2300      	movs	r3, #0
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3708      	adds	r7, #8
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 80034e8:	b480      	push	{r7}
 80034ea:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 80034ec:	2302      	movs	r3, #2
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bc80      	pop	{r7}
 80034f4:	4770      	bx	lr

080034f6 <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 80034f6:	b480      	push	{r7}
 80034f8:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 80034fa:	2301      	movs	r3, #1
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	46bd      	mov	sp, r7
 8003500:	bc80      	pop	{r7}
 8003502:	4770      	bx	lr

08003504 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8003504:	b480      	push	{r7}
 8003506:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8003508:	2301      	movs	r3, #1
}
 800350a:	4618      	mov	r0, r3
 800350c:	46bd      	mov	sp, r7
 800350e:	bc80      	pop	{r7}
 8003510:	4770      	bx	lr

08003512 <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 8003512:	b480      	push	{r7}
 8003514:	b085      	sub	sp, #20
 8003516:	af00      	add	r7, sp, #0
 8003518:	4603      	mov	r3, r0
 800351a:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 800351c:	79fb      	ldrb	r3, [r7, #7]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d102      	bne.n	8003528 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8003522:	230f      	movs	r3, #15
 8003524:	60fb      	str	r3, [r7, #12]
 8003526:	e001      	b.n	800352c <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8003528:	2316      	movs	r3, #22
 800352a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800352c:	68fb      	ldr	r3, [r7, #12]
}
 800352e:	4618      	mov	r0, r3
 8003530:	3714      	adds	r7, #20
 8003532:	46bd      	mov	sp, r7
 8003534:	bc80      	pop	{r7}
 8003536:	4770      	bx	lr

08003538 <LL_DBGMCU_DisableDBGSleepMode>:
{
 8003538:	b480      	push	{r7}
 800353a:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 800353c:	4b04      	ldr	r3, [pc, #16]	; (8003550 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	4a03      	ldr	r2, [pc, #12]	; (8003550 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 8003542:	f023 0301 	bic.w	r3, r3, #1
 8003546:	6053      	str	r3, [r2, #4]
}
 8003548:	bf00      	nop
 800354a:	46bd      	mov	sp, r7
 800354c:	bc80      	pop	{r7}
 800354e:	4770      	bx	lr
 8003550:	e0042000 	.word	0xe0042000

08003554 <LL_DBGMCU_DisableDBGStopMode>:
{
 8003554:	b480      	push	{r7}
 8003556:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8003558:	4b04      	ldr	r3, [pc, #16]	; (800356c <LL_DBGMCU_DisableDBGStopMode+0x18>)
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	4a03      	ldr	r2, [pc, #12]	; (800356c <LL_DBGMCU_DisableDBGStopMode+0x18>)
 800355e:	f023 0302 	bic.w	r3, r3, #2
 8003562:	6053      	str	r3, [r2, #4]
}
 8003564:	bf00      	nop
 8003566:	46bd      	mov	sp, r7
 8003568:	bc80      	pop	{r7}
 800356a:	4770      	bx	lr
 800356c:	e0042000 	.word	0xe0042000

08003570 <LL_DBGMCU_DisableDBGStandbyMode>:
{
 8003570:	b480      	push	{r7}
 8003572:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8003574:	4b04      	ldr	r3, [pc, #16]	; (8003588 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	4a03      	ldr	r2, [pc, #12]	; (8003588 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 800357a:	f023 0304 	bic.w	r3, r3, #4
 800357e:	6053      	str	r3, [r2, #4]
}
 8003580:	bf00      	nop
 8003582:	46bd      	mov	sp, r7
 8003584:	bc80      	pop	{r7}
 8003586:	4770      	bx	lr
 8003588:	e0042000 	.word	0xe0042000

0800358c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003592:	2300      	movs	r3, #0
 8003594:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003596:	2003      	movs	r0, #3
 8003598:	f001 f9a0 	bl	80048dc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800359c:	f004 f9b6 	bl	800790c <HAL_RCC_GetHCLKFreq>
 80035a0:	4603      	mov	r3, r0
 80035a2:	4a09      	ldr	r2, [pc, #36]	; (80035c8 <HAL_Init+0x3c>)
 80035a4:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80035a6:	200f      	movs	r0, #15
 80035a8:	f7ff f994 	bl	80028d4 <HAL_InitTick>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d002      	beq.n	80035b8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	71fb      	strb	r3, [r7, #7]
 80035b6:	e001      	b.n	80035bc <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80035b8:	f7fe ff5d 	bl	8002476 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80035bc:	79fb      	ldrb	r3, [r7, #7]
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3708      	adds	r7, #8
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	20000004 	.word	0x20000004

080035cc <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80035cc:	b480      	push	{r7}
 80035ce:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80035d0:	4b04      	ldr	r3, [pc, #16]	; (80035e4 <HAL_SuspendTick+0x18>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a03      	ldr	r2, [pc, #12]	; (80035e4 <HAL_SuspendTick+0x18>)
 80035d6:	f023 0302 	bic.w	r3, r3, #2
 80035da:	6013      	str	r3, [r2, #0]
}
 80035dc:	bf00      	nop
 80035de:	46bd      	mov	sp, r7
 80035e0:	bc80      	pop	{r7}
 80035e2:	4770      	bx	lr
 80035e4:	e000e010 	.word	0xe000e010

080035e8 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80035e8:	b480      	push	{r7}
 80035ea:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80035ec:	4b04      	ldr	r3, [pc, #16]	; (8003600 <HAL_ResumeTick+0x18>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a03      	ldr	r2, [pc, #12]	; (8003600 <HAL_ResumeTick+0x18>)
 80035f2:	f043 0302 	orr.w	r3, r3, #2
 80035f6:	6013      	str	r3, [r2, #0]
}
 80035f8:	bf00      	nop
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bc80      	pop	{r7}
 80035fe:	4770      	bx	lr
 8003600:	e000e010 	.word	0xe000e010

08003604 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8003604:	b480      	push	{r7}
 8003606:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8003608:	4b02      	ldr	r3, [pc, #8]	; (8003614 <HAL_GetUIDw0+0x10>)
 800360a:	681b      	ldr	r3, [r3, #0]
}
 800360c:	4618      	mov	r0, r3
 800360e:	46bd      	mov	sp, r7
 8003610:	bc80      	pop	{r7}
 8003612:	4770      	bx	lr
 8003614:	1fff7590 	.word	0x1fff7590

08003618 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8003618:	b480      	push	{r7}
 800361a:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 800361c:	4b02      	ldr	r3, [pc, #8]	; (8003628 <HAL_GetUIDw1+0x10>)
 800361e:	681b      	ldr	r3, [r3, #0]
}
 8003620:	4618      	mov	r0, r3
 8003622:	46bd      	mov	sp, r7
 8003624:	bc80      	pop	{r7}
 8003626:	4770      	bx	lr
 8003628:	1fff7594 	.word	0x1fff7594

0800362c <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 800362c:	b480      	push	{r7}
 800362e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8003630:	4b02      	ldr	r3, [pc, #8]	; (800363c <HAL_GetUIDw2+0x10>)
 8003632:	681b      	ldr	r3, [r3, #0]
}
 8003634:	4618      	mov	r0, r3
 8003636:	46bd      	mov	sp, r7
 8003638:	bc80      	pop	{r7}
 800363a:	4770      	bx	lr
 800363c:	1fff7598 	.word	0x1fff7598

08003640 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGSleepMode();
 8003644:	f7ff ff78 	bl	8003538 <LL_DBGMCU_DisableDBGSleepMode>
}
 8003648:	bf00      	nop
 800364a:	bd80      	pop	{r7, pc}

0800364c <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStopMode();
 8003650:	f7ff ff80 	bl	8003554 <LL_DBGMCU_DisableDBGStopMode>
}
 8003654:	bf00      	nop
 8003656:	bd80      	pop	{r7, pc}

08003658 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStandbyMode();
 800365c:	f7ff ff88 	bl	8003570 <LL_DBGMCU_DisableDBGStandbyMode>
}
 8003660:	bf00      	nop
 8003662:	bd80      	pop	{r7, pc}

08003664 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	431a      	orrs	r2, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	601a      	str	r2, [r3, #0]
}
 800367e:	bf00      	nop
 8003680:	370c      	adds	r7, #12
 8003682:	46bd      	mov	sp, r7
 8003684:	bc80      	pop	{r7}
 8003686:	4770      	bx	lr

08003688 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003698:	4618      	mov	r0, r3
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	bc80      	pop	{r7}
 80036a0:	4770      	bx	lr

080036a2 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80036a2:	b480      	push	{r7}
 80036a4:	b085      	sub	sp, #20
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	60f8      	str	r0, [r7, #12]
 80036aa:	60b9      	str	r1, [r7, #8]
 80036ac:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	695a      	ldr	r2, [r3, #20]
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	f003 0304 	and.w	r3, r3, #4
 80036b8:	2107      	movs	r1, #7
 80036ba:	fa01 f303 	lsl.w	r3, r1, r3
 80036be:	43db      	mvns	r3, r3
 80036c0:	401a      	ands	r2, r3
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	f003 0304 	and.w	r3, r3, #4
 80036c8:	6879      	ldr	r1, [r7, #4]
 80036ca:	fa01 f303 	lsl.w	r3, r1, r3
 80036ce:	431a      	orrs	r2, r3
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80036d4:	bf00      	nop
 80036d6:	3714      	adds	r7, #20
 80036d8:	46bd      	mov	sp, r7
 80036da:	bc80      	pop	{r7}
 80036dc:	4770      	bx	lr

080036de <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80036de:	b480      	push	{r7}
 80036e0:	b083      	sub	sp, #12
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
 80036e6:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	695a      	ldr	r2, [r3, #20]
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	f003 0304 	and.w	r3, r3, #4
 80036f2:	2107      	movs	r1, #7
 80036f4:	fa01 f303 	lsl.w	r3, r1, r3
 80036f8:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003700:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003704:	4618      	mov	r0, r3
 8003706:	370c      	adds	r7, #12
 8003708:	46bd      	mov	sp, r7
 800370a:	bc80      	pop	{r7}
 800370c:	4770      	bx	lr

0800370e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800370e:	b480      	push	{r7}
 8003710:	b083      	sub	sp, #12
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800371e:	2b00      	cmp	r3, #0
 8003720:	d101      	bne.n	8003726 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003722:	2301      	movs	r3, #1
 8003724:	e000      	b.n	8003728 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	370c      	adds	r7, #12
 800372c:	46bd      	mov	sp, r7
 800372e:	bc80      	pop	{r7}
 8003730:	4770      	bx	lr

08003732 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003732:	b480      	push	{r7}
 8003734:	b085      	sub	sp, #20
 8003736:	af00      	add	r7, sp, #0
 8003738:	60f8      	str	r0, [r7, #12]
 800373a:	60b9      	str	r1, [r7, #8]
 800373c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	f003 031f 	and.w	r3, r3, #31
 8003748:	210f      	movs	r1, #15
 800374a:	fa01 f303 	lsl.w	r3, r1, r3
 800374e:	43db      	mvns	r3, r3
 8003750:	401a      	ands	r2, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	0e9b      	lsrs	r3, r3, #26
 8003756:	f003 010f 	and.w	r1, r3, #15
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	f003 031f 	and.w	r3, r3, #31
 8003760:	fa01 f303 	lsl.w	r3, r1, r3
 8003764:	431a      	orrs	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800376a:	bf00      	nop
 800376c:	3714      	adds	r7, #20
 800376e:	46bd      	mov	sp, r7
 8003770:	bc80      	pop	{r7}
 8003772:	4770      	bx	lr

08003774 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003788:	431a      	orrs	r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800378e:	bf00      	nop
 8003790:	370c      	adds	r7, #12
 8003792:	46bd      	mov	sp, r7
 8003794:	bc80      	pop	{r7}
 8003796:	4770      	bx	lr

08003798 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80037ac:	43db      	mvns	r3, r3
 80037ae:	401a      	ands	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80037b4:	bf00      	nop
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bc80      	pop	{r7}
 80037bc:	4770      	bx	lr

080037be <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80037be:	b480      	push	{r7}
 80037c0:	b085      	sub	sp, #20
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	60f8      	str	r0, [r7, #12]
 80037c6:	60b9      	str	r1, [r7, #8]
 80037c8:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	695a      	ldr	r2, [r3, #20]
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	021b      	lsls	r3, r3, #8
 80037d2:	43db      	mvns	r3, r3
 80037d4:	401a      	ands	r2, r3
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	0219      	lsls	r1, r3, #8
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	400b      	ands	r3, r1
 80037de:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 80037e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80037e6:	431a      	orrs	r2, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80037ec:	bf00      	nop
 80037ee:	3714      	adds	r7, #20
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bc80      	pop	{r7}
 80037f4:	4770      	bx	lr

080037f6 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80037f6:	b480      	push	{r7}
 80037f8:	b083      	sub	sp, #12
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003806:	f023 0317 	bic.w	r3, r3, #23
 800380a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003812:	bf00      	nop
 8003814:	370c      	adds	r7, #12
 8003816:	46bd      	mov	sp, r7
 8003818:	bc80      	pop	{r7}
 800381a:	4770      	bx	lr

0800381c <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800382c:	f023 0317 	bic.w	r3, r3, #23
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	6093      	str	r3, [r2, #8]
}
 8003834:	bf00      	nop
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	bc80      	pop	{r7}
 800383c:	4770      	bx	lr

0800383e <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800383e:	b480      	push	{r7}
 8003840:	b083      	sub	sp, #12
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800384e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003852:	d101      	bne.n	8003858 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003854:	2301      	movs	r3, #1
 8003856:	e000      	b.n	800385a <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	370c      	adds	r7, #12
 800385e:	46bd      	mov	sp, r7
 8003860:	bc80      	pop	{r7}
 8003862:	4770      	bx	lr

08003864 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003874:	f023 0317 	bic.w	r3, r3, #23
 8003878:	f043 0201 	orr.w	r2, r3, #1
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003880:	bf00      	nop
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	bc80      	pop	{r7}
 8003888:	4770      	bx	lr

0800388a <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800388a:	b480      	push	{r7}
 800388c:	b083      	sub	sp, #12
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800389a:	f023 0317 	bic.w	r3, r3, #23
 800389e:	f043 0202 	orr.w	r2, r3, #2
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80038a6:	bf00      	nop
 80038a8:	370c      	adds	r7, #12
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bc80      	pop	{r7}
 80038ae:	4770      	bx	lr

080038b0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	f003 0301 	and.w	r3, r3, #1
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d101      	bne.n	80038c8 <LL_ADC_IsEnabled+0x18>
 80038c4:	2301      	movs	r3, #1
 80038c6:	e000      	b.n	80038ca <LL_ADC_IsEnabled+0x1a>
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	370c      	adds	r7, #12
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bc80      	pop	{r7}
 80038d2:	4770      	bx	lr

080038d4 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f003 0302 	and.w	r3, r3, #2
 80038e4:	2b02      	cmp	r3, #2
 80038e6:	d101      	bne.n	80038ec <LL_ADC_IsDisableOngoing+0x18>
 80038e8:	2301      	movs	r3, #1
 80038ea:	e000      	b.n	80038ee <LL_ADC_IsDisableOngoing+0x1a>
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	370c      	adds	r7, #12
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bc80      	pop	{r7}
 80038f6:	4770      	bx	lr

080038f8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003908:	f023 0317 	bic.w	r3, r3, #23
 800390c:	f043 0204 	orr.w	r2, r3, #4
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003914:	bf00      	nop
 8003916:	370c      	adds	r7, #12
 8003918:	46bd      	mov	sp, r7
 800391a:	bc80      	pop	{r7}
 800391c:	4770      	bx	lr

0800391e <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800391e:	b480      	push	{r7}
 8003920:	b083      	sub	sp, #12
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800392e:	f023 0317 	bic.w	r3, r3, #23
 8003932:	f043 0210 	orr.w	r2, r3, #16
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800393a:	bf00      	nop
 800393c:	370c      	adds	r7, #12
 800393e:	46bd      	mov	sp, r7
 8003940:	bc80      	pop	{r7}
 8003942:	4770      	bx	lr

08003944 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f003 0304 	and.w	r3, r3, #4
 8003954:	2b04      	cmp	r3, #4
 8003956:	d101      	bne.n	800395c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003958:	2301      	movs	r3, #1
 800395a:	e000      	b.n	800395e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	370c      	adds	r7, #12
 8003962:	46bd      	mov	sp, r7
 8003964:	bc80      	pop	{r7}
 8003966:	4770      	bx	lr

08003968 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b088      	sub	sp, #32
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003970:	2300      	movs	r3, #0
 8003972:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8003974:	2300      	movs	r3, #0
 8003976:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8003978:	2300      	movs	r3, #0
 800397a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800397c:	2300      	movs	r3, #0
 800397e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d101      	bne.n	800398a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e17e      	b.n	8003c88 <HAL_ADC_Init+0x320>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003994:	2b00      	cmp	r3, #0
 8003996:	d109      	bne.n	80039ac <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f7fd ff5d 	bl	8001858 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7ff ff44 	bl	800383e <LL_ADC_IsInternalRegulatorEnabled>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d115      	bne.n	80039e8 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4618      	mov	r0, r3
 80039c2:	f7ff ff18 	bl	80037f6 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80039c6:	4b9e      	ldr	r3, [pc, #632]	; (8003c40 <HAL_ADC_Init+0x2d8>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	099b      	lsrs	r3, r3, #6
 80039cc:	4a9d      	ldr	r2, [pc, #628]	; (8003c44 <HAL_ADC_Init+0x2dc>)
 80039ce:	fba2 2303 	umull	r2, r3, r2, r3
 80039d2:	099b      	lsrs	r3, r3, #6
 80039d4:	3301      	adds	r3, #1
 80039d6:	005b      	lsls	r3, r3, #1
 80039d8:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80039da:	e002      	b.n	80039e2 <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	3b01      	subs	r3, #1
 80039e0:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d1f9      	bne.n	80039dc <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4618      	mov	r0, r3
 80039ee:	f7ff ff26 	bl	800383e <LL_ADC_IsInternalRegulatorEnabled>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d10d      	bne.n	8003a14 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039fc:	f043 0210 	orr.w	r2, r3, #16
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a08:	f043 0201 	orr.w	r2, r3, #1
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f7ff ff93 	bl	8003944 <LL_ADC_REG_IsConversionOngoing>
 8003a1e:	6138      	str	r0, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a24:	f003 0310 	and.w	r3, r3, #16
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	f040 8124 	bne.w	8003c76 <HAL_ADC_Init+0x30e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	f040 8120 	bne.w	8003c76 <HAL_ADC_Init+0x30e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a3a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003a3e:	f043 0202 	orr.w	r2, r3, #2
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f7ff ff30 	bl	80038b0 <LL_ADC_IsEnabled>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	f040 80a7 	bne.w	8003ba6 <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	7e1b      	ldrb	r3, [r3, #24]
 8003a60:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003a62:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	7e5b      	ldrb	r3, [r3, #25]
 8003a68:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003a6a:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	7e9b      	ldrb	r3, [r3, #26]
 8003a70:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003a72:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003a78:	2a00      	cmp	r2, #0
 8003a7a:	d002      	beq.n	8003a82 <HAL_ADC_Init+0x11a>
 8003a7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003a80:	e000      	b.n	8003a84 <HAL_ADC_Init+0x11c>
 8003a82:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003a84:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003a8a:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	691b      	ldr	r3, [r3, #16]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	da04      	bge.n	8003a9e <HAL_ADC_Init+0x136>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	691b      	ldr	r3, [r3, #16]
 8003a98:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003a9c:	e001      	b.n	8003aa2 <HAL_ADC_Init+0x13a>
 8003a9e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 8003aa2:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003aaa:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003aac:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003aae:	69ba      	ldr	r2, [r7, #24]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d114      	bne.n	8003ae8 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	7e9b      	ldrb	r3, [r3, #26]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d104      	bne.n	8003ad0 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003acc:	61bb      	str	r3, [r7, #24]
 8003ace:	e00b      	b.n	8003ae8 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ad4:	f043 0220 	orr.w	r2, r3, #32
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ae0:	f043 0201 	orr.w	r2, r3, #1
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d009      	beq.n	8003b04 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af4:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003afc:	4313      	orrs	r3, r2
 8003afe:	69ba      	ldr	r2, [r7, #24]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 8003b0e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	6812      	ldr	r2, [r2, #0]
 8003b16:	69b9      	ldr	r1, [r7, #24]
 8003b18:	430b      	orrs	r3, r1
 8003b1a:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	697a      	ldr	r2, [r7, #20]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d111      	bne.n	8003b5e <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003b46:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003b4c:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8003b52:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	f043 0301 	orr.w	r3, r3, #1
 8003b5c:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	691a      	ldr	r2, [r3, #16]
 8003b64:	4b38      	ldr	r3, [pc, #224]	; (8003c48 <HAL_ADC_Init+0x2e0>)
 8003b66:	4013      	ands	r3, r2
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	6812      	ldr	r2, [r2, #0]
 8003b6c:	6979      	ldr	r1, [r7, #20]
 8003b6e:	430b      	orrs	r3, r1
 8003b70:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003b7a:	d014      	beq.n	8003ba6 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003b80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b84:	d00f      	beq.n	8003ba6 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003b8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b8e:	d00a      	beq.n	8003ba6 <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8003b90:	4b2e      	ldr	r3, [pc, #184]	; (8003c4c <HAL_ADC_Init+0x2e4>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003ba0:	492a      	ldr	r1, [pc, #168]	; (8003c4c <HAL_ADC_Init+0x2e4>)
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6818      	ldr	r0, [r3, #0]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bae:	461a      	mov	r2, r3
 8003bb0:	2100      	movs	r1, #0
 8003bb2:	f7ff fd76 	bl	80036a2 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6818      	ldr	r0, [r3, #0]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	4923      	ldr	r1, [pc, #140]	; (8003c50 <HAL_ADC_Init+0x2e8>)
 8003bc2:	f7ff fd6e 	bl	80036a2 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d108      	bne.n	8003be0 <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f062 020f 	orn	r2, r2, #15
 8003bdc:	629a      	str	r2, [r3, #40]	; 0x28
 8003bde:	e017      	b.n	8003c10 <HAL_ADC_Init+0x2a8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	691b      	ldr	r3, [r3, #16]
 8003be4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003be8:	d112      	bne.n	8003c10 <HAL_ADC_Init+0x2a8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	69db      	ldr	r3, [r3, #28]
 8003bf4:	3b01      	subs	r3, #1
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	f003 031c 	and.w	r3, r3, #28
 8003bfc:	f06f 020f 	mvn.w	r2, #15
 8003c00:	fa02 f103 	lsl.w	r1, r2, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	430a      	orrs	r2, r1
 8003c0e:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2100      	movs	r1, #0
 8003c16:	4618      	mov	r0, r3
 8003c18:	f7ff fd61 	bl	80036de <LL_ADC_GetSamplingTimeCommonChannels>
 8003c1c:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d116      	bne.n	8003c54 <HAL_ADC_Init+0x2ec>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c30:	f023 0303 	bic.w	r3, r3, #3
 8003c34:	f043 0201 	orr.w	r2, r3, #1
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003c3c:	e023      	b.n	8003c86 <HAL_ADC_Init+0x31e>
 8003c3e:	bf00      	nop
 8003c40:	20000004 	.word	0x20000004
 8003c44:	053e2d63 	.word	0x053e2d63
 8003c48:	1ffffc02 	.word	0x1ffffc02
 8003c4c:	40012708 	.word	0x40012708
 8003c50:	03ffff04 	.word	0x03ffff04
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c58:	f023 0312 	bic.w	r3, r3, #18
 8003c5c:	f043 0210 	orr.w	r2, r3, #16
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c68:	f043 0201 	orr.w	r2, r3, #1
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003c74:	e007      	b.n	8003c86 <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c7a:	f043 0210 	orr.w	r2, r3, #16
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 8003c86:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3720      	adds	r7, #32
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d101      	bne.n	8003ca2 <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e07a      	b.n	8003d98 <HAL_ADC_DeInit+0x108>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ca6:	f043 0202 	orr.w	r2, r3, #2
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 face 	bl	8004250 <ADC_ConversionStop>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003cb8:	7bfb      	ldrb	r3, [r7, #15]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d10f      	bne.n	8003cde <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 fb92 	bl	80043e8 <ADC_Disable>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003cc8:	7bfb      	ldrb	r3, [r7, #15]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d102      	bne.n	8003cd4 <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f7ff fd9f 	bl	800381c <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	6812      	ldr	r2, [r2, #0]
 8003ce8:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 8003cec:	f023 0303 	bic.w	r3, r3, #3
 8003cf0:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f240 329f 	movw	r2, #927	; 0x39f
 8003cfa:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	68d9      	ldr	r1, [r3, #12]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	4b26      	ldr	r3, [pc, #152]	; (8003da0 <HAL_ADC_DeInit+0x110>)
 8003d08:	400b      	ands	r3, r1
 8003d0a:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	691a      	ldr	r2, [r3, #16]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8003d1a:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	695a      	ldr	r2, [r3, #20]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f022 0207 	bic.w	r2, r2, #7
 8003d2a:	615a      	str	r2, [r3, #20]

  /* Reset registers AWDxTR */
  hadc->Instance->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	6a1a      	ldr	r2, [r3, #32]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 8003d3a:	621a      	str	r2, [r3, #32]
  hadc->Instance->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 8003d4a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc->Instance->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 8003d5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2200      	movs	r2, #0
 8003d68:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 8003d6a:	4b0e      	ldr	r3, [pc, #56]	; (8003da4 <HAL_ADC_DeInit+0x114>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a0d      	ldr	r2, [pc, #52]	; (8003da4 <HAL_ADC_DeInit+0x114>)
 8003d70:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 8003d74:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f7fd fd82 	bl	8001880 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	659a      	str	r2, [r3, #88]	; 0x58

  __HAL_UNLOCK(hadc);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8003d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3710      	adds	r7, #16
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	833e0200 	.word	0x833e0200
 8003da4:	40012708 	.word	0x40012708

08003da8 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4618      	mov	r0, r3
 8003db6:	f7ff fdc5 	bl	8003944 <LL_ADC_REG_IsConversionOngoing>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d132      	bne.n	8003e26 <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d101      	bne.n	8003dce <HAL_ADC_Start+0x26>
 8003dca:	2302      	movs	r3, #2
 8003dcc:	e02e      	b.n	8003e2c <HAL_ADC_Start+0x84>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 fa80 	bl	80042dc <ADC_Enable>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003de0:	7bfb      	ldrb	r3, [r7, #15]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d11a      	bne.n	8003e1c <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dea:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003dee:	f023 0301 	bic.w	r3, r3, #1
 8003df2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	221c      	movs	r2, #28
 8003e06:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4618      	mov	r0, r3
 8003e16:	f7ff fd6f 	bl	80038f8 <LL_ADC_REG_StartConversion>
 8003e1a:	e006      	b.n	8003e2a <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8003e24:	e001      	b.n	8003e2a <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003e26:	2302      	movs	r3, #2
 8003e28:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 8003e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3710      	adds	r7, #16
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d101      	bne.n	8003e4a <HAL_ADC_Stop+0x16>
 8003e46:	2302      	movs	r3, #2
 8003e48:	e022      	b.n	8003e90 <HAL_ADC_Stop+0x5c>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 f9fc 	bl	8004250 <ADC_ConversionStop>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003e5c:	7bfb      	ldrb	r3, [r7, #15]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d111      	bne.n	8003e86 <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 fac0 	bl	80043e8 <ADC_Disable>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003e6c:	7bfb      	ldrb	r3, [r7, #15]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d109      	bne.n	8003e86 <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e76:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e7a:	f023 0301 	bic.w	r3, r3, #1
 8003e7e:	f043 0201 	orr.w	r2, r3, #1
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8003e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3710      	adds	r7, #16
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	695b      	ldr	r3, [r3, #20]
 8003ea6:	2b08      	cmp	r3, #8
 8003ea8:	d102      	bne.n	8003eb0 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8003eaa:	2308      	movs	r3, #8
 8003eac:	60fb      	str	r3, [r7, #12]
 8003eae:	e010      	b.n	8003ed2 <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	f003 0301 	and.w	r3, r3, #1
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d007      	beq.n	8003ece <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ec2:	f043 0220 	orr.w	r2, r3, #32
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e077      	b.n	8003fbe <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8003ece:	2304      	movs	r3, #4
 8003ed0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003ed2:	f7fe fd09 	bl	80028e8 <HAL_GetTick>
 8003ed6:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003ed8:	e021      	b.n	8003f1e <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee0:	d01d      	beq.n	8003f1e <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003ee2:	f7fe fd01 	bl	80028e8 <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	683a      	ldr	r2, [r7, #0]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d302      	bcc.n	8003ef8 <HAL_ADC_PollForConversion+0x60>
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d112      	bne.n	8003f1e <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	4013      	ands	r3, r2
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d10b      	bne.n	8003f1e <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f0a:	f043 0204 	orr.w	r2, r3, #4
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e04f      	b.n	8003fbe <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	4013      	ands	r3, r2
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d0d6      	beq.n	8003eda <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f30:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f7ff fbe6 	bl	800370e <LL_ADC_REG_IsTriggerSourceSWStart>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d031      	beq.n	8003fac <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	7e9b      	ldrb	r3, [r3, #26]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d12d      	bne.n	8003fac <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0308 	and.w	r3, r3, #8
 8003f5a:	2b08      	cmp	r3, #8
 8003f5c:	d126      	bne.n	8003fac <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4618      	mov	r0, r3
 8003f64:	f7ff fcee 	bl	8003944 <LL_ADC_REG_IsConversionOngoing>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d112      	bne.n	8003f94 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	685a      	ldr	r2, [r3, #4]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f022 020c 	bic.w	r2, r2, #12
 8003f7c:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f86:	f023 0301 	bic.w	r3, r3, #1
 8003f8a:	f043 0201 	orr.w	r2, r3, #1
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	659a      	str	r2, [r3, #88]	; 0x58
 8003f92:	e00b      	b.n	8003fac <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f98:	f043 0220 	orr.w	r2, r3, #32
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fa4:	f043 0201 	orr.w	r2, r3, #1
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	7e1b      	ldrb	r3, [r3, #24]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d103      	bne.n	8003fbc <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	220c      	movs	r2, #12
 8003fba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3710      	adds	r7, #16
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}

08003fc6 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003fc6:	b480      	push	{r7}
 8003fc8:	b083      	sub	sp, #12
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bc80      	pop	{r7}
 8003fdc:	4770      	bx	lr
	...

08003fe0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b088      	sub	sp, #32
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fea:	2300      	movs	r3, #0
 8003fec:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004000:	2b01      	cmp	r3, #1
 8004002:	d101      	bne.n	8004008 <HAL_ADC_ConfigChannel+0x28>
 8004004:	2302      	movs	r3, #2
 8004006:	e110      	b.n	800422a <HAL_ADC_ConfigChannel+0x24a>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4618      	mov	r0, r3
 8004016:	f7ff fc95 	bl	8003944 <LL_ADC_REG_IsConversionOngoing>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	f040 80f7 	bne.w	8004210 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	2b02      	cmp	r3, #2
 8004028:	f000 80b1 	beq.w	800418e <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	691b      	ldr	r3, [r3, #16]
 8004030:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004034:	d004      	beq.n	8004040 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800403a:	4a7e      	ldr	r2, [pc, #504]	; (8004234 <HAL_ADC_ConfigChannel+0x254>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d108      	bne.n	8004052 <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4619      	mov	r1, r3
 800404a:	4610      	mov	r0, r2
 800404c:	f7ff fb92 	bl	8003774 <LL_ADC_REG_SetSequencerChAdd>
 8004050:	e041      	b.n	80040d6 <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	f003 031f 	and.w	r3, r3, #31
 800405e:	210f      	movs	r1, #15
 8004060:	fa01 f303 	lsl.w	r3, r1, r3
 8004064:	43db      	mvns	r3, r3
 8004066:	401a      	ands	r2, r3
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8004070:	2b00      	cmp	r3, #0
 8004072:	d105      	bne.n	8004080 <HAL_ADC_ConfigChannel+0xa0>
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	0e9b      	lsrs	r3, r3, #26
 800407a:	f003 031f 	and.w	r3, r3, #31
 800407e:	e011      	b.n	80040a4 <HAL_ADC_ConfigChannel+0xc4>
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	fa93 f3a3 	rbit	r3, r3
 800408c:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d101      	bne.n	800409c <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 8004098:	2320      	movs	r3, #32
 800409a:	e003      	b.n	80040a4 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	fab3 f383 	clz	r3, r3
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	6839      	ldr	r1, [r7, #0]
 80040a6:	6849      	ldr	r1, [r1, #4]
 80040a8:	f001 011f 	and.w	r1, r1, #31
 80040ac:	408b      	lsls	r3, r1
 80040ae:	431a      	orrs	r2, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	089b      	lsrs	r3, r3, #2
 80040ba:	1c5a      	adds	r2, r3, #1
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	69db      	ldr	r3, [r3, #28]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d808      	bhi.n	80040d6 <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6818      	ldr	r0, [r3, #0]
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	6859      	ldr	r1, [r3, #4]
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	461a      	mov	r2, r3
 80040d2:	f7ff fb2e 	bl	8003732 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6818      	ldr	r0, [r3, #0]
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	6819      	ldr	r1, [r3, #0]
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	461a      	mov	r2, r3
 80040e4:	f7ff fb6b 	bl	80037be <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	f280 8097 	bge.w	8004220 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80040f2:	4851      	ldr	r0, [pc, #324]	; (8004238 <HAL_ADC_ConfigChannel+0x258>)
 80040f4:	f7ff fac8 	bl	8003688 <LL_ADC_GetCommonPathInternalCh>
 80040f8:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a4f      	ldr	r2, [pc, #316]	; (800423c <HAL_ADC_ConfigChannel+0x25c>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d120      	bne.n	8004146 <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800410a:	2b00      	cmp	r3, #0
 800410c:	d11b      	bne.n	8004146 <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004114:	4619      	mov	r1, r3
 8004116:	4848      	ldr	r0, [pc, #288]	; (8004238 <HAL_ADC_ConfigChannel+0x258>)
 8004118:	f7ff faa4 	bl	8003664 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800411c:	4b48      	ldr	r3, [pc, #288]	; (8004240 <HAL_ADC_ConfigChannel+0x260>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	099b      	lsrs	r3, r3, #6
 8004122:	4a48      	ldr	r2, [pc, #288]	; (8004244 <HAL_ADC_ConfigChannel+0x264>)
 8004124:	fba2 2303 	umull	r2, r3, r2, r3
 8004128:	099b      	lsrs	r3, r3, #6
 800412a:	1c5a      	adds	r2, r3, #1
 800412c:	4613      	mov	r3, r2
 800412e:	005b      	lsls	r3, r3, #1
 8004130:	4413      	add	r3, r2
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004136:	e002      	b.n	800413e <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	3b01      	subs	r3, #1
 800413c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d1f9      	bne.n	8004138 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004144:	e06c      	b.n	8004220 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a3f      	ldr	r2, [pc, #252]	; (8004248 <HAL_ADC_ConfigChannel+0x268>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d10c      	bne.n	800416a <HAL_ADC_ConfigChannel+0x18a>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004150:	69bb      	ldr	r3, [r7, #24]
 8004152:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d107      	bne.n	800416a <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004160:	4619      	mov	r1, r3
 8004162:	4835      	ldr	r0, [pc, #212]	; (8004238 <HAL_ADC_ConfigChannel+0x258>)
 8004164:	f7ff fa7e 	bl	8003664 <LL_ADC_SetCommonPathInternalCh>
 8004168:	e05a      	b.n	8004220 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a37      	ldr	r2, [pc, #220]	; (800424c <HAL_ADC_ConfigChannel+0x26c>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d155      	bne.n	8004220 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800417a:	2b00      	cmp	r3, #0
 800417c:	d150      	bne.n	8004220 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800417e:	69bb      	ldr	r3, [r7, #24]
 8004180:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004184:	4619      	mov	r1, r3
 8004186:	482c      	ldr	r0, [pc, #176]	; (8004238 <HAL_ADC_ConfigChannel+0x258>)
 8004188:	f7ff fa6c 	bl	8003664 <LL_ADC_SetCommonPathInternalCh>
 800418c:	e048      	b.n	8004220 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004196:	d004      	beq.n	80041a2 <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800419c:	4a25      	ldr	r2, [pc, #148]	; (8004234 <HAL_ADC_ConfigChannel+0x254>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d107      	bne.n	80041b2 <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4619      	mov	r1, r3
 80041ac:	4610      	mov	r0, r2
 80041ae:	f7ff faf3 	bl	8003798 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	da32      	bge.n	8004220 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80041ba:	481f      	ldr	r0, [pc, #124]	; (8004238 <HAL_ADC_ConfigChannel+0x258>)
 80041bc:	f7ff fa64 	bl	8003688 <LL_ADC_GetCommonPathInternalCh>
 80041c0:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a1d      	ldr	r2, [pc, #116]	; (800423c <HAL_ADC_ConfigChannel+0x25c>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d107      	bne.n	80041dc <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80041cc:	69bb      	ldr	r3, [r7, #24]
 80041ce:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80041d2:	4619      	mov	r1, r3
 80041d4:	4818      	ldr	r0, [pc, #96]	; (8004238 <HAL_ADC_ConfigChannel+0x258>)
 80041d6:	f7ff fa45 	bl	8003664 <LL_ADC_SetCommonPathInternalCh>
 80041da:	e021      	b.n	8004220 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a19      	ldr	r2, [pc, #100]	; (8004248 <HAL_ADC_ConfigChannel+0x268>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d107      	bne.n	80041f6 <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041ec:	4619      	mov	r1, r3
 80041ee:	4812      	ldr	r0, [pc, #72]	; (8004238 <HAL_ADC_ConfigChannel+0x258>)
 80041f0:	f7ff fa38 	bl	8003664 <LL_ADC_SetCommonPathInternalCh>
 80041f4:	e014      	b.n	8004220 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a14      	ldr	r2, [pc, #80]	; (800424c <HAL_ADC_ConfigChannel+0x26c>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d10f      	bne.n	8004220 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004200:	69bb      	ldr	r3, [r7, #24]
 8004202:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8004206:	4619      	mov	r1, r3
 8004208:	480b      	ldr	r0, [pc, #44]	; (8004238 <HAL_ADC_ConfigChannel+0x258>)
 800420a:	f7ff fa2b 	bl	8003664 <LL_ADC_SetCommonPathInternalCh>
 800420e:	e007      	b.n	8004220 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004214:	f043 0220 	orr.w	r2, r3, #32
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8004228:	7ffb      	ldrb	r3, [r7, #31]
}
 800422a:	4618      	mov	r0, r3
 800422c:	3720      	adds	r7, #32
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	80000004 	.word	0x80000004
 8004238:	40012708 	.word	0x40012708
 800423c:	b0001000 	.word	0xb0001000
 8004240:	20000004 	.word	0x20000004
 8004244:	053e2d63 	.word	0x053e2d63
 8004248:	b8004000 	.word	0xb8004000
 800424c:	b4002000 	.word	0xb4002000

08004250 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4618      	mov	r0, r3
 800425e:	f7ff fb71 	bl	8003944 <LL_ADC_REG_IsConversionOngoing>
 8004262:	4603      	mov	r3, r0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d033      	beq.n	80042d0 <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4618      	mov	r0, r3
 800426e:	f7ff fb31 	bl	80038d4 <LL_ADC_IsDisableOngoing>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d104      	bne.n	8004282 <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4618      	mov	r0, r3
 800427e:	f7ff fb4e 	bl	800391e <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004282:	f7fe fb31 	bl	80028e8 <HAL_GetTick>
 8004286:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004288:	e01b      	b.n	80042c2 <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800428a:	f7fe fb2d 	bl	80028e8 <HAL_GetTick>
 800428e:	4602      	mov	r2, r0
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	1ad3      	subs	r3, r2, r3
 8004294:	2b02      	cmp	r3, #2
 8004296:	d914      	bls.n	80042c2 <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f003 0304 	and.w	r3, r3, #4
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00d      	beq.n	80042c2 <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042aa:	f043 0210 	orr.w	r2, r3, #16
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042b6:	f043 0201 	orr.w	r2, r3, #1
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e007      	b.n	80042d2 <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	f003 0304 	and.w	r3, r3, #4
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d1dc      	bne.n	800428a <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80042d0:	2300      	movs	r3, #0
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3710      	adds	r7, #16
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
	...

080042dc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80042e4:	2300      	movs	r3, #0
 80042e6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4618      	mov	r0, r3
 80042ee:	f7ff fadf 	bl	80038b0 <LL_ADC_IsEnabled>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d169      	bne.n	80043cc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	689a      	ldr	r2, [r3, #8]
 80042fe:	4b36      	ldr	r3, [pc, #216]	; (80043d8 <ADC_Enable+0xfc>)
 8004300:	4013      	ands	r3, r2
 8004302:	2b00      	cmp	r3, #0
 8004304:	d00d      	beq.n	8004322 <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800430a:	f043 0210 	orr.w	r2, r3, #16
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004316:	f043 0201 	orr.w	r2, r3, #1
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e055      	b.n	80043ce <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4618      	mov	r0, r3
 8004328:	f7ff fa9c 	bl	8003864 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 800432c:	482b      	ldr	r0, [pc, #172]	; (80043dc <ADC_Enable+0x100>)
 800432e:	f7ff f9ab 	bl	8003688 <LL_ADC_GetCommonPathInternalCh>
 8004332:	4603      	mov	r3, r0
 8004334:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d00f      	beq.n	800435c <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800433c:	4b28      	ldr	r3, [pc, #160]	; (80043e0 <ADC_Enable+0x104>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	099b      	lsrs	r3, r3, #6
 8004342:	4a28      	ldr	r2, [pc, #160]	; (80043e4 <ADC_Enable+0x108>)
 8004344:	fba2 2303 	umull	r2, r3, r2, r3
 8004348:	099b      	lsrs	r3, r3, #6
 800434a:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 800434c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800434e:	e002      	b.n	8004356 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	3b01      	subs	r3, #1
 8004354:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d1f9      	bne.n	8004350 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	7e5b      	ldrb	r3, [r3, #25]
 8004360:	2b01      	cmp	r3, #1
 8004362:	d033      	beq.n	80043cc <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8004364:	f7fe fac0 	bl	80028e8 <HAL_GetTick>
 8004368:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800436a:	e028      	b.n	80043be <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4618      	mov	r0, r3
 8004372:	f7ff fa9d 	bl	80038b0 <LL_ADC_IsEnabled>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d104      	bne.n	8004386 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4618      	mov	r0, r3
 8004382:	f7ff fa6f 	bl	8003864 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004386:	f7fe faaf 	bl	80028e8 <HAL_GetTick>
 800438a:	4602      	mov	r2, r0
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	2b02      	cmp	r3, #2
 8004392:	d914      	bls.n	80043be <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0301 	and.w	r3, r3, #1
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d00d      	beq.n	80043be <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043a6:	f043 0210 	orr.w	r2, r3, #16
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043b2:	f043 0201 	orr.w	r2, r3, #1
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e007      	b.n	80043ce <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0301 	and.w	r3, r3, #1
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d1cf      	bne.n	800436c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3710      	adds	r7, #16
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	80000017 	.word	0x80000017
 80043dc:	40012708 	.word	0x40012708
 80043e0:	20000004 	.word	0x20000004
 80043e4:	053e2d63 	.word	0x053e2d63

080043e8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4618      	mov	r0, r3
 80043f6:	f7ff fa6d 	bl	80038d4 <LL_ADC_IsDisableOngoing>
 80043fa:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4618      	mov	r0, r3
 8004402:	f7ff fa55 	bl	80038b0 <LL_ADC_IsEnabled>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d047      	beq.n	800449c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d144      	bne.n	800449c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	f003 0305 	and.w	r3, r3, #5
 800441c:	2b01      	cmp	r3, #1
 800441e:	d10c      	bne.n	800443a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4618      	mov	r0, r3
 8004426:	f7ff fa30 	bl	800388a <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2203      	movs	r2, #3
 8004430:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004432:	f7fe fa59 	bl	80028e8 <HAL_GetTick>
 8004436:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004438:	e029      	b.n	800448e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800443e:	f043 0210 	orr.w	r2, r3, #16
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800444a:	f043 0201 	orr.w	r2, r3, #1
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e023      	b.n	800449e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004456:	f7fe fa47 	bl	80028e8 <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	2b02      	cmp	r3, #2
 8004462:	d914      	bls.n	800448e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	f003 0301 	and.w	r3, r3, #1
 800446e:	2b00      	cmp	r3, #0
 8004470:	d00d      	beq.n	800448e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004476:	f043 0210 	orr.w	r2, r3, #16
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004482:	f043 0201 	orr.w	r2, r3, #1
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e007      	b.n	800449e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	f003 0301 	and.w	r3, r3, #1
 8004498:	2b00      	cmp	r3, #0
 800449a:	d1dc      	bne.n	8004456 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800449c:	2300      	movs	r3, #0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3710      	adds	r7, #16
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}

080044a6 <LL_ADC_SetCalibrationFactor>:
{
 80044a6:	b480      	push	{r7}
 80044a8:	b083      	sub	sp, #12
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	6078      	str	r0, [r7, #4]
 80044ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80044b6:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	431a      	orrs	r2, r3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
 80044c4:	bf00      	nop
 80044c6:	370c      	adds	r7, #12
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bc80      	pop	{r7}
 80044cc:	4770      	bx	lr

080044ce <LL_ADC_GetCalibrationFactor>:
{
 80044ce:	b480      	push	{r7}
 80044d0:	b083      	sub	sp, #12
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80044dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bc80      	pop	{r7}
 80044e8:	4770      	bx	lr

080044ea <LL_ADC_Enable>:
{
 80044ea:	b480      	push	{r7}
 80044ec:	b083      	sub	sp, #12
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80044fa:	f023 0317 	bic.w	r3, r3, #23
 80044fe:	f043 0201 	orr.w	r2, r3, #1
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	609a      	str	r2, [r3, #8]
}
 8004506:	bf00      	nop
 8004508:	370c      	adds	r7, #12
 800450a:	46bd      	mov	sp, r7
 800450c:	bc80      	pop	{r7}
 800450e:	4770      	bx	lr

08004510 <LL_ADC_Disable>:
{
 8004510:	b480      	push	{r7}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004520:	f023 0317 	bic.w	r3, r3, #23
 8004524:	f043 0202 	orr.w	r2, r3, #2
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	609a      	str	r2, [r3, #8]
}
 800452c:	bf00      	nop
 800452e:	370c      	adds	r7, #12
 8004530:	46bd      	mov	sp, r7
 8004532:	bc80      	pop	{r7}
 8004534:	4770      	bx	lr

08004536 <LL_ADC_IsEnabled>:
{
 8004536:	b480      	push	{r7}
 8004538:	b083      	sub	sp, #12
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	f003 0301 	and.w	r3, r3, #1
 8004546:	2b01      	cmp	r3, #1
 8004548:	d101      	bne.n	800454e <LL_ADC_IsEnabled+0x18>
 800454a:	2301      	movs	r3, #1
 800454c:	e000      	b.n	8004550 <LL_ADC_IsEnabled+0x1a>
 800454e:	2300      	movs	r3, #0
}
 8004550:	4618      	mov	r0, r3
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	bc80      	pop	{r7}
 8004558:	4770      	bx	lr

0800455a <LL_ADC_StartCalibration>:
{
 800455a:	b480      	push	{r7}
 800455c:	b083      	sub	sp, #12
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800456a:	f023 0317 	bic.w	r3, r3, #23
 800456e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	609a      	str	r2, [r3, #8]
}
 8004576:	bf00      	nop
 8004578:	370c      	adds	r7, #12
 800457a:	46bd      	mov	sp, r7
 800457c:	bc80      	pop	{r7}
 800457e:	4770      	bx	lr

08004580 <LL_ADC_IsCalibrationOnGoing>:
{
 8004580:	b480      	push	{r7}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004590:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004594:	d101      	bne.n	800459a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004596:	2301      	movs	r3, #1
 8004598:	e000      	b.n	800459c <LL_ADC_IsCalibrationOnGoing+0x1c>
 800459a:	2300      	movs	r3, #0
}
 800459c:	4618      	mov	r0, r3
 800459e:	370c      	adds	r7, #12
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bc80      	pop	{r7}
 80045a4:	4770      	bx	lr

080045a6 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 80045a6:	b580      	push	{r7, lr}
 80045a8:	b088      	sub	sp, #32
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80045ae:	2300      	movs	r3, #0
 80045b0:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 80045b2:	2300      	movs	r3, #0
 80045b4:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d101      	bne.n	80045c4 <HAL_ADCEx_Calibration_Start+0x1e>
 80045c0:	2302      	movs	r3, #2
 80045c2:	e0b9      	b.n	8004738 <HAL_ADCEx_Calibration_Start+0x192>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f7ff ff0b 	bl	80043e8 <ADC_Disable>
 80045d2:	4603      	mov	r3, r0
 80045d4:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4618      	mov	r0, r3
 80045dc:	f7ff ffab 	bl	8004536 <LL_ADC_IsEnabled>
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	f040 809d 	bne.w	8004722 <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ec:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80045f0:	f043 0202 	orr.w	r2, r3, #2
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	68da      	ldr	r2, [r3, #12]
 80045fe:	f248 0303 	movw	r3, #32771	; 0x8003
 8004602:	4013      	ands	r3, r2
 8004604:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	6812      	ldr	r2, [r2, #0]
 8004610:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004614:	f023 0303 	bic.w	r3, r3, #3
 8004618:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800461a:	2300      	movs	r3, #0
 800461c:	61fb      	str	r3, [r7, #28]
 800461e:	e02e      	b.n	800467e <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4618      	mov	r0, r3
 8004626:	f7ff ff98 	bl	800455a <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800462a:	e014      	b.n	8004656 <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	3301      	adds	r3, #1
 8004630:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8004638:	d30d      	bcc.n	8004656 <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800463e:	f023 0312 	bic.w	r3, r3, #18
 8004642:	f043 0210 	orr.w	r2, r3, #16
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e070      	b.n	8004738 <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4618      	mov	r0, r3
 800465c:	f7ff ff90 	bl	8004580 <LL_ADC_IsCalibrationOnGoing>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d1e2      	bne.n	800462c <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4618      	mov	r0, r3
 800466c:	f7ff ff2f 	bl	80044ce <LL_ADC_GetCalibrationFactor>
 8004670:	4602      	mov	r2, r0
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	4413      	add	r3, r2
 8004676:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	3301      	adds	r3, #1
 800467c:	61fb      	str	r3, [r7, #28]
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	2b07      	cmp	r3, #7
 8004682:	d9cd      	bls.n	8004620 <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8004684:	69ba      	ldr	r2, [r7, #24]
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	fbb2 f3f3 	udiv	r3, r2, r3
 800468c:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4618      	mov	r0, r3
 8004694:	f7ff ff29 	bl	80044ea <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	69b9      	ldr	r1, [r7, #24]
 800469e:	4618      	mov	r0, r3
 80046a0:	f7ff ff01 	bl	80044a6 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4618      	mov	r0, r3
 80046aa:	f7ff ff31 	bl	8004510 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80046ae:	f7fe f91b 	bl	80028e8 <HAL_GetTick>
 80046b2:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80046b4:	e01c      	b.n	80046f0 <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80046b6:	f7fe f917 	bl	80028e8 <HAL_GetTick>
 80046ba:	4602      	mov	r2, r0
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	2b02      	cmp	r3, #2
 80046c2:	d915      	bls.n	80046f0 <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4618      	mov	r0, r3
 80046ca:	f7ff ff34 	bl	8004536 <LL_ADC_IsEnabled>
 80046ce:	4603      	mov	r3, r0
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d00d      	beq.n	80046f0 <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046d8:	f043 0210 	orr.w	r2, r3, #16
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046e4:	f043 0201 	orr.w	r2, r3, #1
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e023      	b.n	8004738 <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4618      	mov	r0, r3
 80046f6:	f7ff ff1e 	bl	8004536 <LL_ADC_IsEnabled>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d1da      	bne.n	80046b6 <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68d9      	ldr	r1, [r3, #12]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	693a      	ldr	r2, [r7, #16]
 800470c:	430a      	orrs	r2, r1
 800470e:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004714:	f023 0303 	bic.w	r3, r3, #3
 8004718:	f043 0201 	orr.w	r2, r3, #1
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	659a      	str	r2, [r3, #88]	; 0x58
 8004720:	e005      	b.n	800472e <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004726:	f043 0210 	orr.w	r2, r3, #16
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8004736:	7dfb      	ldrb	r3, [r7, #23]
}
 8004738:	4618      	mov	r0, r3
 800473a:	3720      	adds	r7, #32
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}

08004740 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004740:	b480      	push	{r7}
 8004742:	b085      	sub	sp, #20
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f003 0307 	and.w	r3, r3, #7
 800474e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004750:	4b0c      	ldr	r3, [pc, #48]	; (8004784 <__NVIC_SetPriorityGrouping+0x44>)
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004756:	68ba      	ldr	r2, [r7, #8]
 8004758:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800475c:	4013      	ands	r3, r2
 800475e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004768:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800476c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004770:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004772:	4a04      	ldr	r2, [pc, #16]	; (8004784 <__NVIC_SetPriorityGrouping+0x44>)
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	60d3      	str	r3, [r2, #12]
}
 8004778:	bf00      	nop
 800477a:	3714      	adds	r7, #20
 800477c:	46bd      	mov	sp, r7
 800477e:	bc80      	pop	{r7}
 8004780:	4770      	bx	lr
 8004782:	bf00      	nop
 8004784:	e000ed00 	.word	0xe000ed00

08004788 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004788:	b480      	push	{r7}
 800478a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800478c:	4b04      	ldr	r3, [pc, #16]	; (80047a0 <__NVIC_GetPriorityGrouping+0x18>)
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	0a1b      	lsrs	r3, r3, #8
 8004792:	f003 0307 	and.w	r3, r3, #7
}
 8004796:	4618      	mov	r0, r3
 8004798:	46bd      	mov	sp, r7
 800479a:	bc80      	pop	{r7}
 800479c:	4770      	bx	lr
 800479e:	bf00      	nop
 80047a0:	e000ed00 	.word	0xe000ed00

080047a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	4603      	mov	r3, r0
 80047ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	db0b      	blt.n	80047ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047b6:	79fb      	ldrb	r3, [r7, #7]
 80047b8:	f003 021f 	and.w	r2, r3, #31
 80047bc:	4906      	ldr	r1, [pc, #24]	; (80047d8 <__NVIC_EnableIRQ+0x34>)
 80047be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047c2:	095b      	lsrs	r3, r3, #5
 80047c4:	2001      	movs	r0, #1
 80047c6:	fa00 f202 	lsl.w	r2, r0, r2
 80047ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80047ce:	bf00      	nop
 80047d0:	370c      	adds	r7, #12
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bc80      	pop	{r7}
 80047d6:	4770      	bx	lr
 80047d8:	e000e100 	.word	0xe000e100

080047dc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	4603      	mov	r3, r0
 80047e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	db12      	blt.n	8004814 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047ee:	79fb      	ldrb	r3, [r7, #7]
 80047f0:	f003 021f 	and.w	r2, r3, #31
 80047f4:	490a      	ldr	r1, [pc, #40]	; (8004820 <__NVIC_DisableIRQ+0x44>)
 80047f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047fa:	095b      	lsrs	r3, r3, #5
 80047fc:	2001      	movs	r0, #1
 80047fe:	fa00 f202 	lsl.w	r2, r0, r2
 8004802:	3320      	adds	r3, #32
 8004804:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004808:	f3bf 8f4f 	dsb	sy
}
 800480c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800480e:	f3bf 8f6f 	isb	sy
}
 8004812:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004814:	bf00      	nop
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	bc80      	pop	{r7}
 800481c:	4770      	bx	lr
 800481e:	bf00      	nop
 8004820:	e000e100 	.word	0xe000e100

08004824 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	4603      	mov	r3, r0
 800482c:	6039      	str	r1, [r7, #0]
 800482e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004834:	2b00      	cmp	r3, #0
 8004836:	db0a      	blt.n	800484e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	b2da      	uxtb	r2, r3
 800483c:	490c      	ldr	r1, [pc, #48]	; (8004870 <__NVIC_SetPriority+0x4c>)
 800483e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004842:	0112      	lsls	r2, r2, #4
 8004844:	b2d2      	uxtb	r2, r2
 8004846:	440b      	add	r3, r1
 8004848:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800484c:	e00a      	b.n	8004864 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	b2da      	uxtb	r2, r3
 8004852:	4908      	ldr	r1, [pc, #32]	; (8004874 <__NVIC_SetPriority+0x50>)
 8004854:	79fb      	ldrb	r3, [r7, #7]
 8004856:	f003 030f 	and.w	r3, r3, #15
 800485a:	3b04      	subs	r3, #4
 800485c:	0112      	lsls	r2, r2, #4
 800485e:	b2d2      	uxtb	r2, r2
 8004860:	440b      	add	r3, r1
 8004862:	761a      	strb	r2, [r3, #24]
}
 8004864:	bf00      	nop
 8004866:	370c      	adds	r7, #12
 8004868:	46bd      	mov	sp, r7
 800486a:	bc80      	pop	{r7}
 800486c:	4770      	bx	lr
 800486e:	bf00      	nop
 8004870:	e000e100 	.word	0xe000e100
 8004874:	e000ed00 	.word	0xe000ed00

08004878 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004878:	b480      	push	{r7}
 800487a:	b089      	sub	sp, #36	; 0x24
 800487c:	af00      	add	r7, sp, #0
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f003 0307 	and.w	r3, r3, #7
 800488a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	f1c3 0307 	rsb	r3, r3, #7
 8004892:	2b04      	cmp	r3, #4
 8004894:	bf28      	it	cs
 8004896:	2304      	movcs	r3, #4
 8004898:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	3304      	adds	r3, #4
 800489e:	2b06      	cmp	r3, #6
 80048a0:	d902      	bls.n	80048a8 <NVIC_EncodePriority+0x30>
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	3b03      	subs	r3, #3
 80048a6:	e000      	b.n	80048aa <NVIC_EncodePriority+0x32>
 80048a8:	2300      	movs	r3, #0
 80048aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048ac:	f04f 32ff 	mov.w	r2, #4294967295
 80048b0:	69bb      	ldr	r3, [r7, #24]
 80048b2:	fa02 f303 	lsl.w	r3, r2, r3
 80048b6:	43da      	mvns	r2, r3
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	401a      	ands	r2, r3
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80048c0:	f04f 31ff 	mov.w	r1, #4294967295
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	fa01 f303 	lsl.w	r3, r1, r3
 80048ca:	43d9      	mvns	r1, r3
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048d0:	4313      	orrs	r3, r2
         );
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3724      	adds	r7, #36	; 0x24
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bc80      	pop	{r7}
 80048da:	4770      	bx	lr

080048dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b082      	sub	sp, #8
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f7ff ff2b 	bl	8004740 <__NVIC_SetPriorityGrouping>
}
 80048ea:	bf00      	nop
 80048ec:	3708      	adds	r7, #8
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}

080048f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048f2:	b580      	push	{r7, lr}
 80048f4:	b086      	sub	sp, #24
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	4603      	mov	r3, r0
 80048fa:	60b9      	str	r1, [r7, #8]
 80048fc:	607a      	str	r2, [r7, #4]
 80048fe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004900:	f7ff ff42 	bl	8004788 <__NVIC_GetPriorityGrouping>
 8004904:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	68b9      	ldr	r1, [r7, #8]
 800490a:	6978      	ldr	r0, [r7, #20]
 800490c:	f7ff ffb4 	bl	8004878 <NVIC_EncodePriority>
 8004910:	4602      	mov	r2, r0
 8004912:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004916:	4611      	mov	r1, r2
 8004918:	4618      	mov	r0, r3
 800491a:	f7ff ff83 	bl	8004824 <__NVIC_SetPriority>
}
 800491e:	bf00      	nop
 8004920:	3718      	adds	r7, #24
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}

08004926 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004926:	b580      	push	{r7, lr}
 8004928:	b082      	sub	sp, #8
 800492a:	af00      	add	r7, sp, #0
 800492c:	4603      	mov	r3, r0
 800492e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004930:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004934:	4618      	mov	r0, r3
 8004936:	f7ff ff35 	bl	80047a4 <__NVIC_EnableIRQ>
}
 800493a:	bf00      	nop
 800493c:	3708      	adds	r7, #8
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}

08004942 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004942:	b580      	push	{r7, lr}
 8004944:	b082      	sub	sp, #8
 8004946:	af00      	add	r7, sp, #0
 8004948:	4603      	mov	r3, r0
 800494a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800494c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004950:	4618      	mov	r0, r3
 8004952:	f7ff ff43 	bl	80047dc <__NVIC_DisableIRQ>
}
 8004956:	bf00      	nop
 8004958:	3708      	adds	r7, #8
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
	...

08004960 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b082      	sub	sp, #8
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d101      	bne.n	8004972 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e08e      	b.n	8004a90 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	461a      	mov	r2, r3
 8004978:	4b47      	ldr	r3, [pc, #284]	; (8004a98 <HAL_DMA_Init+0x138>)
 800497a:	429a      	cmp	r2, r3
 800497c:	d80f      	bhi.n	800499e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	461a      	mov	r2, r3
 8004984:	4b45      	ldr	r3, [pc, #276]	; (8004a9c <HAL_DMA_Init+0x13c>)
 8004986:	4413      	add	r3, r2
 8004988:	4a45      	ldr	r2, [pc, #276]	; (8004aa0 <HAL_DMA_Init+0x140>)
 800498a:	fba2 2303 	umull	r2, r3, r2, r3
 800498e:	091b      	lsrs	r3, r3, #4
 8004990:	009a      	lsls	r2, r3, #2
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a42      	ldr	r2, [pc, #264]	; (8004aa4 <HAL_DMA_Init+0x144>)
 800499a:	641a      	str	r2, [r3, #64]	; 0x40
 800499c:	e00e      	b.n	80049bc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	461a      	mov	r2, r3
 80049a4:	4b40      	ldr	r3, [pc, #256]	; (8004aa8 <HAL_DMA_Init+0x148>)
 80049a6:	4413      	add	r3, r2
 80049a8:	4a3d      	ldr	r2, [pc, #244]	; (8004aa0 <HAL_DMA_Init+0x140>)
 80049aa:	fba2 2303 	umull	r2, r3, r2, r3
 80049ae:	091b      	lsrs	r3, r3, #4
 80049b0:	009a      	lsls	r2, r3, #2
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a3c      	ldr	r2, [pc, #240]	; (8004aac <HAL_DMA_Init+0x14c>)
 80049ba:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2202      	movs	r2, #2
 80049c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	6812      	ldr	r2, [r2, #0]
 80049ce:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80049d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049d6:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	6819      	ldr	r1, [r3, #0]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	689a      	ldr	r2, [r3, #8]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	431a      	orrs	r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	691b      	ldr	r3, [r3, #16]
 80049ec:	431a      	orrs	r2, r3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	695b      	ldr	r3, [r3, #20]
 80049f2:	431a      	orrs	r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	699b      	ldr	r3, [r3, #24]
 80049f8:	431a      	orrs	r2, r3
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	69db      	ldr	r3, [r3, #28]
 80049fe:	431a      	orrs	r2, r3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6a1b      	ldr	r3, [r3, #32]
 8004a04:	431a      	orrs	r2, r3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	430a      	orrs	r2, r1
 8004a0c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 fb24 	bl	800505c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a1c:	d102      	bne.n	8004a24 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	685a      	ldr	r2, [r3, #4]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a2c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004a30:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004a3a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d010      	beq.n	8004a66 <HAL_DMA_Init+0x106>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	2b04      	cmp	r3, #4
 8004a4a:	d80c      	bhi.n	8004a66 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f000 fb4d 	bl	80050ec <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a56:	2200      	movs	r2, #0
 8004a58:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004a62:	605a      	str	r2, [r3, #4]
 8004a64:	e008      	b.n	8004a78 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2201      	movs	r2, #1
 8004a82:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3708      	adds	r7, #8
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	40020407 	.word	0x40020407
 8004a9c:	bffdfff8 	.word	0xbffdfff8
 8004aa0:	cccccccd 	.word	0xcccccccd
 8004aa4:	40020000 	.word	0x40020000
 8004aa8:	bffdfbf8 	.word	0xbffdfbf8
 8004aac:	40020400 	.word	0x40020400

08004ab0 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b082      	sub	sp, #8
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d101      	bne.n	8004ac2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e07b      	b.n	8004bba <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f022 0201 	bic.w	r2, r2, #1
 8004ad0:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	4b3a      	ldr	r3, [pc, #232]	; (8004bc4 <HAL_DMA_DeInit+0x114>)
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d80f      	bhi.n	8004afe <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	4b38      	ldr	r3, [pc, #224]	; (8004bc8 <HAL_DMA_DeInit+0x118>)
 8004ae6:	4413      	add	r3, r2
 8004ae8:	4a38      	ldr	r2, [pc, #224]	; (8004bcc <HAL_DMA_DeInit+0x11c>)
 8004aea:	fba2 2303 	umull	r2, r3, r2, r3
 8004aee:	091b      	lsrs	r3, r3, #4
 8004af0:	009a      	lsls	r2, r3, #2
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a35      	ldr	r2, [pc, #212]	; (8004bd0 <HAL_DMA_DeInit+0x120>)
 8004afa:	641a      	str	r2, [r3, #64]	; 0x40
 8004afc:	e00e      	b.n	8004b1c <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	461a      	mov	r2, r3
 8004b04:	4b33      	ldr	r3, [pc, #204]	; (8004bd4 <HAL_DMA_DeInit+0x124>)
 8004b06:	4413      	add	r3, r2
 8004b08:	4a30      	ldr	r2, [pc, #192]	; (8004bcc <HAL_DMA_DeInit+0x11c>)
 8004b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b0e:	091b      	lsrs	r3, r3, #4
 8004b10:	009a      	lsls	r2, r3, #2
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a2f      	ldr	r2, [pc, #188]	; (8004bd8 <HAL_DMA_DeInit+0x128>)
 8004b1a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2200      	movs	r2, #0
 8004b22:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b28:	f003 021c 	and.w	r2, r3, #28
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b30:	2101      	movs	r1, #1
 8004b32:	fa01 f202 	lsl.w	r2, r1, r2
 8004b36:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f000 fa8f 	bl	800505c <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b42:	2200      	movs	r2, #0
 8004b44:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004b4e:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d00f      	beq.n	8004b78 <HAL_DMA_DeInit+0xc8>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	2b04      	cmp	r3, #4
 8004b5e:	d80b      	bhi.n	8004b78 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f000 fac3 	bl	80050ec <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004b76:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = NULL;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004bb8:	2300      	movs	r3, #0
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3708      	adds	r7, #8
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	40020407 	.word	0x40020407
 8004bc8:	bffdfff8 	.word	0xbffdfff8
 8004bcc:	cccccccd 	.word	0xcccccccd
 8004bd0:	40020000 	.word	0x40020000
 8004bd4:	bffdfbf8 	.word	0xbffdfbf8
 8004bd8:	40020400 	.word	0x40020400

08004bdc <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b086      	sub	sp, #24
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	60b9      	str	r1, [r7, #8]
 8004be6:	607a      	str	r2, [r7, #4]
 8004be8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bea:	2300      	movs	r3, #0
 8004bec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d101      	bne.n	8004bfc <HAL_DMA_Start_IT+0x20>
 8004bf8:	2302      	movs	r3, #2
 8004bfa:	e069      	b.n	8004cd0 <HAL_DMA_Start_IT+0xf4>
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d155      	bne.n	8004cbc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2202      	movs	r2, #2
 8004c14:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f022 0201 	bic.w	r2, r2, #1
 8004c2c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	68b9      	ldr	r1, [r7, #8]
 8004c34:	68f8      	ldr	r0, [r7, #12]
 8004c36:	f000 f9d3 	bl	8004fe0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d008      	beq.n	8004c54 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f042 020e 	orr.w	r2, r2, #14
 8004c50:	601a      	str	r2, [r3, #0]
 8004c52:	e00f      	b.n	8004c74 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f022 0204 	bic.w	r2, r2, #4
 8004c62:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f042 020a 	orr.w	r2, r2, #10
 8004c72:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d007      	beq.n	8004c92 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c90:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d007      	beq.n	8004caa <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ca4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ca8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f042 0201 	orr.w	r2, r2, #1
 8004cb8:	601a      	str	r2, [r3, #0]
 8004cba:	e008      	b.n	8004cce <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2280      	movs	r2, #128	; 0x80
 8004cc0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004cce:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3718      	adds	r7, #24
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d101      	bne.n	8004cea <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e04f      	b.n	8004d8a <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	2b02      	cmp	r3, #2
 8004cf4:	d008      	beq.n	8004d08 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2204      	movs	r2, #4
 8004cfa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e040      	b.n	8004d8a <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f022 020e 	bic.w	r2, r2, #14
 8004d16:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d22:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d26:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f022 0201 	bic.w	r2, r2, #1
 8004d36:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d3c:	f003 021c 	and.w	r2, r3, #28
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d44:	2101      	movs	r1, #1
 8004d46:	fa01 f202 	lsl.w	r2, r1, r2
 8004d4a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004d54:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00c      	beq.n	8004d78 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d6c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004d76:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8004d88:	2300      	movs	r3, #0
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	370c      	adds	r7, #12
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bc80      	pop	{r7}
 8004d92:	4770      	bx	lr

08004d94 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	2b02      	cmp	r3, #2
 8004daa:	d005      	beq.n	8004db8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2204      	movs	r2, #4
 8004db0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	73fb      	strb	r3, [r7, #15]
 8004db6:	e047      	b.n	8004e48 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f022 020e 	bic.w	r2, r2, #14
 8004dc6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f022 0201 	bic.w	r2, r2, #1
 8004dd6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004de2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004de6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dec:	f003 021c 	and.w	r2, r3, #28
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df4:	2101      	movs	r1, #1
 8004df6:	fa01 f202 	lsl.w	r2, r1, r2
 8004dfa:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004e04:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d00c      	beq.n	8004e28 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e1c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004e26:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d003      	beq.n	8004e48 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	4798      	blx	r3
    }
  }
  return status;
 8004e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3710      	adds	r7, #16
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
	...

08004e54 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e70:	f003 031c 	and.w	r3, r3, #28
 8004e74:	2204      	movs	r2, #4
 8004e76:	409a      	lsls	r2, r3
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d027      	beq.n	8004ed0 <HAL_DMA_IRQHandler+0x7c>
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	f003 0304 	and.w	r3, r3, #4
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d022      	beq.n	8004ed0 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 0320 	and.w	r3, r3, #32
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d107      	bne.n	8004ea8 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f022 0204 	bic.w	r2, r2, #4
 8004ea6:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eac:	f003 021c 	and.w	r2, r3, #28
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb4:	2104      	movs	r1, #4
 8004eb6:	fa01 f202 	lsl.w	r2, r1, r2
 8004eba:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	f000 8081 	beq.w	8004fc8 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8004ece:	e07b      	b.n	8004fc8 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ed4:	f003 031c 	and.w	r3, r3, #28
 8004ed8:	2202      	movs	r2, #2
 8004eda:	409a      	lsls	r2, r3
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	4013      	ands	r3, r2
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d03d      	beq.n	8004f60 <HAL_DMA_IRQHandler+0x10c>
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	f003 0302 	and.w	r3, r3, #2
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d038      	beq.n	8004f60 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 0320 	and.w	r3, r3, #32
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d10b      	bne.n	8004f14 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f022 020a 	bic.w	r2, r2, #10
 8004f0a:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	461a      	mov	r2, r3
 8004f1a:	4b2e      	ldr	r3, [pc, #184]	; (8004fd4 <HAL_DMA_IRQHandler+0x180>)
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d909      	bls.n	8004f34 <HAL_DMA_IRQHandler+0xe0>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f24:	f003 031c 	and.w	r3, r3, #28
 8004f28:	4a2b      	ldr	r2, [pc, #172]	; (8004fd8 <HAL_DMA_IRQHandler+0x184>)
 8004f2a:	2102      	movs	r1, #2
 8004f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8004f30:	6053      	str	r3, [r2, #4]
 8004f32:	e008      	b.n	8004f46 <HAL_DMA_IRQHandler+0xf2>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f38:	f003 031c 	and.w	r3, r3, #28
 8004f3c:	4a27      	ldr	r2, [pc, #156]	; (8004fdc <HAL_DMA_IRQHandler+0x188>)
 8004f3e:	2102      	movs	r1, #2
 8004f40:	fa01 f303 	lsl.w	r3, r1, r3
 8004f44:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d038      	beq.n	8004fc8 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8004f5e:	e033      	b.n	8004fc8 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f64:	f003 031c 	and.w	r3, r3, #28
 8004f68:	2208      	movs	r2, #8
 8004f6a:	409a      	lsls	r2, r3
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	4013      	ands	r3, r2
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d02a      	beq.n	8004fca <HAL_DMA_IRQHandler+0x176>
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	f003 0308 	and.w	r3, r3, #8
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d025      	beq.n	8004fca <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f022 020e 	bic.w	r2, r2, #14
 8004f8c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f92:	f003 021c 	and.w	r2, r3, #28
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9a:	2101      	movs	r1, #1
 8004f9c:	fa01 f202 	lsl.w	r2, r1, r2
 8004fa0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d004      	beq.n	8004fca <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004fc8:	bf00      	nop
 8004fca:	bf00      	nop
}
 8004fcc:	3710      	adds	r7, #16
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
 8004fd2:	bf00      	nop
 8004fd4:	40020080 	.word	0x40020080
 8004fd8:	40020400 	.word	0x40020400
 8004fdc:	40020000 	.word	0x40020000

08004fe0 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b085      	sub	sp, #20
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	60f8      	str	r0, [r7, #12]
 8004fe8:	60b9      	str	r1, [r7, #8]
 8004fea:	607a      	str	r2, [r7, #4]
 8004fec:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ff2:	68fa      	ldr	r2, [r7, #12]
 8004ff4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004ff6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d004      	beq.n	800500a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005004:	68fa      	ldr	r2, [r7, #12]
 8005006:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005008:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800500e:	f003 021c 	and.w	r2, r3, #28
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005016:	2101      	movs	r1, #1
 8005018:	fa01 f202 	lsl.w	r2, r1, r2
 800501c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	683a      	ldr	r2, [r7, #0]
 8005024:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	2b10      	cmp	r3, #16
 800502c:	d108      	bne.n	8005040 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	68ba      	ldr	r2, [r7, #8]
 800503c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800503e:	e007      	b.n	8005050 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	68ba      	ldr	r2, [r7, #8]
 8005046:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	60da      	str	r2, [r3, #12]
}
 8005050:	bf00      	nop
 8005052:	3714      	adds	r7, #20
 8005054:	46bd      	mov	sp, r7
 8005056:	bc80      	pop	{r7}
 8005058:	4770      	bx	lr
	...

0800505c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800505c:	b480      	push	{r7}
 800505e:	b085      	sub	sp, #20
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	461a      	mov	r2, r3
 800506a:	4b1c      	ldr	r3, [pc, #112]	; (80050dc <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 800506c:	429a      	cmp	r2, r3
 800506e:	d813      	bhi.n	8005098 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005074:	089b      	lsrs	r3, r3, #2
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800507c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	b2db      	uxtb	r3, r3
 800508a:	3b08      	subs	r3, #8
 800508c:	4a14      	ldr	r2, [pc, #80]	; (80050e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 800508e:	fba2 2303 	umull	r2, r3, r2, r3
 8005092:	091b      	lsrs	r3, r3, #4
 8005094:	60fb      	str	r3, [r7, #12]
 8005096:	e011      	b.n	80050bc <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800509c:	089b      	lsrs	r3, r3, #2
 800509e:	009a      	lsls	r2, r3, #2
 80050a0:	4b10      	ldr	r3, [pc, #64]	; (80050e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 80050a2:	4413      	add	r3, r2
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	3b08      	subs	r3, #8
 80050b0:	4a0b      	ldr	r2, [pc, #44]	; (80050e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80050b2:	fba2 2303 	umull	r2, r3, r2, r3
 80050b6:	091b      	lsrs	r3, r3, #4
 80050b8:	3307      	adds	r3, #7
 80050ba:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4a0a      	ldr	r2, [pc, #40]	; (80050e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 80050c0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	f003 031f 	and.w	r3, r3, #31
 80050c8:	2201      	movs	r2, #1
 80050ca:	409a      	lsls	r2, r3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	651a      	str	r2, [r3, #80]	; 0x50
}
 80050d0:	bf00      	nop
 80050d2:	3714      	adds	r7, #20
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bc80      	pop	{r7}
 80050d8:	4770      	bx	lr
 80050da:	bf00      	nop
 80050dc:	40020407 	.word	0x40020407
 80050e0:	cccccccd 	.word	0xcccccccd
 80050e4:	4002081c 	.word	0x4002081c
 80050e8:	40020880 	.word	0x40020880

080050ec <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b085      	sub	sp, #20
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050fc:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80050fe:	68fa      	ldr	r2, [r7, #12]
 8005100:	4b0a      	ldr	r3, [pc, #40]	; (800512c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005102:	4413      	add	r3, r2
 8005104:	009b      	lsls	r3, r3, #2
 8005106:	461a      	mov	r2, r3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4a08      	ldr	r2, [pc, #32]	; (8005130 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005110:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	3b01      	subs	r3, #1
 8005116:	f003 0303 	and.w	r3, r3, #3
 800511a:	2201      	movs	r2, #1
 800511c:	409a      	lsls	r2, r3
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8005122:	bf00      	nop
 8005124:	3714      	adds	r7, #20
 8005126:	46bd      	mov	sp, r7
 8005128:	bc80      	pop	{r7}
 800512a:	4770      	bx	lr
 800512c:	1000823f 	.word	0x1000823f
 8005130:	40020940 	.word	0x40020940

08005134 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b086      	sub	sp, #24
 8005138:	af00      	add	r7, sp, #0
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	60b9      	str	r1, [r7, #8]
 800513e:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005142:	4b1c      	ldr	r3, [pc, #112]	; (80051b4 <HAL_FLASH_Program+0x80>)
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	2b01      	cmp	r3, #1
 8005148:	d101      	bne.n	800514e <HAL_FLASH_Program+0x1a>
 800514a:	2302      	movs	r3, #2
 800514c:	e02d      	b.n	80051aa <HAL_FLASH_Program+0x76>
 800514e:	4b19      	ldr	r3, [pc, #100]	; (80051b4 <HAL_FLASH_Program+0x80>)
 8005150:	2201      	movs	r2, #1
 8005152:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005154:	4b17      	ldr	r3, [pc, #92]	; (80051b4 <HAL_FLASH_Program+0x80>)
 8005156:	2200      	movs	r2, #0
 8005158:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800515a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800515e:	f000 f869 	bl	8005234 <FLASH_WaitForLastOperation>
 8005162:	4603      	mov	r3, r0
 8005164:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8005166:	7dfb      	ldrb	r3, [r7, #23]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d11a      	bne.n	80051a2 <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2b01      	cmp	r3, #1
 8005170:	d105      	bne.n	800517e <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8005172:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005176:	68b8      	ldr	r0, [r7, #8]
 8005178:	f000 f8be 	bl	80052f8 <FLASH_Program_DoubleWord>
 800517c:	e004      	b.n	8005188 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	4619      	mov	r1, r3
 8005182:	68b8      	ldr	r0, [r7, #8]
 8005184:	f000 f8de 	bl	8005344 <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005188:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800518c:	f000 f852 	bl	8005234 <FLASH_WaitForLastOperation>
 8005190:	4603      	mov	r3, r0
 8005192:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8005194:	4b08      	ldr	r3, [pc, #32]	; (80051b8 <HAL_FLASH_Program+0x84>)
 8005196:	695a      	ldr	r2, [r3, #20]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	43db      	mvns	r3, r3
 800519c:	4906      	ldr	r1, [pc, #24]	; (80051b8 <HAL_FLASH_Program+0x84>)
 800519e:	4013      	ands	r3, r2
 80051a0:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80051a2:	4b04      	ldr	r3, [pc, #16]	; (80051b4 <HAL_FLASH_Program+0x80>)
 80051a4:	2200      	movs	r2, #0
 80051a6:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80051a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3718      	adds	r7, #24
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	20000370 	.word	0x20000370
 80051b8:	58004000 	.word	0x58004000

080051bc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80051bc:	b480      	push	{r7}
 80051be:	b083      	sub	sp, #12
 80051c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80051c2:	2300      	movs	r3, #0
 80051c4:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80051c6:	4b0b      	ldr	r3, [pc, #44]	; (80051f4 <HAL_FLASH_Unlock+0x38>)
 80051c8:	695b      	ldr	r3, [r3, #20]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	da0b      	bge.n	80051e6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80051ce:	4b09      	ldr	r3, [pc, #36]	; (80051f4 <HAL_FLASH_Unlock+0x38>)
 80051d0:	4a09      	ldr	r2, [pc, #36]	; (80051f8 <HAL_FLASH_Unlock+0x3c>)
 80051d2:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80051d4:	4b07      	ldr	r3, [pc, #28]	; (80051f4 <HAL_FLASH_Unlock+0x38>)
 80051d6:	4a09      	ldr	r2, [pc, #36]	; (80051fc <HAL_FLASH_Unlock+0x40>)
 80051d8:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80051da:	4b06      	ldr	r3, [pc, #24]	; (80051f4 <HAL_FLASH_Unlock+0x38>)
 80051dc:	695b      	ldr	r3, [r3, #20]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	da01      	bge.n	80051e6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80051e6:	79fb      	ldrb	r3, [r7, #7]
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	370c      	adds	r7, #12
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bc80      	pop	{r7}
 80051f0:	4770      	bx	lr
 80051f2:	bf00      	nop
 80051f4:	58004000 	.word	0x58004000
 80051f8:	45670123 	.word	0x45670123
 80051fc:	cdef89ab 	.word	0xcdef89ab

08005200 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005206:	2300      	movs	r3, #0
 8005208:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800520a:	4b09      	ldr	r3, [pc, #36]	; (8005230 <HAL_FLASH_Lock+0x30>)
 800520c:	695b      	ldr	r3, [r3, #20]
 800520e:	4a08      	ldr	r2, [pc, #32]	; (8005230 <HAL_FLASH_Lock+0x30>)
 8005210:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005214:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8005216:	4b06      	ldr	r3, [pc, #24]	; (8005230 <HAL_FLASH_Lock+0x30>)
 8005218:	695b      	ldr	r3, [r3, #20]
 800521a:	2b00      	cmp	r3, #0
 800521c:	db01      	blt.n	8005222 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8005222:	79fb      	ldrb	r3, [r7, #7]
}
 8005224:	4618      	mov	r0, r3
 8005226:	370c      	adds	r7, #12
 8005228:	46bd      	mov	sp, r7
 800522a:	bc80      	pop	{r7}
 800522c:	4770      	bx	lr
 800522e:	bf00      	nop
 8005230:	58004000 	.word	0x58004000

08005234 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b084      	sub	sp, #16
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 800523c:	f7fd fb54 	bl	80028e8 <HAL_GetTick>
 8005240:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005242:	e009      	b.n	8005258 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8005244:	f7fd fb50 	bl	80028e8 <HAL_GetTick>
 8005248:	4602      	mov	r2, r0
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	429a      	cmp	r2, r3
 8005252:	d801      	bhi.n	8005258 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8005254:	2303      	movs	r3, #3
 8005256:	e047      	b.n	80052e8 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005258:	4b25      	ldr	r3, [pc, #148]	; (80052f0 <FLASH_WaitForLastOperation+0xbc>)
 800525a:	691b      	ldr	r3, [r3, #16]
 800525c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005264:	d0ee      	beq.n	8005244 <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 8005266:	4b22      	ldr	r3, [pc, #136]	; (80052f0 <FLASH_WaitForLastOperation+0xbc>)
 8005268:	691b      	ldr	r3, [r3, #16]
 800526a:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	f003 0301 	and.w	r3, r3, #1
 8005272:	2b00      	cmp	r3, #0
 8005274:	d002      	beq.n	800527c <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005276:	4b1e      	ldr	r3, [pc, #120]	; (80052f0 <FLASH_WaitForLastOperation+0xbc>)
 8005278:	2201      	movs	r2, #1
 800527a:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 800527c:	68ba      	ldr	r2, [r7, #8]
 800527e:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8005282:	4013      	ands	r3, r2
 8005284:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800528c:	2b00      	cmp	r3, #0
 800528e:	d007      	beq.n	80052a0 <FLASH_WaitForLastOperation+0x6c>
 8005290:	4b17      	ldr	r3, [pc, #92]	; (80052f0 <FLASH_WaitForLastOperation+0xbc>)
 8005292:	699a      	ldr	r2, [r3, #24]
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800529a:	4915      	ldr	r1, [pc, #84]	; (80052f0 <FLASH_WaitForLastOperation+0xbc>)
 800529c:	4313      	orrs	r3, r2
 800529e:	618b      	str	r3, [r1, #24]
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d004      	beq.n	80052b4 <FLASH_WaitForLastOperation+0x80>
 80052aa:	4a11      	ldr	r2, [pc, #68]	; (80052f0 <FLASH_WaitForLastOperation+0xbc>)
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80052b2:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d00e      	beq.n	80052d8 <FLASH_WaitForLastOperation+0xa4>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 80052ba:	4a0e      	ldr	r2, [pc, #56]	; (80052f4 <FLASH_WaitForLastOperation+0xc0>)
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e011      	b.n	80052e8 <FLASH_WaitForLastOperation+0xb4>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 80052c4:	f7fd fb10 	bl	80028e8 <HAL_GetTick>
 80052c8:	4602      	mov	r2, r0
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d801      	bhi.n	80052d8 <FLASH_WaitForLastOperation+0xa4>
    {
      return HAL_TIMEOUT;
 80052d4:	2303      	movs	r3, #3
 80052d6:	e007      	b.n	80052e8 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 80052d8:	4b05      	ldr	r3, [pc, #20]	; (80052f0 <FLASH_WaitForLastOperation+0xbc>)
 80052da:	691b      	ldr	r3, [r3, #16]
 80052dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052e0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80052e4:	d0ee      	beq.n	80052c4 <FLASH_WaitForLastOperation+0x90>
    }
  }

  return HAL_OK;
 80052e6:	2300      	movs	r3, #0
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3710      	adds	r7, #16
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	58004000 	.word	0x58004000
 80052f4:	20000370 	.word	0x20000370

080052f8 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b085      	sub	sp, #20
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8005304:	4b0e      	ldr	r3, [pc, #56]	; (8005340 <FLASH_Program_DoubleWord+0x48>)
 8005306:	695b      	ldr	r3, [r3, #20]
 8005308:	4a0d      	ldr	r2, [pc, #52]	; (8005340 <FLASH_Program_DoubleWord+0x48>)
 800530a:	f043 0301 	orr.w	r3, r3, #1
 800530e:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	683a      	ldr	r2, [r7, #0]
 8005314:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8005316:	f3bf 8f6f 	isb	sy
}
 800531a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 800531c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005320:	f04f 0200 	mov.w	r2, #0
 8005324:	f04f 0300 	mov.w	r3, #0
 8005328:	000a      	movs	r2, r1
 800532a:	2300      	movs	r3, #0
 800532c:	68f9      	ldr	r1, [r7, #12]
 800532e:	3104      	adds	r1, #4
 8005330:	4613      	mov	r3, r2
 8005332:	600b      	str	r3, [r1, #0]
}
 8005334:	bf00      	nop
 8005336:	3714      	adds	r7, #20
 8005338:	46bd      	mov	sp, r7
 800533a:	bc80      	pop	{r7}
 800533c:	4770      	bx	lr
 800533e:	bf00      	nop
 8005340:	58004000 	.word	0x58004000

08005344 <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 8005344:	b480      	push	{r7}
 8005346:	b089      	sub	sp, #36	; 0x24
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800534e:	2340      	movs	r3, #64	; 0x40
 8005350:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800535a:	4b18      	ldr	r3, [pc, #96]	; (80053bc <FLASH_Program_Fast+0x78>)
 800535c:	695b      	ldr	r3, [r3, #20]
 800535e:	4a17      	ldr	r2, [pc, #92]	; (80053bc <FLASH_Program_Fast+0x78>)
 8005360:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005364:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005366:	f3ef 8310 	mrs	r3, PRIMASK
 800536a:	60fb      	str	r3, [r7, #12]
  return(result);
 800536c:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 800536e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8005370:	b672      	cpsid	i
}
 8005372:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	69bb      	ldr	r3, [r7, #24]
 800537a:	601a      	str	r2, [r3, #0]
    dest_addr++;
 800537c:	69bb      	ldr	r3, [r7, #24]
 800537e:	3304      	adds	r3, #4
 8005380:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	3304      	adds	r3, #4
 8005386:	617b      	str	r3, [r7, #20]
    row_index--;
 8005388:	7ffb      	ldrb	r3, [r7, #31]
 800538a:	3b01      	subs	r3, #1
 800538c:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 800538e:	7ffb      	ldrb	r3, [r7, #31]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d1ef      	bne.n	8005374 <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8005394:	bf00      	nop
 8005396:	4b09      	ldr	r3, [pc, #36]	; (80053bc <FLASH_Program_Fast+0x78>)
 8005398:	691b      	ldr	r3, [r3, #16]
 800539a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800539e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053a2:	d0f8      	beq.n	8005396 <FLASH_Program_Fast+0x52>
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	f383 8810 	msr	PRIMASK, r3
}
 80053ae:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80053b0:	bf00      	nop
 80053b2:	3724      	adds	r7, #36	; 0x24
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bc80      	pop	{r7}
 80053b8:	4770      	bx	lr
 80053ba:	bf00      	nop
 80053bc:	58004000 	.word	0x58004000

080053c0 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80053ca:	4b28      	ldr	r3, [pc, #160]	; (800546c <HAL_FLASHEx_Erase+0xac>)
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d101      	bne.n	80053d6 <HAL_FLASHEx_Erase+0x16>
 80053d2:	2302      	movs	r3, #2
 80053d4:	e046      	b.n	8005464 <HAL_FLASHEx_Erase+0xa4>
 80053d6:	4b25      	ldr	r3, [pc, #148]	; (800546c <HAL_FLASHEx_Erase+0xac>)
 80053d8:	2201      	movs	r2, #1
 80053da:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80053dc:	4b23      	ldr	r3, [pc, #140]	; (800546c <HAL_FLASHEx_Erase+0xac>)
 80053de:	2200      	movs	r2, #0
 80053e0:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80053e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80053e6:	f7ff ff25 	bl	8005234 <FLASH_WaitForLastOperation>
 80053ea:	4603      	mov	r3, r0
 80053ec:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80053ee:	7bfb      	ldrb	r3, [r7, #15]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d133      	bne.n	800545c <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	2b04      	cmp	r3, #4
 80053fa:	d108      	bne.n	800540e <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 80053fc:	f000 f838 	bl	8005470 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005400:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005404:	f7ff ff16 	bl	8005234 <FLASH_WaitForLastOperation>
 8005408:	4603      	mov	r3, r0
 800540a:	73fb      	strb	r3, [r7, #15]
 800540c:	e024      	b.n	8005458 <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	f04f 32ff 	mov.w	r2, #4294967295
 8005414:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	60bb      	str	r3, [r7, #8]
 800541c:	e012      	b.n	8005444 <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 800541e:	68b8      	ldr	r0, [r7, #8]
 8005420:	f000 f836 	bl	8005490 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005424:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005428:	f7ff ff04 	bl	8005234 <FLASH_WaitForLastOperation>
 800542c:	4603      	mov	r3, r0
 800542e:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 8005430:	7bfb      	ldrb	r3, [r7, #15]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d003      	beq.n	800543e <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	68ba      	ldr	r2, [r7, #8]
 800543a:	601a      	str	r2, [r3, #0]
          break;
 800543c:	e00a      	b.n	8005454 <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	3301      	adds	r3, #1
 8005442:	60bb      	str	r3, [r7, #8]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	685a      	ldr	r2, [r3, #4]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	4413      	add	r3, r2
 800544e:	68ba      	ldr	r2, [r7, #8]
 8005450:	429a      	cmp	r2, r3
 8005452:	d3e4      	bcc.n	800541e <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 8005454:	f000 f878 	bl	8005548 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8005458:	f000 f832 	bl	80054c0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800545c:	4b03      	ldr	r3, [pc, #12]	; (800546c <HAL_FLASHEx_Erase+0xac>)
 800545e:	2200      	movs	r2, #0
 8005460:	701a      	strb	r2, [r3, #0]

  return status;
 8005462:	7bfb      	ldrb	r3, [r7, #15]
}
 8005464:	4618      	mov	r0, r3
 8005466:	3710      	adds	r7, #16
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}
 800546c:	20000370 	.word	0x20000370

08005470 <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8005470:	b480      	push	{r7}
 8005472:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 8005474:	4b05      	ldr	r3, [pc, #20]	; (800548c <FLASH_MassErase+0x1c>)
 8005476:	695b      	ldr	r3, [r3, #20]
 8005478:	4a04      	ldr	r2, [pc, #16]	; (800548c <FLASH_MassErase+0x1c>)
 800547a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800547e:	f043 0304 	orr.w	r3, r3, #4
 8005482:	6153      	str	r3, [r2, #20]
#endif
}
 8005484:	bf00      	nop
 8005486:	46bd      	mov	sp, r7
 8005488:	bc80      	pop	{r7}
 800548a:	4770      	bx	lr
 800548c:	58004000 	.word	0x58004000

08005490 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8005490:	b480      	push	{r7}
 8005492:	b083      	sub	sp, #12
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8005498:	4b08      	ldr	r3, [pc, #32]	; (80054bc <FLASH_PageErase+0x2c>)
 800549a:	695b      	ldr	r3, [r3, #20]
 800549c:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	00db      	lsls	r3, r3, #3
 80054a4:	4313      	orrs	r3, r2
 80054a6:	4a05      	ldr	r2, [pc, #20]	; (80054bc <FLASH_PageErase+0x2c>)
 80054a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054ac:	f043 0302 	orr.w	r3, r3, #2
 80054b0:	6153      	str	r3, [r2, #20]
#endif
}
 80054b2:	bf00      	nop
 80054b4:	370c      	adds	r7, #12
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bc80      	pop	{r7}
 80054ba:	4770      	bx	lr
 80054bc:	58004000 	.word	0x58004000

080054c0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80054c0:	b480      	push	{r7}
 80054c2:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 80054c4:	4b1f      	ldr	r3, [pc, #124]	; (8005544 <FLASH_FlushCaches+0x84>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d117      	bne.n	8005500 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80054d0:	4b1c      	ldr	r3, [pc, #112]	; (8005544 <FLASH_FlushCaches+0x84>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a1b      	ldr	r2, [pc, #108]	; (8005544 <FLASH_FlushCaches+0x84>)
 80054d6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80054da:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80054dc:	4b19      	ldr	r3, [pc, #100]	; (8005544 <FLASH_FlushCaches+0x84>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a18      	ldr	r2, [pc, #96]	; (8005544 <FLASH_FlushCaches+0x84>)
 80054e2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80054e6:	6013      	str	r3, [r2, #0]
 80054e8:	4b16      	ldr	r3, [pc, #88]	; (8005544 <FLASH_FlushCaches+0x84>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a15      	ldr	r2, [pc, #84]	; (8005544 <FLASH_FlushCaches+0x84>)
 80054ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80054f2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80054f4:	4b13      	ldr	r3, [pc, #76]	; (8005544 <FLASH_FlushCaches+0x84>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a12      	ldr	r2, [pc, #72]	; (8005544 <FLASH_FlushCaches+0x84>)
 80054fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80054fe:	6013      	str	r3, [r2, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8005500:	4b10      	ldr	r3, [pc, #64]	; (8005544 <FLASH_FlushCaches+0x84>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005508:	2b01      	cmp	r3, #1
 800550a:	d117      	bne.n	800553c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800550c:	4b0d      	ldr	r3, [pc, #52]	; (8005544 <FLASH_FlushCaches+0x84>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a0c      	ldr	r2, [pc, #48]	; (8005544 <FLASH_FlushCaches+0x84>)
 8005512:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005516:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005518:	4b0a      	ldr	r3, [pc, #40]	; (8005544 <FLASH_FlushCaches+0x84>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a09      	ldr	r2, [pc, #36]	; (8005544 <FLASH_FlushCaches+0x84>)
 800551e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005522:	6013      	str	r3, [r2, #0]
 8005524:	4b07      	ldr	r3, [pc, #28]	; (8005544 <FLASH_FlushCaches+0x84>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a06      	ldr	r2, [pc, #24]	; (8005544 <FLASH_FlushCaches+0x84>)
 800552a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800552e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005530:	4b04      	ldr	r3, [pc, #16]	; (8005544 <FLASH_FlushCaches+0x84>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a03      	ldr	r2, [pc, #12]	; (8005544 <FLASH_FlushCaches+0x84>)
 8005536:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800553a:	6013      	str	r3, [r2, #0]
  }
#endif
}
 800553c:	bf00      	nop
 800553e:	46bd      	mov	sp, r7
 8005540:	bc80      	pop	{r7}
 8005542:	4770      	bx	lr
 8005544:	58004000 	.word	0x58004000

08005548 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 8005548:	b480      	push	{r7}
 800554a:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800554c:	4b05      	ldr	r3, [pc, #20]	; (8005564 <FLASH_AcknowledgePageErase+0x1c>)
 800554e:	695b      	ldr	r3, [r3, #20]
 8005550:	4a04      	ldr	r2, [pc, #16]	; (8005564 <FLASH_AcknowledgePageErase+0x1c>)
 8005552:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8005556:	f023 0302 	bic.w	r3, r3, #2
 800555a:	6153      	str	r3, [r2, #20]
#endif
}
 800555c:	bf00      	nop
 800555e:	46bd      	mov	sp, r7
 8005560:	bc80      	pop	{r7}
 8005562:	4770      	bx	lr
 8005564:	58004000 	.word	0x58004000

08005568 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005568:	b480      	push	{r7}
 800556a:	b087      	sub	sp, #28
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005572:	2300      	movs	r3, #0
 8005574:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005576:	e140      	b.n	80057fa <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	2101      	movs	r1, #1
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	fa01 f303 	lsl.w	r3, r1, r3
 8005584:	4013      	ands	r3, r2
 8005586:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2b00      	cmp	r3, #0
 800558c:	f000 8132 	beq.w	80057f4 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	f003 0303 	and.w	r3, r3, #3
 8005598:	2b01      	cmp	r3, #1
 800559a:	d005      	beq.n	80055a8 <HAL_GPIO_Init+0x40>
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	f003 0303 	and.w	r3, r3, #3
 80055a4:	2b02      	cmp	r3, #2
 80055a6:	d130      	bne.n	800560a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	005b      	lsls	r3, r3, #1
 80055b2:	2203      	movs	r2, #3
 80055b4:	fa02 f303 	lsl.w	r3, r2, r3
 80055b8:	43db      	mvns	r3, r3
 80055ba:	693a      	ldr	r2, [r7, #16]
 80055bc:	4013      	ands	r3, r2
 80055be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	68da      	ldr	r2, [r3, #12]
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	005b      	lsls	r3, r3, #1
 80055c8:	fa02 f303 	lsl.w	r3, r2, r3
 80055cc:	693a      	ldr	r2, [r7, #16]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	693a      	ldr	r2, [r7, #16]
 80055d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80055de:	2201      	movs	r2, #1
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	fa02 f303 	lsl.w	r3, r2, r3
 80055e6:	43db      	mvns	r3, r3
 80055e8:	693a      	ldr	r2, [r7, #16]
 80055ea:	4013      	ands	r3, r2
 80055ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	091b      	lsrs	r3, r3, #4
 80055f4:	f003 0201 	and.w	r2, r3, #1
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	fa02 f303 	lsl.w	r3, r2, r3
 80055fe:	693a      	ldr	r2, [r7, #16]
 8005600:	4313      	orrs	r3, r2
 8005602:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	693a      	ldr	r2, [r7, #16]
 8005608:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	f003 0303 	and.w	r3, r3, #3
 8005612:	2b03      	cmp	r3, #3
 8005614:	d017      	beq.n	8005646 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	005b      	lsls	r3, r3, #1
 8005620:	2203      	movs	r2, #3
 8005622:	fa02 f303 	lsl.w	r3, r2, r3
 8005626:	43db      	mvns	r3, r3
 8005628:	693a      	ldr	r2, [r7, #16]
 800562a:	4013      	ands	r3, r2
 800562c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	689a      	ldr	r2, [r3, #8]
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	005b      	lsls	r3, r3, #1
 8005636:	fa02 f303 	lsl.w	r3, r2, r3
 800563a:	693a      	ldr	r2, [r7, #16]
 800563c:	4313      	orrs	r3, r2
 800563e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	693a      	ldr	r2, [r7, #16]
 8005644:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	f003 0303 	and.w	r3, r3, #3
 800564e:	2b02      	cmp	r3, #2
 8005650:	d123      	bne.n	800569a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	08da      	lsrs	r2, r3, #3
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	3208      	adds	r2, #8
 800565a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800565e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	f003 0307 	and.w	r3, r3, #7
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	220f      	movs	r2, #15
 800566a:	fa02 f303 	lsl.w	r3, r2, r3
 800566e:	43db      	mvns	r3, r3
 8005670:	693a      	ldr	r2, [r7, #16]
 8005672:	4013      	ands	r3, r2
 8005674:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	691a      	ldr	r2, [r3, #16]
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	f003 0307 	and.w	r3, r3, #7
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	fa02 f303 	lsl.w	r3, r2, r3
 8005686:	693a      	ldr	r2, [r7, #16]
 8005688:	4313      	orrs	r3, r2
 800568a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	08da      	lsrs	r2, r3, #3
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	3208      	adds	r2, #8
 8005694:	6939      	ldr	r1, [r7, #16]
 8005696:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	005b      	lsls	r3, r3, #1
 80056a4:	2203      	movs	r2, #3
 80056a6:	fa02 f303 	lsl.w	r3, r2, r3
 80056aa:	43db      	mvns	r3, r3
 80056ac:	693a      	ldr	r2, [r7, #16]
 80056ae:	4013      	ands	r3, r2
 80056b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	f003 0203 	and.w	r2, r3, #3
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	005b      	lsls	r3, r3, #1
 80056be:	fa02 f303 	lsl.w	r3, r2, r3
 80056c2:	693a      	ldr	r2, [r7, #16]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	693a      	ldr	r2, [r7, #16]
 80056cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	f000 808c 	beq.w	80057f4 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80056dc:	4a4e      	ldr	r2, [pc, #312]	; (8005818 <HAL_GPIO_Init+0x2b0>)
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	089b      	lsrs	r3, r3, #2
 80056e2:	3302      	adds	r3, #2
 80056e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	f003 0303 	and.w	r3, r3, #3
 80056f0:	009b      	lsls	r3, r3, #2
 80056f2:	2207      	movs	r2, #7
 80056f4:	fa02 f303 	lsl.w	r3, r2, r3
 80056f8:	43db      	mvns	r3, r3
 80056fa:	693a      	ldr	r2, [r7, #16]
 80056fc:	4013      	ands	r3, r2
 80056fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005706:	d00d      	beq.n	8005724 <HAL_GPIO_Init+0x1bc>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4a44      	ldr	r2, [pc, #272]	; (800581c <HAL_GPIO_Init+0x2b4>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d007      	beq.n	8005720 <HAL_GPIO_Init+0x1b8>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	4a43      	ldr	r2, [pc, #268]	; (8005820 <HAL_GPIO_Init+0x2b8>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d101      	bne.n	800571c <HAL_GPIO_Init+0x1b4>
 8005718:	2302      	movs	r3, #2
 800571a:	e004      	b.n	8005726 <HAL_GPIO_Init+0x1be>
 800571c:	2307      	movs	r3, #7
 800571e:	e002      	b.n	8005726 <HAL_GPIO_Init+0x1be>
 8005720:	2301      	movs	r3, #1
 8005722:	e000      	b.n	8005726 <HAL_GPIO_Init+0x1be>
 8005724:	2300      	movs	r3, #0
 8005726:	697a      	ldr	r2, [r7, #20]
 8005728:	f002 0203 	and.w	r2, r2, #3
 800572c:	0092      	lsls	r2, r2, #2
 800572e:	4093      	lsls	r3, r2
 8005730:	693a      	ldr	r2, [r7, #16]
 8005732:	4313      	orrs	r3, r2
 8005734:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005736:	4938      	ldr	r1, [pc, #224]	; (8005818 <HAL_GPIO_Init+0x2b0>)
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	089b      	lsrs	r3, r3, #2
 800573c:	3302      	adds	r3, #2
 800573e:	693a      	ldr	r2, [r7, #16]
 8005740:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005744:	4b37      	ldr	r3, [pc, #220]	; (8005824 <HAL_GPIO_Init+0x2bc>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	43db      	mvns	r3, r3
 800574e:	693a      	ldr	r2, [r7, #16]
 8005750:	4013      	ands	r3, r2
 8005752:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800575c:	2b00      	cmp	r3, #0
 800575e:	d003      	beq.n	8005768 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8005760:	693a      	ldr	r2, [r7, #16]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	4313      	orrs	r3, r2
 8005766:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005768:	4a2e      	ldr	r2, [pc, #184]	; (8005824 <HAL_GPIO_Init+0x2bc>)
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800576e:	4b2d      	ldr	r3, [pc, #180]	; (8005824 <HAL_GPIO_Init+0x2bc>)
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	43db      	mvns	r3, r3
 8005778:	693a      	ldr	r2, [r7, #16]
 800577a:	4013      	ands	r3, r2
 800577c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005786:	2b00      	cmp	r3, #0
 8005788:	d003      	beq.n	8005792 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 800578a:	693a      	ldr	r2, [r7, #16]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	4313      	orrs	r3, r2
 8005790:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005792:	4a24      	ldr	r2, [pc, #144]	; (8005824 <HAL_GPIO_Init+0x2bc>)
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8005798:	4b22      	ldr	r3, [pc, #136]	; (8005824 <HAL_GPIO_Init+0x2bc>)
 800579a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800579e:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	43db      	mvns	r3, r3
 80057a4:	693a      	ldr	r2, [r7, #16]
 80057a6:	4013      	ands	r3, r2
 80057a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d003      	beq.n	80057be <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 80057b6:	693a      	ldr	r2, [r7, #16]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80057be:	4a19      	ldr	r2, [pc, #100]	; (8005824 <HAL_GPIO_Init+0x2bc>)
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80057c6:	4b17      	ldr	r3, [pc, #92]	; (8005824 <HAL_GPIO_Init+0x2bc>)
 80057c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057cc:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	43db      	mvns	r3, r3
 80057d2:	693a      	ldr	r2, [r7, #16]
 80057d4:	4013      	ands	r3, r2
 80057d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d003      	beq.n	80057ec <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80057e4:	693a      	ldr	r2, [r7, #16]
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80057ec:	4a0d      	ldr	r2, [pc, #52]	; (8005824 <HAL_GPIO_Init+0x2bc>)
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	3301      	adds	r3, #1
 80057f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	fa22 f303 	lsr.w	r3, r2, r3
 8005804:	2b00      	cmp	r3, #0
 8005806:	f47f aeb7 	bne.w	8005578 <HAL_GPIO_Init+0x10>
  }
}
 800580a:	bf00      	nop
 800580c:	bf00      	nop
 800580e:	371c      	adds	r7, #28
 8005810:	46bd      	mov	sp, r7
 8005812:	bc80      	pop	{r7}
 8005814:	4770      	bx	lr
 8005816:	bf00      	nop
 8005818:	40010000 	.word	0x40010000
 800581c:	48000400 	.word	0x48000400
 8005820:	48000800 	.word	0x48000800
 8005824:	58000800 	.word	0x58000800

08005828 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005828:	b480      	push	{r7}
 800582a:	b087      	sub	sp, #28
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005832:	2300      	movs	r3, #0
 8005834:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8005836:	e0af      	b.n	8005998 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005838:	2201      	movs	r2, #1
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	fa02 f303 	lsl.w	r3, r2, r3
 8005840:	683a      	ldr	r2, [r7, #0]
 8005842:	4013      	ands	r3, r2
 8005844:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	2b00      	cmp	r3, #0
 800584a:	f000 80a2 	beq.w	8005992 <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800584e:	4a59      	ldr	r2, [pc, #356]	; (80059b4 <HAL_GPIO_DeInit+0x18c>)
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	089b      	lsrs	r3, r3, #2
 8005854:	3302      	adds	r3, #2
 8005856:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800585a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	f003 0303 	and.w	r3, r3, #3
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	2207      	movs	r2, #7
 8005866:	fa02 f303 	lsl.w	r3, r2, r3
 800586a:	68fa      	ldr	r2, [r7, #12]
 800586c:	4013      	ands	r3, r2
 800586e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005876:	d00d      	beq.n	8005894 <HAL_GPIO_DeInit+0x6c>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4a4f      	ldr	r2, [pc, #316]	; (80059b8 <HAL_GPIO_DeInit+0x190>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d007      	beq.n	8005890 <HAL_GPIO_DeInit+0x68>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4a4e      	ldr	r2, [pc, #312]	; (80059bc <HAL_GPIO_DeInit+0x194>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d101      	bne.n	800588c <HAL_GPIO_DeInit+0x64>
 8005888:	2302      	movs	r3, #2
 800588a:	e004      	b.n	8005896 <HAL_GPIO_DeInit+0x6e>
 800588c:	2307      	movs	r3, #7
 800588e:	e002      	b.n	8005896 <HAL_GPIO_DeInit+0x6e>
 8005890:	2301      	movs	r3, #1
 8005892:	e000      	b.n	8005896 <HAL_GPIO_DeInit+0x6e>
 8005894:	2300      	movs	r3, #0
 8005896:	697a      	ldr	r2, [r7, #20]
 8005898:	f002 0203 	and.w	r2, r2, #3
 800589c:	0092      	lsls	r2, r2, #2
 800589e:	4093      	lsls	r3, r2
 80058a0:	68fa      	ldr	r2, [r7, #12]
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d136      	bne.n	8005914 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 80058a6:	4b46      	ldr	r3, [pc, #280]	; (80059c0 <HAL_GPIO_DeInit+0x198>)
 80058a8:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	43db      	mvns	r3, r3
 80058b0:	4943      	ldr	r1, [pc, #268]	; (80059c0 <HAL_GPIO_DeInit+0x198>)
 80058b2:	4013      	ands	r3, r2
 80058b4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 80058b8:	4b41      	ldr	r3, [pc, #260]	; (80059c0 <HAL_GPIO_DeInit+0x198>)
 80058ba:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	43db      	mvns	r3, r3
 80058c2:	493f      	ldr	r1, [pc, #252]	; (80059c0 <HAL_GPIO_DeInit+0x198>)
 80058c4:	4013      	ands	r3, r2
 80058c6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80058ca:	4b3d      	ldr	r3, [pc, #244]	; (80059c0 <HAL_GPIO_DeInit+0x198>)
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	43db      	mvns	r3, r3
 80058d2:	493b      	ldr	r1, [pc, #236]	; (80059c0 <HAL_GPIO_DeInit+0x198>)
 80058d4:	4013      	ands	r3, r2
 80058d6:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 80058d8:	4b39      	ldr	r3, [pc, #228]	; (80059c0 <HAL_GPIO_DeInit+0x198>)
 80058da:	685a      	ldr	r2, [r3, #4]
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	43db      	mvns	r3, r3
 80058e0:	4937      	ldr	r1, [pc, #220]	; (80059c0 <HAL_GPIO_DeInit+0x198>)
 80058e2:	4013      	ands	r3, r2
 80058e4:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	f003 0303 	and.w	r3, r3, #3
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	2207      	movs	r2, #7
 80058f0:	fa02 f303 	lsl.w	r3, r2, r3
 80058f4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80058f6:	4a2f      	ldr	r2, [pc, #188]	; (80059b4 <HAL_GPIO_DeInit+0x18c>)
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	089b      	lsrs	r3, r3, #2
 80058fc:	3302      	adds	r3, #2
 80058fe:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	43da      	mvns	r2, r3
 8005906:	482b      	ldr	r0, [pc, #172]	; (80059b4 <HAL_GPIO_DeInit+0x18c>)
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	089b      	lsrs	r3, r3, #2
 800590c:	400a      	ands	r2, r1
 800590e:	3302      	adds	r3, #2
 8005910:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	005b      	lsls	r3, r3, #1
 800591c:	2103      	movs	r1, #3
 800591e:	fa01 f303 	lsl.w	r3, r1, r3
 8005922:	431a      	orrs	r2, r3
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	08da      	lsrs	r2, r3, #3
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	3208      	adds	r2, #8
 8005930:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	f003 0307 	and.w	r3, r3, #7
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	220f      	movs	r2, #15
 800593e:	fa02 f303 	lsl.w	r3, r2, r3
 8005942:	43db      	mvns	r3, r3
 8005944:	697a      	ldr	r2, [r7, #20]
 8005946:	08d2      	lsrs	r2, r2, #3
 8005948:	4019      	ands	r1, r3
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	3208      	adds	r2, #8
 800594e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	689a      	ldr	r2, [r3, #8]
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	005b      	lsls	r3, r3, #1
 800595a:	2103      	movs	r1, #3
 800595c:	fa01 f303 	lsl.w	r3, r1, r3
 8005960:	43db      	mvns	r3, r3
 8005962:	401a      	ands	r2, r3
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	685a      	ldr	r2, [r3, #4]
 800596c:	2101      	movs	r1, #1
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	fa01 f303 	lsl.w	r3, r1, r3
 8005974:	43db      	mvns	r3, r3
 8005976:	401a      	ands	r2, r3
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	68da      	ldr	r2, [r3, #12]
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	005b      	lsls	r3, r3, #1
 8005984:	2103      	movs	r1, #3
 8005986:	fa01 f303 	lsl.w	r3, r1, r3
 800598a:	43db      	mvns	r3, r3
 800598c:	401a      	ands	r2, r3
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	60da      	str	r2, [r3, #12]
    }

    position++;
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	3301      	adds	r3, #1
 8005996:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8005998:	683a      	ldr	r2, [r7, #0]
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	fa22 f303 	lsr.w	r3, r2, r3
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	f47f af49 	bne.w	8005838 <HAL_GPIO_DeInit+0x10>
  }
}
 80059a6:	bf00      	nop
 80059a8:	bf00      	nop
 80059aa:	371c      	adds	r7, #28
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bc80      	pop	{r7}
 80059b0:	4770      	bx	lr
 80059b2:	bf00      	nop
 80059b4:	40010000 	.word	0x40010000
 80059b8:	48000400 	.word	0x48000400
 80059bc:	48000800 	.word	0x48000800
 80059c0:	58000800 	.word	0x58000800

080059c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	460b      	mov	r3, r1
 80059ce:	807b      	strh	r3, [r7, #2]
 80059d0:	4613      	mov	r3, r2
 80059d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80059d4:	787b      	ldrb	r3, [r7, #1]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d003      	beq.n	80059e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80059da:	887a      	ldrh	r2, [r7, #2]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80059e0:	e002      	b.n	80059e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80059e2:	887a      	ldrh	r2, [r7, #2]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80059e8:	bf00      	nop
 80059ea:	370c      	adds	r7, #12
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bc80      	pop	{r7}
 80059f0:	4770      	bx	lr
	...

080059f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b082      	sub	sp, #8
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	4603      	mov	r3, r0
 80059fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80059fe:	4b08      	ldr	r3, [pc, #32]	; (8005a20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005a00:	68da      	ldr	r2, [r3, #12]
 8005a02:	88fb      	ldrh	r3, [r7, #6]
 8005a04:	4013      	ands	r3, r2
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d006      	beq.n	8005a18 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005a0a:	4a05      	ldr	r2, [pc, #20]	; (8005a20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005a0c:	88fb      	ldrh	r3, [r7, #6]
 8005a0e:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005a10:	88fb      	ldrh	r3, [r7, #6]
 8005a12:	4618      	mov	r0, r3
 8005a14:	f005 fe08 	bl	800b628 <HAL_GPIO_EXTI_Callback>
  }
}
 8005a18:	bf00      	nop
 8005a1a:	3708      	adds	r7, #8
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}
 8005a20:	58000800 	.word	0x58000800

08005a24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b082      	sub	sp, #8
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d101      	bne.n	8005a36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	e081      	b.n	8005b3a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d106      	bne.n	8005a50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2200      	movs	r2, #0
 8005a46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f7fc fb12 	bl	8002074 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2224      	movs	r2, #36	; 0x24
 8005a54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f022 0201 	bic.w	r2, r2, #1
 8005a66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	685a      	ldr	r2, [r3, #4]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005a74:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	689a      	ldr	r2, [r3, #8]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005a84:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d107      	bne.n	8005a9e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	689a      	ldr	r2, [r3, #8]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a9a:	609a      	str	r2, [r3, #8]
 8005a9c:	e006      	b.n	8005aac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	689a      	ldr	r2, [r3, #8]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005aaa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	2b02      	cmp	r3, #2
 8005ab2:	d104      	bne.n	8005abe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005abc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	687a      	ldr	r2, [r7, #4]
 8005ac6:	6812      	ldr	r2, [r2, #0]
 8005ac8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005acc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ad0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	68da      	ldr	r2, [r3, #12]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005ae0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	691a      	ldr	r2, [r3, #16]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	695b      	ldr	r3, [r3, #20]
 8005aea:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	699b      	ldr	r3, [r3, #24]
 8005af2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	430a      	orrs	r2, r1
 8005afa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	69d9      	ldr	r1, [r3, #28]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6a1a      	ldr	r2, [r3, #32]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	430a      	orrs	r2, r1
 8005b0a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f042 0201 	orr.w	r2, r2, #1
 8005b1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2220      	movs	r2, #32
 8005b26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2200      	movs	r2, #0
 8005b34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005b38:	2300      	movs	r3, #0
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3708      	adds	r7, #8
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
	...

08005b44 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b088      	sub	sp, #32
 8005b48:	af02      	add	r7, sp, #8
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	607a      	str	r2, [r7, #4]
 8005b4e:	461a      	mov	r2, r3
 8005b50:	460b      	mov	r3, r1
 8005b52:	817b      	strh	r3, [r7, #10]
 8005b54:	4613      	mov	r3, r2
 8005b56:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	2b20      	cmp	r3, #32
 8005b62:	f040 80da 	bne.w	8005d1a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d101      	bne.n	8005b74 <HAL_I2C_Master_Transmit+0x30>
 8005b70:	2302      	movs	r3, #2
 8005b72:	e0d3      	b.n	8005d1c <HAL_I2C_Master_Transmit+0x1d8>
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2201      	movs	r2, #1
 8005b78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005b7c:	f7fc feb4 	bl	80028e8 <HAL_GetTick>
 8005b80:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	9300      	str	r3, [sp, #0]
 8005b86:	2319      	movs	r3, #25
 8005b88:	2201      	movs	r2, #1
 8005b8a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005b8e:	68f8      	ldr	r0, [r7, #12]
 8005b90:	f000 fb4d 	bl	800622e <I2C_WaitOnFlagUntilTimeout>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d001      	beq.n	8005b9e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e0be      	b.n	8005d1c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2221      	movs	r2, #33	; 0x21
 8005ba2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2210      	movs	r2, #16
 8005baa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	687a      	ldr	r2, [r7, #4]
 8005bb8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	893a      	ldrh	r2, [r7, #8]
 8005bbe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	2bff      	cmp	r3, #255	; 0xff
 8005bce:	d90e      	bls.n	8005bee <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	22ff      	movs	r2, #255	; 0xff
 8005bd4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bda:	b2da      	uxtb	r2, r3
 8005bdc:	8979      	ldrh	r1, [r7, #10]
 8005bde:	4b51      	ldr	r3, [pc, #324]	; (8005d24 <HAL_I2C_Master_Transmit+0x1e0>)
 8005be0:	9300      	str	r3, [sp, #0]
 8005be2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005be6:	68f8      	ldr	r0, [r7, #12]
 8005be8:	f000 fd38 	bl	800665c <I2C_TransferConfig>
 8005bec:	e06c      	b.n	8005cc8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bf2:	b29a      	uxth	r2, r3
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bfc:	b2da      	uxtb	r2, r3
 8005bfe:	8979      	ldrh	r1, [r7, #10]
 8005c00:	4b48      	ldr	r3, [pc, #288]	; (8005d24 <HAL_I2C_Master_Transmit+0x1e0>)
 8005c02:	9300      	str	r3, [sp, #0]
 8005c04:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005c08:	68f8      	ldr	r0, [r7, #12]
 8005c0a:	f000 fd27 	bl	800665c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005c0e:	e05b      	b.n	8005cc8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c10:	697a      	ldr	r2, [r7, #20]
 8005c12:	6a39      	ldr	r1, [r7, #32]
 8005c14:	68f8      	ldr	r0, [r7, #12]
 8005c16:	f000 fb4a 	bl	80062ae <I2C_WaitOnTXISFlagUntilTimeout>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d001      	beq.n	8005c24 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	e07b      	b.n	8005d1c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c28:	781a      	ldrb	r2, [r3, #0]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c34:	1c5a      	adds	r2, r3, #1
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	3b01      	subs	r3, #1
 8005c42:	b29a      	uxth	r2, r3
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c4c:	3b01      	subs	r3, #1
 8005c4e:	b29a      	uxth	r2, r3
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d034      	beq.n	8005cc8 <HAL_I2C_Master_Transmit+0x184>
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d130      	bne.n	8005cc8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	9300      	str	r3, [sp, #0]
 8005c6a:	6a3b      	ldr	r3, [r7, #32]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	2180      	movs	r1, #128	; 0x80
 8005c70:	68f8      	ldr	r0, [r7, #12]
 8005c72:	f000 fadc 	bl	800622e <I2C_WaitOnFlagUntilTimeout>
 8005c76:	4603      	mov	r3, r0
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d001      	beq.n	8005c80 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	e04d      	b.n	8005d1c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	2bff      	cmp	r3, #255	; 0xff
 8005c88:	d90e      	bls.n	8005ca8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	22ff      	movs	r2, #255	; 0xff
 8005c8e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c94:	b2da      	uxtb	r2, r3
 8005c96:	8979      	ldrh	r1, [r7, #10]
 8005c98:	2300      	movs	r3, #0
 8005c9a:	9300      	str	r3, [sp, #0]
 8005c9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005ca0:	68f8      	ldr	r0, [r7, #12]
 8005ca2:	f000 fcdb 	bl	800665c <I2C_TransferConfig>
 8005ca6:	e00f      	b.n	8005cc8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cac:	b29a      	uxth	r2, r3
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cb6:	b2da      	uxtb	r2, r3
 8005cb8:	8979      	ldrh	r1, [r7, #10]
 8005cba:	2300      	movs	r3, #0
 8005cbc:	9300      	str	r3, [sp, #0]
 8005cbe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005cc2:	68f8      	ldr	r0, [r7, #12]
 8005cc4:	f000 fcca 	bl	800665c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d19e      	bne.n	8005c10 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005cd2:	697a      	ldr	r2, [r7, #20]
 8005cd4:	6a39      	ldr	r1, [r7, #32]
 8005cd6:	68f8      	ldr	r0, [r7, #12]
 8005cd8:	f000 fb29 	bl	800632e <I2C_WaitOnSTOPFlagUntilTimeout>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d001      	beq.n	8005ce6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e01a      	b.n	8005d1c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	2220      	movs	r2, #32
 8005cec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	6859      	ldr	r1, [r3, #4]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	4b0b      	ldr	r3, [pc, #44]	; (8005d28 <HAL_I2C_Master_Transmit+0x1e4>)
 8005cfa:	400b      	ands	r3, r1
 8005cfc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2220      	movs	r2, #32
 8005d02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2200      	movs	r2, #0
 8005d12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005d16:	2300      	movs	r3, #0
 8005d18:	e000      	b.n	8005d1c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8005d1a:	2302      	movs	r3, #2
  }
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3718      	adds	r7, #24
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}
 8005d24:	80002000 	.word	0x80002000
 8005d28:	fe00e800 	.word	0xfe00e800

08005d2c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b088      	sub	sp, #32
 8005d30:	af02      	add	r7, sp, #8
 8005d32:	60f8      	str	r0, [r7, #12]
 8005d34:	607a      	str	r2, [r7, #4]
 8005d36:	461a      	mov	r2, r3
 8005d38:	460b      	mov	r3, r1
 8005d3a:	817b      	strh	r3, [r7, #10]
 8005d3c:	4613      	mov	r3, r2
 8005d3e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d46:	b2db      	uxtb	r3, r3
 8005d48:	2b20      	cmp	r3, #32
 8005d4a:	f040 80db 	bne.w	8005f04 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d101      	bne.n	8005d5c <HAL_I2C_Master_Receive+0x30>
 8005d58:	2302      	movs	r3, #2
 8005d5a:	e0d4      	b.n	8005f06 <HAL_I2C_Master_Receive+0x1da>
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005d64:	f7fc fdc0 	bl	80028e8 <HAL_GetTick>
 8005d68:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	9300      	str	r3, [sp, #0]
 8005d6e:	2319      	movs	r3, #25
 8005d70:	2201      	movs	r2, #1
 8005d72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005d76:	68f8      	ldr	r0, [r7, #12]
 8005d78:	f000 fa59 	bl	800622e <I2C_WaitOnFlagUntilTimeout>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d001      	beq.n	8005d86 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	e0bf      	b.n	8005f06 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2222      	movs	r2, #34	; 0x22
 8005d8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2210      	movs	r2, #16
 8005d92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	893a      	ldrh	r2, [r7, #8]
 8005da6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2200      	movs	r2, #0
 8005dac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	2bff      	cmp	r3, #255	; 0xff
 8005db6:	d90e      	bls.n	8005dd6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	22ff      	movs	r2, #255	; 0xff
 8005dbc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dc2:	b2da      	uxtb	r2, r3
 8005dc4:	8979      	ldrh	r1, [r7, #10]
 8005dc6:	4b52      	ldr	r3, [pc, #328]	; (8005f10 <HAL_I2C_Master_Receive+0x1e4>)
 8005dc8:	9300      	str	r3, [sp, #0]
 8005dca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005dce:	68f8      	ldr	r0, [r7, #12]
 8005dd0:	f000 fc44 	bl	800665c <I2C_TransferConfig>
 8005dd4:	e06d      	b.n	8005eb2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dda:	b29a      	uxth	r2, r3
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005de4:	b2da      	uxtb	r2, r3
 8005de6:	8979      	ldrh	r1, [r7, #10]
 8005de8:	4b49      	ldr	r3, [pc, #292]	; (8005f10 <HAL_I2C_Master_Receive+0x1e4>)
 8005dea:	9300      	str	r3, [sp, #0]
 8005dec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005df0:	68f8      	ldr	r0, [r7, #12]
 8005df2:	f000 fc33 	bl	800665c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8005df6:	e05c      	b.n	8005eb2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005df8:	697a      	ldr	r2, [r7, #20]
 8005dfa:	6a39      	ldr	r1, [r7, #32]
 8005dfc:	68f8      	ldr	r0, [r7, #12]
 8005dfe:	f000 fad3 	bl	80063a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005e02:	4603      	mov	r3, r0
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d001      	beq.n	8005e0c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	e07c      	b.n	8005f06 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e16:	b2d2      	uxtb	r2, r2
 8005e18:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e1e:	1c5a      	adds	r2, r3, #1
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e28:	3b01      	subs	r3, #1
 8005e2a:	b29a      	uxth	r2, r3
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	3b01      	subs	r3, #1
 8005e38:	b29a      	uxth	r2, r3
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d034      	beq.n	8005eb2 <HAL_I2C_Master_Receive+0x186>
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d130      	bne.n	8005eb2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	9300      	str	r3, [sp, #0]
 8005e54:	6a3b      	ldr	r3, [r7, #32]
 8005e56:	2200      	movs	r2, #0
 8005e58:	2180      	movs	r1, #128	; 0x80
 8005e5a:	68f8      	ldr	r0, [r7, #12]
 8005e5c:	f000 f9e7 	bl	800622e <I2C_WaitOnFlagUntilTimeout>
 8005e60:	4603      	mov	r3, r0
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d001      	beq.n	8005e6a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8005e66:	2301      	movs	r3, #1
 8005e68:	e04d      	b.n	8005f06 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	2bff      	cmp	r3, #255	; 0xff
 8005e72:	d90e      	bls.n	8005e92 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	22ff      	movs	r2, #255	; 0xff
 8005e78:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e7e:	b2da      	uxtb	r2, r3
 8005e80:	8979      	ldrh	r1, [r7, #10]
 8005e82:	2300      	movs	r3, #0
 8005e84:	9300      	str	r3, [sp, #0]
 8005e86:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005e8a:	68f8      	ldr	r0, [r7, #12]
 8005e8c:	f000 fbe6 	bl	800665c <I2C_TransferConfig>
 8005e90:	e00f      	b.n	8005eb2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e96:	b29a      	uxth	r2, r3
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ea0:	b2da      	uxtb	r2, r3
 8005ea2:	8979      	ldrh	r1, [r7, #10]
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	9300      	str	r3, [sp, #0]
 8005ea8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005eac:	68f8      	ldr	r0, [r7, #12]
 8005eae:	f000 fbd5 	bl	800665c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d19d      	bne.n	8005df8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ebc:	697a      	ldr	r2, [r7, #20]
 8005ebe:	6a39      	ldr	r1, [r7, #32]
 8005ec0:	68f8      	ldr	r0, [r7, #12]
 8005ec2:	f000 fa34 	bl	800632e <I2C_WaitOnSTOPFlagUntilTimeout>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d001      	beq.n	8005ed0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	e01a      	b.n	8005f06 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	2220      	movs	r2, #32
 8005ed6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	6859      	ldr	r1, [r3, #4]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	4b0c      	ldr	r3, [pc, #48]	; (8005f14 <HAL_I2C_Master_Receive+0x1e8>)
 8005ee4:	400b      	ands	r3, r1
 8005ee6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2220      	movs	r2, #32
 8005eec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2200      	movs	r2, #0
 8005efc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005f00:	2300      	movs	r3, #0
 8005f02:	e000      	b.n	8005f06 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005f04:	2302      	movs	r3, #2
  }
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3718      	adds	r7, #24
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}
 8005f0e:	bf00      	nop
 8005f10:	80002400 	.word	0x80002400
 8005f14:	fe00e800 	.word	0xfe00e800

08005f18 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b088      	sub	sp, #32
 8005f1c:	af02      	add	r7, sp, #8
 8005f1e:	60f8      	str	r0, [r7, #12]
 8005f20:	4608      	mov	r0, r1
 8005f22:	4611      	mov	r1, r2
 8005f24:	461a      	mov	r2, r3
 8005f26:	4603      	mov	r3, r0
 8005f28:	817b      	strh	r3, [r7, #10]
 8005f2a:	460b      	mov	r3, r1
 8005f2c:	813b      	strh	r3, [r7, #8]
 8005f2e:	4613      	mov	r3, r2
 8005f30:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	2b20      	cmp	r3, #32
 8005f3c:	f040 80f9 	bne.w	8006132 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f40:	6a3b      	ldr	r3, [r7, #32]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d002      	beq.n	8005f4c <HAL_I2C_Mem_Write+0x34>
 8005f46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d105      	bne.n	8005f58 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f52:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	e0ed      	b.n	8006134 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d101      	bne.n	8005f66 <HAL_I2C_Mem_Write+0x4e>
 8005f62:	2302      	movs	r3, #2
 8005f64:	e0e6      	b.n	8006134 <HAL_I2C_Mem_Write+0x21c>
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2201      	movs	r2, #1
 8005f6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005f6e:	f7fc fcbb 	bl	80028e8 <HAL_GetTick>
 8005f72:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	9300      	str	r3, [sp, #0]
 8005f78:	2319      	movs	r3, #25
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005f80:	68f8      	ldr	r0, [r7, #12]
 8005f82:	f000 f954 	bl	800622e <I2C_WaitOnFlagUntilTimeout>
 8005f86:	4603      	mov	r3, r0
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d001      	beq.n	8005f90 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e0d1      	b.n	8006134 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2221      	movs	r2, #33	; 0x21
 8005f94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2240      	movs	r2, #64	; 0x40
 8005f9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	6a3a      	ldr	r2, [r7, #32]
 8005faa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005fb0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005fb8:	88f8      	ldrh	r0, [r7, #6]
 8005fba:	893a      	ldrh	r2, [r7, #8]
 8005fbc:	8979      	ldrh	r1, [r7, #10]
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	9301      	str	r3, [sp, #4]
 8005fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc4:	9300      	str	r3, [sp, #0]
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	68f8      	ldr	r0, [r7, #12]
 8005fca:	f000 f8b9 	bl	8006140 <I2C_RequestMemoryWrite>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d005      	beq.n	8005fe0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	e0a9      	b.n	8006134 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	2bff      	cmp	r3, #255	; 0xff
 8005fe8:	d90e      	bls.n	8006008 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	22ff      	movs	r2, #255	; 0xff
 8005fee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ff4:	b2da      	uxtb	r2, r3
 8005ff6:	8979      	ldrh	r1, [r7, #10]
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	9300      	str	r3, [sp, #0]
 8005ffc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006000:	68f8      	ldr	r0, [r7, #12]
 8006002:	f000 fb2b 	bl	800665c <I2C_TransferConfig>
 8006006:	e00f      	b.n	8006028 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800600c:	b29a      	uxth	r2, r3
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006016:	b2da      	uxtb	r2, r3
 8006018:	8979      	ldrh	r1, [r7, #10]
 800601a:	2300      	movs	r3, #0
 800601c:	9300      	str	r3, [sp, #0]
 800601e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006022:	68f8      	ldr	r0, [r7, #12]
 8006024:	f000 fb1a 	bl	800665c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006028:	697a      	ldr	r2, [r7, #20]
 800602a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800602c:	68f8      	ldr	r0, [r7, #12]
 800602e:	f000 f93e 	bl	80062ae <I2C_WaitOnTXISFlagUntilTimeout>
 8006032:	4603      	mov	r3, r0
 8006034:	2b00      	cmp	r3, #0
 8006036:	d001      	beq.n	800603c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006038:	2301      	movs	r3, #1
 800603a:	e07b      	b.n	8006134 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006040:	781a      	ldrb	r2, [r3, #0]
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800604c:	1c5a      	adds	r2, r3, #1
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006056:	b29b      	uxth	r3, r3
 8006058:	3b01      	subs	r3, #1
 800605a:	b29a      	uxth	r2, r3
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006064:	3b01      	subs	r3, #1
 8006066:	b29a      	uxth	r2, r3
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006070:	b29b      	uxth	r3, r3
 8006072:	2b00      	cmp	r3, #0
 8006074:	d034      	beq.n	80060e0 <HAL_I2C_Mem_Write+0x1c8>
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800607a:	2b00      	cmp	r3, #0
 800607c:	d130      	bne.n	80060e0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	9300      	str	r3, [sp, #0]
 8006082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006084:	2200      	movs	r2, #0
 8006086:	2180      	movs	r1, #128	; 0x80
 8006088:	68f8      	ldr	r0, [r7, #12]
 800608a:	f000 f8d0 	bl	800622e <I2C_WaitOnFlagUntilTimeout>
 800608e:	4603      	mov	r3, r0
 8006090:	2b00      	cmp	r3, #0
 8006092:	d001      	beq.n	8006098 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006094:	2301      	movs	r3, #1
 8006096:	e04d      	b.n	8006134 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800609c:	b29b      	uxth	r3, r3
 800609e:	2bff      	cmp	r3, #255	; 0xff
 80060a0:	d90e      	bls.n	80060c0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	22ff      	movs	r2, #255	; 0xff
 80060a6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060ac:	b2da      	uxtb	r2, r3
 80060ae:	8979      	ldrh	r1, [r7, #10]
 80060b0:	2300      	movs	r3, #0
 80060b2:	9300      	str	r3, [sp, #0]
 80060b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80060b8:	68f8      	ldr	r0, [r7, #12]
 80060ba:	f000 facf 	bl	800665c <I2C_TransferConfig>
 80060be:	e00f      	b.n	80060e0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060c4:	b29a      	uxth	r2, r3
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060ce:	b2da      	uxtb	r2, r3
 80060d0:	8979      	ldrh	r1, [r7, #10]
 80060d2:	2300      	movs	r3, #0
 80060d4:	9300      	str	r3, [sp, #0]
 80060d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80060da:	68f8      	ldr	r0, [r7, #12]
 80060dc:	f000 fabe 	bl	800665c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d19e      	bne.n	8006028 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060ea:	697a      	ldr	r2, [r7, #20]
 80060ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80060ee:	68f8      	ldr	r0, [r7, #12]
 80060f0:	f000 f91d 	bl	800632e <I2C_WaitOnSTOPFlagUntilTimeout>
 80060f4:	4603      	mov	r3, r0
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d001      	beq.n	80060fe <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80060fa:	2301      	movs	r3, #1
 80060fc:	e01a      	b.n	8006134 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	2220      	movs	r2, #32
 8006104:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	6859      	ldr	r1, [r3, #4]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	4b0a      	ldr	r3, [pc, #40]	; (800613c <HAL_I2C_Mem_Write+0x224>)
 8006112:	400b      	ands	r3, r1
 8006114:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2220      	movs	r2, #32
 800611a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2200      	movs	r2, #0
 8006122:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2200      	movs	r2, #0
 800612a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800612e:	2300      	movs	r3, #0
 8006130:	e000      	b.n	8006134 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006132:	2302      	movs	r3, #2
  }
}
 8006134:	4618      	mov	r0, r3
 8006136:	3718      	adds	r7, #24
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}
 800613c:	fe00e800 	.word	0xfe00e800

08006140 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b086      	sub	sp, #24
 8006144:	af02      	add	r7, sp, #8
 8006146:	60f8      	str	r0, [r7, #12]
 8006148:	4608      	mov	r0, r1
 800614a:	4611      	mov	r1, r2
 800614c:	461a      	mov	r2, r3
 800614e:	4603      	mov	r3, r0
 8006150:	817b      	strh	r3, [r7, #10]
 8006152:	460b      	mov	r3, r1
 8006154:	813b      	strh	r3, [r7, #8]
 8006156:	4613      	mov	r3, r2
 8006158:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800615a:	88fb      	ldrh	r3, [r7, #6]
 800615c:	b2da      	uxtb	r2, r3
 800615e:	8979      	ldrh	r1, [r7, #10]
 8006160:	4b20      	ldr	r3, [pc, #128]	; (80061e4 <I2C_RequestMemoryWrite+0xa4>)
 8006162:	9300      	str	r3, [sp, #0]
 8006164:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006168:	68f8      	ldr	r0, [r7, #12]
 800616a:	f000 fa77 	bl	800665c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800616e:	69fa      	ldr	r2, [r7, #28]
 8006170:	69b9      	ldr	r1, [r7, #24]
 8006172:	68f8      	ldr	r0, [r7, #12]
 8006174:	f000 f89b 	bl	80062ae <I2C_WaitOnTXISFlagUntilTimeout>
 8006178:	4603      	mov	r3, r0
 800617a:	2b00      	cmp	r3, #0
 800617c:	d001      	beq.n	8006182 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	e02c      	b.n	80061dc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006182:	88fb      	ldrh	r3, [r7, #6]
 8006184:	2b01      	cmp	r3, #1
 8006186:	d105      	bne.n	8006194 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006188:	893b      	ldrh	r3, [r7, #8]
 800618a:	b2da      	uxtb	r2, r3
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	629a      	str	r2, [r3, #40]	; 0x28
 8006192:	e015      	b.n	80061c0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006194:	893b      	ldrh	r3, [r7, #8]
 8006196:	0a1b      	lsrs	r3, r3, #8
 8006198:	b29b      	uxth	r3, r3
 800619a:	b2da      	uxtb	r2, r3
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061a2:	69fa      	ldr	r2, [r7, #28]
 80061a4:	69b9      	ldr	r1, [r7, #24]
 80061a6:	68f8      	ldr	r0, [r7, #12]
 80061a8:	f000 f881 	bl	80062ae <I2C_WaitOnTXISFlagUntilTimeout>
 80061ac:	4603      	mov	r3, r0
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d001      	beq.n	80061b6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	e012      	b.n	80061dc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80061b6:	893b      	ldrh	r3, [r7, #8]
 80061b8:	b2da      	uxtb	r2, r3
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80061c0:	69fb      	ldr	r3, [r7, #28]
 80061c2:	9300      	str	r3, [sp, #0]
 80061c4:	69bb      	ldr	r3, [r7, #24]
 80061c6:	2200      	movs	r2, #0
 80061c8:	2180      	movs	r1, #128	; 0x80
 80061ca:	68f8      	ldr	r0, [r7, #12]
 80061cc:	f000 f82f 	bl	800622e <I2C_WaitOnFlagUntilTimeout>
 80061d0:	4603      	mov	r3, r0
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d001      	beq.n	80061da <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	e000      	b.n	80061dc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80061da:	2300      	movs	r3, #0
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3710      	adds	r7, #16
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}
 80061e4:	80002000 	.word	0x80002000

080061e8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b083      	sub	sp, #12
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	699b      	ldr	r3, [r3, #24]
 80061f6:	f003 0302 	and.w	r3, r3, #2
 80061fa:	2b02      	cmp	r3, #2
 80061fc:	d103      	bne.n	8006206 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	2200      	movs	r2, #0
 8006204:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	699b      	ldr	r3, [r3, #24]
 800620c:	f003 0301 	and.w	r3, r3, #1
 8006210:	2b01      	cmp	r3, #1
 8006212:	d007      	beq.n	8006224 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	699a      	ldr	r2, [r3, #24]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f042 0201 	orr.w	r2, r2, #1
 8006222:	619a      	str	r2, [r3, #24]
  }
}
 8006224:	bf00      	nop
 8006226:	370c      	adds	r7, #12
 8006228:	46bd      	mov	sp, r7
 800622a:	bc80      	pop	{r7}
 800622c:	4770      	bx	lr

0800622e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800622e:	b580      	push	{r7, lr}
 8006230:	b084      	sub	sp, #16
 8006232:	af00      	add	r7, sp, #0
 8006234:	60f8      	str	r0, [r7, #12]
 8006236:	60b9      	str	r1, [r7, #8]
 8006238:	603b      	str	r3, [r7, #0]
 800623a:	4613      	mov	r3, r2
 800623c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800623e:	e022      	b.n	8006286 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006246:	d01e      	beq.n	8006286 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006248:	f7fc fb4e 	bl	80028e8 <HAL_GetTick>
 800624c:	4602      	mov	r2, r0
 800624e:	69bb      	ldr	r3, [r7, #24]
 8006250:	1ad3      	subs	r3, r2, r3
 8006252:	683a      	ldr	r2, [r7, #0]
 8006254:	429a      	cmp	r2, r3
 8006256:	d302      	bcc.n	800625e <I2C_WaitOnFlagUntilTimeout+0x30>
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d113      	bne.n	8006286 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006262:	f043 0220 	orr.w	r2, r3, #32
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2220      	movs	r2, #32
 800626e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2200      	movs	r2, #0
 8006276:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2200      	movs	r2, #0
 800627e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	e00f      	b.n	80062a6 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	699a      	ldr	r2, [r3, #24]
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	4013      	ands	r3, r2
 8006290:	68ba      	ldr	r2, [r7, #8]
 8006292:	429a      	cmp	r2, r3
 8006294:	bf0c      	ite	eq
 8006296:	2301      	moveq	r3, #1
 8006298:	2300      	movne	r3, #0
 800629a:	b2db      	uxtb	r3, r3
 800629c:	461a      	mov	r2, r3
 800629e:	79fb      	ldrb	r3, [r7, #7]
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d0cd      	beq.n	8006240 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80062a4:	2300      	movs	r3, #0
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3710      	adds	r7, #16
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}

080062ae <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80062ae:	b580      	push	{r7, lr}
 80062b0:	b084      	sub	sp, #16
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	60f8      	str	r0, [r7, #12]
 80062b6:	60b9      	str	r1, [r7, #8]
 80062b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80062ba:	e02c      	b.n	8006316 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	68b9      	ldr	r1, [r7, #8]
 80062c0:	68f8      	ldr	r0, [r7, #12]
 80062c2:	f000 f8eb 	bl	800649c <I2C_IsErrorOccurred>
 80062c6:	4603      	mov	r3, r0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d001      	beq.n	80062d0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80062cc:	2301      	movs	r3, #1
 80062ce:	e02a      	b.n	8006326 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062d6:	d01e      	beq.n	8006316 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062d8:	f7fc fb06 	bl	80028e8 <HAL_GetTick>
 80062dc:	4602      	mov	r2, r0
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	1ad3      	subs	r3, r2, r3
 80062e2:	68ba      	ldr	r2, [r7, #8]
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d302      	bcc.n	80062ee <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d113      	bne.n	8006316 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062f2:	f043 0220 	orr.w	r2, r3, #32
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2220      	movs	r2, #32
 80062fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2200      	movs	r2, #0
 8006306:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2200      	movs	r2, #0
 800630e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	e007      	b.n	8006326 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	699b      	ldr	r3, [r3, #24]
 800631c:	f003 0302 	and.w	r3, r3, #2
 8006320:	2b02      	cmp	r3, #2
 8006322:	d1cb      	bne.n	80062bc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006324:	2300      	movs	r3, #0
}
 8006326:	4618      	mov	r0, r3
 8006328:	3710      	adds	r7, #16
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}

0800632e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800632e:	b580      	push	{r7, lr}
 8006330:	b084      	sub	sp, #16
 8006332:	af00      	add	r7, sp, #0
 8006334:	60f8      	str	r0, [r7, #12]
 8006336:	60b9      	str	r1, [r7, #8]
 8006338:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800633a:	e028      	b.n	800638e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	68b9      	ldr	r1, [r7, #8]
 8006340:	68f8      	ldr	r0, [r7, #12]
 8006342:	f000 f8ab 	bl	800649c <I2C_IsErrorOccurred>
 8006346:	4603      	mov	r3, r0
 8006348:	2b00      	cmp	r3, #0
 800634a:	d001      	beq.n	8006350 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	e026      	b.n	800639e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006350:	f7fc faca 	bl	80028e8 <HAL_GetTick>
 8006354:	4602      	mov	r2, r0
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	1ad3      	subs	r3, r2, r3
 800635a:	68ba      	ldr	r2, [r7, #8]
 800635c:	429a      	cmp	r2, r3
 800635e:	d302      	bcc.n	8006366 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d113      	bne.n	800638e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800636a:	f043 0220 	orr.w	r2, r3, #32
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2220      	movs	r2, #32
 8006376:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2200      	movs	r2, #0
 800637e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2200      	movs	r2, #0
 8006386:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	e007      	b.n	800639e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	699b      	ldr	r3, [r3, #24]
 8006394:	f003 0320 	and.w	r3, r3, #32
 8006398:	2b20      	cmp	r3, #32
 800639a:	d1cf      	bne.n	800633c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800639c:	2300      	movs	r3, #0
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3710      	adds	r7, #16
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}
	...

080063a8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b084      	sub	sp, #16
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	60f8      	str	r0, [r7, #12]
 80063b0:	60b9      	str	r1, [r7, #8]
 80063b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80063b4:	e064      	b.n	8006480 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	68b9      	ldr	r1, [r7, #8]
 80063ba:	68f8      	ldr	r0, [r7, #12]
 80063bc:	f000 f86e 	bl	800649c <I2C_IsErrorOccurred>
 80063c0:	4603      	mov	r3, r0
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d001      	beq.n	80063ca <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	e062      	b.n	8006490 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	699b      	ldr	r3, [r3, #24]
 80063d0:	f003 0320 	and.w	r3, r3, #32
 80063d4:	2b20      	cmp	r3, #32
 80063d6:	d138      	bne.n	800644a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	699b      	ldr	r3, [r3, #24]
 80063de:	f003 0304 	and.w	r3, r3, #4
 80063e2:	2b04      	cmp	r3, #4
 80063e4:	d105      	bne.n	80063f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d001      	beq.n	80063f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80063ee:	2300      	movs	r3, #0
 80063f0:	e04e      	b.n	8006490 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	699b      	ldr	r3, [r3, #24]
 80063f8:	f003 0310 	and.w	r3, r3, #16
 80063fc:	2b10      	cmp	r3, #16
 80063fe:	d107      	bne.n	8006410 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	2210      	movs	r2, #16
 8006406:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2204      	movs	r2, #4
 800640c:	645a      	str	r2, [r3, #68]	; 0x44
 800640e:	e002      	b.n	8006416 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2200      	movs	r2, #0
 8006414:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	2220      	movs	r2, #32
 800641c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	6859      	ldr	r1, [r3, #4]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	4b1b      	ldr	r3, [pc, #108]	; (8006498 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800642a:	400b      	ands	r3, r1
 800642c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2220      	movs	r2, #32
 8006432:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2200      	movs	r2, #0
 800643a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2200      	movs	r2, #0
 8006442:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	e022      	b.n	8006490 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800644a:	f7fc fa4d 	bl	80028e8 <HAL_GetTick>
 800644e:	4602      	mov	r2, r0
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	1ad3      	subs	r3, r2, r3
 8006454:	68ba      	ldr	r2, [r7, #8]
 8006456:	429a      	cmp	r2, r3
 8006458:	d302      	bcc.n	8006460 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d10f      	bne.n	8006480 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006464:	f043 0220 	orr.w	r2, r3, #32
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2220      	movs	r2, #32
 8006470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2200      	movs	r2, #0
 8006478:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	e007      	b.n	8006490 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	699b      	ldr	r3, [r3, #24]
 8006486:	f003 0304 	and.w	r3, r3, #4
 800648a:	2b04      	cmp	r3, #4
 800648c:	d193      	bne.n	80063b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800648e:	2300      	movs	r3, #0
}
 8006490:	4618      	mov	r0, r3
 8006492:	3710      	adds	r7, #16
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}
 8006498:	fe00e800 	.word	0xfe00e800

0800649c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b08a      	sub	sp, #40	; 0x28
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	60f8      	str	r0, [r7, #12]
 80064a4:	60b9      	str	r1, [r7, #8]
 80064a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064a8:	2300      	movs	r3, #0
 80064aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	699b      	ldr	r3, [r3, #24]
 80064b4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80064b6:	2300      	movs	r3, #0
 80064b8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80064be:	69bb      	ldr	r3, [r7, #24]
 80064c0:	f003 0310 	and.w	r3, r3, #16
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d068      	beq.n	800659a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	2210      	movs	r2, #16
 80064ce:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80064d0:	e049      	b.n	8006566 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064d8:	d045      	beq.n	8006566 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80064da:	f7fc fa05 	bl	80028e8 <HAL_GetTick>
 80064de:	4602      	mov	r2, r0
 80064e0:	69fb      	ldr	r3, [r7, #28]
 80064e2:	1ad3      	subs	r3, r2, r3
 80064e4:	68ba      	ldr	r2, [r7, #8]
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d302      	bcc.n	80064f0 <I2C_IsErrorOccurred+0x54>
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d13a      	bne.n	8006566 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064fa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006502:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	699b      	ldr	r3, [r3, #24]
 800650a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800650e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006512:	d121      	bne.n	8006558 <I2C_IsErrorOccurred+0xbc>
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800651a:	d01d      	beq.n	8006558 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800651c:	7cfb      	ldrb	r3, [r7, #19]
 800651e:	2b20      	cmp	r3, #32
 8006520:	d01a      	beq.n	8006558 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	685a      	ldr	r2, [r3, #4]
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006530:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006532:	f7fc f9d9 	bl	80028e8 <HAL_GetTick>
 8006536:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006538:	e00e      	b.n	8006558 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800653a:	f7fc f9d5 	bl	80028e8 <HAL_GetTick>
 800653e:	4602      	mov	r2, r0
 8006540:	69fb      	ldr	r3, [r7, #28]
 8006542:	1ad3      	subs	r3, r2, r3
 8006544:	2b19      	cmp	r3, #25
 8006546:	d907      	bls.n	8006558 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8006548:	6a3b      	ldr	r3, [r7, #32]
 800654a:	f043 0320 	orr.w	r3, r3, #32
 800654e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006550:	2301      	movs	r3, #1
 8006552:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8006556:	e006      	b.n	8006566 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	699b      	ldr	r3, [r3, #24]
 800655e:	f003 0320 	and.w	r3, r3, #32
 8006562:	2b20      	cmp	r3, #32
 8006564:	d1e9      	bne.n	800653a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	699b      	ldr	r3, [r3, #24]
 800656c:	f003 0320 	and.w	r3, r3, #32
 8006570:	2b20      	cmp	r3, #32
 8006572:	d003      	beq.n	800657c <I2C_IsErrorOccurred+0xe0>
 8006574:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006578:	2b00      	cmp	r3, #0
 800657a:	d0aa      	beq.n	80064d2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800657c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006580:	2b00      	cmp	r3, #0
 8006582:	d103      	bne.n	800658c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	2220      	movs	r2, #32
 800658a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800658c:	6a3b      	ldr	r3, [r7, #32]
 800658e:	f043 0304 	orr.w	r3, r3, #4
 8006592:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006594:	2301      	movs	r3, #1
 8006596:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	699b      	ldr	r3, [r3, #24]
 80065a0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80065a2:	69bb      	ldr	r3, [r7, #24]
 80065a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d00b      	beq.n	80065c4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80065ac:	6a3b      	ldr	r3, [r7, #32]
 80065ae:	f043 0301 	orr.w	r3, r3, #1
 80065b2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80065bc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80065be:	2301      	movs	r3, #1
 80065c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80065c4:	69bb      	ldr	r3, [r7, #24]
 80065c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d00b      	beq.n	80065e6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80065ce:	6a3b      	ldr	r3, [r7, #32]
 80065d0:	f043 0308 	orr.w	r3, r3, #8
 80065d4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80065de:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80065e0:	2301      	movs	r3, #1
 80065e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d00b      	beq.n	8006608 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80065f0:	6a3b      	ldr	r3, [r7, #32]
 80065f2:	f043 0302 	orr.w	r3, r3, #2
 80065f6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006600:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006608:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800660c:	2b00      	cmp	r3, #0
 800660e:	d01c      	beq.n	800664a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006610:	68f8      	ldr	r0, [r7, #12]
 8006612:	f7ff fde9 	bl	80061e8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	6859      	ldr	r1, [r3, #4]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	4b0d      	ldr	r3, [pc, #52]	; (8006658 <I2C_IsErrorOccurred+0x1bc>)
 8006622:	400b      	ands	r3, r1
 8006624:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800662a:	6a3b      	ldr	r3, [r7, #32]
 800662c:	431a      	orrs	r2, r3
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2220      	movs	r2, #32
 8006636:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2200      	movs	r2, #0
 800663e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2200      	movs	r2, #0
 8006646:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800664a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800664e:	4618      	mov	r0, r3
 8006650:	3728      	adds	r7, #40	; 0x28
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}
 8006656:	bf00      	nop
 8006658:	fe00e800 	.word	0xfe00e800

0800665c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800665c:	b480      	push	{r7}
 800665e:	b087      	sub	sp, #28
 8006660:	af00      	add	r7, sp, #0
 8006662:	60f8      	str	r0, [r7, #12]
 8006664:	607b      	str	r3, [r7, #4]
 8006666:	460b      	mov	r3, r1
 8006668:	817b      	strh	r3, [r7, #10]
 800666a:	4613      	mov	r3, r2
 800666c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800666e:	897b      	ldrh	r3, [r7, #10]
 8006670:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006674:	7a7b      	ldrb	r3, [r7, #9]
 8006676:	041b      	lsls	r3, r3, #16
 8006678:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800667c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006682:	6a3b      	ldr	r3, [r7, #32]
 8006684:	4313      	orrs	r3, r2
 8006686:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800668a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	685a      	ldr	r2, [r3, #4]
 8006692:	6a3b      	ldr	r3, [r7, #32]
 8006694:	0d5b      	lsrs	r3, r3, #21
 8006696:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800669a:	4b07      	ldr	r3, [pc, #28]	; (80066b8 <I2C_TransferConfig+0x5c>)
 800669c:	430b      	orrs	r3, r1
 800669e:	43db      	mvns	r3, r3
 80066a0:	ea02 0103 	and.w	r1, r2, r3
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	697a      	ldr	r2, [r7, #20]
 80066aa:	430a      	orrs	r2, r1
 80066ac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80066ae:	bf00      	nop
 80066b0:	371c      	adds	r7, #28
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bc80      	pop	{r7}
 80066b6:	4770      	bx	lr
 80066b8:	03ff63ff 	.word	0x03ff63ff

080066bc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80066bc:	b480      	push	{r7}
 80066be:	b083      	sub	sp, #12
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	2b20      	cmp	r3, #32
 80066d0:	d138      	bne.n	8006744 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d101      	bne.n	80066e0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80066dc:	2302      	movs	r3, #2
 80066de:	e032      	b.n	8006746 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2201      	movs	r2, #1
 80066e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2224      	movs	r2, #36	; 0x24
 80066ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f022 0201 	bic.w	r2, r2, #1
 80066fe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	681a      	ldr	r2, [r3, #0]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800670e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	6819      	ldr	r1, [r3, #0]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	683a      	ldr	r2, [r7, #0]
 800671c:	430a      	orrs	r2, r1
 800671e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	681a      	ldr	r2, [r3, #0]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f042 0201 	orr.w	r2, r2, #1
 800672e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2220      	movs	r2, #32
 8006734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2200      	movs	r2, #0
 800673c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006740:	2300      	movs	r3, #0
 8006742:	e000      	b.n	8006746 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006744:	2302      	movs	r3, #2
  }
}
 8006746:	4618      	mov	r0, r3
 8006748:	370c      	adds	r7, #12
 800674a:	46bd      	mov	sp, r7
 800674c:	bc80      	pop	{r7}
 800674e:	4770      	bx	lr

08006750 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006750:	b480      	push	{r7}
 8006752:	b085      	sub	sp, #20
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006760:	b2db      	uxtb	r3, r3
 8006762:	2b20      	cmp	r3, #32
 8006764:	d139      	bne.n	80067da <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800676c:	2b01      	cmp	r3, #1
 800676e:	d101      	bne.n	8006774 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006770:	2302      	movs	r3, #2
 8006772:	e033      	b.n	80067dc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2201      	movs	r2, #1
 8006778:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2224      	movs	r2, #36	; 0x24
 8006780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f022 0201 	bic.w	r2, r2, #1
 8006792:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80067a2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	021b      	lsls	r3, r3, #8
 80067a8:	68fa      	ldr	r2, [r7, #12]
 80067aa:	4313      	orrs	r3, r2
 80067ac:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	68fa      	ldr	r2, [r7, #12]
 80067b4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f042 0201 	orr.w	r2, r2, #1
 80067c4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2220      	movs	r2, #32
 80067ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80067d6:	2300      	movs	r3, #0
 80067d8:	e000      	b.n	80067dc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80067da:	2302      	movs	r3, #2
  }
}
 80067dc:	4618      	mov	r0, r3
 80067de:	3714      	adds	r7, #20
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bc80      	pop	{r7}
 80067e4:	4770      	bx	lr
	...

080067e8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80067e8:	b480      	push	{r7}
 80067ea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80067ec:	4b04      	ldr	r3, [pc, #16]	; (8006800 <HAL_PWR_EnableBkUpAccess+0x18>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a03      	ldr	r2, [pc, #12]	; (8006800 <HAL_PWR_EnableBkUpAccess+0x18>)
 80067f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067f6:	6013      	str	r3, [r2, #0]
}
 80067f8:	bf00      	nop
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bc80      	pop	{r7}
 80067fe:	4770      	bx	lr
 8006800:	58000400 	.word	0x58000400

08006804 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b082      	sub	sp, #8
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	460b      	mov	r3, r1
 800680e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d10c      	bne.n	8006830 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8006816:	4b13      	ldr	r3, [pc, #76]	; (8006864 <HAL_PWR_EnterSLEEPMode+0x60>)
 8006818:	695b      	ldr	r3, [r3, #20]
 800681a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800681e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006822:	d10d      	bne.n	8006840 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8006824:	f000 f83c 	bl	80068a0 <HAL_PWREx_DisableLowPowerRunMode>
 8006828:	4603      	mov	r3, r0
 800682a:	2b00      	cmp	r3, #0
 800682c:	d008      	beq.n	8006840 <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 800682e:	e015      	b.n	800685c <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8006830:	4b0c      	ldr	r3, [pc, #48]	; (8006864 <HAL_PWR_EnterSLEEPMode+0x60>)
 8006832:	695b      	ldr	r3, [r3, #20]
 8006834:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006838:	2b00      	cmp	r3, #0
 800683a:	d101      	bne.n	8006840 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 800683c:	f000 f822 	bl	8006884 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8006840:	4b09      	ldr	r3, [pc, #36]	; (8006868 <HAL_PWR_EnterSLEEPMode+0x64>)
 8006842:	691b      	ldr	r3, [r3, #16]
 8006844:	4a08      	ldr	r2, [pc, #32]	; (8006868 <HAL_PWR_EnterSLEEPMode+0x64>)
 8006846:	f023 0304 	bic.w	r3, r3, #4
 800684a:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800684c:	78fb      	ldrb	r3, [r7, #3]
 800684e:	2b01      	cmp	r3, #1
 8006850:	d101      	bne.n	8006856 <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8006852:	bf30      	wfi
 8006854:	e002      	b.n	800685c <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8006856:	bf40      	sev
    __WFE();
 8006858:	bf20      	wfe
    __WFE();
 800685a:	bf20      	wfe
  }
}
 800685c:	3708      	adds	r7, #8
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}
 8006862:	bf00      	nop
 8006864:	58000400 	.word	0x58000400
 8006868:	e000ed00 	.word	0xe000ed00

0800686c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800686c:	b480      	push	{r7}
 800686e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8006870:	4b03      	ldr	r3, [pc, #12]	; (8006880 <HAL_PWREx_GetVoltageRange+0x14>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8006878:	4618      	mov	r0, r3
 800687a:	46bd      	mov	sp, r7
 800687c:	bc80      	pop	{r7}
 800687e:	4770      	bx	lr
 8006880:	58000400 	.word	0x58000400

08006884 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8006884:	b480      	push	{r7}
 8006886:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8006888:	4b04      	ldr	r3, [pc, #16]	; (800689c <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a03      	ldr	r2, [pc, #12]	; (800689c <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 800688e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006892:	6013      	str	r3, [r2, #0]
}
 8006894:	bf00      	nop
 8006896:	46bd      	mov	sp, r7
 8006898:	bc80      	pop	{r7}
 800689a:	4770      	bx	lr
 800689c:	58000400 	.word	0x58000400

080068a0 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b083      	sub	sp, #12
 80068a4:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 80068a6:	4b16      	ldr	r3, [pc, #88]	; (8006900 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a15      	ldr	r2, [pc, #84]	; (8006900 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80068ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068b0:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 80068b2:	4b14      	ldr	r3, [pc, #80]	; (8006904 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	2232      	movs	r2, #50	; 0x32
 80068b8:	fb02 f303 	mul.w	r3, r2, r3
 80068bc:	4a12      	ldr	r2, [pc, #72]	; (8006908 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 80068be:	fba2 2303 	umull	r2, r3, r2, r3
 80068c2:	0c9b      	lsrs	r3, r3, #18
 80068c4:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80068c6:	e002      	b.n	80068ce <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	3b01      	subs	r3, #1
 80068cc:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80068ce:	4b0c      	ldr	r3, [pc, #48]	; (8006900 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80068d0:	695b      	ldr	r3, [r3, #20]
 80068d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80068d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068da:	d102      	bne.n	80068e2 <HAL_PWREx_DisableLowPowerRunMode+0x42>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d1f2      	bne.n	80068c8 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80068e2:	4b07      	ldr	r3, [pc, #28]	; (8006900 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80068e4:	695b      	ldr	r3, [r3, #20]
 80068e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80068ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068ee:	d101      	bne.n	80068f4 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 80068f0:	2303      	movs	r3, #3
 80068f2:	e000      	b.n	80068f6 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 80068f4:	2300      	movs	r3, #0
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	370c      	adds	r7, #12
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bc80      	pop	{r7}
 80068fe:	4770      	bx	lr
 8006900:	58000400 	.word	0x58000400
 8006904:	20000004 	.word	0x20000004
 8006908:	431bde83 	.word	0x431bde83

0800690c <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 800690c:	b480      	push	{r7}
 800690e:	b083      	sub	sp, #12
 8006910:	af00      	add	r7, sp, #0
 8006912:	4603      	mov	r3, r0
 8006914:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8006916:	4b10      	ldr	r3, [pc, #64]	; (8006958 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f023 0307 	bic.w	r3, r3, #7
 800691e:	4a0e      	ldr	r2, [pc, #56]	; (8006958 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8006920:	f043 0302 	orr.w	r3, r3, #2
 8006924:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8006926:	4b0d      	ldr	r3, [pc, #52]	; (800695c <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8006928:	691b      	ldr	r3, [r3, #16]
 800692a:	4a0c      	ldr	r2, [pc, #48]	; (800695c <HAL_PWREx_EnterSTOP2Mode+0x50>)
 800692c:	f043 0304 	orr.w	r3, r3, #4
 8006930:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8006932:	79fb      	ldrb	r3, [r7, #7]
 8006934:	2b01      	cmp	r3, #1
 8006936:	d101      	bne.n	800693c <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8006938:	bf30      	wfi
 800693a:	e002      	b.n	8006942 <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800693c:	bf40      	sev
    __WFE();
 800693e:	bf20      	wfe
    __WFE();
 8006940:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8006942:	4b06      	ldr	r3, [pc, #24]	; (800695c <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8006944:	691b      	ldr	r3, [r3, #16]
 8006946:	4a05      	ldr	r2, [pc, #20]	; (800695c <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8006948:	f023 0304 	bic.w	r3, r3, #4
 800694c:	6113      	str	r3, [r2, #16]
}
 800694e:	bf00      	nop
 8006950:	370c      	adds	r7, #12
 8006952:	46bd      	mov	sp, r7
 8006954:	bc80      	pop	{r7}
 8006956:	4770      	bx	lr
 8006958:	58000400 	.word	0x58000400
 800695c:	e000ed00 	.word	0xe000ed00

08006960 <LL_PWR_IsEnabledBkUpAccess>:
{
 8006960:	b480      	push	{r7}
 8006962:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8006964:	4b06      	ldr	r3, [pc, #24]	; (8006980 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800696c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006970:	d101      	bne.n	8006976 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8006972:	2301      	movs	r3, #1
 8006974:	e000      	b.n	8006978 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8006976:	2300      	movs	r3, #0
}
 8006978:	4618      	mov	r0, r3
 800697a:	46bd      	mov	sp, r7
 800697c:	bc80      	pop	{r7}
 800697e:	4770      	bx	lr
 8006980:	58000400 	.word	0x58000400

08006984 <LL_RCC_HSE_EnableTcxo>:
{
 8006984:	b480      	push	{r7}
 8006986:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8006988:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006992:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006996:	6013      	str	r3, [r2, #0]
}
 8006998:	bf00      	nop
 800699a:	46bd      	mov	sp, r7
 800699c:	bc80      	pop	{r7}
 800699e:	4770      	bx	lr

080069a0 <LL_RCC_HSE_DisableTcxo>:
{
 80069a0:	b480      	push	{r7}
 80069a2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80069a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80069ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80069b2:	6013      	str	r3, [r2, #0]
}
 80069b4:	bf00      	nop
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bc80      	pop	{r7}
 80069ba:	4770      	bx	lr

080069bc <LL_RCC_HSE_IsEnabledDiv2>:
{
 80069bc:	b480      	push	{r7}
 80069be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80069c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80069ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069ce:	d101      	bne.n	80069d4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80069d0:	2301      	movs	r3, #1
 80069d2:	e000      	b.n	80069d6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80069d4:	2300      	movs	r3, #0
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	46bd      	mov	sp, r7
 80069da:	bc80      	pop	{r7}
 80069dc:	4770      	bx	lr

080069de <LL_RCC_HSE_Enable>:
{
 80069de:	b480      	push	{r7}
 80069e0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80069e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80069ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069f0:	6013      	str	r3, [r2, #0]
}
 80069f2:	bf00      	nop
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bc80      	pop	{r7}
 80069f8:	4770      	bx	lr

080069fa <LL_RCC_HSE_Disable>:
{
 80069fa:	b480      	push	{r7}
 80069fc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80069fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a0c:	6013      	str	r3, [r2, #0]
}
 8006a0e:	bf00      	nop
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bc80      	pop	{r7}
 8006a14:	4770      	bx	lr

08006a16 <LL_RCC_HSE_IsReady>:
{
 8006a16:	b480      	push	{r7}
 8006a18:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8006a1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a28:	d101      	bne.n	8006a2e <LL_RCC_HSE_IsReady+0x18>
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	e000      	b.n	8006a30 <LL_RCC_HSE_IsReady+0x1a>
 8006a2e:	2300      	movs	r3, #0
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bc80      	pop	{r7}
 8006a36:	4770      	bx	lr

08006a38 <LL_RCC_HSI_Enable>:
{
 8006a38:	b480      	push	{r7}
 8006a3a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8006a3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a4a:	6013      	str	r3, [r2, #0]
}
 8006a4c:	bf00      	nop
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bc80      	pop	{r7}
 8006a52:	4770      	bx	lr

08006a54 <LL_RCC_HSI_Disable>:
{
 8006a54:	b480      	push	{r7}
 8006a56:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8006a58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a66:	6013      	str	r3, [r2, #0]
}
 8006a68:	bf00      	nop
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bc80      	pop	{r7}
 8006a6e:	4770      	bx	lr

08006a70 <LL_RCC_HSI_IsReady>:
{
 8006a70:	b480      	push	{r7}
 8006a72:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8006a74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a82:	d101      	bne.n	8006a88 <LL_RCC_HSI_IsReady+0x18>
 8006a84:	2301      	movs	r3, #1
 8006a86:	e000      	b.n	8006a8a <LL_RCC_HSI_IsReady+0x1a>
 8006a88:	2300      	movs	r3, #0
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bc80      	pop	{r7}
 8006a90:	4770      	bx	lr

08006a92 <LL_RCC_HSI_SetCalibTrimming>:
{
 8006a92:	b480      	push	{r7}
 8006a94:	b083      	sub	sp, #12
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8006a9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	061b      	lsls	r3, r3, #24
 8006aa8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006aac:	4313      	orrs	r3, r2
 8006aae:	604b      	str	r3, [r1, #4]
}
 8006ab0:	bf00      	nop
 8006ab2:	370c      	adds	r7, #12
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bc80      	pop	{r7}
 8006ab8:	4770      	bx	lr

08006aba <LL_RCC_LSE_IsReady>:
{
 8006aba:	b480      	push	{r7}
 8006abc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006abe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ac6:	f003 0302 	and.w	r3, r3, #2
 8006aca:	2b02      	cmp	r3, #2
 8006acc:	d101      	bne.n	8006ad2 <LL_RCC_LSE_IsReady+0x18>
 8006ace:	2301      	movs	r3, #1
 8006ad0:	e000      	b.n	8006ad4 <LL_RCC_LSE_IsReady+0x1a>
 8006ad2:	2300      	movs	r3, #0
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bc80      	pop	{r7}
 8006ada:	4770      	bx	lr

08006adc <LL_RCC_LSI_Enable>:
{
 8006adc:	b480      	push	{r7}
 8006ade:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8006ae0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ae4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ae8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006aec:	f043 0301 	orr.w	r3, r3, #1
 8006af0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006af4:	bf00      	nop
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bc80      	pop	{r7}
 8006afa:	4770      	bx	lr

08006afc <LL_RCC_LSI_Disable>:
{
 8006afc:	b480      	push	{r7}
 8006afe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8006b00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b0c:	f023 0301 	bic.w	r3, r3, #1
 8006b10:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006b14:	bf00      	nop
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bc80      	pop	{r7}
 8006b1a:	4770      	bx	lr

08006b1c <LL_RCC_LSI_IsReady>:
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8006b20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b28:	f003 0302 	and.w	r3, r3, #2
 8006b2c:	2b02      	cmp	r3, #2
 8006b2e:	d101      	bne.n	8006b34 <LL_RCC_LSI_IsReady+0x18>
 8006b30:	2301      	movs	r3, #1
 8006b32:	e000      	b.n	8006b36 <LL_RCC_LSI_IsReady+0x1a>
 8006b34:	2300      	movs	r3, #0
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bc80      	pop	{r7}
 8006b3c:	4770      	bx	lr

08006b3e <LL_RCC_MSI_Enable>:
{
 8006b3e:	b480      	push	{r7}
 8006b40:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8006b42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b4c:	f043 0301 	orr.w	r3, r3, #1
 8006b50:	6013      	str	r3, [r2, #0]
}
 8006b52:	bf00      	nop
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bc80      	pop	{r7}
 8006b58:	4770      	bx	lr

08006b5a <LL_RCC_MSI_Disable>:
{
 8006b5a:	b480      	push	{r7}
 8006b5c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8006b5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b68:	f023 0301 	bic.w	r3, r3, #1
 8006b6c:	6013      	str	r3, [r2, #0]
}
 8006b6e:	bf00      	nop
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bc80      	pop	{r7}
 8006b74:	4770      	bx	lr

08006b76 <LL_RCC_MSI_IsReady>:
{
 8006b76:	b480      	push	{r7}
 8006b78:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8006b7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f003 0302 	and.w	r3, r3, #2
 8006b84:	2b02      	cmp	r3, #2
 8006b86:	d101      	bne.n	8006b8c <LL_RCC_MSI_IsReady+0x16>
 8006b88:	2301      	movs	r3, #1
 8006b8a:	e000      	b.n	8006b8e <LL_RCC_MSI_IsReady+0x18>
 8006b8c:	2300      	movs	r3, #0
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bc80      	pop	{r7}
 8006b94:	4770      	bx	lr

08006b96 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8006b96:	b480      	push	{r7}
 8006b98:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8006b9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f003 0308 	and.w	r3, r3, #8
 8006ba4:	2b08      	cmp	r3, #8
 8006ba6:	d101      	bne.n	8006bac <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8006ba8:	2301      	movs	r3, #1
 8006baa:	e000      	b.n	8006bae <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8006bac:	2300      	movs	r3, #0
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bc80      	pop	{r7}
 8006bb4:	4770      	bx	lr

08006bb6 <LL_RCC_MSI_GetRange>:
{
 8006bb6:	b480      	push	{r7}
 8006bb8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8006bba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bc80      	pop	{r7}
 8006bca:	4770      	bx	lr

08006bcc <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8006bcc:	b480      	push	{r7}
 8006bce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8006bd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006bd8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bc80      	pop	{r7}
 8006be2:	4770      	bx	lr

08006be4 <LL_RCC_MSI_SetCalibTrimming>:
{
 8006be4:	b480      	push	{r7}
 8006be6:	b083      	sub	sp, #12
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8006bec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	021b      	lsls	r3, r3, #8
 8006bfa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	604b      	str	r3, [r1, #4]
}
 8006c02:	bf00      	nop
 8006c04:	370c      	adds	r7, #12
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bc80      	pop	{r7}
 8006c0a:	4770      	bx	lr

08006c0c <LL_RCC_SetSysClkSource>:
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b083      	sub	sp, #12
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8006c14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c18:	689b      	ldr	r3, [r3, #8]
 8006c1a:	f023 0203 	bic.w	r2, r3, #3
 8006c1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	4313      	orrs	r3, r2
 8006c26:	608b      	str	r3, [r1, #8]
}
 8006c28:	bf00      	nop
 8006c2a:	370c      	adds	r7, #12
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bc80      	pop	{r7}
 8006c30:	4770      	bx	lr

08006c32 <LL_RCC_GetSysClkSource>:
{
 8006c32:	b480      	push	{r7}
 8006c34:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006c36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	f003 030c 	and.w	r3, r3, #12
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bc80      	pop	{r7}
 8006c46:	4770      	bx	lr

08006c48 <LL_RCC_SetAHBPrescaler>:
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b083      	sub	sp, #12
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8006c50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	4313      	orrs	r3, r2
 8006c62:	608b      	str	r3, [r1, #8]
}
 8006c64:	bf00      	nop
 8006c66:	370c      	adds	r7, #12
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bc80      	pop	{r7}
 8006c6c:	4770      	bx	lr

08006c6e <LL_RCC_SetAHB3Prescaler>:
{
 8006c6e:	b480      	push	{r7}
 8006c70:	b083      	sub	sp, #12
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8006c76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c7a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006c7e:	f023 020f 	bic.w	r2, r3, #15
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	091b      	lsrs	r3, r3, #4
 8006c86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8006c90:	bf00      	nop
 8006c92:	370c      	adds	r7, #12
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bc80      	pop	{r7}
 8006c98:	4770      	bx	lr

08006c9a <LL_RCC_SetAPB1Prescaler>:
{
 8006c9a:	b480      	push	{r7}
 8006c9c:	b083      	sub	sp, #12
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8006ca2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006cac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	608b      	str	r3, [r1, #8]
}
 8006cb6:	bf00      	nop
 8006cb8:	370c      	adds	r7, #12
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bc80      	pop	{r7}
 8006cbe:	4770      	bx	lr

08006cc0 <LL_RCC_SetAPB2Prescaler>:
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b083      	sub	sp, #12
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8006cc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006cd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	608b      	str	r3, [r1, #8]
}
 8006cdc:	bf00      	nop
 8006cde:	370c      	adds	r7, #12
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bc80      	pop	{r7}
 8006ce4:	4770      	bx	lr

08006ce6 <LL_RCC_GetAHBPrescaler>:
{
 8006ce6:	b480      	push	{r7}
 8006ce8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8006cea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bc80      	pop	{r7}
 8006cfa:	4770      	bx	lr

08006cfc <LL_RCC_GetAHB3Prescaler>:
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8006d00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d04:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006d08:	011b      	lsls	r3, r3, #4
 8006d0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bc80      	pop	{r7}
 8006d14:	4770      	bx	lr

08006d16 <LL_RCC_GetAPB1Prescaler>:
{
 8006d16:	b480      	push	{r7}
 8006d18:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8006d1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bc80      	pop	{r7}
 8006d2a:	4770      	bx	lr

08006d2c <LL_RCC_GetAPB2Prescaler>:
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8006d30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d34:	689b      	ldr	r3, [r3, #8]
 8006d36:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bc80      	pop	{r7}
 8006d40:	4770      	bx	lr

08006d42 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8006d42:	b480      	push	{r7}
 8006d44:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8006d46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d50:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006d54:	6013      	str	r3, [r2, #0]
}
 8006d56:	bf00      	nop
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bc80      	pop	{r7}
 8006d5c:	4770      	bx	lr

08006d5e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8006d5e:	b480      	push	{r7}
 8006d60:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8006d62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d6c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d70:	6013      	str	r3, [r2, #0]
}
 8006d72:	bf00      	nop
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bc80      	pop	{r7}
 8006d78:	4770      	bx	lr

08006d7a <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8006d7a:	b480      	push	{r7}
 8006d7c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8006d7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d88:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d8c:	d101      	bne.n	8006d92 <LL_RCC_PLL_IsReady+0x18>
 8006d8e:	2301      	movs	r3, #1
 8006d90:	e000      	b.n	8006d94 <LL_RCC_PLL_IsReady+0x1a>
 8006d92:	2300      	movs	r3, #0
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bc80      	pop	{r7}
 8006d9a:	4770      	bx	lr

08006d9c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8006da0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006da4:	68db      	ldr	r3, [r3, #12]
 8006da6:	0a1b      	lsrs	r3, r3, #8
 8006da8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bc80      	pop	{r7}
 8006db2:	4770      	bx	lr

08006db4 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8006db4:	b480      	push	{r7}
 8006db6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8006db8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006dbc:	68db      	ldr	r3, [r3, #12]
 8006dbe:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bc80      	pop	{r7}
 8006dc8:	4770      	bx	lr

08006dca <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8006dca:	b480      	push	{r7}
 8006dcc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8006dce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006dd2:	68db      	ldr	r3, [r3, #12]
 8006dd4:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bc80      	pop	{r7}
 8006dde:	4770      	bx	lr

08006de0 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8006de0:	b480      	push	{r7}
 8006de2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8006de4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006de8:	68db      	ldr	r3, [r3, #12]
 8006dea:	f003 0303 	and.w	r3, r3, #3
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bc80      	pop	{r7}
 8006df4:	4770      	bx	lr

08006df6 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8006df6:	b480      	push	{r7}
 8006df8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8006dfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e08:	d101      	bne.n	8006e0e <LL_RCC_IsActiveFlag_HPRE+0x18>
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	e000      	b.n	8006e10 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8006e0e:	2300      	movs	r3, #0
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bc80      	pop	{r7}
 8006e16:	4770      	bx	lr

08006e18 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8006e1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e20:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006e24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e2c:	d101      	bne.n	8006e32 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8006e2e:	2301      	movs	r3, #1
 8006e30:	e000      	b.n	8006e34 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8006e32:	2300      	movs	r3, #0
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bc80      	pop	{r7}
 8006e3a:	4770      	bx	lr

08006e3c <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8006e40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e44:	689b      	ldr	r3, [r3, #8]
 8006e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e4e:	d101      	bne.n	8006e54 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8006e50:	2301      	movs	r3, #1
 8006e52:	e000      	b.n	8006e56 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8006e54:	2300      	movs	r3, #0
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bc80      	pop	{r7}
 8006e5c:	4770      	bx	lr

08006e5e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8006e5e:	b480      	push	{r7}
 8006e60:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8006e62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e66:	689b      	ldr	r3, [r3, #8]
 8006e68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e6c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006e70:	d101      	bne.n	8006e76 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8006e72:	2301      	movs	r3, #1
 8006e74:	e000      	b.n	8006e78 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8006e76:	2300      	movs	r3, #0
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bc80      	pop	{r7}
 8006e7e:	4770      	bx	lr

08006e80 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b088      	sub	sp, #32
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d101      	bne.n	8006e92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	e36f      	b.n	8007572 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e92:	f7ff fece 	bl	8006c32 <LL_RCC_GetSysClkSource>
 8006e96:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006e98:	f7ff ffa2 	bl	8006de0 <LL_RCC_PLL_GetMainSource>
 8006e9c:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f003 0320 	and.w	r3, r3, #32
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	f000 80c4 	beq.w	8007034 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006eac:	69fb      	ldr	r3, [r7, #28]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d005      	beq.n	8006ebe <HAL_RCC_OscConfig+0x3e>
 8006eb2:	69fb      	ldr	r3, [r7, #28]
 8006eb4:	2b0c      	cmp	r3, #12
 8006eb6:	d176      	bne.n	8006fa6 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006eb8:	69bb      	ldr	r3, [r7, #24]
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d173      	bne.n	8006fa6 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6a1b      	ldr	r3, [r3, #32]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d101      	bne.n	8006eca <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	e353      	b.n	8007572 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ece:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f003 0308 	and.w	r3, r3, #8
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d005      	beq.n	8006ee8 <HAL_RCC_OscConfig+0x68>
 8006edc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ee6:	e006      	b.n	8006ef6 <HAL_RCC_OscConfig+0x76>
 8006ee8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006eec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ef0:	091b      	lsrs	r3, r3, #4
 8006ef2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d222      	bcs.n	8006f40 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006efe:	4618      	mov	r0, r3
 8006f00:	f000 fd3c 	bl	800797c <RCC_SetFlashLatencyFromMSIRange>
 8006f04:	4603      	mov	r3, r0
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d001      	beq.n	8006f0e <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	e331      	b.n	8007572 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006f0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006f18:	f043 0308 	orr.w	r3, r3, #8
 8006f1c:	6013      	str	r3, [r2, #0]
 8006f1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006f30:	4313      	orrs	r3, r2
 8006f32:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f7ff fe53 	bl	8006be4 <LL_RCC_MSI_SetCalibTrimming>
 8006f3e:	e021      	b.n	8006f84 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006f40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006f4a:	f043 0308 	orr.w	r3, r3, #8
 8006f4e:	6013      	str	r3, [r2, #0]
 8006f50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006f62:	4313      	orrs	r3, r2
 8006f64:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f7ff fe3a 	bl	8006be4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f74:	4618      	mov	r0, r3
 8006f76:	f000 fd01 	bl	800797c <RCC_SetFlashLatencyFromMSIRange>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d001      	beq.n	8006f84 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8006f80:	2301      	movs	r3, #1
 8006f82:	e2f6      	b.n	8007572 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006f84:	f000 fcc2 	bl	800790c <HAL_RCC_GetHCLKFreq>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	4aa7      	ldr	r2, [pc, #668]	; (8007228 <HAL_RCC_OscConfig+0x3a8>)
 8006f8c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8006f8e:	4ba7      	ldr	r3, [pc, #668]	; (800722c <HAL_RCC_OscConfig+0x3ac>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4618      	mov	r0, r3
 8006f94:	f7fb fc9e 	bl	80028d4 <HAL_InitTick>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8006f9c:	7cfb      	ldrb	r3, [r7, #19]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d047      	beq.n	8007032 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8006fa2:	7cfb      	ldrb	r3, [r7, #19]
 8006fa4:	e2e5      	b.n	8007572 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6a1b      	ldr	r3, [r3, #32]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d02c      	beq.n	8007008 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006fae:	f7ff fdc6 	bl	8006b3e <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006fb2:	f7fb fc99 	bl	80028e8 <HAL_GetTick>
 8006fb6:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8006fb8:	e008      	b.n	8006fcc <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006fba:	f7fb fc95 	bl	80028e8 <HAL_GetTick>
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	1ad3      	subs	r3, r2, r3
 8006fc4:	2b02      	cmp	r3, #2
 8006fc6:	d901      	bls.n	8006fcc <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8006fc8:	2303      	movs	r3, #3
 8006fca:	e2d2      	b.n	8007572 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8006fcc:	f7ff fdd3 	bl	8006b76 <LL_RCC_MSI_IsReady>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d0f1      	beq.n	8006fba <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006fd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006fe0:	f043 0308 	orr.w	r3, r3, #8
 8006fe4:	6013      	str	r3, [r2, #0]
 8006fe6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ff4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007000:	4618      	mov	r0, r3
 8007002:	f7ff fdef 	bl	8006be4 <LL_RCC_MSI_SetCalibTrimming>
 8007006:	e015      	b.n	8007034 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007008:	f7ff fda7 	bl	8006b5a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800700c:	f7fb fc6c 	bl	80028e8 <HAL_GetTick>
 8007010:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8007012:	e008      	b.n	8007026 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007014:	f7fb fc68 	bl	80028e8 <HAL_GetTick>
 8007018:	4602      	mov	r2, r0
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	1ad3      	subs	r3, r2, r3
 800701e:	2b02      	cmp	r3, #2
 8007020:	d901      	bls.n	8007026 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8007022:	2303      	movs	r3, #3
 8007024:	e2a5      	b.n	8007572 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8007026:	f7ff fda6 	bl	8006b76 <LL_RCC_MSI_IsReady>
 800702a:	4603      	mov	r3, r0
 800702c:	2b00      	cmp	r3, #0
 800702e:	d1f1      	bne.n	8007014 <HAL_RCC_OscConfig+0x194>
 8007030:	e000      	b.n	8007034 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8007032:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f003 0301 	and.w	r3, r3, #1
 800703c:	2b00      	cmp	r3, #0
 800703e:	d058      	beq.n	80070f2 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8007040:	69fb      	ldr	r3, [r7, #28]
 8007042:	2b08      	cmp	r3, #8
 8007044:	d005      	beq.n	8007052 <HAL_RCC_OscConfig+0x1d2>
 8007046:	69fb      	ldr	r3, [r7, #28]
 8007048:	2b0c      	cmp	r3, #12
 800704a:	d108      	bne.n	800705e <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800704c:	69bb      	ldr	r3, [r7, #24]
 800704e:	2b03      	cmp	r3, #3
 8007050:	d105      	bne.n	800705e <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d14b      	bne.n	80070f2 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 800705a:	2301      	movs	r3, #1
 800705c:	e289      	b.n	8007572 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800705e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	689b      	ldr	r3, [r3, #8]
 800706c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007070:	4313      	orrs	r3, r2
 8007072:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800707c:	d102      	bne.n	8007084 <HAL_RCC_OscConfig+0x204>
 800707e:	f7ff fcae 	bl	80069de <LL_RCC_HSE_Enable>
 8007082:	e00d      	b.n	80070a0 <HAL_RCC_OscConfig+0x220>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800708c:	d104      	bne.n	8007098 <HAL_RCC_OscConfig+0x218>
 800708e:	f7ff fc79 	bl	8006984 <LL_RCC_HSE_EnableTcxo>
 8007092:	f7ff fca4 	bl	80069de <LL_RCC_HSE_Enable>
 8007096:	e003      	b.n	80070a0 <HAL_RCC_OscConfig+0x220>
 8007098:	f7ff fcaf 	bl	80069fa <LL_RCC_HSE_Disable>
 800709c:	f7ff fc80 	bl	80069a0 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d012      	beq.n	80070ce <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070a8:	f7fb fc1e 	bl	80028e8 <HAL_GetTick>
 80070ac:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80070ae:	e008      	b.n	80070c2 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80070b0:	f7fb fc1a 	bl	80028e8 <HAL_GetTick>
 80070b4:	4602      	mov	r2, r0
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	1ad3      	subs	r3, r2, r3
 80070ba:	2b64      	cmp	r3, #100	; 0x64
 80070bc:	d901      	bls.n	80070c2 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 80070be:	2303      	movs	r3, #3
 80070c0:	e257      	b.n	8007572 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 80070c2:	f7ff fca8 	bl	8006a16 <LL_RCC_HSE_IsReady>
 80070c6:	4603      	mov	r3, r0
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d0f1      	beq.n	80070b0 <HAL_RCC_OscConfig+0x230>
 80070cc:	e011      	b.n	80070f2 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070ce:	f7fb fc0b 	bl	80028e8 <HAL_GetTick>
 80070d2:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80070d4:	e008      	b.n	80070e8 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80070d6:	f7fb fc07 	bl	80028e8 <HAL_GetTick>
 80070da:	4602      	mov	r2, r0
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	1ad3      	subs	r3, r2, r3
 80070e0:	2b64      	cmp	r3, #100	; 0x64
 80070e2:	d901      	bls.n	80070e8 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80070e4:	2303      	movs	r3, #3
 80070e6:	e244      	b.n	8007572 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 80070e8:	f7ff fc95 	bl	8006a16 <LL_RCC_HSE_IsReady>
 80070ec:	4603      	mov	r3, r0
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d1f1      	bne.n	80070d6 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f003 0302 	and.w	r3, r3, #2
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d046      	beq.n	800718c <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80070fe:	69fb      	ldr	r3, [r7, #28]
 8007100:	2b04      	cmp	r3, #4
 8007102:	d005      	beq.n	8007110 <HAL_RCC_OscConfig+0x290>
 8007104:	69fb      	ldr	r3, [r7, #28]
 8007106:	2b0c      	cmp	r3, #12
 8007108:	d10e      	bne.n	8007128 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800710a:	69bb      	ldr	r3, [r7, #24]
 800710c:	2b02      	cmp	r3, #2
 800710e:	d10b      	bne.n	8007128 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	691b      	ldr	r3, [r3, #16]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d101      	bne.n	800711c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8007118:	2301      	movs	r3, #1
 800711a:	e22a      	b.n	8007572 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	695b      	ldr	r3, [r3, #20]
 8007120:	4618      	mov	r0, r3
 8007122:	f7ff fcb6 	bl	8006a92 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8007126:	e031      	b.n	800718c <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	691b      	ldr	r3, [r3, #16]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d019      	beq.n	8007164 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007130:	f7ff fc82 	bl	8006a38 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007134:	f7fb fbd8 	bl	80028e8 <HAL_GetTick>
 8007138:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800713a:	e008      	b.n	800714e <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800713c:	f7fb fbd4 	bl	80028e8 <HAL_GetTick>
 8007140:	4602      	mov	r2, r0
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	1ad3      	subs	r3, r2, r3
 8007146:	2b02      	cmp	r3, #2
 8007148:	d901      	bls.n	800714e <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 800714a:	2303      	movs	r3, #3
 800714c:	e211      	b.n	8007572 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 800714e:	f7ff fc8f 	bl	8006a70 <LL_RCC_HSI_IsReady>
 8007152:	4603      	mov	r3, r0
 8007154:	2b00      	cmp	r3, #0
 8007156:	d0f1      	beq.n	800713c <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	695b      	ldr	r3, [r3, #20]
 800715c:	4618      	mov	r0, r3
 800715e:	f7ff fc98 	bl	8006a92 <LL_RCC_HSI_SetCalibTrimming>
 8007162:	e013      	b.n	800718c <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007164:	f7ff fc76 	bl	8006a54 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007168:	f7fb fbbe 	bl	80028e8 <HAL_GetTick>
 800716c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800716e:	e008      	b.n	8007182 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007170:	f7fb fbba 	bl	80028e8 <HAL_GetTick>
 8007174:	4602      	mov	r2, r0
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	1ad3      	subs	r3, r2, r3
 800717a:	2b02      	cmp	r3, #2
 800717c:	d901      	bls.n	8007182 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 800717e:	2303      	movs	r3, #3
 8007180:	e1f7      	b.n	8007572 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8007182:	f7ff fc75 	bl	8006a70 <LL_RCC_HSI_IsReady>
 8007186:	4603      	mov	r3, r0
 8007188:	2b00      	cmp	r3, #0
 800718a:	d1f1      	bne.n	8007170 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f003 0308 	and.w	r3, r3, #8
 8007194:	2b00      	cmp	r3, #0
 8007196:	d06e      	beq.n	8007276 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	699b      	ldr	r3, [r3, #24]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d056      	beq.n	800724e <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 80071a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80071a8:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	69da      	ldr	r2, [r3, #28]
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	f003 0310 	and.w	r3, r3, #16
 80071b4:	429a      	cmp	r2, r3
 80071b6:	d031      	beq.n	800721c <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f003 0302 	and.w	r3, r3, #2
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d006      	beq.n	80071d0 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d101      	bne.n	80071d0 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 80071cc:	2301      	movs	r3, #1
 80071ce:	e1d0      	b.n	8007572 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f003 0301 	and.w	r3, r3, #1
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d013      	beq.n	8007202 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 80071da:	f7ff fc8f 	bl	8006afc <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80071de:	f7fb fb83 	bl	80028e8 <HAL_GetTick>
 80071e2:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80071e4:	e008      	b.n	80071f8 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80071e6:	f7fb fb7f 	bl	80028e8 <HAL_GetTick>
 80071ea:	4602      	mov	r2, r0
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	1ad3      	subs	r3, r2, r3
 80071f0:	2b11      	cmp	r3, #17
 80071f2:	d901      	bls.n	80071f8 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 80071f4:	2303      	movs	r3, #3
 80071f6:	e1bc      	b.n	8007572 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 80071f8:	f7ff fc90 	bl	8006b1c <LL_RCC_LSI_IsReady>
 80071fc:	4603      	mov	r3, r0
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d1f1      	bne.n	80071e6 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8007202:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007206:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800720a:	f023 0210 	bic.w	r2, r3, #16
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	69db      	ldr	r3, [r3, #28]
 8007212:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007216:	4313      	orrs	r3, r2
 8007218:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800721c:	f7ff fc5e 	bl	8006adc <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007220:	f7fb fb62 	bl	80028e8 <HAL_GetTick>
 8007224:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8007226:	e00c      	b.n	8007242 <HAL_RCC_OscConfig+0x3c2>
 8007228:	20000004 	.word	0x20000004
 800722c:	20000008 	.word	0x20000008
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007230:	f7fb fb5a 	bl	80028e8 <HAL_GetTick>
 8007234:	4602      	mov	r2, r0
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	1ad3      	subs	r3, r2, r3
 800723a:	2b11      	cmp	r3, #17
 800723c:	d901      	bls.n	8007242 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800723e:	2303      	movs	r3, #3
 8007240:	e197      	b.n	8007572 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8007242:	f7ff fc6b 	bl	8006b1c <LL_RCC_LSI_IsReady>
 8007246:	4603      	mov	r3, r0
 8007248:	2b00      	cmp	r3, #0
 800724a:	d0f1      	beq.n	8007230 <HAL_RCC_OscConfig+0x3b0>
 800724c:	e013      	b.n	8007276 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800724e:	f7ff fc55 	bl	8006afc <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007252:	f7fb fb49 	bl	80028e8 <HAL_GetTick>
 8007256:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8007258:	e008      	b.n	800726c <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800725a:	f7fb fb45 	bl	80028e8 <HAL_GetTick>
 800725e:	4602      	mov	r2, r0
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	1ad3      	subs	r3, r2, r3
 8007264:	2b11      	cmp	r3, #17
 8007266:	d901      	bls.n	800726c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8007268:	2303      	movs	r3, #3
 800726a:	e182      	b.n	8007572 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 800726c:	f7ff fc56 	bl	8006b1c <LL_RCC_LSI_IsReady>
 8007270:	4603      	mov	r3, r0
 8007272:	2b00      	cmp	r3, #0
 8007274:	d1f1      	bne.n	800725a <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f003 0304 	and.w	r3, r3, #4
 800727e:	2b00      	cmp	r3, #0
 8007280:	f000 80d8 	beq.w	8007434 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8007284:	f7ff fb6c 	bl	8006960 <LL_PWR_IsEnabledBkUpAccess>
 8007288:	4603      	mov	r3, r0
 800728a:	2b00      	cmp	r3, #0
 800728c:	d113      	bne.n	80072b6 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800728e:	f7ff faab 	bl	80067e8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007292:	f7fb fb29 	bl	80028e8 <HAL_GetTick>
 8007296:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8007298:	e008      	b.n	80072ac <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800729a:	f7fb fb25 	bl	80028e8 <HAL_GetTick>
 800729e:	4602      	mov	r2, r0
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	1ad3      	subs	r3, r2, r3
 80072a4:	2b02      	cmp	r3, #2
 80072a6:	d901      	bls.n	80072ac <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 80072a8:	2303      	movs	r3, #3
 80072aa:	e162      	b.n	8007572 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80072ac:	f7ff fb58 	bl	8006960 <LL_PWR_IsEnabledBkUpAccess>
 80072b0:	4603      	mov	r3, r0
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d0f1      	beq.n	800729a <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	68db      	ldr	r3, [r3, #12]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d07b      	beq.n	80073b6 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	68db      	ldr	r3, [r3, #12]
 80072c2:	2b85      	cmp	r3, #133	; 0x85
 80072c4:	d003      	beq.n	80072ce <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	68db      	ldr	r3, [r3, #12]
 80072ca:	2b05      	cmp	r3, #5
 80072cc:	d109      	bne.n	80072e2 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80072ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80072da:	f043 0304 	orr.w	r3, r3, #4
 80072de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80072e2:	f7fb fb01 	bl	80028e8 <HAL_GetTick>
 80072e6:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80072e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80072f4:	f043 0301 	orr.w	r3, r3, #1
 80072f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80072fc:	e00a      	b.n	8007314 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072fe:	f7fb faf3 	bl	80028e8 <HAL_GetTick>
 8007302:	4602      	mov	r2, r0
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	1ad3      	subs	r3, r2, r3
 8007308:	f241 3288 	movw	r2, #5000	; 0x1388
 800730c:	4293      	cmp	r3, r2
 800730e:	d901      	bls.n	8007314 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8007310:	2303      	movs	r3, #3
 8007312:	e12e      	b.n	8007572 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8007314:	f7ff fbd1 	bl	8006aba <LL_RCC_LSE_IsReady>
 8007318:	4603      	mov	r3, r0
 800731a:	2b00      	cmp	r3, #0
 800731c:	d0ef      	beq.n	80072fe <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	68db      	ldr	r3, [r3, #12]
 8007322:	2b81      	cmp	r3, #129	; 0x81
 8007324:	d003      	beq.n	800732e <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	68db      	ldr	r3, [r3, #12]
 800732a:	2b85      	cmp	r3, #133	; 0x85
 800732c:	d121      	bne.n	8007372 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800732e:	f7fb fadb 	bl	80028e8 <HAL_GetTick>
 8007332:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007334:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007338:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800733c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007340:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007344:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8007348:	e00a      	b.n	8007360 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800734a:	f7fb facd 	bl	80028e8 <HAL_GetTick>
 800734e:	4602      	mov	r2, r0
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	1ad3      	subs	r3, r2, r3
 8007354:	f241 3288 	movw	r2, #5000	; 0x1388
 8007358:	4293      	cmp	r3, r2
 800735a:	d901      	bls.n	8007360 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 800735c:	2303      	movs	r3, #3
 800735e:	e108      	b.n	8007572 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8007360:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007368:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800736c:	2b00      	cmp	r3, #0
 800736e:	d0ec      	beq.n	800734a <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8007370:	e060      	b.n	8007434 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007372:	f7fb fab9 	bl	80028e8 <HAL_GetTick>
 8007376:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007378:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800737c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007380:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007384:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007388:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800738c:	e00a      	b.n	80073a4 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800738e:	f7fb faab 	bl	80028e8 <HAL_GetTick>
 8007392:	4602      	mov	r2, r0
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	1ad3      	subs	r3, r2, r3
 8007398:	f241 3288 	movw	r2, #5000	; 0x1388
 800739c:	4293      	cmp	r3, r2
 800739e:	d901      	bls.n	80073a4 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 80073a0:	2303      	movs	r3, #3
 80073a2:	e0e6      	b.n	8007572 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80073a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d1ec      	bne.n	800738e <HAL_RCC_OscConfig+0x50e>
 80073b4:	e03e      	b.n	8007434 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80073b6:	f7fb fa97 	bl	80028e8 <HAL_GetTick>
 80073ba:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80073bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80073c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80073d0:	e00a      	b.n	80073e8 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073d2:	f7fb fa89 	bl	80028e8 <HAL_GetTick>
 80073d6:	4602      	mov	r2, r0
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	1ad3      	subs	r3, r2, r3
 80073dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d901      	bls.n	80073e8 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80073e4:	2303      	movs	r3, #3
 80073e6:	e0c4      	b.n	8007572 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80073e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d1ec      	bne.n	80073d2 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80073f8:	f7fb fa76 	bl	80028e8 <HAL_GetTick>
 80073fc:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80073fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007406:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800740a:	f023 0301 	bic.w	r3, r3, #1
 800740e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8007412:	e00a      	b.n	800742a <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007414:	f7fb fa68 	bl	80028e8 <HAL_GetTick>
 8007418:	4602      	mov	r2, r0
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	1ad3      	subs	r3, r2, r3
 800741e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007422:	4293      	cmp	r3, r2
 8007424:	d901      	bls.n	800742a <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8007426:	2303      	movs	r3, #3
 8007428:	e0a3      	b.n	8007572 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 800742a:	f7ff fb46 	bl	8006aba <LL_RCC_LSE_IsReady>
 800742e:	4603      	mov	r3, r0
 8007430:	2b00      	cmp	r3, #0
 8007432:	d1ef      	bne.n	8007414 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007438:	2b00      	cmp	r3, #0
 800743a:	f000 8099 	beq.w	8007570 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800743e:	69fb      	ldr	r3, [r7, #28]
 8007440:	2b0c      	cmp	r3, #12
 8007442:	d06c      	beq.n	800751e <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007448:	2b02      	cmp	r3, #2
 800744a:	d14b      	bne.n	80074e4 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800744c:	f7ff fc87 	bl	8006d5e <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007450:	f7fb fa4a 	bl	80028e8 <HAL_GetTick>
 8007454:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8007456:	e008      	b.n	800746a <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007458:	f7fb fa46 	bl	80028e8 <HAL_GetTick>
 800745c:	4602      	mov	r2, r0
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	1ad3      	subs	r3, r2, r3
 8007462:	2b0a      	cmp	r3, #10
 8007464:	d901      	bls.n	800746a <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8007466:	2303      	movs	r3, #3
 8007468:	e083      	b.n	8007572 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800746a:	f7ff fc86 	bl	8006d7a <LL_RCC_PLL_IsReady>
 800746e:	4603      	mov	r3, r0
 8007470:	2b00      	cmp	r3, #0
 8007472:	d1f1      	bne.n	8007458 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007474:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007478:	68da      	ldr	r2, [r3, #12]
 800747a:	4b40      	ldr	r3, [pc, #256]	; (800757c <HAL_RCC_OscConfig+0x6fc>)
 800747c:	4013      	ands	r3, r2
 800747e:	687a      	ldr	r2, [r7, #4]
 8007480:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8007482:	687a      	ldr	r2, [r7, #4]
 8007484:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007486:	4311      	orrs	r1, r2
 8007488:	687a      	ldr	r2, [r7, #4]
 800748a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800748c:	0212      	lsls	r2, r2, #8
 800748e:	4311      	orrs	r1, r2
 8007490:	687a      	ldr	r2, [r7, #4]
 8007492:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007494:	4311      	orrs	r1, r2
 8007496:	687a      	ldr	r2, [r7, #4]
 8007498:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800749a:	4311      	orrs	r1, r2
 800749c:	687a      	ldr	r2, [r7, #4]
 800749e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80074a0:	430a      	orrs	r2, r1
 80074a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80074a6:	4313      	orrs	r3, r2
 80074a8:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80074aa:	f7ff fc4a 	bl	8006d42 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80074ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074b2:	68db      	ldr	r3, [r3, #12]
 80074b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80074b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074bc:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074be:	f7fb fa13 	bl	80028e8 <HAL_GetTick>
 80074c2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80074c4:	e008      	b.n	80074d8 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074c6:	f7fb fa0f 	bl	80028e8 <HAL_GetTick>
 80074ca:	4602      	mov	r2, r0
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	1ad3      	subs	r3, r2, r3
 80074d0:	2b0a      	cmp	r3, #10
 80074d2:	d901      	bls.n	80074d8 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 80074d4:	2303      	movs	r3, #3
 80074d6:	e04c      	b.n	8007572 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 80074d8:	f7ff fc4f 	bl	8006d7a <LL_RCC_PLL_IsReady>
 80074dc:	4603      	mov	r3, r0
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d0f1      	beq.n	80074c6 <HAL_RCC_OscConfig+0x646>
 80074e2:	e045      	b.n	8007570 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074e4:	f7ff fc3b 	bl	8006d5e <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074e8:	f7fb f9fe 	bl	80028e8 <HAL_GetTick>
 80074ec:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80074ee:	e008      	b.n	8007502 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074f0:	f7fb f9fa 	bl	80028e8 <HAL_GetTick>
 80074f4:	4602      	mov	r2, r0
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	1ad3      	subs	r3, r2, r3
 80074fa:	2b0a      	cmp	r3, #10
 80074fc:	d901      	bls.n	8007502 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80074fe:	2303      	movs	r3, #3
 8007500:	e037      	b.n	8007572 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8007502:	f7ff fc3a 	bl	8006d7a <LL_RCC_PLL_IsReady>
 8007506:	4603      	mov	r3, r0
 8007508:	2b00      	cmp	r3, #0
 800750a:	d1f1      	bne.n	80074f0 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800750c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007510:	68da      	ldr	r2, [r3, #12]
 8007512:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007516:	4b1a      	ldr	r3, [pc, #104]	; (8007580 <HAL_RCC_OscConfig+0x700>)
 8007518:	4013      	ands	r3, r2
 800751a:	60cb      	str	r3, [r1, #12]
 800751c:	e028      	b.n	8007570 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007522:	2b01      	cmp	r3, #1
 8007524:	d101      	bne.n	800752a <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8007526:	2301      	movs	r3, #1
 8007528:	e023      	b.n	8007572 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800752a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800752e:	68db      	ldr	r3, [r3, #12]
 8007530:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8007532:	69bb      	ldr	r3, [r7, #24]
 8007534:	f003 0203 	and.w	r2, r3, #3
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800753c:	429a      	cmp	r2, r3
 800753e:	d115      	bne.n	800756c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8007540:	69bb      	ldr	r3, [r7, #24]
 8007542:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800754a:	429a      	cmp	r2, r3
 800754c:	d10e      	bne.n	800756c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800754e:	69bb      	ldr	r3, [r7, #24]
 8007550:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007558:	021b      	lsls	r3, r3, #8
 800755a:	429a      	cmp	r2, r3
 800755c:	d106      	bne.n	800756c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800755e:	69bb      	ldr	r3, [r7, #24]
 8007560:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007568:	429a      	cmp	r2, r3
 800756a:	d001      	beq.n	8007570 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 800756c:	2301      	movs	r3, #1
 800756e:	e000      	b.n	8007572 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8007570:	2300      	movs	r3, #0
}
 8007572:	4618      	mov	r0, r3
 8007574:	3720      	adds	r7, #32
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}
 800757a:	bf00      	nop
 800757c:	11c1808c 	.word	0x11c1808c
 8007580:	eefefffc 	.word	0xeefefffc

08007584 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b084      	sub	sp, #16
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
 800758c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d101      	bne.n	8007598 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007594:	2301      	movs	r3, #1
 8007596:	e10f      	b.n	80077b8 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007598:	4b89      	ldr	r3, [pc, #548]	; (80077c0 <HAL_RCC_ClockConfig+0x23c>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f003 0307 	and.w	r3, r3, #7
 80075a0:	683a      	ldr	r2, [r7, #0]
 80075a2:	429a      	cmp	r2, r3
 80075a4:	d91b      	bls.n	80075de <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075a6:	4b86      	ldr	r3, [pc, #536]	; (80077c0 <HAL_RCC_ClockConfig+0x23c>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f023 0207 	bic.w	r2, r3, #7
 80075ae:	4984      	ldr	r1, [pc, #528]	; (80077c0 <HAL_RCC_ClockConfig+0x23c>)
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	4313      	orrs	r3, r2
 80075b4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80075b6:	f7fb f997 	bl	80028e8 <HAL_GetTick>
 80075ba:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075bc:	e008      	b.n	80075d0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80075be:	f7fb f993 	bl	80028e8 <HAL_GetTick>
 80075c2:	4602      	mov	r2, r0
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	1ad3      	subs	r3, r2, r3
 80075c8:	2b02      	cmp	r3, #2
 80075ca:	d901      	bls.n	80075d0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80075cc:	2303      	movs	r3, #3
 80075ce:	e0f3      	b.n	80077b8 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075d0:	4b7b      	ldr	r3, [pc, #492]	; (80077c0 <HAL_RCC_ClockConfig+0x23c>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f003 0307 	and.w	r3, r3, #7
 80075d8:	683a      	ldr	r2, [r7, #0]
 80075da:	429a      	cmp	r2, r3
 80075dc:	d1ef      	bne.n	80075be <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f003 0302 	and.w	r3, r3, #2
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d016      	beq.n	8007618 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	689b      	ldr	r3, [r3, #8]
 80075ee:	4618      	mov	r0, r3
 80075f0:	f7ff fb2a 	bl	8006c48 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80075f4:	f7fb f978 	bl	80028e8 <HAL_GetTick>
 80075f8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80075fa:	e008      	b.n	800760e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80075fc:	f7fb f974 	bl	80028e8 <HAL_GetTick>
 8007600:	4602      	mov	r2, r0
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	1ad3      	subs	r3, r2, r3
 8007606:	2b02      	cmp	r3, #2
 8007608:	d901      	bls.n	800760e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800760a:	2303      	movs	r3, #3
 800760c:	e0d4      	b.n	80077b8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800760e:	f7ff fbf2 	bl	8006df6 <LL_RCC_IsActiveFlag_HPRE>
 8007612:	4603      	mov	r3, r0
 8007614:	2b00      	cmp	r3, #0
 8007616:	d0f1      	beq.n	80075fc <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007620:	2b00      	cmp	r3, #0
 8007622:	d016      	beq.n	8007652 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	695b      	ldr	r3, [r3, #20]
 8007628:	4618      	mov	r0, r3
 800762a:	f7ff fb20 	bl	8006c6e <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800762e:	f7fb f95b 	bl	80028e8 <HAL_GetTick>
 8007632:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8007634:	e008      	b.n	8007648 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007636:	f7fb f957 	bl	80028e8 <HAL_GetTick>
 800763a:	4602      	mov	r2, r0
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	1ad3      	subs	r3, r2, r3
 8007640:	2b02      	cmp	r3, #2
 8007642:	d901      	bls.n	8007648 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8007644:	2303      	movs	r3, #3
 8007646:	e0b7      	b.n	80077b8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8007648:	f7ff fbe6 	bl	8006e18 <LL_RCC_IsActiveFlag_SHDHPRE>
 800764c:	4603      	mov	r3, r0
 800764e:	2b00      	cmp	r3, #0
 8007650:	d0f1      	beq.n	8007636 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f003 0304 	and.w	r3, r3, #4
 800765a:	2b00      	cmp	r3, #0
 800765c:	d016      	beq.n	800768c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	68db      	ldr	r3, [r3, #12]
 8007662:	4618      	mov	r0, r3
 8007664:	f7ff fb19 	bl	8006c9a <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007668:	f7fb f93e 	bl	80028e8 <HAL_GetTick>
 800766c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800766e:	e008      	b.n	8007682 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007670:	f7fb f93a 	bl	80028e8 <HAL_GetTick>
 8007674:	4602      	mov	r2, r0
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	1ad3      	subs	r3, r2, r3
 800767a:	2b02      	cmp	r3, #2
 800767c:	d901      	bls.n	8007682 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800767e:	2303      	movs	r3, #3
 8007680:	e09a      	b.n	80077b8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8007682:	f7ff fbdb 	bl	8006e3c <LL_RCC_IsActiveFlag_PPRE1>
 8007686:	4603      	mov	r3, r0
 8007688:	2b00      	cmp	r3, #0
 800768a:	d0f1      	beq.n	8007670 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f003 0308 	and.w	r3, r3, #8
 8007694:	2b00      	cmp	r3, #0
 8007696:	d017      	beq.n	80076c8 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	691b      	ldr	r3, [r3, #16]
 800769c:	00db      	lsls	r3, r3, #3
 800769e:	4618      	mov	r0, r3
 80076a0:	f7ff fb0e 	bl	8006cc0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80076a4:	f7fb f920 	bl	80028e8 <HAL_GetTick>
 80076a8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80076aa:	e008      	b.n	80076be <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80076ac:	f7fb f91c 	bl	80028e8 <HAL_GetTick>
 80076b0:	4602      	mov	r2, r0
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	1ad3      	subs	r3, r2, r3
 80076b6:	2b02      	cmp	r3, #2
 80076b8:	d901      	bls.n	80076be <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 80076ba:	2303      	movs	r3, #3
 80076bc:	e07c      	b.n	80077b8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80076be:	f7ff fbce 	bl	8006e5e <LL_RCC_IsActiveFlag_PPRE2>
 80076c2:	4603      	mov	r3, r0
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d0f1      	beq.n	80076ac <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f003 0301 	and.w	r3, r3, #1
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d043      	beq.n	800775c <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	685b      	ldr	r3, [r3, #4]
 80076d8:	2b02      	cmp	r3, #2
 80076da:	d106      	bne.n	80076ea <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80076dc:	f7ff f99b 	bl	8006a16 <LL_RCC_HSE_IsReady>
 80076e0:	4603      	mov	r3, r0
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d11e      	bne.n	8007724 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80076e6:	2301      	movs	r3, #1
 80076e8:	e066      	b.n	80077b8 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	2b03      	cmp	r3, #3
 80076f0:	d106      	bne.n	8007700 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80076f2:	f7ff fb42 	bl	8006d7a <LL_RCC_PLL_IsReady>
 80076f6:	4603      	mov	r3, r0
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d113      	bne.n	8007724 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80076fc:	2301      	movs	r3, #1
 80076fe:	e05b      	b.n	80077b8 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	685b      	ldr	r3, [r3, #4]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d106      	bne.n	8007716 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8007708:	f7ff fa35 	bl	8006b76 <LL_RCC_MSI_IsReady>
 800770c:	4603      	mov	r3, r0
 800770e:	2b00      	cmp	r3, #0
 8007710:	d108      	bne.n	8007724 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007712:	2301      	movs	r3, #1
 8007714:	e050      	b.n	80077b8 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8007716:	f7ff f9ab 	bl	8006a70 <LL_RCC_HSI_IsReady>
 800771a:	4603      	mov	r3, r0
 800771c:	2b00      	cmp	r3, #0
 800771e:	d101      	bne.n	8007724 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007720:	2301      	movs	r3, #1
 8007722:	e049      	b.n	80077b8 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	4618      	mov	r0, r3
 800772a:	f7ff fa6f 	bl	8006c0c <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800772e:	f7fb f8db 	bl	80028e8 <HAL_GetTick>
 8007732:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007734:	e00a      	b.n	800774c <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007736:	f7fb f8d7 	bl	80028e8 <HAL_GetTick>
 800773a:	4602      	mov	r2, r0
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	1ad3      	subs	r3, r2, r3
 8007740:	f241 3288 	movw	r2, #5000	; 0x1388
 8007744:	4293      	cmp	r3, r2
 8007746:	d901      	bls.n	800774c <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8007748:	2303      	movs	r3, #3
 800774a:	e035      	b.n	80077b8 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800774c:	f7ff fa71 	bl	8006c32 <LL_RCC_GetSysClkSource>
 8007750:	4602      	mov	r2, r0
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	685b      	ldr	r3, [r3, #4]
 8007756:	009b      	lsls	r3, r3, #2
 8007758:	429a      	cmp	r2, r3
 800775a:	d1ec      	bne.n	8007736 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800775c:	4b18      	ldr	r3, [pc, #96]	; (80077c0 <HAL_RCC_ClockConfig+0x23c>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f003 0307 	and.w	r3, r3, #7
 8007764:	683a      	ldr	r2, [r7, #0]
 8007766:	429a      	cmp	r2, r3
 8007768:	d21b      	bcs.n	80077a2 <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800776a:	4b15      	ldr	r3, [pc, #84]	; (80077c0 <HAL_RCC_ClockConfig+0x23c>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f023 0207 	bic.w	r2, r3, #7
 8007772:	4913      	ldr	r1, [pc, #76]	; (80077c0 <HAL_RCC_ClockConfig+0x23c>)
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	4313      	orrs	r3, r2
 8007778:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800777a:	f7fb f8b5 	bl	80028e8 <HAL_GetTick>
 800777e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007780:	e008      	b.n	8007794 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007782:	f7fb f8b1 	bl	80028e8 <HAL_GetTick>
 8007786:	4602      	mov	r2, r0
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	1ad3      	subs	r3, r2, r3
 800778c:	2b02      	cmp	r3, #2
 800778e:	d901      	bls.n	8007794 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8007790:	2303      	movs	r3, #3
 8007792:	e011      	b.n	80077b8 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007794:	4b0a      	ldr	r3, [pc, #40]	; (80077c0 <HAL_RCC_ClockConfig+0x23c>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f003 0307 	and.w	r3, r3, #7
 800779c:	683a      	ldr	r2, [r7, #0]
 800779e:	429a      	cmp	r2, r3
 80077a0:	d1ef      	bne.n	8007782 <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80077a2:	f000 f8b3 	bl	800790c <HAL_RCC_GetHCLKFreq>
 80077a6:	4603      	mov	r3, r0
 80077a8:	4a06      	ldr	r2, [pc, #24]	; (80077c4 <HAL_RCC_ClockConfig+0x240>)
 80077aa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 80077ac:	4b06      	ldr	r3, [pc, #24]	; (80077c8 <HAL_RCC_ClockConfig+0x244>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4618      	mov	r0, r3
 80077b2:	f7fb f88f 	bl	80028d4 <HAL_InitTick>
 80077b6:	4603      	mov	r3, r0
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3710      	adds	r7, #16
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}
 80077c0:	58004000 	.word	0x58004000
 80077c4:	20000004 	.word	0x20000004
 80077c8:	20000008 	.word	0x20000008

080077cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80077cc:	b590      	push	{r4, r7, lr}
 80077ce:	b087      	sub	sp, #28
 80077d0:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80077d2:	2300      	movs	r3, #0
 80077d4:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80077d6:	2300      	movs	r3, #0
 80077d8:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80077da:	f7ff fa2a 	bl	8006c32 <LL_RCC_GetSysClkSource>
 80077de:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80077e0:	f7ff fafe 	bl	8006de0 <LL_RCC_PLL_GetMainSource>
 80077e4:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d005      	beq.n	80077f8 <HAL_RCC_GetSysClockFreq+0x2c>
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	2b0c      	cmp	r3, #12
 80077f0:	d139      	bne.n	8007866 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	d136      	bne.n	8007866 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80077f8:	f7ff f9cd 	bl	8006b96 <LL_RCC_MSI_IsEnabledRangeSelect>
 80077fc:	4603      	mov	r3, r0
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d115      	bne.n	800782e <HAL_RCC_GetSysClockFreq+0x62>
 8007802:	f7ff f9c8 	bl	8006b96 <LL_RCC_MSI_IsEnabledRangeSelect>
 8007806:	4603      	mov	r3, r0
 8007808:	2b01      	cmp	r3, #1
 800780a:	d106      	bne.n	800781a <HAL_RCC_GetSysClockFreq+0x4e>
 800780c:	f7ff f9d3 	bl	8006bb6 <LL_RCC_MSI_GetRange>
 8007810:	4603      	mov	r3, r0
 8007812:	0a1b      	lsrs	r3, r3, #8
 8007814:	f003 030f 	and.w	r3, r3, #15
 8007818:	e005      	b.n	8007826 <HAL_RCC_GetSysClockFreq+0x5a>
 800781a:	f7ff f9d7 	bl	8006bcc <LL_RCC_MSI_GetRangeAfterStandby>
 800781e:	4603      	mov	r3, r0
 8007820:	0a1b      	lsrs	r3, r3, #8
 8007822:	f003 030f 	and.w	r3, r3, #15
 8007826:	4a36      	ldr	r2, [pc, #216]	; (8007900 <HAL_RCC_GetSysClockFreq+0x134>)
 8007828:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800782c:	e014      	b.n	8007858 <HAL_RCC_GetSysClockFreq+0x8c>
 800782e:	f7ff f9b2 	bl	8006b96 <LL_RCC_MSI_IsEnabledRangeSelect>
 8007832:	4603      	mov	r3, r0
 8007834:	2b01      	cmp	r3, #1
 8007836:	d106      	bne.n	8007846 <HAL_RCC_GetSysClockFreq+0x7a>
 8007838:	f7ff f9bd 	bl	8006bb6 <LL_RCC_MSI_GetRange>
 800783c:	4603      	mov	r3, r0
 800783e:	091b      	lsrs	r3, r3, #4
 8007840:	f003 030f 	and.w	r3, r3, #15
 8007844:	e005      	b.n	8007852 <HAL_RCC_GetSysClockFreq+0x86>
 8007846:	f7ff f9c1 	bl	8006bcc <LL_RCC_MSI_GetRangeAfterStandby>
 800784a:	4603      	mov	r3, r0
 800784c:	091b      	lsrs	r3, r3, #4
 800784e:	f003 030f 	and.w	r3, r3, #15
 8007852:	4a2b      	ldr	r2, [pc, #172]	; (8007900 <HAL_RCC_GetSysClockFreq+0x134>)
 8007854:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007858:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d115      	bne.n	800788c <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007864:	e012      	b.n	800788c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	2b04      	cmp	r3, #4
 800786a:	d102      	bne.n	8007872 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800786c:	4b25      	ldr	r3, [pc, #148]	; (8007904 <HAL_RCC_GetSysClockFreq+0x138>)
 800786e:	617b      	str	r3, [r7, #20]
 8007870:	e00c      	b.n	800788c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	2b08      	cmp	r3, #8
 8007876:	d109      	bne.n	800788c <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8007878:	f7ff f8a0 	bl	80069bc <LL_RCC_HSE_IsEnabledDiv2>
 800787c:	4603      	mov	r3, r0
 800787e:	2b01      	cmp	r3, #1
 8007880:	d102      	bne.n	8007888 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8007882:	4b20      	ldr	r3, [pc, #128]	; (8007904 <HAL_RCC_GetSysClockFreq+0x138>)
 8007884:	617b      	str	r3, [r7, #20]
 8007886:	e001      	b.n	800788c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8007888:	4b1f      	ldr	r3, [pc, #124]	; (8007908 <HAL_RCC_GetSysClockFreq+0x13c>)
 800788a:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800788c:	f7ff f9d1 	bl	8006c32 <LL_RCC_GetSysClkSource>
 8007890:	4603      	mov	r3, r0
 8007892:	2b0c      	cmp	r3, #12
 8007894:	d12f      	bne.n	80078f6 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8007896:	f7ff faa3 	bl	8006de0 <LL_RCC_PLL_GetMainSource>
 800789a:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2b02      	cmp	r3, #2
 80078a0:	d003      	beq.n	80078aa <HAL_RCC_GetSysClockFreq+0xde>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2b03      	cmp	r3, #3
 80078a6:	d003      	beq.n	80078b0 <HAL_RCC_GetSysClockFreq+0xe4>
 80078a8:	e00d      	b.n	80078c6 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80078aa:	4b16      	ldr	r3, [pc, #88]	; (8007904 <HAL_RCC_GetSysClockFreq+0x138>)
 80078ac:	60fb      	str	r3, [r7, #12]
        break;
 80078ae:	e00d      	b.n	80078cc <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80078b0:	f7ff f884 	bl	80069bc <LL_RCC_HSE_IsEnabledDiv2>
 80078b4:	4603      	mov	r3, r0
 80078b6:	2b01      	cmp	r3, #1
 80078b8:	d102      	bne.n	80078c0 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80078ba:	4b12      	ldr	r3, [pc, #72]	; (8007904 <HAL_RCC_GetSysClockFreq+0x138>)
 80078bc:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80078be:	e005      	b.n	80078cc <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80078c0:	4b11      	ldr	r3, [pc, #68]	; (8007908 <HAL_RCC_GetSysClockFreq+0x13c>)
 80078c2:	60fb      	str	r3, [r7, #12]
        break;
 80078c4:	e002      	b.n	80078cc <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	60fb      	str	r3, [r7, #12]
        break;
 80078ca:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80078cc:	f7ff fa66 	bl	8006d9c <LL_RCC_PLL_GetN>
 80078d0:	4602      	mov	r2, r0
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	fb03 f402 	mul.w	r4, r3, r2
 80078d8:	f7ff fa77 	bl	8006dca <LL_RCC_PLL_GetDivider>
 80078dc:	4603      	mov	r3, r0
 80078de:	091b      	lsrs	r3, r3, #4
 80078e0:	3301      	adds	r3, #1
 80078e2:	fbb4 f4f3 	udiv	r4, r4, r3
 80078e6:	f7ff fa65 	bl	8006db4 <LL_RCC_PLL_GetR>
 80078ea:	4603      	mov	r3, r0
 80078ec:	0f5b      	lsrs	r3, r3, #29
 80078ee:	3301      	adds	r3, #1
 80078f0:	fbb4 f3f3 	udiv	r3, r4, r3
 80078f4:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80078f6:	697b      	ldr	r3, [r7, #20]
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	371c      	adds	r7, #28
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd90      	pop	{r4, r7, pc}
 8007900:	0801f7c4 	.word	0x0801f7c4
 8007904:	00f42400 	.word	0x00f42400
 8007908:	01e84800 	.word	0x01e84800

0800790c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800790c:	b598      	push	{r3, r4, r7, lr}
 800790e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8007910:	f7ff ff5c 	bl	80077cc <HAL_RCC_GetSysClockFreq>
 8007914:	4604      	mov	r4, r0
 8007916:	f7ff f9e6 	bl	8006ce6 <LL_RCC_GetAHBPrescaler>
 800791a:	4603      	mov	r3, r0
 800791c:	091b      	lsrs	r3, r3, #4
 800791e:	f003 030f 	and.w	r3, r3, #15
 8007922:	4a03      	ldr	r2, [pc, #12]	; (8007930 <HAL_RCC_GetHCLKFreq+0x24>)
 8007924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007928:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800792c:	4618      	mov	r0, r3
 800792e:	bd98      	pop	{r3, r4, r7, pc}
 8007930:	0801f764 	.word	0x0801f764

08007934 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007934:	b598      	push	{r3, r4, r7, lr}
 8007936:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8007938:	f7ff ffe8 	bl	800790c <HAL_RCC_GetHCLKFreq>
 800793c:	4604      	mov	r4, r0
 800793e:	f7ff f9ea 	bl	8006d16 <LL_RCC_GetAPB1Prescaler>
 8007942:	4603      	mov	r3, r0
 8007944:	0a1b      	lsrs	r3, r3, #8
 8007946:	4a03      	ldr	r2, [pc, #12]	; (8007954 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800794c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8007950:	4618      	mov	r0, r3
 8007952:	bd98      	pop	{r3, r4, r7, pc}
 8007954:	0801f7a4 	.word	0x0801f7a4

08007958 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007958:	b598      	push	{r3, r4, r7, lr}
 800795a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800795c:	f7ff ffd6 	bl	800790c <HAL_RCC_GetHCLKFreq>
 8007960:	4604      	mov	r4, r0
 8007962:	f7ff f9e3 	bl	8006d2c <LL_RCC_GetAPB2Prescaler>
 8007966:	4603      	mov	r3, r0
 8007968:	0adb      	lsrs	r3, r3, #11
 800796a:	4a03      	ldr	r2, [pc, #12]	; (8007978 <HAL_RCC_GetPCLK2Freq+0x20>)
 800796c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007970:	fa24 f303 	lsr.w	r3, r4, r3
}
 8007974:	4618      	mov	r0, r3
 8007976:	bd98      	pop	{r3, r4, r7, pc}
 8007978:	0801f7a4 	.word	0x0801f7a4

0800797c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800797c:	b590      	push	{r4, r7, lr}
 800797e:	b085      	sub	sp, #20
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	091b      	lsrs	r3, r3, #4
 8007988:	f003 030f 	and.w	r3, r3, #15
 800798c:	4a10      	ldr	r2, [pc, #64]	; (80079d0 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800798e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007992:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8007994:	f7ff f9b2 	bl	8006cfc <LL_RCC_GetAHB3Prescaler>
 8007998:	4603      	mov	r3, r0
 800799a:	091b      	lsrs	r3, r3, #4
 800799c:	f003 030f 	and.w	r3, r3, #15
 80079a0:	4a0c      	ldr	r2, [pc, #48]	; (80079d4 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80079a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079a6:	68fa      	ldr	r2, [r7, #12]
 80079a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80079ac:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	4a09      	ldr	r2, [pc, #36]	; (80079d8 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80079b2:	fba2 2303 	umull	r2, r3, r2, r3
 80079b6:	0c9c      	lsrs	r4, r3, #18
 80079b8:	f7fe ff58 	bl	800686c <HAL_PWREx_GetVoltageRange>
 80079bc:	4603      	mov	r3, r0
 80079be:	4619      	mov	r1, r3
 80079c0:	4620      	mov	r0, r4
 80079c2:	f000 f80b 	bl	80079dc <RCC_SetFlashLatency>
 80079c6:	4603      	mov	r3, r0
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	3714      	adds	r7, #20
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd90      	pop	{r4, r7, pc}
 80079d0:	0801f7c4 	.word	0x0801f7c4
 80079d4:	0801f764 	.word	0x0801f764
 80079d8:	431bde83 	.word	0x431bde83

080079dc <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b08e      	sub	sp, #56	; 0x38
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
 80079e4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80079e6:	4a3a      	ldr	r2, [pc, #232]	; (8007ad0 <RCC_SetFlashLatency+0xf4>)
 80079e8:	f107 0320 	add.w	r3, r7, #32
 80079ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80079f0:	6018      	str	r0, [r3, #0]
 80079f2:	3304      	adds	r3, #4
 80079f4:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80079f6:	4a37      	ldr	r2, [pc, #220]	; (8007ad4 <RCC_SetFlashLatency+0xf8>)
 80079f8:	f107 0318 	add.w	r3, r7, #24
 80079fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007a00:	6018      	str	r0, [r3, #0]
 8007a02:	3304      	adds	r3, #4
 8007a04:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8007a06:	4a34      	ldr	r2, [pc, #208]	; (8007ad8 <RCC_SetFlashLatency+0xfc>)
 8007a08:	f107 030c 	add.w	r3, r7, #12
 8007a0c:	ca07      	ldmia	r2, {r0, r1, r2}
 8007a0e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8007a12:	2300      	movs	r3, #0
 8007a14:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a1c:	d11b      	bne.n	8007a56 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007a1e:	2300      	movs	r3, #0
 8007a20:	633b      	str	r3, [r7, #48]	; 0x30
 8007a22:	e014      	b.n	8007a4e <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8007a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a26:	005b      	lsls	r3, r3, #1
 8007a28:	3338      	adds	r3, #56	; 0x38
 8007a2a:	443b      	add	r3, r7
 8007a2c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8007a30:	461a      	mov	r2, r3
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d807      	bhi.n	8007a48 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a3a:	009b      	lsls	r3, r3, #2
 8007a3c:	3338      	adds	r3, #56	; 0x38
 8007a3e:	443b      	add	r3, r7
 8007a40:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8007a44:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a46:	e021      	b.n	8007a8c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a4a:	3301      	adds	r3, #1
 8007a4c:	633b      	str	r3, [r7, #48]	; 0x30
 8007a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a50:	2b02      	cmp	r3, #2
 8007a52:	d9e7      	bls.n	8007a24 <RCC_SetFlashLatency+0x48>
 8007a54:	e01a      	b.n	8007a8c <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007a56:	2300      	movs	r3, #0
 8007a58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a5a:	e014      	b.n	8007a86 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8007a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a5e:	005b      	lsls	r3, r3, #1
 8007a60:	3338      	adds	r3, #56	; 0x38
 8007a62:	443b      	add	r3, r7
 8007a64:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8007a68:	461a      	mov	r2, r3
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d807      	bhi.n	8007a80 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a72:	009b      	lsls	r3, r3, #2
 8007a74:	3338      	adds	r3, #56	; 0x38
 8007a76:	443b      	add	r3, r7
 8007a78:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8007a7c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a7e:	e005      	b.n	8007a8c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a82:	3301      	adds	r3, #1
 8007a84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a88:	2b02      	cmp	r3, #2
 8007a8a:	d9e7      	bls.n	8007a5c <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007a8c:	4b13      	ldr	r3, [pc, #76]	; (8007adc <RCC_SetFlashLatency+0x100>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f023 0207 	bic.w	r2, r3, #7
 8007a94:	4911      	ldr	r1, [pc, #68]	; (8007adc <RCC_SetFlashLatency+0x100>)
 8007a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a98:	4313      	orrs	r3, r2
 8007a9a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007a9c:	f7fa ff24 	bl	80028e8 <HAL_GetTick>
 8007aa0:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007aa2:	e008      	b.n	8007ab6 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007aa4:	f7fa ff20 	bl	80028e8 <HAL_GetTick>
 8007aa8:	4602      	mov	r2, r0
 8007aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aac:	1ad3      	subs	r3, r2, r3
 8007aae:	2b02      	cmp	r3, #2
 8007ab0:	d901      	bls.n	8007ab6 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8007ab2:	2303      	movs	r3, #3
 8007ab4:	e007      	b.n	8007ac6 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007ab6:	4b09      	ldr	r3, [pc, #36]	; (8007adc <RCC_SetFlashLatency+0x100>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f003 0307 	and.w	r3, r3, #7
 8007abe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	d1ef      	bne.n	8007aa4 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8007ac4:	2300      	movs	r3, #0
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3738      	adds	r7, #56	; 0x38
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}
 8007ace:	bf00      	nop
 8007ad0:	0801eeb4 	.word	0x0801eeb4
 8007ad4:	0801eebc 	.word	0x0801eebc
 8007ad8:	0801eec4 	.word	0x0801eec4
 8007adc:	58004000 	.word	0x58004000

08007ae0 <LL_RCC_LSE_IsReady>:
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8007ae4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007aec:	f003 0302 	and.w	r3, r3, #2
 8007af0:	2b02      	cmp	r3, #2
 8007af2:	d101      	bne.n	8007af8 <LL_RCC_LSE_IsReady+0x18>
 8007af4:	2301      	movs	r3, #1
 8007af6:	e000      	b.n	8007afa <LL_RCC_LSE_IsReady+0x1a>
 8007af8:	2300      	movs	r3, #0
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bc80      	pop	{r7}
 8007b00:	4770      	bx	lr

08007b02 <LL_RCC_SetUSARTClockSource>:
{
 8007b02:	b480      	push	{r7}
 8007b04:	b083      	sub	sp, #12
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8007b0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b0e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	0c1b      	lsrs	r3, r3, #16
 8007b16:	43db      	mvns	r3, r3
 8007b18:	401a      	ands	r2, r3
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	b29b      	uxth	r3, r3
 8007b1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007b22:	4313      	orrs	r3, r2
 8007b24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007b28:	bf00      	nop
 8007b2a:	370c      	adds	r7, #12
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bc80      	pop	{r7}
 8007b30:	4770      	bx	lr

08007b32 <LL_RCC_SetI2SClockSource>:
{
 8007b32:	b480      	push	{r7}
 8007b34:	b083      	sub	sp, #12
 8007b36:	af00      	add	r7, sp, #0
 8007b38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8007b3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b42:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007b46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007b52:	bf00      	nop
 8007b54:	370c      	adds	r7, #12
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bc80      	pop	{r7}
 8007b5a:	4770      	bx	lr

08007b5c <LL_RCC_SetLPUARTClockSource>:
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b083      	sub	sp, #12
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8007b64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b6c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007b70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	4313      	orrs	r3, r2
 8007b78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007b7c:	bf00      	nop
 8007b7e:	370c      	adds	r7, #12
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bc80      	pop	{r7}
 8007b84:	4770      	bx	lr

08007b86 <LL_RCC_SetI2CClockSource>:
{
 8007b86:	b480      	push	{r7}
 8007b88:	b083      	sub	sp, #12
 8007b8a:	af00      	add	r7, sp, #0
 8007b8c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8007b8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b92:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	091b      	lsrs	r3, r3, #4
 8007b9a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8007b9e:	43db      	mvns	r3, r3
 8007ba0:	401a      	ands	r2, r3
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	011b      	lsls	r3, r3, #4
 8007ba6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8007baa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007bb4:	bf00      	nop
 8007bb6:	370c      	adds	r7, #12
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bc80      	pop	{r7}
 8007bbc:	4770      	bx	lr

08007bbe <LL_RCC_SetLPTIMClockSource>:
{
 8007bbe:	b480      	push	{r7}
 8007bc0:	b083      	sub	sp, #12
 8007bc2:	af00      	add	r7, sp, #0
 8007bc4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8007bc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007bca:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	0c1b      	lsrs	r3, r3, #16
 8007bd2:	041b      	lsls	r3, r3, #16
 8007bd4:	43db      	mvns	r3, r3
 8007bd6:	401a      	ands	r2, r3
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	041b      	lsls	r3, r3, #16
 8007bdc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007be0:	4313      	orrs	r3, r2
 8007be2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007be6:	bf00      	nop
 8007be8:	370c      	adds	r7, #12
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bc80      	pop	{r7}
 8007bee:	4770      	bx	lr

08007bf0 <LL_RCC_SetRNGClockSource>:
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b083      	sub	sp, #12
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8007bf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c00:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8007c04:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007c10:	bf00      	nop
 8007c12:	370c      	adds	r7, #12
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bc80      	pop	{r7}
 8007c18:	4770      	bx	lr

08007c1a <LL_RCC_SetADCClockSource>:
{
 8007c1a:	b480      	push	{r7}
 8007c1c:	b083      	sub	sp, #12
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8007c22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c2a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007c2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	4313      	orrs	r3, r2
 8007c36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007c3a:	bf00      	nop
 8007c3c:	370c      	adds	r7, #12
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bc80      	pop	{r7}
 8007c42:	4770      	bx	lr

08007c44 <LL_RCC_SetRTCClockSource>:
{
 8007c44:	b480      	push	{r7}
 8007c46:	b083      	sub	sp, #12
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8007c4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007c58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8007c64:	bf00      	nop
 8007c66:	370c      	adds	r7, #12
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bc80      	pop	{r7}
 8007c6c:	4770      	bx	lr

08007c6e <LL_RCC_GetRTCClockSource>:
{
 8007c6e:	b480      	push	{r7}
 8007c70:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8007c72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bc80      	pop	{r7}
 8007c84:	4770      	bx	lr

08007c86 <LL_RCC_ForceBackupDomainReset>:
{
 8007c86:	b480      	push	{r7}
 8007c88:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007c8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007c96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007c9e:	bf00      	nop
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bc80      	pop	{r7}
 8007ca4:	4770      	bx	lr

08007ca6 <LL_RCC_ReleaseBackupDomainReset>:
{
 8007ca6:	b480      	push	{r7}
 8007ca8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007caa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cb2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007cb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007cba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007cbe:	bf00      	nop
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bc80      	pop	{r7}
 8007cc4:	4770      	bx	lr
	...

08007cc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b086      	sub	sp, #24
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8007cd8:	2300      	movs	r3, #0
 8007cda:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d058      	beq.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8007ce8:	f7fe fd7e 	bl	80067e8 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007cec:	f7fa fdfc 	bl	80028e8 <HAL_GetTick>
 8007cf0:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8007cf2:	e009      	b.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007cf4:	f7fa fdf8 	bl	80028e8 <HAL_GetTick>
 8007cf8:	4602      	mov	r2, r0
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	1ad3      	subs	r3, r2, r3
 8007cfe:	2b02      	cmp	r3, #2
 8007d00:	d902      	bls.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8007d02:	2303      	movs	r3, #3
 8007d04:	74fb      	strb	r3, [r7, #19]
        break;
 8007d06:	e006      	b.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8007d08:	4b7b      	ldr	r3, [pc, #492]	; (8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d14:	d1ee      	bne.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8007d16:	7cfb      	ldrb	r3, [r7, #19]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d13c      	bne.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8007d1c:	f7ff ffa7 	bl	8007c6e <LL_RCC_GetRTCClockSource>
 8007d20:	4602      	mov	r2, r0
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d26:	429a      	cmp	r2, r3
 8007d28:	d00f      	beq.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007d2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d36:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007d38:	f7ff ffa5 	bl	8007c86 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007d3c:	f7ff ffb3 	bl	8007ca6 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007d40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	f003 0302 	and.w	r3, r3, #2
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d014      	beq.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d54:	f7fa fdc8 	bl	80028e8 <HAL_GetTick>
 8007d58:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8007d5a:	e00b      	b.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d5c:	f7fa fdc4 	bl	80028e8 <HAL_GetTick>
 8007d60:	4602      	mov	r2, r0
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	1ad3      	subs	r3, r2, r3
 8007d66:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d902      	bls.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8007d6e:	2303      	movs	r3, #3
 8007d70:	74fb      	strb	r3, [r7, #19]
            break;
 8007d72:	e004      	b.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8007d74:	f7ff feb4 	bl	8007ae0 <LL_RCC_LSE_IsReady>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	2b01      	cmp	r3, #1
 8007d7c:	d1ee      	bne.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8007d7e:	7cfb      	ldrb	r3, [r7, #19]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d105      	bne.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d88:	4618      	mov	r0, r3
 8007d8a:	f7ff ff5b 	bl	8007c44 <LL_RCC_SetRTCClockSource>
 8007d8e:	e004      	b.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007d90:	7cfb      	ldrb	r3, [r7, #19]
 8007d92:	74bb      	strb	r3, [r7, #18]
 8007d94:	e001      	b.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d96:	7cfb      	ldrb	r3, [r7, #19]
 8007d98:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f003 0301 	and.w	r3, r3, #1
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d004      	beq.n	8007db0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	685b      	ldr	r3, [r3, #4]
 8007daa:	4618      	mov	r0, r3
 8007dac:	f7ff fea9 	bl	8007b02 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f003 0302 	and.w	r3, r3, #2
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d004      	beq.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	689b      	ldr	r3, [r3, #8]
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	f7ff fe9e 	bl	8007b02 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f003 0320 	and.w	r3, r3, #32
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d004      	beq.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	691b      	ldr	r3, [r3, #16]
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	f7ff fec0 	bl	8007b5c <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d004      	beq.n	8007df2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6a1b      	ldr	r3, [r3, #32]
 8007dec:	4618      	mov	r0, r3
 8007dee:	f7ff fee6 	bl	8007bbe <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d004      	beq.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e02:	4618      	mov	r0, r3
 8007e04:	f7ff fedb 	bl	8007bbe <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d004      	beq.n	8007e1e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f7ff fed0 	bl	8007bbe <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d004      	beq.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	695b      	ldr	r3, [r3, #20]
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f7ff fea9 	bl	8007b86 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d004      	beq.n	8007e4a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	699b      	ldr	r3, [r3, #24]
 8007e44:	4618      	mov	r0, r3
 8007e46:	f7ff fe9e 	bl	8007b86 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d004      	beq.n	8007e60 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	69db      	ldr	r3, [r3, #28]
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f7ff fe93 	bl	8007b86 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f003 0310 	and.w	r3, r3, #16
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d011      	beq.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	68db      	ldr	r3, [r3, #12]
 8007e70:	4618      	mov	r0, r3
 8007e72:	f7ff fe5e 	bl	8007b32 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	68db      	ldr	r3, [r3, #12]
 8007e7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e7e:	d107      	bne.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8007e80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e84:	68db      	ldr	r3, [r3, #12]
 8007e86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007e8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007e8e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d010      	beq.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f7ff fea5 	bl	8007bf0 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d107      	bne.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8007eae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007eb2:	68db      	ldr	r3, [r3, #12]
 8007eb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007eb8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007ebc:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d011      	beq.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f7ff fea3 	bl	8007c1a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ed8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007edc:	d107      	bne.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007ede:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ee2:	68db      	ldr	r3, [r3, #12]
 8007ee4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007ee8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007eec:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8007eee:	7cbb      	ldrb	r3, [r7, #18]
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3718      	adds	r7, #24
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}
 8007ef8:	58000400 	.word	0x58000400

08007efc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b084      	sub	sp, #16
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007f04:	2301      	movs	r3, #1
 8007f06:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d071      	beq.n	8007ff2 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007f14:	b2db      	uxtb	r3, r3
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d106      	bne.n	8007f28 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f7fa fa30 	bl	8002388 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2202      	movs	r2, #2
 8007f2c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007f30:	4b32      	ldr	r3, [pc, #200]	; (8007ffc <HAL_RTC_Init+0x100>)
 8007f32:	68db      	ldr	r3, [r3, #12]
 8007f34:	f003 0310 	and.w	r3, r3, #16
 8007f38:	2b10      	cmp	r3, #16
 8007f3a:	d051      	beq.n	8007fe0 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007f3c:	4b2f      	ldr	r3, [pc, #188]	; (8007ffc <HAL_RTC_Init+0x100>)
 8007f3e:	22ca      	movs	r2, #202	; 0xca
 8007f40:	625a      	str	r2, [r3, #36]	; 0x24
 8007f42:	4b2e      	ldr	r3, [pc, #184]	; (8007ffc <HAL_RTC_Init+0x100>)
 8007f44:	2253      	movs	r2, #83	; 0x53
 8007f46:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f000 fa11 	bl	8008370 <RTC_EnterInitMode>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8007f52:	7bfb      	ldrb	r3, [r7, #15]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d13f      	bne.n	8007fd8 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8007f58:	4b28      	ldr	r3, [pc, #160]	; (8007ffc <HAL_RTC_Init+0x100>)
 8007f5a:	699b      	ldr	r3, [r3, #24]
 8007f5c:	4a27      	ldr	r2, [pc, #156]	; (8007ffc <HAL_RTC_Init+0x100>)
 8007f5e:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8007f62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f66:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8007f68:	4b24      	ldr	r3, [pc, #144]	; (8007ffc <HAL_RTC_Init+0x100>)
 8007f6a:	699a      	ldr	r2, [r3, #24]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6859      	ldr	r1, [r3, #4]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	691b      	ldr	r3, [r3, #16]
 8007f74:	4319      	orrs	r1, r3
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	699b      	ldr	r3, [r3, #24]
 8007f7a:	430b      	orrs	r3, r1
 8007f7c:	491f      	ldr	r1, [pc, #124]	; (8007ffc <HAL_RTC_Init+0x100>)
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	68da      	ldr	r2, [r3, #12]
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	689b      	ldr	r3, [r3, #8]
 8007f8a:	041b      	lsls	r3, r3, #16
 8007f8c:	491b      	ldr	r1, [pc, #108]	; (8007ffc <HAL_RTC_Init+0x100>)
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8007f92:	4b1a      	ldr	r3, [pc, #104]	; (8007ffc <HAL_RTC_Init+0x100>)
 8007f94:	68db      	ldr	r3, [r3, #12]
 8007f96:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fa2:	430b      	orrs	r3, r1
 8007fa4:	4915      	ldr	r1, [pc, #84]	; (8007ffc <HAL_RTC_Init+0x100>)
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f000 fa14 	bl	80083d8 <RTC_ExitInitMode>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8007fb4:	7bfb      	ldrb	r3, [r7, #15]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d10e      	bne.n	8007fd8 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 8007fba:	4b10      	ldr	r3, [pc, #64]	; (8007ffc <HAL_RTC_Init+0x100>)
 8007fbc:	699b      	ldr	r3, [r3, #24]
 8007fbe:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6a19      	ldr	r1, [r3, #32]
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	69db      	ldr	r3, [r3, #28]
 8007fca:	4319      	orrs	r1, r3
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	695b      	ldr	r3, [r3, #20]
 8007fd0:	430b      	orrs	r3, r1
 8007fd2:	490a      	ldr	r1, [pc, #40]	; (8007ffc <HAL_RTC_Init+0x100>)
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007fd8:	4b08      	ldr	r3, [pc, #32]	; (8007ffc <HAL_RTC_Init+0x100>)
 8007fda:	22ff      	movs	r2, #255	; 0xff
 8007fdc:	625a      	str	r2, [r3, #36]	; 0x24
 8007fde:	e001      	b.n	8007fe4 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8007fe4:	7bfb      	ldrb	r3, [r7, #15]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d103      	bne.n	8007ff2 <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2201      	movs	r2, #1
 8007fee:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8007ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3710      	adds	r7, #16
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}
 8007ffc:	40002800 	.word	0x40002800

08008000 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008000:	b590      	push	{r4, r7, lr}
 8008002:	b087      	sub	sp, #28
 8008004:	af00      	add	r7, sp, #0
 8008006:	60f8      	str	r0, [r7, #12]
 8008008:	60b9      	str	r1, [r7, #8]
 800800a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800800c:	2300      	movs	r3, #0
 800800e:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008016:	2b01      	cmp	r3, #1
 8008018:	d101      	bne.n	800801e <HAL_RTC_SetAlarm_IT+0x1e>
 800801a:	2302      	movs	r3, #2
 800801c:	e0f3      	b.n	8008206 <HAL_RTC_SetAlarm_IT+0x206>
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	2201      	movs	r2, #1
 8008022:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	2202      	movs	r2, #2
 800802a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 800802e:	4b78      	ldr	r3, [pc, #480]	; (8008210 <HAL_RTC_SetAlarm_IT+0x210>)
 8008030:	68db      	ldr	r3, [r3, #12]
 8008032:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008036:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800803e:	d06a      	beq.n	8008116 <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d13a      	bne.n	80080bc <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8008046:	4b72      	ldr	r3, [pc, #456]	; (8008210 <HAL_RTC_SetAlarm_IT+0x210>)
 8008048:	699b      	ldr	r3, [r3, #24]
 800804a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800804e:	2b00      	cmp	r3, #0
 8008050:	d102      	bne.n	8008058 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	2200      	movs	r2, #0
 8008056:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	695b      	ldr	r3, [r3, #20]
 800805c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	781b      	ldrb	r3, [r3, #0]
 8008064:	4618      	mov	r0, r3
 8008066:	f000 f9f5 	bl	8008454 <RTC_ByteToBcd2>
 800806a:	4603      	mov	r3, r0
 800806c:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	785b      	ldrb	r3, [r3, #1]
 8008072:	4618      	mov	r0, r3
 8008074:	f000 f9ee 	bl	8008454 <RTC_ByteToBcd2>
 8008078:	4603      	mov	r3, r0
 800807a:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800807c:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	789b      	ldrb	r3, [r3, #2]
 8008082:	4618      	mov	r0, r3
 8008084:	f000 f9e6 	bl	8008454 <RTC_ByteToBcd2>
 8008088:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800808a:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	78db      	ldrb	r3, [r3, #3]
 8008092:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8008094:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800809e:	4618      	mov	r0, r3
 80080a0:	f000 f9d8 	bl	8008454 <RTC_ByteToBcd2>
 80080a4:	4603      	mov	r3, r0
 80080a6:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80080a8:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80080b0:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80080b6:	4313      	orrs	r3, r2
 80080b8:	617b      	str	r3, [r7, #20]
 80080ba:	e02c      	b.n	8008116 <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	695b      	ldr	r3, [r3, #20]
 80080c0:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 80080c4:	d00d      	beq.n	80080e2 <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	695b      	ldr	r3, [r3, #20]
 80080ca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80080ce:	d008      	beq.n	80080e2 <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80080d0:	4b4f      	ldr	r3, [pc, #316]	; (8008210 <HAL_RTC_SetAlarm_IT+0x210>)
 80080d2:	699b      	ldr	r3, [r3, #24]
 80080d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d102      	bne.n	80080e2 <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	2200      	movs	r2, #0
 80080e0:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	781b      	ldrb	r3, [r3, #0]
 80080e6:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	785b      	ldrb	r3, [r3, #1]
 80080ec:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80080ee:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80080f0:	68ba      	ldr	r2, [r7, #8]
 80080f2:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80080f4:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	78db      	ldrb	r3, [r3, #3]
 80080fa:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80080fc:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008104:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8008106:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800810c:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008112:	4313      	orrs	r3, r2
 8008114:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008116:	4b3e      	ldr	r3, [pc, #248]	; (8008210 <HAL_RTC_SetAlarm_IT+0x210>)
 8008118:	22ca      	movs	r2, #202	; 0xca
 800811a:	625a      	str	r2, [r3, #36]	; 0x24
 800811c:	4b3c      	ldr	r3, [pc, #240]	; (8008210 <HAL_RTC_SetAlarm_IT+0x210>)
 800811e:	2253      	movs	r2, #83	; 0x53
 8008120:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008126:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800812a:	d12c      	bne.n	8008186 <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800812c:	4b38      	ldr	r3, [pc, #224]	; (8008210 <HAL_RTC_SetAlarm_IT+0x210>)
 800812e:	699b      	ldr	r3, [r3, #24]
 8008130:	4a37      	ldr	r2, [pc, #220]	; (8008210 <HAL_RTC_SetAlarm_IT+0x210>)
 8008132:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008136:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8008138:	4b35      	ldr	r3, [pc, #212]	; (8008210 <HAL_RTC_SetAlarm_IT+0x210>)
 800813a:	2201      	movs	r2, #1
 800813c:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008144:	d107      	bne.n	8008156 <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	699a      	ldr	r2, [r3, #24]
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	69db      	ldr	r3, [r3, #28]
 800814e:	4930      	ldr	r1, [pc, #192]	; (8008210 <HAL_RTC_SetAlarm_IT+0x210>)
 8008150:	4313      	orrs	r3, r2
 8008152:	644b      	str	r3, [r1, #68]	; 0x44
 8008154:	e006      	b.n	8008164 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8008156:	4a2e      	ldr	r2, [pc, #184]	; (8008210 <HAL_RTC_SetAlarm_IT+0x210>)
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 800815c:	4a2c      	ldr	r2, [pc, #176]	; (8008210 <HAL_RTC_SetAlarm_IT+0x210>)
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	699b      	ldr	r3, [r3, #24]
 8008162:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8008164:	4a2a      	ldr	r2, [pc, #168]	; (8008210 <HAL_RTC_SetAlarm_IT+0x210>)
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	685b      	ldr	r3, [r3, #4]
 800816a:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008170:	f043 0201 	orr.w	r2, r3, #1
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8008178:	4b25      	ldr	r3, [pc, #148]	; (8008210 <HAL_RTC_SetAlarm_IT+0x210>)
 800817a:	699b      	ldr	r3, [r3, #24]
 800817c:	4a24      	ldr	r2, [pc, #144]	; (8008210 <HAL_RTC_SetAlarm_IT+0x210>)
 800817e:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8008182:	6193      	str	r3, [r2, #24]
 8008184:	e02b      	b.n	80081de <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8008186:	4b22      	ldr	r3, [pc, #136]	; (8008210 <HAL_RTC_SetAlarm_IT+0x210>)
 8008188:	699b      	ldr	r3, [r3, #24]
 800818a:	4a21      	ldr	r2, [pc, #132]	; (8008210 <HAL_RTC_SetAlarm_IT+0x210>)
 800818c:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8008190:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8008192:	4b1f      	ldr	r3, [pc, #124]	; (8008210 <HAL_RTC_SetAlarm_IT+0x210>)
 8008194:	2202      	movs	r2, #2
 8008196:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8008198:	693b      	ldr	r3, [r7, #16]
 800819a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800819e:	d107      	bne.n	80081b0 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	699a      	ldr	r2, [r3, #24]
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	69db      	ldr	r3, [r3, #28]
 80081a8:	4919      	ldr	r1, [pc, #100]	; (8008210 <HAL_RTC_SetAlarm_IT+0x210>)
 80081aa:	4313      	orrs	r3, r2
 80081ac:	64cb      	str	r3, [r1, #76]	; 0x4c
 80081ae:	e006      	b.n	80081be <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 80081b0:	4a17      	ldr	r2, [pc, #92]	; (8008210 <HAL_RTC_SetAlarm_IT+0x210>)
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 80081b6:	4a16      	ldr	r2, [pc, #88]	; (8008210 <HAL_RTC_SetAlarm_IT+0x210>)
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	699b      	ldr	r3, [r3, #24]
 80081bc:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 80081be:	4a14      	ldr	r2, [pc, #80]	; (8008210 <HAL_RTC_SetAlarm_IT+0x210>)
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081ca:	f043 0202 	orr.w	r2, r3, #2
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80081d2:	4b0f      	ldr	r3, [pc, #60]	; (8008210 <HAL_RTC_SetAlarm_IT+0x210>)
 80081d4:	699b      	ldr	r3, [r3, #24]
 80081d6:	4a0e      	ldr	r2, [pc, #56]	; (8008210 <HAL_RTC_SetAlarm_IT+0x210>)
 80081d8:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 80081dc:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80081de:	4b0d      	ldr	r3, [pc, #52]	; (8008214 <HAL_RTC_SetAlarm_IT+0x214>)
 80081e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80081e4:	4a0b      	ldr	r2, [pc, #44]	; (8008214 <HAL_RTC_SetAlarm_IT+0x214>)
 80081e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80081ea:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80081ee:	4b08      	ldr	r3, [pc, #32]	; (8008210 <HAL_RTC_SetAlarm_IT+0x210>)
 80081f0:	22ff      	movs	r2, #255	; 0xff
 80081f2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	2201      	movs	r2, #1
 80081f8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	2200      	movs	r2, #0
 8008200:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008204:	2300      	movs	r3, #0
}
 8008206:	4618      	mov	r0, r3
 8008208:	371c      	adds	r7, #28
 800820a:	46bd      	mov	sp, r7
 800820c:	bd90      	pop	{r4, r7, pc}
 800820e:	bf00      	nop
 8008210:	40002800 	.word	0x40002800
 8008214:	58000800 	.word	0x58000800

08008218 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8008218:	b480      	push	{r7}
 800821a:	b083      	sub	sp, #12
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
 8008220:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008228:	2b01      	cmp	r3, #1
 800822a:	d101      	bne.n	8008230 <HAL_RTC_DeactivateAlarm+0x18>
 800822c:	2302      	movs	r3, #2
 800822e:	e048      	b.n	80082c2 <HAL_RTC_DeactivateAlarm+0xaa>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2201      	movs	r2, #1
 8008234:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2202      	movs	r2, #2
 800823c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008240:	4b22      	ldr	r3, [pc, #136]	; (80082cc <HAL_RTC_DeactivateAlarm+0xb4>)
 8008242:	22ca      	movs	r2, #202	; 0xca
 8008244:	625a      	str	r2, [r3, #36]	; 0x24
 8008246:	4b21      	ldr	r3, [pc, #132]	; (80082cc <HAL_RTC_DeactivateAlarm+0xb4>)
 8008248:	2253      	movs	r2, #83	; 0x53
 800824a:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008252:	d115      	bne.n	8008280 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8008254:	4b1d      	ldr	r3, [pc, #116]	; (80082cc <HAL_RTC_DeactivateAlarm+0xb4>)
 8008256:	699b      	ldr	r3, [r3, #24]
 8008258:	4a1c      	ldr	r2, [pc, #112]	; (80082cc <HAL_RTC_DeactivateAlarm+0xb4>)
 800825a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800825e:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8008260:	4b1a      	ldr	r3, [pc, #104]	; (80082cc <HAL_RTC_DeactivateAlarm+0xb4>)
 8008262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008264:	4a19      	ldr	r2, [pc, #100]	; (80082cc <HAL_RTC_DeactivateAlarm+0xb4>)
 8008266:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800826a:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008270:	f023 0201 	bic.w	r2, r3, #1
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8008278:	4b14      	ldr	r3, [pc, #80]	; (80082cc <HAL_RTC_DeactivateAlarm+0xb4>)
 800827a:	2201      	movs	r2, #1
 800827c:	65da      	str	r2, [r3, #92]	; 0x5c
 800827e:	e014      	b.n	80082aa <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8008280:	4b12      	ldr	r3, [pc, #72]	; (80082cc <HAL_RTC_DeactivateAlarm+0xb4>)
 8008282:	699b      	ldr	r3, [r3, #24]
 8008284:	4a11      	ldr	r2, [pc, #68]	; (80082cc <HAL_RTC_DeactivateAlarm+0xb4>)
 8008286:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 800828a:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 800828c:	4b0f      	ldr	r3, [pc, #60]	; (80082cc <HAL_RTC_DeactivateAlarm+0xb4>)
 800828e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008290:	4a0e      	ldr	r2, [pc, #56]	; (80082cc <HAL_RTC_DeactivateAlarm+0xb4>)
 8008292:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008296:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800829c:	f023 0202 	bic.w	r2, r3, #2
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80082a4:	4b09      	ldr	r3, [pc, #36]	; (80082cc <HAL_RTC_DeactivateAlarm+0xb4>)
 80082a6:	2202      	movs	r2, #2
 80082a8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80082aa:	4b08      	ldr	r3, [pc, #32]	; (80082cc <HAL_RTC_DeactivateAlarm+0xb4>)
 80082ac:	22ff      	movs	r2, #255	; 0xff
 80082ae:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2201      	movs	r2, #1
 80082b4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2200      	movs	r2, #0
 80082bc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80082c0:	2300      	movs	r3, #0
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	370c      	adds	r7, #12
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bc80      	pop	{r7}
 80082ca:	4770      	bx	lr
 80082cc:	40002800 	.word	0x40002800

080082d0 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b084      	sub	sp, #16
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 80082d8:	4b11      	ldr	r3, [pc, #68]	; (8008320 <HAL_RTC_AlarmIRQHandler+0x50>)
 80082da:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082e0:	4013      	ands	r3, r2
 80082e2:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	f003 0301 	and.w	r3, r3, #1
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d005      	beq.n	80082fa <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80082ee:	4b0c      	ldr	r3, [pc, #48]	; (8008320 <HAL_RTC_AlarmIRQHandler+0x50>)
 80082f0:	2201      	movs	r2, #1
 80082f2:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f7fa fd36 	bl	8002d66 <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	f003 0302 	and.w	r3, r3, #2
 8008300:	2b00      	cmp	r3, #0
 8008302:	d005      	beq.n	8008310 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8008304:	4b06      	ldr	r3, [pc, #24]	; (8008320 <HAL_RTC_AlarmIRQHandler+0x50>)
 8008306:	2202      	movs	r2, #2
 8008308:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f000 f94a 	bl	80085a4 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2201      	movs	r2, #1
 8008314:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8008318:	bf00      	nop
 800831a:	3710      	adds	r7, #16
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}
 8008320:	40002800 	.word	0x40002800

08008324 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b084      	sub	sp, #16
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800832c:	4b0f      	ldr	r3, [pc, #60]	; (800836c <HAL_RTC_WaitForSynchro+0x48>)
 800832e:	68db      	ldr	r3, [r3, #12]
 8008330:	4a0e      	ldr	r2, [pc, #56]	; (800836c <HAL_RTC_WaitForSynchro+0x48>)
 8008332:	f023 0320 	bic.w	r3, r3, #32
 8008336:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8008338:	f7fa fad6 	bl	80028e8 <HAL_GetTick>
 800833c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800833e:	e009      	b.n	8008354 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008340:	f7fa fad2 	bl	80028e8 <HAL_GetTick>
 8008344:	4602      	mov	r2, r0
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	1ad3      	subs	r3, r2, r3
 800834a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800834e:	d901      	bls.n	8008354 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8008350:	2303      	movs	r3, #3
 8008352:	e006      	b.n	8008362 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8008354:	4b05      	ldr	r3, [pc, #20]	; (800836c <HAL_RTC_WaitForSynchro+0x48>)
 8008356:	68db      	ldr	r3, [r3, #12]
 8008358:	f003 0320 	and.w	r3, r3, #32
 800835c:	2b00      	cmp	r3, #0
 800835e:	d0ef      	beq.n	8008340 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8008360:	2300      	movs	r3, #0
}
 8008362:	4618      	mov	r0, r3
 8008364:	3710      	adds	r7, #16
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}
 800836a:	bf00      	nop
 800836c:	40002800 	.word	0x40002800

08008370 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b084      	sub	sp, #16
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008378:	2300      	movs	r3, #0
 800837a:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800837c:	4b15      	ldr	r3, [pc, #84]	; (80083d4 <RTC_EnterInitMode+0x64>)
 800837e:	68db      	ldr	r3, [r3, #12]
 8008380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008384:	2b00      	cmp	r3, #0
 8008386:	d120      	bne.n	80083ca <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8008388:	4b12      	ldr	r3, [pc, #72]	; (80083d4 <RTC_EnterInitMode+0x64>)
 800838a:	68db      	ldr	r3, [r3, #12]
 800838c:	4a11      	ldr	r2, [pc, #68]	; (80083d4 <RTC_EnterInitMode+0x64>)
 800838e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008392:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8008394:	f7fa faa8 	bl	80028e8 <HAL_GetTick>
 8008398:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800839a:	e00d      	b.n	80083b8 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800839c:	f7fa faa4 	bl	80028e8 <HAL_GetTick>
 80083a0:	4602      	mov	r2, r0
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	1ad3      	subs	r3, r2, r3
 80083a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80083aa:	d905      	bls.n	80083b8 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80083ac:	2303      	movs	r3, #3
 80083ae:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2203      	movs	r2, #3
 80083b4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80083b8:	4b06      	ldr	r3, [pc, #24]	; (80083d4 <RTC_EnterInitMode+0x64>)
 80083ba:	68db      	ldr	r3, [r3, #12]
 80083bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d102      	bne.n	80083ca <RTC_EnterInitMode+0x5a>
 80083c4:	7bfb      	ldrb	r3, [r7, #15]
 80083c6:	2b03      	cmp	r3, #3
 80083c8:	d1e8      	bne.n	800839c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 80083ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3710      	adds	r7, #16
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}
 80083d4:	40002800 	.word	0x40002800

080083d8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b084      	sub	sp, #16
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80083e0:	2300      	movs	r3, #0
 80083e2:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80083e4:	4b1a      	ldr	r3, [pc, #104]	; (8008450 <RTC_ExitInitMode+0x78>)
 80083e6:	68db      	ldr	r3, [r3, #12]
 80083e8:	4a19      	ldr	r2, [pc, #100]	; (8008450 <RTC_ExitInitMode+0x78>)
 80083ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80083ee:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80083f0:	4b17      	ldr	r3, [pc, #92]	; (8008450 <RTC_ExitInitMode+0x78>)
 80083f2:	699b      	ldr	r3, [r3, #24]
 80083f4:	f003 0320 	and.w	r3, r3, #32
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d10c      	bne.n	8008416 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f7ff ff91 	bl	8008324 <HAL_RTC_WaitForSynchro>
 8008402:	4603      	mov	r3, r0
 8008404:	2b00      	cmp	r3, #0
 8008406:	d01e      	beq.n	8008446 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2203      	movs	r2, #3
 800840c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8008410:	2303      	movs	r3, #3
 8008412:	73fb      	strb	r3, [r7, #15]
 8008414:	e017      	b.n	8008446 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008416:	4b0e      	ldr	r3, [pc, #56]	; (8008450 <RTC_ExitInitMode+0x78>)
 8008418:	699b      	ldr	r3, [r3, #24]
 800841a:	4a0d      	ldr	r2, [pc, #52]	; (8008450 <RTC_ExitInitMode+0x78>)
 800841c:	f023 0320 	bic.w	r3, r3, #32
 8008420:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f7ff ff7e 	bl	8008324 <HAL_RTC_WaitForSynchro>
 8008428:	4603      	mov	r3, r0
 800842a:	2b00      	cmp	r3, #0
 800842c:	d005      	beq.n	800843a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2203      	movs	r2, #3
 8008432:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8008436:	2303      	movs	r3, #3
 8008438:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800843a:	4b05      	ldr	r3, [pc, #20]	; (8008450 <RTC_ExitInitMode+0x78>)
 800843c:	699b      	ldr	r3, [r3, #24]
 800843e:	4a04      	ldr	r2, [pc, #16]	; (8008450 <RTC_ExitInitMode+0x78>)
 8008440:	f043 0320 	orr.w	r3, r3, #32
 8008444:	6193      	str	r3, [r2, #24]
  }

  return status;
 8008446:	7bfb      	ldrb	r3, [r7, #15]
}
 8008448:	4618      	mov	r0, r3
 800844a:	3710      	adds	r7, #16
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}
 8008450:	40002800 	.word	0x40002800

08008454 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008454:	b480      	push	{r7}
 8008456:	b085      	sub	sp, #20
 8008458:	af00      	add	r7, sp, #0
 800845a:	4603      	mov	r3, r0
 800845c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800845e:	2300      	movs	r3, #0
 8008460:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8008462:	79fb      	ldrb	r3, [r7, #7]
 8008464:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8008466:	e005      	b.n	8008474 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	3301      	adds	r3, #1
 800846c:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 800846e:	7afb      	ldrb	r3, [r7, #11]
 8008470:	3b0a      	subs	r3, #10
 8008472:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8008474:	7afb      	ldrb	r3, [r7, #11]
 8008476:	2b09      	cmp	r3, #9
 8008478:	d8f6      	bhi.n	8008468 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	b2db      	uxtb	r3, r3
 800847e:	011b      	lsls	r3, r3, #4
 8008480:	b2da      	uxtb	r2, r3
 8008482:	7afb      	ldrb	r3, [r7, #11]
 8008484:	4313      	orrs	r3, r2
 8008486:	b2db      	uxtb	r3, r3
}
 8008488:	4618      	mov	r0, r3
 800848a:	3714      	adds	r7, #20
 800848c:	46bd      	mov	sp, r7
 800848e:	bc80      	pop	{r7}
 8008490:	4770      	bx	lr
	...

08008494 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8008494:	b480      	push	{r7}
 8008496:	b083      	sub	sp, #12
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80084a2:	2b01      	cmp	r3, #1
 80084a4:	d101      	bne.n	80084aa <HAL_RTCEx_EnableBypassShadow+0x16>
 80084a6:	2302      	movs	r3, #2
 80084a8:	e01f      	b.n	80084ea <HAL_RTCEx_EnableBypassShadow+0x56>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2201      	movs	r2, #1
 80084ae:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2202      	movs	r2, #2
 80084b6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80084ba:	4b0e      	ldr	r3, [pc, #56]	; (80084f4 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80084bc:	22ca      	movs	r2, #202	; 0xca
 80084be:	625a      	str	r2, [r3, #36]	; 0x24
 80084c0:	4b0c      	ldr	r3, [pc, #48]	; (80084f4 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80084c2:	2253      	movs	r2, #83	; 0x53
 80084c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80084c6:	4b0b      	ldr	r3, [pc, #44]	; (80084f4 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80084c8:	699b      	ldr	r3, [r3, #24]
 80084ca:	4a0a      	ldr	r2, [pc, #40]	; (80084f4 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80084cc:	f043 0320 	orr.w	r3, r3, #32
 80084d0:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80084d2:	4b08      	ldr	r3, [pc, #32]	; (80084f4 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80084d4:	22ff      	movs	r2, #255	; 0xff
 80084d6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2201      	movs	r2, #1
 80084dc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2200      	movs	r2, #0
 80084e4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80084e8:	2300      	movs	r3, #0
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	370c      	adds	r7, #12
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bc80      	pop	{r7}
 80084f2:	4770      	bx	lr
 80084f4:	40002800 	.word	0x40002800

080084f8 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b083      	sub	sp, #12
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008506:	2b01      	cmp	r3, #1
 8008508:	d101      	bne.n	800850e <HAL_RTCEx_SetSSRU_IT+0x16>
 800850a:	2302      	movs	r3, #2
 800850c:	e027      	b.n	800855e <HAL_RTCEx_SetSSRU_IT+0x66>
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2201      	movs	r2, #1
 8008512:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2202      	movs	r2, #2
 800851a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800851e:	4b12      	ldr	r3, [pc, #72]	; (8008568 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8008520:	22ca      	movs	r2, #202	; 0xca
 8008522:	625a      	str	r2, [r3, #36]	; 0x24
 8008524:	4b10      	ldr	r3, [pc, #64]	; (8008568 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8008526:	2253      	movs	r2, #83	; 0x53
 8008528:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 800852a:	4b0f      	ldr	r3, [pc, #60]	; (8008568 <HAL_RTCEx_SetSSRU_IT+0x70>)
 800852c:	699b      	ldr	r3, [r3, #24]
 800852e:	4a0e      	ldr	r2, [pc, #56]	; (8008568 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8008530:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008534:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8008536:	4b0d      	ldr	r3, [pc, #52]	; (800856c <HAL_RTCEx_SetSSRU_IT+0x74>)
 8008538:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800853c:	4a0b      	ldr	r2, [pc, #44]	; (800856c <HAL_RTCEx_SetSSRU_IT+0x74>)
 800853e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008542:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008546:	4b08      	ldr	r3, [pc, #32]	; (8008568 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8008548:	22ff      	movs	r2, #255	; 0xff
 800854a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2201      	movs	r2, #1
 8008550:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2200      	movs	r2, #0
 8008558:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800855c:	2300      	movs	r3, #0
}
 800855e:	4618      	mov	r0, r3
 8008560:	370c      	adds	r7, #12
 8008562:	46bd      	mov	sp, r7
 8008564:	bc80      	pop	{r7}
 8008566:	4770      	bx	lr
 8008568:	40002800 	.word	0x40002800
 800856c:	58000800 	.word	0x58000800

08008570 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b082      	sub	sp, #8
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8008578:	4b09      	ldr	r3, [pc, #36]	; (80085a0 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 800857a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800857c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008580:	2b00      	cmp	r3, #0
 8008582:	d005      	beq.n	8008590 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 8008584:	4b06      	ldr	r3, [pc, #24]	; (80085a0 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8008586:	2240      	movs	r2, #64	; 0x40
 8008588:	65da      	str	r2, [r3, #92]	; 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f7fa fbf5 	bl	8002d7a <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2201      	movs	r2, #1
 8008594:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8008598:	bf00      	nop
 800859a:	3708      	adds	r7, #8
 800859c:	46bd      	mov	sp, r7
 800859e:	bd80      	pop	{r7, pc}
 80085a0:	40002800 	.word	0x40002800

080085a4 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b083      	sub	sp, #12
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80085ac:	bf00      	nop
 80085ae:	370c      	adds	r7, #12
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bc80      	pop	{r7}
 80085b4:	4770      	bx	lr
	...

080085b8 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80085b8:	b480      	push	{r7}
 80085ba:	b087      	sub	sp, #28
 80085bc:	af00      	add	r7, sp, #0
 80085be:	60f8      	str	r0, [r7, #12]
 80085c0:	60b9      	str	r1, [r7, #8]
 80085c2:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 80085c4:	4b07      	ldr	r3, [pc, #28]	; (80085e4 <HAL_RTCEx_BKUPWrite+0x2c>)
 80085c6:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	009b      	lsls	r3, r3, #2
 80085cc:	697a      	ldr	r2, [r7, #20]
 80085ce:	4413      	add	r3, r2
 80085d0:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	687a      	ldr	r2, [r7, #4]
 80085d6:	601a      	str	r2, [r3, #0]
}
 80085d8:	bf00      	nop
 80085da:	371c      	adds	r7, #28
 80085dc:	46bd      	mov	sp, r7
 80085de:	bc80      	pop	{r7}
 80085e0:	4770      	bx	lr
 80085e2:	bf00      	nop
 80085e4:	4000b100 	.word	0x4000b100

080085e8 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80085e8:	b480      	push	{r7}
 80085ea:	b085      	sub	sp, #20
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
 80085f0:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 80085f2:	4b07      	ldr	r3, [pc, #28]	; (8008610 <HAL_RTCEx_BKUPRead+0x28>)
 80085f4:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	009b      	lsls	r3, r3, #2
 80085fa:	68fa      	ldr	r2, [r7, #12]
 80085fc:	4413      	add	r3, r2
 80085fe:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
}
 8008604:	4618      	mov	r0, r3
 8008606:	3714      	adds	r7, #20
 8008608:	46bd      	mov	sp, r7
 800860a:	bc80      	pop	{r7}
 800860c:	4770      	bx	lr
 800860e:	bf00      	nop
 8008610:	4000b100 	.word	0x4000b100

08008614 <LL_PWR_SetRadioBusyTrigger>:
{
 8008614:	b480      	push	{r7}
 8008616:	b083      	sub	sp, #12
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 800861c:	4b06      	ldr	r3, [pc, #24]	; (8008638 <LL_PWR_SetRadioBusyTrigger+0x24>)
 800861e:	689b      	ldr	r3, [r3, #8]
 8008620:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008624:	4904      	ldr	r1, [pc, #16]	; (8008638 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	4313      	orrs	r3, r2
 800862a:	608b      	str	r3, [r1, #8]
}
 800862c:	bf00      	nop
 800862e:	370c      	adds	r7, #12
 8008630:	46bd      	mov	sp, r7
 8008632:	bc80      	pop	{r7}
 8008634:	4770      	bx	lr
 8008636:	bf00      	nop
 8008638:	58000400 	.word	0x58000400

0800863c <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 800863c:	b480      	push	{r7}
 800863e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8008640:	4b05      	ldr	r3, [pc, #20]	; (8008658 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8008642:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008646:	4a04      	ldr	r2, [pc, #16]	; (8008658 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8008648:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800864c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8008650:	bf00      	nop
 8008652:	46bd      	mov	sp, r7
 8008654:	bc80      	pop	{r7}
 8008656:	4770      	bx	lr
 8008658:	58000400 	.word	0x58000400

0800865c <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 800865c:	b480      	push	{r7}
 800865e:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8008660:	4b05      	ldr	r3, [pc, #20]	; (8008678 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8008662:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008666:	4a04      	ldr	r2, [pc, #16]	; (8008678 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8008668:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800866c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8008670:	bf00      	nop
 8008672:	46bd      	mov	sp, r7
 8008674:	bc80      	pop	{r7}
 8008676:	4770      	bx	lr
 8008678:	58000400 	.word	0x58000400

0800867c <LL_PWR_ClearFlag_RFBUSY>:
{
 800867c:	b480      	push	{r7}
 800867e:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8008680:	4b03      	ldr	r3, [pc, #12]	; (8008690 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8008682:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008686:	619a      	str	r2, [r3, #24]
}
 8008688:	bf00      	nop
 800868a:	46bd      	mov	sp, r7
 800868c:	bc80      	pop	{r7}
 800868e:	4770      	bx	lr
 8008690:	58000400 	.word	0x58000400

08008694 <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 8008694:	b480      	push	{r7}
 8008696:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8008698:	4b06      	ldr	r3, [pc, #24]	; (80086b4 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 800869a:	695b      	ldr	r3, [r3, #20]
 800869c:	f003 0302 	and.w	r3, r3, #2
 80086a0:	2b02      	cmp	r3, #2
 80086a2:	d101      	bne.n	80086a8 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 80086a4:	2301      	movs	r3, #1
 80086a6:	e000      	b.n	80086aa <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 80086a8:	2300      	movs	r3, #0
}
 80086aa:	4618      	mov	r0, r3
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bc80      	pop	{r7}
 80086b0:	4770      	bx	lr
 80086b2:	bf00      	nop
 80086b4:	58000400 	.word	0x58000400

080086b8 <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 80086b8:	b480      	push	{r7}
 80086ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 80086bc:	4b06      	ldr	r3, [pc, #24]	; (80086d8 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 80086be:	695b      	ldr	r3, [r3, #20]
 80086c0:	f003 0304 	and.w	r3, r3, #4
 80086c4:	2b04      	cmp	r3, #4
 80086c6:	d101      	bne.n	80086cc <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 80086c8:	2301      	movs	r3, #1
 80086ca:	e000      	b.n	80086ce <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 80086cc:	2300      	movs	r3, #0
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bc80      	pop	{r7}
 80086d4:	4770      	bx	lr
 80086d6:	bf00      	nop
 80086d8:	58000400 	.word	0x58000400

080086dc <LL_RCC_RF_DisableReset>:
{
 80086dc:	b480      	push	{r7}
 80086de:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 80086e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80086e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80086ec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80086f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80086f4:	bf00      	nop
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bc80      	pop	{r7}
 80086fa:	4770      	bx	lr

080086fc <LL_RCC_IsRFUnderReset>:
{
 80086fc:	b480      	push	{r7}
 80086fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8008700:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008704:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008708:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800870c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008710:	d101      	bne.n	8008716 <LL_RCC_IsRFUnderReset+0x1a>
 8008712:	2301      	movs	r3, #1
 8008714:	e000      	b.n	8008718 <LL_RCC_IsRFUnderReset+0x1c>
 8008716:	2300      	movs	r3, #0
}
 8008718:	4618      	mov	r0, r3
 800871a:	46bd      	mov	sp, r7
 800871c:	bc80      	pop	{r7}
 800871e:	4770      	bx	lr

08008720 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8008720:	b480      	push	{r7}
 8008722:	b083      	sub	sp, #12
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8008728:	4b06      	ldr	r3, [pc, #24]	; (8008744 <LL_EXTI_EnableIT_32_63+0x24>)
 800872a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800872e:	4905      	ldr	r1, [pc, #20]	; (8008744 <LL_EXTI_EnableIT_32_63+0x24>)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	4313      	orrs	r3, r2
 8008734:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8008738:	bf00      	nop
 800873a:	370c      	adds	r7, #12
 800873c:	46bd      	mov	sp, r7
 800873e:	bc80      	pop	{r7}
 8008740:	4770      	bx	lr
 8008742:	bf00      	nop
 8008744:	58000800 	.word	0x58000800

08008748 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b084      	sub	sp, #16
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d103      	bne.n	800875e <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8008756:	2301      	movs	r3, #1
 8008758:	73fb      	strb	r3, [r7, #15]
    return status;
 800875a:	7bfb      	ldrb	r3, [r7, #15]
 800875c:	e052      	b.n	8008804 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 800875e:	2300      	movs	r3, #0
 8008760:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	799b      	ldrb	r3, [r3, #6]
 8008766:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8008768:	7bbb      	ldrb	r3, [r7, #14]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d002      	beq.n	8008774 <HAL_SUBGHZ_Init+0x2c>
 800876e:	7bbb      	ldrb	r3, [r7, #14]
 8008770:	2b03      	cmp	r3, #3
 8008772:	d109      	bne.n	8008788 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2200      	movs	r2, #0
 8008778:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f7f9 ff0c 	bl	8002598 <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8008780:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8008784:	f7ff ffcc 	bl	8008720 <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8008788:	7bbb      	ldrb	r3, [r7, #14]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d126      	bne.n	80087dc <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2202      	movs	r2, #2
 8008792:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 8008794:	f7ff ffa2 	bl	80086dc <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8008798:	4b1c      	ldr	r3, [pc, #112]	; (800880c <HAL_SUBGHZ_Init+0xc4>)
 800879a:	681a      	ldr	r2, [r3, #0]
 800879c:	4613      	mov	r3, r2
 800879e:	00db      	lsls	r3, r3, #3
 80087a0:	1a9b      	subs	r3, r3, r2
 80087a2:	009b      	lsls	r3, r3, #2
 80087a4:	0cdb      	lsrs	r3, r3, #19
 80087a6:	2264      	movs	r2, #100	; 0x64
 80087a8:	fb02 f303 	mul.w	r3, r2, r3
 80087ac:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d105      	bne.n	80087c0 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 80087b4:	2301      	movs	r3, #1
 80087b6:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2201      	movs	r2, #1
 80087bc:	609a      	str	r2, [r3, #8]
        break;
 80087be:	e007      	b.n	80087d0 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	3b01      	subs	r3, #1
 80087c4:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 80087c6:	f7ff ff99 	bl	80086fc <LL_RCC_IsRFUnderReset>
 80087ca:	4603      	mov	r3, r0
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d1ee      	bne.n	80087ae <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80087d0:	f7ff ff34 	bl	800863c <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 80087d4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80087d8:	f7ff ff1c 	bl	8008614 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 80087dc:	f7ff ff4e 	bl	800867c <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 80087e0:	7bfb      	ldrb	r3, [r7, #15]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d10a      	bne.n	80087fc <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	4618      	mov	r0, r3
 80087ec:	f000 faac 	bl	8008d48 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2201      	movs	r2, #1
 80087f4:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2200      	movs	r2, #0
 80087fa:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2201      	movs	r2, #1
 8008800:	719a      	strb	r2, [r3, #6]

  return status;
 8008802:	7bfb      	ldrb	r3, [r7, #15]
}
 8008804:	4618      	mov	r0, r3
 8008806:	3710      	adds	r7, #16
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}
 800880c:	20000004 	.word	0x20000004

08008810 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b086      	sub	sp, #24
 8008814:	af00      	add	r7, sp, #0
 8008816:	60f8      	str	r0, [r7, #12]
 8008818:	607a      	str	r2, [r7, #4]
 800881a:	461a      	mov	r2, r3
 800881c:	460b      	mov	r3, r1
 800881e:	817b      	strh	r3, [r7, #10]
 8008820:	4613      	mov	r3, r2
 8008822:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	799b      	ldrb	r3, [r3, #6]
 8008828:	b2db      	uxtb	r3, r3
 800882a:	2b01      	cmp	r3, #1
 800882c:	d14a      	bne.n	80088c4 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	795b      	ldrb	r3, [r3, #5]
 8008832:	2b01      	cmp	r3, #1
 8008834:	d101      	bne.n	800883a <HAL_SUBGHZ_WriteRegisters+0x2a>
 8008836:	2302      	movs	r3, #2
 8008838:	e045      	b.n	80088c6 <HAL_SUBGHZ_WriteRegisters+0xb6>
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	2201      	movs	r2, #1
 800883e:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	2202      	movs	r2, #2
 8008844:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8008846:	68f8      	ldr	r0, [r7, #12]
 8008848:	f000 fb4c 	bl	8008ee4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800884c:	f7ff ff06 	bl	800865c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8008850:	210d      	movs	r1, #13
 8008852:	68f8      	ldr	r0, [r7, #12]
 8008854:	f000 fa98 	bl	8008d88 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8008858:	897b      	ldrh	r3, [r7, #10]
 800885a:	0a1b      	lsrs	r3, r3, #8
 800885c:	b29b      	uxth	r3, r3
 800885e:	b2db      	uxtb	r3, r3
 8008860:	4619      	mov	r1, r3
 8008862:	68f8      	ldr	r0, [r7, #12]
 8008864:	f000 fa90 	bl	8008d88 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8008868:	897b      	ldrh	r3, [r7, #10]
 800886a:	b2db      	uxtb	r3, r3
 800886c:	4619      	mov	r1, r3
 800886e:	68f8      	ldr	r0, [r7, #12]
 8008870:	f000 fa8a 	bl	8008d88 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8008874:	2300      	movs	r3, #0
 8008876:	82bb      	strh	r3, [r7, #20]
 8008878:	e00a      	b.n	8008890 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800887a:	8abb      	ldrh	r3, [r7, #20]
 800887c:	687a      	ldr	r2, [r7, #4]
 800887e:	4413      	add	r3, r2
 8008880:	781b      	ldrb	r3, [r3, #0]
 8008882:	4619      	mov	r1, r3
 8008884:	68f8      	ldr	r0, [r7, #12]
 8008886:	f000 fa7f 	bl	8008d88 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800888a:	8abb      	ldrh	r3, [r7, #20]
 800888c:	3301      	adds	r3, #1
 800888e:	82bb      	strh	r3, [r7, #20]
 8008890:	8aba      	ldrh	r2, [r7, #20]
 8008892:	893b      	ldrh	r3, [r7, #8]
 8008894:	429a      	cmp	r2, r3
 8008896:	d3f0      	bcc.n	800887a <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008898:	f7ff fed0 	bl	800863c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800889c:	68f8      	ldr	r0, [r7, #12]
 800889e:	f000 fb45 	bl	8008f2c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	689b      	ldr	r3, [r3, #8]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d002      	beq.n	80088b0 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 80088aa:	2301      	movs	r3, #1
 80088ac:	75fb      	strb	r3, [r7, #23]
 80088ae:	e001      	b.n	80088b4 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 80088b0:	2300      	movs	r3, #0
 80088b2:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	2201      	movs	r2, #1
 80088b8:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	2200      	movs	r2, #0
 80088be:	715a      	strb	r2, [r3, #5]

    return status;
 80088c0:	7dfb      	ldrb	r3, [r7, #23]
 80088c2:	e000      	b.n	80088c6 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 80088c4:	2302      	movs	r3, #2
  }
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	3718      	adds	r7, #24
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}

080088ce <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 80088ce:	b580      	push	{r7, lr}
 80088d0:	b088      	sub	sp, #32
 80088d2:	af00      	add	r7, sp, #0
 80088d4:	60f8      	str	r0, [r7, #12]
 80088d6:	607a      	str	r2, [r7, #4]
 80088d8:	461a      	mov	r2, r3
 80088da:	460b      	mov	r3, r1
 80088dc:	817b      	strh	r3, [r7, #10]
 80088de:	4613      	mov	r3, r2
 80088e0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	799b      	ldrb	r3, [r3, #6]
 80088ea:	b2db      	uxtb	r3, r3
 80088ec:	2b01      	cmp	r3, #1
 80088ee:	d14a      	bne.n	8008986 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	795b      	ldrb	r3, [r3, #5]
 80088f4:	2b01      	cmp	r3, #1
 80088f6:	d101      	bne.n	80088fc <HAL_SUBGHZ_ReadRegisters+0x2e>
 80088f8:	2302      	movs	r3, #2
 80088fa:	e045      	b.n	8008988 <HAL_SUBGHZ_ReadRegisters+0xba>
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	2201      	movs	r2, #1
 8008900:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8008902:	68f8      	ldr	r0, [r7, #12]
 8008904:	f000 faee 	bl	8008ee4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008908:	f7ff fea8 	bl	800865c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 800890c:	211d      	movs	r1, #29
 800890e:	68f8      	ldr	r0, [r7, #12]
 8008910:	f000 fa3a 	bl	8008d88 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8008914:	897b      	ldrh	r3, [r7, #10]
 8008916:	0a1b      	lsrs	r3, r3, #8
 8008918:	b29b      	uxth	r3, r3
 800891a:	b2db      	uxtb	r3, r3
 800891c:	4619      	mov	r1, r3
 800891e:	68f8      	ldr	r0, [r7, #12]
 8008920:	f000 fa32 	bl	8008d88 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8008924:	897b      	ldrh	r3, [r7, #10]
 8008926:	b2db      	uxtb	r3, r3
 8008928:	4619      	mov	r1, r3
 800892a:	68f8      	ldr	r0, [r7, #12]
 800892c:	f000 fa2c 	bl	8008d88 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8008930:	2100      	movs	r1, #0
 8008932:	68f8      	ldr	r0, [r7, #12]
 8008934:	f000 fa28 	bl	8008d88 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8008938:	2300      	movs	r3, #0
 800893a:	82fb      	strh	r3, [r7, #22]
 800893c:	e009      	b.n	8008952 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800893e:	69b9      	ldr	r1, [r7, #24]
 8008940:	68f8      	ldr	r0, [r7, #12]
 8008942:	f000 fa77 	bl	8008e34 <SUBGHZSPI_Receive>
      pData++;
 8008946:	69bb      	ldr	r3, [r7, #24]
 8008948:	3301      	adds	r3, #1
 800894a:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800894c:	8afb      	ldrh	r3, [r7, #22]
 800894e:	3301      	adds	r3, #1
 8008950:	82fb      	strh	r3, [r7, #22]
 8008952:	8afa      	ldrh	r2, [r7, #22]
 8008954:	893b      	ldrh	r3, [r7, #8]
 8008956:	429a      	cmp	r2, r3
 8008958:	d3f1      	bcc.n	800893e <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800895a:	f7ff fe6f 	bl	800863c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800895e:	68f8      	ldr	r0, [r7, #12]
 8008960:	f000 fae4 	bl	8008f2c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	689b      	ldr	r3, [r3, #8]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d002      	beq.n	8008972 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 800896c:	2301      	movs	r3, #1
 800896e:	77fb      	strb	r3, [r7, #31]
 8008970:	e001      	b.n	8008976 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8008972:	2300      	movs	r3, #0
 8008974:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	2201      	movs	r2, #1
 800897a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	2200      	movs	r2, #0
 8008980:	715a      	strb	r2, [r3, #5]

    return status;
 8008982:	7ffb      	ldrb	r3, [r7, #31]
 8008984:	e000      	b.n	8008988 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8008986:	2302      	movs	r3, #2
  }
}
 8008988:	4618      	mov	r0, r3
 800898a:	3720      	adds	r7, #32
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}

08008990 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b086      	sub	sp, #24
 8008994:	af00      	add	r7, sp, #0
 8008996:	60f8      	str	r0, [r7, #12]
 8008998:	607a      	str	r2, [r7, #4]
 800899a:	461a      	mov	r2, r3
 800899c:	460b      	mov	r3, r1
 800899e:	72fb      	strb	r3, [r7, #11]
 80089a0:	4613      	mov	r3, r2
 80089a2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	799b      	ldrb	r3, [r3, #6]
 80089a8:	b2db      	uxtb	r3, r3
 80089aa:	2b01      	cmp	r3, #1
 80089ac:	d14a      	bne.n	8008a44 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	795b      	ldrb	r3, [r3, #5]
 80089b2:	2b01      	cmp	r3, #1
 80089b4:	d101      	bne.n	80089ba <HAL_SUBGHZ_ExecSetCmd+0x2a>
 80089b6:	2302      	movs	r3, #2
 80089b8:	e045      	b.n	8008a46 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	2201      	movs	r2, #1
 80089be:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80089c0:	68f8      	ldr	r0, [r7, #12]
 80089c2:	f000 fa8f 	bl	8008ee4 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 80089c6:	7afb      	ldrb	r3, [r7, #11]
 80089c8:	2b84      	cmp	r3, #132	; 0x84
 80089ca:	d002      	beq.n	80089d2 <HAL_SUBGHZ_ExecSetCmd+0x42>
 80089cc:	7afb      	ldrb	r3, [r7, #11]
 80089ce:	2b94      	cmp	r3, #148	; 0x94
 80089d0:	d103      	bne.n	80089da <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	2201      	movs	r2, #1
 80089d6:	711a      	strb	r2, [r3, #4]
 80089d8:	e002      	b.n	80089e0 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	2200      	movs	r2, #0
 80089de:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80089e0:	f7ff fe3c 	bl	800865c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80089e4:	7afb      	ldrb	r3, [r7, #11]
 80089e6:	4619      	mov	r1, r3
 80089e8:	68f8      	ldr	r0, [r7, #12]
 80089ea:	f000 f9cd 	bl	8008d88 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80089ee:	2300      	movs	r3, #0
 80089f0:	82bb      	strh	r3, [r7, #20]
 80089f2:	e00a      	b.n	8008a0a <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80089f4:	8abb      	ldrh	r3, [r7, #20]
 80089f6:	687a      	ldr	r2, [r7, #4]
 80089f8:	4413      	add	r3, r2
 80089fa:	781b      	ldrb	r3, [r3, #0]
 80089fc:	4619      	mov	r1, r3
 80089fe:	68f8      	ldr	r0, [r7, #12]
 8008a00:	f000 f9c2 	bl	8008d88 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8008a04:	8abb      	ldrh	r3, [r7, #20]
 8008a06:	3301      	adds	r3, #1
 8008a08:	82bb      	strh	r3, [r7, #20]
 8008a0a:	8aba      	ldrh	r2, [r7, #20]
 8008a0c:	893b      	ldrh	r3, [r7, #8]
 8008a0e:	429a      	cmp	r2, r3
 8008a10:	d3f0      	bcc.n	80089f4 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008a12:	f7ff fe13 	bl	800863c <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8008a16:	7afb      	ldrb	r3, [r7, #11]
 8008a18:	2b84      	cmp	r3, #132	; 0x84
 8008a1a:	d002      	beq.n	8008a22 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008a1c:	68f8      	ldr	r0, [r7, #12]
 8008a1e:	f000 fa85 	bl	8008f2c <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	689b      	ldr	r3, [r3, #8]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d002      	beq.n	8008a30 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	75fb      	strb	r3, [r7, #23]
 8008a2e:	e001      	b.n	8008a34 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8008a30:	2300      	movs	r3, #0
 8008a32:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	2201      	movs	r2, #1
 8008a38:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	715a      	strb	r2, [r3, #5]

    return status;
 8008a40:	7dfb      	ldrb	r3, [r7, #23]
 8008a42:	e000      	b.n	8008a46 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8008a44:	2302      	movs	r3, #2
  }
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3718      	adds	r7, #24
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}

08008a4e <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8008a4e:	b580      	push	{r7, lr}
 8008a50:	b088      	sub	sp, #32
 8008a52:	af00      	add	r7, sp, #0
 8008a54:	60f8      	str	r0, [r7, #12]
 8008a56:	607a      	str	r2, [r7, #4]
 8008a58:	461a      	mov	r2, r3
 8008a5a:	460b      	mov	r3, r1
 8008a5c:	72fb      	strb	r3, [r7, #11]
 8008a5e:	4613      	mov	r3, r2
 8008a60:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	799b      	ldrb	r3, [r3, #6]
 8008a6a:	b2db      	uxtb	r3, r3
 8008a6c:	2b01      	cmp	r3, #1
 8008a6e:	d13d      	bne.n	8008aec <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	795b      	ldrb	r3, [r3, #5]
 8008a74:	2b01      	cmp	r3, #1
 8008a76:	d101      	bne.n	8008a7c <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8008a78:	2302      	movs	r3, #2
 8008a7a:	e038      	b.n	8008aee <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	2201      	movs	r2, #1
 8008a80:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8008a82:	68f8      	ldr	r0, [r7, #12]
 8008a84:	f000 fa2e 	bl	8008ee4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008a88:	f7ff fde8 	bl	800865c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8008a8c:	7afb      	ldrb	r3, [r7, #11]
 8008a8e:	4619      	mov	r1, r3
 8008a90:	68f8      	ldr	r0, [r7, #12]
 8008a92:	f000 f979 	bl	8008d88 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8008a96:	2100      	movs	r1, #0
 8008a98:	68f8      	ldr	r0, [r7, #12]
 8008a9a:	f000 f975 	bl	8008d88 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	82fb      	strh	r3, [r7, #22]
 8008aa2:	e009      	b.n	8008ab8 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8008aa4:	69b9      	ldr	r1, [r7, #24]
 8008aa6:	68f8      	ldr	r0, [r7, #12]
 8008aa8:	f000 f9c4 	bl	8008e34 <SUBGHZSPI_Receive>
      pData++;
 8008aac:	69bb      	ldr	r3, [r7, #24]
 8008aae:	3301      	adds	r3, #1
 8008ab0:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8008ab2:	8afb      	ldrh	r3, [r7, #22]
 8008ab4:	3301      	adds	r3, #1
 8008ab6:	82fb      	strh	r3, [r7, #22]
 8008ab8:	8afa      	ldrh	r2, [r7, #22]
 8008aba:	893b      	ldrh	r3, [r7, #8]
 8008abc:	429a      	cmp	r2, r3
 8008abe:	d3f1      	bcc.n	8008aa4 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008ac0:	f7ff fdbc 	bl	800863c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008ac4:	68f8      	ldr	r0, [r7, #12]
 8008ac6:	f000 fa31 	bl	8008f2c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	689b      	ldr	r3, [r3, #8]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d002      	beq.n	8008ad8 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	77fb      	strb	r3, [r7, #31]
 8008ad6:	e001      	b.n	8008adc <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8008ad8:	2300      	movs	r3, #0
 8008ada:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	2201      	movs	r2, #1
 8008ae0:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	715a      	strb	r2, [r3, #5]

    return status;
 8008ae8:	7ffb      	ldrb	r3, [r7, #31]
 8008aea:	e000      	b.n	8008aee <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008aec:	2302      	movs	r3, #2
  }
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3720      	adds	r7, #32
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}

08008af6 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8008af6:	b580      	push	{r7, lr}
 8008af8:	b086      	sub	sp, #24
 8008afa:	af00      	add	r7, sp, #0
 8008afc:	60f8      	str	r0, [r7, #12]
 8008afe:	607a      	str	r2, [r7, #4]
 8008b00:	461a      	mov	r2, r3
 8008b02:	460b      	mov	r3, r1
 8008b04:	72fb      	strb	r3, [r7, #11]
 8008b06:	4613      	mov	r3, r2
 8008b08:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	799b      	ldrb	r3, [r3, #6]
 8008b0e:	b2db      	uxtb	r3, r3
 8008b10:	2b01      	cmp	r3, #1
 8008b12:	d13e      	bne.n	8008b92 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	795b      	ldrb	r3, [r3, #5]
 8008b18:	2b01      	cmp	r3, #1
 8008b1a:	d101      	bne.n	8008b20 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8008b1c:	2302      	movs	r3, #2
 8008b1e:	e039      	b.n	8008b94 <HAL_SUBGHZ_WriteBuffer+0x9e>
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	2201      	movs	r2, #1
 8008b24:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8008b26:	68f8      	ldr	r0, [r7, #12]
 8008b28:	f000 f9dc 	bl	8008ee4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008b2c:	f7ff fd96 	bl	800865c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8008b30:	210e      	movs	r1, #14
 8008b32:	68f8      	ldr	r0, [r7, #12]
 8008b34:	f000 f928 	bl	8008d88 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8008b38:	7afb      	ldrb	r3, [r7, #11]
 8008b3a:	4619      	mov	r1, r3
 8008b3c:	68f8      	ldr	r0, [r7, #12]
 8008b3e:	f000 f923 	bl	8008d88 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8008b42:	2300      	movs	r3, #0
 8008b44:	82bb      	strh	r3, [r7, #20]
 8008b46:	e00a      	b.n	8008b5e <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8008b48:	8abb      	ldrh	r3, [r7, #20]
 8008b4a:	687a      	ldr	r2, [r7, #4]
 8008b4c:	4413      	add	r3, r2
 8008b4e:	781b      	ldrb	r3, [r3, #0]
 8008b50:	4619      	mov	r1, r3
 8008b52:	68f8      	ldr	r0, [r7, #12]
 8008b54:	f000 f918 	bl	8008d88 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8008b58:	8abb      	ldrh	r3, [r7, #20]
 8008b5a:	3301      	adds	r3, #1
 8008b5c:	82bb      	strh	r3, [r7, #20]
 8008b5e:	8aba      	ldrh	r2, [r7, #20]
 8008b60:	893b      	ldrh	r3, [r7, #8]
 8008b62:	429a      	cmp	r2, r3
 8008b64:	d3f0      	bcc.n	8008b48 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008b66:	f7ff fd69 	bl	800863c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008b6a:	68f8      	ldr	r0, [r7, #12]
 8008b6c:	f000 f9de 	bl	8008f2c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	689b      	ldr	r3, [r3, #8]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d002      	beq.n	8008b7e <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8008b78:	2301      	movs	r3, #1
 8008b7a:	75fb      	strb	r3, [r7, #23]
 8008b7c:	e001      	b.n	8008b82 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	2201      	movs	r2, #1
 8008b86:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	715a      	strb	r2, [r3, #5]

    return status;
 8008b8e:	7dfb      	ldrb	r3, [r7, #23]
 8008b90:	e000      	b.n	8008b94 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8008b92:	2302      	movs	r3, #2
  }
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	3718      	adds	r7, #24
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}

08008b9c <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b088      	sub	sp, #32
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	60f8      	str	r0, [r7, #12]
 8008ba4:	607a      	str	r2, [r7, #4]
 8008ba6:	461a      	mov	r2, r3
 8008ba8:	460b      	mov	r3, r1
 8008baa:	72fb      	strb	r3, [r7, #11]
 8008bac:	4613      	mov	r3, r2
 8008bae:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	799b      	ldrb	r3, [r3, #6]
 8008bb8:	b2db      	uxtb	r3, r3
 8008bba:	2b01      	cmp	r3, #1
 8008bbc:	d141      	bne.n	8008c42 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	795b      	ldrb	r3, [r3, #5]
 8008bc2:	2b01      	cmp	r3, #1
 8008bc4:	d101      	bne.n	8008bca <HAL_SUBGHZ_ReadBuffer+0x2e>
 8008bc6:	2302      	movs	r3, #2
 8008bc8:	e03c      	b.n	8008c44 <HAL_SUBGHZ_ReadBuffer+0xa8>
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	2201      	movs	r2, #1
 8008bce:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8008bd0:	68f8      	ldr	r0, [r7, #12]
 8008bd2:	f000 f987 	bl	8008ee4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008bd6:	f7ff fd41 	bl	800865c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8008bda:	211e      	movs	r1, #30
 8008bdc:	68f8      	ldr	r0, [r7, #12]
 8008bde:	f000 f8d3 	bl	8008d88 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8008be2:	7afb      	ldrb	r3, [r7, #11]
 8008be4:	4619      	mov	r1, r3
 8008be6:	68f8      	ldr	r0, [r7, #12]
 8008be8:	f000 f8ce 	bl	8008d88 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8008bec:	2100      	movs	r1, #0
 8008bee:	68f8      	ldr	r0, [r7, #12]
 8008bf0:	f000 f8ca 	bl	8008d88 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	82fb      	strh	r3, [r7, #22]
 8008bf8:	e009      	b.n	8008c0e <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8008bfa:	69b9      	ldr	r1, [r7, #24]
 8008bfc:	68f8      	ldr	r0, [r7, #12]
 8008bfe:	f000 f919 	bl	8008e34 <SUBGHZSPI_Receive>
      pData++;
 8008c02:	69bb      	ldr	r3, [r7, #24]
 8008c04:	3301      	adds	r3, #1
 8008c06:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8008c08:	8afb      	ldrh	r3, [r7, #22]
 8008c0a:	3301      	adds	r3, #1
 8008c0c:	82fb      	strh	r3, [r7, #22]
 8008c0e:	8afa      	ldrh	r2, [r7, #22]
 8008c10:	893b      	ldrh	r3, [r7, #8]
 8008c12:	429a      	cmp	r2, r3
 8008c14:	d3f1      	bcc.n	8008bfa <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008c16:	f7ff fd11 	bl	800863c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008c1a:	68f8      	ldr	r0, [r7, #12]
 8008c1c:	f000 f986 	bl	8008f2c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	689b      	ldr	r3, [r3, #8]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d002      	beq.n	8008c2e <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8008c28:	2301      	movs	r3, #1
 8008c2a:	77fb      	strb	r3, [r7, #31]
 8008c2c:	e001      	b.n	8008c32 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8008c2e:	2300      	movs	r3, #0
 8008c30:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	2201      	movs	r2, #1
 8008c36:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	715a      	strb	r2, [r3, #5]

    return status;
 8008c3e:	7ffb      	ldrb	r3, [r7, #31]
 8008c40:	e000      	b.n	8008c44 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8008c42:	2302      	movs	r3, #2
  }
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	3720      	adds	r7, #32
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bd80      	pop	{r7, pc}

08008c4c <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b084      	sub	sp, #16
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8008c54:	2300      	movs	r3, #0
 8008c56:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8008c58:	f107 020c 	add.w	r2, r7, #12
 8008c5c:	2302      	movs	r3, #2
 8008c5e:	2112      	movs	r1, #18
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f7ff fef4 	bl	8008a4e <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8008c66:	7b3b      	ldrb	r3, [r7, #12]
 8008c68:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8008c6a:	89fb      	ldrh	r3, [r7, #14]
 8008c6c:	021b      	lsls	r3, r3, #8
 8008c6e:	b21a      	sxth	r2, r3
 8008c70:	7b7b      	ldrb	r3, [r7, #13]
 8008c72:	b21b      	sxth	r3, r3
 8008c74:	4313      	orrs	r3, r2
 8008c76:	b21b      	sxth	r3, r3
 8008c78:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8008c7a:	f107 020c 	add.w	r2, r7, #12
 8008c7e:	2302      	movs	r3, #2
 8008c80:	2102      	movs	r1, #2
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f7ff fe84 	bl	8008990 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8008c88:	89fb      	ldrh	r3, [r7, #14]
 8008c8a:	f003 0301 	and.w	r3, r3, #1
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d002      	beq.n	8008c98 <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f014 fae2 	bl	801d25c <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8008c98:	89fb      	ldrh	r3, [r7, #14]
 8008c9a:	f003 0302 	and.w	r3, r3, #2
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d002      	beq.n	8008ca8 <HAL_SUBGHZ_IRQHandler+0x5c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f014 fae8 	bl	801d278 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8008ca8:	89fb      	ldrh	r3, [r7, #14]
 8008caa:	f003 0304 	and.w	r3, r3, #4
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d002      	beq.n	8008cb8 <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f014 fb38 	bl	801d328 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8008cb8:	89fb      	ldrh	r3, [r7, #14]
 8008cba:	f003 0308 	and.w	r3, r3, #8
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d002      	beq.n	8008cc8 <HAL_SUBGHZ_IRQHandler+0x7c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f014 fb3e 	bl	801d344 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8008cc8:	89fb      	ldrh	r3, [r7, #14]
 8008cca:	f003 0310 	and.w	r3, r3, #16
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d002      	beq.n	8008cd8 <HAL_SUBGHZ_IRQHandler+0x8c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f014 fb44 	bl	801d360 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8008cd8:	89fb      	ldrh	r3, [r7, #14]
 8008cda:	f003 0320 	and.w	r3, r3, #32
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d002      	beq.n	8008ce8 <HAL_SUBGHZ_IRQHandler+0x9c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f014 fb12 	bl	801d30c <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8008ce8:	89fb      	ldrh	r3, [r7, #14]
 8008cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d002      	beq.n	8008cf8 <HAL_SUBGHZ_IRQHandler+0xac>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f014 face 	bl	801d294 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8008cf8:	89fb      	ldrh	r3, [r7, #14]
 8008cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d00d      	beq.n	8008d1e <HAL_SUBGHZ_IRQHandler+0xd2>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8008d02:	89fb      	ldrh	r3, [r7, #14]
 8008d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d004      	beq.n	8008d16 <HAL_SUBGHZ_IRQHandler+0xca>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8008d0c:	2101      	movs	r1, #1
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f014 face 	bl	801d2b0 <HAL_SUBGHZ_CADStatusCallback>
 8008d14:	e003      	b.n	8008d1e <HAL_SUBGHZ_IRQHandler+0xd2>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8008d16:	2100      	movs	r1, #0
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f014 fac9 	bl	801d2b0 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8008d1e:	89fb      	ldrh	r3, [r7, #14]
 8008d20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d002      	beq.n	8008d2e <HAL_SUBGHZ_IRQHandler+0xe2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f014 fadf 	bl	801d2ec <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8008d2e:	89fb      	ldrh	r3, [r7, #14]
 8008d30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d002      	beq.n	8008d3e <HAL_SUBGHZ_IRQHandler+0xf2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f014 fb1f 	bl	801d37c <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 8008d3e:	bf00      	nop
 8008d40:	3710      	adds	r7, #16
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}
	...

08008d48 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b083      	sub	sp, #12
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8008d50:	4b0c      	ldr	r3, [pc, #48]	; (8008d84 <SUBGHZSPI_Init+0x3c>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	4a0b      	ldr	r2, [pc, #44]	; (8008d84 <SUBGHZSPI_Init+0x3c>)
 8008d56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d5a:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8008d5c:	4a09      	ldr	r2, [pc, #36]	; (8008d84 <SUBGHZSPI_Init+0x3c>)
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8008d64:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8008d66:	4b07      	ldr	r3, [pc, #28]	; (8008d84 <SUBGHZSPI_Init+0x3c>)
 8008d68:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8008d6c:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8008d6e:	4b05      	ldr	r3, [pc, #20]	; (8008d84 <SUBGHZSPI_Init+0x3c>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	4a04      	ldr	r2, [pc, #16]	; (8008d84 <SUBGHZSPI_Init+0x3c>)
 8008d74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d78:	6013      	str	r3, [r2, #0]
}
 8008d7a:	bf00      	nop
 8008d7c:	370c      	adds	r7, #12
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bc80      	pop	{r7}
 8008d82:	4770      	bx	lr
 8008d84:	58010000 	.word	0x58010000

08008d88 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b087      	sub	sp, #28
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
 8008d90:	460b      	mov	r3, r1
 8008d92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8008d94:	2300      	movs	r3, #0
 8008d96:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8008d98:	4b23      	ldr	r3, [pc, #140]	; (8008e28 <SUBGHZSPI_Transmit+0xa0>)
 8008d9a:	681a      	ldr	r2, [r3, #0]
 8008d9c:	4613      	mov	r3, r2
 8008d9e:	00db      	lsls	r3, r3, #3
 8008da0:	1a9b      	subs	r3, r3, r2
 8008da2:	009b      	lsls	r3, r3, #2
 8008da4:	0cdb      	lsrs	r3, r3, #19
 8008da6:	2264      	movs	r2, #100	; 0x64
 8008da8:	fb02 f303 	mul.w	r3, r2, r3
 8008dac:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d105      	bne.n	8008dc0 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8008db4:	2301      	movs	r3, #1
 8008db6:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2201      	movs	r2, #1
 8008dbc:	609a      	str	r2, [r3, #8]
      break;
 8008dbe:	e008      	b.n	8008dd2 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	3b01      	subs	r3, #1
 8008dc4:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8008dc6:	4b19      	ldr	r3, [pc, #100]	; (8008e2c <SUBGHZSPI_Transmit+0xa4>)
 8008dc8:	689b      	ldr	r3, [r3, #8]
 8008dca:	f003 0302 	and.w	r3, r3, #2
 8008dce:	2b02      	cmp	r3, #2
 8008dd0:	d1ed      	bne.n	8008dae <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8008dd2:	4b17      	ldr	r3, [pc, #92]	; (8008e30 <SUBGHZSPI_Transmit+0xa8>)
 8008dd4:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8008dd6:	693b      	ldr	r3, [r7, #16]
 8008dd8:	78fa      	ldrb	r2, [r7, #3]
 8008dda:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8008ddc:	4b12      	ldr	r3, [pc, #72]	; (8008e28 <SUBGHZSPI_Transmit+0xa0>)
 8008dde:	681a      	ldr	r2, [r3, #0]
 8008de0:	4613      	mov	r3, r2
 8008de2:	00db      	lsls	r3, r3, #3
 8008de4:	1a9b      	subs	r3, r3, r2
 8008de6:	009b      	lsls	r3, r3, #2
 8008de8:	0cdb      	lsrs	r3, r3, #19
 8008dea:	2264      	movs	r2, #100	; 0x64
 8008dec:	fb02 f303 	mul.w	r3, r2, r3
 8008df0:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d105      	bne.n	8008e04 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8008df8:	2301      	movs	r3, #1
 8008dfa:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2201      	movs	r2, #1
 8008e00:	609a      	str	r2, [r3, #8]
      break;
 8008e02:	e008      	b.n	8008e16 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	3b01      	subs	r3, #1
 8008e08:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8008e0a:	4b08      	ldr	r3, [pc, #32]	; (8008e2c <SUBGHZSPI_Transmit+0xa4>)
 8008e0c:	689b      	ldr	r3, [r3, #8]
 8008e0e:	f003 0301 	and.w	r3, r3, #1
 8008e12:	2b01      	cmp	r3, #1
 8008e14:	d1ed      	bne.n	8008df2 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8008e16:	4b05      	ldr	r3, [pc, #20]	; (8008e2c <SUBGHZSPI_Transmit+0xa4>)
 8008e18:	68db      	ldr	r3, [r3, #12]

  return status;
 8008e1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	371c      	adds	r7, #28
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bc80      	pop	{r7}
 8008e24:	4770      	bx	lr
 8008e26:	bf00      	nop
 8008e28:	20000004 	.word	0x20000004
 8008e2c:	58010000 	.word	0x58010000
 8008e30:	5801000c 	.word	0x5801000c

08008e34 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8008e34:	b480      	push	{r7}
 8008e36:	b087      	sub	sp, #28
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
 8008e3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8008e42:	4b25      	ldr	r3, [pc, #148]	; (8008ed8 <SUBGHZSPI_Receive+0xa4>)
 8008e44:	681a      	ldr	r2, [r3, #0]
 8008e46:	4613      	mov	r3, r2
 8008e48:	00db      	lsls	r3, r3, #3
 8008e4a:	1a9b      	subs	r3, r3, r2
 8008e4c:	009b      	lsls	r3, r3, #2
 8008e4e:	0cdb      	lsrs	r3, r3, #19
 8008e50:	2264      	movs	r2, #100	; 0x64
 8008e52:	fb02 f303 	mul.w	r3, r2, r3
 8008e56:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d105      	bne.n	8008e6a <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8008e5e:	2301      	movs	r3, #1
 8008e60:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2201      	movs	r2, #1
 8008e66:	609a      	str	r2, [r3, #8]
      break;
 8008e68:	e008      	b.n	8008e7c <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	3b01      	subs	r3, #1
 8008e6e:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8008e70:	4b1a      	ldr	r3, [pc, #104]	; (8008edc <SUBGHZSPI_Receive+0xa8>)
 8008e72:	689b      	ldr	r3, [r3, #8]
 8008e74:	f003 0302 	and.w	r3, r3, #2
 8008e78:	2b02      	cmp	r3, #2
 8008e7a:	d1ed      	bne.n	8008e58 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8008e7c:	4b18      	ldr	r3, [pc, #96]	; (8008ee0 <SUBGHZSPI_Receive+0xac>)
 8008e7e:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8008e80:	693b      	ldr	r3, [r7, #16]
 8008e82:	22ff      	movs	r2, #255	; 0xff
 8008e84:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8008e86:	4b14      	ldr	r3, [pc, #80]	; (8008ed8 <SUBGHZSPI_Receive+0xa4>)
 8008e88:	681a      	ldr	r2, [r3, #0]
 8008e8a:	4613      	mov	r3, r2
 8008e8c:	00db      	lsls	r3, r3, #3
 8008e8e:	1a9b      	subs	r3, r3, r2
 8008e90:	009b      	lsls	r3, r3, #2
 8008e92:	0cdb      	lsrs	r3, r3, #19
 8008e94:	2264      	movs	r2, #100	; 0x64
 8008e96:	fb02 f303 	mul.w	r3, r2, r3
 8008e9a:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d105      	bne.n	8008eae <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2201      	movs	r2, #1
 8008eaa:	609a      	str	r2, [r3, #8]
      break;
 8008eac:	e008      	b.n	8008ec0 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	3b01      	subs	r3, #1
 8008eb2:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8008eb4:	4b09      	ldr	r3, [pc, #36]	; (8008edc <SUBGHZSPI_Receive+0xa8>)
 8008eb6:	689b      	ldr	r3, [r3, #8]
 8008eb8:	f003 0301 	and.w	r3, r3, #1
 8008ebc:	2b01      	cmp	r3, #1
 8008ebe:	d1ed      	bne.n	8008e9c <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8008ec0:	4b06      	ldr	r3, [pc, #24]	; (8008edc <SUBGHZSPI_Receive+0xa8>)
 8008ec2:	68db      	ldr	r3, [r3, #12]
 8008ec4:	b2da      	uxtb	r2, r3
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	701a      	strb	r2, [r3, #0]

  return status;
 8008eca:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	371c      	adds	r7, #28
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bc80      	pop	{r7}
 8008ed4:	4770      	bx	lr
 8008ed6:	bf00      	nop
 8008ed8:	20000004 	.word	0x20000004
 8008edc:	58010000 	.word	0x58010000
 8008ee0:	5801000c 	.word	0x5801000c

08008ee4 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b084      	sub	sp, #16
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	791b      	ldrb	r3, [r3, #4]
 8008ef0:	2b01      	cmp	r3, #1
 8008ef2:	d111      	bne.n	8008f18 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8008ef4:	4b0c      	ldr	r3, [pc, #48]	; (8008f28 <SUBGHZ_CheckDeviceReady+0x44>)
 8008ef6:	681a      	ldr	r2, [r3, #0]
 8008ef8:	4613      	mov	r3, r2
 8008efa:	005b      	lsls	r3, r3, #1
 8008efc:	4413      	add	r3, r2
 8008efe:	00db      	lsls	r3, r3, #3
 8008f00:	0c1b      	lsrs	r3, r3, #16
 8008f02:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008f04:	f7ff fbaa 	bl	800865c <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	3b01      	subs	r3, #1
 8008f0c:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d1f9      	bne.n	8008f08 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008f14:	f7ff fb92 	bl	800863c <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f000 f807 	bl	8008f2c <SUBGHZ_WaitOnBusy>
 8008f1e:	4603      	mov	r3, r0
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	3710      	adds	r7, #16
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bd80      	pop	{r7, pc}
 8008f28:	20000004 	.word	0x20000004

08008f2c <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b086      	sub	sp, #24
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8008f34:	2300      	movs	r3, #0
 8008f36:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8008f38:	4b12      	ldr	r3, [pc, #72]	; (8008f84 <SUBGHZ_WaitOnBusy+0x58>)
 8008f3a:	681a      	ldr	r2, [r3, #0]
 8008f3c:	4613      	mov	r3, r2
 8008f3e:	005b      	lsls	r3, r3, #1
 8008f40:	4413      	add	r3, r2
 8008f42:	00db      	lsls	r3, r3, #3
 8008f44:	0d1b      	lsrs	r3, r3, #20
 8008f46:	2264      	movs	r2, #100	; 0x64
 8008f48:	fb02 f303 	mul.w	r3, r2, r3
 8008f4c:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8008f4e:	f7ff fbb3 	bl	80086b8 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8008f52:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d105      	bne.n	8008f66 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2202      	movs	r2, #2
 8008f62:	609a      	str	r2, [r3, #8]
      break;
 8008f64:	e009      	b.n	8008f7a <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	3b01      	subs	r3, #1
 8008f6a:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8008f6c:	f7ff fb92 	bl	8008694 <LL_PWR_IsActiveFlag_RFBUSYS>
 8008f70:	4602      	mov	r2, r0
 8008f72:	693b      	ldr	r3, [r7, #16]
 8008f74:	4013      	ands	r3, r2
 8008f76:	2b01      	cmp	r3, #1
 8008f78:	d0e9      	beq.n	8008f4e <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8008f7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	3718      	adds	r7, #24
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}
 8008f84:	20000004 	.word	0x20000004

08008f88 <LL_RCC_GetUSARTClockSource>:
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b083      	sub	sp, #12
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8008f90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f94:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	401a      	ands	r2, r3
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	041b      	lsls	r3, r3, #16
 8008fa0:	4313      	orrs	r3, r2
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	370c      	adds	r7, #12
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bc80      	pop	{r7}
 8008faa:	4770      	bx	lr

08008fac <LL_RCC_GetLPUARTClockSource>:
{
 8008fac:	b480      	push	{r7}
 8008fae:	b083      	sub	sp, #12
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8008fb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008fb8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	4013      	ands	r3, r2
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	370c      	adds	r7, #12
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bc80      	pop	{r7}
 8008fc8:	4770      	bx	lr

08008fca <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008fca:	b580      	push	{r7, lr}
 8008fcc:	b082      	sub	sp, #8
 8008fce:	af00      	add	r7, sp, #0
 8008fd0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d101      	bne.n	8008fdc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008fd8:	2301      	movs	r3, #1
 8008fda:	e042      	b.n	8009062 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d106      	bne.n	8008ff4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2200      	movs	r2, #0
 8008fea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f7fa f828 	bl	8003044 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2224      	movs	r2, #36	; 0x24
 8008ff8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	681a      	ldr	r2, [r3, #0]
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f022 0201 	bic.w	r2, r2, #1
 800900a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f000 fc3b 	bl	8009888 <UART_SetConfig>
 8009012:	4603      	mov	r3, r0
 8009014:	2b01      	cmp	r3, #1
 8009016:	d101      	bne.n	800901c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009018:	2301      	movs	r3, #1
 800901a:	e022      	b.n	8009062 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009020:	2b00      	cmp	r3, #0
 8009022:	d002      	beq.n	800902a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f000 fea3 	bl	8009d70 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	685a      	ldr	r2, [r3, #4]
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009038:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	689a      	ldr	r2, [r3, #8]
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009048:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	681a      	ldr	r2, [r3, #0]
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f042 0201 	orr.w	r2, r2, #1
 8009058:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f000 ff29 	bl	8009eb2 <UART_CheckIdleState>
 8009060:	4603      	mov	r3, r0
}
 8009062:	4618      	mov	r0, r3
 8009064:	3708      	adds	r7, #8
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}
	...

0800906c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b08a      	sub	sp, #40	; 0x28
 8009070:	af00      	add	r7, sp, #0
 8009072:	60f8      	str	r0, [r7, #12]
 8009074:	60b9      	str	r1, [r7, #8]
 8009076:	4613      	mov	r3, r2
 8009078:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009080:	2b20      	cmp	r3, #32
 8009082:	d137      	bne.n	80090f4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d002      	beq.n	8009090 <HAL_UART_Receive_IT+0x24>
 800908a:	88fb      	ldrh	r3, [r7, #6]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d101      	bne.n	8009094 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8009090:	2301      	movs	r3, #1
 8009092:	e030      	b.n	80090f6 <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	2200      	movs	r2, #0
 8009098:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	4a18      	ldr	r2, [pc, #96]	; (8009100 <HAL_UART_Receive_IT+0x94>)
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d01f      	beq.n	80090e4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	685b      	ldr	r3, [r3, #4]
 80090aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d018      	beq.n	80090e4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	e853 3f00 	ldrex	r3, [r3]
 80090be:	613b      	str	r3, [r7, #16]
   return(result);
 80090c0:	693b      	ldr	r3, [r7, #16]
 80090c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80090c6:	627b      	str	r3, [r7, #36]	; 0x24
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	461a      	mov	r2, r3
 80090ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d0:	623b      	str	r3, [r7, #32]
 80090d2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090d4:	69f9      	ldr	r1, [r7, #28]
 80090d6:	6a3a      	ldr	r2, [r7, #32]
 80090d8:	e841 2300 	strex	r3, r2, [r1]
 80090dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80090de:	69bb      	ldr	r3, [r7, #24]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d1e6      	bne.n	80090b2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80090e4:	88fb      	ldrh	r3, [r7, #6]
 80090e6:	461a      	mov	r2, r3
 80090e8:	68b9      	ldr	r1, [r7, #8]
 80090ea:	68f8      	ldr	r0, [r7, #12]
 80090ec:	f000 fff8 	bl	800a0e0 <UART_Start_Receive_IT>
 80090f0:	4603      	mov	r3, r0
 80090f2:	e000      	b.n	80090f6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80090f4:	2302      	movs	r3, #2
  }
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	3728      	adds	r7, #40	; 0x28
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}
 80090fe:	bf00      	nop
 8009100:	40008000 	.word	0x40008000

08009104 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b08a      	sub	sp, #40	; 0x28
 8009108:	af00      	add	r7, sp, #0
 800910a:	60f8      	str	r0, [r7, #12]
 800910c:	60b9      	str	r1, [r7, #8]
 800910e:	4613      	mov	r3, r2
 8009110:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009118:	2b20      	cmp	r3, #32
 800911a:	d167      	bne.n	80091ec <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d002      	beq.n	8009128 <HAL_UART_Transmit_DMA+0x24>
 8009122:	88fb      	ldrh	r3, [r7, #6]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d101      	bne.n	800912c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8009128:	2301      	movs	r3, #1
 800912a:	e060      	b.n	80091ee <HAL_UART_Transmit_DMA+0xea>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->pTxBuffPtr  = pData;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	68ba      	ldr	r2, [r7, #8]
 8009130:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	88fa      	ldrh	r2, [r7, #6]
 8009136:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	88fa      	ldrh	r2, [r7, #6]
 800913e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	2200      	movs	r2, #0
 8009146:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	2221      	movs	r2, #33	; 0x21
 800914e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009156:	2b00      	cmp	r3, #0
 8009158:	d028      	beq.n	80091ac <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800915e:	4a26      	ldr	r2, [pc, #152]	; (80091f8 <HAL_UART_Transmit_DMA+0xf4>)
 8009160:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009166:	4a25      	ldr	r2, [pc, #148]	; (80091fc <HAL_UART_Transmit_DMA+0xf8>)
 8009168:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800916e:	4a24      	ldr	r2, [pc, #144]	; (8009200 <HAL_UART_Transmit_DMA+0xfc>)
 8009170:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009176:	2200      	movs	r2, #0
 8009178:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009182:	4619      	mov	r1, r3
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	3328      	adds	r3, #40	; 0x28
 800918a:	461a      	mov	r2, r3
 800918c:	88fb      	ldrh	r3, [r7, #6]
 800918e:	f7fb fd25 	bl	8004bdc <HAL_DMA_Start_IT>
 8009192:	4603      	mov	r3, r0
 8009194:	2b00      	cmp	r3, #0
 8009196:	d009      	beq.n	80091ac <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	2210      	movs	r2, #16
 800919c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	2220      	movs	r2, #32
 80091a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 80091a8:	2301      	movs	r3, #1
 80091aa:	e020      	b.n	80091ee <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	2240      	movs	r2, #64	; 0x40
 80091b2:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	3308      	adds	r3, #8
 80091ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091bc:	697b      	ldr	r3, [r7, #20]
 80091be:	e853 3f00 	ldrex	r3, [r3]
 80091c2:	613b      	str	r3, [r7, #16]
   return(result);
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091ca:	627b      	str	r3, [r7, #36]	; 0x24
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	3308      	adds	r3, #8
 80091d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091d4:	623a      	str	r2, [r7, #32]
 80091d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091d8:	69f9      	ldr	r1, [r7, #28]
 80091da:	6a3a      	ldr	r2, [r7, #32]
 80091dc:	e841 2300 	strex	r3, r2, [r1]
 80091e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80091e2:	69bb      	ldr	r3, [r7, #24]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d1e5      	bne.n	80091b4 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80091e8:	2300      	movs	r3, #0
 80091ea:	e000      	b.n	80091ee <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80091ec:	2302      	movs	r3, #2
  }
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	3728      	adds	r7, #40	; 0x28
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}
 80091f6:	bf00      	nop
 80091f8:	0800a46b 	.word	0x0800a46b
 80091fc:	0800a505 	.word	0x0800a505
 8009200:	0800a521 	.word	0x0800a521

08009204 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b0ba      	sub	sp, #232	; 0xe8
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	69db      	ldr	r3, [r3, #28]
 8009212:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	689b      	ldr	r3, [r3, #8]
 8009226:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800922a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800922e:	f640 030f 	movw	r3, #2063	; 0x80f
 8009232:	4013      	ands	r3, r2
 8009234:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009238:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800923c:	2b00      	cmp	r3, #0
 800923e:	d11b      	bne.n	8009278 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009240:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009244:	f003 0320 	and.w	r3, r3, #32
 8009248:	2b00      	cmp	r3, #0
 800924a:	d015      	beq.n	8009278 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800924c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009250:	f003 0320 	and.w	r3, r3, #32
 8009254:	2b00      	cmp	r3, #0
 8009256:	d105      	bne.n	8009264 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009258:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800925c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009260:	2b00      	cmp	r3, #0
 8009262:	d009      	beq.n	8009278 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009268:	2b00      	cmp	r3, #0
 800926a:	f000 82e3 	beq.w	8009834 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	4798      	blx	r3
      }
      return;
 8009276:	e2dd      	b.n	8009834 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009278:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800927c:	2b00      	cmp	r3, #0
 800927e:	f000 8123 	beq.w	80094c8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009282:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009286:	4b8d      	ldr	r3, [pc, #564]	; (80094bc <HAL_UART_IRQHandler+0x2b8>)
 8009288:	4013      	ands	r3, r2
 800928a:	2b00      	cmp	r3, #0
 800928c:	d106      	bne.n	800929c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800928e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009292:	4b8b      	ldr	r3, [pc, #556]	; (80094c0 <HAL_UART_IRQHandler+0x2bc>)
 8009294:	4013      	ands	r3, r2
 8009296:	2b00      	cmp	r3, #0
 8009298:	f000 8116 	beq.w	80094c8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800929c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092a0:	f003 0301 	and.w	r3, r3, #1
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d011      	beq.n	80092cc <HAL_UART_IRQHandler+0xc8>
 80092a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d00b      	beq.n	80092cc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	2201      	movs	r2, #1
 80092ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092c2:	f043 0201 	orr.w	r2, r3, #1
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80092cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092d0:	f003 0302 	and.w	r3, r3, #2
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d011      	beq.n	80092fc <HAL_UART_IRQHandler+0xf8>
 80092d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80092dc:	f003 0301 	and.w	r3, r3, #1
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d00b      	beq.n	80092fc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	2202      	movs	r2, #2
 80092ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092f2:	f043 0204 	orr.w	r2, r3, #4
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80092fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009300:	f003 0304 	and.w	r3, r3, #4
 8009304:	2b00      	cmp	r3, #0
 8009306:	d011      	beq.n	800932c <HAL_UART_IRQHandler+0x128>
 8009308:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800930c:	f003 0301 	and.w	r3, r3, #1
 8009310:	2b00      	cmp	r3, #0
 8009312:	d00b      	beq.n	800932c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	2204      	movs	r2, #4
 800931a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009322:	f043 0202 	orr.w	r2, r3, #2
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800932c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009330:	f003 0308 	and.w	r3, r3, #8
 8009334:	2b00      	cmp	r3, #0
 8009336:	d017      	beq.n	8009368 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009338:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800933c:	f003 0320 	and.w	r3, r3, #32
 8009340:	2b00      	cmp	r3, #0
 8009342:	d105      	bne.n	8009350 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009344:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009348:	4b5c      	ldr	r3, [pc, #368]	; (80094bc <HAL_UART_IRQHandler+0x2b8>)
 800934a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800934c:	2b00      	cmp	r3, #0
 800934e:	d00b      	beq.n	8009368 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	2208      	movs	r2, #8
 8009356:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800935e:	f043 0208 	orr.w	r2, r3, #8
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009368:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800936c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009370:	2b00      	cmp	r3, #0
 8009372:	d012      	beq.n	800939a <HAL_UART_IRQHandler+0x196>
 8009374:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009378:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800937c:	2b00      	cmp	r3, #0
 800937e:	d00c      	beq.n	800939a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009388:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009390:	f043 0220 	orr.w	r2, r3, #32
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	f000 8249 	beq.w	8009838 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80093a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093aa:	f003 0320 	and.w	r3, r3, #32
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d013      	beq.n	80093da <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80093b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093b6:	f003 0320 	and.w	r3, r3, #32
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d105      	bne.n	80093ca <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80093be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80093c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d007      	beq.n	80093da <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d003      	beq.n	80093da <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	689b      	ldr	r3, [r3, #8]
 80093ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093ee:	2b40      	cmp	r3, #64	; 0x40
 80093f0:	d005      	beq.n	80093fe <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80093f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80093f6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d054      	beq.n	80094a8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f000 ffce 	bl	800a3a0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	689b      	ldr	r3, [r3, #8]
 800940a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800940e:	2b40      	cmp	r3, #64	; 0x40
 8009410:	d146      	bne.n	80094a0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	3308      	adds	r3, #8
 8009418:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800941c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009420:	e853 3f00 	ldrex	r3, [r3]
 8009424:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009428:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800942c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009430:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	3308      	adds	r3, #8
 800943a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800943e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009442:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009446:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800944a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800944e:	e841 2300 	strex	r3, r2, [r1]
 8009452:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009456:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800945a:	2b00      	cmp	r3, #0
 800945c:	d1d9      	bne.n	8009412 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009464:	2b00      	cmp	r3, #0
 8009466:	d017      	beq.n	8009498 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800946e:	4a15      	ldr	r2, [pc, #84]	; (80094c4 <HAL_UART_IRQHandler+0x2c0>)
 8009470:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009478:	4618      	mov	r0, r3
 800947a:	f7fb fc8b 	bl	8004d94 <HAL_DMA_Abort_IT>
 800947e:	4603      	mov	r3, r0
 8009480:	2b00      	cmp	r3, #0
 8009482:	d019      	beq.n	80094b8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800948a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800948c:	687a      	ldr	r2, [r7, #4]
 800948e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8009492:	4610      	mov	r0, r2
 8009494:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009496:	e00f      	b.n	80094b8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009498:	6878      	ldr	r0, [r7, #4]
 800949a:	f000 f9e0 	bl	800985e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800949e:	e00b      	b.n	80094b8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	f000 f9dc 	bl	800985e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094a6:	e007      	b.n	80094b8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f000 f9d8 	bl	800985e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2200      	movs	r2, #0
 80094b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80094b6:	e1bf      	b.n	8009838 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094b8:	bf00      	nop
    return;
 80094ba:	e1bd      	b.n	8009838 <HAL_UART_IRQHandler+0x634>
 80094bc:	10000001 	.word	0x10000001
 80094c0:	04000120 	.word	0x04000120
 80094c4:	0800a5a1 	.word	0x0800a5a1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094cc:	2b01      	cmp	r3, #1
 80094ce:	f040 8153 	bne.w	8009778 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80094d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094d6:	f003 0310 	and.w	r3, r3, #16
 80094da:	2b00      	cmp	r3, #0
 80094dc:	f000 814c 	beq.w	8009778 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80094e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80094e4:	f003 0310 	and.w	r3, r3, #16
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	f000 8145 	beq.w	8009778 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	2210      	movs	r2, #16
 80094f4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	689b      	ldr	r3, [r3, #8]
 80094fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009500:	2b40      	cmp	r3, #64	; 0x40
 8009502:	f040 80bb 	bne.w	800967c <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	685b      	ldr	r3, [r3, #4]
 8009510:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009514:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009518:	2b00      	cmp	r3, #0
 800951a:	f000 818f 	beq.w	800983c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009524:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009528:	429a      	cmp	r2, r3
 800952a:	f080 8187 	bcs.w	800983c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009534:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f003 0320 	and.w	r3, r3, #32
 8009546:	2b00      	cmp	r3, #0
 8009548:	f040 8087 	bne.w	800965a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009554:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009558:	e853 3f00 	ldrex	r3, [r3]
 800955c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009560:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009564:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009568:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	461a      	mov	r2, r3
 8009572:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009576:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800957a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800957e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009582:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009586:	e841 2300 	strex	r3, r2, [r1]
 800958a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800958e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009592:	2b00      	cmp	r3, #0
 8009594:	d1da      	bne.n	800954c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	3308      	adds	r3, #8
 800959c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800959e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80095a0:	e853 3f00 	ldrex	r3, [r3]
 80095a4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80095a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80095a8:	f023 0301 	bic.w	r3, r3, #1
 80095ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	3308      	adds	r3, #8
 80095b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80095ba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80095be:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095c0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80095c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80095c6:	e841 2300 	strex	r3, r2, [r1]
 80095ca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80095cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d1e1      	bne.n	8009596 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	3308      	adds	r3, #8
 80095d8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80095dc:	e853 3f00 	ldrex	r3, [r3]
 80095e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80095e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80095e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80095e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	3308      	adds	r3, #8
 80095f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80095f6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80095f8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095fa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80095fc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80095fe:	e841 2300 	strex	r3, r2, [r1]
 8009602:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009604:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009606:	2b00      	cmp	r3, #0
 8009608:	d1e3      	bne.n	80095d2 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2220      	movs	r2, #32
 800960e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2200      	movs	r2, #0
 8009616:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800961e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009620:	e853 3f00 	ldrex	r3, [r3]
 8009624:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009626:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009628:	f023 0310 	bic.w	r3, r3, #16
 800962c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	461a      	mov	r2, r3
 8009636:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800963a:	65bb      	str	r3, [r7, #88]	; 0x58
 800963c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800963e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009640:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009642:	e841 2300 	strex	r3, r2, [r1]
 8009646:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009648:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800964a:	2b00      	cmp	r3, #0
 800964c:	d1e4      	bne.n	8009618 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009654:	4618      	mov	r0, r3
 8009656:	f7fb fb3f 	bl	8004cd8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2202      	movs	r2, #2
 800965e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800966c:	b29b      	uxth	r3, r3
 800966e:	1ad3      	subs	r3, r2, r3
 8009670:	b29b      	uxth	r3, r3
 8009672:	4619      	mov	r1, r3
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f000 f8fb 	bl	8009870 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800967a:	e0df      	b.n	800983c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009688:	b29b      	uxth	r3, r3
 800968a:	1ad3      	subs	r3, r2, r3
 800968c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009696:	b29b      	uxth	r3, r3
 8009698:	2b00      	cmp	r3, #0
 800969a:	f000 80d1 	beq.w	8009840 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800969e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	f000 80cc 	beq.w	8009840 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096b0:	e853 3f00 	ldrex	r3, [r3]
 80096b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80096b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80096bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	461a      	mov	r2, r3
 80096c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80096ca:	647b      	str	r3, [r7, #68]	; 0x44
 80096cc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80096d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80096d2:	e841 2300 	strex	r3, r2, [r1]
 80096d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80096d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d1e4      	bne.n	80096a8 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	3308      	adds	r3, #8
 80096e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096e8:	e853 3f00 	ldrex	r3, [r3]
 80096ec:	623b      	str	r3, [r7, #32]
   return(result);
 80096ee:	6a3b      	ldr	r3, [r7, #32]
 80096f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80096f4:	f023 0301 	bic.w	r3, r3, #1
 80096f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	3308      	adds	r3, #8
 8009702:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009706:	633a      	str	r2, [r7, #48]	; 0x30
 8009708:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800970a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800970c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800970e:	e841 2300 	strex	r3, r2, [r1]
 8009712:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009716:	2b00      	cmp	r3, #0
 8009718:	d1e1      	bne.n	80096de <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2220      	movs	r2, #32
 800971e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2200      	movs	r2, #0
 8009726:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2200      	movs	r2, #0
 800972c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009734:	693b      	ldr	r3, [r7, #16]
 8009736:	e853 3f00 	ldrex	r3, [r3]
 800973a:	60fb      	str	r3, [r7, #12]
   return(result);
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	f023 0310 	bic.w	r3, r3, #16
 8009742:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	461a      	mov	r2, r3
 800974c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009750:	61fb      	str	r3, [r7, #28]
 8009752:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009754:	69b9      	ldr	r1, [r7, #24]
 8009756:	69fa      	ldr	r2, [r7, #28]
 8009758:	e841 2300 	strex	r3, r2, [r1]
 800975c:	617b      	str	r3, [r7, #20]
   return(result);
 800975e:	697b      	ldr	r3, [r7, #20]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d1e4      	bne.n	800972e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2202      	movs	r2, #2
 8009768:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800976a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800976e:	4619      	mov	r1, r3
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f000 f87d 	bl	8009870 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009776:	e063      	b.n	8009840 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009778:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800977c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009780:	2b00      	cmp	r3, #0
 8009782:	d00e      	beq.n	80097a2 <HAL_UART_IRQHandler+0x59e>
 8009784:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009788:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800978c:	2b00      	cmp	r3, #0
 800978e:	d008      	beq.n	80097a2 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009798:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800979a:	6878      	ldr	r0, [r7, #4]
 800979c:	f001 fc5e 	bl	800b05c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80097a0:	e051      	b.n	8009846 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80097a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d014      	beq.n	80097d8 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80097ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80097b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d105      	bne.n	80097c6 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80097ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80097be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d008      	beq.n	80097d8 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d03a      	beq.n	8009844 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	4798      	blx	r3
    }
    return;
 80097d6:	e035      	b.n	8009844 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80097d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d009      	beq.n	80097f8 <HAL_UART_IRQHandler+0x5f4>
 80097e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80097e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d003      	beq.n	80097f8 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f000 feeb 	bl	800a5cc <UART_EndTransmit_IT>
    return;
 80097f6:	e026      	b.n	8009846 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80097f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009800:	2b00      	cmp	r3, #0
 8009802:	d009      	beq.n	8009818 <HAL_UART_IRQHandler+0x614>
 8009804:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009808:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800980c:	2b00      	cmp	r3, #0
 800980e:	d003      	beq.n	8009818 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	f001 fc35 	bl	800b080 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009816:	e016      	b.n	8009846 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009818:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800981c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009820:	2b00      	cmp	r3, #0
 8009822:	d010      	beq.n	8009846 <HAL_UART_IRQHandler+0x642>
 8009824:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009828:	2b00      	cmp	r3, #0
 800982a:	da0c      	bge.n	8009846 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f001 fc1e 	bl	800b06e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009832:	e008      	b.n	8009846 <HAL_UART_IRQHandler+0x642>
      return;
 8009834:	bf00      	nop
 8009836:	e006      	b.n	8009846 <HAL_UART_IRQHandler+0x642>
    return;
 8009838:	bf00      	nop
 800983a:	e004      	b.n	8009846 <HAL_UART_IRQHandler+0x642>
      return;
 800983c:	bf00      	nop
 800983e:	e002      	b.n	8009846 <HAL_UART_IRQHandler+0x642>
      return;
 8009840:	bf00      	nop
 8009842:	e000      	b.n	8009846 <HAL_UART_IRQHandler+0x642>
    return;
 8009844:	bf00      	nop
  }
}
 8009846:	37e8      	adds	r7, #232	; 0xe8
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}

0800984c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800984c:	b480      	push	{r7}
 800984e:	b083      	sub	sp, #12
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009854:	bf00      	nop
 8009856:	370c      	adds	r7, #12
 8009858:	46bd      	mov	sp, r7
 800985a:	bc80      	pop	{r7}
 800985c:	4770      	bx	lr

0800985e <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800985e:	b480      	push	{r7}
 8009860:	b083      	sub	sp, #12
 8009862:	af00      	add	r7, sp, #0
 8009864:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009866:	bf00      	nop
 8009868:	370c      	adds	r7, #12
 800986a:	46bd      	mov	sp, r7
 800986c:	bc80      	pop	{r7}
 800986e:	4770      	bx	lr

08009870 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009870:	b480      	push	{r7}
 8009872:	b083      	sub	sp, #12
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
 8009878:	460b      	mov	r3, r1
 800987a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800987c:	bf00      	nop
 800987e:	370c      	adds	r7, #12
 8009880:	46bd      	mov	sp, r7
 8009882:	bc80      	pop	{r7}
 8009884:	4770      	bx	lr
	...

08009888 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009888:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800988c:	b08c      	sub	sp, #48	; 0x30
 800988e:	af00      	add	r7, sp, #0
 8009890:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009892:	2300      	movs	r3, #0
 8009894:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009898:	697b      	ldr	r3, [r7, #20]
 800989a:	689a      	ldr	r2, [r3, #8]
 800989c:	697b      	ldr	r3, [r7, #20]
 800989e:	691b      	ldr	r3, [r3, #16]
 80098a0:	431a      	orrs	r2, r3
 80098a2:	697b      	ldr	r3, [r7, #20]
 80098a4:	695b      	ldr	r3, [r3, #20]
 80098a6:	431a      	orrs	r2, r3
 80098a8:	697b      	ldr	r3, [r7, #20]
 80098aa:	69db      	ldr	r3, [r3, #28]
 80098ac:	4313      	orrs	r3, r2
 80098ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80098b0:	697b      	ldr	r3, [r7, #20]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	681a      	ldr	r2, [r3, #0]
 80098b6:	4b94      	ldr	r3, [pc, #592]	; (8009b08 <UART_SetConfig+0x280>)
 80098b8:	4013      	ands	r3, r2
 80098ba:	697a      	ldr	r2, [r7, #20]
 80098bc:	6812      	ldr	r2, [r2, #0]
 80098be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80098c0:	430b      	orrs	r3, r1
 80098c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80098c4:	697b      	ldr	r3, [r7, #20]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	685b      	ldr	r3, [r3, #4]
 80098ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80098ce:	697b      	ldr	r3, [r7, #20]
 80098d0:	68da      	ldr	r2, [r3, #12]
 80098d2:	697b      	ldr	r3, [r7, #20]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	430a      	orrs	r2, r1
 80098d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80098da:	697b      	ldr	r3, [r7, #20]
 80098dc:	699b      	ldr	r3, [r3, #24]
 80098de:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80098e0:	697b      	ldr	r3, [r7, #20]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	4a89      	ldr	r2, [pc, #548]	; (8009b0c <UART_SetConfig+0x284>)
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d004      	beq.n	80098f4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80098ea:	697b      	ldr	r3, [r7, #20]
 80098ec:	6a1b      	ldr	r3, [r3, #32]
 80098ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80098f0:	4313      	orrs	r3, r2
 80098f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80098f4:	697b      	ldr	r3, [r7, #20]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	689b      	ldr	r3, [r3, #8]
 80098fa:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80098fe:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8009902:	697a      	ldr	r2, [r7, #20]
 8009904:	6812      	ldr	r2, [r2, #0]
 8009906:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009908:	430b      	orrs	r3, r1
 800990a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800990c:	697b      	ldr	r3, [r7, #20]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009912:	f023 010f 	bic.w	r1, r3, #15
 8009916:	697b      	ldr	r3, [r7, #20]
 8009918:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800991a:	697b      	ldr	r3, [r7, #20]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	430a      	orrs	r2, r1
 8009920:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	4a7a      	ldr	r2, [pc, #488]	; (8009b10 <UART_SetConfig+0x288>)
 8009928:	4293      	cmp	r3, r2
 800992a:	d127      	bne.n	800997c <UART_SetConfig+0xf4>
 800992c:	2003      	movs	r0, #3
 800992e:	f7ff fb2b 	bl	8008f88 <LL_RCC_GetUSARTClockSource>
 8009932:	4603      	mov	r3, r0
 8009934:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8009938:	2b03      	cmp	r3, #3
 800993a:	d81b      	bhi.n	8009974 <UART_SetConfig+0xec>
 800993c:	a201      	add	r2, pc, #4	; (adr r2, 8009944 <UART_SetConfig+0xbc>)
 800993e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009942:	bf00      	nop
 8009944:	08009955 	.word	0x08009955
 8009948:	08009965 	.word	0x08009965
 800994c:	0800995d 	.word	0x0800995d
 8009950:	0800996d 	.word	0x0800996d
 8009954:	2301      	movs	r3, #1
 8009956:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800995a:	e080      	b.n	8009a5e <UART_SetConfig+0x1d6>
 800995c:	2302      	movs	r3, #2
 800995e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009962:	e07c      	b.n	8009a5e <UART_SetConfig+0x1d6>
 8009964:	2304      	movs	r3, #4
 8009966:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800996a:	e078      	b.n	8009a5e <UART_SetConfig+0x1d6>
 800996c:	2308      	movs	r3, #8
 800996e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009972:	e074      	b.n	8009a5e <UART_SetConfig+0x1d6>
 8009974:	2310      	movs	r3, #16
 8009976:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800997a:	e070      	b.n	8009a5e <UART_SetConfig+0x1d6>
 800997c:	697b      	ldr	r3, [r7, #20]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	4a64      	ldr	r2, [pc, #400]	; (8009b14 <UART_SetConfig+0x28c>)
 8009982:	4293      	cmp	r3, r2
 8009984:	d138      	bne.n	80099f8 <UART_SetConfig+0x170>
 8009986:	200c      	movs	r0, #12
 8009988:	f7ff fafe 	bl	8008f88 <LL_RCC_GetUSARTClockSource>
 800998c:	4603      	mov	r3, r0
 800998e:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8009992:	2b0c      	cmp	r3, #12
 8009994:	d82c      	bhi.n	80099f0 <UART_SetConfig+0x168>
 8009996:	a201      	add	r2, pc, #4	; (adr r2, 800999c <UART_SetConfig+0x114>)
 8009998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800999c:	080099d1 	.word	0x080099d1
 80099a0:	080099f1 	.word	0x080099f1
 80099a4:	080099f1 	.word	0x080099f1
 80099a8:	080099f1 	.word	0x080099f1
 80099ac:	080099e1 	.word	0x080099e1
 80099b0:	080099f1 	.word	0x080099f1
 80099b4:	080099f1 	.word	0x080099f1
 80099b8:	080099f1 	.word	0x080099f1
 80099bc:	080099d9 	.word	0x080099d9
 80099c0:	080099f1 	.word	0x080099f1
 80099c4:	080099f1 	.word	0x080099f1
 80099c8:	080099f1 	.word	0x080099f1
 80099cc:	080099e9 	.word	0x080099e9
 80099d0:	2300      	movs	r3, #0
 80099d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80099d6:	e042      	b.n	8009a5e <UART_SetConfig+0x1d6>
 80099d8:	2302      	movs	r3, #2
 80099da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80099de:	e03e      	b.n	8009a5e <UART_SetConfig+0x1d6>
 80099e0:	2304      	movs	r3, #4
 80099e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80099e6:	e03a      	b.n	8009a5e <UART_SetConfig+0x1d6>
 80099e8:	2308      	movs	r3, #8
 80099ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80099ee:	e036      	b.n	8009a5e <UART_SetConfig+0x1d6>
 80099f0:	2310      	movs	r3, #16
 80099f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80099f6:	e032      	b.n	8009a5e <UART_SetConfig+0x1d6>
 80099f8:	697b      	ldr	r3, [r7, #20]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	4a43      	ldr	r2, [pc, #268]	; (8009b0c <UART_SetConfig+0x284>)
 80099fe:	4293      	cmp	r3, r2
 8009a00:	d12a      	bne.n	8009a58 <UART_SetConfig+0x1d0>
 8009a02:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8009a06:	f7ff fad1 	bl	8008fac <LL_RCC_GetLPUARTClockSource>
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009a10:	d01a      	beq.n	8009a48 <UART_SetConfig+0x1c0>
 8009a12:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009a16:	d81b      	bhi.n	8009a50 <UART_SetConfig+0x1c8>
 8009a18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a1c:	d00c      	beq.n	8009a38 <UART_SetConfig+0x1b0>
 8009a1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a22:	d815      	bhi.n	8009a50 <UART_SetConfig+0x1c8>
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d003      	beq.n	8009a30 <UART_SetConfig+0x1a8>
 8009a28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a2c:	d008      	beq.n	8009a40 <UART_SetConfig+0x1b8>
 8009a2e:	e00f      	b.n	8009a50 <UART_SetConfig+0x1c8>
 8009a30:	2300      	movs	r3, #0
 8009a32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009a36:	e012      	b.n	8009a5e <UART_SetConfig+0x1d6>
 8009a38:	2302      	movs	r3, #2
 8009a3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009a3e:	e00e      	b.n	8009a5e <UART_SetConfig+0x1d6>
 8009a40:	2304      	movs	r3, #4
 8009a42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009a46:	e00a      	b.n	8009a5e <UART_SetConfig+0x1d6>
 8009a48:	2308      	movs	r3, #8
 8009a4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009a4e:	e006      	b.n	8009a5e <UART_SetConfig+0x1d6>
 8009a50:	2310      	movs	r3, #16
 8009a52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009a56:	e002      	b.n	8009a5e <UART_SetConfig+0x1d6>
 8009a58:	2310      	movs	r3, #16
 8009a5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009a5e:	697b      	ldr	r3, [r7, #20]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	4a2a      	ldr	r2, [pc, #168]	; (8009b0c <UART_SetConfig+0x284>)
 8009a64:	4293      	cmp	r3, r2
 8009a66:	f040 80a4 	bne.w	8009bb2 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009a6a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009a6e:	2b08      	cmp	r3, #8
 8009a70:	d823      	bhi.n	8009aba <UART_SetConfig+0x232>
 8009a72:	a201      	add	r2, pc, #4	; (adr r2, 8009a78 <UART_SetConfig+0x1f0>)
 8009a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a78:	08009a9d 	.word	0x08009a9d
 8009a7c:	08009abb 	.word	0x08009abb
 8009a80:	08009aa5 	.word	0x08009aa5
 8009a84:	08009abb 	.word	0x08009abb
 8009a88:	08009aab 	.word	0x08009aab
 8009a8c:	08009abb 	.word	0x08009abb
 8009a90:	08009abb 	.word	0x08009abb
 8009a94:	08009abb 	.word	0x08009abb
 8009a98:	08009ab3 	.word	0x08009ab3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009a9c:	f7fd ff4a 	bl	8007934 <HAL_RCC_GetPCLK1Freq>
 8009aa0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009aa2:	e010      	b.n	8009ac6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009aa4:	4b1c      	ldr	r3, [pc, #112]	; (8009b18 <UART_SetConfig+0x290>)
 8009aa6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009aa8:	e00d      	b.n	8009ac6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009aaa:	f7fd fe8f 	bl	80077cc <HAL_RCC_GetSysClockFreq>
 8009aae:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009ab0:	e009      	b.n	8009ac6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009ab2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009ab6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009ab8:	e005      	b.n	8009ac6 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8009aba:	2300      	movs	r3, #0
 8009abc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009abe:	2301      	movs	r3, #1
 8009ac0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009ac4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	f000 8137 	beq.w	8009d3c <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009ace:	697b      	ldr	r3, [r7, #20]
 8009ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ad2:	4a12      	ldr	r2, [pc, #72]	; (8009b1c <UART_SetConfig+0x294>)
 8009ad4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ad8:	461a      	mov	r2, r3
 8009ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009adc:	fbb3 f3f2 	udiv	r3, r3, r2
 8009ae0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009ae2:	697b      	ldr	r3, [r7, #20]
 8009ae4:	685a      	ldr	r2, [r3, #4]
 8009ae6:	4613      	mov	r3, r2
 8009ae8:	005b      	lsls	r3, r3, #1
 8009aea:	4413      	add	r3, r2
 8009aec:	69ba      	ldr	r2, [r7, #24]
 8009aee:	429a      	cmp	r2, r3
 8009af0:	d305      	bcc.n	8009afe <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	685b      	ldr	r3, [r3, #4]
 8009af6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009af8:	69ba      	ldr	r2, [r7, #24]
 8009afa:	429a      	cmp	r2, r3
 8009afc:	d910      	bls.n	8009b20 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8009afe:	2301      	movs	r3, #1
 8009b00:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009b04:	e11a      	b.n	8009d3c <UART_SetConfig+0x4b4>
 8009b06:	bf00      	nop
 8009b08:	cfff69f3 	.word	0xcfff69f3
 8009b0c:	40008000 	.word	0x40008000
 8009b10:	40013800 	.word	0x40013800
 8009b14:	40004400 	.word	0x40004400
 8009b18:	00f42400 	.word	0x00f42400
 8009b1c:	0801f854 	.word	0x0801f854
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b22:	2200      	movs	r2, #0
 8009b24:	60bb      	str	r3, [r7, #8]
 8009b26:	60fa      	str	r2, [r7, #12]
 8009b28:	697b      	ldr	r3, [r7, #20]
 8009b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b2c:	4a8e      	ldr	r2, [pc, #568]	; (8009d68 <UART_SetConfig+0x4e0>)
 8009b2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b32:	b29b      	uxth	r3, r3
 8009b34:	2200      	movs	r2, #0
 8009b36:	603b      	str	r3, [r7, #0]
 8009b38:	607a      	str	r2, [r7, #4]
 8009b3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b3e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009b42:	f7f7 fb09 	bl	8001158 <__aeabi_uldivmod>
 8009b46:	4602      	mov	r2, r0
 8009b48:	460b      	mov	r3, r1
 8009b4a:	4610      	mov	r0, r2
 8009b4c:	4619      	mov	r1, r3
 8009b4e:	f04f 0200 	mov.w	r2, #0
 8009b52:	f04f 0300 	mov.w	r3, #0
 8009b56:	020b      	lsls	r3, r1, #8
 8009b58:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009b5c:	0202      	lsls	r2, r0, #8
 8009b5e:	6979      	ldr	r1, [r7, #20]
 8009b60:	6849      	ldr	r1, [r1, #4]
 8009b62:	0849      	lsrs	r1, r1, #1
 8009b64:	2000      	movs	r0, #0
 8009b66:	460c      	mov	r4, r1
 8009b68:	4605      	mov	r5, r0
 8009b6a:	eb12 0804 	adds.w	r8, r2, r4
 8009b6e:	eb43 0905 	adc.w	r9, r3, r5
 8009b72:	697b      	ldr	r3, [r7, #20]
 8009b74:	685b      	ldr	r3, [r3, #4]
 8009b76:	2200      	movs	r2, #0
 8009b78:	469a      	mov	sl, r3
 8009b7a:	4693      	mov	fp, r2
 8009b7c:	4652      	mov	r2, sl
 8009b7e:	465b      	mov	r3, fp
 8009b80:	4640      	mov	r0, r8
 8009b82:	4649      	mov	r1, r9
 8009b84:	f7f7 fae8 	bl	8001158 <__aeabi_uldivmod>
 8009b88:	4602      	mov	r2, r0
 8009b8a:	460b      	mov	r3, r1
 8009b8c:	4613      	mov	r3, r2
 8009b8e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009b90:	6a3b      	ldr	r3, [r7, #32]
 8009b92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009b96:	d308      	bcc.n	8009baa <UART_SetConfig+0x322>
 8009b98:	6a3b      	ldr	r3, [r7, #32]
 8009b9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b9e:	d204      	bcs.n	8009baa <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8009ba0:	697b      	ldr	r3, [r7, #20]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	6a3a      	ldr	r2, [r7, #32]
 8009ba6:	60da      	str	r2, [r3, #12]
 8009ba8:	e0c8      	b.n	8009d3c <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8009baa:	2301      	movs	r3, #1
 8009bac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009bb0:	e0c4      	b.n	8009d3c <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009bb2:	697b      	ldr	r3, [r7, #20]
 8009bb4:	69db      	ldr	r3, [r3, #28]
 8009bb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009bba:	d167      	bne.n	8009c8c <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8009bbc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009bc0:	2b08      	cmp	r3, #8
 8009bc2:	d828      	bhi.n	8009c16 <UART_SetConfig+0x38e>
 8009bc4:	a201      	add	r2, pc, #4	; (adr r2, 8009bcc <UART_SetConfig+0x344>)
 8009bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bca:	bf00      	nop
 8009bcc:	08009bf1 	.word	0x08009bf1
 8009bd0:	08009bf9 	.word	0x08009bf9
 8009bd4:	08009c01 	.word	0x08009c01
 8009bd8:	08009c17 	.word	0x08009c17
 8009bdc:	08009c07 	.word	0x08009c07
 8009be0:	08009c17 	.word	0x08009c17
 8009be4:	08009c17 	.word	0x08009c17
 8009be8:	08009c17 	.word	0x08009c17
 8009bec:	08009c0f 	.word	0x08009c0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009bf0:	f7fd fea0 	bl	8007934 <HAL_RCC_GetPCLK1Freq>
 8009bf4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009bf6:	e014      	b.n	8009c22 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009bf8:	f7fd feae 	bl	8007958 <HAL_RCC_GetPCLK2Freq>
 8009bfc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009bfe:	e010      	b.n	8009c22 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009c00:	4b5a      	ldr	r3, [pc, #360]	; (8009d6c <UART_SetConfig+0x4e4>)
 8009c02:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009c04:	e00d      	b.n	8009c22 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009c06:	f7fd fde1 	bl	80077cc <HAL_RCC_GetSysClockFreq>
 8009c0a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009c0c:	e009      	b.n	8009c22 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c12:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009c14:	e005      	b.n	8009c22 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8009c16:	2300      	movs	r3, #0
 8009c18:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009c20:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	f000 8089 	beq.w	8009d3c <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c2e:	4a4e      	ldr	r2, [pc, #312]	; (8009d68 <UART_SetConfig+0x4e0>)
 8009c30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c34:	461a      	mov	r2, r3
 8009c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c38:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c3c:	005a      	lsls	r2, r3, #1
 8009c3e:	697b      	ldr	r3, [r7, #20]
 8009c40:	685b      	ldr	r3, [r3, #4]
 8009c42:	085b      	lsrs	r3, r3, #1
 8009c44:	441a      	add	r2, r3
 8009c46:	697b      	ldr	r3, [r7, #20]
 8009c48:	685b      	ldr	r3, [r3, #4]
 8009c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c4e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009c50:	6a3b      	ldr	r3, [r7, #32]
 8009c52:	2b0f      	cmp	r3, #15
 8009c54:	d916      	bls.n	8009c84 <UART_SetConfig+0x3fc>
 8009c56:	6a3b      	ldr	r3, [r7, #32]
 8009c58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c5c:	d212      	bcs.n	8009c84 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009c5e:	6a3b      	ldr	r3, [r7, #32]
 8009c60:	b29b      	uxth	r3, r3
 8009c62:	f023 030f 	bic.w	r3, r3, #15
 8009c66:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009c68:	6a3b      	ldr	r3, [r7, #32]
 8009c6a:	085b      	lsrs	r3, r3, #1
 8009c6c:	b29b      	uxth	r3, r3
 8009c6e:	f003 0307 	and.w	r3, r3, #7
 8009c72:	b29a      	uxth	r2, r3
 8009c74:	8bfb      	ldrh	r3, [r7, #30]
 8009c76:	4313      	orrs	r3, r2
 8009c78:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009c7a:	697b      	ldr	r3, [r7, #20]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	8bfa      	ldrh	r2, [r7, #30]
 8009c80:	60da      	str	r2, [r3, #12]
 8009c82:	e05b      	b.n	8009d3c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8009c84:	2301      	movs	r3, #1
 8009c86:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009c8a:	e057      	b.n	8009d3c <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009c8c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009c90:	2b08      	cmp	r3, #8
 8009c92:	d828      	bhi.n	8009ce6 <UART_SetConfig+0x45e>
 8009c94:	a201      	add	r2, pc, #4	; (adr r2, 8009c9c <UART_SetConfig+0x414>)
 8009c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c9a:	bf00      	nop
 8009c9c:	08009cc1 	.word	0x08009cc1
 8009ca0:	08009cc9 	.word	0x08009cc9
 8009ca4:	08009cd1 	.word	0x08009cd1
 8009ca8:	08009ce7 	.word	0x08009ce7
 8009cac:	08009cd7 	.word	0x08009cd7
 8009cb0:	08009ce7 	.word	0x08009ce7
 8009cb4:	08009ce7 	.word	0x08009ce7
 8009cb8:	08009ce7 	.word	0x08009ce7
 8009cbc:	08009cdf 	.word	0x08009cdf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009cc0:	f7fd fe38 	bl	8007934 <HAL_RCC_GetPCLK1Freq>
 8009cc4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009cc6:	e014      	b.n	8009cf2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009cc8:	f7fd fe46 	bl	8007958 <HAL_RCC_GetPCLK2Freq>
 8009ccc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009cce:	e010      	b.n	8009cf2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009cd0:	4b26      	ldr	r3, [pc, #152]	; (8009d6c <UART_SetConfig+0x4e4>)
 8009cd2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009cd4:	e00d      	b.n	8009cf2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009cd6:	f7fd fd79 	bl	80077cc <HAL_RCC_GetSysClockFreq>
 8009cda:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009cdc:	e009      	b.n	8009cf2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009cde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009ce2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009ce4:	e005      	b.n	8009cf2 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009cea:	2301      	movs	r3, #1
 8009cec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009cf0:	bf00      	nop
    }

    if (pclk != 0U)
 8009cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d021      	beq.n	8009d3c <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009cf8:	697b      	ldr	r3, [r7, #20]
 8009cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cfc:	4a1a      	ldr	r2, [pc, #104]	; (8009d68 <UART_SetConfig+0x4e0>)
 8009cfe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d02:	461a      	mov	r2, r3
 8009d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d06:	fbb3 f2f2 	udiv	r2, r3, r2
 8009d0a:	697b      	ldr	r3, [r7, #20]
 8009d0c:	685b      	ldr	r3, [r3, #4]
 8009d0e:	085b      	lsrs	r3, r3, #1
 8009d10:	441a      	add	r2, r3
 8009d12:	697b      	ldr	r3, [r7, #20]
 8009d14:	685b      	ldr	r3, [r3, #4]
 8009d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d1a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009d1c:	6a3b      	ldr	r3, [r7, #32]
 8009d1e:	2b0f      	cmp	r3, #15
 8009d20:	d909      	bls.n	8009d36 <UART_SetConfig+0x4ae>
 8009d22:	6a3b      	ldr	r3, [r7, #32]
 8009d24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d28:	d205      	bcs.n	8009d36 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009d2a:	6a3b      	ldr	r3, [r7, #32]
 8009d2c:	b29a      	uxth	r2, r3
 8009d2e:	697b      	ldr	r3, [r7, #20]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	60da      	str	r2, [r3, #12]
 8009d34:	e002      	b.n	8009d3c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8009d36:	2301      	movs	r3, #1
 8009d38:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009d3c:	697b      	ldr	r3, [r7, #20]
 8009d3e:	2201      	movs	r2, #1
 8009d40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009d44:	697b      	ldr	r3, [r7, #20]
 8009d46:	2201      	movs	r2, #1
 8009d48:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009d4c:	697b      	ldr	r3, [r7, #20]
 8009d4e:	2200      	movs	r2, #0
 8009d50:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8009d52:	697b      	ldr	r3, [r7, #20]
 8009d54:	2200      	movs	r2, #0
 8009d56:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8009d58:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	3730      	adds	r7, #48	; 0x30
 8009d60:	46bd      	mov	sp, r7
 8009d62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009d66:	bf00      	nop
 8009d68:	0801f854 	.word	0x0801f854
 8009d6c:	00f42400 	.word	0x00f42400

08009d70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009d70:	b480      	push	{r7}
 8009d72:	b083      	sub	sp, #12
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d7c:	f003 0301 	and.w	r3, r3, #1
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d00a      	beq.n	8009d9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	685b      	ldr	r3, [r3, #4]
 8009d8a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	430a      	orrs	r2, r1
 8009d98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d9e:	f003 0302 	and.w	r3, r3, #2
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d00a      	beq.n	8009dbc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	685b      	ldr	r3, [r3, #4]
 8009dac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	430a      	orrs	r2, r1
 8009dba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dc0:	f003 0304 	and.w	r3, r3, #4
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d00a      	beq.n	8009dde <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	685b      	ldr	r3, [r3, #4]
 8009dce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	430a      	orrs	r2, r1
 8009ddc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009de2:	f003 0308 	and.w	r3, r3, #8
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d00a      	beq.n	8009e00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	685b      	ldr	r3, [r3, #4]
 8009df0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	430a      	orrs	r2, r1
 8009dfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e04:	f003 0310 	and.w	r3, r3, #16
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d00a      	beq.n	8009e22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	689b      	ldr	r3, [r3, #8]
 8009e12:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	430a      	orrs	r2, r1
 8009e20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e26:	f003 0320 	and.w	r3, r3, #32
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d00a      	beq.n	8009e44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	689b      	ldr	r3, [r3, #8]
 8009e34:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	430a      	orrs	r2, r1
 8009e42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d01a      	beq.n	8009e86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	685b      	ldr	r3, [r3, #4]
 8009e56:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	430a      	orrs	r2, r1
 8009e64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e6e:	d10a      	bne.n	8009e86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	685b      	ldr	r3, [r3, #4]
 8009e76:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	430a      	orrs	r2, r1
 8009e84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d00a      	beq.n	8009ea8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	685b      	ldr	r3, [r3, #4]
 8009e98:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	430a      	orrs	r2, r1
 8009ea6:	605a      	str	r2, [r3, #4]
  }
}
 8009ea8:	bf00      	nop
 8009eaa:	370c      	adds	r7, #12
 8009eac:	46bd      	mov	sp, r7
 8009eae:	bc80      	pop	{r7}
 8009eb0:	4770      	bx	lr

08009eb2 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009eb2:	b580      	push	{r7, lr}
 8009eb4:	b086      	sub	sp, #24
 8009eb6:	af02      	add	r7, sp, #8
 8009eb8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009ec2:	f7f8 fd11 	bl	80028e8 <HAL_GetTick>
 8009ec6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	f003 0308 	and.w	r3, r3, #8
 8009ed2:	2b08      	cmp	r3, #8
 8009ed4:	d10e      	bne.n	8009ef4 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009ed6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009eda:	9300      	str	r3, [sp, #0]
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	2200      	movs	r2, #0
 8009ee0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f000 f832 	bl	8009f4e <UART_WaitOnFlagUntilTimeout>
 8009eea:	4603      	mov	r3, r0
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d001      	beq.n	8009ef4 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009ef0:	2303      	movs	r3, #3
 8009ef2:	e028      	b.n	8009f46 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f003 0304 	and.w	r3, r3, #4
 8009efe:	2b04      	cmp	r3, #4
 8009f00:	d10e      	bne.n	8009f20 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009f02:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009f06:	9300      	str	r3, [sp, #0]
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f000 f81c 	bl	8009f4e <UART_WaitOnFlagUntilTimeout>
 8009f16:	4603      	mov	r3, r0
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d001      	beq.n	8009f20 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009f1c:	2303      	movs	r3, #3
 8009f1e:	e012      	b.n	8009f46 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2220      	movs	r2, #32
 8009f24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2220      	movs	r2, #32
 8009f2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2200      	movs	r2, #0
 8009f34:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2200      	movs	r2, #0
 8009f3a:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2200      	movs	r2, #0
 8009f40:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009f44:	2300      	movs	r3, #0
}
 8009f46:	4618      	mov	r0, r3
 8009f48:	3710      	adds	r7, #16
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	bd80      	pop	{r7, pc}

08009f4e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009f4e:	b580      	push	{r7, lr}
 8009f50:	b09c      	sub	sp, #112	; 0x70
 8009f52:	af00      	add	r7, sp, #0
 8009f54:	60f8      	str	r0, [r7, #12]
 8009f56:	60b9      	str	r1, [r7, #8]
 8009f58:	603b      	str	r3, [r7, #0]
 8009f5a:	4613      	mov	r3, r2
 8009f5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f5e:	e0a9      	b.n	800a0b4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f66:	f000 80a5 	beq.w	800a0b4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f6a:	f7f8 fcbd 	bl	80028e8 <HAL_GetTick>
 8009f6e:	4602      	mov	r2, r0
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	1ad3      	subs	r3, r2, r3
 8009f74:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009f76:	429a      	cmp	r2, r3
 8009f78:	d302      	bcc.n	8009f80 <UART_WaitOnFlagUntilTimeout+0x32>
 8009f7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d140      	bne.n	800a002 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f88:	e853 3f00 	ldrex	r3, [r3]
 8009f8c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009f8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f90:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009f94:	667b      	str	r3, [r7, #100]	; 0x64
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	461a      	mov	r2, r3
 8009f9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009f9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009fa0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fa2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009fa4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009fa6:	e841 2300 	strex	r3, r2, [r1]
 8009faa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009fac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d1e6      	bne.n	8009f80 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	3308      	adds	r3, #8
 8009fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fbc:	e853 3f00 	ldrex	r3, [r3]
 8009fc0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fc4:	f023 0301 	bic.w	r3, r3, #1
 8009fc8:	663b      	str	r3, [r7, #96]	; 0x60
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	3308      	adds	r3, #8
 8009fd0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009fd2:	64ba      	str	r2, [r7, #72]	; 0x48
 8009fd4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fd6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009fd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009fda:	e841 2300 	strex	r3, r2, [r1]
 8009fde:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009fe0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d1e5      	bne.n	8009fb2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	2220      	movs	r2, #32
 8009fea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	2220      	movs	r2, #32
 8009ff2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8009ffe:	2303      	movs	r3, #3
 800a000:	e069      	b.n	800a0d6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	f003 0304 	and.w	r3, r3, #4
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d051      	beq.n	800a0b4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	69db      	ldr	r3, [r3, #28]
 800a016:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a01a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a01e:	d149      	bne.n	800a0b4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a028:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a032:	e853 3f00 	ldrex	r3, [r3]
 800a036:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a03a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a03e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	461a      	mov	r2, r3
 800a046:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a048:	637b      	str	r3, [r7, #52]	; 0x34
 800a04a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a04c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a04e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a050:	e841 2300 	strex	r3, r2, [r1]
 800a054:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d1e6      	bne.n	800a02a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	3308      	adds	r3, #8
 800a062:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a064:	697b      	ldr	r3, [r7, #20]
 800a066:	e853 3f00 	ldrex	r3, [r3]
 800a06a:	613b      	str	r3, [r7, #16]
   return(result);
 800a06c:	693b      	ldr	r3, [r7, #16]
 800a06e:	f023 0301 	bic.w	r3, r3, #1
 800a072:	66bb      	str	r3, [r7, #104]	; 0x68
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	3308      	adds	r3, #8
 800a07a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a07c:	623a      	str	r2, [r7, #32]
 800a07e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a080:	69f9      	ldr	r1, [r7, #28]
 800a082:	6a3a      	ldr	r2, [r7, #32]
 800a084:	e841 2300 	strex	r3, r2, [r1]
 800a088:	61bb      	str	r3, [r7, #24]
   return(result);
 800a08a:	69bb      	ldr	r3, [r7, #24]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d1e5      	bne.n	800a05c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	2220      	movs	r2, #32
 800a094:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	2220      	movs	r2, #32
 800a09c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	2220      	movs	r2, #32
 800a0a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800a0b0:	2303      	movs	r3, #3
 800a0b2:	e010      	b.n	800a0d6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	69da      	ldr	r2, [r3, #28]
 800a0ba:	68bb      	ldr	r3, [r7, #8]
 800a0bc:	4013      	ands	r3, r2
 800a0be:	68ba      	ldr	r2, [r7, #8]
 800a0c0:	429a      	cmp	r2, r3
 800a0c2:	bf0c      	ite	eq
 800a0c4:	2301      	moveq	r3, #1
 800a0c6:	2300      	movne	r3, #0
 800a0c8:	b2db      	uxtb	r3, r3
 800a0ca:	461a      	mov	r2, r3
 800a0cc:	79fb      	ldrb	r3, [r7, #7]
 800a0ce:	429a      	cmp	r2, r3
 800a0d0:	f43f af46 	beq.w	8009f60 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a0d4:	2300      	movs	r3, #0
}
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	3770      	adds	r7, #112	; 0x70
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	bd80      	pop	{r7, pc}
	...

0800a0e0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a0e0:	b480      	push	{r7}
 800a0e2:	b0a3      	sub	sp, #140	; 0x8c
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	60f8      	str	r0, [r7, #12]
 800a0e8:	60b9      	str	r1, [r7, #8]
 800a0ea:	4613      	mov	r3, r2
 800a0ec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	68ba      	ldr	r2, [r7, #8]
 800a0f2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	88fa      	ldrh	r2, [r7, #6]
 800a0f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	88fa      	ldrh	r2, [r7, #6]
 800a100:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	2200      	movs	r2, #0
 800a108:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	689b      	ldr	r3, [r3, #8]
 800a10e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a112:	d10e      	bne.n	800a132 <UART_Start_Receive_IT+0x52>
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	691b      	ldr	r3, [r3, #16]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d105      	bne.n	800a128 <UART_Start_Receive_IT+0x48>
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a122:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a126:	e02d      	b.n	800a184 <UART_Start_Receive_IT+0xa4>
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	22ff      	movs	r2, #255	; 0xff
 800a12c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a130:	e028      	b.n	800a184 <UART_Start_Receive_IT+0xa4>
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	689b      	ldr	r3, [r3, #8]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d10d      	bne.n	800a156 <UART_Start_Receive_IT+0x76>
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	691b      	ldr	r3, [r3, #16]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d104      	bne.n	800a14c <UART_Start_Receive_IT+0x6c>
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	22ff      	movs	r2, #255	; 0xff
 800a146:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a14a:	e01b      	b.n	800a184 <UART_Start_Receive_IT+0xa4>
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	227f      	movs	r2, #127	; 0x7f
 800a150:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a154:	e016      	b.n	800a184 <UART_Start_Receive_IT+0xa4>
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	689b      	ldr	r3, [r3, #8]
 800a15a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a15e:	d10d      	bne.n	800a17c <UART_Start_Receive_IT+0x9c>
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	691b      	ldr	r3, [r3, #16]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d104      	bne.n	800a172 <UART_Start_Receive_IT+0x92>
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	227f      	movs	r2, #127	; 0x7f
 800a16c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a170:	e008      	b.n	800a184 <UART_Start_Receive_IT+0xa4>
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	223f      	movs	r2, #63	; 0x3f
 800a176:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a17a:	e003      	b.n	800a184 <UART_Start_Receive_IT+0xa4>
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	2200      	movs	r2, #0
 800a180:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	2200      	movs	r2, #0
 800a188:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	2222      	movs	r2, #34	; 0x22
 800a190:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	3308      	adds	r3, #8
 800a19a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a19c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a19e:	e853 3f00 	ldrex	r3, [r3]
 800a1a2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800a1a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a1a6:	f043 0301 	orr.w	r3, r3, #1
 800a1aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	3308      	adds	r3, #8
 800a1b4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800a1b8:	673a      	str	r2, [r7, #112]	; 0x70
 800a1ba:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1bc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800a1be:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a1c0:	e841 2300 	strex	r3, r2, [r1]
 800a1c4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800a1c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d1e3      	bne.n	800a194 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a1d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a1d4:	d14f      	bne.n	800a276 <UART_Start_Receive_IT+0x196>
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a1dc:	88fa      	ldrh	r2, [r7, #6]
 800a1de:	429a      	cmp	r2, r3
 800a1e0:	d349      	bcc.n	800a276 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	689b      	ldr	r3, [r3, #8]
 800a1e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1ea:	d107      	bne.n	800a1fc <UART_Start_Receive_IT+0x11c>
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	691b      	ldr	r3, [r3, #16]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d103      	bne.n	800a1fc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	4a46      	ldr	r2, [pc, #280]	; (800a310 <UART_Start_Receive_IT+0x230>)
 800a1f8:	675a      	str	r2, [r3, #116]	; 0x74
 800a1fa:	e002      	b.n	800a202 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	4a45      	ldr	r2, [pc, #276]	; (800a314 <UART_Start_Receive_IT+0x234>)
 800a200:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	691b      	ldr	r3, [r3, #16]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d01a      	beq.n	800a240 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a210:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a212:	e853 3f00 	ldrex	r3, [r3]
 800a216:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a218:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a21a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a21e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	461a      	mov	r2, r3
 800a228:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a22c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a22e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a230:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a232:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a234:	e841 2300 	strex	r3, r2, [r1]
 800a238:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a23a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d1e4      	bne.n	800a20a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	3308      	adds	r3, #8
 800a246:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a24a:	e853 3f00 	ldrex	r3, [r3]
 800a24e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a252:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a256:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	3308      	adds	r3, #8
 800a25e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800a260:	64ba      	str	r2, [r7, #72]	; 0x48
 800a262:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a264:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a266:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a268:	e841 2300 	strex	r3, r2, [r1]
 800a26c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a26e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a270:	2b00      	cmp	r3, #0
 800a272:	d1e5      	bne.n	800a240 <UART_Start_Receive_IT+0x160>
 800a274:	e046      	b.n	800a304 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	689b      	ldr	r3, [r3, #8]
 800a27a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a27e:	d107      	bne.n	800a290 <UART_Start_Receive_IT+0x1b0>
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	691b      	ldr	r3, [r3, #16]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d103      	bne.n	800a290 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	4a23      	ldr	r2, [pc, #140]	; (800a318 <UART_Start_Receive_IT+0x238>)
 800a28c:	675a      	str	r2, [r3, #116]	; 0x74
 800a28e:	e002      	b.n	800a296 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	4a22      	ldr	r2, [pc, #136]	; (800a31c <UART_Start_Receive_IT+0x23c>)
 800a294:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	691b      	ldr	r3, [r3, #16]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d019      	beq.n	800a2d2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2a6:	e853 3f00 	ldrex	r3, [r3]
 800a2aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a2ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ae:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800a2b2:	677b      	str	r3, [r7, #116]	; 0x74
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	461a      	mov	r2, r3
 800a2ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a2bc:	637b      	str	r3, [r7, #52]	; 0x34
 800a2be:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a2c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a2c4:	e841 2300 	strex	r3, r2, [r1]
 800a2c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a2ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d1e6      	bne.n	800a29e <UART_Start_Receive_IT+0x1be>
 800a2d0:	e018      	b.n	800a304 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2d8:	697b      	ldr	r3, [r7, #20]
 800a2da:	e853 3f00 	ldrex	r3, [r3]
 800a2de:	613b      	str	r3, [r7, #16]
   return(result);
 800a2e0:	693b      	ldr	r3, [r7, #16]
 800a2e2:	f043 0320 	orr.w	r3, r3, #32
 800a2e6:	67bb      	str	r3, [r7, #120]	; 0x78
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	461a      	mov	r2, r3
 800a2ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a2f0:	623b      	str	r3, [r7, #32]
 800a2f2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2f4:	69f9      	ldr	r1, [r7, #28]
 800a2f6:	6a3a      	ldr	r2, [r7, #32]
 800a2f8:	e841 2300 	strex	r3, r2, [r1]
 800a2fc:	61bb      	str	r3, [r7, #24]
   return(result);
 800a2fe:	69bb      	ldr	r3, [r7, #24]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d1e6      	bne.n	800a2d2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800a304:	2300      	movs	r3, #0
}
 800a306:	4618      	mov	r0, r3
 800a308:	378c      	adds	r7, #140	; 0x8c
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bc80      	pop	{r7}
 800a30e:	4770      	bx	lr
 800a310:	0800acf5 	.word	0x0800acf5
 800a314:	0800a995 	.word	0x0800a995
 800a318:	0800a7dd 	.word	0x0800a7dd
 800a31c:	0800a625 	.word	0x0800a625

0800a320 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a320:	b480      	push	{r7}
 800a322:	b08f      	sub	sp, #60	; 0x3c
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a32e:	6a3b      	ldr	r3, [r7, #32]
 800a330:	e853 3f00 	ldrex	r3, [r3]
 800a334:	61fb      	str	r3, [r7, #28]
   return(result);
 800a336:	69fb      	ldr	r3, [r7, #28]
 800a338:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a33c:	637b      	str	r3, [r7, #52]	; 0x34
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	461a      	mov	r2, r3
 800a344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a346:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a348:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a34a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a34c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a34e:	e841 2300 	strex	r3, r2, [r1]
 800a352:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a356:	2b00      	cmp	r3, #0
 800a358:	d1e6      	bne.n	800a328 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	3308      	adds	r3, #8
 800a360:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	e853 3f00 	ldrex	r3, [r3]
 800a368:	60bb      	str	r3, [r7, #8]
   return(result);
 800a36a:	68bb      	ldr	r3, [r7, #8]
 800a36c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800a370:	633b      	str	r3, [r7, #48]	; 0x30
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	3308      	adds	r3, #8
 800a378:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a37a:	61ba      	str	r2, [r7, #24]
 800a37c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a37e:	6979      	ldr	r1, [r7, #20]
 800a380:	69ba      	ldr	r2, [r7, #24]
 800a382:	e841 2300 	strex	r3, r2, [r1]
 800a386:	613b      	str	r3, [r7, #16]
   return(result);
 800a388:	693b      	ldr	r3, [r7, #16]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d1e5      	bne.n	800a35a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	2220      	movs	r2, #32
 800a392:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800a396:	bf00      	nop
 800a398:	373c      	adds	r7, #60	; 0x3c
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bc80      	pop	{r7}
 800a39e:	4770      	bx	lr

0800a3a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a3a0:	b480      	push	{r7}
 800a3a2:	b095      	sub	sp, #84	; 0x54
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3b0:	e853 3f00 	ldrex	r3, [r3]
 800a3b4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a3b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a3bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	461a      	mov	r2, r3
 800a3c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3c6:	643b      	str	r3, [r7, #64]	; 0x40
 800a3c8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a3cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a3ce:	e841 2300 	strex	r3, r2, [r1]
 800a3d2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a3d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d1e6      	bne.n	800a3a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	3308      	adds	r3, #8
 800a3e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3e2:	6a3b      	ldr	r3, [r7, #32]
 800a3e4:	e853 3f00 	ldrex	r3, [r3]
 800a3e8:	61fb      	str	r3, [r7, #28]
   return(result);
 800a3ea:	69fb      	ldr	r3, [r7, #28]
 800a3ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a3f0:	f023 0301 	bic.w	r3, r3, #1
 800a3f4:	64bb      	str	r3, [r7, #72]	; 0x48
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	3308      	adds	r3, #8
 800a3fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a3fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a400:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a402:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a404:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a406:	e841 2300 	strex	r3, r2, [r1]
 800a40a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a40c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d1e3      	bne.n	800a3da <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a416:	2b01      	cmp	r3, #1
 800a418:	d118      	bne.n	800a44c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	e853 3f00 	ldrex	r3, [r3]
 800a426:	60bb      	str	r3, [r7, #8]
   return(result);
 800a428:	68bb      	ldr	r3, [r7, #8]
 800a42a:	f023 0310 	bic.w	r3, r3, #16
 800a42e:	647b      	str	r3, [r7, #68]	; 0x44
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	461a      	mov	r2, r3
 800a436:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a438:	61bb      	str	r3, [r7, #24]
 800a43a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a43c:	6979      	ldr	r1, [r7, #20]
 800a43e:	69ba      	ldr	r2, [r7, #24]
 800a440:	e841 2300 	strex	r3, r2, [r1]
 800a444:	613b      	str	r3, [r7, #16]
   return(result);
 800a446:	693b      	ldr	r3, [r7, #16]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d1e6      	bne.n	800a41a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2220      	movs	r2, #32
 800a450:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2200      	movs	r2, #0
 800a458:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	2200      	movs	r2, #0
 800a45e:	675a      	str	r2, [r3, #116]	; 0x74
}
 800a460:	bf00      	nop
 800a462:	3754      	adds	r7, #84	; 0x54
 800a464:	46bd      	mov	sp, r7
 800a466:	bc80      	pop	{r7}
 800a468:	4770      	bx	lr

0800a46a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a46a:	b580      	push	{r7, lr}
 800a46c:	b090      	sub	sp, #64	; 0x40
 800a46e:	af00      	add	r7, sp, #0
 800a470:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a476:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	f003 0320 	and.w	r3, r3, #32
 800a482:	2b00      	cmp	r3, #0
 800a484:	d137      	bne.n	800a4f6 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800a486:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a488:	2200      	movs	r2, #0
 800a48a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a48e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	3308      	adds	r3, #8
 800a494:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a498:	e853 3f00 	ldrex	r3, [r3]
 800a49c:	623b      	str	r3, [r7, #32]
   return(result);
 800a49e:	6a3b      	ldr	r3, [r7, #32]
 800a4a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a4a4:	63bb      	str	r3, [r7, #56]	; 0x38
 800a4a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	3308      	adds	r3, #8
 800a4ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a4ae:	633a      	str	r2, [r7, #48]	; 0x30
 800a4b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a4b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4b6:	e841 2300 	strex	r3, r2, [r1]
 800a4ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a4bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d1e5      	bne.n	800a48e <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a4c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4c8:	693b      	ldr	r3, [r7, #16]
 800a4ca:	e853 3f00 	ldrex	r3, [r3]
 800a4ce:	60fb      	str	r3, [r7, #12]
   return(result);
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4d6:	637b      	str	r3, [r7, #52]	; 0x34
 800a4d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	461a      	mov	r2, r3
 800a4de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4e0:	61fb      	str	r3, [r7, #28]
 800a4e2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4e4:	69b9      	ldr	r1, [r7, #24]
 800a4e6:	69fa      	ldr	r2, [r7, #28]
 800a4e8:	e841 2300 	strex	r3, r2, [r1]
 800a4ec:	617b      	str	r3, [r7, #20]
   return(result);
 800a4ee:	697b      	ldr	r3, [r7, #20]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d1e6      	bne.n	800a4c2 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a4f4:	e002      	b.n	800a4fc <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800a4f6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a4f8:	f7f8 ff10 	bl	800331c <HAL_UART_TxCpltCallback>
}
 800a4fc:	bf00      	nop
 800a4fe:	3740      	adds	r7, #64	; 0x40
 800a500:	46bd      	mov	sp, r7
 800a502:	bd80      	pop	{r7, pc}

0800a504 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b084      	sub	sp, #16
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a510:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a512:	68f8      	ldr	r0, [r7, #12]
 800a514:	f7ff f99a 	bl	800984c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a518:	bf00      	nop
 800a51a:	3710      	adds	r7, #16
 800a51c:	46bd      	mov	sp, r7
 800a51e:	bd80      	pop	{r7, pc}

0800a520 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b086      	sub	sp, #24
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a52c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a52e:	697b      	ldr	r3, [r7, #20]
 800a530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a534:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a536:	697b      	ldr	r3, [r7, #20]
 800a538:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a53c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a53e:	697b      	ldr	r3, [r7, #20]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	689b      	ldr	r3, [r3, #8]
 800a544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a548:	2b80      	cmp	r3, #128	; 0x80
 800a54a:	d109      	bne.n	800a560 <UART_DMAError+0x40>
 800a54c:	693b      	ldr	r3, [r7, #16]
 800a54e:	2b21      	cmp	r3, #33	; 0x21
 800a550:	d106      	bne.n	800a560 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a552:	697b      	ldr	r3, [r7, #20]
 800a554:	2200      	movs	r2, #0
 800a556:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800a55a:	6978      	ldr	r0, [r7, #20]
 800a55c:	f7ff fee0 	bl	800a320 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a560:	697b      	ldr	r3, [r7, #20]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	689b      	ldr	r3, [r3, #8]
 800a566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a56a:	2b40      	cmp	r3, #64	; 0x40
 800a56c:	d109      	bne.n	800a582 <UART_DMAError+0x62>
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	2b22      	cmp	r3, #34	; 0x22
 800a572:	d106      	bne.n	800a582 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a574:	697b      	ldr	r3, [r7, #20]
 800a576:	2200      	movs	r2, #0
 800a578:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800a57c:	6978      	ldr	r0, [r7, #20]
 800a57e:	f7ff ff0f 	bl	800a3a0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a582:	697b      	ldr	r3, [r7, #20]
 800a584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a588:	f043 0210 	orr.w	r2, r3, #16
 800a58c:	697b      	ldr	r3, [r7, #20]
 800a58e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a592:	6978      	ldr	r0, [r7, #20]
 800a594:	f7ff f963 	bl	800985e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a598:	bf00      	nop
 800a59a:	3718      	adds	r7, #24
 800a59c:	46bd      	mov	sp, r7
 800a59e:	bd80      	pop	{r7, pc}

0800a5a0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b084      	sub	sp, #16
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a5be:	68f8      	ldr	r0, [r7, #12]
 800a5c0:	f7ff f94d 	bl	800985e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a5c4:	bf00      	nop
 800a5c6:	3710      	adds	r7, #16
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	bd80      	pop	{r7, pc}

0800a5cc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b088      	sub	sp, #32
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	e853 3f00 	ldrex	r3, [r3]
 800a5e0:	60bb      	str	r3, [r7, #8]
   return(result);
 800a5e2:	68bb      	ldr	r3, [r7, #8]
 800a5e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a5e8:	61fb      	str	r3, [r7, #28]
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	461a      	mov	r2, r3
 800a5f0:	69fb      	ldr	r3, [r7, #28]
 800a5f2:	61bb      	str	r3, [r7, #24]
 800a5f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5f6:	6979      	ldr	r1, [r7, #20]
 800a5f8:	69ba      	ldr	r2, [r7, #24]
 800a5fa:	e841 2300 	strex	r3, r2, [r1]
 800a5fe:	613b      	str	r3, [r7, #16]
   return(result);
 800a600:	693b      	ldr	r3, [r7, #16]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d1e6      	bne.n	800a5d4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	2220      	movs	r2, #32
 800a60a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	2200      	movs	r2, #0
 800a612:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a614:	6878      	ldr	r0, [r7, #4]
 800a616:	f7f8 fe81 	bl	800331c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a61a:	bf00      	nop
 800a61c:	3720      	adds	r7, #32
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd80      	pop	{r7, pc}
	...

0800a624 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b09c      	sub	sp, #112	; 0x70
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a632:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a63c:	2b22      	cmp	r3, #34	; 0x22
 800a63e:	f040 80be 	bne.w	800a7be <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a648:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a64c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a650:	b2d9      	uxtb	r1, r3
 800a652:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800a656:	b2da      	uxtb	r2, r3
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a65c:	400a      	ands	r2, r1
 800a65e:	b2d2      	uxtb	r2, r2
 800a660:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a666:	1c5a      	adds	r2, r3, #1
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a672:	b29b      	uxth	r3, r3
 800a674:	3b01      	subs	r3, #1
 800a676:	b29a      	uxth	r2, r3
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a684:	b29b      	uxth	r3, r3
 800a686:	2b00      	cmp	r3, #0
 800a688:	f040 80a1 	bne.w	800a7ce <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a692:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a694:	e853 3f00 	ldrex	r3, [r3]
 800a698:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a69a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a69c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a6a0:	66bb      	str	r3, [r7, #104]	; 0x68
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	461a      	mov	r2, r3
 800a6a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a6aa:	65bb      	str	r3, [r7, #88]	; 0x58
 800a6ac:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6ae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a6b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a6b2:	e841 2300 	strex	r3, r2, [r1]
 800a6b6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a6b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d1e6      	bne.n	800a68c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	3308      	adds	r3, #8
 800a6c4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6c8:	e853 3f00 	ldrex	r3, [r3]
 800a6cc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a6ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6d0:	f023 0301 	bic.w	r3, r3, #1
 800a6d4:	667b      	str	r3, [r7, #100]	; 0x64
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	3308      	adds	r3, #8
 800a6dc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a6de:	647a      	str	r2, [r7, #68]	; 0x44
 800a6e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a6e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a6e6:	e841 2300 	strex	r3, r2, [r1]
 800a6ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a6ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d1e5      	bne.n	800a6be <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	2220      	movs	r2, #32
 800a6f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2200      	movs	r2, #0
 800a704:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	4a33      	ldr	r2, [pc, #204]	; (800a7d8 <UART_RxISR_8BIT+0x1b4>)
 800a70c:	4293      	cmp	r3, r2
 800a70e:	d01f      	beq.n	800a750 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	685b      	ldr	r3, [r3, #4]
 800a716:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d018      	beq.n	800a750 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a726:	e853 3f00 	ldrex	r3, [r3]
 800a72a:	623b      	str	r3, [r7, #32]
   return(result);
 800a72c:	6a3b      	ldr	r3, [r7, #32]
 800a72e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a732:	663b      	str	r3, [r7, #96]	; 0x60
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	461a      	mov	r2, r3
 800a73a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a73c:	633b      	str	r3, [r7, #48]	; 0x30
 800a73e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a740:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a742:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a744:	e841 2300 	strex	r3, r2, [r1]
 800a748:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a74a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d1e6      	bne.n	800a71e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a754:	2b01      	cmp	r3, #1
 800a756:	d12e      	bne.n	800a7b6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2200      	movs	r2, #0
 800a75c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a764:	693b      	ldr	r3, [r7, #16]
 800a766:	e853 3f00 	ldrex	r3, [r3]
 800a76a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	f023 0310 	bic.w	r3, r3, #16
 800a772:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	461a      	mov	r2, r3
 800a77a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a77c:	61fb      	str	r3, [r7, #28]
 800a77e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a780:	69b9      	ldr	r1, [r7, #24]
 800a782:	69fa      	ldr	r2, [r7, #28]
 800a784:	e841 2300 	strex	r3, r2, [r1]
 800a788:	617b      	str	r3, [r7, #20]
   return(result);
 800a78a:	697b      	ldr	r3, [r7, #20]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d1e6      	bne.n	800a75e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	69db      	ldr	r3, [r3, #28]
 800a796:	f003 0310 	and.w	r3, r3, #16
 800a79a:	2b10      	cmp	r3, #16
 800a79c:	d103      	bne.n	800a7a6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	2210      	movs	r2, #16
 800a7a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a7ac:	4619      	mov	r1, r3
 800a7ae:	6878      	ldr	r0, [r7, #4]
 800a7b0:	f7ff f85e 	bl	8009870 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a7b4:	e00b      	b.n	800a7ce <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800a7b6:	6878      	ldr	r0, [r7, #4]
 800a7b8:	f7f8 fdc6 	bl	8003348 <HAL_UART_RxCpltCallback>
}
 800a7bc:	e007      	b.n	800a7ce <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	699a      	ldr	r2, [r3, #24]
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	f042 0208 	orr.w	r2, r2, #8
 800a7cc:	619a      	str	r2, [r3, #24]
}
 800a7ce:	bf00      	nop
 800a7d0:	3770      	adds	r7, #112	; 0x70
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bd80      	pop	{r7, pc}
 800a7d6:	bf00      	nop
 800a7d8:	40008000 	.word	0x40008000

0800a7dc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b09c      	sub	sp, #112	; 0x70
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a7ea:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a7f4:	2b22      	cmp	r3, #34	; 0x22
 800a7f6:	f040 80be 	bne.w	800a976 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a800:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a808:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800a80a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800a80e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800a812:	4013      	ands	r3, r2
 800a814:	b29a      	uxth	r2, r3
 800a816:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a818:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a81e:	1c9a      	adds	r2, r3, #2
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a82a:	b29b      	uxth	r3, r3
 800a82c:	3b01      	subs	r3, #1
 800a82e:	b29a      	uxth	r2, r3
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a83c:	b29b      	uxth	r3, r3
 800a83e:	2b00      	cmp	r3, #0
 800a840:	f040 80a1 	bne.w	800a986 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a84a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a84c:	e853 3f00 	ldrex	r3, [r3]
 800a850:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a852:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a854:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a858:	667b      	str	r3, [r7, #100]	; 0x64
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	461a      	mov	r2, r3
 800a860:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a862:	657b      	str	r3, [r7, #84]	; 0x54
 800a864:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a866:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a868:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a86a:	e841 2300 	strex	r3, r2, [r1]
 800a86e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a870:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a872:	2b00      	cmp	r3, #0
 800a874:	d1e6      	bne.n	800a844 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	3308      	adds	r3, #8
 800a87c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a87e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a880:	e853 3f00 	ldrex	r3, [r3]
 800a884:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a888:	f023 0301 	bic.w	r3, r3, #1
 800a88c:	663b      	str	r3, [r7, #96]	; 0x60
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	3308      	adds	r3, #8
 800a894:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a896:	643a      	str	r2, [r7, #64]	; 0x40
 800a898:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a89a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a89c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a89e:	e841 2300 	strex	r3, r2, [r1]
 800a8a2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a8a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d1e5      	bne.n	800a876 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	2220      	movs	r2, #32
 800a8ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	4a33      	ldr	r2, [pc, #204]	; (800a990 <UART_RxISR_16BIT+0x1b4>)
 800a8c4:	4293      	cmp	r3, r2
 800a8c6:	d01f      	beq.n	800a908 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	685b      	ldr	r3, [r3, #4]
 800a8ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d018      	beq.n	800a908 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8dc:	6a3b      	ldr	r3, [r7, #32]
 800a8de:	e853 3f00 	ldrex	r3, [r3]
 800a8e2:	61fb      	str	r3, [r7, #28]
   return(result);
 800a8e4:	69fb      	ldr	r3, [r7, #28]
 800a8e6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a8ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	461a      	mov	r2, r3
 800a8f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a8f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a8f6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a8fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a8fc:	e841 2300 	strex	r3, r2, [r1]
 800a900:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a904:	2b00      	cmp	r3, #0
 800a906:	d1e6      	bne.n	800a8d6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a90c:	2b01      	cmp	r3, #1
 800a90e:	d12e      	bne.n	800a96e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2200      	movs	r2, #0
 800a914:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	e853 3f00 	ldrex	r3, [r3]
 800a922:	60bb      	str	r3, [r7, #8]
   return(result);
 800a924:	68bb      	ldr	r3, [r7, #8]
 800a926:	f023 0310 	bic.w	r3, r3, #16
 800a92a:	65bb      	str	r3, [r7, #88]	; 0x58
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	461a      	mov	r2, r3
 800a932:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a934:	61bb      	str	r3, [r7, #24]
 800a936:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a938:	6979      	ldr	r1, [r7, #20]
 800a93a:	69ba      	ldr	r2, [r7, #24]
 800a93c:	e841 2300 	strex	r3, r2, [r1]
 800a940:	613b      	str	r3, [r7, #16]
   return(result);
 800a942:	693b      	ldr	r3, [r7, #16]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d1e6      	bne.n	800a916 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	69db      	ldr	r3, [r3, #28]
 800a94e:	f003 0310 	and.w	r3, r3, #16
 800a952:	2b10      	cmp	r3, #16
 800a954:	d103      	bne.n	800a95e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	2210      	movs	r2, #16
 800a95c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a964:	4619      	mov	r1, r3
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	f7fe ff82 	bl	8009870 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a96c:	e00b      	b.n	800a986 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f7f8 fcea 	bl	8003348 <HAL_UART_RxCpltCallback>
}
 800a974:	e007      	b.n	800a986 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	699a      	ldr	r2, [r3, #24]
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	f042 0208 	orr.w	r2, r2, #8
 800a984:	619a      	str	r2, [r3, #24]
}
 800a986:	bf00      	nop
 800a988:	3770      	adds	r7, #112	; 0x70
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bd80      	pop	{r7, pc}
 800a98e:	bf00      	nop
 800a990:	40008000 	.word	0x40008000

0800a994 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b0ac      	sub	sp, #176	; 0xb0
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a9a2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	69db      	ldr	r3, [r3, #28]
 800a9ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	689b      	ldr	r3, [r3, #8]
 800a9c0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a9ca:	2b22      	cmp	r3, #34	; 0x22
 800a9cc:	f040 8182 	bne.w	800acd4 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a9d6:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a9da:	e125      	b.n	800ac28 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9e2:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a9e6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800a9ea:	b2d9      	uxtb	r1, r3
 800a9ec:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800a9f0:	b2da      	uxtb	r2, r3
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9f6:	400a      	ands	r2, r1
 800a9f8:	b2d2      	uxtb	r2, r2
 800a9fa:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa00:	1c5a      	adds	r2, r3, #1
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800aa0c:	b29b      	uxth	r3, r3
 800aa0e:	3b01      	subs	r3, #1
 800aa10:	b29a      	uxth	r2, r3
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	69db      	ldr	r3, [r3, #28]
 800aa1e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800aa22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800aa26:	f003 0307 	and.w	r3, r3, #7
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d053      	beq.n	800aad6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800aa2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800aa32:	f003 0301 	and.w	r3, r3, #1
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d011      	beq.n	800aa5e <UART_RxISR_8BIT_FIFOEN+0xca>
 800aa3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800aa3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d00b      	beq.n	800aa5e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	2201      	movs	r2, #1
 800aa4c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa54:	f043 0201 	orr.w	r2, r3, #1
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aa5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800aa62:	f003 0302 	and.w	r3, r3, #2
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d011      	beq.n	800aa8e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800aa6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800aa6e:	f003 0301 	and.w	r3, r3, #1
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d00b      	beq.n	800aa8e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	2202      	movs	r2, #2
 800aa7c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa84:	f043 0204 	orr.w	r2, r3, #4
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aa8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800aa92:	f003 0304 	and.w	r3, r3, #4
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d011      	beq.n	800aabe <UART_RxISR_8BIT_FIFOEN+0x12a>
 800aa9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800aa9e:	f003 0301 	and.w	r3, r3, #1
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d00b      	beq.n	800aabe <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	2204      	movs	r2, #4
 800aaac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aab4:	f043 0202 	orr.w	r2, r3, #2
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d006      	beq.n	800aad6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800aac8:	6878      	ldr	r0, [r7, #4]
 800aaca:	f7fe fec8 	bl	800985e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	2200      	movs	r2, #0
 800aad2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800aadc:	b29b      	uxth	r3, r3
 800aade:	2b00      	cmp	r3, #0
 800aae0:	f040 80a2 	bne.w	800ac28 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aaec:	e853 3f00 	ldrex	r3, [r3]
 800aaf0:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800aaf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aaf4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aaf8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	461a      	mov	r2, r3
 800ab02:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ab06:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ab08:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab0a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800ab0c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800ab0e:	e841 2300 	strex	r3, r2, [r1]
 800ab12:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800ab14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d1e4      	bne.n	800aae4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	3308      	adds	r3, #8
 800ab20:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ab24:	e853 3f00 	ldrex	r3, [r3]
 800ab28:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800ab2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ab2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ab30:	f023 0301 	bic.w	r3, r3, #1
 800ab34:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	3308      	adds	r3, #8
 800ab3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ab42:	66ba      	str	r2, [r7, #104]	; 0x68
 800ab44:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab46:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800ab48:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ab4a:	e841 2300 	strex	r3, r2, [r1]
 800ab4e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800ab50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d1e1      	bne.n	800ab1a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	2220      	movs	r2, #32
 800ab5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	2200      	movs	r2, #0
 800ab62:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2200      	movs	r2, #0
 800ab68:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	4a5f      	ldr	r2, [pc, #380]	; (800acec <UART_RxISR_8BIT_FIFOEN+0x358>)
 800ab70:	4293      	cmp	r3, r2
 800ab72:	d021      	beq.n	800abb8 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	685b      	ldr	r3, [r3, #4]
 800ab7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d01a      	beq.n	800abb8 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab8a:	e853 3f00 	ldrex	r3, [r3]
 800ab8e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800ab90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab92:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ab96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	461a      	mov	r2, r3
 800aba0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800aba4:	657b      	str	r3, [r7, #84]	; 0x54
 800aba6:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aba8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800abaa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800abac:	e841 2300 	strex	r3, r2, [r1]
 800abb0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800abb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d1e4      	bne.n	800ab82 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800abbc:	2b01      	cmp	r3, #1
 800abbe:	d130      	bne.n	800ac22 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	2200      	movs	r2, #0
 800abc4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abce:	e853 3f00 	ldrex	r3, [r3]
 800abd2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800abd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abd6:	f023 0310 	bic.w	r3, r3, #16
 800abda:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	461a      	mov	r2, r3
 800abe4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800abe8:	643b      	str	r3, [r7, #64]	; 0x40
 800abea:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800abee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800abf0:	e841 2300 	strex	r3, r2, [r1]
 800abf4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800abf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d1e4      	bne.n	800abc6 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	69db      	ldr	r3, [r3, #28]
 800ac02:	f003 0310 	and.w	r3, r3, #16
 800ac06:	2b10      	cmp	r3, #16
 800ac08:	d103      	bne.n	800ac12 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	2210      	movs	r2, #16
 800ac10:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ac18:	4619      	mov	r1, r3
 800ac1a:	6878      	ldr	r0, [r7, #4]
 800ac1c:	f7fe fe28 	bl	8009870 <HAL_UARTEx_RxEventCallback>
 800ac20:	e002      	b.n	800ac28 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800ac22:	6878      	ldr	r0, [r7, #4]
 800ac24:	f7f8 fb90 	bl	8003348 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ac28:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d006      	beq.n	800ac3e <UART_RxISR_8BIT_FIFOEN+0x2aa>
 800ac30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ac34:	f003 0320 	and.w	r3, r3, #32
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	f47f aecf 	bne.w	800a9dc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ac44:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ac48:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d049      	beq.n	800ace4 <UART_RxISR_8BIT_FIFOEN+0x350>
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ac56:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800ac5a:	429a      	cmp	r2, r3
 800ac5c:	d242      	bcs.n	800ace4 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	3308      	adds	r3, #8
 800ac64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac66:	6a3b      	ldr	r3, [r7, #32]
 800ac68:	e853 3f00 	ldrex	r3, [r3]
 800ac6c:	61fb      	str	r3, [r7, #28]
   return(result);
 800ac6e:	69fb      	ldr	r3, [r7, #28]
 800ac70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ac74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	3308      	adds	r3, #8
 800ac7e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800ac82:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ac84:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ac88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ac8a:	e841 2300 	strex	r3, r2, [r1]
 800ac8e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ac90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d1e3      	bne.n	800ac5e <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	4a15      	ldr	r2, [pc, #84]	; (800acf0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800ac9a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	e853 3f00 	ldrex	r3, [r3]
 800aca8:	60bb      	str	r3, [r7, #8]
   return(result);
 800acaa:	68bb      	ldr	r3, [r7, #8]
 800acac:	f043 0320 	orr.w	r3, r3, #32
 800acb0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	461a      	mov	r2, r3
 800acba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800acbe:	61bb      	str	r3, [r7, #24]
 800acc0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acc2:	6979      	ldr	r1, [r7, #20]
 800acc4:	69ba      	ldr	r2, [r7, #24]
 800acc6:	e841 2300 	strex	r3, r2, [r1]
 800acca:	613b      	str	r3, [r7, #16]
   return(result);
 800accc:	693b      	ldr	r3, [r7, #16]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d1e4      	bne.n	800ac9c <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800acd2:	e007      	b.n	800ace4 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	699a      	ldr	r2, [r3, #24]
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	f042 0208 	orr.w	r2, r2, #8
 800ace2:	619a      	str	r2, [r3, #24]
}
 800ace4:	bf00      	nop
 800ace6:	37b0      	adds	r7, #176	; 0xb0
 800ace8:	46bd      	mov	sp, r7
 800acea:	bd80      	pop	{r7, pc}
 800acec:	40008000 	.word	0x40008000
 800acf0:	0800a625 	.word	0x0800a625

0800acf4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b0ae      	sub	sp, #184	; 0xb8
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ad02:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	69db      	ldr	r3, [r3, #28]
 800ad0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	689b      	ldr	r3, [r3, #8]
 800ad20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ad2a:	2b22      	cmp	r3, #34	; 0x22
 800ad2c:	f040 8186 	bne.w	800b03c <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ad36:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ad3a:	e129      	b.n	800af90 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad42:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800ad4e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800ad52:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800ad56:	4013      	ands	r3, r2
 800ad58:	b29a      	uxth	r2, r3
 800ad5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ad5e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad64:	1c9a      	adds	r2, r3, #2
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ad70:	b29b      	uxth	r3, r3
 800ad72:	3b01      	subs	r3, #1
 800ad74:	b29a      	uxth	r2, r3
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	69db      	ldr	r3, [r3, #28]
 800ad82:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ad86:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ad8a:	f003 0307 	and.w	r3, r3, #7
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d053      	beq.n	800ae3a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ad92:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ad96:	f003 0301 	and.w	r3, r3, #1
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d011      	beq.n	800adc2 <UART_RxISR_16BIT_FIFOEN+0xce>
 800ad9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ada2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d00b      	beq.n	800adc2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	2201      	movs	r2, #1
 800adb0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800adb8:	f043 0201 	orr.w	r2, r3, #1
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800adc2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800adc6:	f003 0302 	and.w	r3, r3, #2
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d011      	beq.n	800adf2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800adce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800add2:	f003 0301 	and.w	r3, r3, #1
 800add6:	2b00      	cmp	r3, #0
 800add8:	d00b      	beq.n	800adf2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	2202      	movs	r2, #2
 800ade0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ade8:	f043 0204 	orr.w	r2, r3, #4
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800adf2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800adf6:	f003 0304 	and.w	r3, r3, #4
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d011      	beq.n	800ae22 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800adfe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ae02:	f003 0301 	and.w	r3, r3, #1
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d00b      	beq.n	800ae22 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	2204      	movs	r2, #4
 800ae10:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae18:	f043 0202 	orr.w	r2, r3, #2
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d006      	beq.n	800ae3a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ae2c:	6878      	ldr	r0, [r7, #4]
 800ae2e:	f7fe fd16 	bl	800985e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	2200      	movs	r2, #0
 800ae36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ae40:	b29b      	uxth	r3, r3
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	f040 80a4 	bne.w	800af90 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ae50:	e853 3f00 	ldrex	r3, [r3]
 800ae54:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ae56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ae58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ae5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	461a      	mov	r2, r3
 800ae66:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ae6a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ae6e:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae70:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ae72:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ae76:	e841 2300 	strex	r3, r2, [r1]
 800ae7a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ae7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d1e2      	bne.n	800ae48 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	3308      	adds	r3, #8
 800ae88:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ae8c:	e853 3f00 	ldrex	r3, [r3]
 800ae90:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ae92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ae94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ae98:	f023 0301 	bic.w	r3, r3, #1
 800ae9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	3308      	adds	r3, #8
 800aea6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800aeaa:	66fa      	str	r2, [r7, #108]	; 0x6c
 800aeac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800aeb0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800aeb2:	e841 2300 	strex	r3, r2, [r1]
 800aeb6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800aeb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d1e1      	bne.n	800ae82 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	2220      	movs	r2, #32
 800aec2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	2200      	movs	r2, #0
 800aeca:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2200      	movs	r2, #0
 800aed0:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	4a5f      	ldr	r2, [pc, #380]	; (800b054 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800aed8:	4293      	cmp	r3, r2
 800aeda:	d021      	beq.n	800af20 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	685b      	ldr	r3, [r3, #4]
 800aee2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d01a      	beq.n	800af20 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aef0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aef2:	e853 3f00 	ldrex	r3, [r3]
 800aef6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800aef8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aefa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800aefe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	461a      	mov	r2, r3
 800af08:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800af0c:	65bb      	str	r3, [r7, #88]	; 0x58
 800af0e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af10:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800af12:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800af14:	e841 2300 	strex	r3, r2, [r1]
 800af18:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800af1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d1e4      	bne.n	800aeea <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af24:	2b01      	cmp	r3, #1
 800af26:	d130      	bne.n	800af8a <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2200      	movs	r2, #0
 800af2c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af36:	e853 3f00 	ldrex	r3, [r3]
 800af3a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800af3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af3e:	f023 0310 	bic.w	r3, r3, #16
 800af42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	461a      	mov	r2, r3
 800af4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800af50:	647b      	str	r3, [r7, #68]	; 0x44
 800af52:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af54:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800af56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800af58:	e841 2300 	strex	r3, r2, [r1]
 800af5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800af5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af60:	2b00      	cmp	r3, #0
 800af62:	d1e4      	bne.n	800af2e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	69db      	ldr	r3, [r3, #28]
 800af6a:	f003 0310 	and.w	r3, r3, #16
 800af6e:	2b10      	cmp	r3, #16
 800af70:	d103      	bne.n	800af7a <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	2210      	movs	r2, #16
 800af78:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800af80:	4619      	mov	r1, r3
 800af82:	6878      	ldr	r0, [r7, #4]
 800af84:	f7fe fc74 	bl	8009870 <HAL_UARTEx_RxEventCallback>
 800af88:	e002      	b.n	800af90 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800af8a:	6878      	ldr	r0, [r7, #4]
 800af8c:	f7f8 f9dc 	bl	8003348 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800af90:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800af94:	2b00      	cmp	r3, #0
 800af96:	d006      	beq.n	800afa6 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 800af98:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800af9c:	f003 0320 	and.w	r3, r3, #32
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	f47f aecb 	bne.w	800ad3c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800afac:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800afb0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d049      	beq.n	800b04c <UART_RxISR_16BIT_FIFOEN+0x358>
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800afbe:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800afc2:	429a      	cmp	r2, r3
 800afc4:	d242      	bcs.n	800b04c <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	3308      	adds	r3, #8
 800afcc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afd0:	e853 3f00 	ldrex	r3, [r3]
 800afd4:	623b      	str	r3, [r7, #32]
   return(result);
 800afd6:	6a3b      	ldr	r3, [r7, #32]
 800afd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800afdc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	3308      	adds	r3, #8
 800afe6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800afea:	633a      	str	r2, [r7, #48]	; 0x30
 800afec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aff0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aff2:	e841 2300 	strex	r3, r2, [r1]
 800aff6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800aff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800affa:	2b00      	cmp	r3, #0
 800affc:	d1e3      	bne.n	800afc6 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	4a15      	ldr	r2, [pc, #84]	; (800b058 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800b002:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b00a:	693b      	ldr	r3, [r7, #16]
 800b00c:	e853 3f00 	ldrex	r3, [r3]
 800b010:	60fb      	str	r3, [r7, #12]
   return(result);
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	f043 0320 	orr.w	r3, r3, #32
 800b018:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	461a      	mov	r2, r3
 800b022:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b026:	61fb      	str	r3, [r7, #28]
 800b028:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b02a:	69b9      	ldr	r1, [r7, #24]
 800b02c:	69fa      	ldr	r2, [r7, #28]
 800b02e:	e841 2300 	strex	r3, r2, [r1]
 800b032:	617b      	str	r3, [r7, #20]
   return(result);
 800b034:	697b      	ldr	r3, [r7, #20]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d1e4      	bne.n	800b004 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b03a:	e007      	b.n	800b04c <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	699a      	ldr	r2, [r3, #24]
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	f042 0208 	orr.w	r2, r2, #8
 800b04a:	619a      	str	r2, [r3, #24]
}
 800b04c:	bf00      	nop
 800b04e:	37b8      	adds	r7, #184	; 0xb8
 800b050:	46bd      	mov	sp, r7
 800b052:	bd80      	pop	{r7, pc}
 800b054:	40008000 	.word	0x40008000
 800b058:	0800a7dd 	.word	0x0800a7dd

0800b05c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b05c:	b480      	push	{r7}
 800b05e:	b083      	sub	sp, #12
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b064:	bf00      	nop
 800b066:	370c      	adds	r7, #12
 800b068:	46bd      	mov	sp, r7
 800b06a:	bc80      	pop	{r7}
 800b06c:	4770      	bx	lr

0800b06e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b06e:	b480      	push	{r7}
 800b070:	b083      	sub	sp, #12
 800b072:	af00      	add	r7, sp, #0
 800b074:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b076:	bf00      	nop
 800b078:	370c      	adds	r7, #12
 800b07a:	46bd      	mov	sp, r7
 800b07c:	bc80      	pop	{r7}
 800b07e:	4770      	bx	lr

0800b080 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b080:	b480      	push	{r7}
 800b082:	b083      	sub	sp, #12
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b088:	bf00      	nop
 800b08a:	370c      	adds	r7, #12
 800b08c:	46bd      	mov	sp, r7
 800b08e:	bc80      	pop	{r7}
 800b090:	4770      	bx	lr

0800b092 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800b092:	b580      	push	{r7, lr}
 800b094:	b088      	sub	sp, #32
 800b096:	af02      	add	r7, sp, #8
 800b098:	60f8      	str	r0, [r7, #12]
 800b09a:	1d3b      	adds	r3, r7, #4
 800b09c:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b0aa:	2b01      	cmp	r3, #1
 800b0ac:	d101      	bne.n	800b0b2 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 800b0ae:	2302      	movs	r3, #2
 800b0b0:	e046      	b.n	800b140 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	2201      	movs	r2, #1
 800b0b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	2224      	movs	r2, #36	; 0x24
 800b0be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	681a      	ldr	r2, [r3, #0]
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	f022 0201 	bic.w	r2, r2, #1
 800b0d0:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	689b      	ldr	r3, [r3, #8]
 800b0d8:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b0dc:	687a      	ldr	r2, [r7, #4]
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	430a      	orrs	r2, r1
 800b0e4:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d105      	bne.n	800b0f8 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800b0ec:	1d3b      	adds	r3, r7, #4
 800b0ee:	e893 0006 	ldmia.w	r3, {r1, r2}
 800b0f2:	68f8      	ldr	r0, [r7, #12]
 800b0f4:	f000 f911 	bl	800b31a <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	681a      	ldr	r2, [r3, #0]
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	f042 0201 	orr.w	r2, r2, #1
 800b106:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b108:	f7f7 fbee 	bl	80028e8 <HAL_GetTick>
 800b10c:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b10e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b112:	9300      	str	r3, [sp, #0]
 800b114:	693b      	ldr	r3, [r7, #16]
 800b116:	2200      	movs	r2, #0
 800b118:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b11c:	68f8      	ldr	r0, [r7, #12]
 800b11e:	f7fe ff16 	bl	8009f4e <UART_WaitOnFlagUntilTimeout>
 800b122:	4603      	mov	r3, r0
 800b124:	2b00      	cmp	r3, #0
 800b126:	d002      	beq.n	800b12e <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 800b128:	2303      	movs	r3, #3
 800b12a:	75fb      	strb	r3, [r7, #23]
 800b12c:	e003      	b.n	800b136 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	2220      	movs	r2, #32
 800b132:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	2200      	movs	r2, #0
 800b13a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return status;
 800b13e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b140:	4618      	mov	r0, r3
 800b142:	3718      	adds	r7, #24
 800b144:	46bd      	mov	sp, r7
 800b146:	bd80      	pop	{r7, pc}

0800b148 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 800b148:	b480      	push	{r7}
 800b14a:	b089      	sub	sp, #36	; 0x24
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b156:	2b01      	cmp	r3, #1
 800b158:	d101      	bne.n	800b15e <HAL_UARTEx_EnableStopMode+0x16>
 800b15a:	2302      	movs	r3, #2
 800b15c:	e021      	b.n	800b1a2 <HAL_UARTEx_EnableStopMode+0x5a>
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	2201      	movs	r2, #1
 800b162:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	e853 3f00 	ldrex	r3, [r3]
 800b172:	60bb      	str	r3, [r7, #8]
   return(result);
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	f043 0302 	orr.w	r3, r3, #2
 800b17a:	61fb      	str	r3, [r7, #28]
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	461a      	mov	r2, r3
 800b182:	69fb      	ldr	r3, [r7, #28]
 800b184:	61bb      	str	r3, [r7, #24]
 800b186:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b188:	6979      	ldr	r1, [r7, #20]
 800b18a:	69ba      	ldr	r2, [r7, #24]
 800b18c:	e841 2300 	strex	r3, r2, [r1]
 800b190:	613b      	str	r3, [r7, #16]
   return(result);
 800b192:	693b      	ldr	r3, [r7, #16]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d1e6      	bne.n	800b166 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	2200      	movs	r2, #0
 800b19c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b1a0:	2300      	movs	r3, #0
}
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	3724      	adds	r7, #36	; 0x24
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bc80      	pop	{r7}
 800b1aa:	4770      	bx	lr

0800b1ac <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b084      	sub	sp, #16
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b1ba:	2b01      	cmp	r3, #1
 800b1bc:	d101      	bne.n	800b1c2 <HAL_UARTEx_EnableFifoMode+0x16>
 800b1be:	2302      	movs	r3, #2
 800b1c0:	e02b      	b.n	800b21a <HAL_UARTEx_EnableFifoMode+0x6e>
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	2201      	movs	r2, #1
 800b1c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	2224      	movs	r2, #36	; 0x24
 800b1ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	681a      	ldr	r2, [r3, #0]
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	f022 0201 	bic.w	r2, r2, #1
 800b1e8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b1f0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800b1f8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	68fa      	ldr	r2, [r7, #12]
 800b200:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b202:	6878      	ldr	r0, [r7, #4]
 800b204:	f000 f8ac 	bl	800b360 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	2220      	movs	r2, #32
 800b20c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2200      	movs	r2, #0
 800b214:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b218:	2300      	movs	r3, #0
}
 800b21a:	4618      	mov	r0, r3
 800b21c:	3710      	adds	r7, #16
 800b21e:	46bd      	mov	sp, r7
 800b220:	bd80      	pop	{r7, pc}

0800b222 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b222:	b580      	push	{r7, lr}
 800b224:	b084      	sub	sp, #16
 800b226:	af00      	add	r7, sp, #0
 800b228:	6078      	str	r0, [r7, #4]
 800b22a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b232:	2b01      	cmp	r3, #1
 800b234:	d101      	bne.n	800b23a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b236:	2302      	movs	r3, #2
 800b238:	e02d      	b.n	800b296 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	2201      	movs	r2, #1
 800b23e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	2224      	movs	r2, #36	; 0x24
 800b246:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	681a      	ldr	r2, [r3, #0]
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	f022 0201 	bic.w	r2, r2, #1
 800b260:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	689b      	ldr	r3, [r3, #8]
 800b268:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	683a      	ldr	r2, [r7, #0]
 800b272:	430a      	orrs	r2, r1
 800b274:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b276:	6878      	ldr	r0, [r7, #4]
 800b278:	f000 f872 	bl	800b360 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	68fa      	ldr	r2, [r7, #12]
 800b282:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2220      	movs	r2, #32
 800b288:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	2200      	movs	r2, #0
 800b290:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b294:	2300      	movs	r3, #0
}
 800b296:	4618      	mov	r0, r3
 800b298:	3710      	adds	r7, #16
 800b29a:	46bd      	mov	sp, r7
 800b29c:	bd80      	pop	{r7, pc}

0800b29e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b29e:	b580      	push	{r7, lr}
 800b2a0:	b084      	sub	sp, #16
 800b2a2:	af00      	add	r7, sp, #0
 800b2a4:	6078      	str	r0, [r7, #4]
 800b2a6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b2ae:	2b01      	cmp	r3, #1
 800b2b0:	d101      	bne.n	800b2b6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b2b2:	2302      	movs	r3, #2
 800b2b4:	e02d      	b.n	800b312 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	2201      	movs	r2, #1
 800b2ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	2224      	movs	r2, #36	; 0x24
 800b2c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	681a      	ldr	r2, [r3, #0]
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	f022 0201 	bic.w	r2, r2, #1
 800b2dc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	689b      	ldr	r3, [r3, #8]
 800b2e4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	683a      	ldr	r2, [r7, #0]
 800b2ee:	430a      	orrs	r2, r1
 800b2f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b2f2:	6878      	ldr	r0, [r7, #4]
 800b2f4:	f000 f834 	bl	800b360 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	68fa      	ldr	r2, [r7, #12]
 800b2fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	2220      	movs	r2, #32
 800b304:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	2200      	movs	r2, #0
 800b30c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b310:	2300      	movs	r3, #0
}
 800b312:	4618      	mov	r0, r3
 800b314:	3710      	adds	r7, #16
 800b316:	46bd      	mov	sp, r7
 800b318:	bd80      	pop	{r7, pc}

0800b31a <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800b31a:	b480      	push	{r7}
 800b31c:	b085      	sub	sp, #20
 800b31e:	af00      	add	r7, sp, #0
 800b320:	60f8      	str	r0, [r7, #12]
 800b322:	1d3b      	adds	r3, r7, #4
 800b324:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	685b      	ldr	r3, [r3, #4]
 800b32e:	f023 0210 	bic.w	r2, r3, #16
 800b332:	893b      	ldrh	r3, [r7, #8]
 800b334:	4619      	mov	r1, r3
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	430a      	orrs	r2, r1
 800b33c:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	685b      	ldr	r3, [r3, #4]
 800b344:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 800b348:	7abb      	ldrb	r3, [r7, #10]
 800b34a:	061a      	lsls	r2, r3, #24
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	430a      	orrs	r2, r1
 800b352:	605a      	str	r2, [r3, #4]
}
 800b354:	bf00      	nop
 800b356:	3714      	adds	r7, #20
 800b358:	46bd      	mov	sp, r7
 800b35a:	bc80      	pop	{r7}
 800b35c:	4770      	bx	lr
	...

0800b360 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b360:	b480      	push	{r7}
 800b362:	b085      	sub	sp, #20
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d108      	bne.n	800b382 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2201      	movs	r2, #1
 800b374:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2201      	movs	r2, #1
 800b37c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b380:	e031      	b.n	800b3e6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b382:	2308      	movs	r3, #8
 800b384:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b386:	2308      	movs	r3, #8
 800b388:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	689b      	ldr	r3, [r3, #8]
 800b390:	0e5b      	lsrs	r3, r3, #25
 800b392:	b2db      	uxtb	r3, r3
 800b394:	f003 0307 	and.w	r3, r3, #7
 800b398:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	689b      	ldr	r3, [r3, #8]
 800b3a0:	0f5b      	lsrs	r3, r3, #29
 800b3a2:	b2db      	uxtb	r3, r3
 800b3a4:	f003 0307 	and.w	r3, r3, #7
 800b3a8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b3aa:	7bbb      	ldrb	r3, [r7, #14]
 800b3ac:	7b3a      	ldrb	r2, [r7, #12]
 800b3ae:	4910      	ldr	r1, [pc, #64]	; (800b3f0 <UARTEx_SetNbDataToProcess+0x90>)
 800b3b0:	5c8a      	ldrb	r2, [r1, r2]
 800b3b2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b3b6:	7b3a      	ldrb	r2, [r7, #12]
 800b3b8:	490e      	ldr	r1, [pc, #56]	; (800b3f4 <UARTEx_SetNbDataToProcess+0x94>)
 800b3ba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b3bc:	fb93 f3f2 	sdiv	r3, r3, r2
 800b3c0:	b29a      	uxth	r2, r3
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b3c8:	7bfb      	ldrb	r3, [r7, #15]
 800b3ca:	7b7a      	ldrb	r2, [r7, #13]
 800b3cc:	4908      	ldr	r1, [pc, #32]	; (800b3f0 <UARTEx_SetNbDataToProcess+0x90>)
 800b3ce:	5c8a      	ldrb	r2, [r1, r2]
 800b3d0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b3d4:	7b7a      	ldrb	r2, [r7, #13]
 800b3d6:	4907      	ldr	r1, [pc, #28]	; (800b3f4 <UARTEx_SetNbDataToProcess+0x94>)
 800b3d8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b3da:	fb93 f3f2 	sdiv	r3, r3, r2
 800b3de:	b29a      	uxth	r2, r3
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b3e6:	bf00      	nop
 800b3e8:	3714      	adds	r7, #20
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	bc80      	pop	{r7}
 800b3ee:	4770      	bx	lr
 800b3f0:	0801f86c 	.word	0x0801f86c
 800b3f4:	0801f874 	.word	0x0801f874

0800b3f8 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 800b3fc:	f7f7 f914 	bl	8002628 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800b400:	f000 f820 	bl	800b444 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800b404:	bf00      	nop
 800b406:	bd80      	pop	{r7, pc}

0800b408 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800b40c:	f04f 30ff 	mov.w	r0, #4294967295
 800b410:	f012 fda4 	bl	801df5c <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 800b414:	bf00      	nop
 800b416:	bd80      	pop	{r7, pc}

0800b418 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800b418:	b480      	push	{r7}
 800b41a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800b41c:	f3bf 8f4f 	dsb	sy
}
 800b420:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800b422:	4b06      	ldr	r3, [pc, #24]	; (800b43c <__NVIC_SystemReset+0x24>)
 800b424:	68db      	ldr	r3, [r3, #12]
 800b426:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800b42a:	4904      	ldr	r1, [pc, #16]	; (800b43c <__NVIC_SystemReset+0x24>)
 800b42c:	4b04      	ldr	r3, [pc, #16]	; (800b440 <__NVIC_SystemReset+0x28>)
 800b42e:	4313      	orrs	r3, r2
 800b430:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800b432:	f3bf 8f4f 	dsb	sy
}
 800b436:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800b438:	bf00      	nop
 800b43a:	e7fd      	b.n	800b438 <__NVIC_SystemReset+0x20>
 800b43c:	e000ed00 	.word	0xe000ed00
 800b440:	05fa0004 	.word	0x05fa0004

0800b444 <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b086      	sub	sp, #24
 800b448:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN LoRaWAN_Init_LV */
  uint32_t feature_version = 0UL;
 800b44a:	2300      	movs	r3, #0
 800b44c:	607b      	str	r3, [r7, #4]
  /* USER CODE END LoRaWAN_Init_LV */

  /* USER CODE BEGIN LoRaWAN_Init_1 */

  /* Get LoRaWAN APP version*/
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 800b44e:	2300      	movs	r3, #0
 800b450:	9302      	str	r3, [sp, #8]
 800b452:	2303      	movs	r3, #3
 800b454:	9301      	str	r3, [sp, #4]
 800b456:	2301      	movs	r3, #1
 800b458:	9300      	str	r3, [sp, #0]
 800b45a:	4b59      	ldr	r3, [pc, #356]	; (800b5c0 <LoRaWAN_Init+0x17c>)
 800b45c:	2200      	movs	r2, #0
 800b45e:	2100      	movs	r1, #0
 800b460:	2002      	movs	r0, #2
 800b462:	f013 f9c9 	bl	801e7f8 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(APP_VERSION_MAIN),
          (uint8_t)(APP_VERSION_SUB1),
          (uint8_t)(APP_VERSION_SUB2));

  /* Get MW LoRaWAN info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION:  V%X.%X.%X\r\n",
 800b466:	2300      	movs	r3, #0
 800b468:	9302      	str	r3, [sp, #8]
 800b46a:	2305      	movs	r3, #5
 800b46c:	9301      	str	r3, [sp, #4]
 800b46e:	2302      	movs	r3, #2
 800b470:	9300      	str	r3, [sp, #0]
 800b472:	4b54      	ldr	r3, [pc, #336]	; (800b5c4 <LoRaWAN_Init+0x180>)
 800b474:	2200      	movs	r2, #0
 800b476:	2100      	movs	r1, #0
 800b478:	2002      	movs	r0, #2
 800b47a:	f013 f9bd 	bl	801e7f8 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(LORAWAN_VERSION_MAIN),
          (uint8_t)(LORAWAN_VERSION_SUB1),
          (uint8_t)(LORAWAN_VERSION_SUB2));

  /* Get MW SubGhz_Phy info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 800b47e:	2300      	movs	r3, #0
 800b480:	9302      	str	r3, [sp, #8]
 800b482:	2303      	movs	r3, #3
 800b484:	9301      	str	r3, [sp, #4]
 800b486:	2301      	movs	r3, #1
 800b488:	9300      	str	r3, [sp, #0]
 800b48a:	4b4f      	ldr	r3, [pc, #316]	; (800b5c8 <LoRaWAN_Init+0x184>)
 800b48c:	2200      	movs	r2, #0
 800b48e:	2100      	movs	r1, #0
 800b490:	2002      	movs	r0, #2
 800b492:	f013 f9b1 	bl	801e7f8 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(SUBGHZ_PHY_VERSION_MAIN),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB1),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB2));

  /* Get LoRaWAN Link Layer info */
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 800b496:	1d3b      	adds	r3, r7, #4
 800b498:	4619      	mov	r1, r3
 800b49a:	2000      	movs	r0, #0
 800b49c:	f003 fa44 	bl	800e928 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	0e1b      	lsrs	r3, r3, #24
 800b4a4:	b2db      	uxtb	r3, r3
 800b4a6:	461a      	mov	r2, r3
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	0c1b      	lsrs	r3, r3, #16
 800b4ac:	b2db      	uxtb	r3, r3
 800b4ae:	4619      	mov	r1, r3
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	0a1b      	lsrs	r3, r3, #8
 800b4b4:	b2db      	uxtb	r3, r3
 800b4b6:	9302      	str	r3, [sp, #8]
 800b4b8:	9101      	str	r1, [sp, #4]
 800b4ba:	9200      	str	r2, [sp, #0]
 800b4bc:	4b43      	ldr	r3, [pc, #268]	; (800b5cc <LoRaWAN_Init+0x188>)
 800b4be:	2200      	movs	r2, #0
 800b4c0:	2100      	movs	r1, #0
 800b4c2:	2002      	movs	r0, #2
 800b4c4:	f013 f998 	bl	801e7f8 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8));

  /* Get LoRaWAN Regional Parameters info */
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 800b4c8:	1d3b      	adds	r3, r7, #4
 800b4ca:	4619      	mov	r1, r3
 800b4cc:	2001      	movs	r0, #1
 800b4ce:	f003 fa2b 	bl	800e928 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	0e1b      	lsrs	r3, r3, #24
 800b4d6:	b2db      	uxtb	r3, r3
 800b4d8:	461a      	mov	r2, r3
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	0c1b      	lsrs	r3, r3, #16
 800b4de:	b2db      	uxtb	r3, r3
 800b4e0:	4619      	mov	r1, r3
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	0a1b      	lsrs	r3, r3, #8
 800b4e6:	b2db      	uxtb	r3, r3
 800b4e8:	6878      	ldr	r0, [r7, #4]
 800b4ea:	b2c0      	uxtb	r0, r0
 800b4ec:	9003      	str	r0, [sp, #12]
 800b4ee:	9302      	str	r3, [sp, #8]
 800b4f0:	9101      	str	r1, [sp, #4]
 800b4f2:	9200      	str	r2, [sp, #0]
 800b4f4:	4b36      	ldr	r3, [pc, #216]	; (800b5d0 <LoRaWAN_Init+0x18c>)
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	2100      	movs	r1, #0
 800b4fa:	2002      	movs	r0, #2
 800b4fc:	f013 f97c 	bl	801e7f8 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8),
          (uint8_t)(feature_version));

  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 800b500:	2300      	movs	r3, #0
 800b502:	9300      	str	r3, [sp, #0]
 800b504:	4b33      	ldr	r3, [pc, #204]	; (800b5d4 <LoRaWAN_Init+0x190>)
 800b506:	2200      	movs	r2, #0
 800b508:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800b50c:	4832      	ldr	r0, [pc, #200]	; (800b5d8 <LoRaWAN_Init+0x194>)
 800b50e:	f012 fec5 	bl	801e29c <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 800b512:	2300      	movs	r3, #0
 800b514:	9300      	str	r3, [sp, #0]
 800b516:	4b31      	ldr	r3, [pc, #196]	; (800b5dc <LoRaWAN_Init+0x198>)
 800b518:	2200      	movs	r2, #0
 800b51a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800b51e:	4830      	ldr	r0, [pc, #192]	; (800b5e0 <LoRaWAN_Init+0x19c>)
 800b520:	f012 febc 	bl	801e29c <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 800b524:	2300      	movs	r3, #0
 800b526:	9300      	str	r3, [sp, #0]
 800b528:	4b2e      	ldr	r3, [pc, #184]	; (800b5e4 <LoRaWAN_Init+0x1a0>)
 800b52a:	2201      	movs	r2, #1
 800b52c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800b530:	482d      	ldr	r0, [pc, #180]	; (800b5e8 <LoRaWAN_Init+0x1a4>)
 800b532:	f012 feb3 	bl	801e29c <UTIL_TIMER_Create>

  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 800b536:	2300      	movs	r3, #0
 800b538:	9300      	str	r3, [sp, #0]
 800b53a:	4b2c      	ldr	r3, [pc, #176]	; (800b5ec <LoRaWAN_Init+0x1a8>)
 800b53c:	2200      	movs	r2, #0
 800b53e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800b542:	482b      	ldr	r0, [pc, #172]	; (800b5f0 <LoRaWAN_Init+0x1ac>)
 800b544:	f012 feaa 	bl	801e29c <UTIL_TIMER_Create>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 800b548:	4a2a      	ldr	r2, [pc, #168]	; (800b5f4 <LoRaWAN_Init+0x1b0>)
 800b54a:	2100      	movs	r1, #0
 800b54c:	2001      	movs	r0, #1
 800b54e:	f012 fe01 	bl	801e154 <UTIL_SEQ_RegTask>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 800b552:	4a29      	ldr	r2, [pc, #164]	; (800b5f8 <LoRaWAN_Init+0x1b4>)
 800b554:	2100      	movs	r1, #0
 800b556:	2002      	movs	r0, #2
 800b558:	f012 fdfc 	bl	801e154 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 800b55c:	4a27      	ldr	r2, [pc, #156]	; (800b5fc <LoRaWAN_Init+0x1b8>)
 800b55e:	2100      	movs	r1, #0
 800b560:	2004      	movs	r0, #4
 800b562:	f012 fdf7 	bl	801e154 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 800b566:	4a26      	ldr	r2, [pc, #152]	; (800b600 <LoRaWAN_Init+0x1bc>)
 800b568:	2100      	movs	r1, #0
 800b56a:	2008      	movs	r0, #8
 800b56c:	f012 fdf2 	bl	801e154 <UTIL_SEQ_RegTask>

  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 800b570:	f000 fd32 	bl	800bfd8 <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 800b574:	4923      	ldr	r1, [pc, #140]	; (800b604 <LoRaWAN_Init+0x1c0>)
 800b576:	4824      	ldr	r0, [pc, #144]	; (800b608 <LoRaWAN_Init+0x1c4>)
 800b578:	f002 fa48 	bl	800da0c <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 800b57c:	4823      	ldr	r0, [pc, #140]	; (800b60c <LoRaWAN_Init+0x1c8>)
 800b57e:	f002 fab3 	bl	800dae8 <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  UTIL_TIMER_Start(&JoinLedTimer);
 800b582:	4819      	ldr	r0, [pc, #100]	; (800b5e8 <LoRaWAN_Init+0x1a4>)
 800b584:	f012 fec0 	bl	801e308 <UTIL_TIMER_Start>

  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType, ForceRejoin);
 800b588:	4b21      	ldr	r3, [pc, #132]	; (800b610 <LoRaWAN_Init+0x1cc>)
 800b58a:	781b      	ldrb	r3, [r3, #0]
 800b58c:	4a21      	ldr	r2, [pc, #132]	; (800b614 <LoRaWAN_Init+0x1d0>)
 800b58e:	7812      	ldrb	r2, [r2, #0]
 800b590:	4611      	mov	r1, r2
 800b592:	4618      	mov	r0, r3
 800b594:	f002 fc00 	bl	800dd98 <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 800b598:	4b1f      	ldr	r3, [pc, #124]	; (800b618 <LoRaWAN_Init+0x1d4>)
 800b59a:	781b      	ldrb	r3, [r3, #0]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d10b      	bne.n	800b5b8 <LoRaWAN_Init+0x174>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 800b5a0:	4b1e      	ldr	r3, [pc, #120]	; (800b61c <LoRaWAN_Init+0x1d8>)
 800b5a2:	6819      	ldr	r1, [r3, #0]
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	9300      	str	r3, [sp, #0]
 800b5a8:	4b1d      	ldr	r3, [pc, #116]	; (800b620 <LoRaWAN_Init+0x1dc>)
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	481d      	ldr	r0, [pc, #116]	; (800b624 <LoRaWAN_Init+0x1e0>)
 800b5ae:	f012 fe75 	bl	801e29c <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 800b5b2:	481c      	ldr	r0, [pc, #112]	; (800b624 <LoRaWAN_Init+0x1e0>)
 800b5b4:	f012 fea8 	bl	801e308 <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 800b5b8:	bf00      	nop
 800b5ba:	3708      	adds	r7, #8
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	bd80      	pop	{r7, pc}
 800b5c0:	0801eef0 	.word	0x0801eef0
 800b5c4:	0801ef14 	.word	0x0801ef14
 800b5c8:	0801ef38 	.word	0x0801ef38
 800b5cc:	0801ef5c 	.word	0x0801ef5c
 800b5d0:	0801ef80 	.word	0x0801ef80
 800b5d4:	0800baf9 	.word	0x0800baf9
 800b5d8:	200004b0 	.word	0x200004b0
 800b5dc:	0800bb0b 	.word	0x0800bb0b
 800b5e0:	200004c8 	.word	0x200004c8
 800b5e4:	0800bb1d 	.word	0x0800bb1d
 800b5e8:	200004e0 	.word	0x200004e0
 800b5ec:	0800bed9 	.word	0x0800bed9
 800b5f0:	200003a4 	.word	0x200003a4
 800b5f4:	0800dd2d 	.word	0x0800dd2d
 800b5f8:	0800b799 	.word	0x0800b799
 800b5fc:	0800befd 	.word	0x0800befd
 800b600:	0800be59 	.word	0x0800be59
 800b604:	01030000 	.word	0x01030000
 800b608:	20000028 	.word	0x20000028
 800b60c:	20000074 	.word	0x20000074
 800b610:	20000024 	.word	0x20000024
 800b614:	20000025 	.word	0x20000025
 800b618:	20000388 	.word	0x20000388
 800b61c:	2000008c 	.word	0x2000008c
 800b620:	0800bad5 	.word	0x0800bad5
 800b624:	2000038c 	.word	0x2000038c

0800b628 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN PB_Callbacks */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b082      	sub	sp, #8
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	4603      	mov	r3, r0
 800b630:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 800b632:	88fb      	ldrh	r3, [r7, #6]
 800b634:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b638:	d104      	bne.n	800b644 <HAL_GPIO_EXTI_Callback+0x1c>
  {
    case  BUT1_Pin:
    	// XXX: always initialized
      if (EventType == TX_ON_EVENT || 1)
      {
        UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800b63a:	2100      	movs	r1, #0
 800b63c:	2002      	movs	r0, #2
 800b63e:	f012 fdab 	bl	801e198 <UTIL_SEQ_SetTask>
      }
      break;
 800b642:	e000      	b.n	800b646 <HAL_GPIO_EXTI_Callback+0x1e>
    default:
      break;
 800b644:	bf00      	nop
  }
}
 800b646:	bf00      	nop
 800b648:	3708      	adds	r7, #8
 800b64a:	46bd      	mov	sp, r7
 800b64c:	bd80      	pop	{r7, pc}
	...

0800b650 <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 800b650:	b5b0      	push	{r4, r5, r7, lr}
 800b652:	b08a      	sub	sp, #40	; 0x28
 800b654:	af06      	add	r7, sp, #24
 800b656:	6078      	str	r0, [r7, #4]
 800b658:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
  uint8_t RxPort = 0;
 800b65a:	2300      	movs	r3, #0
 800b65c:	73fb      	strb	r3, [r7, #15]

  if (params != NULL)
 800b65e:	683b      	ldr	r3, [r7, #0]
 800b660:	2b00      	cmp	r3, #0
 800b662:	f000 8086 	beq.w	800b772 <OnRxData+0x122>
  {
#if 0   // XXX:
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
#endif

    UTIL_TIMER_Start(&RxLedTimer);
 800b666:	4845      	ldr	r0, [pc, #276]	; (800b77c <OnRxData+0x12c>)
 800b668:	f012 fe4e 	bl	801e308 <UTIL_TIMER_Start>

    if (params->IsMcpsIndication)
 800b66c:	683b      	ldr	r3, [r7, #0]
 800b66e:	781b      	ldrb	r3, [r3, #0]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d05a      	beq.n	800b72a <OnRxData+0xda>
    {
      if (appData != NULL)
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d057      	beq.n	800b72a <OnRxData+0xda>
      {
        RxPort = appData->Port;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	781b      	ldrb	r3, [r3, #0]
 800b67e:	73fb      	strb	r3, [r7, #15]
        if (appData->Buffer != NULL)
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	685b      	ldr	r3, [r3, #4]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d050      	beq.n	800b72a <OnRxData+0xda>
        {
          switch (appData->Port)
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	781b      	ldrb	r3, [r3, #0]
 800b68c:	2b02      	cmp	r3, #2
 800b68e:	d01f      	beq.n	800b6d0 <OnRxData+0x80>
 800b690:	2b03      	cmp	r3, #3
 800b692:	d145      	bne.n	800b720 <OnRxData+0xd0>
          {
            case LORAWAN_SWITCH_CLASS_PORT:
              /*this port switches the class*/
              if (appData->BufferSize == 1)
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	785b      	ldrb	r3, [r3, #1]
 800b698:	2b01      	cmp	r3, #1
 800b69a:	d143      	bne.n	800b724 <OnRxData+0xd4>
              {
                switch (appData->Buffer[0])
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	685b      	ldr	r3, [r3, #4]
 800b6a0:	781b      	ldrb	r3, [r3, #0]
 800b6a2:	2b02      	cmp	r3, #2
 800b6a4:	d00e      	beq.n	800b6c4 <OnRxData+0x74>
 800b6a6:	2b02      	cmp	r3, #2
 800b6a8:	dc10      	bgt.n	800b6cc <OnRxData+0x7c>
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d002      	beq.n	800b6b4 <OnRxData+0x64>
 800b6ae:	2b01      	cmp	r3, #1
 800b6b0:	d004      	beq.n	800b6bc <OnRxData+0x6c>
                  {
                    LmHandlerRequestClass(CLASS_C);
                    break;
                  }
                  default:
                    break;
 800b6b2:	e00b      	b.n	800b6cc <OnRxData+0x7c>
                    LmHandlerRequestClass(CLASS_A);
 800b6b4:	2000      	movs	r0, #0
 800b6b6:	f002 fd23 	bl	800e100 <LmHandlerRequestClass>
                    break;
 800b6ba:	e008      	b.n	800b6ce <OnRxData+0x7e>
                    LmHandlerRequestClass(CLASS_B);
 800b6bc:	2001      	movs	r0, #1
 800b6be:	f002 fd1f 	bl	800e100 <LmHandlerRequestClass>
                    break;
 800b6c2:	e004      	b.n	800b6ce <OnRxData+0x7e>
                    LmHandlerRequestClass(CLASS_C);
 800b6c4:	2002      	movs	r0, #2
 800b6c6:	f002 fd1b 	bl	800e100 <LmHandlerRequestClass>
                    break;
 800b6ca:	e000      	b.n	800b6ce <OnRxData+0x7e>
                    break;
 800b6cc:	bf00      	nop
                }
              }
              break;
 800b6ce:	e029      	b.n	800b724 <OnRxData+0xd4>
            case LORAWAN_USER_APP_PORT:
              if (appData->BufferSize == 1)
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	785b      	ldrb	r3, [r3, #1]
 800b6d4:	2b01      	cmp	r3, #1
 800b6d6:	d127      	bne.n	800b728 <OnRxData+0xd8>
              {
                AppLedStateOn = appData->Buffer[0] & 0x01;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	685b      	ldr	r3, [r3, #4]
 800b6dc:	781b      	ldrb	r3, [r3, #0]
 800b6de:	f003 0301 	and.w	r3, r3, #1
 800b6e2:	b2da      	uxtb	r2, r3
 800b6e4:	4b26      	ldr	r3, [pc, #152]	; (800b780 <OnRxData+0x130>)
 800b6e6:	701a      	strb	r2, [r3, #0]
                if (AppLedStateOn == RESET)
 800b6e8:	4b25      	ldr	r3, [pc, #148]	; (800b780 <OnRxData+0x130>)
 800b6ea:	781b      	ldrb	r3, [r3, #0]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d10b      	bne.n	800b708 <OnRxData+0xb8>
                {
                  APP_LOG(TS_OFF, VLEVEL_H, "LED OFF\r\n");
 800b6f0:	4b24      	ldr	r3, [pc, #144]	; (800b784 <OnRxData+0x134>)
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	2100      	movs	r1, #0
 800b6f6:	2003      	movs	r0, #3
 800b6f8:	f013 f87e 	bl	801e7f8 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_RED */
 800b6fc:	2201      	movs	r2, #1
 800b6fe:	2120      	movs	r1, #32
 800b700:	4821      	ldr	r0, [pc, #132]	; (800b788 <OnRxData+0x138>)
 800b702:	f7fa f95f 	bl	80059c4 <HAL_GPIO_WritePin>
                {
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
                }
              }
              break;
 800b706:	e00f      	b.n	800b728 <OnRxData+0xd8>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 800b708:	4b20      	ldr	r3, [pc, #128]	; (800b78c <OnRxData+0x13c>)
 800b70a:	2200      	movs	r2, #0
 800b70c:	2100      	movs	r1, #0
 800b70e:	2003      	movs	r0, #3
 800b710:	f013 f872 	bl	801e7f8 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
 800b714:	2200      	movs	r2, #0
 800b716:	2120      	movs	r1, #32
 800b718:	481b      	ldr	r0, [pc, #108]	; (800b788 <OnRxData+0x138>)
 800b71a:	f7fa f953 	bl	80059c4 <HAL_GPIO_WritePin>
              break;
 800b71e:	e003      	b.n	800b728 <OnRxData+0xd8>

            default:

              break;
 800b720:	bf00      	nop
 800b722:	e002      	b.n	800b72a <OnRxData+0xda>
              break;
 800b724:	bf00      	nop
 800b726:	e000      	b.n	800b72a <OnRxData+0xda>
              break;
 800b728:	bf00      	nop
          }
        }
      }
    }
    if (params->RxSlot < RX_SLOT_NONE)
 800b72a:	683b      	ldr	r3, [r7, #0]
 800b72c:	7c1b      	ldrb	r3, [r3, #16]
 800b72e:	2b05      	cmp	r3, #5
 800b730:	d81f      	bhi.n	800b772 <OnRxData+0x122>
    {
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
 800b732:	683b      	ldr	r3, [r7, #0]
 800b734:	68db      	ldr	r3, [r3, #12]
 800b736:	7bfa      	ldrb	r2, [r7, #15]
 800b738:	6839      	ldr	r1, [r7, #0]
 800b73a:	f991 1008 	ldrsb.w	r1, [r1, #8]
 800b73e:	460c      	mov	r4, r1
 800b740:	6839      	ldr	r1, [r7, #0]
 800b742:	7c09      	ldrb	r1, [r1, #16]
 800b744:	4608      	mov	r0, r1
 800b746:	4912      	ldr	r1, [pc, #72]	; (800b790 <OnRxData+0x140>)
 800b748:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800b74c:	6838      	ldr	r0, [r7, #0]
 800b74e:	f990 0009 	ldrsb.w	r0, [r0, #9]
 800b752:	4605      	mov	r5, r0
 800b754:	6838      	ldr	r0, [r7, #0]
 800b756:	f990 000a 	ldrsb.w	r0, [r0, #10]
 800b75a:	9005      	str	r0, [sp, #20]
 800b75c:	9504      	str	r5, [sp, #16]
 800b75e:	9103      	str	r1, [sp, #12]
 800b760:	9402      	str	r4, [sp, #8]
 800b762:	9201      	str	r2, [sp, #4]
 800b764:	9300      	str	r3, [sp, #0]
 800b766:	4b0b      	ldr	r3, [pc, #44]	; (800b794 <OnRxData+0x144>)
 800b768:	2200      	movs	r2, #0
 800b76a:	2100      	movs	r1, #0
 800b76c:	2003      	movs	r0, #3
 800b76e:	f013 f843 	bl	801e7f8 <UTIL_ADV_TRACE_COND_FSend>
              params->DownlinkCounter, RxPort, params->Datarate, slotStrings[params->RxSlot], params->Rssi, params->Snr);
    }
  }
  /* USER CODE END OnRxData_1 */
}
 800b772:	bf00      	nop
 800b774:	3710      	adds	r7, #16
 800b776:	46bd      	mov	sp, r7
 800b778:	bdb0      	pop	{r4, r5, r7, pc}
 800b77a:	bf00      	nop
 800b77c:	200004c8 	.word	0x200004c8
 800b780:	200004ae 	.word	0x200004ae
 800b784:	0801efa4 	.word	0x0801efa4
 800b788:	48000400 	.word	0x48000400
 800b78c:	0801efb0 	.word	0x0801efb0
 800b790:	2000000c 	.word	0x2000000c
 800b794:	0801efbc 	.word	0x0801efbc

0800b798 <SendTxData>:

static void SendTxData(void)
{
 800b798:	b590      	push	{r4, r7, lr}
 800b79a:	b091      	sub	sp, #68	; 0x44
 800b79c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SendTxData_1 */
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800b79e:	23ff      	movs	r3, #255	; 0xff
 800b7a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t batteryLevel = GetBatteryLevel();
 800b7a4:	f7f6 ff70 	bl	8002688 <GetBatteryLevel>
 800b7a8:	4603      	mov	r3, r0
 800b7aa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sensor_t sensor_data;
  UTIL_TIMER_Time_t nextTxIn = 0;
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	637b      	str	r3, [r7, #52]	; 0x34

#ifdef CAYENNE_LPP
  uint8_t channel = 0;
#else
  uint16_t pressure = 0;
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	85bb      	strh	r3, [r7, #44]	; 0x2c
  int16_t temperature = 0;
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t humidity = 0;
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	853b      	strh	r3, [r7, #40]	; 0x28
  uint32_t i = 0;
 800b7be:	2300      	movs	r3, #0
 800b7c0:	633b      	str	r3, [r7, #48]	; 0x30
  int32_t latitude = 0;
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	627b      	str	r3, [r7, #36]	; 0x24
  int32_t longitude = 0;
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	623b      	str	r3, [r7, #32]
  uint16_t altitudeGps = 0;
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	83fb      	strh	r3, [r7, #30]
#endif /* CAYENNE_LPP */

  EnvSensors_Read(&sensor_data);
 800b7ce:	1d3b      	adds	r3, r7, #4
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	f7f7 f91d 	bl	8002a10 <EnvSensors_Read>

  APP_LOG(TS_ON, VLEVEL_M, "VDDA: %d\r\n", batteryLevel);
 800b7d6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b7da:	9300      	str	r3, [sp, #0]
 800b7dc:	4b97      	ldr	r3, [pc, #604]	; (800ba3c <SendTxData+0x2a4>)
 800b7de:	2201      	movs	r2, #1
 800b7e0:	2100      	movs	r1, #0
 800b7e2:	2002      	movs	r0, #2
 800b7e4:	f013 f808 	bl	801e7f8 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "temp: %d\r\n", (int16_t)(sensor_data.temperature));
 800b7e8:	68bb      	ldr	r3, [r7, #8]
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	f7f5 fc6e 	bl	80010cc <__aeabi_f2iz>
 800b7f0:	4603      	mov	r3, r0
 800b7f2:	b21b      	sxth	r3, r3
 800b7f4:	9300      	str	r3, [sp, #0]
 800b7f6:	4b92      	ldr	r3, [pc, #584]	; (800ba40 <SendTxData+0x2a8>)
 800b7f8:	2201      	movs	r2, #1
 800b7fa:	2100      	movs	r1, #0
 800b7fc:	2002      	movs	r0, #2
 800b7fe:	f012 fffb 	bl	801e7f8 <UTIL_ADV_TRACE_COND_FSend>

  AppData.Port = LORAWAN_USER_APP_PORT;
 800b802:	4b90      	ldr	r3, [pc, #576]	; (800ba44 <SendTxData+0x2ac>)
 800b804:	2202      	movs	r2, #2
 800b806:	701a      	strb	r2, [r3, #0]
  }

  CayenneLppCopy(AppData.Buffer);
  AppData.BufferSize = CayenneLppGetSize();
#else  /* not CAYENNE_LPP */
  humidity    = (uint16_t)(sensor_data.humidity * 100);            /* in %*10     */
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	498f      	ldr	r1, [pc, #572]	; (800ba48 <SendTxData+0x2b0>)
 800b80c:	4618      	mov	r0, r3
 800b80e:	f7f5 fa97 	bl	8000d40 <__aeabi_fmul>
 800b812:	4603      	mov	r3, r0
 800b814:	4618      	mov	r0, r3
 800b816:	f7f5 fc7f 	bl	8001118 <__aeabi_f2uiz>
 800b81a:	4603      	mov	r3, r0
 800b81c:	853b      	strh	r3, [r7, #40]	; 0x28
  temperature = (int16_t)(sensor_data.temperature * 100);
 800b81e:	68bb      	ldr	r3, [r7, #8]
 800b820:	4989      	ldr	r1, [pc, #548]	; (800ba48 <SendTxData+0x2b0>)
 800b822:	4618      	mov	r0, r3
 800b824:	f7f5 fa8c 	bl	8000d40 <__aeabi_fmul>
 800b828:	4603      	mov	r3, r0
 800b82a:	4618      	mov	r0, r3
 800b82c:	f7f5 fc4e 	bl	80010cc <__aeabi_f2iz>
 800b830:	4603      	mov	r3, r0
 800b832:	857b      	strh	r3, [r7, #42]	; 0x2a
  pressure = (uint16_t)(sensor_data.pressure * 100 / 10); /* in hPa / 10 */
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	4984      	ldr	r1, [pc, #528]	; (800ba48 <SendTxData+0x2b0>)
 800b838:	4618      	mov	r0, r3
 800b83a:	f7f5 fa81 	bl	8000d40 <__aeabi_fmul>
 800b83e:	4603      	mov	r3, r0
 800b840:	4982      	ldr	r1, [pc, #520]	; (800ba4c <SendTxData+0x2b4>)
 800b842:	4618      	mov	r0, r3
 800b844:	f7f5 fb30 	bl	8000ea8 <__aeabi_fdiv>
 800b848:	4603      	mov	r3, r0
 800b84a:	4618      	mov	r0, r3
 800b84c:	f7f5 fc64 	bl	8001118 <__aeabi_f2uiz>
 800b850:	4603      	mov	r3, r0
 800b852:	85bb      	strh	r3, [r7, #44]	; 0x2c

  AppData.Buffer[i++] = AppLedStateOn;
 800b854:	4b7b      	ldr	r3, [pc, #492]	; (800ba44 <SendTxData+0x2ac>)
 800b856:	685a      	ldr	r2, [r3, #4]
 800b858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b85a:	1c59      	adds	r1, r3, #1
 800b85c:	6339      	str	r1, [r7, #48]	; 0x30
 800b85e:	4413      	add	r3, r2
 800b860:	4a7b      	ldr	r2, [pc, #492]	; (800ba50 <SendTxData+0x2b8>)
 800b862:	7812      	ldrb	r2, [r2, #0]
 800b864:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((pressure >> 8) & 0xFF);
 800b866:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b868:	0a1b      	lsrs	r3, r3, #8
 800b86a:	b298      	uxth	r0, r3
 800b86c:	4b75      	ldr	r3, [pc, #468]	; (800ba44 <SendTxData+0x2ac>)
 800b86e:	685a      	ldr	r2, [r3, #4]
 800b870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b872:	1c59      	adds	r1, r3, #1
 800b874:	6339      	str	r1, [r7, #48]	; 0x30
 800b876:	4413      	add	r3, r2
 800b878:	b2c2      	uxtb	r2, r0
 800b87a:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(pressure & 0xFF);
 800b87c:	4b71      	ldr	r3, [pc, #452]	; (800ba44 <SendTxData+0x2ac>)
 800b87e:	685a      	ldr	r2, [r3, #4]
 800b880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b882:	1c59      	adds	r1, r3, #1
 800b884:	6339      	str	r1, [r7, #48]	; 0x30
 800b886:	4413      	add	r3, r2
 800b888:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800b88a:	b2d2      	uxtb	r2, r2
 800b88c:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((temperature >> 8) & 0xFF);
 800b88e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800b892:	121b      	asrs	r3, r3, #8
 800b894:	b218      	sxth	r0, r3
 800b896:	4b6b      	ldr	r3, [pc, #428]	; (800ba44 <SendTxData+0x2ac>)
 800b898:	685a      	ldr	r2, [r3, #4]
 800b89a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b89c:	1c59      	adds	r1, r3, #1
 800b89e:	6339      	str	r1, [r7, #48]	; 0x30
 800b8a0:	4413      	add	r3, r2
 800b8a2:	b2c2      	uxtb	r2, r0
 800b8a4:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(temperature & 0xFF);
 800b8a6:	4b67      	ldr	r3, [pc, #412]	; (800ba44 <SendTxData+0x2ac>)
 800b8a8:	685a      	ldr	r2, [r3, #4]
 800b8aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ac:	1c59      	adds	r1, r3, #1
 800b8ae:	6339      	str	r1, [r7, #48]	; 0x30
 800b8b0:	4413      	add	r3, r2
 800b8b2:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800b8b4:	b2d2      	uxtb	r2, r2
 800b8b6:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((humidity >> 8) & 0xFF);
 800b8b8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b8ba:	0a1b      	lsrs	r3, r3, #8
 800b8bc:	b298      	uxth	r0, r3
 800b8be:	4b61      	ldr	r3, [pc, #388]	; (800ba44 <SendTxData+0x2ac>)
 800b8c0:	685a      	ldr	r2, [r3, #4]
 800b8c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8c4:	1c59      	adds	r1, r3, #1
 800b8c6:	6339      	str	r1, [r7, #48]	; 0x30
 800b8c8:	4413      	add	r3, r2
 800b8ca:	b2c2      	uxtb	r2, r0
 800b8cc:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(humidity & 0xFF);
 800b8ce:	4b5d      	ldr	r3, [pc, #372]	; (800ba44 <SendTxData+0x2ac>)
 800b8d0:	685a      	ldr	r2, [r3, #4]
 800b8d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8d4:	1c59      	adds	r1, r3, #1
 800b8d6:	6339      	str	r1, [r7, #48]	; 0x30
 800b8d8:	4413      	add	r3, r2
 800b8da:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b8dc:	b2d2      	uxtb	r2, r2
 800b8de:	701a      	strb	r2, [r3, #0]

  if ((LmHandlerParams.ActiveRegion == LORAMAC_REGION_US915) || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AU915)
 800b8e0:	4b5c      	ldr	r3, [pc, #368]	; (800ba54 <SendTxData+0x2bc>)
 800b8e2:	781b      	ldrb	r3, [r3, #0]
 800b8e4:	2b08      	cmp	r3, #8
 800b8e6:	d007      	beq.n	800b8f8 <SendTxData+0x160>
 800b8e8:	4b5a      	ldr	r3, [pc, #360]	; (800ba54 <SendTxData+0x2bc>)
 800b8ea:	781b      	ldrb	r3, [r3, #0]
 800b8ec:	2b01      	cmp	r3, #1
 800b8ee:	d003      	beq.n	800b8f8 <SendTxData+0x160>
      || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AS923))
 800b8f0:	4b58      	ldr	r3, [pc, #352]	; (800ba54 <SendTxData+0x2bc>)
 800b8f2:	781b      	ldrb	r3, [r3, #0]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d120      	bne.n	800b93a <SendTxData+0x1a2>
  {
    AppData.Buffer[i++] = 0;
 800b8f8:	4b52      	ldr	r3, [pc, #328]	; (800ba44 <SendTxData+0x2ac>)
 800b8fa:	685a      	ldr	r2, [r3, #4]
 800b8fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8fe:	1c59      	adds	r1, r3, #1
 800b900:	6339      	str	r1, [r7, #48]	; 0x30
 800b902:	4413      	add	r3, r2
 800b904:	2200      	movs	r2, #0
 800b906:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800b908:	4b4e      	ldr	r3, [pc, #312]	; (800ba44 <SendTxData+0x2ac>)
 800b90a:	685a      	ldr	r2, [r3, #4]
 800b90c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b90e:	1c59      	adds	r1, r3, #1
 800b910:	6339      	str	r1, [r7, #48]	; 0x30
 800b912:	4413      	add	r3, r2
 800b914:	2200      	movs	r2, #0
 800b916:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800b918:	4b4a      	ldr	r3, [pc, #296]	; (800ba44 <SendTxData+0x2ac>)
 800b91a:	685a      	ldr	r2, [r3, #4]
 800b91c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b91e:	1c59      	adds	r1, r3, #1
 800b920:	6339      	str	r1, [r7, #48]	; 0x30
 800b922:	4413      	add	r3, r2
 800b924:	2200      	movs	r2, #0
 800b926:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800b928:	4b46      	ldr	r3, [pc, #280]	; (800ba44 <SendTxData+0x2ac>)
 800b92a:	685a      	ldr	r2, [r3, #4]
 800b92c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b92e:	1c59      	adds	r1, r3, #1
 800b930:	6339      	str	r1, [r7, #48]	; 0x30
 800b932:	4413      	add	r3, r2
 800b934:	2200      	movs	r2, #0
 800b936:	701a      	strb	r2, [r3, #0]
 800b938:	e05b      	b.n	800b9f2 <SendTxData+0x25a>
  }
  else
  {
    latitude = sensor_data.latitude;
 800b93a:	693b      	ldr	r3, [r7, #16]
 800b93c:	627b      	str	r3, [r7, #36]	; 0x24
    longitude = sensor_data.longitude;
 800b93e:	697b      	ldr	r3, [r7, #20]
 800b940:	623b      	str	r3, [r7, #32]

    AppData.Buffer[i++] = GetBatteryLevel();        /* 1 (very low) to 254 (fully charged) */
 800b942:	4b40      	ldr	r3, [pc, #256]	; (800ba44 <SendTxData+0x2ac>)
 800b944:	685a      	ldr	r2, [r3, #4]
 800b946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b948:	1c59      	adds	r1, r3, #1
 800b94a:	6339      	str	r1, [r7, #48]	; 0x30
 800b94c:	18d4      	adds	r4, r2, r3
 800b94e:	f7f6 fe9b 	bl	8002688 <GetBatteryLevel>
 800b952:	4603      	mov	r3, r0
 800b954:	7023      	strb	r3, [r4, #0]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 16) & 0xFF);
 800b956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b958:	1418      	asrs	r0, r3, #16
 800b95a:	4b3a      	ldr	r3, [pc, #232]	; (800ba44 <SendTxData+0x2ac>)
 800b95c:	685a      	ldr	r2, [r3, #4]
 800b95e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b960:	1c59      	adds	r1, r3, #1
 800b962:	6339      	str	r1, [r7, #48]	; 0x30
 800b964:	4413      	add	r3, r2
 800b966:	b2c2      	uxtb	r2, r0
 800b968:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 8) & 0xFF);
 800b96a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b96c:	1218      	asrs	r0, r3, #8
 800b96e:	4b35      	ldr	r3, [pc, #212]	; (800ba44 <SendTxData+0x2ac>)
 800b970:	685a      	ldr	r2, [r3, #4]
 800b972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b974:	1c59      	adds	r1, r3, #1
 800b976:	6339      	str	r1, [r7, #48]	; 0x30
 800b978:	4413      	add	r3, r2
 800b97a:	b2c2      	uxtb	r2, r0
 800b97c:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(latitude & 0xFF);
 800b97e:	4b31      	ldr	r3, [pc, #196]	; (800ba44 <SendTxData+0x2ac>)
 800b980:	685a      	ldr	r2, [r3, #4]
 800b982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b984:	1c59      	adds	r1, r3, #1
 800b986:	6339      	str	r1, [r7, #48]	; 0x30
 800b988:	4413      	add	r3, r2
 800b98a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b98c:	b2d2      	uxtb	r2, r2
 800b98e:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 16) & 0xFF);
 800b990:	6a3b      	ldr	r3, [r7, #32]
 800b992:	1418      	asrs	r0, r3, #16
 800b994:	4b2b      	ldr	r3, [pc, #172]	; (800ba44 <SendTxData+0x2ac>)
 800b996:	685a      	ldr	r2, [r3, #4]
 800b998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b99a:	1c59      	adds	r1, r3, #1
 800b99c:	6339      	str	r1, [r7, #48]	; 0x30
 800b99e:	4413      	add	r3, r2
 800b9a0:	b2c2      	uxtb	r2, r0
 800b9a2:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 8) & 0xFF);
 800b9a4:	6a3b      	ldr	r3, [r7, #32]
 800b9a6:	1218      	asrs	r0, r3, #8
 800b9a8:	4b26      	ldr	r3, [pc, #152]	; (800ba44 <SendTxData+0x2ac>)
 800b9aa:	685a      	ldr	r2, [r3, #4]
 800b9ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9ae:	1c59      	adds	r1, r3, #1
 800b9b0:	6339      	str	r1, [r7, #48]	; 0x30
 800b9b2:	4413      	add	r3, r2
 800b9b4:	b2c2      	uxtb	r2, r0
 800b9b6:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(longitude & 0xFF);
 800b9b8:	4b22      	ldr	r3, [pc, #136]	; (800ba44 <SendTxData+0x2ac>)
 800b9ba:	685a      	ldr	r2, [r3, #4]
 800b9bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9be:	1c59      	adds	r1, r3, #1
 800b9c0:	6339      	str	r1, [r7, #48]	; 0x30
 800b9c2:	4413      	add	r3, r2
 800b9c4:	6a3a      	ldr	r2, [r7, #32]
 800b9c6:	b2d2      	uxtb	r2, r2
 800b9c8:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((altitudeGps >> 8) & 0xFF);
 800b9ca:	8bfb      	ldrh	r3, [r7, #30]
 800b9cc:	0a1b      	lsrs	r3, r3, #8
 800b9ce:	b298      	uxth	r0, r3
 800b9d0:	4b1c      	ldr	r3, [pc, #112]	; (800ba44 <SendTxData+0x2ac>)
 800b9d2:	685a      	ldr	r2, [r3, #4]
 800b9d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9d6:	1c59      	adds	r1, r3, #1
 800b9d8:	6339      	str	r1, [r7, #48]	; 0x30
 800b9da:	4413      	add	r3, r2
 800b9dc:	b2c2      	uxtb	r2, r0
 800b9de:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(altitudeGps & 0xFF);
 800b9e0:	4b18      	ldr	r3, [pc, #96]	; (800ba44 <SendTxData+0x2ac>)
 800b9e2:	685a      	ldr	r2, [r3, #4]
 800b9e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9e6:	1c59      	adds	r1, r3, #1
 800b9e8:	6339      	str	r1, [r7, #48]	; 0x30
 800b9ea:	4413      	add	r3, r2
 800b9ec:	8bfa      	ldrh	r2, [r7, #30]
 800b9ee:	b2d2      	uxtb	r2, r2
 800b9f0:	701a      	strb	r2, [r3, #0]
  }

  AppData.BufferSize = i;
 800b9f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9f4:	b2da      	uxtb	r2, r3
 800b9f6:	4b13      	ldr	r3, [pc, #76]	; (800ba44 <SendTxData+0x2ac>)
 800b9f8:	705a      	strb	r2, [r3, #1]
#endif /* CAYENNE_LPP */

  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800b9fa:	4b17      	ldr	r3, [pc, #92]	; (800ba58 <SendTxData+0x2c0>)
 800b9fc:	7a5b      	ldrb	r3, [r3, #9]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d007      	beq.n	800ba12 <SendTxData+0x27a>
 800ba02:	f002 fa6b 	bl	800dedc <LmHandlerJoinStatus>
 800ba06:	4603      	mov	r3, r0
 800ba08:	2b01      	cmp	r3, #1
 800ba0a:	d102      	bne.n	800ba12 <SendTxData+0x27a>
  {
    UTIL_TIMER_Stop(&JoinLedTimer);
 800ba0c:	4812      	ldr	r0, [pc, #72]	; (800ba58 <SendTxData+0x2c0>)
 800ba0e:	f012 fce9 	bl	801e3e4 <UTIL_TIMER_Stop>
#if 0   // XXX:
    HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
#endif
  }

  status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 800ba12:	4b10      	ldr	r3, [pc, #64]	; (800ba54 <SendTxData+0x2bc>)
 800ba14:	78db      	ldrb	r3, [r3, #3]
 800ba16:	2200      	movs	r2, #0
 800ba18:	4619      	mov	r1, r3
 800ba1a:	480a      	ldr	r0, [pc, #40]	; (800ba44 <SendTxData+0x2ac>)
 800ba1c:	f002 fa7a 	bl	800df14 <LmHandlerSend>
 800ba20:	4603      	mov	r3, r0
 800ba22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (LORAMAC_HANDLER_SUCCESS == status)
 800ba26:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d118      	bne.n	800ba60 <SendTxData+0x2c8>
  {
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 800ba2e:	4b0b      	ldr	r3, [pc, #44]	; (800ba5c <SendTxData+0x2c4>)
 800ba30:	2201      	movs	r2, #1
 800ba32:	2100      	movs	r1, #0
 800ba34:	2001      	movs	r0, #1
 800ba36:	f012 fedf 	bl	801e7f8 <UTIL_ADV_TRACE_COND_FSend>
 800ba3a:	e028      	b.n	800ba8e <SendTxData+0x2f6>
 800ba3c:	0801f004 	.word	0x0801f004
 800ba40:	0801f010 	.word	0x0801f010
 800ba44:	20000090 	.word	0x20000090
 800ba48:	42c80000 	.word	0x42c80000
 800ba4c:	41200000 	.word	0x41200000
 800ba50:	200004ae 	.word	0x200004ae
 800ba54:	20000074 	.word	0x20000074
 800ba58:	200004e0 	.word	0x200004e0
 800ba5c:	0801f01c 	.word	0x0801f01c
  }
  else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 800ba60:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ba64:	f113 0f06 	cmn.w	r3, #6
 800ba68:	d111      	bne.n	800ba8e <SendTxData+0x2f6>
  {
    nextTxIn = LmHandlerGetDutyCycleWaitTime();
 800ba6a:	f002 f98b 	bl	800dd84 <LmHandlerGetDutyCycleWaitTime>
 800ba6e:	6378      	str	r0, [r7, #52]	; 0x34
    if (nextTxIn > 0)
 800ba70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d00b      	beq.n	800ba8e <SendTxData+0x2f6>
    {
      APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 800ba76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba78:	4a11      	ldr	r2, [pc, #68]	; (800bac0 <SendTxData+0x328>)
 800ba7a:	fba2 2303 	umull	r2, r3, r2, r3
 800ba7e:	099b      	lsrs	r3, r3, #6
 800ba80:	9300      	str	r3, [sp, #0]
 800ba82:	4b10      	ldr	r3, [pc, #64]	; (800bac4 <SendTxData+0x32c>)
 800ba84:	2201      	movs	r2, #1
 800ba86:	2100      	movs	r1, #0
 800ba88:	2001      	movs	r0, #1
 800ba8a:	f012 feb5 	bl	801e7f8 <UTIL_ADV_TRACE_COND_FSend>
    }
  }

  if (EventType == TX_ON_TIMER)
 800ba8e:	4b0e      	ldr	r3, [pc, #56]	; (800bac8 <SendTxData+0x330>)
 800ba90:	781b      	ldrb	r3, [r3, #0]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d10f      	bne.n	800bab6 <SendTxData+0x31e>
  {
    UTIL_TIMER_Stop(&TxTimer);
 800ba96:	480d      	ldr	r0, [pc, #52]	; (800bacc <SendTxData+0x334>)
 800ba98:	f012 fca4 	bl	801e3e4 <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 800ba9c:	4b0c      	ldr	r3, [pc, #48]	; (800bad0 <SendTxData+0x338>)
 800ba9e:	681a      	ldr	r2, [r3, #0]
 800baa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800baa2:	4293      	cmp	r3, r2
 800baa4:	bf38      	it	cc
 800baa6:	4613      	movcc	r3, r2
 800baa8:	4619      	mov	r1, r3
 800baaa:	4808      	ldr	r0, [pc, #32]	; (800bacc <SendTxData+0x334>)
 800baac:	f012 fd0a 	bl	801e4c4 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 800bab0:	4806      	ldr	r0, [pc, #24]	; (800bacc <SendTxData+0x334>)
 800bab2:	f012 fc29 	bl	801e308 <UTIL_TIMER_Start>
  }

  /* USER CODE END SendTxData_1 */
}
 800bab6:	bf00      	nop
 800bab8:	373c      	adds	r7, #60	; 0x3c
 800baba:	46bd      	mov	sp, r7
 800babc:	bd90      	pop	{r4, r7, pc}
 800babe:	bf00      	nop
 800bac0:	10624dd3 	.word	0x10624dd3
 800bac4:	0801f02c 	.word	0x0801f02c
 800bac8:	20000388 	.word	0x20000388
 800bacc:	2000038c 	.word	0x2000038c
 800bad0:	2000008c 	.word	0x2000008c

0800bad4 <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b082      	sub	sp, #8
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800badc:	2100      	movs	r1, #0
 800bade:	2002      	movs	r0, #2
 800bae0:	f012 fb5a 	bl	801e198 <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 800bae4:	4803      	ldr	r0, [pc, #12]	; (800baf4 <OnTxTimerEvent+0x20>)
 800bae6:	f012 fc0f 	bl	801e308 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 800baea:	bf00      	nop
 800baec:	3708      	adds	r7, #8
 800baee:	46bd      	mov	sp, r7
 800baf0:	bd80      	pop	{r7, pc}
 800baf2:	bf00      	nop
 800baf4:	2000038c 	.word	0x2000038c

0800baf8 <OnTxTimerLedEvent>:

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerLedEvent(void *context)
{
 800baf8:	b480      	push	{r7}
 800bafa:	b083      	sub	sp, #12
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
#if 0	// XXX: No LED available
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
}
 800bb00:	bf00      	nop
 800bb02:	370c      	adds	r7, #12
 800bb04:	46bd      	mov	sp, r7
 800bb06:	bc80      	pop	{r7}
 800bb08:	4770      	bx	lr

0800bb0a <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{
 800bb0a:	b480      	push	{r7}
 800bb0c:	b083      	sub	sp, #12
 800bb0e:	af00      	add	r7, sp, #0
 800bb10:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
#endif
}
 800bb12:	bf00      	nop
 800bb14:	370c      	adds	r7, #12
 800bb16:	46bd      	mov	sp, r7
 800bb18:	bc80      	pop	{r7}
 800bb1a:	4770      	bx	lr

0800bb1c <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{
 800bb1c:	b480      	push	{r7}
 800bb1e:	b083      	sub	sp, #12
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
#endif
}
 800bb24:	bf00      	nop
 800bb26:	370c      	adds	r7, #12
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	bc80      	pop	{r7}
 800bb2c:	4770      	bx	lr
	...

0800bb30 <OnTxData>:

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b086      	sub	sp, #24
 800bb34:	af04      	add	r7, sp, #16
 800bb36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d041      	beq.n	800bbc2 <OnTxData+0x92>
  {
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	781b      	ldrb	r3, [r3, #0]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d03d      	beq.n	800bbc2 <OnTxData+0x92>
    {
#if 0	// XXX: No LED available
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif
      UTIL_TIMER_Start(&TxLedTimer);
 800bb46:	4821      	ldr	r0, [pc, #132]	; (800bbcc <OnTxData+0x9c>)
 800bb48:	f012 fbde 	bl	801e308 <UTIL_TIMER_Start>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 800bb4c:	4b20      	ldr	r3, [pc, #128]	; (800bbd0 <OnTxData+0xa0>)
 800bb4e:	2200      	movs	r2, #0
 800bb50:	2100      	movs	r1, #0
 800bb52:	2002      	movs	r0, #2
 800bb54:	f012 fe50 	bl	801e7f8 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	68db      	ldr	r3, [r3, #12]
 800bb5c:	687a      	ldr	r2, [r7, #4]
 800bb5e:	7c12      	ldrb	r2, [r2, #16]
 800bb60:	4611      	mov	r1, r2
 800bb62:	687a      	ldr	r2, [r7, #4]
 800bb64:	f992 200a 	ldrsb.w	r2, [r2, #10]
 800bb68:	4610      	mov	r0, r2
 800bb6a:	687a      	ldr	r2, [r7, #4]
 800bb6c:	f992 2018 	ldrsb.w	r2, [r2, #24]
 800bb70:	9203      	str	r2, [sp, #12]
 800bb72:	9002      	str	r0, [sp, #8]
 800bb74:	9101      	str	r1, [sp, #4]
 800bb76:	9300      	str	r3, [sp, #0]
 800bb78:	4b16      	ldr	r3, [pc, #88]	; (800bbd4 <OnTxData+0xa4>)
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	2100      	movs	r1, #0
 800bb7e:	2003      	movs	r0, #3
 800bb80:	f012 fe3a 	bl	801e7f8 <UTIL_ADV_TRACE_COND_FSend>
              params->AppData.Port, params->Datarate, params->TxPower);

      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 800bb84:	4b14      	ldr	r3, [pc, #80]	; (800bbd8 <OnTxData+0xa8>)
 800bb86:	2200      	movs	r2, #0
 800bb88:	2100      	movs	r1, #0
 800bb8a:	2003      	movs	r0, #3
 800bb8c:	f012 fe34 	bl	801e7f8 <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	7a1b      	ldrb	r3, [r3, #8]
 800bb94:	2b01      	cmp	r3, #1
 800bb96:	d10e      	bne.n	800bbb6 <OnTxData+0x86>
      {
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	7a5b      	ldrb	r3, [r3, #9]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d001      	beq.n	800bba4 <OnTxData+0x74>
 800bba0:	4b0e      	ldr	r3, [pc, #56]	; (800bbdc <OnTxData+0xac>)
 800bba2:	e000      	b.n	800bba6 <OnTxData+0x76>
 800bba4:	4b0e      	ldr	r3, [pc, #56]	; (800bbe0 <OnTxData+0xb0>)
 800bba6:	9300      	str	r3, [sp, #0]
 800bba8:	4b0e      	ldr	r3, [pc, #56]	; (800bbe4 <OnTxData+0xb4>)
 800bbaa:	2200      	movs	r2, #0
 800bbac:	2100      	movs	r1, #0
 800bbae:	2003      	movs	r0, #3
 800bbb0:	f012 fe22 	bl	801e7f8 <UTIL_ADV_TRACE_COND_FSend>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
      }
    }
  }
  /* USER CODE END OnTxData_1 */
}
 800bbb4:	e005      	b.n	800bbc2 <OnTxData+0x92>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 800bbb6:	4b0c      	ldr	r3, [pc, #48]	; (800bbe8 <OnTxData+0xb8>)
 800bbb8:	2200      	movs	r2, #0
 800bbba:	2100      	movs	r1, #0
 800bbbc:	2003      	movs	r0, #3
 800bbbe:	f012 fe1b 	bl	801e7f8 <UTIL_ADV_TRACE_COND_FSend>
}
 800bbc2:	bf00      	nop
 800bbc4:	3708      	adds	r7, #8
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	bd80      	pop	{r7, pc}
 800bbca:	bf00      	nop
 800bbcc:	200004b0 	.word	0x200004b0
 800bbd0:	0801f04c 	.word	0x0801f04c
 800bbd4:	0801f080 	.word	0x0801f080
 800bbd8:	0801f0b4 	.word	0x0801f0b4
 800bbdc:	0801f0c4 	.word	0x0801f0c4
 800bbe0:	0801f0c8 	.word	0x0801f0c8
 800bbe4:	0801f0d0 	.word	0x0801f0d0
 800bbe8:	0801f0e4 	.word	0x0801f0e4

0800bbec <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800bbec:	b580      	push	{r7, lr}
 800bbee:	b082      	sub	sp, #8
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  if (joinParams != NULL)
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d039      	beq.n	800bc6e <OnJoinRequest+0x82>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d11e      	bne.n	800bc42 <OnJoinRequest+0x56>
    {
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), CFG_SEQ_Prio_0);
 800bc04:	2100      	movs	r1, #0
 800bc06:	2004      	movs	r0, #4
 800bc08:	f012 fac6 	bl	801e198 <UTIL_SEQ_SetTask>

      UTIL_TIMER_Stop(&JoinLedTimer);
 800bc0c:	481a      	ldr	r0, [pc, #104]	; (800bc78 <OnJoinRequest+0x8c>)
 800bc0e:	f012 fbe9 	bl	801e3e4 <UTIL_TIMER_Stop>
#if 0   // XXX:
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
#endif

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 800bc12:	4b1a      	ldr	r3, [pc, #104]	; (800bc7c <OnJoinRequest+0x90>)
 800bc14:	2200      	movs	r2, #0
 800bc16:	2100      	movs	r1, #0
 800bc18:	2002      	movs	r0, #2
 800bc1a:	f012 fded 	bl	801e7f8 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	79db      	ldrb	r3, [r3, #7]
 800bc22:	2b01      	cmp	r3, #1
 800bc24:	d106      	bne.n	800bc34 <OnJoinRequest+0x48>
      {
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 800bc26:	4b16      	ldr	r3, [pc, #88]	; (800bc80 <OnJoinRequest+0x94>)
 800bc28:	2200      	movs	r2, #0
 800bc2a:	2100      	movs	r1, #0
 800bc2c:	2002      	movs	r0, #2
 800bc2e:	f012 fde3 	bl	801e7f8 <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
      }
    }
  }
  /* USER CODE END OnJoinRequest_1 */
}
 800bc32:	e01c      	b.n	800bc6e <OnJoinRequest+0x82>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 800bc34:	4b13      	ldr	r3, [pc, #76]	; (800bc84 <OnJoinRequest+0x98>)
 800bc36:	2200      	movs	r2, #0
 800bc38:	2100      	movs	r1, #0
 800bc3a:	2002      	movs	r0, #2
 800bc3c:	f012 fddc 	bl	801e7f8 <UTIL_ADV_TRACE_COND_FSend>
}
 800bc40:	e015      	b.n	800bc6e <OnJoinRequest+0x82>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 800bc42:	4b11      	ldr	r3, [pc, #68]	; (800bc88 <OnJoinRequest+0x9c>)
 800bc44:	2200      	movs	r2, #0
 800bc46:	2100      	movs	r1, #0
 800bc48:	2002      	movs	r0, #2
 800bc4a:	f012 fdd5 	bl	801e7f8 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_OTAA) {
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	79db      	ldrb	r3, [r3, #7]
 800bc52:	2b02      	cmp	r3, #2
 800bc54:	d10b      	bne.n	800bc6e <OnJoinRequest+0x82>
          APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = RE-TRYING OTAA JOIN\r\n");
 800bc56:	4b0d      	ldr	r3, [pc, #52]	; (800bc8c <OnJoinRequest+0xa0>)
 800bc58:	2200      	movs	r2, #0
 800bc5a:	2100      	movs	r1, #0
 800bc5c:	2002      	movs	r0, #2
 800bc5e:	f012 fdcb 	bl	801e7f8 <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
 800bc62:	4b0b      	ldr	r3, [pc, #44]	; (800bc90 <OnJoinRequest+0xa4>)
 800bc64:	781b      	ldrb	r3, [r3, #0]
 800bc66:	2101      	movs	r1, #1
 800bc68:	4618      	mov	r0, r3
 800bc6a:	f002 f895 	bl	800dd98 <LmHandlerJoin>
}
 800bc6e:	bf00      	nop
 800bc70:	3708      	adds	r7, #8
 800bc72:	46bd      	mov	sp, r7
 800bc74:	bd80      	pop	{r7, pc}
 800bc76:	bf00      	nop
 800bc78:	200004e0 	.word	0x200004e0
 800bc7c:	0801f0f4 	.word	0x0801f0f4
 800bc80:	0801f10c 	.word	0x0801f10c
 800bc84:	0801f12c 	.word	0x0801f12c
 800bc88:	0801f14c 	.word	0x0801f14c
 800bc8c:	0801f168 	.word	0x0801f168
 800bc90:	20000024 	.word	0x20000024

0800bc94 <OnBeaconStatusChange>:

static void OnBeaconStatusChange(LmHandlerBeaconParams_t *params)
{
 800bc94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc96:	b093      	sub	sp, #76	; 0x4c
 800bc98:	af0c      	add	r7, sp, #48	; 0x30
 800bc9a:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN OnBeaconStatusChange_1 */
  if (params != NULL)
 800bc9c:	697b      	ldr	r3, [r7, #20]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d056      	beq.n	800bd50 <OnBeaconStatusChange+0xbc>
  {
    switch (params->State)
 800bca2:	697b      	ldr	r3, [r7, #20]
 800bca4:	785b      	ldrb	r3, [r3, #1]
 800bca6:	2b02      	cmp	r3, #2
 800bca8:	d008      	beq.n	800bcbc <OnBeaconStatusChange+0x28>
 800bcaa:	2b03      	cmp	r3, #3
 800bcac:	d049      	beq.n	800bd42 <OnBeaconStatusChange+0xae>
    {
      default:
      case LORAMAC_HANDLER_BEACON_LOST:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 800bcae:	4b2a      	ldr	r3, [pc, #168]	; (800bd58 <OnBeaconStatusChange+0xc4>)
 800bcb0:	2200      	movs	r2, #0
 800bcb2:	2100      	movs	r1, #0
 800bcb4:	2002      	movs	r0, #2
 800bcb6:	f012 fd9f 	bl	801e7f8 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800bcba:	e049      	b.n	800bd50 <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_RX:
      {
        APP_LOG(TS_OFF, VLEVEL_M,
 800bcbc:	697b      	ldr	r3, [r7, #20]
 800bcbe:	7c1b      	ldrb	r3, [r3, #16]
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	697b      	ldr	r3, [r7, #20]
 800bcc4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800bcc8:	461c      	mov	r4, r3
 800bcca:	697b      	ldr	r3, [r7, #20]
 800bccc:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800bcd0:	461d      	mov	r5, r3
 800bcd2:	697b      	ldr	r3, [r7, #20]
 800bcd4:	68db      	ldr	r3, [r3, #12]
 800bcd6:	697a      	ldr	r2, [r7, #20]
 800bcd8:	6852      	ldr	r2, [r2, #4]
 800bcda:	6979      	ldr	r1, [r7, #20]
 800bcdc:	7d89      	ldrb	r1, [r1, #22]
 800bcde:	460e      	mov	r6, r1
 800bce0:	6979      	ldr	r1, [r7, #20]
 800bce2:	7dc9      	ldrb	r1, [r1, #23]
 800bce4:	6139      	str	r1, [r7, #16]
 800bce6:	6979      	ldr	r1, [r7, #20]
 800bce8:	7e09      	ldrb	r1, [r1, #24]
 800bcea:	60f9      	str	r1, [r7, #12]
 800bcec:	6979      	ldr	r1, [r7, #20]
 800bcee:	7e49      	ldrb	r1, [r1, #25]
 800bcf0:	60b9      	str	r1, [r7, #8]
 800bcf2:	6979      	ldr	r1, [r7, #20]
 800bcf4:	7e89      	ldrb	r1, [r1, #26]
 800bcf6:	6079      	str	r1, [r7, #4]
 800bcf8:	6979      	ldr	r1, [r7, #20]
 800bcfa:	7ec9      	ldrb	r1, [r1, #27]
 800bcfc:	6039      	str	r1, [r7, #0]
 800bcfe:	6979      	ldr	r1, [r7, #20]
 800bd00:	7f09      	ldrb	r1, [r1, #28]
 800bd02:	910b      	str	r1, [sp, #44]	; 0x2c
 800bd04:	f8d7 c000 	ldr.w	ip, [r7]
 800bd08:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 800bd0c:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800bd10:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800bd14:	f8d7 c008 	ldr.w	ip, [r7, #8]
 800bd18:	f8cd c020 	str.w	ip, [sp, #32]
 800bd1c:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 800bd20:	f8cd c01c 	str.w	ip, [sp, #28]
 800bd24:	6939      	ldr	r1, [r7, #16]
 800bd26:	9106      	str	r1, [sp, #24]
 800bd28:	9605      	str	r6, [sp, #20]
 800bd2a:	9204      	str	r2, [sp, #16]
 800bd2c:	9303      	str	r3, [sp, #12]
 800bd2e:	9502      	str	r5, [sp, #8]
 800bd30:	9401      	str	r4, [sp, #4]
 800bd32:	9000      	str	r0, [sp, #0]
 800bd34:	4b09      	ldr	r3, [pc, #36]	; (800bd5c <OnBeaconStatusChange+0xc8>)
 800bd36:	2200      	movs	r2, #0
 800bd38:	2100      	movs	r1, #0
 800bd3a:	2002      	movs	r0, #2
 800bd3c:	f012 fd5c 	bl	801e7f8 <UTIL_ADV_TRACE_COND_FSend>
                params->Info.Datarate, params->Info.Rssi, params->Info.Snr, params->Info.Frequency,
                params->Info.Time.Seconds, params->Info.GwSpecific.InfoDesc,
                params->Info.GwSpecific.Info[0], params->Info.GwSpecific.Info[1],
                params->Info.GwSpecific.Info[2], params->Info.GwSpecific.Info[3],
                params->Info.GwSpecific.Info[4], params->Info.GwSpecific.Info[5]);
        break;
 800bd40:	e006      	b.n	800bd50 <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_NRX:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 800bd42:	4b07      	ldr	r3, [pc, #28]	; (800bd60 <OnBeaconStatusChange+0xcc>)
 800bd44:	2200      	movs	r2, #0
 800bd46:	2100      	movs	r1, #0
 800bd48:	2002      	movs	r0, #2
 800bd4a:	f012 fd55 	bl	801e7f8 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800bd4e:	bf00      	nop
      }
    }
  }
  /* USER CODE END OnBeaconStatusChange_1 */
}
 800bd50:	bf00      	nop
 800bd52:	371c      	adds	r7, #28
 800bd54:	46bd      	mov	sp, r7
 800bd56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd58:	0801f18c 	.word	0x0801f18c
 800bd5c:	0801f1a4 	.word	0x0801f1a4
 800bd60:	0801f218 	.word	0x0801f218

0800bd64 <OnSysTimeUpdate>:

static void OnSysTimeUpdate(void)
{
 800bd64:	b480      	push	{r7}
 800bd66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSysTimeUpdate_1 */

  /* USER CODE END OnSysTimeUpdate_1 */
}
 800bd68:	bf00      	nop
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	bc80      	pop	{r7}
 800bd6e:	4770      	bx	lr

0800bd70 <OnClassChange>:

static void OnClassChange(DeviceClass_t deviceClass)
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b084      	sub	sp, #16
 800bd74:	af02      	add	r7, sp, #8
 800bd76:	4603      	mov	r3, r0
 800bd78:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnClassChange_1 */
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800bd7a:	79fb      	ldrb	r3, [r7, #7]
 800bd7c:	4a06      	ldr	r2, [pc, #24]	; (800bd98 <OnClassChange+0x28>)
 800bd7e:	5cd3      	ldrb	r3, [r2, r3]
 800bd80:	9300      	str	r3, [sp, #0]
 800bd82:	4b06      	ldr	r3, [pc, #24]	; (800bd9c <OnClassChange+0x2c>)
 800bd84:	2200      	movs	r2, #0
 800bd86:	2100      	movs	r1, #0
 800bd88:	2002      	movs	r0, #2
 800bd8a:	f012 fd35 	bl	801e7f8 <UTIL_ADV_TRACE_COND_FSend>
  /* USER CODE END OnClassChange_1 */
}
 800bd8e:	bf00      	nop
 800bd90:	3708      	adds	r7, #8
 800bd92:	46bd      	mov	sp, r7
 800bd94:	bd80      	pop	{r7, pc}
 800bd96:	bf00      	nop
 800bd98:	0801f254 	.word	0x0801f254
 800bd9c:	0801f238 	.word	0x0801f238

0800bda0 <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800bda4:	2100      	movs	r1, #0
 800bda6:	2001      	movs	r0, #1
 800bda8:	f012 f9f6 	bl	801e198 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800bdac:	bf00      	nop
 800bdae:	bd80      	pop	{r7, pc}

0800bdb0 <OnTxPeriodicityChanged>:

static void OnTxPeriodicityChanged(uint32_t periodicity)
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b082      	sub	sp, #8
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxPeriodicityChanged_1 */

  /* USER CODE END OnTxPeriodicityChanged_1 */
  TxPeriodicity = periodicity;
 800bdb8:	4a0d      	ldr	r2, [pc, #52]	; (800bdf0 <OnTxPeriodicityChanged+0x40>)
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	6013      	str	r3, [r2, #0]

  if (TxPeriodicity == 0)
 800bdbe:	4b0c      	ldr	r3, [pc, #48]	; (800bdf0 <OnTxPeriodicityChanged+0x40>)
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d103      	bne.n	800bdce <OnTxPeriodicityChanged+0x1e>
  {
    /* Revert to application default periodicity */
    TxPeriodicity = APP_TX_DUTYCYCLE;
 800bdc6:	4b0a      	ldr	r3, [pc, #40]	; (800bdf0 <OnTxPeriodicityChanged+0x40>)
 800bdc8:	f242 7210 	movw	r2, #10000	; 0x2710
 800bdcc:	601a      	str	r2, [r3, #0]
  }

  /* Update timer periodicity */
  UTIL_TIMER_Stop(&TxTimer);
 800bdce:	4809      	ldr	r0, [pc, #36]	; (800bdf4 <OnTxPeriodicityChanged+0x44>)
 800bdd0:	f012 fb08 	bl	801e3e4 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 800bdd4:	4b06      	ldr	r3, [pc, #24]	; (800bdf0 <OnTxPeriodicityChanged+0x40>)
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	4619      	mov	r1, r3
 800bdda:	4806      	ldr	r0, [pc, #24]	; (800bdf4 <OnTxPeriodicityChanged+0x44>)
 800bddc:	f012 fb72 	bl	801e4c4 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 800bde0:	4804      	ldr	r0, [pc, #16]	; (800bdf4 <OnTxPeriodicityChanged+0x44>)
 800bde2:	f012 fa91 	bl	801e308 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxPeriodicityChanged_2 */

  /* USER CODE END OnTxPeriodicityChanged_2 */
}
 800bde6:	bf00      	nop
 800bde8:	3708      	adds	r7, #8
 800bdea:	46bd      	mov	sp, r7
 800bdec:	bd80      	pop	{r7, pc}
 800bdee:	bf00      	nop
 800bdf0:	2000008c 	.word	0x2000008c
 800bdf4:	2000038c 	.word	0x2000038c

0800bdf8 <OnTxFrameCtrlChanged>:

static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
 800bdf8:	b480      	push	{r7}
 800bdfa:	b083      	sub	sp, #12
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	4603      	mov	r3, r0
 800be00:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800be02:	4a04      	ldr	r2, [pc, #16]	; (800be14 <OnTxFrameCtrlChanged+0x1c>)
 800be04:	79fb      	ldrb	r3, [r7, #7]
 800be06:	70d3      	strb	r3, [r2, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 800be08:	bf00      	nop
 800be0a:	370c      	adds	r7, #12
 800be0c:	46bd      	mov	sp, r7
 800be0e:	bc80      	pop	{r7}
 800be10:	4770      	bx	lr
 800be12:	bf00      	nop
 800be14:	20000074 	.word	0x20000074

0800be18 <OnPingSlotPeriodicityChanged>:

static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
 800be18:	b480      	push	{r7}
 800be1a:	b083      	sub	sp, #12
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	4603      	mov	r3, r0
 800be20:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800be22:	4a04      	ldr	r2, [pc, #16]	; (800be34 <OnPingSlotPeriodicityChanged+0x1c>)
 800be24:	79fb      	ldrb	r3, [r7, #7]
 800be26:	7413      	strb	r3, [r2, #16]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 800be28:	bf00      	nop
 800be2a:	370c      	adds	r7, #12
 800be2c:	46bd      	mov	sp, r7
 800be2e:	bc80      	pop	{r7}
 800be30:	4770      	bx	lr
 800be32:	bf00      	nop
 800be34:	20000074 	.word	0x20000074

0800be38 <OnSystemReset>:

static void OnSystemReset(void)
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSystemReset_1 */

  /* USER CODE END OnSystemReset_1 */
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800be3c:	f002 fda5 	bl	800e98a <LmHandlerHalt>
 800be40:	4603      	mov	r3, r0
 800be42:	2b00      	cmp	r3, #0
 800be44:	d106      	bne.n	800be54 <OnSystemReset+0x1c>
 800be46:	f002 f849 	bl	800dedc <LmHandlerJoinStatus>
 800be4a:	4603      	mov	r3, r0
 800be4c:	2b01      	cmp	r3, #1
 800be4e:	d101      	bne.n	800be54 <OnSystemReset+0x1c>
  {
    NVIC_SystemReset();
 800be50:	f7ff fae2 	bl	800b418 <__NVIC_SystemReset>
  }
  /* USER CODE BEGIN OnSystemReset_Last */

  /* USER CODE END OnSystemReset_Last */
}
 800be54:	bf00      	nop
 800be56:	bd80      	pop	{r7, pc}

0800be58 <StopJoin>:

static void StopJoin(void)
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif

  /* USER CODE END StopJoin_1 */

  UTIL_TIMER_Stop(&TxTimer);
 800be5c:	4817      	ldr	r0, [pc, #92]	; (800bebc <StopJoin+0x64>)
 800be5e:	f012 fac1 	bl	801e3e4 <UTIL_TIMER_Stop>

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 800be62:	f002 fd85 	bl	800e970 <LmHandlerStop>
 800be66:	4603      	mov	r3, r0
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d006      	beq.n	800be7a <StopJoin+0x22>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 800be6c:	4b14      	ldr	r3, [pc, #80]	; (800bec0 <StopJoin+0x68>)
 800be6e:	2200      	movs	r2, #0
 800be70:	2100      	movs	r1, #0
 800be72:	2002      	movs	r0, #2
 800be74:	f012 fcc0 	bl	801e7f8 <UTIL_ADV_TRACE_COND_FSend>
 800be78:	e01a      	b.n	800beb0 <StopJoin+0x58>
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 800be7a:	4b12      	ldr	r3, [pc, #72]	; (800bec4 <StopJoin+0x6c>)
 800be7c:	2200      	movs	r2, #0
 800be7e:	2100      	movs	r1, #0
 800be80:	2002      	movs	r0, #2
 800be82:	f012 fcb9 	bl	801e7f8 <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_OTAA;
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to OTAA mode\r\n");
    }
    else
    {
      ActivationType = ACTIVATION_TYPE_ABP;
 800be86:	4b10      	ldr	r3, [pc, #64]	; (800bec8 <StopJoin+0x70>)
 800be88:	2201      	movs	r2, #1
 800be8a:	701a      	strb	r2, [r3, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 800be8c:	4b0f      	ldr	r3, [pc, #60]	; (800becc <StopJoin+0x74>)
 800be8e:	2200      	movs	r2, #0
 800be90:	2100      	movs	r1, #0
 800be92:	2002      	movs	r0, #2
 800be94:	f012 fcb0 	bl	801e7f8 <UTIL_ADV_TRACE_COND_FSend>
    }
    LmHandlerConfigure(&LmHandlerParams);
 800be98:	480d      	ldr	r0, [pc, #52]	; (800bed0 <StopJoin+0x78>)
 800be9a:	f001 fe25 	bl	800dae8 <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 800be9e:	4b0a      	ldr	r3, [pc, #40]	; (800bec8 <StopJoin+0x70>)
 800bea0:	781b      	ldrb	r3, [r3, #0]
 800bea2:	2101      	movs	r1, #1
 800bea4:	4618      	mov	r0, r3
 800bea6:	f001 ff77 	bl	800dd98 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 800beaa:	4804      	ldr	r0, [pc, #16]	; (800bebc <StopJoin+0x64>)
 800beac:	f012 fa2c 	bl	801e308 <UTIL_TIMER_Start>
  }
  UTIL_TIMER_Start(&StopJoinTimer);
 800beb0:	4808      	ldr	r0, [pc, #32]	; (800bed4 <StopJoin+0x7c>)
 800beb2:	f012 fa29 	bl	801e308 <UTIL_TIMER_Start>
  /* USER CODE BEGIN StopJoin_Last */

  /* USER CODE END StopJoin_Last */
}
 800beb6:	bf00      	nop
 800beb8:	bd80      	pop	{r7, pc}
 800beba:	bf00      	nop
 800bebc:	2000038c 	.word	0x2000038c
 800bec0:	0801f258 	.word	0x0801f258
 800bec4:	0801f278 	.word	0x0801f278
 800bec8:	20000024 	.word	0x20000024
 800becc:	0801f28c 	.word	0x0801f28c
 800bed0:	20000074 	.word	0x20000074
 800bed4:	200003a4 	.word	0x200003a4

0800bed8 <OnStopJoinTimerEvent>:

static void OnStopJoinTimerEvent(void *context)
{
 800bed8:	b580      	push	{r7, lr}
 800beda:	b082      	sub	sp, #8
 800bedc:	af00      	add	r7, sp, #0
 800bede:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnStopJoinTimerEvent_1 */

  /* USER CODE END OnStopJoinTimerEvent_1 */
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 800bee0:	4b05      	ldr	r3, [pc, #20]	; (800bef8 <OnStopJoinTimerEvent+0x20>)
 800bee2:	781b      	ldrb	r3, [r3, #0]
 800bee4:	2b02      	cmp	r3, #2
 800bee6:	d103      	bne.n	800bef0 <OnStopJoinTimerEvent+0x18>
  {
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 800bee8:	2100      	movs	r1, #0
 800beea:	2008      	movs	r0, #8
 800beec:	f012 f954 	bl	801e198 <UTIL_SEQ_SetTask>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
  /* USER CODE END OnStopJoinTimerEvent_Last */
}
 800bef0:	bf00      	nop
 800bef2:	3708      	adds	r7, #8
 800bef4:	46bd      	mov	sp, r7
 800bef6:	bd80      	pop	{r7, pc}
 800bef8:	20000024 	.word	0x20000024

0800befc <StoreContext>:

static void StoreContext(void)
{
 800befc:	b580      	push	{r7, lr}
 800befe:	b082      	sub	sp, #8
 800bf00:	af00      	add	r7, sp, #0
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800bf02:	23ff      	movs	r3, #255	; 0xff
 800bf04:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN StoreContext_1 */

  /* USER CODE END StoreContext_1 */
  status = LmHandlerNvmDataStore();
 800bf06:	f002 fd75 	bl	800e9f4 <LmHandlerNvmDataStore>
 800bf0a:	4603      	mov	r3, r0
 800bf0c:	71fb      	strb	r3, [r7, #7]

  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 800bf0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bf12:	f113 0f08 	cmn.w	r3, #8
 800bf16:	d106      	bne.n	800bf26 <StoreContext+0x2a>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 800bf18:	4b0a      	ldr	r3, [pc, #40]	; (800bf44 <StoreContext+0x48>)
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	2100      	movs	r1, #0
 800bf1e:	2002      	movs	r0, #2
 800bf20:	f012 fc6a 	bl	801e7f8 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
  }
  /* USER CODE BEGIN StoreContext_Last */

  /* USER CODE END StoreContext_Last */
}
 800bf24:	e00a      	b.n	800bf3c <StoreContext+0x40>
  else if (status == LORAMAC_HANDLER_ERROR)
 800bf26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bf2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf2e:	d105      	bne.n	800bf3c <StoreContext+0x40>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 800bf30:	4b05      	ldr	r3, [pc, #20]	; (800bf48 <StoreContext+0x4c>)
 800bf32:	2200      	movs	r2, #0
 800bf34:	2100      	movs	r1, #0
 800bf36:	2002      	movs	r0, #2
 800bf38:	f012 fc5e 	bl	801e7f8 <UTIL_ADV_TRACE_COND_FSend>
}
 800bf3c:	bf00      	nop
 800bf3e:	3708      	adds	r7, #8
 800bf40:	46bd      	mov	sp, r7
 800bf42:	bd80      	pop	{r7, pc}
 800bf44:	0801f2ac 	.word	0x0801f2ac
 800bf48:	0801f2c4 	.word	0x0801f2c4

0800bf4c <OnNvmDataChange>:

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b082      	sub	sp, #8
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	4603      	mov	r3, r0
 800bf54:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 800bf56:	79fb      	ldrb	r3, [r7, #7]
 800bf58:	2b01      	cmp	r3, #1
 800bf5a:	d106      	bne.n	800bf6a <OnNvmDataChange+0x1e>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 800bf5c:	4b08      	ldr	r3, [pc, #32]	; (800bf80 <OnNvmDataChange+0x34>)
 800bf5e:	2200      	movs	r2, #0
 800bf60:	2100      	movs	r1, #0
 800bf62:	2002      	movs	r0, #2
 800bf64:	f012 fc48 	bl	801e7f8 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 800bf68:	e005      	b.n	800bf76 <OnNvmDataChange+0x2a>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 800bf6a:	4b06      	ldr	r3, [pc, #24]	; (800bf84 <OnNvmDataChange+0x38>)
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	2100      	movs	r1, #0
 800bf70:	2002      	movs	r0, #2
 800bf72:	f012 fc41 	bl	801e7f8 <UTIL_ADV_TRACE_COND_FSend>
}
 800bf76:	bf00      	nop
 800bf78:	3708      	adds	r7, #8
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	bd80      	pop	{r7, pc}
 800bf7e:	bf00      	nop
 800bf80:	0801f2dc 	.word	0x0801f2dc
 800bf84:	0801f2f0 	.word	0x0801f2f0

0800bf88 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800bf88:	b580      	push	{r7, lr}
 800bf8a:	b082      	sub	sp, #8
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]
 800bf90:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (FLASH_IF_Erase(LORAWAN_NVM_BASE_ADDRESS, FLASH_PAGE_SIZE) == FLASH_IF_OK)
 800bf92:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800bf96:	4807      	ldr	r0, [pc, #28]	; (800bfb4 <OnStoreContextRequest+0x2c>)
 800bf98:	f7f5 fd88 	bl	8001aac <FLASH_IF_Erase>
 800bf9c:	4603      	mov	r3, r0
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d104      	bne.n	800bfac <OnStoreContextRequest+0x24>
  {
    FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void *)nvm, nvm_size);
 800bfa2:	683a      	ldr	r2, [r7, #0]
 800bfa4:	6879      	ldr	r1, [r7, #4]
 800bfa6:	4803      	ldr	r0, [pc, #12]	; (800bfb4 <OnStoreContextRequest+0x2c>)
 800bfa8:	f7f5 fd30 	bl	8001a0c <FLASH_IF_Write>
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 800bfac:	bf00      	nop
 800bfae:	3708      	adds	r7, #8
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	bd80      	pop	{r7, pc}
 800bfb4:	0803f000 	.word	0x0803f000

0800bfb8 <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b082      	sub	sp, #8
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]
 800bfc0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  FLASH_IF_Read(nvm, LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 800bfc2:	683a      	ldr	r2, [r7, #0]
 800bfc4:	4903      	ldr	r1, [pc, #12]	; (800bfd4 <OnRestoreContextRequest+0x1c>)
 800bfc6:	6878      	ldr	r0, [r7, #4]
 800bfc8:	f7f5 fd48 	bl	8001a5c <FLASH_IF_Read>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 800bfcc:	bf00      	nop
 800bfce:	3708      	adds	r7, #8
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	bd80      	pop	{r7, pc}
 800bfd4:	0803f000 	.word	0x0803f000

0800bfd8 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	af00      	add	r7, sp, #0
  loraInfo.ContextManagement = 0;
 800bfdc:	4b18      	ldr	r3, [pc, #96]	; (800c040 <LoraInfo_Init+0x68>)
 800bfde:	2200      	movs	r2, #0
 800bfe0:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800bfe2:	4b17      	ldr	r3, [pc, #92]	; (800c040 <LoraInfo_Init+0x68>)
 800bfe4:	2200      	movs	r2, #0
 800bfe6:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800bfe8:	4b15      	ldr	r3, [pc, #84]	; (800c040 <LoraInfo_Init+0x68>)
 800bfea:	2200      	movs	r2, #0
 800bfec:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800bfee:	4b14      	ldr	r3, [pc, #80]	; (800c040 <LoraInfo_Init+0x68>)
 800bff0:	2200      	movs	r2, #0
 800bff2:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868);
 800bff4:	4b12      	ldr	r3, [pc, #72]	; (800c040 <LoraInfo_Init+0x68>)
 800bff6:	685b      	ldr	r3, [r3, #4]
 800bff8:	f043 0320 	orr.w	r3, r3, #32
 800bffc:	4a10      	ldr	r2, [pc, #64]	; (800c040 <LoraInfo_Init+0x68>)
 800bffe:	6053      	str	r3, [r2, #4]
#endif /* REGION_KR920 */
#ifdef  REGION_IN865
  loraInfo.Region |= (1 << LORAMAC_REGION_IN865);
#endif /* REGION_IN865 */
#ifdef  REGION_US915
  loraInfo.Region |= (1 << LORAMAC_REGION_US915);
 800c000:	4b0f      	ldr	r3, [pc, #60]	; (800c040 <LoraInfo_Init+0x68>)
 800c002:	685b      	ldr	r3, [r3, #4]
 800c004:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c008:	4a0d      	ldr	r2, [pc, #52]	; (800c040 <LoraInfo_Init+0x68>)
 800c00a:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864);
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800c00c:	4b0c      	ldr	r3, [pc, #48]	; (800c040 <LoraInfo_Init+0x68>)
 800c00e:	685b      	ldr	r3, [r3, #4]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d10c      	bne.n	800c02e <LoraInfo_Init+0x56>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800c014:	4b0b      	ldr	r3, [pc, #44]	; (800c044 <LoraInfo_Init+0x6c>)
 800c016:	2200      	movs	r2, #0
 800c018:	2100      	movs	r1, #0
 800c01a:	2000      	movs	r0, #0
 800c01c:	f012 fbec 	bl	801e7f8 <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800c020:	bf00      	nop
 800c022:	f012 fbd7 	bl	801e7d4 <UTIL_ADV_TRACE_IsBufferEmpty>
 800c026:	4603      	mov	r3, r0
 800c028:	2b01      	cmp	r3, #1
 800c02a:	d1fa      	bne.n	800c022 <LoraInfo_Init+0x4a>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800c02c:	e7fe      	b.n	800c02c <LoraInfo_Init+0x54>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800c02e:	4b04      	ldr	r3, [pc, #16]	; (800c040 <LoraInfo_Init+0x68>)
 800c030:	2200      	movs	r2, #0
 800c032:	60da      	str	r2, [r3, #12]
#endif /* LORAWAN_KMS */

#if (!defined (CONTEXT_MANAGEMENT_ENABLED) || (CONTEXT_MANAGEMENT_ENABLED == 0))
  loraInfo.ContextManagement = 0;
#else /* CONTEXT_MANAGEMENT_ENABLED == 1 */
  loraInfo.ContextManagement = 1;
 800c034:	4b02      	ldr	r3, [pc, #8]	; (800c040 <LoraInfo_Init+0x68>)
 800c036:	2201      	movs	r2, #1
 800c038:	601a      	str	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED */

  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800c03a:	bf00      	nop
 800c03c:	bd80      	pop	{r7, pc}
 800c03e:	bf00      	nop
 800c040:	200004f8 	.word	0x200004f8
 800c044:	0801f304 	.word	0x0801f304

0800c048 <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800c048:	b480      	push	{r7}
 800c04a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800c04c:	4b02      	ldr	r3, [pc, #8]	; (800c058 <LoraInfo_GetPtr+0x10>)
}
 800c04e:	4618      	mov	r0, r3
 800c050:	46bd      	mov	sp, r7
 800c052:	bc80      	pop	{r7}
 800c054:	4770      	bx	lr
 800c056:	bf00      	nop
 800c058:	200004f8 	.word	0x200004f8

0800c05c <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800c05c:	b580      	push	{r7, lr}
 800c05e:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800c060:	f7f7 f9c3 	bl	80033ea <BSP_RADIO_Init>
 800c064:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800c066:	4618      	mov	r0, r3
 800c068:	bd80      	pop	{r7, pc}

0800c06a <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800c06a:	b580      	push	{r7, lr}
 800c06c:	b082      	sub	sp, #8
 800c06e:	af00      	add	r7, sp, #0
 800c070:	4603      	mov	r3, r0
 800c072:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800c074:	79fb      	ldrb	r3, [r7, #7]
 800c076:	4618      	mov	r0, r3
 800c078:	f7f7 f9e8 	bl	800344c <BSP_RADIO_ConfigRFSwitch>
 800c07c:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800c07e:	4618      	mov	r0, r3
 800c080:	3708      	adds	r7, #8
 800c082:	46bd      	mov	sp, r7
 800c084:	bd80      	pop	{r7, pc}

0800c086 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800c086:	b580      	push	{r7, lr}
 800c088:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800c08a:	f7f7 fa2d 	bl	80034e8 <BSP_RADIO_GetTxConfig>
 800c08e:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800c090:	4618      	mov	r0, r3
 800c092:	bd80      	pop	{r7, pc}

0800c094 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800c094:	b580      	push	{r7, lr}
 800c096:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 800c098:	f7f7 fa2d 	bl	80034f6 <BSP_RADIO_IsTCXO>
 800c09c:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800c09e:	4618      	mov	r0, r3
 800c0a0:	bd80      	pop	{r7, pc}

0800c0a2 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800c0a2:	b580      	push	{r7, lr}
 800c0a4:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800c0a6:	f7f7 fa2d 	bl	8003504 <BSP_RADIO_IsDCDC>
 800c0aa:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	bd80      	pop	{r7, pc}

0800c0b0 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	b082      	sub	sp, #8
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	4603      	mov	r3, r0
 800c0b8:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800c0ba:	79fb      	ldrb	r3, [r7, #7]
 800c0bc:	4618      	mov	r0, r3
 800c0be:	f7f7 fa28 	bl	8003512 <BSP_RADIO_GetRFOMaxPowerConfig>
 800c0c2:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	3708      	adds	r7, #8
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	bd80      	pop	{r7, pc}

0800c0cc <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b082      	sub	sp, #8
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	33f1      	adds	r3, #241	; 0xf1
 800c0d8:	2210      	movs	r2, #16
 800c0da:	2100      	movs	r1, #0
 800c0dc:	4618      	mov	r0, r3
 800c0de:	f00e f821 	bl	801a124 <memset1>
    ctx->M_n = 0;
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	2200      	movs	r2, #0
 800c0e6:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	22f0      	movs	r2, #240	; 0xf0
 800c0ee:	2100      	movs	r1, #0
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	f00e f817 	bl	801a124 <memset1>
}
 800c0f6:	bf00      	nop
 800c0f8:	3708      	adds	r7, #8
 800c0fa:	46bd      	mov	sp, r7
 800c0fc:	bd80      	pop	{r7, pc}

0800c0fe <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800c0fe:	b580      	push	{r7, lr}
 800c100:	b082      	sub	sp, #8
 800c102:	af00      	add	r7, sp, #0
 800c104:	6078      	str	r0, [r7, #4]
 800c106:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	461a      	mov	r2, r3
 800c10c:	2110      	movs	r1, #16
 800c10e:	6838      	ldr	r0, [r7, #0]
 800c110:	f000 fe5c 	bl	800cdcc <lorawan_aes_set_key>
}
 800c114:	bf00      	nop
 800c116:	3708      	adds	r7, #8
 800c118:	46bd      	mov	sp, r7
 800c11a:	bd80      	pop	{r7, pc}

0800c11c <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b08c      	sub	sp, #48	; 0x30
 800c120:	af00      	add	r7, sp, #0
 800c122:	60f8      	str	r0, [r7, #12]
 800c124:	60b9      	str	r1, [r7, #8]
 800c126:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800c12e:	2b00      	cmp	r3, #0
 800c130:	f000 80a1 	beq.w	800c276 <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800c13a:	f1c3 0310 	rsb	r3, r3, #16
 800c13e:	687a      	ldr	r2, [r7, #4]
 800c140:	4293      	cmp	r3, r2
 800c142:	bf28      	it	cs
 800c144:	4613      	movcs	r3, r2
 800c146:	627b      	str	r3, [r7, #36]	; 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	f203 1201 	addw	r2, r3, #257	; 0x101
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800c154:	4413      	add	r3, r2
 800c156:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c158:	b292      	uxth	r2, r2
 800c15a:	68b9      	ldr	r1, [r7, #8]
 800c15c:	4618      	mov	r0, r3
 800c15e:	f00d ffa6 	bl	801a0ae <memcpy1>
        ctx->M_n += mlen;
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800c168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c16a:	441a      	add	r2, r3
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800c178:	2b0f      	cmp	r3, #15
 800c17a:	f240 808d 	bls.w	800c298 <AES_CMAC_Update+0x17c>
 800c17e:	687a      	ldr	r2, [r7, #4]
 800c180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c182:	429a      	cmp	r2, r3
 800c184:	f000 8088 	beq.w	800c298 <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800c188:	2300      	movs	r3, #0
 800c18a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c18c:	e015      	b.n	800c1ba <AES_CMAC_Update+0x9e>
 800c18e:	68fa      	ldr	r2, [r7, #12]
 800c190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c192:	4413      	add	r3, r2
 800c194:	33f1      	adds	r3, #241	; 0xf1
 800c196:	781a      	ldrb	r2, [r3, #0]
 800c198:	68f9      	ldr	r1, [r7, #12]
 800c19a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c19c:	440b      	add	r3, r1
 800c19e:	f203 1301 	addw	r3, r3, #257	; 0x101
 800c1a2:	781b      	ldrb	r3, [r3, #0]
 800c1a4:	4053      	eors	r3, r2
 800c1a6:	b2d9      	uxtb	r1, r3
 800c1a8:	68fa      	ldr	r2, [r7, #12]
 800c1aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1ac:	4413      	add	r3, r2
 800c1ae:	33f1      	adds	r3, #241	; 0xf1
 800c1b0:	460a      	mov	r2, r1
 800c1b2:	701a      	strb	r2, [r3, #0]
 800c1b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1b6:	3301      	adds	r3, #1
 800c1b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c1ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1bc:	2b0f      	cmp	r3, #15
 800c1be:	dde6      	ble.n	800c18e <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800c1c6:	f107 0314 	add.w	r3, r7, #20
 800c1ca:	2210      	movs	r2, #16
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	f00d ff6e 	bl	801a0ae <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800c1d2:	68fa      	ldr	r2, [r7, #12]
 800c1d4:	f107 0114 	add.w	r1, r7, #20
 800c1d8:	f107 0314 	add.w	r3, r7, #20
 800c1dc:	4618      	mov	r0, r3
 800c1de:	f000 fed3 	bl	800cf88 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	33f1      	adds	r3, #241	; 0xf1
 800c1e6:	f107 0114 	add.w	r1, r7, #20
 800c1ea:	2210      	movs	r2, #16
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	f00d ff5e 	bl	801a0ae <memcpy1>

        data += mlen;
 800c1f2:	68ba      	ldr	r2, [r7, #8]
 800c1f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1f6:	4413      	add	r3, r2
 800c1f8:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800c1fa:	687a      	ldr	r2, [r7, #4]
 800c1fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1fe:	1ad3      	subs	r3, r2, r3
 800c200:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800c202:	e038      	b.n	800c276 <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800c204:	2300      	movs	r3, #0
 800c206:	62bb      	str	r3, [r7, #40]	; 0x28
 800c208:	e013      	b.n	800c232 <AES_CMAC_Update+0x116>
 800c20a:	68fa      	ldr	r2, [r7, #12]
 800c20c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c20e:	4413      	add	r3, r2
 800c210:	33f1      	adds	r3, #241	; 0xf1
 800c212:	781a      	ldrb	r2, [r3, #0]
 800c214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c216:	68b9      	ldr	r1, [r7, #8]
 800c218:	440b      	add	r3, r1
 800c21a:	781b      	ldrb	r3, [r3, #0]
 800c21c:	4053      	eors	r3, r2
 800c21e:	b2d9      	uxtb	r1, r3
 800c220:	68fa      	ldr	r2, [r7, #12]
 800c222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c224:	4413      	add	r3, r2
 800c226:	33f1      	adds	r3, #241	; 0xf1
 800c228:	460a      	mov	r2, r1
 800c22a:	701a      	strb	r2, [r3, #0]
 800c22c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c22e:	3301      	adds	r3, #1
 800c230:	62bb      	str	r3, [r7, #40]	; 0x28
 800c232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c234:	2b0f      	cmp	r3, #15
 800c236:	dde8      	ble.n	800c20a <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800c23e:	f107 0314 	add.w	r3, r7, #20
 800c242:	2210      	movs	r2, #16
 800c244:	4618      	mov	r0, r3
 800c246:	f00d ff32 	bl	801a0ae <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800c24a:	68fa      	ldr	r2, [r7, #12]
 800c24c:	f107 0114 	add.w	r1, r7, #20
 800c250:	f107 0314 	add.w	r3, r7, #20
 800c254:	4618      	mov	r0, r3
 800c256:	f000 fe97 	bl	800cf88 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	33f1      	adds	r3, #241	; 0xf1
 800c25e:	f107 0114 	add.w	r1, r7, #20
 800c262:	2210      	movs	r2, #16
 800c264:	4618      	mov	r0, r3
 800c266:	f00d ff22 	bl	801a0ae <memcpy1>

        data += 16;
 800c26a:	68bb      	ldr	r3, [r7, #8]
 800c26c:	3310      	adds	r3, #16
 800c26e:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	3b10      	subs	r3, #16
 800c274:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	2b10      	cmp	r3, #16
 800c27a:	d8c3      	bhi.n	800c204 <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	f203 1301 	addw	r3, r3, #257	; 0x101
 800c282:	687a      	ldr	r2, [r7, #4]
 800c284:	b292      	uxth	r2, r2
 800c286:	68b9      	ldr	r1, [r7, #8]
 800c288:	4618      	mov	r0, r3
 800c28a:	f00d ff10 	bl	801a0ae <memcpy1>
    ctx->M_n = len;
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	687a      	ldr	r2, [r7, #4]
 800c292:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800c296:	e000      	b.n	800c29a <AES_CMAC_Update+0x17e>
            return;
 800c298:	bf00      	nop
}
 800c29a:	3730      	adds	r7, #48	; 0x30
 800c29c:	46bd      	mov	sp, r7
 800c29e:	bd80      	pop	{r7, pc}

0800c2a0 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b092      	sub	sp, #72	; 0x48
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
 800c2a8:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800c2aa:	f107 031c 	add.w	r3, r7, #28
 800c2ae:	2210      	movs	r2, #16
 800c2b0:	2100      	movs	r1, #0
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	f00d ff36 	bl	801a124 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800c2b8:	683a      	ldr	r2, [r7, #0]
 800c2ba:	f107 011c 	add.w	r1, r7, #28
 800c2be:	f107 031c 	add.w	r3, r7, #28
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	f000 fe60 	bl	800cf88 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800c2c8:	7f3b      	ldrb	r3, [r7, #28]
 800c2ca:	b25b      	sxtb	r3, r3
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	da30      	bge.n	800c332 <AES_CMAC_Final+0x92>
    {
        LSHIFT( K, K );
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	647b      	str	r3, [r7, #68]	; 0x44
 800c2d4:	e01b      	b.n	800c30e <AES_CMAC_Final+0x6e>
 800c2d6:	f107 021c 	add.w	r2, r7, #28
 800c2da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c2dc:	4413      	add	r3, r2
 800c2de:	781b      	ldrb	r3, [r3, #0]
 800c2e0:	005b      	lsls	r3, r3, #1
 800c2e2:	b25a      	sxtb	r2, r3
 800c2e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c2e6:	3301      	adds	r3, #1
 800c2e8:	3348      	adds	r3, #72	; 0x48
 800c2ea:	443b      	add	r3, r7
 800c2ec:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800c2f0:	09db      	lsrs	r3, r3, #7
 800c2f2:	b2db      	uxtb	r3, r3
 800c2f4:	b25b      	sxtb	r3, r3
 800c2f6:	4313      	orrs	r3, r2
 800c2f8:	b25b      	sxtb	r3, r3
 800c2fa:	b2d9      	uxtb	r1, r3
 800c2fc:	f107 021c 	add.w	r2, r7, #28
 800c300:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c302:	4413      	add	r3, r2
 800c304:	460a      	mov	r2, r1
 800c306:	701a      	strb	r2, [r3, #0]
 800c308:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c30a:	3301      	adds	r3, #1
 800c30c:	647b      	str	r3, [r7, #68]	; 0x44
 800c30e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c310:	2b0e      	cmp	r3, #14
 800c312:	dde0      	ble.n	800c2d6 <AES_CMAC_Final+0x36>
 800c314:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c318:	005b      	lsls	r3, r3, #1
 800c31a:	b2db      	uxtb	r3, r3
 800c31c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        K[15] ^= 0x87;
 800c320:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c324:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800c328:	43db      	mvns	r3, r3
 800c32a:	b2db      	uxtb	r3, r3
 800c32c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c330:	e027      	b.n	800c382 <AES_CMAC_Final+0xe2>
    }
    else
        LSHIFT( K, K );
 800c332:	2300      	movs	r3, #0
 800c334:	643b      	str	r3, [r7, #64]	; 0x40
 800c336:	e01b      	b.n	800c370 <AES_CMAC_Final+0xd0>
 800c338:	f107 021c 	add.w	r2, r7, #28
 800c33c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c33e:	4413      	add	r3, r2
 800c340:	781b      	ldrb	r3, [r3, #0]
 800c342:	005b      	lsls	r3, r3, #1
 800c344:	b25a      	sxtb	r2, r3
 800c346:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c348:	3301      	adds	r3, #1
 800c34a:	3348      	adds	r3, #72	; 0x48
 800c34c:	443b      	add	r3, r7
 800c34e:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800c352:	09db      	lsrs	r3, r3, #7
 800c354:	b2db      	uxtb	r3, r3
 800c356:	b25b      	sxtb	r3, r3
 800c358:	4313      	orrs	r3, r2
 800c35a:	b25b      	sxtb	r3, r3
 800c35c:	b2d9      	uxtb	r1, r3
 800c35e:	f107 021c 	add.w	r2, r7, #28
 800c362:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c364:	4413      	add	r3, r2
 800c366:	460a      	mov	r2, r1
 800c368:	701a      	strb	r2, [r3, #0]
 800c36a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c36c:	3301      	adds	r3, #1
 800c36e:	643b      	str	r3, [r7, #64]	; 0x40
 800c370:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c372:	2b0e      	cmp	r3, #14
 800c374:	dde0      	ble.n	800c338 <AES_CMAC_Final+0x98>
 800c376:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c37a:	005b      	lsls	r3, r3, #1
 800c37c:	b2db      	uxtb	r3, r3
 800c37e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if( ctx->M_n == 16 )
 800c382:	683b      	ldr	r3, [r7, #0]
 800c384:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800c388:	2b10      	cmp	r3, #16
 800c38a:	d11d      	bne.n	800c3c8 <AES_CMAC_Final+0x128>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800c38c:	2300      	movs	r3, #0
 800c38e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c390:	e016      	b.n	800c3c0 <AES_CMAC_Final+0x120>
 800c392:	683a      	ldr	r2, [r7, #0]
 800c394:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c396:	4413      	add	r3, r2
 800c398:	f203 1301 	addw	r3, r3, #257	; 0x101
 800c39c:	781a      	ldrb	r2, [r3, #0]
 800c39e:	f107 011c 	add.w	r1, r7, #28
 800c3a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3a4:	440b      	add	r3, r1
 800c3a6:	781b      	ldrb	r3, [r3, #0]
 800c3a8:	4053      	eors	r3, r2
 800c3aa:	b2d9      	uxtb	r1, r3
 800c3ac:	683a      	ldr	r2, [r7, #0]
 800c3ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3b0:	4413      	add	r3, r2
 800c3b2:	f203 1301 	addw	r3, r3, #257	; 0x101
 800c3b6:	460a      	mov	r2, r1
 800c3b8:	701a      	strb	r2, [r3, #0]
 800c3ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3bc:	3301      	adds	r3, #1
 800c3be:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c3c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3c2:	2b0f      	cmp	r3, #15
 800c3c4:	dde5      	ble.n	800c392 <AES_CMAC_Final+0xf2>
 800c3c6:	e096      	b.n	800c4f6 <AES_CMAC_Final+0x256>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800c3c8:	7f3b      	ldrb	r3, [r7, #28]
 800c3ca:	b25b      	sxtb	r3, r3
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	da30      	bge.n	800c432 <AES_CMAC_Final+0x192>
        {
            LSHIFT( K, K );
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	63bb      	str	r3, [r7, #56]	; 0x38
 800c3d4:	e01b      	b.n	800c40e <AES_CMAC_Final+0x16e>
 800c3d6:	f107 021c 	add.w	r2, r7, #28
 800c3da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3dc:	4413      	add	r3, r2
 800c3de:	781b      	ldrb	r3, [r3, #0]
 800c3e0:	005b      	lsls	r3, r3, #1
 800c3e2:	b25a      	sxtb	r2, r3
 800c3e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3e6:	3301      	adds	r3, #1
 800c3e8:	3348      	adds	r3, #72	; 0x48
 800c3ea:	443b      	add	r3, r7
 800c3ec:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800c3f0:	09db      	lsrs	r3, r3, #7
 800c3f2:	b2db      	uxtb	r3, r3
 800c3f4:	b25b      	sxtb	r3, r3
 800c3f6:	4313      	orrs	r3, r2
 800c3f8:	b25b      	sxtb	r3, r3
 800c3fa:	b2d9      	uxtb	r1, r3
 800c3fc:	f107 021c 	add.w	r2, r7, #28
 800c400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c402:	4413      	add	r3, r2
 800c404:	460a      	mov	r2, r1
 800c406:	701a      	strb	r2, [r3, #0]
 800c408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c40a:	3301      	adds	r3, #1
 800c40c:	63bb      	str	r3, [r7, #56]	; 0x38
 800c40e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c410:	2b0e      	cmp	r3, #14
 800c412:	dde0      	ble.n	800c3d6 <AES_CMAC_Final+0x136>
 800c414:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c418:	005b      	lsls	r3, r3, #1
 800c41a:	b2db      	uxtb	r3, r3
 800c41c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            K[15] ^= 0x87;
 800c420:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c424:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800c428:	43db      	mvns	r3, r3
 800c42a:	b2db      	uxtb	r3, r3
 800c42c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c430:	e027      	b.n	800c482 <AES_CMAC_Final+0x1e2>
        }
        else
            LSHIFT( K, K );
 800c432:	2300      	movs	r3, #0
 800c434:	637b      	str	r3, [r7, #52]	; 0x34
 800c436:	e01b      	b.n	800c470 <AES_CMAC_Final+0x1d0>
 800c438:	f107 021c 	add.w	r2, r7, #28
 800c43c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c43e:	4413      	add	r3, r2
 800c440:	781b      	ldrb	r3, [r3, #0]
 800c442:	005b      	lsls	r3, r3, #1
 800c444:	b25a      	sxtb	r2, r3
 800c446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c448:	3301      	adds	r3, #1
 800c44a:	3348      	adds	r3, #72	; 0x48
 800c44c:	443b      	add	r3, r7
 800c44e:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800c452:	09db      	lsrs	r3, r3, #7
 800c454:	b2db      	uxtb	r3, r3
 800c456:	b25b      	sxtb	r3, r3
 800c458:	4313      	orrs	r3, r2
 800c45a:	b25b      	sxtb	r3, r3
 800c45c:	b2d9      	uxtb	r1, r3
 800c45e:	f107 021c 	add.w	r2, r7, #28
 800c462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c464:	4413      	add	r3, r2
 800c466:	460a      	mov	r2, r1
 800c468:	701a      	strb	r2, [r3, #0]
 800c46a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c46c:	3301      	adds	r3, #1
 800c46e:	637b      	str	r3, [r7, #52]	; 0x34
 800c470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c472:	2b0e      	cmp	r3, #14
 800c474:	dde0      	ble.n	800c438 <AES_CMAC_Final+0x198>
 800c476:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c47a:	005b      	lsls	r3, r3, #1
 800c47c:	b2db      	uxtb	r3, r3
 800c47e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800c482:	683b      	ldr	r3, [r7, #0]
 800c484:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800c488:	683a      	ldr	r2, [r7, #0]
 800c48a:	4413      	add	r3, r2
 800c48c:	2280      	movs	r2, #128	; 0x80
 800c48e:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800c492:	e007      	b.n	800c4a4 <AES_CMAC_Final+0x204>
            ctx->M_last[ctx->M_n] = 0;
 800c494:	683b      	ldr	r3, [r7, #0]
 800c496:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800c49a:	683a      	ldr	r2, [r7, #0]
 800c49c:	4413      	add	r3, r2
 800c49e:	2200      	movs	r2, #0
 800c4a0:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800c4a4:	683b      	ldr	r3, [r7, #0]
 800c4a6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800c4aa:	1c5a      	adds	r2, r3, #1
 800c4ac:	683b      	ldr	r3, [r7, #0]
 800c4ae:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800c4b2:	683b      	ldr	r3, [r7, #0]
 800c4b4:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800c4b8:	2b0f      	cmp	r3, #15
 800c4ba:	d9eb      	bls.n	800c494 <AES_CMAC_Final+0x1f4>

        XOR( K, ctx->M_last );
 800c4bc:	2300      	movs	r3, #0
 800c4be:	633b      	str	r3, [r7, #48]	; 0x30
 800c4c0:	e016      	b.n	800c4f0 <AES_CMAC_Final+0x250>
 800c4c2:	683a      	ldr	r2, [r7, #0]
 800c4c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4c6:	4413      	add	r3, r2
 800c4c8:	f203 1301 	addw	r3, r3, #257	; 0x101
 800c4cc:	781a      	ldrb	r2, [r3, #0]
 800c4ce:	f107 011c 	add.w	r1, r7, #28
 800c4d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4d4:	440b      	add	r3, r1
 800c4d6:	781b      	ldrb	r3, [r3, #0]
 800c4d8:	4053      	eors	r3, r2
 800c4da:	b2d9      	uxtb	r1, r3
 800c4dc:	683a      	ldr	r2, [r7, #0]
 800c4de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4e0:	4413      	add	r3, r2
 800c4e2:	f203 1301 	addw	r3, r3, #257	; 0x101
 800c4e6:	460a      	mov	r2, r1
 800c4e8:	701a      	strb	r2, [r3, #0]
 800c4ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4ec:	3301      	adds	r3, #1
 800c4ee:	633b      	str	r3, [r7, #48]	; 0x30
 800c4f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4f2:	2b0f      	cmp	r3, #15
 800c4f4:	dde5      	ble.n	800c4c2 <AES_CMAC_Final+0x222>
    }
    XOR( ctx->M_last, ctx->X );
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c4fa:	e015      	b.n	800c528 <AES_CMAC_Final+0x288>
 800c4fc:	683a      	ldr	r2, [r7, #0]
 800c4fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c500:	4413      	add	r3, r2
 800c502:	33f1      	adds	r3, #241	; 0xf1
 800c504:	781a      	ldrb	r2, [r3, #0]
 800c506:	6839      	ldr	r1, [r7, #0]
 800c508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c50a:	440b      	add	r3, r1
 800c50c:	f203 1301 	addw	r3, r3, #257	; 0x101
 800c510:	781b      	ldrb	r3, [r3, #0]
 800c512:	4053      	eors	r3, r2
 800c514:	b2d9      	uxtb	r1, r3
 800c516:	683a      	ldr	r2, [r7, #0]
 800c518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c51a:	4413      	add	r3, r2
 800c51c:	33f1      	adds	r3, #241	; 0xf1
 800c51e:	460a      	mov	r2, r1
 800c520:	701a      	strb	r2, [r3, #0]
 800c522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c524:	3301      	adds	r3, #1
 800c526:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c52a:	2b0f      	cmp	r3, #15
 800c52c:	dde6      	ble.n	800c4fc <AES_CMAC_Final+0x25c>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800c534:	f107 030c 	add.w	r3, r7, #12
 800c538:	2210      	movs	r2, #16
 800c53a:	4618      	mov	r0, r3
 800c53c:	f00d fdb7 	bl	801a0ae <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800c540:	683a      	ldr	r2, [r7, #0]
 800c542:	f107 030c 	add.w	r3, r7, #12
 800c546:	6879      	ldr	r1, [r7, #4]
 800c548:	4618      	mov	r0, r3
 800c54a:	f000 fd1d 	bl	800cf88 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800c54e:	f107 031c 	add.w	r3, r7, #28
 800c552:	2210      	movs	r2, #16
 800c554:	2100      	movs	r1, #0
 800c556:	4618      	mov	r0, r3
 800c558:	f00d fde4 	bl	801a124 <memset1>
}
 800c55c:	bf00      	nop
 800c55e:	3748      	adds	r7, #72	; 0x48
 800c560:	46bd      	mov	sp, r7
 800c562:	bd80      	pop	{r7, pc}

0800c564 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800c564:	b480      	push	{r7}
 800c566:	b083      	sub	sp, #12
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
 800c56c:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800c56e:	683b      	ldr	r3, [r7, #0]
 800c570:	781a      	ldrb	r2, [r3, #0]
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	3301      	adds	r3, #1
 800c57a:	683a      	ldr	r2, [r7, #0]
 800c57c:	7852      	ldrb	r2, [r2, #1]
 800c57e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	3302      	adds	r3, #2
 800c584:	683a      	ldr	r2, [r7, #0]
 800c586:	7892      	ldrb	r2, [r2, #2]
 800c588:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	3303      	adds	r3, #3
 800c58e:	683a      	ldr	r2, [r7, #0]
 800c590:	78d2      	ldrb	r2, [r2, #3]
 800c592:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	3304      	adds	r3, #4
 800c598:	683a      	ldr	r2, [r7, #0]
 800c59a:	7912      	ldrb	r2, [r2, #4]
 800c59c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	3305      	adds	r3, #5
 800c5a2:	683a      	ldr	r2, [r7, #0]
 800c5a4:	7952      	ldrb	r2, [r2, #5]
 800c5a6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	3306      	adds	r3, #6
 800c5ac:	683a      	ldr	r2, [r7, #0]
 800c5ae:	7992      	ldrb	r2, [r2, #6]
 800c5b0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	3307      	adds	r3, #7
 800c5b6:	683a      	ldr	r2, [r7, #0]
 800c5b8:	79d2      	ldrb	r2, [r2, #7]
 800c5ba:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	3308      	adds	r3, #8
 800c5c0:	683a      	ldr	r2, [r7, #0]
 800c5c2:	7a12      	ldrb	r2, [r2, #8]
 800c5c4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	3309      	adds	r3, #9
 800c5ca:	683a      	ldr	r2, [r7, #0]
 800c5cc:	7a52      	ldrb	r2, [r2, #9]
 800c5ce:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	330a      	adds	r3, #10
 800c5d4:	683a      	ldr	r2, [r7, #0]
 800c5d6:	7a92      	ldrb	r2, [r2, #10]
 800c5d8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	330b      	adds	r3, #11
 800c5de:	683a      	ldr	r2, [r7, #0]
 800c5e0:	7ad2      	ldrb	r2, [r2, #11]
 800c5e2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	330c      	adds	r3, #12
 800c5e8:	683a      	ldr	r2, [r7, #0]
 800c5ea:	7b12      	ldrb	r2, [r2, #12]
 800c5ec:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	330d      	adds	r3, #13
 800c5f2:	683a      	ldr	r2, [r7, #0]
 800c5f4:	7b52      	ldrb	r2, [r2, #13]
 800c5f6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	330e      	adds	r3, #14
 800c5fc:	683a      	ldr	r2, [r7, #0]
 800c5fe:	7b92      	ldrb	r2, [r2, #14]
 800c600:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	330f      	adds	r3, #15
 800c606:	683a      	ldr	r2, [r7, #0]
 800c608:	7bd2      	ldrb	r2, [r2, #15]
 800c60a:	701a      	strb	r2, [r3, #0]
#endif
}
 800c60c:	bf00      	nop
 800c60e:	370c      	adds	r7, #12
 800c610:	46bd      	mov	sp, r7
 800c612:	bc80      	pop	{r7}
 800c614:	4770      	bx	lr

0800c616 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800c616:	b480      	push	{r7}
 800c618:	b085      	sub	sp, #20
 800c61a:	af00      	add	r7, sp, #0
 800c61c:	60f8      	str	r0, [r7, #12]
 800c61e:	60b9      	str	r1, [r7, #8]
 800c620:	4613      	mov	r3, r2
 800c622:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800c624:	e007      	b.n	800c636 <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800c626:	68ba      	ldr	r2, [r7, #8]
 800c628:	1c53      	adds	r3, r2, #1
 800c62a:	60bb      	str	r3, [r7, #8]
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	1c59      	adds	r1, r3, #1
 800c630:	60f9      	str	r1, [r7, #12]
 800c632:	7812      	ldrb	r2, [r2, #0]
 800c634:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800c636:	79fb      	ldrb	r3, [r7, #7]
 800c638:	1e5a      	subs	r2, r3, #1
 800c63a:	71fa      	strb	r2, [r7, #7]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d1f2      	bne.n	800c626 <copy_block_nn+0x10>
}
 800c640:	bf00      	nop
 800c642:	bf00      	nop
 800c644:	3714      	adds	r7, #20
 800c646:	46bd      	mov	sp, r7
 800c648:	bc80      	pop	{r7}
 800c64a:	4770      	bx	lr

0800c64c <xor_block>:

static void xor_block( void *d, const void *s )
{
 800c64c:	b480      	push	{r7}
 800c64e:	b083      	sub	sp, #12
 800c650:	af00      	add	r7, sp, #0
 800c652:	6078      	str	r0, [r7, #4]
 800c654:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	781a      	ldrb	r2, [r3, #0]
 800c65a:	683b      	ldr	r3, [r7, #0]
 800c65c:	781b      	ldrb	r3, [r3, #0]
 800c65e:	4053      	eors	r3, r2
 800c660:	b2da      	uxtb	r2, r3
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	3301      	adds	r3, #1
 800c66a:	7819      	ldrb	r1, [r3, #0]
 800c66c:	683b      	ldr	r3, [r7, #0]
 800c66e:	3301      	adds	r3, #1
 800c670:	781a      	ldrb	r2, [r3, #0]
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	3301      	adds	r3, #1
 800c676:	404a      	eors	r2, r1
 800c678:	b2d2      	uxtb	r2, r2
 800c67a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	3302      	adds	r3, #2
 800c680:	7819      	ldrb	r1, [r3, #0]
 800c682:	683b      	ldr	r3, [r7, #0]
 800c684:	3302      	adds	r3, #2
 800c686:	781a      	ldrb	r2, [r3, #0]
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	3302      	adds	r3, #2
 800c68c:	404a      	eors	r2, r1
 800c68e:	b2d2      	uxtb	r2, r2
 800c690:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	3303      	adds	r3, #3
 800c696:	7819      	ldrb	r1, [r3, #0]
 800c698:	683b      	ldr	r3, [r7, #0]
 800c69a:	3303      	adds	r3, #3
 800c69c:	781a      	ldrb	r2, [r3, #0]
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	3303      	adds	r3, #3
 800c6a2:	404a      	eors	r2, r1
 800c6a4:	b2d2      	uxtb	r2, r2
 800c6a6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	3304      	adds	r3, #4
 800c6ac:	7819      	ldrb	r1, [r3, #0]
 800c6ae:	683b      	ldr	r3, [r7, #0]
 800c6b0:	3304      	adds	r3, #4
 800c6b2:	781a      	ldrb	r2, [r3, #0]
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	3304      	adds	r3, #4
 800c6b8:	404a      	eors	r2, r1
 800c6ba:	b2d2      	uxtb	r2, r2
 800c6bc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	3305      	adds	r3, #5
 800c6c2:	7819      	ldrb	r1, [r3, #0]
 800c6c4:	683b      	ldr	r3, [r7, #0]
 800c6c6:	3305      	adds	r3, #5
 800c6c8:	781a      	ldrb	r2, [r3, #0]
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	3305      	adds	r3, #5
 800c6ce:	404a      	eors	r2, r1
 800c6d0:	b2d2      	uxtb	r2, r2
 800c6d2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	3306      	adds	r3, #6
 800c6d8:	7819      	ldrb	r1, [r3, #0]
 800c6da:	683b      	ldr	r3, [r7, #0]
 800c6dc:	3306      	adds	r3, #6
 800c6de:	781a      	ldrb	r2, [r3, #0]
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	3306      	adds	r3, #6
 800c6e4:	404a      	eors	r2, r1
 800c6e6:	b2d2      	uxtb	r2, r2
 800c6e8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	3307      	adds	r3, #7
 800c6ee:	7819      	ldrb	r1, [r3, #0]
 800c6f0:	683b      	ldr	r3, [r7, #0]
 800c6f2:	3307      	adds	r3, #7
 800c6f4:	781a      	ldrb	r2, [r3, #0]
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	3307      	adds	r3, #7
 800c6fa:	404a      	eors	r2, r1
 800c6fc:	b2d2      	uxtb	r2, r2
 800c6fe:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	3308      	adds	r3, #8
 800c704:	7819      	ldrb	r1, [r3, #0]
 800c706:	683b      	ldr	r3, [r7, #0]
 800c708:	3308      	adds	r3, #8
 800c70a:	781a      	ldrb	r2, [r3, #0]
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	3308      	adds	r3, #8
 800c710:	404a      	eors	r2, r1
 800c712:	b2d2      	uxtb	r2, r2
 800c714:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	3309      	adds	r3, #9
 800c71a:	7819      	ldrb	r1, [r3, #0]
 800c71c:	683b      	ldr	r3, [r7, #0]
 800c71e:	3309      	adds	r3, #9
 800c720:	781a      	ldrb	r2, [r3, #0]
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	3309      	adds	r3, #9
 800c726:	404a      	eors	r2, r1
 800c728:	b2d2      	uxtb	r2, r2
 800c72a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	330a      	adds	r3, #10
 800c730:	7819      	ldrb	r1, [r3, #0]
 800c732:	683b      	ldr	r3, [r7, #0]
 800c734:	330a      	adds	r3, #10
 800c736:	781a      	ldrb	r2, [r3, #0]
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	330a      	adds	r3, #10
 800c73c:	404a      	eors	r2, r1
 800c73e:	b2d2      	uxtb	r2, r2
 800c740:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	330b      	adds	r3, #11
 800c746:	7819      	ldrb	r1, [r3, #0]
 800c748:	683b      	ldr	r3, [r7, #0]
 800c74a:	330b      	adds	r3, #11
 800c74c:	781a      	ldrb	r2, [r3, #0]
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	330b      	adds	r3, #11
 800c752:	404a      	eors	r2, r1
 800c754:	b2d2      	uxtb	r2, r2
 800c756:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	330c      	adds	r3, #12
 800c75c:	7819      	ldrb	r1, [r3, #0]
 800c75e:	683b      	ldr	r3, [r7, #0]
 800c760:	330c      	adds	r3, #12
 800c762:	781a      	ldrb	r2, [r3, #0]
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	330c      	adds	r3, #12
 800c768:	404a      	eors	r2, r1
 800c76a:	b2d2      	uxtb	r2, r2
 800c76c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	330d      	adds	r3, #13
 800c772:	7819      	ldrb	r1, [r3, #0]
 800c774:	683b      	ldr	r3, [r7, #0]
 800c776:	330d      	adds	r3, #13
 800c778:	781a      	ldrb	r2, [r3, #0]
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	330d      	adds	r3, #13
 800c77e:	404a      	eors	r2, r1
 800c780:	b2d2      	uxtb	r2, r2
 800c782:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	330e      	adds	r3, #14
 800c788:	7819      	ldrb	r1, [r3, #0]
 800c78a:	683b      	ldr	r3, [r7, #0]
 800c78c:	330e      	adds	r3, #14
 800c78e:	781a      	ldrb	r2, [r3, #0]
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	330e      	adds	r3, #14
 800c794:	404a      	eors	r2, r1
 800c796:	b2d2      	uxtb	r2, r2
 800c798:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	330f      	adds	r3, #15
 800c79e:	7819      	ldrb	r1, [r3, #0]
 800c7a0:	683b      	ldr	r3, [r7, #0]
 800c7a2:	330f      	adds	r3, #15
 800c7a4:	781a      	ldrb	r2, [r3, #0]
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	330f      	adds	r3, #15
 800c7aa:	404a      	eors	r2, r1
 800c7ac:	b2d2      	uxtb	r2, r2
 800c7ae:	701a      	strb	r2, [r3, #0]
#endif
}
 800c7b0:	bf00      	nop
 800c7b2:	370c      	adds	r7, #12
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	bc80      	pop	{r7}
 800c7b8:	4770      	bx	lr

0800c7ba <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800c7ba:	b480      	push	{r7}
 800c7bc:	b085      	sub	sp, #20
 800c7be:	af00      	add	r7, sp, #0
 800c7c0:	60f8      	str	r0, [r7, #12]
 800c7c2:	60b9      	str	r1, [r7, #8]
 800c7c4:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800c7c6:	68bb      	ldr	r3, [r7, #8]
 800c7c8:	781a      	ldrb	r2, [r3, #0]
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	781b      	ldrb	r3, [r3, #0]
 800c7ce:	4053      	eors	r3, r2
 800c7d0:	b2da      	uxtb	r2, r3
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800c7d6:	68bb      	ldr	r3, [r7, #8]
 800c7d8:	3301      	adds	r3, #1
 800c7da:	7819      	ldrb	r1, [r3, #0]
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	3301      	adds	r3, #1
 800c7e0:	781a      	ldrb	r2, [r3, #0]
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	3301      	adds	r3, #1
 800c7e6:	404a      	eors	r2, r1
 800c7e8:	b2d2      	uxtb	r2, r2
 800c7ea:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800c7ec:	68bb      	ldr	r3, [r7, #8]
 800c7ee:	3302      	adds	r3, #2
 800c7f0:	7819      	ldrb	r1, [r3, #0]
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	3302      	adds	r3, #2
 800c7f6:	781a      	ldrb	r2, [r3, #0]
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	3302      	adds	r3, #2
 800c7fc:	404a      	eors	r2, r1
 800c7fe:	b2d2      	uxtb	r2, r2
 800c800:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800c802:	68bb      	ldr	r3, [r7, #8]
 800c804:	3303      	adds	r3, #3
 800c806:	7819      	ldrb	r1, [r3, #0]
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	3303      	adds	r3, #3
 800c80c:	781a      	ldrb	r2, [r3, #0]
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	3303      	adds	r3, #3
 800c812:	404a      	eors	r2, r1
 800c814:	b2d2      	uxtb	r2, r2
 800c816:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800c818:	68bb      	ldr	r3, [r7, #8]
 800c81a:	3304      	adds	r3, #4
 800c81c:	7819      	ldrb	r1, [r3, #0]
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	3304      	adds	r3, #4
 800c822:	781a      	ldrb	r2, [r3, #0]
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	3304      	adds	r3, #4
 800c828:	404a      	eors	r2, r1
 800c82a:	b2d2      	uxtb	r2, r2
 800c82c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800c82e:	68bb      	ldr	r3, [r7, #8]
 800c830:	3305      	adds	r3, #5
 800c832:	7819      	ldrb	r1, [r3, #0]
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	3305      	adds	r3, #5
 800c838:	781a      	ldrb	r2, [r3, #0]
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	3305      	adds	r3, #5
 800c83e:	404a      	eors	r2, r1
 800c840:	b2d2      	uxtb	r2, r2
 800c842:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800c844:	68bb      	ldr	r3, [r7, #8]
 800c846:	3306      	adds	r3, #6
 800c848:	7819      	ldrb	r1, [r3, #0]
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	3306      	adds	r3, #6
 800c84e:	781a      	ldrb	r2, [r3, #0]
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	3306      	adds	r3, #6
 800c854:	404a      	eors	r2, r1
 800c856:	b2d2      	uxtb	r2, r2
 800c858:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800c85a:	68bb      	ldr	r3, [r7, #8]
 800c85c:	3307      	adds	r3, #7
 800c85e:	7819      	ldrb	r1, [r3, #0]
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	3307      	adds	r3, #7
 800c864:	781a      	ldrb	r2, [r3, #0]
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	3307      	adds	r3, #7
 800c86a:	404a      	eors	r2, r1
 800c86c:	b2d2      	uxtb	r2, r2
 800c86e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800c870:	68bb      	ldr	r3, [r7, #8]
 800c872:	3308      	adds	r3, #8
 800c874:	7819      	ldrb	r1, [r3, #0]
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	3308      	adds	r3, #8
 800c87a:	781a      	ldrb	r2, [r3, #0]
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	3308      	adds	r3, #8
 800c880:	404a      	eors	r2, r1
 800c882:	b2d2      	uxtb	r2, r2
 800c884:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800c886:	68bb      	ldr	r3, [r7, #8]
 800c888:	3309      	adds	r3, #9
 800c88a:	7819      	ldrb	r1, [r3, #0]
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	3309      	adds	r3, #9
 800c890:	781a      	ldrb	r2, [r3, #0]
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	3309      	adds	r3, #9
 800c896:	404a      	eors	r2, r1
 800c898:	b2d2      	uxtb	r2, r2
 800c89a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800c89c:	68bb      	ldr	r3, [r7, #8]
 800c89e:	330a      	adds	r3, #10
 800c8a0:	7819      	ldrb	r1, [r3, #0]
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	330a      	adds	r3, #10
 800c8a6:	781a      	ldrb	r2, [r3, #0]
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	330a      	adds	r3, #10
 800c8ac:	404a      	eors	r2, r1
 800c8ae:	b2d2      	uxtb	r2, r2
 800c8b0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800c8b2:	68bb      	ldr	r3, [r7, #8]
 800c8b4:	330b      	adds	r3, #11
 800c8b6:	7819      	ldrb	r1, [r3, #0]
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	330b      	adds	r3, #11
 800c8bc:	781a      	ldrb	r2, [r3, #0]
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	330b      	adds	r3, #11
 800c8c2:	404a      	eors	r2, r1
 800c8c4:	b2d2      	uxtb	r2, r2
 800c8c6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800c8c8:	68bb      	ldr	r3, [r7, #8]
 800c8ca:	330c      	adds	r3, #12
 800c8cc:	7819      	ldrb	r1, [r3, #0]
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	330c      	adds	r3, #12
 800c8d2:	781a      	ldrb	r2, [r3, #0]
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	330c      	adds	r3, #12
 800c8d8:	404a      	eors	r2, r1
 800c8da:	b2d2      	uxtb	r2, r2
 800c8dc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800c8de:	68bb      	ldr	r3, [r7, #8]
 800c8e0:	330d      	adds	r3, #13
 800c8e2:	7819      	ldrb	r1, [r3, #0]
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	330d      	adds	r3, #13
 800c8e8:	781a      	ldrb	r2, [r3, #0]
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	330d      	adds	r3, #13
 800c8ee:	404a      	eors	r2, r1
 800c8f0:	b2d2      	uxtb	r2, r2
 800c8f2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800c8f4:	68bb      	ldr	r3, [r7, #8]
 800c8f6:	330e      	adds	r3, #14
 800c8f8:	7819      	ldrb	r1, [r3, #0]
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	330e      	adds	r3, #14
 800c8fe:	781a      	ldrb	r2, [r3, #0]
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	330e      	adds	r3, #14
 800c904:	404a      	eors	r2, r1
 800c906:	b2d2      	uxtb	r2, r2
 800c908:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800c90a:	68bb      	ldr	r3, [r7, #8]
 800c90c:	330f      	adds	r3, #15
 800c90e:	7819      	ldrb	r1, [r3, #0]
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	330f      	adds	r3, #15
 800c914:	781a      	ldrb	r2, [r3, #0]
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	330f      	adds	r3, #15
 800c91a:	404a      	eors	r2, r1
 800c91c:	b2d2      	uxtb	r2, r2
 800c91e:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800c920:	bf00      	nop
 800c922:	3714      	adds	r7, #20
 800c924:	46bd      	mov	sp, r7
 800c926:	bc80      	pop	{r7}
 800c928:	4770      	bx	lr

0800c92a <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800c92a:	b580      	push	{r7, lr}
 800c92c:	b082      	sub	sp, #8
 800c92e:	af00      	add	r7, sp, #0
 800c930:	6078      	str	r0, [r7, #4]
 800c932:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800c934:	6839      	ldr	r1, [r7, #0]
 800c936:	6878      	ldr	r0, [r7, #4]
 800c938:	f7ff fe88 	bl	800c64c <xor_block>
}
 800c93c:	bf00      	nop
 800c93e:	3708      	adds	r7, #8
 800c940:	46bd      	mov	sp, r7
 800c942:	bd80      	pop	{r7, pc}

0800c944 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800c944:	b480      	push	{r7}
 800c946:	b085      	sub	sp, #20
 800c948:	af00      	add	r7, sp, #0
 800c94a:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	781b      	ldrb	r3, [r3, #0]
 800c950:	461a      	mov	r2, r3
 800c952:	4b48      	ldr	r3, [pc, #288]	; (800ca74 <shift_sub_rows+0x130>)
 800c954:	5c9a      	ldrb	r2, [r3, r2]
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	701a      	strb	r2, [r3, #0]
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	3304      	adds	r3, #4
 800c95e:	781b      	ldrb	r3, [r3, #0]
 800c960:	4619      	mov	r1, r3
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	3304      	adds	r3, #4
 800c966:	4a43      	ldr	r2, [pc, #268]	; (800ca74 <shift_sub_rows+0x130>)
 800c968:	5c52      	ldrb	r2, [r2, r1]
 800c96a:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	3308      	adds	r3, #8
 800c970:	781b      	ldrb	r3, [r3, #0]
 800c972:	4619      	mov	r1, r3
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	3308      	adds	r3, #8
 800c978:	4a3e      	ldr	r2, [pc, #248]	; (800ca74 <shift_sub_rows+0x130>)
 800c97a:	5c52      	ldrb	r2, [r2, r1]
 800c97c:	701a      	strb	r2, [r3, #0]
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	330c      	adds	r3, #12
 800c982:	781b      	ldrb	r3, [r3, #0]
 800c984:	4619      	mov	r1, r3
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	330c      	adds	r3, #12
 800c98a:	4a3a      	ldr	r2, [pc, #232]	; (800ca74 <shift_sub_rows+0x130>)
 800c98c:	5c52      	ldrb	r2, [r2, r1]
 800c98e:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	785b      	ldrb	r3, [r3, #1]
 800c994:	73fb      	strb	r3, [r7, #15]
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	3305      	adds	r3, #5
 800c99a:	781b      	ldrb	r3, [r3, #0]
 800c99c:	4619      	mov	r1, r3
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	3301      	adds	r3, #1
 800c9a2:	4a34      	ldr	r2, [pc, #208]	; (800ca74 <shift_sub_rows+0x130>)
 800c9a4:	5c52      	ldrb	r2, [r2, r1]
 800c9a6:	701a      	strb	r2, [r3, #0]
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	3309      	adds	r3, #9
 800c9ac:	781b      	ldrb	r3, [r3, #0]
 800c9ae:	4619      	mov	r1, r3
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	3305      	adds	r3, #5
 800c9b4:	4a2f      	ldr	r2, [pc, #188]	; (800ca74 <shift_sub_rows+0x130>)
 800c9b6:	5c52      	ldrb	r2, [r2, r1]
 800c9b8:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	330d      	adds	r3, #13
 800c9be:	781b      	ldrb	r3, [r3, #0]
 800c9c0:	4619      	mov	r1, r3
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	3309      	adds	r3, #9
 800c9c6:	4a2b      	ldr	r2, [pc, #172]	; (800ca74 <shift_sub_rows+0x130>)
 800c9c8:	5c52      	ldrb	r2, [r2, r1]
 800c9ca:	701a      	strb	r2, [r3, #0]
 800c9cc:	7bfa      	ldrb	r2, [r7, #15]
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	330d      	adds	r3, #13
 800c9d2:	4928      	ldr	r1, [pc, #160]	; (800ca74 <shift_sub_rows+0x130>)
 800c9d4:	5c8a      	ldrb	r2, [r1, r2]
 800c9d6:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	789b      	ldrb	r3, [r3, #2]
 800c9dc:	73fb      	strb	r3, [r7, #15]
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	330a      	adds	r3, #10
 800c9e2:	781b      	ldrb	r3, [r3, #0]
 800c9e4:	4619      	mov	r1, r3
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	3302      	adds	r3, #2
 800c9ea:	4a22      	ldr	r2, [pc, #136]	; (800ca74 <shift_sub_rows+0x130>)
 800c9ec:	5c52      	ldrb	r2, [r2, r1]
 800c9ee:	701a      	strb	r2, [r3, #0]
 800c9f0:	7bfa      	ldrb	r2, [r7, #15]
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	330a      	adds	r3, #10
 800c9f6:	491f      	ldr	r1, [pc, #124]	; (800ca74 <shift_sub_rows+0x130>)
 800c9f8:	5c8a      	ldrb	r2, [r1, r2]
 800c9fa:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	799b      	ldrb	r3, [r3, #6]
 800ca00:	73fb      	strb	r3, [r7, #15]
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	330e      	adds	r3, #14
 800ca06:	781b      	ldrb	r3, [r3, #0]
 800ca08:	4619      	mov	r1, r3
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	3306      	adds	r3, #6
 800ca0e:	4a19      	ldr	r2, [pc, #100]	; (800ca74 <shift_sub_rows+0x130>)
 800ca10:	5c52      	ldrb	r2, [r2, r1]
 800ca12:	701a      	strb	r2, [r3, #0]
 800ca14:	7bfa      	ldrb	r2, [r7, #15]
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	330e      	adds	r3, #14
 800ca1a:	4916      	ldr	r1, [pc, #88]	; (800ca74 <shift_sub_rows+0x130>)
 800ca1c:	5c8a      	ldrb	r2, [r1, r2]
 800ca1e:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	7bdb      	ldrb	r3, [r3, #15]
 800ca24:	73fb      	strb	r3, [r7, #15]
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	330b      	adds	r3, #11
 800ca2a:	781b      	ldrb	r3, [r3, #0]
 800ca2c:	4619      	mov	r1, r3
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	330f      	adds	r3, #15
 800ca32:	4a10      	ldr	r2, [pc, #64]	; (800ca74 <shift_sub_rows+0x130>)
 800ca34:	5c52      	ldrb	r2, [r2, r1]
 800ca36:	701a      	strb	r2, [r3, #0]
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	3307      	adds	r3, #7
 800ca3c:	781b      	ldrb	r3, [r3, #0]
 800ca3e:	4619      	mov	r1, r3
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	330b      	adds	r3, #11
 800ca44:	4a0b      	ldr	r2, [pc, #44]	; (800ca74 <shift_sub_rows+0x130>)
 800ca46:	5c52      	ldrb	r2, [r2, r1]
 800ca48:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	3303      	adds	r3, #3
 800ca4e:	781b      	ldrb	r3, [r3, #0]
 800ca50:	4619      	mov	r1, r3
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	3307      	adds	r3, #7
 800ca56:	4a07      	ldr	r2, [pc, #28]	; (800ca74 <shift_sub_rows+0x130>)
 800ca58:	5c52      	ldrb	r2, [r2, r1]
 800ca5a:	701a      	strb	r2, [r3, #0]
 800ca5c:	7bfa      	ldrb	r2, [r7, #15]
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	3303      	adds	r3, #3
 800ca62:	4904      	ldr	r1, [pc, #16]	; (800ca74 <shift_sub_rows+0x130>)
 800ca64:	5c8a      	ldrb	r2, [r1, r2]
 800ca66:	701a      	strb	r2, [r3, #0]
}
 800ca68:	bf00      	nop
 800ca6a:	3714      	adds	r7, #20
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	bc80      	pop	{r7}
 800ca70:	4770      	bx	lr
 800ca72:	bf00      	nop
 800ca74:	0801f87c 	.word	0x0801f87c

0800ca78 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800ca78:	b580      	push	{r7, lr}
 800ca7a:	b086      	sub	sp, #24
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800ca80:	f107 0308 	add.w	r3, r7, #8
 800ca84:	6879      	ldr	r1, [r7, #4]
 800ca86:	4618      	mov	r0, r3
 800ca88:	f7ff fd6c 	bl	800c564 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800ca8c:	7a3b      	ldrb	r3, [r7, #8]
 800ca8e:	461a      	mov	r2, r3
 800ca90:	4b9a      	ldr	r3, [pc, #616]	; (800ccfc <mix_sub_columns+0x284>)
 800ca92:	5c9a      	ldrb	r2, [r3, r2]
 800ca94:	7b7b      	ldrb	r3, [r7, #13]
 800ca96:	4619      	mov	r1, r3
 800ca98:	4b99      	ldr	r3, [pc, #612]	; (800cd00 <mix_sub_columns+0x288>)
 800ca9a:	5c5b      	ldrb	r3, [r3, r1]
 800ca9c:	4053      	eors	r3, r2
 800ca9e:	b2da      	uxtb	r2, r3
 800caa0:	7cbb      	ldrb	r3, [r7, #18]
 800caa2:	4619      	mov	r1, r3
 800caa4:	4b97      	ldr	r3, [pc, #604]	; (800cd04 <mix_sub_columns+0x28c>)
 800caa6:	5c5b      	ldrb	r3, [r3, r1]
 800caa8:	4053      	eors	r3, r2
 800caaa:	b2da      	uxtb	r2, r3
 800caac:	7dfb      	ldrb	r3, [r7, #23]
 800caae:	4619      	mov	r1, r3
 800cab0:	4b94      	ldr	r3, [pc, #592]	; (800cd04 <mix_sub_columns+0x28c>)
 800cab2:	5c5b      	ldrb	r3, [r3, r1]
 800cab4:	4053      	eors	r3, r2
 800cab6:	b2da      	uxtb	r2, r3
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800cabc:	7a3b      	ldrb	r3, [r7, #8]
 800cabe:	461a      	mov	r2, r3
 800cac0:	4b90      	ldr	r3, [pc, #576]	; (800cd04 <mix_sub_columns+0x28c>)
 800cac2:	5c9a      	ldrb	r2, [r3, r2]
 800cac4:	7b7b      	ldrb	r3, [r7, #13]
 800cac6:	4619      	mov	r1, r3
 800cac8:	4b8c      	ldr	r3, [pc, #560]	; (800ccfc <mix_sub_columns+0x284>)
 800caca:	5c5b      	ldrb	r3, [r3, r1]
 800cacc:	4053      	eors	r3, r2
 800cace:	b2da      	uxtb	r2, r3
 800cad0:	7cbb      	ldrb	r3, [r7, #18]
 800cad2:	4619      	mov	r1, r3
 800cad4:	4b8a      	ldr	r3, [pc, #552]	; (800cd00 <mix_sub_columns+0x288>)
 800cad6:	5c5b      	ldrb	r3, [r3, r1]
 800cad8:	4053      	eors	r3, r2
 800cada:	b2d9      	uxtb	r1, r3
 800cadc:	7dfb      	ldrb	r3, [r7, #23]
 800cade:	461a      	mov	r2, r3
 800cae0:	4b88      	ldr	r3, [pc, #544]	; (800cd04 <mix_sub_columns+0x28c>)
 800cae2:	5c9a      	ldrb	r2, [r3, r2]
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	3301      	adds	r3, #1
 800cae8:	404a      	eors	r2, r1
 800caea:	b2d2      	uxtb	r2, r2
 800caec:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800caee:	7a3b      	ldrb	r3, [r7, #8]
 800caf0:	461a      	mov	r2, r3
 800caf2:	4b84      	ldr	r3, [pc, #528]	; (800cd04 <mix_sub_columns+0x28c>)
 800caf4:	5c9a      	ldrb	r2, [r3, r2]
 800caf6:	7b7b      	ldrb	r3, [r7, #13]
 800caf8:	4619      	mov	r1, r3
 800cafa:	4b82      	ldr	r3, [pc, #520]	; (800cd04 <mix_sub_columns+0x28c>)
 800cafc:	5c5b      	ldrb	r3, [r3, r1]
 800cafe:	4053      	eors	r3, r2
 800cb00:	b2da      	uxtb	r2, r3
 800cb02:	7cbb      	ldrb	r3, [r7, #18]
 800cb04:	4619      	mov	r1, r3
 800cb06:	4b7d      	ldr	r3, [pc, #500]	; (800ccfc <mix_sub_columns+0x284>)
 800cb08:	5c5b      	ldrb	r3, [r3, r1]
 800cb0a:	4053      	eors	r3, r2
 800cb0c:	b2d9      	uxtb	r1, r3
 800cb0e:	7dfb      	ldrb	r3, [r7, #23]
 800cb10:	461a      	mov	r2, r3
 800cb12:	4b7b      	ldr	r3, [pc, #492]	; (800cd00 <mix_sub_columns+0x288>)
 800cb14:	5c9a      	ldrb	r2, [r3, r2]
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	3302      	adds	r3, #2
 800cb1a:	404a      	eors	r2, r1
 800cb1c:	b2d2      	uxtb	r2, r2
 800cb1e:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800cb20:	7a3b      	ldrb	r3, [r7, #8]
 800cb22:	461a      	mov	r2, r3
 800cb24:	4b76      	ldr	r3, [pc, #472]	; (800cd00 <mix_sub_columns+0x288>)
 800cb26:	5c9a      	ldrb	r2, [r3, r2]
 800cb28:	7b7b      	ldrb	r3, [r7, #13]
 800cb2a:	4619      	mov	r1, r3
 800cb2c:	4b75      	ldr	r3, [pc, #468]	; (800cd04 <mix_sub_columns+0x28c>)
 800cb2e:	5c5b      	ldrb	r3, [r3, r1]
 800cb30:	4053      	eors	r3, r2
 800cb32:	b2da      	uxtb	r2, r3
 800cb34:	7cbb      	ldrb	r3, [r7, #18]
 800cb36:	4619      	mov	r1, r3
 800cb38:	4b72      	ldr	r3, [pc, #456]	; (800cd04 <mix_sub_columns+0x28c>)
 800cb3a:	5c5b      	ldrb	r3, [r3, r1]
 800cb3c:	4053      	eors	r3, r2
 800cb3e:	b2d9      	uxtb	r1, r3
 800cb40:	7dfb      	ldrb	r3, [r7, #23]
 800cb42:	461a      	mov	r2, r3
 800cb44:	4b6d      	ldr	r3, [pc, #436]	; (800ccfc <mix_sub_columns+0x284>)
 800cb46:	5c9a      	ldrb	r2, [r3, r2]
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	3303      	adds	r3, #3
 800cb4c:	404a      	eors	r2, r1
 800cb4e:	b2d2      	uxtb	r2, r2
 800cb50:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800cb52:	7b3b      	ldrb	r3, [r7, #12]
 800cb54:	461a      	mov	r2, r3
 800cb56:	4b69      	ldr	r3, [pc, #420]	; (800ccfc <mix_sub_columns+0x284>)
 800cb58:	5c9a      	ldrb	r2, [r3, r2]
 800cb5a:	7c7b      	ldrb	r3, [r7, #17]
 800cb5c:	4619      	mov	r1, r3
 800cb5e:	4b68      	ldr	r3, [pc, #416]	; (800cd00 <mix_sub_columns+0x288>)
 800cb60:	5c5b      	ldrb	r3, [r3, r1]
 800cb62:	4053      	eors	r3, r2
 800cb64:	b2da      	uxtb	r2, r3
 800cb66:	7dbb      	ldrb	r3, [r7, #22]
 800cb68:	4619      	mov	r1, r3
 800cb6a:	4b66      	ldr	r3, [pc, #408]	; (800cd04 <mix_sub_columns+0x28c>)
 800cb6c:	5c5b      	ldrb	r3, [r3, r1]
 800cb6e:	4053      	eors	r3, r2
 800cb70:	b2d9      	uxtb	r1, r3
 800cb72:	7afb      	ldrb	r3, [r7, #11]
 800cb74:	461a      	mov	r2, r3
 800cb76:	4b63      	ldr	r3, [pc, #396]	; (800cd04 <mix_sub_columns+0x28c>)
 800cb78:	5c9a      	ldrb	r2, [r3, r2]
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	3304      	adds	r3, #4
 800cb7e:	404a      	eors	r2, r1
 800cb80:	b2d2      	uxtb	r2, r2
 800cb82:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800cb84:	7b3b      	ldrb	r3, [r7, #12]
 800cb86:	461a      	mov	r2, r3
 800cb88:	4b5e      	ldr	r3, [pc, #376]	; (800cd04 <mix_sub_columns+0x28c>)
 800cb8a:	5c9a      	ldrb	r2, [r3, r2]
 800cb8c:	7c7b      	ldrb	r3, [r7, #17]
 800cb8e:	4619      	mov	r1, r3
 800cb90:	4b5a      	ldr	r3, [pc, #360]	; (800ccfc <mix_sub_columns+0x284>)
 800cb92:	5c5b      	ldrb	r3, [r3, r1]
 800cb94:	4053      	eors	r3, r2
 800cb96:	b2da      	uxtb	r2, r3
 800cb98:	7dbb      	ldrb	r3, [r7, #22]
 800cb9a:	4619      	mov	r1, r3
 800cb9c:	4b58      	ldr	r3, [pc, #352]	; (800cd00 <mix_sub_columns+0x288>)
 800cb9e:	5c5b      	ldrb	r3, [r3, r1]
 800cba0:	4053      	eors	r3, r2
 800cba2:	b2d9      	uxtb	r1, r3
 800cba4:	7afb      	ldrb	r3, [r7, #11]
 800cba6:	461a      	mov	r2, r3
 800cba8:	4b56      	ldr	r3, [pc, #344]	; (800cd04 <mix_sub_columns+0x28c>)
 800cbaa:	5c9a      	ldrb	r2, [r3, r2]
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	3305      	adds	r3, #5
 800cbb0:	404a      	eors	r2, r1
 800cbb2:	b2d2      	uxtb	r2, r2
 800cbb4:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800cbb6:	7b3b      	ldrb	r3, [r7, #12]
 800cbb8:	461a      	mov	r2, r3
 800cbba:	4b52      	ldr	r3, [pc, #328]	; (800cd04 <mix_sub_columns+0x28c>)
 800cbbc:	5c9a      	ldrb	r2, [r3, r2]
 800cbbe:	7c7b      	ldrb	r3, [r7, #17]
 800cbc0:	4619      	mov	r1, r3
 800cbc2:	4b50      	ldr	r3, [pc, #320]	; (800cd04 <mix_sub_columns+0x28c>)
 800cbc4:	5c5b      	ldrb	r3, [r3, r1]
 800cbc6:	4053      	eors	r3, r2
 800cbc8:	b2da      	uxtb	r2, r3
 800cbca:	7dbb      	ldrb	r3, [r7, #22]
 800cbcc:	4619      	mov	r1, r3
 800cbce:	4b4b      	ldr	r3, [pc, #300]	; (800ccfc <mix_sub_columns+0x284>)
 800cbd0:	5c5b      	ldrb	r3, [r3, r1]
 800cbd2:	4053      	eors	r3, r2
 800cbd4:	b2d9      	uxtb	r1, r3
 800cbd6:	7afb      	ldrb	r3, [r7, #11]
 800cbd8:	461a      	mov	r2, r3
 800cbda:	4b49      	ldr	r3, [pc, #292]	; (800cd00 <mix_sub_columns+0x288>)
 800cbdc:	5c9a      	ldrb	r2, [r3, r2]
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	3306      	adds	r3, #6
 800cbe2:	404a      	eors	r2, r1
 800cbe4:	b2d2      	uxtb	r2, r2
 800cbe6:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800cbe8:	7b3b      	ldrb	r3, [r7, #12]
 800cbea:	461a      	mov	r2, r3
 800cbec:	4b44      	ldr	r3, [pc, #272]	; (800cd00 <mix_sub_columns+0x288>)
 800cbee:	5c9a      	ldrb	r2, [r3, r2]
 800cbf0:	7c7b      	ldrb	r3, [r7, #17]
 800cbf2:	4619      	mov	r1, r3
 800cbf4:	4b43      	ldr	r3, [pc, #268]	; (800cd04 <mix_sub_columns+0x28c>)
 800cbf6:	5c5b      	ldrb	r3, [r3, r1]
 800cbf8:	4053      	eors	r3, r2
 800cbfa:	b2da      	uxtb	r2, r3
 800cbfc:	7dbb      	ldrb	r3, [r7, #22]
 800cbfe:	4619      	mov	r1, r3
 800cc00:	4b40      	ldr	r3, [pc, #256]	; (800cd04 <mix_sub_columns+0x28c>)
 800cc02:	5c5b      	ldrb	r3, [r3, r1]
 800cc04:	4053      	eors	r3, r2
 800cc06:	b2d9      	uxtb	r1, r3
 800cc08:	7afb      	ldrb	r3, [r7, #11]
 800cc0a:	461a      	mov	r2, r3
 800cc0c:	4b3b      	ldr	r3, [pc, #236]	; (800ccfc <mix_sub_columns+0x284>)
 800cc0e:	5c9a      	ldrb	r2, [r3, r2]
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	3307      	adds	r3, #7
 800cc14:	404a      	eors	r2, r1
 800cc16:	b2d2      	uxtb	r2, r2
 800cc18:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800cc1a:	7c3b      	ldrb	r3, [r7, #16]
 800cc1c:	461a      	mov	r2, r3
 800cc1e:	4b37      	ldr	r3, [pc, #220]	; (800ccfc <mix_sub_columns+0x284>)
 800cc20:	5c9a      	ldrb	r2, [r3, r2]
 800cc22:	7d7b      	ldrb	r3, [r7, #21]
 800cc24:	4619      	mov	r1, r3
 800cc26:	4b36      	ldr	r3, [pc, #216]	; (800cd00 <mix_sub_columns+0x288>)
 800cc28:	5c5b      	ldrb	r3, [r3, r1]
 800cc2a:	4053      	eors	r3, r2
 800cc2c:	b2da      	uxtb	r2, r3
 800cc2e:	7abb      	ldrb	r3, [r7, #10]
 800cc30:	4619      	mov	r1, r3
 800cc32:	4b34      	ldr	r3, [pc, #208]	; (800cd04 <mix_sub_columns+0x28c>)
 800cc34:	5c5b      	ldrb	r3, [r3, r1]
 800cc36:	4053      	eors	r3, r2
 800cc38:	b2d9      	uxtb	r1, r3
 800cc3a:	7bfb      	ldrb	r3, [r7, #15]
 800cc3c:	461a      	mov	r2, r3
 800cc3e:	4b31      	ldr	r3, [pc, #196]	; (800cd04 <mix_sub_columns+0x28c>)
 800cc40:	5c9a      	ldrb	r2, [r3, r2]
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	3308      	adds	r3, #8
 800cc46:	404a      	eors	r2, r1
 800cc48:	b2d2      	uxtb	r2, r2
 800cc4a:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800cc4c:	7c3b      	ldrb	r3, [r7, #16]
 800cc4e:	461a      	mov	r2, r3
 800cc50:	4b2c      	ldr	r3, [pc, #176]	; (800cd04 <mix_sub_columns+0x28c>)
 800cc52:	5c9a      	ldrb	r2, [r3, r2]
 800cc54:	7d7b      	ldrb	r3, [r7, #21]
 800cc56:	4619      	mov	r1, r3
 800cc58:	4b28      	ldr	r3, [pc, #160]	; (800ccfc <mix_sub_columns+0x284>)
 800cc5a:	5c5b      	ldrb	r3, [r3, r1]
 800cc5c:	4053      	eors	r3, r2
 800cc5e:	b2da      	uxtb	r2, r3
 800cc60:	7abb      	ldrb	r3, [r7, #10]
 800cc62:	4619      	mov	r1, r3
 800cc64:	4b26      	ldr	r3, [pc, #152]	; (800cd00 <mix_sub_columns+0x288>)
 800cc66:	5c5b      	ldrb	r3, [r3, r1]
 800cc68:	4053      	eors	r3, r2
 800cc6a:	b2d9      	uxtb	r1, r3
 800cc6c:	7bfb      	ldrb	r3, [r7, #15]
 800cc6e:	461a      	mov	r2, r3
 800cc70:	4b24      	ldr	r3, [pc, #144]	; (800cd04 <mix_sub_columns+0x28c>)
 800cc72:	5c9a      	ldrb	r2, [r3, r2]
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	3309      	adds	r3, #9
 800cc78:	404a      	eors	r2, r1
 800cc7a:	b2d2      	uxtb	r2, r2
 800cc7c:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800cc7e:	7c3b      	ldrb	r3, [r7, #16]
 800cc80:	461a      	mov	r2, r3
 800cc82:	4b20      	ldr	r3, [pc, #128]	; (800cd04 <mix_sub_columns+0x28c>)
 800cc84:	5c9a      	ldrb	r2, [r3, r2]
 800cc86:	7d7b      	ldrb	r3, [r7, #21]
 800cc88:	4619      	mov	r1, r3
 800cc8a:	4b1e      	ldr	r3, [pc, #120]	; (800cd04 <mix_sub_columns+0x28c>)
 800cc8c:	5c5b      	ldrb	r3, [r3, r1]
 800cc8e:	4053      	eors	r3, r2
 800cc90:	b2da      	uxtb	r2, r3
 800cc92:	7abb      	ldrb	r3, [r7, #10]
 800cc94:	4619      	mov	r1, r3
 800cc96:	4b19      	ldr	r3, [pc, #100]	; (800ccfc <mix_sub_columns+0x284>)
 800cc98:	5c5b      	ldrb	r3, [r3, r1]
 800cc9a:	4053      	eors	r3, r2
 800cc9c:	b2d9      	uxtb	r1, r3
 800cc9e:	7bfb      	ldrb	r3, [r7, #15]
 800cca0:	461a      	mov	r2, r3
 800cca2:	4b17      	ldr	r3, [pc, #92]	; (800cd00 <mix_sub_columns+0x288>)
 800cca4:	5c9a      	ldrb	r2, [r3, r2]
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	330a      	adds	r3, #10
 800ccaa:	404a      	eors	r2, r1
 800ccac:	b2d2      	uxtb	r2, r2
 800ccae:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800ccb0:	7c3b      	ldrb	r3, [r7, #16]
 800ccb2:	461a      	mov	r2, r3
 800ccb4:	4b12      	ldr	r3, [pc, #72]	; (800cd00 <mix_sub_columns+0x288>)
 800ccb6:	5c9a      	ldrb	r2, [r3, r2]
 800ccb8:	7d7b      	ldrb	r3, [r7, #21]
 800ccba:	4619      	mov	r1, r3
 800ccbc:	4b11      	ldr	r3, [pc, #68]	; (800cd04 <mix_sub_columns+0x28c>)
 800ccbe:	5c5b      	ldrb	r3, [r3, r1]
 800ccc0:	4053      	eors	r3, r2
 800ccc2:	b2da      	uxtb	r2, r3
 800ccc4:	7abb      	ldrb	r3, [r7, #10]
 800ccc6:	4619      	mov	r1, r3
 800ccc8:	4b0e      	ldr	r3, [pc, #56]	; (800cd04 <mix_sub_columns+0x28c>)
 800ccca:	5c5b      	ldrb	r3, [r3, r1]
 800cccc:	4053      	eors	r3, r2
 800ccce:	b2d9      	uxtb	r1, r3
 800ccd0:	7bfb      	ldrb	r3, [r7, #15]
 800ccd2:	461a      	mov	r2, r3
 800ccd4:	4b09      	ldr	r3, [pc, #36]	; (800ccfc <mix_sub_columns+0x284>)
 800ccd6:	5c9a      	ldrb	r2, [r3, r2]
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	330b      	adds	r3, #11
 800ccdc:	404a      	eors	r2, r1
 800ccde:	b2d2      	uxtb	r2, r2
 800cce0:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800cce2:	7d3b      	ldrb	r3, [r7, #20]
 800cce4:	461a      	mov	r2, r3
 800cce6:	4b05      	ldr	r3, [pc, #20]	; (800ccfc <mix_sub_columns+0x284>)
 800cce8:	5c9a      	ldrb	r2, [r3, r2]
 800ccea:	7a7b      	ldrb	r3, [r7, #9]
 800ccec:	4619      	mov	r1, r3
 800ccee:	4b04      	ldr	r3, [pc, #16]	; (800cd00 <mix_sub_columns+0x288>)
 800ccf0:	5c5b      	ldrb	r3, [r3, r1]
 800ccf2:	4053      	eors	r3, r2
 800ccf4:	b2da      	uxtb	r2, r3
 800ccf6:	7bbb      	ldrb	r3, [r7, #14]
 800ccf8:	4619      	mov	r1, r3
 800ccfa:	e005      	b.n	800cd08 <mix_sub_columns+0x290>
 800ccfc:	0801f97c 	.word	0x0801f97c
 800cd00:	0801fa7c 	.word	0x0801fa7c
 800cd04:	0801f87c 	.word	0x0801f87c
 800cd08:	4b2d      	ldr	r3, [pc, #180]	; (800cdc0 <mix_sub_columns+0x348>)
 800cd0a:	5c5b      	ldrb	r3, [r3, r1]
 800cd0c:	4053      	eors	r3, r2
 800cd0e:	b2d9      	uxtb	r1, r3
 800cd10:	7cfb      	ldrb	r3, [r7, #19]
 800cd12:	461a      	mov	r2, r3
 800cd14:	4b2a      	ldr	r3, [pc, #168]	; (800cdc0 <mix_sub_columns+0x348>)
 800cd16:	5c9a      	ldrb	r2, [r3, r2]
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	330c      	adds	r3, #12
 800cd1c:	404a      	eors	r2, r1
 800cd1e:	b2d2      	uxtb	r2, r2
 800cd20:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800cd22:	7d3b      	ldrb	r3, [r7, #20]
 800cd24:	461a      	mov	r2, r3
 800cd26:	4b26      	ldr	r3, [pc, #152]	; (800cdc0 <mix_sub_columns+0x348>)
 800cd28:	5c9a      	ldrb	r2, [r3, r2]
 800cd2a:	7a7b      	ldrb	r3, [r7, #9]
 800cd2c:	4619      	mov	r1, r3
 800cd2e:	4b25      	ldr	r3, [pc, #148]	; (800cdc4 <mix_sub_columns+0x34c>)
 800cd30:	5c5b      	ldrb	r3, [r3, r1]
 800cd32:	4053      	eors	r3, r2
 800cd34:	b2da      	uxtb	r2, r3
 800cd36:	7bbb      	ldrb	r3, [r7, #14]
 800cd38:	4619      	mov	r1, r3
 800cd3a:	4b23      	ldr	r3, [pc, #140]	; (800cdc8 <mix_sub_columns+0x350>)
 800cd3c:	5c5b      	ldrb	r3, [r3, r1]
 800cd3e:	4053      	eors	r3, r2
 800cd40:	b2d9      	uxtb	r1, r3
 800cd42:	7cfb      	ldrb	r3, [r7, #19]
 800cd44:	461a      	mov	r2, r3
 800cd46:	4b1e      	ldr	r3, [pc, #120]	; (800cdc0 <mix_sub_columns+0x348>)
 800cd48:	5c9a      	ldrb	r2, [r3, r2]
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	330d      	adds	r3, #13
 800cd4e:	404a      	eors	r2, r1
 800cd50:	b2d2      	uxtb	r2, r2
 800cd52:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800cd54:	7d3b      	ldrb	r3, [r7, #20]
 800cd56:	461a      	mov	r2, r3
 800cd58:	4b19      	ldr	r3, [pc, #100]	; (800cdc0 <mix_sub_columns+0x348>)
 800cd5a:	5c9a      	ldrb	r2, [r3, r2]
 800cd5c:	7a7b      	ldrb	r3, [r7, #9]
 800cd5e:	4619      	mov	r1, r3
 800cd60:	4b17      	ldr	r3, [pc, #92]	; (800cdc0 <mix_sub_columns+0x348>)
 800cd62:	5c5b      	ldrb	r3, [r3, r1]
 800cd64:	4053      	eors	r3, r2
 800cd66:	b2da      	uxtb	r2, r3
 800cd68:	7bbb      	ldrb	r3, [r7, #14]
 800cd6a:	4619      	mov	r1, r3
 800cd6c:	4b15      	ldr	r3, [pc, #84]	; (800cdc4 <mix_sub_columns+0x34c>)
 800cd6e:	5c5b      	ldrb	r3, [r3, r1]
 800cd70:	4053      	eors	r3, r2
 800cd72:	b2d9      	uxtb	r1, r3
 800cd74:	7cfb      	ldrb	r3, [r7, #19]
 800cd76:	461a      	mov	r2, r3
 800cd78:	4b13      	ldr	r3, [pc, #76]	; (800cdc8 <mix_sub_columns+0x350>)
 800cd7a:	5c9a      	ldrb	r2, [r3, r2]
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	330e      	adds	r3, #14
 800cd80:	404a      	eors	r2, r1
 800cd82:	b2d2      	uxtb	r2, r2
 800cd84:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800cd86:	7d3b      	ldrb	r3, [r7, #20]
 800cd88:	461a      	mov	r2, r3
 800cd8a:	4b0f      	ldr	r3, [pc, #60]	; (800cdc8 <mix_sub_columns+0x350>)
 800cd8c:	5c9a      	ldrb	r2, [r3, r2]
 800cd8e:	7a7b      	ldrb	r3, [r7, #9]
 800cd90:	4619      	mov	r1, r3
 800cd92:	4b0b      	ldr	r3, [pc, #44]	; (800cdc0 <mix_sub_columns+0x348>)
 800cd94:	5c5b      	ldrb	r3, [r3, r1]
 800cd96:	4053      	eors	r3, r2
 800cd98:	b2da      	uxtb	r2, r3
 800cd9a:	7bbb      	ldrb	r3, [r7, #14]
 800cd9c:	4619      	mov	r1, r3
 800cd9e:	4b08      	ldr	r3, [pc, #32]	; (800cdc0 <mix_sub_columns+0x348>)
 800cda0:	5c5b      	ldrb	r3, [r3, r1]
 800cda2:	4053      	eors	r3, r2
 800cda4:	b2d9      	uxtb	r1, r3
 800cda6:	7cfb      	ldrb	r3, [r7, #19]
 800cda8:	461a      	mov	r2, r3
 800cdaa:	4b06      	ldr	r3, [pc, #24]	; (800cdc4 <mix_sub_columns+0x34c>)
 800cdac:	5c9a      	ldrb	r2, [r3, r2]
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	330f      	adds	r3, #15
 800cdb2:	404a      	eors	r2, r1
 800cdb4:	b2d2      	uxtb	r2, r2
 800cdb6:	701a      	strb	r2, [r3, #0]
  }
 800cdb8:	bf00      	nop
 800cdba:	3718      	adds	r7, #24
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	bd80      	pop	{r7, pc}
 800cdc0:	0801f87c 	.word	0x0801f87c
 800cdc4:	0801f97c 	.word	0x0801f97c
 800cdc8:	0801fa7c 	.word	0x0801fa7c

0800cdcc <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b086      	sub	sp, #24
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	60f8      	str	r0, [r7, #12]
 800cdd4:	460b      	mov	r3, r1
 800cdd6:	607a      	str	r2, [r7, #4]
 800cdd8:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800cdda:	7afb      	ldrb	r3, [r7, #11]
 800cddc:	3b10      	subs	r3, #16
 800cdde:	2b10      	cmp	r3, #16
 800cde0:	bf8c      	ite	hi
 800cde2:	2201      	movhi	r2, #1
 800cde4:	2200      	movls	r2, #0
 800cde6:	b2d2      	uxtb	r2, r2
 800cde8:	2a00      	cmp	r2, #0
 800cdea:	d10b      	bne.n	800ce04 <lorawan_aes_set_key+0x38>
 800cdec:	4a64      	ldr	r2, [pc, #400]	; (800cf80 <lorawan_aes_set_key+0x1b4>)
 800cdee:	fa22 f303 	lsr.w	r3, r2, r3
 800cdf2:	f003 0301 	and.w	r3, r3, #1
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	bf14      	ite	ne
 800cdfa:	2301      	movne	r3, #1
 800cdfc:	2300      	moveq	r3, #0
 800cdfe:	b2db      	uxtb	r3, r3
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d105      	bne.n	800ce10 <lorawan_aes_set_key+0x44>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	2200      	movs	r2, #0
 800ce08:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
        return ( uint8_t )-1;
 800ce0c:	23ff      	movs	r3, #255	; 0xff
 800ce0e:	e0b2      	b.n	800cf76 <lorawan_aes_set_key+0x1aa>
        break;
 800ce10:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	7afa      	ldrb	r2, [r7, #11]
 800ce16:	68f9      	ldr	r1, [r7, #12]
 800ce18:	4618      	mov	r0, r3
 800ce1a:	f7ff fbfc 	bl	800c616 <copy_block_nn>
    hi = (keylen + 28) << 2;
 800ce1e:	7afb      	ldrb	r3, [r7, #11]
 800ce20:	331c      	adds	r3, #28
 800ce22:	b2db      	uxtb	r3, r3
 800ce24:	009b      	lsls	r3, r3, #2
 800ce26:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800ce28:	7c7b      	ldrb	r3, [r7, #17]
 800ce2a:	091b      	lsrs	r3, r3, #4
 800ce2c:	b2db      	uxtb	r3, r3
 800ce2e:	3b01      	subs	r3, #1
 800ce30:	b2da      	uxtb	r2, r3
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800ce38:	7afb      	ldrb	r3, [r7, #11]
 800ce3a:	75fb      	strb	r3, [r7, #23]
 800ce3c:	2301      	movs	r3, #1
 800ce3e:	75bb      	strb	r3, [r7, #22]
 800ce40:	e093      	b.n	800cf6a <lorawan_aes_set_key+0x19e>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800ce42:	7dfb      	ldrb	r3, [r7, #23]
 800ce44:	3b04      	subs	r3, #4
 800ce46:	687a      	ldr	r2, [r7, #4]
 800ce48:	5cd3      	ldrb	r3, [r2, r3]
 800ce4a:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800ce4c:	7dfb      	ldrb	r3, [r7, #23]
 800ce4e:	3b03      	subs	r3, #3
 800ce50:	687a      	ldr	r2, [r7, #4]
 800ce52:	5cd3      	ldrb	r3, [r2, r3]
 800ce54:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800ce56:	7dfb      	ldrb	r3, [r7, #23]
 800ce58:	3b02      	subs	r3, #2
 800ce5a:	687a      	ldr	r2, [r7, #4]
 800ce5c:	5cd3      	ldrb	r3, [r2, r3]
 800ce5e:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800ce60:	7dfb      	ldrb	r3, [r7, #23]
 800ce62:	3b01      	subs	r3, #1
 800ce64:	687a      	ldr	r2, [r7, #4]
 800ce66:	5cd3      	ldrb	r3, [r2, r3]
 800ce68:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800ce6a:	7dfb      	ldrb	r3, [r7, #23]
 800ce6c:	7afa      	ldrb	r2, [r7, #11]
 800ce6e:	fbb3 f1f2 	udiv	r1, r3, r2
 800ce72:	fb01 f202 	mul.w	r2, r1, r2
 800ce76:	1a9b      	subs	r3, r3, r2
 800ce78:	b2db      	uxtb	r3, r3
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d127      	bne.n	800cece <lorawan_aes_set_key+0x102>
        {
            tt = t0;
 800ce7e:	7d7b      	ldrb	r3, [r7, #21]
 800ce80:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800ce82:	7d3b      	ldrb	r3, [r7, #20]
 800ce84:	4a3f      	ldr	r2, [pc, #252]	; (800cf84 <lorawan_aes_set_key+0x1b8>)
 800ce86:	5cd2      	ldrb	r2, [r2, r3]
 800ce88:	7dbb      	ldrb	r3, [r7, #22]
 800ce8a:	4053      	eors	r3, r2
 800ce8c:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800ce8e:	7cfb      	ldrb	r3, [r7, #19]
 800ce90:	4a3c      	ldr	r2, [pc, #240]	; (800cf84 <lorawan_aes_set_key+0x1b8>)
 800ce92:	5cd3      	ldrb	r3, [r2, r3]
 800ce94:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800ce96:	7cbb      	ldrb	r3, [r7, #18]
 800ce98:	4a3a      	ldr	r2, [pc, #232]	; (800cf84 <lorawan_aes_set_key+0x1b8>)
 800ce9a:	5cd3      	ldrb	r3, [r2, r3]
 800ce9c:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800ce9e:	7c3b      	ldrb	r3, [r7, #16]
 800cea0:	4a38      	ldr	r2, [pc, #224]	; (800cf84 <lorawan_aes_set_key+0x1b8>)
 800cea2:	5cd3      	ldrb	r3, [r2, r3]
 800cea4:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800cea6:	7dbb      	ldrb	r3, [r7, #22]
 800cea8:	005b      	lsls	r3, r3, #1
 800ceaa:	b25a      	sxtb	r2, r3
 800ceac:	7dbb      	ldrb	r3, [r7, #22]
 800ceae:	09db      	lsrs	r3, r3, #7
 800ceb0:	b2db      	uxtb	r3, r3
 800ceb2:	4619      	mov	r1, r3
 800ceb4:	0049      	lsls	r1, r1, #1
 800ceb6:	440b      	add	r3, r1
 800ceb8:	4619      	mov	r1, r3
 800ceba:	00c8      	lsls	r0, r1, #3
 800cebc:	4619      	mov	r1, r3
 800cebe:	4603      	mov	r3, r0
 800cec0:	440b      	add	r3, r1
 800cec2:	b2db      	uxtb	r3, r3
 800cec4:	b25b      	sxtb	r3, r3
 800cec6:	4053      	eors	r3, r2
 800cec8:	b25b      	sxtb	r3, r3
 800ceca:	75bb      	strb	r3, [r7, #22]
 800cecc:	e01c      	b.n	800cf08 <lorawan_aes_set_key+0x13c>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800cece:	7afb      	ldrb	r3, [r7, #11]
 800ced0:	2b18      	cmp	r3, #24
 800ced2:	d919      	bls.n	800cf08 <lorawan_aes_set_key+0x13c>
 800ced4:	7dfb      	ldrb	r3, [r7, #23]
 800ced6:	7afa      	ldrb	r2, [r7, #11]
 800ced8:	fbb3 f1f2 	udiv	r1, r3, r2
 800cedc:	fb01 f202 	mul.w	r2, r1, r2
 800cee0:	1a9b      	subs	r3, r3, r2
 800cee2:	b2db      	uxtb	r3, r3
 800cee4:	2b10      	cmp	r3, #16
 800cee6:	d10f      	bne.n	800cf08 <lorawan_aes_set_key+0x13c>
        {
            t0 = s_box(t0);
 800cee8:	7d7b      	ldrb	r3, [r7, #21]
 800ceea:	4a26      	ldr	r2, [pc, #152]	; (800cf84 <lorawan_aes_set_key+0x1b8>)
 800ceec:	5cd3      	ldrb	r3, [r2, r3]
 800ceee:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800cef0:	7d3b      	ldrb	r3, [r7, #20]
 800cef2:	4a24      	ldr	r2, [pc, #144]	; (800cf84 <lorawan_aes_set_key+0x1b8>)
 800cef4:	5cd3      	ldrb	r3, [r2, r3]
 800cef6:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800cef8:	7cfb      	ldrb	r3, [r7, #19]
 800cefa:	4a22      	ldr	r2, [pc, #136]	; (800cf84 <lorawan_aes_set_key+0x1b8>)
 800cefc:	5cd3      	ldrb	r3, [r2, r3]
 800cefe:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800cf00:	7cbb      	ldrb	r3, [r7, #18]
 800cf02:	4a20      	ldr	r2, [pc, #128]	; (800cf84 <lorawan_aes_set_key+0x1b8>)
 800cf04:	5cd3      	ldrb	r3, [r2, r3]
 800cf06:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800cf08:	7dfa      	ldrb	r2, [r7, #23]
 800cf0a:	7afb      	ldrb	r3, [r7, #11]
 800cf0c:	1ad3      	subs	r3, r2, r3
 800cf0e:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800cf10:	7c3b      	ldrb	r3, [r7, #16]
 800cf12:	687a      	ldr	r2, [r7, #4]
 800cf14:	5cd1      	ldrb	r1, [r2, r3]
 800cf16:	7dfb      	ldrb	r3, [r7, #23]
 800cf18:	7d7a      	ldrb	r2, [r7, #21]
 800cf1a:	404a      	eors	r2, r1
 800cf1c:	b2d1      	uxtb	r1, r2
 800cf1e:	687a      	ldr	r2, [r7, #4]
 800cf20:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800cf22:	7c3b      	ldrb	r3, [r7, #16]
 800cf24:	3301      	adds	r3, #1
 800cf26:	687a      	ldr	r2, [r7, #4]
 800cf28:	5cd1      	ldrb	r1, [r2, r3]
 800cf2a:	7dfb      	ldrb	r3, [r7, #23]
 800cf2c:	3301      	adds	r3, #1
 800cf2e:	7d3a      	ldrb	r2, [r7, #20]
 800cf30:	404a      	eors	r2, r1
 800cf32:	b2d1      	uxtb	r1, r2
 800cf34:	687a      	ldr	r2, [r7, #4]
 800cf36:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800cf38:	7c3b      	ldrb	r3, [r7, #16]
 800cf3a:	3302      	adds	r3, #2
 800cf3c:	687a      	ldr	r2, [r7, #4]
 800cf3e:	5cd1      	ldrb	r1, [r2, r3]
 800cf40:	7dfb      	ldrb	r3, [r7, #23]
 800cf42:	3302      	adds	r3, #2
 800cf44:	7cfa      	ldrb	r2, [r7, #19]
 800cf46:	404a      	eors	r2, r1
 800cf48:	b2d1      	uxtb	r1, r2
 800cf4a:	687a      	ldr	r2, [r7, #4]
 800cf4c:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800cf4e:	7c3b      	ldrb	r3, [r7, #16]
 800cf50:	3303      	adds	r3, #3
 800cf52:	687a      	ldr	r2, [r7, #4]
 800cf54:	5cd1      	ldrb	r1, [r2, r3]
 800cf56:	7dfb      	ldrb	r3, [r7, #23]
 800cf58:	3303      	adds	r3, #3
 800cf5a:	7cba      	ldrb	r2, [r7, #18]
 800cf5c:	404a      	eors	r2, r1
 800cf5e:	b2d1      	uxtb	r1, r2
 800cf60:	687a      	ldr	r2, [r7, #4]
 800cf62:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800cf64:	7dfb      	ldrb	r3, [r7, #23]
 800cf66:	3304      	adds	r3, #4
 800cf68:	75fb      	strb	r3, [r7, #23]
 800cf6a:	7dfa      	ldrb	r2, [r7, #23]
 800cf6c:	7c7b      	ldrb	r3, [r7, #17]
 800cf6e:	429a      	cmp	r2, r3
 800cf70:	f4ff af67 	bcc.w	800ce42 <lorawan_aes_set_key+0x76>
    }
    return 0;
 800cf74:	2300      	movs	r3, #0
}
 800cf76:	4618      	mov	r0, r3
 800cf78:	3718      	adds	r7, #24
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	bd80      	pop	{r7, pc}
 800cf7e:	bf00      	nop
 800cf80:	00010101 	.word	0x00010101
 800cf84:	0801f87c 	.word	0x0801f87c

0800cf88 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800cf88:	b580      	push	{r7, lr}
 800cf8a:	b08a      	sub	sp, #40	; 0x28
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	60f8      	str	r0, [r7, #12]
 800cf90:	60b9      	str	r1, [r7, #8]
 800cf92:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d038      	beq.n	800d010 <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800cf9e:	687a      	ldr	r2, [r7, #4]
 800cfa0:	f107 0314 	add.w	r3, r7, #20
 800cfa4:	68f9      	ldr	r1, [r7, #12]
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	f7ff fc07 	bl	800c7ba <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800cfac:	2301      	movs	r3, #1
 800cfae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cfb2:	e014      	b.n	800cfde <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800cfb4:	f107 0314 	add.w	r3, r7, #20
 800cfb8:	4618      	mov	r0, r3
 800cfba:	f7ff fd5d 	bl	800ca78 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800cfc4:	0112      	lsls	r2, r2, #4
 800cfc6:	441a      	add	r2, r3
 800cfc8:	f107 0314 	add.w	r3, r7, #20
 800cfcc:	4611      	mov	r1, r2
 800cfce:	4618      	mov	r0, r3
 800cfd0:	f7ff fcab 	bl	800c92a <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800cfd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cfd8:	3301      	adds	r3, #1
 800cfda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800cfe4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800cfe8:	429a      	cmp	r2, r3
 800cfea:	d3e3      	bcc.n	800cfb4 <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800cfec:	f107 0314 	add.w	r3, r7, #20
 800cff0:	4618      	mov	r0, r3
 800cff2:	f7ff fca7 	bl	800c944 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800cffc:	0112      	lsls	r2, r2, #4
 800cffe:	441a      	add	r2, r3
 800d000:	f107 0314 	add.w	r3, r7, #20
 800d004:	4619      	mov	r1, r3
 800d006:	68b8      	ldr	r0, [r7, #8]
 800d008:	f7ff fbd7 	bl	800c7ba <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800d00c:	2300      	movs	r3, #0
 800d00e:	e000      	b.n	800d012 <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800d010:	23ff      	movs	r3, #255	; 0xff
}
 800d012:	4618      	mov	r0, r3
 800d014:	3728      	adds	r7, #40	; 0x28
 800d016:	46bd      	mov	sp, r7
 800d018:	bd80      	pop	{r7, pc}
	...

0800d01c <PrintKey>:
static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac );

/* Private functions ---------------------------------------------------------*/
static void PrintKey( KeyIdentifier_t keyID )
{
 800d01c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d01e:	b0a1      	sub	sp, #132	; 0x84
 800d020:	af12      	add	r7, sp, #72	; 0x48
 800d022:	4603      	mov	r3, r0
 800d024:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#if (KEY_EXTRACTABLE == 1)
#if (LORAWAN_KMS == 0)
    Key_t *keyItem;
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, &keyItem ) )
 800d028:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800d02c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d030:	4611      	mov	r1, r2
 800d032:	4618      	mov	r0, r3
 800d034:	f000 fa12 	bl	800d45c <SecureElementGetKeyByID>
 800d038:	4603      	mov	r3, r0
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d174      	bne.n	800d128 <PrintKey+0x10c>
#else
    uint8_t extractable_key[SE_KEY_SIZE] = {0};
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, ( uint8_t * )extractable_key ) )
#endif /* LORAWAN_KMS */
    {
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800d03e:	2300      	movs	r3, #0
 800d040:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800d044:	e06c      	b.n	800d120 <PrintKey+0x104>
        {
            if( KeyLabel[i].keyID == keyID )
 800d046:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800d04a:	4939      	ldr	r1, [pc, #228]	; (800d130 <PrintKey+0x114>)
 800d04c:	4613      	mov	r3, r2
 800d04e:	005b      	lsls	r3, r3, #1
 800d050:	4413      	add	r3, r2
 800d052:	009b      	lsls	r3, r3, #2
 800d054:	440b      	add	r3, r1
 800d056:	781b      	ldrb	r3, [r3, #0]
 800d058:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800d05c:	429a      	cmp	r2, r3
 800d05e:	d15a      	bne.n	800d116 <PrintKey+0xfa>
            {
#if (LORAWAN_KMS == 0)
                MW_LOG( TS_OFF, VLEVEL_M,
 800d060:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800d064:	4932      	ldr	r1, [pc, #200]	; (800d130 <PrintKey+0x114>)
 800d066:	4613      	mov	r3, r2
 800d068:	005b      	lsls	r3, r3, #1
 800d06a:	4413      	add	r3, r2
 800d06c:	009b      	lsls	r3, r3, #2
 800d06e:	440b      	add	r3, r1
 800d070:	3308      	adds	r3, #8
 800d072:	6819      	ldr	r1, [r3, #0]
 800d074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d076:	785b      	ldrb	r3, [r3, #1]
 800d078:	461d      	mov	r5, r3
 800d07a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d07c:	789b      	ldrb	r3, [r3, #2]
 800d07e:	461e      	mov	r6, r3
 800d080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d082:	78db      	ldrb	r3, [r3, #3]
 800d084:	62bb      	str	r3, [r7, #40]	; 0x28
 800d086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d088:	791b      	ldrb	r3, [r3, #4]
 800d08a:	627b      	str	r3, [r7, #36]	; 0x24
 800d08c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d08e:	795b      	ldrb	r3, [r3, #5]
 800d090:	623b      	str	r3, [r7, #32]
 800d092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d094:	799b      	ldrb	r3, [r3, #6]
 800d096:	61fb      	str	r3, [r7, #28]
 800d098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d09a:	79db      	ldrb	r3, [r3, #7]
 800d09c:	61bb      	str	r3, [r7, #24]
 800d09e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0a0:	7a1b      	ldrb	r3, [r3, #8]
 800d0a2:	617b      	str	r3, [r7, #20]
 800d0a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0a6:	7a5b      	ldrb	r3, [r3, #9]
 800d0a8:	613b      	str	r3, [r7, #16]
 800d0aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0ac:	7a9b      	ldrb	r3, [r3, #10]
 800d0ae:	60fb      	str	r3, [r7, #12]
 800d0b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0b2:	7adb      	ldrb	r3, [r3, #11]
 800d0b4:	60bb      	str	r3, [r7, #8]
 800d0b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0b8:	7b1b      	ldrb	r3, [r3, #12]
 800d0ba:	607b      	str	r3, [r7, #4]
 800d0bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0be:	7b5b      	ldrb	r3, [r3, #13]
 800d0c0:	461c      	mov	r4, r3
 800d0c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0c4:	7b9b      	ldrb	r3, [r3, #14]
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0ca:	7bdb      	ldrb	r3, [r3, #15]
 800d0cc:	461a      	mov	r2, r3
 800d0ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0d0:	7c1b      	ldrb	r3, [r3, #16]
 800d0d2:	9310      	str	r3, [sp, #64]	; 0x40
 800d0d4:	920f      	str	r2, [sp, #60]	; 0x3c
 800d0d6:	900e      	str	r0, [sp, #56]	; 0x38
 800d0d8:	940d      	str	r4, [sp, #52]	; 0x34
 800d0da:	687a      	ldr	r2, [r7, #4]
 800d0dc:	920c      	str	r2, [sp, #48]	; 0x30
 800d0de:	68ba      	ldr	r2, [r7, #8]
 800d0e0:	920b      	str	r2, [sp, #44]	; 0x2c
 800d0e2:	68fa      	ldr	r2, [r7, #12]
 800d0e4:	920a      	str	r2, [sp, #40]	; 0x28
 800d0e6:	693a      	ldr	r2, [r7, #16]
 800d0e8:	9209      	str	r2, [sp, #36]	; 0x24
 800d0ea:	697a      	ldr	r2, [r7, #20]
 800d0ec:	9208      	str	r2, [sp, #32]
 800d0ee:	69ba      	ldr	r2, [r7, #24]
 800d0f0:	9207      	str	r2, [sp, #28]
 800d0f2:	69fa      	ldr	r2, [r7, #28]
 800d0f4:	9206      	str	r2, [sp, #24]
 800d0f6:	6a3a      	ldr	r2, [r7, #32]
 800d0f8:	9205      	str	r2, [sp, #20]
 800d0fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d0fc:	9204      	str	r2, [sp, #16]
 800d0fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d100:	9303      	str	r3, [sp, #12]
 800d102:	9602      	str	r6, [sp, #8]
 800d104:	9501      	str	r5, [sp, #4]
 800d106:	9100      	str	r1, [sp, #0]
 800d108:	4b0a      	ldr	r3, [pc, #40]	; (800d134 <PrintKey+0x118>)
 800d10a:	2200      	movs	r2, #0
 800d10c:	2100      	movs	r1, #0
 800d10e:	2002      	movs	r0, #2
 800d110:	f011 fb72 	bl	801e7f8 <UTIL_ADV_TRACE_COND_FSend>
 800d114:	e008      	b.n	800d128 <PrintKey+0x10c>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800d116:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d11a:	3301      	adds	r3, #1
 800d11c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800d120:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d124:	2b0a      	cmp	r3, #10
 800d126:	d98e      	bls.n	800d046 <PrintKey+0x2a>
                return;
            }
        }
    }
#endif /* KEY_EXTRACTABLE */
}
 800d128:	373c      	adds	r7, #60	; 0x3c
 800d12a:	46bd      	mov	sp, r7
 800d12c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d12e:	bf00      	nop
 800d130:	0801fb7c 	.word	0x0801fb7c
 800d134:	0801f3e8 	.word	0x0801f3e8

0800d138 <PrintIds>:

static void PrintIds( ActivationType_t mode )
{
 800d138:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d13a:	b091      	sub	sp, #68	; 0x44
 800d13c:	af08      	add	r7, sp, #32
 800d13e:	4603      	mov	r3, r0
 800d140:	71fb      	strb	r3, [r7, #7]
    uint8_t joinEui[SE_EUI_SIZE];
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddr = 0;
 800d142:	2300      	movs	r3, #0
 800d144:	60fb      	str	r3, [r7, #12]

    SecureElementGetDevEui( devEui );
 800d146:	f107 0310 	add.w	r3, r7, #16
 800d14a:	4618      	mov	r0, r3
 800d14c:	f000 fbda 	bl	800d904 <SecureElementGetDevEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( devEui ) );
 800d150:	7c3b      	ldrb	r3, [r7, #16]
 800d152:	7c7a      	ldrb	r2, [r7, #17]
 800d154:	7cb9      	ldrb	r1, [r7, #18]
 800d156:	7cf8      	ldrb	r0, [r7, #19]
 800d158:	7d3c      	ldrb	r4, [r7, #20]
 800d15a:	7d7d      	ldrb	r5, [r7, #21]
 800d15c:	7dbe      	ldrb	r6, [r7, #22]
 800d15e:	f897 c017 	ldrb.w	ip, [r7, #23]
 800d162:	f8cd c01c 	str.w	ip, [sp, #28]
 800d166:	9606      	str	r6, [sp, #24]
 800d168:	9505      	str	r5, [sp, #20]
 800d16a:	9404      	str	r4, [sp, #16]
 800d16c:	9003      	str	r0, [sp, #12]
 800d16e:	9102      	str	r1, [sp, #8]
 800d170:	9201      	str	r2, [sp, #4]
 800d172:	9300      	str	r3, [sp, #0]
 800d174:	4b24      	ldr	r3, [pc, #144]	; (800d208 <PrintIds+0xd0>)
 800d176:	2200      	movs	r2, #0
 800d178:	2100      	movs	r1, #0
 800d17a:	2002      	movs	r0, #2
 800d17c:	f011 fb3c 	bl	801e7f8 <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetJoinEui( joinEui );
 800d180:	f107 0318 	add.w	r3, r7, #24
 800d184:	4618      	mov	r0, r3
 800d186:	f000 fbed 	bl	800d964 <SecureElementGetJoinEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### AppEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( joinEui ) );
 800d18a:	7e3b      	ldrb	r3, [r7, #24]
 800d18c:	7e7a      	ldrb	r2, [r7, #25]
 800d18e:	7eb9      	ldrb	r1, [r7, #26]
 800d190:	7ef8      	ldrb	r0, [r7, #27]
 800d192:	7f3c      	ldrb	r4, [r7, #28]
 800d194:	7f7d      	ldrb	r5, [r7, #29]
 800d196:	7fbe      	ldrb	r6, [r7, #30]
 800d198:	f897 c01f 	ldrb.w	ip, [r7, #31]
 800d19c:	f8cd c01c 	str.w	ip, [sp, #28]
 800d1a0:	9606      	str	r6, [sp, #24]
 800d1a2:	9505      	str	r5, [sp, #20]
 800d1a4:	9404      	str	r4, [sp, #16]
 800d1a6:	9003      	str	r0, [sp, #12]
 800d1a8:	9102      	str	r1, [sp, #8]
 800d1aa:	9201      	str	r2, [sp, #4]
 800d1ac:	9300      	str	r3, [sp, #0]
 800d1ae:	4b17      	ldr	r3, [pc, #92]	; (800d20c <PrintIds+0xd4>)
 800d1b0:	2200      	movs	r2, #0
 800d1b2:	2100      	movs	r1, #0
 800d1b4:	2002      	movs	r0, #2
 800d1b6:	f011 fb1f 	bl	801e7f8 <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetDevAddr( mode, &devAddr );
 800d1ba:	f107 020c 	add.w	r2, r7, #12
 800d1be:	79fb      	ldrb	r3, [r7, #7]
 800d1c0:	4611      	mov	r1, r2
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	f000 fc00 	bl	800d9c8 <SecureElementGetDevAddr>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 800d1c8:	f107 030c 	add.w	r3, r7, #12
 800d1cc:	3303      	adds	r3, #3
 800d1ce:	781b      	ldrb	r3, [r3, #0]
 800d1d0:	461a      	mov	r2, r3
 800d1d2:	f107 030c 	add.w	r3, r7, #12
 800d1d6:	3302      	adds	r3, #2
 800d1d8:	781b      	ldrb	r3, [r3, #0]
 800d1da:	4619      	mov	r1, r3
 800d1dc:	f107 030c 	add.w	r3, r7, #12
 800d1e0:	3301      	adds	r3, #1
 800d1e2:	781b      	ldrb	r3, [r3, #0]
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	f107 030c 	add.w	r3, r7, #12
 800d1ea:	781b      	ldrb	r3, [r3, #0]
 800d1ec:	9303      	str	r3, [sp, #12]
 800d1ee:	9002      	str	r0, [sp, #8]
 800d1f0:	9101      	str	r1, [sp, #4]
 800d1f2:	9200      	str	r2, [sp, #0]
 800d1f4:	4b06      	ldr	r3, [pc, #24]	; (800d210 <PrintIds+0xd8>)
 800d1f6:	2200      	movs	r2, #0
 800d1f8:	2100      	movs	r1, #0
 800d1fa:	2002      	movs	r0, #2
 800d1fc:	f011 fafc 	bl	801e7f8 <UTIL_ADV_TRACE_COND_FSend>
            ( unsigned )( ( unsigned char * )( &devAddr ) )[3],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[2],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[1],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[0] );
}
 800d200:	bf00      	nop
 800d202:	3724      	adds	r7, #36	; 0x24
 800d204:	46bd      	mov	sp, r7
 800d206:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d208:	0801f444 	.word	0x0801f444
 800d20c:	0801f484 	.word	0x0801f484
 800d210:	0801f4c4 	.word	0x0801f4c4

0800d214 <GetKeyByID>:

#if (LORAWAN_KMS == 0)
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800d214:	b480      	push	{r7}
 800d216:	b085      	sub	sp, #20
 800d218:	af00      	add	r7, sp, #0
 800d21a:	4603      	mov	r3, r0
 800d21c:	6039      	str	r1, [r7, #0]
 800d21e:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800d220:	2300      	movs	r3, #0
 800d222:	73fb      	strb	r3, [r7, #15]
 800d224:	e01a      	b.n	800d25c <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800d226:	4b12      	ldr	r3, [pc, #72]	; (800d270 <GetKeyByID+0x5c>)
 800d228:	6819      	ldr	r1, [r3, #0]
 800d22a:	7bfa      	ldrb	r2, [r7, #15]
 800d22c:	4613      	mov	r3, r2
 800d22e:	011b      	lsls	r3, r3, #4
 800d230:	4413      	add	r3, r2
 800d232:	440b      	add	r3, r1
 800d234:	3318      	adds	r3, #24
 800d236:	781b      	ldrb	r3, [r3, #0]
 800d238:	79fa      	ldrb	r2, [r7, #7]
 800d23a:	429a      	cmp	r2, r3
 800d23c:	d10b      	bne.n	800d256 <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800d23e:	4b0c      	ldr	r3, [pc, #48]	; (800d270 <GetKeyByID+0x5c>)
 800d240:	6819      	ldr	r1, [r3, #0]
 800d242:	7bfa      	ldrb	r2, [r7, #15]
 800d244:	4613      	mov	r3, r2
 800d246:	011b      	lsls	r3, r3, #4
 800d248:	4413      	add	r3, r2
 800d24a:	3318      	adds	r3, #24
 800d24c:	18ca      	adds	r2, r1, r3
 800d24e:	683b      	ldr	r3, [r7, #0]
 800d250:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800d252:	2300      	movs	r3, #0
 800d254:	e006      	b.n	800d264 <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800d256:	7bfb      	ldrb	r3, [r7, #15]
 800d258:	3301      	adds	r3, #1
 800d25a:	73fb      	strb	r3, [r7, #15]
 800d25c:	7bfb      	ldrb	r3, [r7, #15]
 800d25e:	2b0a      	cmp	r3, #10
 800d260:	d9e1      	bls.n	800d226 <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800d262:	2303      	movs	r3, #3
}
 800d264:	4618      	mov	r0, r3
 800d266:	3714      	adds	r7, #20
 800d268:	46bd      	mov	sp, r7
 800d26a:	bc80      	pop	{r7}
 800d26c:	4770      	bx	lr
 800d26e:	bf00      	nop
 800d270:	20000508 	.word	0x20000508

0800d274 <ComputeCmac>:
}
#endif /* LORAWAN_KMS */

static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac )
{
 800d274:	b590      	push	{r4, r7, lr}
 800d276:	b0d1      	sub	sp, #324	; 0x144
 800d278:	af00      	add	r7, sp, #0
 800d27a:	f507 74a0 	add.w	r4, r7, #320	; 0x140
 800d27e:	f5a4 749a 	sub.w	r4, r4, #308	; 0x134
 800d282:	6020      	str	r0, [r4, #0]
 800d284:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 800d288:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800d28c:	6001      	str	r1, [r0, #0]
 800d28e:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 800d292:	f5a1 719e 	sub.w	r1, r1, #316	; 0x13c
 800d296:	600a      	str	r2, [r1, #0]
 800d298:	461a      	mov	r2, r3
 800d29a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800d29e:	f2a3 133d 	subw	r3, r3, #317	; 0x13d
 800d2a2:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800d2a4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800d2a8:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d003      	beq.n	800d2ba <ComputeCmac+0x46>
 800d2b2:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d101      	bne.n	800d2be <ComputeCmac+0x4a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d2ba:	2302      	movs	r3, #2
 800d2bc:	e05d      	b.n	800d37a <ComputeCmac+0x106>

#if (LORAWAN_KMS == 0)
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800d2be:	f107 0314 	add.w	r3, r7, #20
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	f7fe ff02 	bl	800c0cc <AES_CMAC_Init>

    Key_t                *keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800d2c8:	f107 0210 	add.w	r2, r7, #16
 800d2cc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800d2d0:	f2a3 133d 	subw	r3, r3, #317	; 0x13d
 800d2d4:	781b      	ldrb	r3, [r3, #0]
 800d2d6:	4611      	mov	r1, r2
 800d2d8:	4618      	mov	r0, r3
 800d2da:	f7ff ff9b 	bl	800d214 <GetKeyByID>
 800d2de:	4603      	mov	r3, r0
 800d2e0:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800d2e4:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d144      	bne.n	800d376 <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800d2ec:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800d2f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	1c5a      	adds	r2, r3, #1
 800d2f8:	f107 0314 	add.w	r3, r7, #20
 800d2fc:	4611      	mov	r1, r2
 800d2fe:	4618      	mov	r0, r3
 800d300:	f7fe fefd 	bl	800c0fe <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800d304:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800d308:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d009      	beq.n	800d326 <ComputeCmac+0xb2>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, MIC_BLOCK_BX_SIZE );
 800d312:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800d316:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800d31a:	f107 0014 	add.w	r0, r7, #20
 800d31e:	2210      	movs	r2, #16
 800d320:	6819      	ldr	r1, [r3, #0]
 800d322:	f7fe fefb 	bl	800c11c <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800d326:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800d32a:	f5a3 729e 	sub.w	r2, r3, #316	; 0x13c
 800d32e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800d332:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800d336:	f107 0014 	add.w	r0, r7, #20
 800d33a:	6812      	ldr	r2, [r2, #0]
 800d33c:	6819      	ldr	r1, [r3, #0]
 800d33e:	f7fe feed 	bl	800c11c <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800d342:	f107 0214 	add.w	r2, r7, #20
 800d346:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800d34a:	4611      	mov	r1, r2
 800d34c:	4618      	mov	r0, r3
 800d34e:	f7fe ffa7 	bl	800c2a0 <AES_CMAC_Final>

        /* Bring into the required format */
        *cmac = GET_UINT32_LE( Cmac, 0 );
 800d352:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 800d356:	461a      	mov	r2, r3
 800d358:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800d35c:	021b      	lsls	r3, r3, #8
 800d35e:	431a      	orrs	r2, r3
 800d360:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 800d364:	041b      	lsls	r3, r3, #16
 800d366:	431a      	orrs	r2, r3
 800d368:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800d36c:	061b      	lsls	r3, r3, #24
 800d36e:	431a      	orrs	r2, r3
 800d370:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800d374:	601a      	str	r2, [r3, #0]
    if( rv != CKR_OK )
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800d376:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
}
 800d37a:	4618      	mov	r0, r3
 800d37c:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800d380:	46bd      	mov	sp, r7
 800d382:	bd90      	pop	{r4, r7, pc}

0800d384 <SecureElementInit>:
/* Exported functions ---------------------------------------------------------*/
/*
 * API functions
 */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm )
{
 800d384:	b580      	push	{r7, lr}
 800d386:	b082      	sub	sp, #8
 800d388:	af00      	add	r7, sp, #0
 800d38a:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d101      	bne.n	800d396 <SecureElementInit+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d392:	2302      	movs	r3, #2
 800d394:	e00a      	b.n	800d3ac <SecureElementInit+0x28>
    }

    /* Initialize nvm pointer */
    SeNvm = nvm;
 800d396:	4a07      	ldr	r2, [pc, #28]	; (800d3b4 <SecureElementInit+0x30>)
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	6013      	str	r3, [r2, #0]

#if (LORAWAN_KMS == 0)
    /* Initialize data */
    memcpy1( ( uint8_t * )SeNvm, ( uint8_t * )&seNvmInit, sizeof( seNvmInit ) );
 800d39c:	4b05      	ldr	r3, [pc, #20]	; (800d3b4 <SecureElementInit+0x30>)
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	22d8      	movs	r2, #216	; 0xd8
 800d3a2:	4905      	ldr	r1, [pc, #20]	; (800d3b8 <SecureElementInit+0x34>)
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	f00c fe82 	bl	801a0ae <memcpy1>
        ( void )C_CloseSession( session );
    }

#endif /* LORAWAN_KMS */

    return SECURE_ELEMENT_SUCCESS;
 800d3aa:	2300      	movs	r3, #0
}
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	3708      	adds	r7, #8
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	bd80      	pop	{r7, pc}
 800d3b4:	20000508 	.word	0x20000508
 800d3b8:	0801fe1c 	.word	0x0801fe1c

0800d3bc <SecureElementInitMcuID>:

SecureElementStatus_t SecureElementInitMcuID( SecureElementGetUniqueId_t seGetUniqueId,
                                              SecureElementGetDevAddr_t seGetDevAddr )
{
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b086      	sub	sp, #24
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	6078      	str	r0, [r7, #4]
 800d3c4:	6039      	str	r1, [r7, #0]
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddrABP = 0;
 800d3c6:	2300      	movs	r3, #0
 800d3c8:	60bb      	str	r3, [r7, #8]

    SecureElementGetDevEui( devEui );
 800d3ca:	f107 030c 	add.w	r3, r7, #12
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	f000 fa98 	bl	800d904 <SecureElementGetDevEui>
    SecureElementGetDevAddr( ACTIVATION_TYPE_ABP, &devAddrABP );
 800d3d4:	f107 0308 	add.w	r3, r7, #8
 800d3d8:	4619      	mov	r1, r3
 800d3da:	2001      	movs	r0, #1
 800d3dc:	f000 faf4 	bl	800d9c8 <SecureElementGetDevAddr>

    if( seGetUniqueId != NULL )
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d024      	beq.n	800d430 <SecureElementInitMcuID+0x74>
    {
        bool id_init = false;
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	75fb      	strb	r3, [r7, #23]
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800d3ea:	2300      	movs	r3, #0
 800d3ec:	75bb      	strb	r3, [r7, #22]
 800d3ee:	e00c      	b.n	800d40a <SecureElementInitMcuID+0x4e>
        {
            if( devEui[index] != 0 )
 800d3f0:	7dbb      	ldrb	r3, [r7, #22]
 800d3f2:	3318      	adds	r3, #24
 800d3f4:	443b      	add	r3, r7
 800d3f6:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d002      	beq.n	800d404 <SecureElementInitMcuID+0x48>
            {
                id_init = true;
 800d3fe:	2301      	movs	r3, #1
 800d400:	75fb      	strb	r3, [r7, #23]
                break;
 800d402:	e005      	b.n	800d410 <SecureElementInitMcuID+0x54>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800d404:	7dbb      	ldrb	r3, [r7, #22]
 800d406:	3301      	adds	r3, #1
 800d408:	75bb      	strb	r3, [r7, #22]
 800d40a:	7dbb      	ldrb	r3, [r7, #22]
 800d40c:	2b07      	cmp	r3, #7
 800d40e:	d9ef      	bls.n	800d3f0 <SecureElementInitMcuID+0x34>
            }
        }
        if( id_init == false )
 800d410:	7dfb      	ldrb	r3, [r7, #23]
 800d412:	f083 0301 	eor.w	r3, r3, #1
 800d416:	b2db      	uxtb	r3, r3
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d009      	beq.n	800d430 <SecureElementInitMcuID+0x74>
        {
            /* Get a DevEUI from MCU unique ID */
            seGetUniqueId( devEui );
 800d41c:	f107 020c 	add.w	r2, r7, #12
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	4610      	mov	r0, r2
 800d424:	4798      	blx	r3
            SecureElementSetDevEui( devEui );
 800d426:	f107 030c 	add.w	r3, r7, #12
 800d42a:	4618      	mov	r0, r3
 800d42c:	f000 fa52 	bl	800d8d4 <SecureElementSetDevEui>
        }
    }

    if( ( seGetDevAddr != NULL ) && ( devAddrABP == 0 ) )
 800d430:	683b      	ldr	r3, [r7, #0]
 800d432:	2b00      	cmp	r3, #0
 800d434:	d00c      	beq.n	800d450 <SecureElementInitMcuID+0x94>
 800d436:	68bb      	ldr	r3, [r7, #8]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d109      	bne.n	800d450 <SecureElementInitMcuID+0x94>
    {
        /* callback to dynamic DevAddr generation */
        seGetDevAddr( &devAddrABP );
 800d43c:	f107 0208 	add.w	r2, r7, #8
 800d440:	683b      	ldr	r3, [r7, #0]
 800d442:	4610      	mov	r0, r2
 800d444:	4798      	blx	r3
        SecureElementSetDevAddr( ACTIVATION_TYPE_ABP, devAddrABP );
 800d446:	68bb      	ldr	r3, [r7, #8]
 800d448:	4619      	mov	r1, r3
 800d44a:	2001      	movs	r0, #1
 800d44c:	f000 faa2 	bl	800d994 <SecureElementSetDevAddr>
    }

    return SECURE_ELEMENT_SUCCESS;
 800d450:	2300      	movs	r3, #0
}
 800d452:	4618      	mov	r0, r3
 800d454:	3718      	adds	r7, #24
 800d456:	46bd      	mov	sp, r7
 800d458:	bd80      	pop	{r7, pc}
	...

0800d45c <SecureElementGetKeyByID>:

#if (LORAWAN_KMS == 0)
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800d45c:	b480      	push	{r7}
 800d45e:	b085      	sub	sp, #20
 800d460:	af00      	add	r7, sp, #0
 800d462:	4603      	mov	r3, r0
 800d464:	6039      	str	r1, [r7, #0]
 800d466:	71fb      	strb	r3, [r7, #7]
#if (KEY_EXTRACTABLE == 1)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800d468:	2300      	movs	r3, #0
 800d46a:	73fb      	strb	r3, [r7, #15]
 800d46c:	e01a      	b.n	800d4a4 <SecureElementGetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800d46e:	4b12      	ldr	r3, [pc, #72]	; (800d4b8 <SecureElementGetKeyByID+0x5c>)
 800d470:	6819      	ldr	r1, [r3, #0]
 800d472:	7bfa      	ldrb	r2, [r7, #15]
 800d474:	4613      	mov	r3, r2
 800d476:	011b      	lsls	r3, r3, #4
 800d478:	4413      	add	r3, r2
 800d47a:	440b      	add	r3, r1
 800d47c:	3318      	adds	r3, #24
 800d47e:	781b      	ldrb	r3, [r3, #0]
 800d480:	79fa      	ldrb	r2, [r7, #7]
 800d482:	429a      	cmp	r2, r3
 800d484:	d10b      	bne.n	800d49e <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800d486:	4b0c      	ldr	r3, [pc, #48]	; (800d4b8 <SecureElementGetKeyByID+0x5c>)
 800d488:	6819      	ldr	r1, [r3, #0]
 800d48a:	7bfa      	ldrb	r2, [r7, #15]
 800d48c:	4613      	mov	r3, r2
 800d48e:	011b      	lsls	r3, r3, #4
 800d490:	4413      	add	r3, r2
 800d492:	3318      	adds	r3, #24
 800d494:	18ca      	adds	r2, r1, r3
 800d496:	683b      	ldr	r3, [r7, #0]
 800d498:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800d49a:	2300      	movs	r3, #0
 800d49c:	e006      	b.n	800d4ac <SecureElementGetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800d49e:	7bfb      	ldrb	r3, [r7, #15]
 800d4a0:	3301      	adds	r3, #1
 800d4a2:	73fb      	strb	r3, [r7, #15]
 800d4a4:	7bfb      	ldrb	r3, [r7, #15]
 800d4a6:	2b0a      	cmp	r3, #10
 800d4a8:	d9e1      	bls.n	800d46e <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800d4aa:	2303      	movs	r3, #3
}
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	3714      	adds	r7, #20
 800d4b0:	46bd      	mov	sp, r7
 800d4b2:	bc80      	pop	{r7}
 800d4b4:	4770      	bx	lr
 800d4b6:	bf00      	nop
 800d4b8:	20000508 	.word	0x20000508

0800d4bc <SecureElementPrintKeys>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAWAN_KMS */

SecureElementStatus_t SecureElementPrintKeys( void )
{
 800d4bc:	b580      	push	{r7, lr}
 800d4be:	af00      	add	r7, sp, #0
    PrintKey( APP_KEY );
 800d4c0:	2000      	movs	r0, #0
 800d4c2:	f7ff fdab 	bl	800d01c <PrintKey>
    PrintKey( NWK_KEY );
 800d4c6:	2001      	movs	r0, #1
 800d4c8:	f7ff fda8 	bl	800d01c <PrintKey>
    PrintKey( APP_S_KEY );
 800d4cc:	2009      	movs	r0, #9
 800d4ce:	f7ff fda5 	bl	800d01c <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 800d4d2:	2008      	movs	r0, #8
 800d4d4:	f7ff fda2 	bl	800d01c <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintIds( ACTIVATION_TYPE_NONE );
 800d4d8:	2000      	movs	r0, #0
 800d4da:	f7ff fe2d 	bl	800d138 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 800d4de:	2300      	movs	r3, #0
}
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	bd80      	pop	{r7, pc}

0800d4e4 <SecureElementPrintSessionKeys>:

SecureElementStatus_t SecureElementPrintSessionKeys( ActivationType_t mode )
{
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	b082      	sub	sp, #8
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	4603      	mov	r3, r0
 800d4ec:	71fb      	strb	r3, [r7, #7]
    PrintKey( MC_ROOT_KEY );
 800d4ee:	200b      	movs	r0, #11
 800d4f0:	f7ff fd94 	bl	800d01c <PrintKey>
    PrintKey( MC_KE_KEY );
 800d4f4:	200c      	movs	r0, #12
 800d4f6:	f7ff fd91 	bl	800d01c <PrintKey>
    PrintKey( APP_S_KEY );
 800d4fa:	2009      	movs	r0, #9
 800d4fc:	f7ff fd8e 	bl	800d01c <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 800d500:	2008      	movs	r0, #8
 800d502:	f7ff fd8b 	bl	800d01c <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintKey( DATABLOCK_INT_KEY );
 800d506:	200a      	movs	r0, #10
 800d508:	f7ff fd88 	bl	800d01c <PrintKey>
    PrintIds( mode );
 800d50c:	79fb      	ldrb	r3, [r7, #7]
 800d50e:	4618      	mov	r0, r3
 800d510:	f7ff fe12 	bl	800d138 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 800d514:	2300      	movs	r3, #0
}
 800d516:	4618      	mov	r0, r3
 800d518:	3708      	adds	r7, #8
 800d51a:	46bd      	mov	sp, r7
 800d51c:	bd80      	pop	{r7, pc}
	...

0800d520 <SecureElementSetKey>:
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t *key )
{
 800d520:	b580      	push	{r7, lr}
 800d522:	b088      	sub	sp, #32
 800d524:	af00      	add	r7, sp, #0
 800d526:	4603      	mov	r3, r0
 800d528:	6039      	str	r1, [r7, #0]
 800d52a:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800d52c:	683b      	ldr	r3, [r7, #0]
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d101      	bne.n	800d536 <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d532:	2302      	movs	r3, #2
 800d534:	e04c      	b.n	800d5d0 <SecureElementSetKey+0xb0>
    }

#if (LORAWAN_KMS == 0)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800d536:	2300      	movs	r3, #0
 800d538:	77fb      	strb	r3, [r7, #31]
 800d53a:	e045      	b.n	800d5c8 <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800d53c:	4b26      	ldr	r3, [pc, #152]	; (800d5d8 <SecureElementSetKey+0xb8>)
 800d53e:	6819      	ldr	r1, [r3, #0]
 800d540:	7ffa      	ldrb	r2, [r7, #31]
 800d542:	4613      	mov	r3, r2
 800d544:	011b      	lsls	r3, r3, #4
 800d546:	4413      	add	r3, r2
 800d548:	440b      	add	r3, r1
 800d54a:	3318      	adds	r3, #24
 800d54c:	781b      	ldrb	r3, [r3, #0]
 800d54e:	79fa      	ldrb	r2, [r7, #7]
 800d550:	429a      	cmp	r2, r3
 800d552:	d136      	bne.n	800d5c2 <SecureElementSetKey+0xa2>
        {
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if( keyID == MC_KEY_0 )
 800d554:	79fb      	ldrb	r3, [r7, #7]
 800d556:	2b0d      	cmp	r3, #13
 800d558:	d123      	bne.n	800d5a2 <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            {
                /* Decrypt the key if its a Mckey */
                SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800d55a:	2306      	movs	r3, #6
 800d55c:	77bb      	strb	r3, [r7, #30]
                uint8_t decryptedKey[SE_KEY_SIZE] = { 0 };
 800d55e:	2300      	movs	r3, #0
 800d560:	60fb      	str	r3, [r7, #12]
 800d562:	f107 0310 	add.w	r3, r7, #16
 800d566:	2200      	movs	r2, #0
 800d568:	601a      	str	r2, [r3, #0]
 800d56a:	605a      	str	r2, [r3, #4]
 800d56c:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, SE_KEY_SIZE, MC_KE_KEY, decryptedKey );
 800d56e:	f107 030c 	add.w	r3, r7, #12
 800d572:	220c      	movs	r2, #12
 800d574:	2110      	movs	r1, #16
 800d576:	6838      	ldr	r0, [r7, #0]
 800d578:	f000 f876 	bl	800d668 <SecureElementAesEncrypt>
 800d57c:	4603      	mov	r3, r0
 800d57e:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800d580:	4b15      	ldr	r3, [pc, #84]	; (800d5d8 <SecureElementSetKey+0xb8>)
 800d582:	6819      	ldr	r1, [r3, #0]
 800d584:	7ffa      	ldrb	r2, [r7, #31]
 800d586:	4613      	mov	r3, r2
 800d588:	011b      	lsls	r3, r3, #4
 800d58a:	4413      	add	r3, r2
 800d58c:	3318      	adds	r3, #24
 800d58e:	440b      	add	r3, r1
 800d590:	3301      	adds	r3, #1
 800d592:	f107 010c 	add.w	r1, r7, #12
 800d596:	2210      	movs	r2, #16
 800d598:	4618      	mov	r0, r3
 800d59a:	f00c fd88 	bl	801a0ae <memcpy1>
                return retval;
 800d59e:	7fbb      	ldrb	r3, [r7, #30]
 800d5a0:	e016      	b.n	800d5d0 <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800d5a2:	4b0d      	ldr	r3, [pc, #52]	; (800d5d8 <SecureElementSetKey+0xb8>)
 800d5a4:	6819      	ldr	r1, [r3, #0]
 800d5a6:	7ffa      	ldrb	r2, [r7, #31]
 800d5a8:	4613      	mov	r3, r2
 800d5aa:	011b      	lsls	r3, r3, #4
 800d5ac:	4413      	add	r3, r2
 800d5ae:	3318      	adds	r3, #24
 800d5b0:	440b      	add	r3, r1
 800d5b2:	3301      	adds	r3, #1
 800d5b4:	2210      	movs	r2, #16
 800d5b6:	6839      	ldr	r1, [r7, #0]
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	f00c fd78 	bl	801a0ae <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800d5be:	2300      	movs	r3, #0
 800d5c0:	e006      	b.n	800d5d0 <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800d5c2:	7ffb      	ldrb	r3, [r7, #31]
 800d5c4:	3301      	adds	r3, #1
 800d5c6:	77fb      	strb	r3, [r7, #31]
 800d5c8:	7ffb      	ldrb	r3, [r7, #31]
 800d5ca:	2b0a      	cmp	r3, #10
 800d5cc:	d9b6      	bls.n	800d53c <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800d5ce:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	3720      	adds	r7, #32
 800d5d4:	46bd      	mov	sp, r7
 800d5d6:	bd80      	pop	{r7, pc}
 800d5d8:	20000508 	.word	0x20000508

0800d5dc <SecureElementComputeAesCmac>:
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size,
                                                   KeyIdentifier_t keyID, uint32_t *cmac )
{
 800d5dc:	b580      	push	{r7, lr}
 800d5de:	b086      	sub	sp, #24
 800d5e0:	af02      	add	r7, sp, #8
 800d5e2:	60f8      	str	r0, [r7, #12]
 800d5e4:	60b9      	str	r1, [r7, #8]
 800d5e6:	607a      	str	r2, [r7, #4]
 800d5e8:	70fb      	strb	r3, [r7, #3]
    if( keyID >= MC_KE_KEY )
 800d5ea:	78fb      	ldrb	r3, [r7, #3]
 800d5ec:	2b0b      	cmp	r3, #11
 800d5ee:	d901      	bls.n	800d5f4 <SecureElementComputeAesCmac+0x18>
    {
        /* Never accept multicast key identifier for cmac computation */
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800d5f0:	2303      	movs	r3, #3
 800d5f2:	e009      	b.n	800d608 <SecureElementComputeAesCmac+0x2c>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800d5f4:	78fa      	ldrb	r2, [r7, #3]
 800d5f6:	69bb      	ldr	r3, [r7, #24]
 800d5f8:	9300      	str	r3, [sp, #0]
 800d5fa:	4613      	mov	r3, r2
 800d5fc:	687a      	ldr	r2, [r7, #4]
 800d5fe:	68b9      	ldr	r1, [r7, #8]
 800d600:	68f8      	ldr	r0, [r7, #12]
 800d602:	f7ff fe37 	bl	800d274 <ComputeCmac>
 800d606:	4603      	mov	r3, r0
}
 800d608:	4618      	mov	r0, r3
 800d60a:	3710      	adds	r7, #16
 800d60c:	46bd      	mov	sp, r7
 800d60e:	bd80      	pop	{r7, pc}

0800d610 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t *buffer, uint32_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800d610:	b580      	push	{r7, lr}
 800d612:	b088      	sub	sp, #32
 800d614:	af02      	add	r7, sp, #8
 800d616:	60f8      	str	r0, [r7, #12]
 800d618:	60b9      	str	r1, [r7, #8]
 800d61a:	607a      	str	r2, [r7, #4]
 800d61c:	70fb      	strb	r3, [r7, #3]
    if( buffer == NULL )
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	2b00      	cmp	r3, #0
 800d622:	d101      	bne.n	800d628 <SecureElementVerifyAesCmac+0x18>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d624:	2302      	movs	r3, #2
 800d626:	e01b      	b.n	800d660 <SecureElementVerifyAesCmac+0x50>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800d628:	2306      	movs	r3, #6
 800d62a:	75fb      	strb	r3, [r7, #23]
#if (LORAWAN_KMS == 0)
    uint32_t              compCmac = 0;
 800d62c:	2300      	movs	r3, #0
 800d62e:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800d630:	78fa      	ldrb	r2, [r7, #3]
 800d632:	f107 0310 	add.w	r3, r7, #16
 800d636:	9300      	str	r3, [sp, #0]
 800d638:	4613      	mov	r3, r2
 800d63a:	68ba      	ldr	r2, [r7, #8]
 800d63c:	68f9      	ldr	r1, [r7, #12]
 800d63e:	2000      	movs	r0, #0
 800d640:	f7ff fe18 	bl	800d274 <ComputeCmac>
 800d644:	4603      	mov	r3, r0
 800d646:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800d648:	7dfb      	ldrb	r3, [r7, #23]
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d001      	beq.n	800d652 <SecureElementVerifyAesCmac+0x42>
    {
        return retval;
 800d64e:	7dfb      	ldrb	r3, [r7, #23]
 800d650:	e006      	b.n	800d660 <SecureElementVerifyAesCmac+0x50>
    }

    if( expectedCmac != compCmac )
 800d652:	693b      	ldr	r3, [r7, #16]
 800d654:	687a      	ldr	r2, [r7, #4]
 800d656:	429a      	cmp	r2, r3
 800d658:	d001      	beq.n	800d65e <SecureElementVerifyAesCmac+0x4e>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800d65a:	2301      	movs	r3, #1
 800d65c:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800d65e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d660:	4618      	mov	r0, r3
 800d662:	3718      	adds	r7, #24
 800d664:	46bd      	mov	sp, r7
 800d666:	bd80      	pop	{r7, pc}

0800d668 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                               uint8_t *encBuffer )
{
 800d668:	b580      	push	{r7, lr}
 800d66a:	b0c2      	sub	sp, #264	; 0x108
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	60f8      	str	r0, [r7, #12]
 800d670:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800d674:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 800d678:	6001      	str	r1, [r0, #0]
 800d67a:	4611      	mov	r1, r2
 800d67c:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800d680:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800d684:	6013      	str	r3, [r2, #0]
 800d686:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d68a:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 800d68e:	460a      	mov	r2, r1
 800d690:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( encBuffer == NULL ) )
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d006      	beq.n	800d6a6 <SecureElementAesEncrypt+0x3e>
 800d698:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d69c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d101      	bne.n	800d6aa <SecureElementAesEncrypt+0x42>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d6a6:	2302      	movs	r3, #2
 800d6a8:	e059      	b.n	800d75e <SecureElementAesEncrypt+0xf6>
    }

    /* Check if the size is divisible by 16 */
    if( ( size % 16 ) != 0 )
 800d6aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d6ae:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	f003 030f 	and.w	r3, r3, #15
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d001      	beq.n	800d6c0 <SecureElementAesEncrypt+0x58>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800d6bc:	2305      	movs	r3, #5
 800d6be:	e04e      	b.n	800d75e <SecureElementAesEncrypt+0xf6>
    }

#if (LORAWAN_KMS == 0)
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800d6c0:	f107 0314 	add.w	r3, r7, #20
 800d6c4:	22f0      	movs	r2, #240	; 0xf0
 800d6c6:	2100      	movs	r1, #0
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	f00c fd2b 	bl	801a124 <memset1>

    Key_t                *pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800d6ce:	f107 0210 	add.w	r2, r7, #16
 800d6d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d6d6:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 800d6da:	781b      	ldrb	r3, [r3, #0]
 800d6dc:	4611      	mov	r1, r2
 800d6de:	4618      	mov	r0, r3
 800d6e0:	f7ff fd98 	bl	800d214 <GetKeyByID>
 800d6e4:	4603      	mov	r3, r0
 800d6e6:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800d6ea:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d133      	bne.n	800d75a <SecureElementAesEncrypt+0xf2>
    {
        lorawan_aes_set_key( pItem->KeyValue, SE_KEY_SIZE, &aesContext );
 800d6f2:	693b      	ldr	r3, [r7, #16]
 800d6f4:	3301      	adds	r3, #1
 800d6f6:	f107 0214 	add.w	r2, r7, #20
 800d6fa:	2110      	movs	r1, #16
 800d6fc:	4618      	mov	r0, r3
 800d6fe:	f7ff fb65 	bl	800cdcc <lorawan_aes_set_key>

        uint8_t block = 0;
 800d702:	2300      	movs	r3, #0
 800d704:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

        while( size != 0 )
 800d708:	e020      	b.n	800d74c <SecureElementAesEncrypt+0xe4>
        {
            lorawan_aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
 800d70a:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800d70e:	68fa      	ldr	r2, [r7, #12]
 800d710:	18d0      	adds	r0, r2, r3
 800d712:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800d716:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800d71a:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800d71e:	6812      	ldr	r2, [r2, #0]
 800d720:	4413      	add	r3, r2
 800d722:	f107 0214 	add.w	r2, r7, #20
 800d726:	4619      	mov	r1, r3
 800d728:	f7ff fc2e 	bl	800cf88 <lorawan_aes_encrypt>
            block = block + 16;
 800d72c:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800d730:	3310      	adds	r3, #16
 800d732:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
            size  = size - 16;
 800d736:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d73a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800d73e:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800d742:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800d746:	6812      	ldr	r2, [r2, #0]
 800d748:	3a10      	subs	r2, #16
 800d74a:	601a      	str	r2, [r3, #0]
        while( size != 0 )
 800d74c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d750:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	2b00      	cmp	r3, #0
 800d758:	d1d7      	bne.n	800d70a <SecureElementAesEncrypt+0xa2>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800d75a:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
}
 800d75e:	4618      	mov	r0, r3
 800d760:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800d764:	46bd      	mov	sp, r7
 800d766:	bd80      	pop	{r7, pc}

0800d768 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t *input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800d768:	b580      	push	{r7, lr}
 800d76a:	b088      	sub	sp, #32
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	6078      	str	r0, [r7, #4]
 800d770:	460b      	mov	r3, r1
 800d772:	70fb      	strb	r3, [r7, #3]
 800d774:	4613      	mov	r3, r2
 800d776:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d101      	bne.n	800d782 <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d77e:	2302      	movs	r3, #2
 800d780:	e02e      	b.n	800d7e0 <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800d782:	2306      	movs	r3, #6
 800d784:	77fb      	strb	r3, [r7, #31]

    /* In case of MC_KE_KEY, only McRootKey can be used as root key */
    if( targetKeyID == MC_KE_KEY )
 800d786:	78bb      	ldrb	r3, [r7, #2]
 800d788:	2b0c      	cmp	r3, #12
 800d78a:	d104      	bne.n	800d796 <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800d78c:	78fb      	ldrb	r3, [r7, #3]
 800d78e:	2b0b      	cmp	r3, #11
 800d790:	d001      	beq.n	800d796 <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800d792:	2303      	movs	r3, #3
 800d794:	e024      	b.n	800d7e0 <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (LORAWAN_KMS == 0)
    uint8_t key[SE_KEY_SIZE] = { 0 };
 800d796:	2300      	movs	r3, #0
 800d798:	60fb      	str	r3, [r7, #12]
 800d79a:	f107 0310 	add.w	r3, r7, #16
 800d79e:	2200      	movs	r2, #0
 800d7a0:	601a      	str	r2, [r3, #0]
 800d7a2:	605a      	str	r2, [r3, #4]
 800d7a4:	609a      	str	r2, [r3, #8]
    /* Derive key */
    retval = SecureElementAesEncrypt( input, SE_KEY_SIZE, rootKeyID, key );
 800d7a6:	f107 030c 	add.w	r3, r7, #12
 800d7aa:	78fa      	ldrb	r2, [r7, #3]
 800d7ac:	2110      	movs	r1, #16
 800d7ae:	6878      	ldr	r0, [r7, #4]
 800d7b0:	f7ff ff5a 	bl	800d668 <SecureElementAesEncrypt>
 800d7b4:	4603      	mov	r3, r0
 800d7b6:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800d7b8:	7ffb      	ldrb	r3, [r7, #31]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d001      	beq.n	800d7c2 <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 800d7be:	7ffb      	ldrb	r3, [r7, #31]
 800d7c0:	e00e      	b.n	800d7e0 <SecureElementDeriveAndStoreKey+0x78>
    }

    /* Store key */
    retval = SecureElementSetKey( targetKeyID, key );
 800d7c2:	f107 020c 	add.w	r2, r7, #12
 800d7c6:	78bb      	ldrb	r3, [r7, #2]
 800d7c8:	4611      	mov	r1, r2
 800d7ca:	4618      	mov	r0, r3
 800d7cc:	f7ff fea8 	bl	800d520 <SecureElementSetKey>
 800d7d0:	4603      	mov	r3, r0
 800d7d2:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800d7d4:	7ffb      	ldrb	r3, [r7, #31]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d001      	beq.n	800d7de <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 800d7da:	7ffb      	ldrb	r3, [r7, #31]
 800d7dc:	e000      	b.n	800d7e0 <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 800d7de:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800d7e0:	4618      	mov	r0, r3
 800d7e2:	3720      	adds	r7, #32
 800d7e4:	46bd      	mov	sp, r7
 800d7e6:	bd80      	pop	{r7, pc}

0800d7e8 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t *joinEui,
                                                      uint16_t devNonce, uint8_t *encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t *decJoinAccept,
                                                      uint8_t *versionMinor )
{
 800d7e8:	b580      	push	{r7, lr}
 800d7ea:	b086      	sub	sp, #24
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	60b9      	str	r1, [r7, #8]
 800d7f0:	607b      	str	r3, [r7, #4]
 800d7f2:	4603      	mov	r3, r0
 800d7f4:	73fb      	strb	r3, [r7, #15]
 800d7f6:	4613      	mov	r3, r2
 800d7f8:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d005      	beq.n	800d80c <SecureElementProcessJoinAccept+0x24>
 800d800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d802:	2b00      	cmp	r3, #0
 800d804:	d002      	beq.n	800d80c <SecureElementProcessJoinAccept+0x24>
 800d806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d101      	bne.n	800d810 <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d80c:	2302      	movs	r3, #2
 800d80e:	e05c      	b.n	800d8ca <SecureElementProcessJoinAccept+0xe2>
    }

    /* Check that frame size isn't bigger than a JoinAccept with CFList size */
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800d810:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d814:	2b21      	cmp	r3, #33	; 0x21
 800d816:	d901      	bls.n	800d81c <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800d818:	2305      	movs	r3, #5
 800d81a:	e056      	b.n	800d8ca <SecureElementProcessJoinAccept+0xe2>
    }

    /* Determine decryption key */
    KeyIdentifier_t encKeyID = NWK_KEY;
 800d81c:	2301      	movs	r3, #1
 800d81e:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* LORAMAC_VERSION */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800d820:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d824:	b29b      	uxth	r3, r3
 800d826:	461a      	mov	r2, r3
 800d828:	6879      	ldr	r1, [r7, #4]
 800d82a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d82c:	f00c fc3f 	bl	801a0ae <memcpy1>

    /* Decrypt JoinAccept, skip MHDR */
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	1c58      	adds	r0, r3, #1
 800d834:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d838:	3b01      	subs	r3, #1
 800d83a:	4619      	mov	r1, r3
 800d83c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d83e:	3301      	adds	r3, #1
 800d840:	7dfa      	ldrb	r2, [r7, #23]
 800d842:	f7ff ff11 	bl	800d668 <SecureElementAesEncrypt>
 800d846:	4603      	mov	r3, r0
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d001      	beq.n	800d850 <SecureElementProcessJoinAccept+0x68>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800d84c:	2307      	movs	r3, #7
 800d84e:	e03c      	b.n	800d8ca <SecureElementProcessJoinAccept+0xe2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800d850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d852:	330b      	adds	r3, #11
 800d854:	781b      	ldrb	r3, [r3, #0]
 800d856:	09db      	lsrs	r3, r3, #7
 800d858:	b2da      	uxtb	r2, r3
 800d85a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d85c:	701a      	strb	r2, [r3, #0]

    uint32_t mic = GET_UINT32_LE( decJoinAccept, encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE );
 800d85e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d862:	3b04      	subs	r3, #4
 800d864:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d866:	4413      	add	r3, r2
 800d868:	781b      	ldrb	r3, [r3, #0]
 800d86a:	4619      	mov	r1, r3
 800d86c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d870:	3b03      	subs	r3, #3
 800d872:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d874:	4413      	add	r3, r2
 800d876:	781b      	ldrb	r3, [r3, #0]
 800d878:	021b      	lsls	r3, r3, #8
 800d87a:	ea41 0203 	orr.w	r2, r1, r3
 800d87e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d882:	3b02      	subs	r3, #2
 800d884:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d886:	440b      	add	r3, r1
 800d888:	781b      	ldrb	r3, [r3, #0]
 800d88a:	041b      	lsls	r3, r3, #16
 800d88c:	431a      	orrs	r2, r3
 800d88e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d892:	3b01      	subs	r3, #1
 800d894:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d896:	440b      	add	r3, r1
 800d898:	781b      	ldrb	r3, [r3, #0]
 800d89a:	061b      	lsls	r3, r3, #24
 800d89c:	4313      	orrs	r3, r2
 800d89e:	613b      	str	r3, [r7, #16]
     *        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
     *        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]
     */

    /* Verify mic */
    if( *versionMinor == 0 )
 800d8a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8a2:	781b      	ldrb	r3, [r3, #0]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d10d      	bne.n	800d8c4 <SecureElementProcessJoinAccept+0xdc>
    {
        /* For LoRaWAN 1.0.x
         *   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
         *   CFListType)
         */
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800d8a8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d8ac:	3b04      	subs	r3, #4
 800d8ae:	4619      	mov	r1, r3
 800d8b0:	2301      	movs	r3, #1
 800d8b2:	693a      	ldr	r2, [r7, #16]
 800d8b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d8b6:	f7ff feab 	bl	800d610 <SecureElementVerifyAesCmac>
 800d8ba:	4603      	mov	r3, r0
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d003      	beq.n	800d8c8 <SecureElementProcessJoinAccept+0xe0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800d8c0:	2301      	movs	r3, #1
 800d8c2:	e002      	b.n	800d8ca <SecureElementProcessJoinAccept+0xe2>
        }
    }
#endif /* LORAMAC_VERSION */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800d8c4:	2304      	movs	r3, #4
 800d8c6:	e000      	b.n	800d8ca <SecureElementProcessJoinAccept+0xe2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800d8c8:	2300      	movs	r3, #0
}
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	3718      	adds	r7, #24
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	bd80      	pop	{r7, pc}
	...

0800d8d4 <SecureElementSetDevEui>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t *devEui )
{
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	b082      	sub	sp, #8
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d101      	bne.n	800d8e6 <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d8e2:	2302      	movs	r3, #2
 800d8e4:	e007      	b.n	800d8f6 <SecureElementSetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.DevEui, devEui, SE_EUI_SIZE );
 800d8e6:	4b06      	ldr	r3, [pc, #24]	; (800d900 <SecureElementSetDevEui+0x2c>)
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	2208      	movs	r2, #8
 800d8ec:	6879      	ldr	r1, [r7, #4]
 800d8ee:	4618      	mov	r0, r3
 800d8f0:	f00c fbdd 	bl	801a0ae <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800d8f4:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.DevEui, devEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	3708      	adds	r7, #8
 800d8fa:	46bd      	mov	sp, r7
 800d8fc:	bd80      	pop	{r7, pc}
 800d8fe:	bf00      	nop
 800d900:	20000508 	.word	0x20000508

0800d904 <SecureElementGetDevEui>:

SecureElementStatus_t SecureElementGetDevEui( uint8_t *devEui )
{
 800d904:	b580      	push	{r7, lr}
 800d906:	b082      	sub	sp, #8
 800d908:	af00      	add	r7, sp, #0
 800d90a:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d101      	bne.n	800d916 <SecureElementGetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d912:	2302      	movs	r3, #2
 800d914:	e007      	b.n	800d926 <SecureElementGetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( devEui, SeNvm->SeNvmDevJoinKey.DevEui, SE_EUI_SIZE );
 800d916:	4b06      	ldr	r3, [pc, #24]	; (800d930 <SecureElementGetDevEui+0x2c>)
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	2208      	movs	r2, #8
 800d91c:	4619      	mov	r1, r3
 800d91e:	6878      	ldr	r0, [r7, #4]
 800d920:	f00c fbc5 	bl	801a0ae <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800d924:	2300      	movs	r3, #0
        /* get DevEui field in KMSKeyBlob handle */
        memcpy1( devEui, KMSKeyBlob.DevEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800d926:	4618      	mov	r0, r3
 800d928:	3708      	adds	r7, #8
 800d92a:	46bd      	mov	sp, r7
 800d92c:	bd80      	pop	{r7, pc}
 800d92e:	bf00      	nop
 800d930:	20000508 	.word	0x20000508

0800d934 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t *joinEui )
{
 800d934:	b580      	push	{r7, lr}
 800d936:	b082      	sub	sp, #8
 800d938:	af00      	add	r7, sp, #0
 800d93a:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d101      	bne.n	800d946 <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d942:	2302      	movs	r3, #2
 800d944:	e008      	b.n	800d958 <SecureElementSetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.JoinEui, joinEui, SE_EUI_SIZE );
 800d946:	4b06      	ldr	r3, [pc, #24]	; (800d960 <SecureElementSetJoinEui+0x2c>)
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	3308      	adds	r3, #8
 800d94c:	2208      	movs	r2, #8
 800d94e:	6879      	ldr	r1, [r7, #4]
 800d950:	4618      	mov	r0, r3
 800d952:	f00c fbac 	bl	801a0ae <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800d956:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.JoinEui, joinEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800d958:	4618      	mov	r0, r3
 800d95a:	3708      	adds	r7, #8
 800d95c:	46bd      	mov	sp, r7
 800d95e:	bd80      	pop	{r7, pc}
 800d960:	20000508 	.word	0x20000508

0800d964 <SecureElementGetJoinEui>:

SecureElementStatus_t SecureElementGetJoinEui( uint8_t *joinEui )
{
 800d964:	b580      	push	{r7, lr}
 800d966:	b082      	sub	sp, #8
 800d968:	af00      	add	r7, sp, #0
 800d96a:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d101      	bne.n	800d976 <SecureElementGetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d972:	2302      	movs	r3, #2
 800d974:	e008      	b.n	800d988 <SecureElementGetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( joinEui, SeNvm->SeNvmDevJoinKey.JoinEui, SE_EUI_SIZE );
 800d976:	4b06      	ldr	r3, [pc, #24]	; (800d990 <SecureElementGetJoinEui+0x2c>)
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	3308      	adds	r3, #8
 800d97c:	2208      	movs	r2, #8
 800d97e:	4619      	mov	r1, r3
 800d980:	6878      	ldr	r0, [r7, #4]
 800d982:	f00c fb94 	bl	801a0ae <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800d986:	2300      	movs	r3, #0
        /* get JoinEui field from KMSKeyBlob handle */
        memcpy1( joinEui, KMSKeyBlob.JoinEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800d988:	4618      	mov	r0, r3
 800d98a:	3708      	adds	r7, #8
 800d98c:	46bd      	mov	sp, r7
 800d98e:	bd80      	pop	{r7, pc}
 800d990:	20000508 	.word	0x20000508

0800d994 <SecureElementSetDevAddr>:

SecureElementStatus_t SecureElementSetDevAddr( ActivationType_t mode, uint32_t devAddr )
{
 800d994:	b480      	push	{r7}
 800d996:	b083      	sub	sp, #12
 800d998:	af00      	add	r7, sp, #0
 800d99a:	4603      	mov	r3, r0
 800d99c:	6039      	str	r1, [r7, #0]
 800d99e:	71fb      	strb	r3, [r7, #7]
#if (LORAWAN_KMS == 0)
    if( mode == ACTIVATION_TYPE_OTAA )
 800d9a0:	79fb      	ldrb	r3, [r7, #7]
 800d9a2:	2b02      	cmp	r3, #2
 800d9a4:	d104      	bne.n	800d9b0 <SecureElementSetDevAddr+0x1c>
    {
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
 800d9a6:	4b07      	ldr	r3, [pc, #28]	; (800d9c4 <SecureElementSetDevAddr+0x30>)
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	683a      	ldr	r2, [r7, #0]
 800d9ac:	611a      	str	r2, [r3, #16]
 800d9ae:	e003      	b.n	800d9b8 <SecureElementSetDevAddr+0x24>
    }
    else
    {
        SeNvm->SeNvmDevJoinKey.DevAddrABP = devAddr;
 800d9b0:	4b04      	ldr	r3, [pc, #16]	; (800d9c4 <SecureElementSetDevAddr+0x30>)
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	683a      	ldr	r2, [r7, #0]
 800d9b6:	615a      	str	r2, [r3, #20]
    }

    return SECURE_ELEMENT_SUCCESS;
 800d9b8:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	370c      	adds	r7, #12
 800d9be:	46bd      	mov	sp, r7
 800d9c0:	bc80      	pop	{r7}
 800d9c2:	4770      	bx	lr
 800d9c4:	20000508 	.word	0x20000508

0800d9c8 <SecureElementGetDevAddr>:

SecureElementStatus_t SecureElementGetDevAddr( ActivationType_t mode, uint32_t *devAddr )
{
 800d9c8:	b480      	push	{r7}
 800d9ca:	b083      	sub	sp, #12
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	4603      	mov	r3, r0
 800d9d0:	6039      	str	r1, [r7, #0]
 800d9d2:	71fb      	strb	r3, [r7, #7]
    if( devAddr == NULL )
 800d9d4:	683b      	ldr	r3, [r7, #0]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d101      	bne.n	800d9de <SecureElementGetDevAddr+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d9da:	2302      	movs	r3, #2
 800d9dc:	e00e      	b.n	800d9fc <SecureElementGetDevAddr+0x34>
    }
#if (LORAWAN_KMS == 0)
    /* Recover DevAddrABP or DevAddrOTAA depending on mode */
    if( mode == ACTIVATION_TYPE_OTAA )
 800d9de:	79fb      	ldrb	r3, [r7, #7]
 800d9e0:	2b02      	cmp	r3, #2
 800d9e2:	d105      	bne.n	800d9f0 <SecureElementGetDevAddr+0x28>
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
 800d9e4:	4b08      	ldr	r3, [pc, #32]	; (800da08 <SecureElementGetDevAddr+0x40>)
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	691a      	ldr	r2, [r3, #16]
 800d9ea:	683b      	ldr	r3, [r7, #0]
 800d9ec:	601a      	str	r2, [r3, #0]
 800d9ee:	e004      	b.n	800d9fa <SecureElementGetDevAddr+0x32>
    }
    else
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrABP;
 800d9f0:	4b05      	ldr	r3, [pc, #20]	; (800da08 <SecureElementGetDevAddr+0x40>)
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	695a      	ldr	r2, [r3, #20]
 800d9f6:	683b      	ldr	r3, [r7, #0]
 800d9f8:	601a      	str	r2, [r3, #0]
    }
    return SECURE_ELEMENT_SUCCESS;
 800d9fa:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800d9fc:	4618      	mov	r0, r3
 800d9fe:	370c      	adds	r7, #12
 800da00:	46bd      	mov	sp, r7
 800da02:	bc80      	pop	{r7}
 800da04:	4770      	bx	lr
 800da06:	bf00      	nop
 800da08:	20000508 	.word	0x20000508

0800da0c <LmHandlerInit>:
static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity );
#endif /* LORAMAC_VERSION */

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks, uint32_t fwVersion )
{
 800da0c:	b580      	push	{r7, lr}
 800da0e:	b082      	sub	sp, #8
 800da10:	af00      	add	r7, sp, #0
 800da12:	6078      	str	r0, [r7, #4]
 800da14:	6039      	str	r1, [r7, #0]
    LmHandlerCallbacks = handlerCallbacks;
 800da16:	4a29      	ldr	r2, [pc, #164]	; (800dabc <LmHandlerInit+0xb0>)
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800da1c:	4b28      	ldr	r3, [pc, #160]	; (800dac0 <LmHandlerInit+0xb4>)
 800da1e:	4a29      	ldr	r2, [pc, #164]	; (800dac4 <LmHandlerInit+0xb8>)
 800da20:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800da22:	4b27      	ldr	r3, [pc, #156]	; (800dac0 <LmHandlerInit+0xb4>)
 800da24:	4a28      	ldr	r2, [pc, #160]	; (800dac8 <LmHandlerInit+0xbc>)
 800da26:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800da28:	4b25      	ldr	r3, [pc, #148]	; (800dac0 <LmHandlerInit+0xb4>)
 800da2a:	4a28      	ldr	r2, [pc, #160]	; (800dacc <LmHandlerInit+0xc0>)
 800da2c:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800da2e:	4b24      	ldr	r3, [pc, #144]	; (800dac0 <LmHandlerInit+0xb4>)
 800da30:	4a27      	ldr	r2, [pc, #156]	; (800dad0 <LmHandlerInit+0xc4>)
 800da32:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800da34:	4b21      	ldr	r3, [pc, #132]	; (800dabc <LmHandlerInit+0xb0>)
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	4a26      	ldr	r2, [pc, #152]	; (800dad4 <LmHandlerInit+0xc8>)
 800da3c:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800da3e:	4b1f      	ldr	r3, [pc, #124]	; (800dabc <LmHandlerInit+0xb0>)
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	685b      	ldr	r3, [r3, #4]
 800da44:	4a23      	ldr	r2, [pc, #140]	; (800dad4 <LmHandlerInit+0xc8>)
 800da46:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800da48:	4b1c      	ldr	r3, [pc, #112]	; (800dabc <LmHandlerInit+0xb0>)
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	689b      	ldr	r3, [r3, #8]
 800da4e:	4a21      	ldr	r2, [pc, #132]	; (800dad4 <LmHandlerInit+0xc8>)
 800da50:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.GetDevAddress = LmHandlerCallbacks->GetDevAddr;
 800da52:	4b1a      	ldr	r3, [pc, #104]	; (800dabc <LmHandlerInit+0xb0>)
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	68db      	ldr	r3, [r3, #12]
 800da58:	4a1e      	ldr	r2, [pc, #120]	; (800dad4 <LmHandlerInit+0xc8>)
 800da5a:	60d3      	str	r3, [r2, #12]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800da5c:	4b1d      	ldr	r3, [pc, #116]	; (800dad4 <LmHandlerInit+0xc8>)
 800da5e:	4a1e      	ldr	r2, [pc, #120]	; (800dad8 <LmHandlerInit+0xcc>)
 800da60:	611a      	str	r2, [r3, #16]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800da62:	4b16      	ldr	r3, [pc, #88]	; (800dabc <LmHandlerInit+0xb0>)
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	699b      	ldr	r3, [r3, #24]
 800da68:	4a1a      	ldr	r2, [pc, #104]	; (800dad4 <LmHandlerInit+0xc8>)
 800da6a:	6153      	str	r3, [r2, #20]

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LmhpComplianceParams.FwVersion.Value = fwVersion;
 800da6c:	683b      	ldr	r3, [r7, #0]
 800da6e:	4a1b      	ldr	r2, [pc, #108]	; (800dadc <LmHandlerInit+0xd0>)
 800da70:	6013      	str	r3, [r2, #0]
    LmhpComplianceParams.OnTxPeriodicityChanged = LmHandlerCallbacks->OnTxPeriodicityChanged;
 800da72:	4b12      	ldr	r3, [pc, #72]	; (800dabc <LmHandlerInit+0xb0>)
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da78:	4a18      	ldr	r2, [pc, #96]	; (800dadc <LmHandlerInit+0xd0>)
 800da7a:	6053      	str	r3, [r2, #4]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerOnTxFrameCtrlChanged;
 800da7c:	4b17      	ldr	r3, [pc, #92]	; (800dadc <LmHandlerInit+0xd0>)
 800da7e:	4a18      	ldr	r2, [pc, #96]	; (800dae0 <LmHandlerInit+0xd4>)
 800da80:	609a      	str	r2, [r3, #8]
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerOnPingSlotPeriodicityChanged;
 800da82:	4b16      	ldr	r3, [pc, #88]	; (800dadc <LmHandlerInit+0xd0>)
 800da84:	4a17      	ldr	r2, [pc, #92]	; (800dae4 <LmHandlerInit+0xd8>)
 800da86:	60da      	str	r2, [r3, #12]
#endif /* LORAMAC_VERSION */

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if( LmHandlerPackageRegister( PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams ) != LORAMAC_HANDLER_SUCCESS )
 800da88:	4914      	ldr	r1, [pc, #80]	; (800dadc <LmHandlerInit+0xd0>)
 800da8a:	2000      	movs	r0, #0
 800da8c:	f000 fdb4 	bl	800e5f8 <LmHandlerPackageRegister>
 800da90:	4603      	mov	r3, r0
 800da92:	2b00      	cmp	r3, #0
 800da94:	d002      	beq.n	800da9c <LmHandlerInit+0x90>
    {
        return LORAMAC_HANDLER_ERROR;
 800da96:	f04f 33ff 	mov.w	r3, #4294967295
 800da9a:	e00a      	b.n	800dab2 <LmHandlerInit+0xa6>
    }

    if( LmhpPackagesRegistrationInit( ( Version_t * )&fwVersion ) != LORAMAC_HANDLER_SUCCESS )
 800da9c:	463b      	mov	r3, r7
 800da9e:	4618      	mov	r0, r3
 800daa0:	f001 fd2a 	bl	800f4f8 <LmhpPackagesRegistrationInit>
 800daa4:	4603      	mov	r3, r0
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d002      	beq.n	800dab0 <LmHandlerInit+0xa4>
    {
        return LORAMAC_HANDLER_ERROR;
 800daaa:	f04f 33ff 	mov.w	r3, #4294967295
 800daae:	e000      	b.n	800dab2 <LmHandlerInit+0xa6>
    }

    return LORAMAC_HANDLER_SUCCESS;
 800dab0:	2300      	movs	r3, #0
}
 800dab2:	4618      	mov	r0, r3
 800dab4:	3708      	adds	r7, #8
 800dab6:	46bd      	mov	sp, r7
 800dab8:	bd80      	pop	{r7, pc}
 800daba:	bf00      	nop
 800dabc:	20000560 	.word	0x20000560
 800dac0:	20000564 	.word	0x20000564
 800dac4:	0800e2d1 	.word	0x0800e2d1
 800dac8:	0800e345 	.word	0x0800e345
 800dacc:	0800e415 	.word	0x0800e415
 800dad0:	0800e565 	.word	0x0800e565
 800dad4:	20000574 	.word	0x20000574
 800dad8:	0800eaa5 	.word	0x0800eaa5
 800dadc:	20000524 	.word	0x20000524
 800dae0:	0800e8b9 	.word	0x0800e8b9
 800dae4:	0800e8f1 	.word	0x0800e8f1

0800dae8 <LmHandlerConfigure>:
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800dae8:	b580      	push	{r7, lr}
 800daea:	b092      	sub	sp, #72	; 0x48
 800daec:	af00      	add	r7, sp, #0
 800daee:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    memcpy1( ( void * )&LmHandlerParams, ( const void * )handlerParams, sizeof( LmHandlerParams_t ) );
 800daf0:	2218      	movs	r2, #24
 800daf2:	6879      	ldr	r1, [r7, #4]
 800daf4:	4884      	ldr	r0, [pc, #528]	; (800dd08 <LmHandlerConfigure+0x220>)
 800daf6:	f00c fada 	bl	801a0ae <memcpy1>

#if ( LORAMAC_CLASSB_ENABLED == 1 )
    IsClassBSwitchPending = false;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    IsUplinkTxPending = false;
 800dafa:	4b84      	ldr	r3, [pc, #528]	; (800dd0c <LmHandlerConfigure+0x224>)
 800dafc:	2200      	movs	r2, #0
 800dafe:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    loraInfo = LoraInfo_GetPtr();
 800db00:	f7fe faa2 	bl	800c048 <LoraInfo_GetPtr>
 800db04:	6478      	str	r0, [r7, #68]	; 0x44

    if( 0U == ( ( 1 << ( LmHandlerParams.ActiveRegion ) ) & ( loraInfo->Region ) ) )
 800db06:	4b80      	ldr	r3, [pc, #512]	; (800dd08 <LmHandlerConfigure+0x220>)
 800db08:	781b      	ldrb	r3, [r3, #0]
 800db0a:	461a      	mov	r2, r3
 800db0c:	2301      	movs	r3, #1
 800db0e:	4093      	lsls	r3, r2
 800db10:	461a      	mov	r2, r3
 800db12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800db14:	685b      	ldr	r3, [r3, #4]
 800db16:	4013      	ands	r3, r2
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d106      	bne.n	800db2a <LmHandlerConfigure+0x42>
    {
        MW_LOG( TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n" );
 800db1c:	4b7c      	ldr	r3, [pc, #496]	; (800dd10 <LmHandlerConfigure+0x228>)
 800db1e:	2201      	movs	r2, #1
 800db20:	2100      	movs	r1, #0
 800db22:	2000      	movs	r0, #0
 800db24:	f010 fe68 	bl	801e7f8 <UTIL_ADV_TRACE_COND_FSend>
        while( 1 ) {} /* error: Region is not defined in the MW */
 800db28:	e7fe      	b.n	800db28 <LmHandlerConfigure+0x40>
    }

    if( LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion ) != LORAMAC_STATUS_OK )
 800db2a:	4b77      	ldr	r3, [pc, #476]	; (800dd08 <LmHandlerConfigure+0x220>)
 800db2c:	781b      	ldrb	r3, [r3, #0]
 800db2e:	461a      	mov	r2, r3
 800db30:	4978      	ldr	r1, [pc, #480]	; (800dd14 <LmHandlerConfigure+0x22c>)
 800db32:	4879      	ldr	r0, [pc, #484]	; (800dd18 <LmHandlerConfigure+0x230>)
 800db34:	f004 ffd4 	bl	8012ae0 <LoRaMacInitialization>
 800db38:	4603      	mov	r3, r0
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d002      	beq.n	800db44 <LmHandlerConfigure+0x5c>
    {
        return LORAMAC_HANDLER_ERROR;
 800db3e:	f04f 33ff 	mov.w	r3, #4294967295
 800db42:	e0dc      	b.n	800dcfe <LmHandlerConfigure+0x216>
    }

#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    /* Try the restore context from the Backup RAM structure if data retention is available */
    mibReq.Type = MIB_NVM_CTXS;
 800db44:	2327      	movs	r3, #39	; 0x27
 800db46:	763b      	strb	r3, [r7, #24]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800db48:	f107 0318 	add.w	r3, r7, #24
 800db4c:	4618      	mov	r0, r3
 800db4e:	f005 fd53 	bl	80135f8 <LoRaMacMibSetRequestConfirm>
 800db52:	4603      	mov	r3, r0
 800db54:	2b00      	cmp	r3, #0
 800db56:	d103      	bne.n	800db60 <LmHandlerConfigure+0x78>
    {
        CtxRestoreDone = true;
 800db58:	4b70      	ldr	r3, [pc, #448]	; (800dd1c <LmHandlerConfigure+0x234>)
 800db5a:	2201      	movs	r2, #1
 800db5c:	701a      	strb	r2, [r3, #0]
 800db5e:	e02a      	b.n	800dbb6 <LmHandlerConfigure+0xce>
    }
    else
    {
        /* Restore context data backup from user callback (stored in FLASH) */
        mibReq.Type = MIB_NVM_BKP_CTXS;
 800db60:	2328      	movs	r3, #40	; 0x28
 800db62:	763b      	strb	r3, [r7, #24]
        if( LmHandlerCallbacks->OnRestoreContextRequest != NULL )
 800db64:	4b6e      	ldr	r3, [pc, #440]	; (800dd20 <LmHandlerConfigure+0x238>)
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	691b      	ldr	r3, [r3, #16]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d00c      	beq.n	800db88 <LmHandlerConfigure+0xa0>
        {
            LoRaMacMibGetRequestConfirm( &mibReq );
 800db6e:	f107 0318 	add.w	r3, r7, #24
 800db72:	4618      	mov	r0, r3
 800db74:	f005 fb68 	bl	8013248 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest( mibReq.Param.BackupContexts, sizeof( LoRaMacNvmData_t ) );
 800db78:	4b69      	ldr	r3, [pc, #420]	; (800dd20 <LmHandlerConfigure+0x238>)
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	691b      	ldr	r3, [r3, #16]
 800db7e:	69fa      	ldr	r2, [r7, #28]
 800db80:	f240 51cc 	movw	r1, #1484	; 0x5cc
 800db84:	4610      	mov	r0, r2
 800db86:	4798      	blx	r3
        }
        /* Restore context data from backup to main nvm structure */
        mibReq.Type = MIB_NVM_CTXS;
 800db88:	2327      	movs	r3, #39	; 0x27
 800db8a:	763b      	strb	r3, [r7, #24]
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800db8c:	f107 0318 	add.w	r3, r7, #24
 800db90:	4618      	mov	r0, r3
 800db92:	f005 fd31 	bl	80135f8 <LoRaMacMibSetRequestConfirm>
 800db96:	4603      	mov	r3, r0
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d10c      	bne.n	800dbb6 <LmHandlerConfigure+0xce>
        {
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 800db9c:	2301      	movs	r3, #1
 800db9e:	763b      	strb	r3, [r7, #24]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800dba0:	f107 0318 	add.w	r3, r7, #24
 800dba4:	4618      	mov	r0, r3
 800dba6:	f005 fb4f 	bl	8013248 <LoRaMacMibGetRequestConfirm>
            if( mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE )
 800dbaa:	7f3b      	ldrb	r3, [r7, #28]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d002      	beq.n	800dbb6 <LmHandlerConfigure+0xce>
            {
                CtxRestoreDone = true;
 800dbb0:	4b5a      	ldr	r3, [pc, #360]	; (800dd1c <LmHandlerConfigure+0x234>)
 800dbb2:	2201      	movs	r2, #1
 800dbb4:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    if( CtxRestoreDone == true )
 800dbb6:	4b59      	ldr	r3, [pc, #356]	; (800dd1c <LmHandlerConfigure+0x234>)
 800dbb8:	781b      	ldrb	r3, [r3, #0]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d022      	beq.n	800dc04 <LmHandlerConfigure+0x11c>
    {
        if( LmHandlerCallbacks->OnNvmDataChange != NULL )
 800dbbe:	4b58      	ldr	r3, [pc, #352]	; (800dd20 <LmHandlerConfigure+0x238>)
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	69db      	ldr	r3, [r3, #28]
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d004      	beq.n	800dbd2 <LmHandlerConfigure+0xea>
        {
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 800dbc8:	4b55      	ldr	r3, [pc, #340]	; (800dd20 <LmHandlerConfigure+0x238>)
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	69db      	ldr	r3, [r3, #28]
 800dbce:	2000      	movs	r0, #0
 800dbd0:	4798      	blx	r3
        }

        mibReq.Type = MIB_NVM_CTXS;
 800dbd2:	2327      	movs	r3, #39	; 0x27
 800dbd4:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800dbd6:	f107 0318 	add.w	r3, r7, #24
 800dbda:	4618      	mov	r0, r3
 800dbdc:	f005 fb34 	bl	8013248 <LoRaMacMibGetRequestConfirm>
        LoRaMacNvmData_t *current_nvm = mibReq.Param.Contexts;
 800dbe0:	69fb      	ldr	r3, [r7, #28]
 800dbe2:	643b      	str	r3, [r7, #64]	; 0x40

        LmHandlerParams.ActiveRegion = current_nvm->MacGroup2.Region;
 800dbe4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dbe6:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800dbea:	4b47      	ldr	r3, [pc, #284]	; (800dd08 <LmHandlerConfigure+0x220>)
 800dbec:	701a      	strb	r2, [r3, #0]
        LmHandlerParams.DefaultClass = current_nvm->MacGroup2.DeviceClass;
 800dbee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dbf0:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
 800dbf4:	4b44      	ldr	r3, [pc, #272]	; (800dd08 <LmHandlerConfigure+0x220>)
 800dbf6:	705a      	strb	r2, [r3, #1]
        LmHandlerParams.AdrEnable = current_nvm->MacGroup2.AdrCtrlOn;
 800dbf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dbfa:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 800dbfe:	4b42      	ldr	r3, [pc, #264]	; (800dd08 <LmHandlerConfigure+0x220>)
 800dc00:	709a      	strb	r2, [r3, #2]
 800dc02:	e008      	b.n	800dc16 <LmHandlerConfigure+0x12e>
    }
    else
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
    {
        mibReq.Type = MIB_NET_ID;
 800dc04:	2305      	movs	r3, #5
 800dc06:	763b      	strb	r3, [r7, #24]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800dc08:	2300      	movs	r3, #0
 800dc0a:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800dc0c:	f107 0318 	add.w	r3, r7, #24
 800dc10:	4618      	mov	r0, r3
 800dc12:	f005 fcf1 	bl	80135f8 <LoRaMacMibSetRequestConfirm>
    }

    /* Restore ID struct from NVM or Init from callbacks */
    if( SecureElementInitMcuID( LoRaMacCallbacks.GetUniqueId, LoRaMacCallbacks.GetDevAddress ) != SECURE_ELEMENT_SUCCESS )
 800dc16:	4b3f      	ldr	r3, [pc, #252]	; (800dd14 <LmHandlerConfigure+0x22c>)
 800dc18:	689b      	ldr	r3, [r3, #8]
 800dc1a:	4a3e      	ldr	r2, [pc, #248]	; (800dd14 <LmHandlerConfigure+0x22c>)
 800dc1c:	68d2      	ldr	r2, [r2, #12]
 800dc1e:	4611      	mov	r1, r2
 800dc20:	4618      	mov	r0, r3
 800dc22:	f7ff fbcb 	bl	800d3bc <SecureElementInitMcuID>
 800dc26:	4603      	mov	r3, r0
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d002      	beq.n	800dc32 <LmHandlerConfigure+0x14a>
    {
        return LORAMAC_HANDLER_ERROR;
 800dc2c:	f04f 33ff 	mov.w	r3, #4294967295
 800dc30:	e065      	b.n	800dcfe <LmHandlerConfigure+0x216>
    }

    /* Read secure-element DEV_EUI, JOIN_EUI and DEV_ADDR values. */
    mibReq.Type = MIB_DEV_ADDR;
 800dc32:	2306      	movs	r3, #6
 800dc34:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800dc36:	f107 0318 	add.w	r3, r7, #24
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	f005 fb04 	bl	8013248 <LoRaMacMibGetRequestConfirm>
    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800dc40:	69fb      	ldr	r3, [r7, #28]
 800dc42:	4a38      	ldr	r2, [pc, #224]	; (800dd24 <LmHandlerConfigure+0x23c>)
 800dc44:	6153      	str	r3, [r2, #20]

    /* Override DevAddress value after init from callbacks */
    LoRaMacMibSetRequestConfirm( &mibReq );
 800dc46:	f107 0318 	add.w	r3, r7, #24
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	f005 fcd4 	bl	80135f8 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_DEV_EUI;
 800dc50:	2302      	movs	r3, #2
 800dc52:	763b      	strb	r3, [r7, #24]
    mibReq.Param.DevEui = CommissioningParams.DevEui;
 800dc54:	4b33      	ldr	r3, [pc, #204]	; (800dd24 <LmHandlerConfigure+0x23c>)
 800dc56:	61fb      	str	r3, [r7, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800dc58:	f107 0318 	add.w	r3, r7, #24
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	f005 faf3 	bl	8013248 <LoRaMacMibGetRequestConfirm>

    mibReq.Type = MIB_JOIN_EUI;
 800dc62:	2303      	movs	r3, #3
 800dc64:	763b      	strb	r3, [r7, #24]
    mibReq.Param.JoinEui = CommissioningParams.JoinEui;
 800dc66:	4b30      	ldr	r3, [pc, #192]	; (800dd28 <LmHandlerConfigure+0x240>)
 800dc68:	61fb      	str	r3, [r7, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800dc6a:	f107 0318 	add.w	r3, r7, #24
 800dc6e:	4618      	mov	r0, r3
 800dc70:	f005 faea 	bl	8013248 <LoRaMacMibGetRequestConfirm>

    SecureElementPrintKeys();
 800dc74:	f7ff fc22 	bl	800d4bc <SecureElementPrintKeys>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG( TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n" );
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800dc78:	230f      	movs	r3, #15
 800dc7a:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800dc7c:	2301      	movs	r3, #1
 800dc7e:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800dc80:	f107 0318 	add.w	r3, r7, #24
 800dc84:	4618      	mov	r0, r3
 800dc86:	f005 fcb7 	bl	80135f8 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800dc8a:	2310      	movs	r3, #16
 800dc8c:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800dc8e:	2300      	movs	r3, #0
 800dc90:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800dc92:	f107 0318 	add.w	r3, r7, #24
 800dc96:	4618      	mov	r0, r3
 800dc98:	f005 fcae 	bl	80135f8 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800dc9c:	2304      	movs	r3, #4
 800dc9e:	763b      	strb	r3, [r7, #24]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800dca0:	4b19      	ldr	r3, [pc, #100]	; (800dd08 <LmHandlerConfigure+0x220>)
 800dca2:	789b      	ldrb	r3, [r3, #2]
 800dca4:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800dca6:	f107 0318 	add.w	r3, r7, #24
 800dcaa:	4618      	mov	r0, r3
 800dcac:	f005 fca4 	bl	80135f8 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800dcb0:	233a      	movs	r3, #58	; 0x3a
 800dcb2:	763b      	strb	r3, [r7, #24]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800dcb4:	4b14      	ldr	r3, [pc, #80]	; (800dd08 <LmHandlerConfigure+0x220>)
 800dcb6:	695b      	ldr	r3, [r3, #20]
 800dcb8:	61fb      	str	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800dcba:	f107 0318 	add.w	r3, r7, #24
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	f005 fc9a 	bl	80135f8 <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800dcc4:	230f      	movs	r3, #15
 800dcc6:	743b      	strb	r3, [r7, #16]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800dcc8:	4b0f      	ldr	r3, [pc, #60]	; (800dd08 <LmHandlerConfigure+0x220>)
 800dcca:	781b      	ldrb	r3, [r3, #0]
 800dccc:	f107 0210 	add.w	r2, r7, #16
 800dcd0:	4611      	mov	r1, r2
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	f008 fbea 	bl	80164ac <RegionGetPhyParam>
 800dcd8:	4603      	mov	r3, r0
 800dcda:	60fb      	str	r3, [r7, #12]
    LmHandlerParams.DutyCycleEnabled = ( bool ) phyParam.Value;
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	bf14      	ite	ne
 800dce2:	2301      	movne	r3, #1
 800dce4:	2300      	moveq	r3, #0
 800dce6:	b2da      	uxtb	r2, r3
 800dce8:	4b07      	ldr	r3, [pc, #28]	; (800dd08 <LmHandlerConfigure+0x220>)
 800dcea:	71da      	strb	r2, [r3, #7]

    /* Set system maximum tolerated rx error in milliseconds */
    LmHandlerSetSystemMaxRxError( 20 );
 800dcec:	2014      	movs	r0, #20
 800dcee:	f000 fad7 	bl	800e2a0 <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800dcf2:	4b05      	ldr	r3, [pc, #20]	; (800dd08 <LmHandlerConfigure+0x220>)
 800dcf4:	79db      	ldrb	r3, [r3, #7]
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	f006 faf8 	bl	80142ec <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800dcfc:	2300      	movs	r3, #0
}
 800dcfe:	4618      	mov	r0, r3
 800dd00:	3748      	adds	r7, #72	; 0x48
 800dd02:	46bd      	mov	sp, r7
 800dd04:	bd80      	pop	{r7, pc}
 800dd06:	bf00      	nop
 800dd08:	20000548 	.word	0x20000548
 800dd0c:	20000590 	.word	0x20000590
 800dd10:	0801f4f0 	.word	0x0801f4f0
 800dd14:	20000574 	.word	0x20000574
 800dd18:	20000564 	.word	0x20000564
 800dd1c:	20000686 	.word	0x20000686
 800dd20:	20000560 	.word	0x20000560
 800dd24:	2000050c 	.word	0x2000050c
 800dd28:	20000514 	.word	0x20000514

0800dd2c <LmHandlerProcess>:

    return false;
}

void LmHandlerProcess( void )
{
 800dd2c:	b580      	push	{r7, lr}
 800dd2e:	b082      	sub	sp, #8
 800dd30:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    /* Processes the LoRaMac events */
    LoRaMacProcess( );
 800dd32:	f002 fe49 	bl	80109c8 <LoRaMacProcess>

    /* Call all packages process functions */
    LmHandlerPackagesProcess( );
 800dd36:	f000 fd8b 	bl	800e850 <LmHandlerPackagesProcess>

    /* Check if a package transmission is pending. */
    /* If it is the case exit function earlier */
    if( LmHandlerPackageIsTxPending( ) == true )
 800dd3a:	f000 fd5f 	bl	800e7fc <LmHandlerPackageIsTxPending>
 800dd3e:	4603      	mov	r3, r0
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d117      	bne.n	800dd74 <LmHandlerProcess+0x48>
        return;
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    /* If a MAC layer scheduled uplink is still pending try to send it. */
    if( IsUplinkTxPending == true )
 800dd44:	4b0d      	ldr	r3, [pc, #52]	; (800dd7c <LmHandlerProcess+0x50>)
 800dd46:	781b      	ldrb	r3, [r3, #0]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d014      	beq.n	800dd76 <LmHandlerProcess+0x4a>
    {
        /* Send an empty message */
        LmHandlerAppData_t appData =
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	703b      	strb	r3, [r7, #0]
 800dd50:	2300      	movs	r3, #0
 800dd52:	707b      	strb	r3, [r7, #1]
 800dd54:	2300      	movs	r3, #0
 800dd56:	607b      	str	r3, [r7, #4]
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0,
        };

        if( LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false ) == LORAMAC_HANDLER_SUCCESS )
 800dd58:	4b09      	ldr	r3, [pc, #36]	; (800dd80 <LmHandlerProcess+0x54>)
 800dd5a:	78d9      	ldrb	r1, [r3, #3]
 800dd5c:	463b      	mov	r3, r7
 800dd5e:	2200      	movs	r2, #0
 800dd60:	4618      	mov	r0, r3
 800dd62:	f000 f8d7 	bl	800df14 <LmHandlerSend>
 800dd66:	4603      	mov	r3, r0
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d104      	bne.n	800dd76 <LmHandlerProcess+0x4a>
        {
            IsUplinkTxPending = false;
 800dd6c:	4b03      	ldr	r3, [pc, #12]	; (800dd7c <LmHandlerProcess+0x50>)
 800dd6e:	2200      	movs	r2, #0
 800dd70:	701a      	strb	r2, [r3, #0]
 800dd72:	e000      	b.n	800dd76 <LmHandlerProcess+0x4a>
        return;
 800dd74:	bf00      	nop
        }
    }
#endif /* LORAMAC_VERSION */
}
 800dd76:	3708      	adds	r7, #8
 800dd78:	46bd      	mov	sp, r7
 800dd7a:	bd80      	pop	{r7, pc}
 800dd7c:	20000590 	.word	0x20000590
 800dd80:	20000548 	.word	0x20000548

0800dd84 <LmHandlerGetDutyCycleWaitTime>:

TimerTime_t LmHandlerGetDutyCycleWaitTime( void )
{
 800dd84:	b480      	push	{r7}
 800dd86:	af00      	add	r7, sp, #0
    return DutyCycleWaitTime;
 800dd88:	4b02      	ldr	r3, [pc, #8]	; (800dd94 <LmHandlerGetDutyCycleWaitTime+0x10>)
 800dd8a:	681b      	ldr	r3, [r3, #0]
}
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	46bd      	mov	sp, r7
 800dd90:	bc80      	pop	{r7}
 800dd92:	4770      	bx	lr
 800dd94:	2000058c 	.word	0x2000058c

0800dd98 <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode, bool forceRejoin )
{
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	b092      	sub	sp, #72	; 0x48
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	4603      	mov	r3, r0
 800dda0:	460a      	mov	r2, r1
 800dda2:	71fb      	strb	r3, [r7, #7]
 800dda4:	4613      	mov	r3, r2
 800dda6:	71bb      	strb	r3, [r7, #6]
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_JOIN;
 800dda8:	2301      	movs	r3, #1
 800ddaa:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800ddae:	4b46      	ldr	r3, [pc, #280]	; (800dec8 <LmHandlerJoin+0x130>)
 800ddb0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800ddb4:	b2db      	uxtb	r3, r3
 800ddb6:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
    mlmeReq.Req.Join.TxPower = LmHandlerParams.TxPower;
 800ddba:	4b43      	ldr	r3, [pc, #268]	; (800dec8 <LmHandlerJoin+0x130>)
 800ddbc:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800ddc0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

    if( mode == ACTIVATION_TYPE_OTAA )
 800ddc4:	79fb      	ldrb	r3, [r7, #7]
 800ddc6:	2b02      	cmp	r3, #2
 800ddc8:	d10b      	bne.n	800dde2 <LmHandlerJoin+0x4a>
    {
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800ddca:	2302      	movs	r3, #2
 800ddcc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800ddd0:	4b3e      	ldr	r3, [pc, #248]	; (800decc <LmHandlerJoin+0x134>)
 800ddd2:	2202      	movs	r2, #2
 800ddd4:	71da      	strb	r2, [r3, #7]
        JoinParams.forceRejoin = forceRejoin;
 800ddd6:	4a3d      	ldr	r2, [pc, #244]	; (800decc <LmHandlerJoin+0x134>)
 800ddd8:	79bb      	ldrb	r3, [r7, #6]
 800ddda:	7213      	strb	r3, [r2, #8]
        LoRaMacStart();
 800dddc:	f005 f936 	bl	801304c <LoRaMacStart>
 800dde0:	e05c      	b.n	800de9c <LmHandlerJoin+0x104>
    }
    else
    {
        MibRequestConfirm_t mibReq;

        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 800dde2:	2301      	movs	r3, #1
 800dde4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800dde8:	4b38      	ldr	r3, [pc, #224]	; (800decc <LmHandlerJoin+0x134>)
 800ddea:	2201      	movs	r2, #1
 800ddec:	71da      	strb	r2, [r3, #7]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800ddee:	4b36      	ldr	r3, [pc, #216]	; (800dec8 <LmHandlerJoin+0x130>)
 800ddf0:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800ddf4:	4b35      	ldr	r3, [pc, #212]	; (800decc <LmHandlerJoin+0x134>)
 800ddf6:	711a      	strb	r2, [r3, #4]
        JoinParams.TxPower = LmHandlerParams.TxPower;
 800ddf8:	4b33      	ldr	r3, [pc, #204]	; (800dec8 <LmHandlerJoin+0x130>)
 800ddfa:	f993 2005 	ldrsb.w	r2, [r3, #5]
 800ddfe:	4b33      	ldr	r3, [pc, #204]	; (800decc <LmHandlerJoin+0x134>)
 800de00:	715a      	strb	r2, [r3, #5]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800de02:	4b32      	ldr	r3, [pc, #200]	; (800decc <LmHandlerJoin+0x134>)
 800de04:	2200      	movs	r2, #0
 800de06:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 800de08:	4a30      	ldr	r2, [pc, #192]	; (800decc <LmHandlerJoin+0x134>)
 800de0a:	79bb      	ldrb	r3, [r7, #6]
 800de0c:	7213      	strb	r3, [r2, #8]

        if( CtxRestoreDone == false )
 800de0e:	4b30      	ldr	r3, [pc, #192]	; (800ded0 <LmHandlerJoin+0x138>)
 800de10:	781b      	ldrb	r3, [r3, #0]
 800de12:	f083 0301 	eor.w	r3, r3, #1
 800de16:	b2db      	uxtb	r3, r3
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d034      	beq.n	800de86 <LmHandlerJoin+0xee>
        {
            /* Configure the default datarate */
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800de1c:	231f      	movs	r3, #31
 800de1e:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 800de20:	4b29      	ldr	r3, [pc, #164]	; (800dec8 <LmHandlerJoin+0x130>)
 800de22:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800de26:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800de28:	f107 030c 	add.w	r3, r7, #12
 800de2c:	4618      	mov	r0, r3
 800de2e:	f005 fbe3 	bl	80135f8 <LoRaMacMibSetRequestConfirm>

            mibReq.Type = MIB_CHANNELS_DATARATE;
 800de32:	2320      	movs	r3, #32
 800de34:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 800de36:	4b24      	ldr	r3, [pc, #144]	; (800dec8 <LmHandlerJoin+0x130>)
 800de38:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800de3c:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800de3e:	f107 030c 	add.w	r3, r7, #12
 800de42:	4618      	mov	r0, r3
 800de44:	f005 fbd8 	bl	80135f8 <LoRaMacMibSetRequestConfirm>

            /* Configure the default Tx Power */
            mibReq.Type = MIB_CHANNELS_DEFAULT_TX_POWER;
 800de48:	2322      	movs	r3, #34	; 0x22
 800de4a:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultTxPower = LmHandlerParams.TxPower;
 800de4c:	4b1e      	ldr	r3, [pc, #120]	; (800dec8 <LmHandlerJoin+0x130>)
 800de4e:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800de52:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800de54:	f107 030c 	add.w	r3, r7, #12
 800de58:	4618      	mov	r0, r3
 800de5a:	f005 fbcd 	bl	80135f8 <LoRaMacMibSetRequestConfirm>

            mibReq.Type = MIB_CHANNELS_TX_POWER;
 800de5e:	2321      	movs	r3, #33	; 0x21
 800de60:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsTxPower = LmHandlerParams.TxPower;
 800de62:	4b19      	ldr	r3, [pc, #100]	; (800dec8 <LmHandlerJoin+0x130>)
 800de64:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800de68:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800de6a:	f107 030c 	add.w	r3, r7, #12
 800de6e:	4618      	mov	r0, r3
 800de70:	f005 fbc2 	bl	80135f8 <LoRaMacMibSetRequestConfirm>

            /* Tell the MAC layer which network server version are we connecting too. */
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800de74:	2329      	movs	r3, #41	; 0x29
 800de76:	733b      	strb	r3, [r7, #12]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800de78:	4b16      	ldr	r3, [pc, #88]	; (800ded4 <LmHandlerJoin+0x13c>)
 800de7a:	613b      	str	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800de7c:	f107 030c 	add.w	r3, r7, #12
 800de80:	4618      	mov	r0, r3
 800de82:	f005 fbb9 	bl	80135f8 <LoRaMacMibSetRequestConfirm>
        }

        LoRaMacStart();
 800de86:	f005 f8e1 	bl	801304c <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800de8a:	2301      	movs	r3, #1
 800de8c:	733b      	strb	r3, [r7, #12]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800de8e:	2301      	movs	r3, #1
 800de90:	743b      	strb	r3, [r7, #16]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800de92:	f107 030c 	add.w	r3, r7, #12
 800de96:	4618      	mov	r0, r3
 800de98:	f005 fbae 	bl	80135f8 <LoRaMacMibSetRequestConfirm>
        LmHandlerRequestClass( LmHandlerParams.DefaultClass );
#endif /* LORAMAC_VERSION */
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( ( CtxRestoreDone == false ) || ( forceRejoin == true ) )
 800de9c:	4b0c      	ldr	r3, [pc, #48]	; (800ded0 <LmHandlerJoin+0x138>)
 800de9e:	781b      	ldrb	r3, [r3, #0]
 800dea0:	f083 0301 	eor.w	r3, r3, #1
 800dea4:	b2db      	uxtb	r3, r3
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d102      	bne.n	800deb0 <LmHandlerJoin+0x118>
 800deaa:	79bb      	ldrb	r3, [r7, #6]
 800deac:	2b00      	cmp	r3, #0
 800deae:	d004      	beq.n	800deba <LmHandlerJoin+0x122>
    {
        /* Starts the join procedure */
        LoRaMacMlmeRequest( &mlmeReq );
 800deb0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800deb4:	4618      	mov	r0, r3
 800deb6:	f005 ff49 	bl	8013d4c <LoRaMacMlmeRequest>
    }
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800deba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800debc:	4a06      	ldr	r2, [pc, #24]	; (800ded8 <LmHandlerJoin+0x140>)
 800debe:	6013      	str	r3, [r2, #0]
#endif /* LORAMAC_VERSION */
}
 800dec0:	bf00      	nop
 800dec2:	3748      	adds	r7, #72	; 0x48
 800dec4:	46bd      	mov	sp, r7
 800dec6:	bd80      	pop	{r7, pc}
 800dec8:	20000548 	.word	0x20000548
 800decc:	20000098 	.word	0x20000098
 800ded0:	20000686 	.word	0x20000686
 800ded4:	01000400 	.word	0x01000400
 800ded8:	2000058c 	.word	0x2000058c

0800dedc <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800dedc:	b580      	push	{r7, lr}
 800dede:	b08c      	sub	sp, #48	; 0x30
 800dee0:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800dee2:	2301      	movs	r3, #1
 800dee4:	713b      	strb	r3, [r7, #4]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800dee6:	1d3b      	adds	r3, r7, #4
 800dee8:	4618      	mov	r0, r3
 800deea:	f005 f9ad 	bl	8013248 <LoRaMacMibGetRequestConfirm>
 800deee:	4603      	mov	r3, r0
 800def0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if( status == LORAMAC_STATUS_OK )
 800def4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800def8:	2b00      	cmp	r3, #0
 800defa:	d106      	bne.n	800df0a <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800defc:	7a3b      	ldrb	r3, [r7, #8]
 800defe:	2b00      	cmp	r3, #0
 800df00:	d101      	bne.n	800df06 <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800df02:	2300      	movs	r3, #0
 800df04:	e002      	b.n	800df0c <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800df06:	2301      	movs	r3, #1
 800df08:	e000      	b.n	800df0c <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800df0a:	2300      	movs	r3, #0
    }
}
 800df0c:	4618      	mov	r0, r3
 800df0e:	3730      	adds	r7, #48	; 0x30
 800df10:	46bd      	mov	sp, r7
 800df12:	bd80      	pop	{r7, pc}

0800df14 <LmHandlerSend>:

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed,
                                      bool allowDelayedTx )
{
 800df14:	b580      	push	{r7, lr}
 800df16:	b08a      	sub	sp, #40	; 0x28
 800df18:	af00      	add	r7, sp, #0
 800df1a:	6078      	str	r0, [r7, #4]
 800df1c:	460b      	mov	r3, r1
 800df1e:	70fb      	strb	r3, [r7, #3]
 800df20:	4613      	mov	r3, r2
 800df22:	70bb      	strb	r3, [r7, #2]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800df24:	23ff      	movs	r3, #255	; 0xff
 800df26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if( LoRaMacIsBusy() == true )
 800df2a:	f002 faa7 	bl	801047c <LoRaMacIsBusy>
 800df2e:	4603      	mov	r3, r0
 800df30:	2b00      	cmp	r3, #0
 800df32:	d002      	beq.n	800df3a <LmHandlerSend+0x26>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800df34:	f06f 0301 	mvn.w	r3, #1
 800df38:	e0ab      	b.n	800e092 <LmHandlerSend+0x17e>
    }

    if( LoRaMacIsStopped() == true )
 800df3a:	f002 fac7 	bl	80104cc <LoRaMacIsStopped>
 800df3e:	4603      	mov	r3, r0
 800df40:	2b00      	cmp	r3, #0
 800df42:	d002      	beq.n	800df4a <LmHandlerSend+0x36>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800df44:	f06f 0302 	mvn.w	r3, #2
 800df48:	e0a3      	b.n	800e092 <LmHandlerSend+0x17e>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800df4a:	f7ff ffc7 	bl	800dedc <LmHandlerJoinStatus>
 800df4e:	4603      	mov	r3, r0
 800df50:	2b01      	cmp	r3, #1
 800df52:	d00a      	beq.n	800df6a <LmHandlerSend+0x56>
    {
        /* The network isn't joined, try again. */
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800df54:	4b51      	ldr	r3, [pc, #324]	; (800e09c <LmHandlerSend+0x188>)
 800df56:	79db      	ldrb	r3, [r3, #7]
 800df58:	4a50      	ldr	r2, [pc, #320]	; (800e09c <LmHandlerSend+0x188>)
 800df5a:	7a12      	ldrb	r2, [r2, #8]
 800df5c:	4611      	mov	r1, r2
 800df5e:	4618      	mov	r0, r3
 800df60:	f7ff ff1a 	bl	800dd98 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800df64:	f06f 0302 	mvn.w	r3, #2
 800df68:	e093      	b.n	800e092 <LmHandlerSend+0x17e>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
    }
#endif /* LORAMAC_VERSION */

    TxParams.MsgType = isTxConfirmed;
 800df6a:	4a4d      	ldr	r2, [pc, #308]	; (800e0a0 <LmHandlerSend+0x18c>)
 800df6c:	78fb      	ldrb	r3, [r7, #3]
 800df6e:	7213      	strb	r3, [r2, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800df70:	78fb      	ldrb	r3, [r7, #3]
 800df72:	2b00      	cmp	r3, #0
 800df74:	bf14      	ite	ne
 800df76:	2301      	movne	r3, #1
 800df78:	2300      	moveq	r3, #0
 800df7a:	b2db      	uxtb	r3, r3
 800df7c:	743b      	strb	r3, [r7, #16]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800df7e:	4b49      	ldr	r3, [pc, #292]	; (800e0a4 <LmHandlerSend+0x190>)
 800df80:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800df84:	77bb      	strb	r3, [r7, #30]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	785b      	ldrb	r3, [r3, #1]
 800df8a:	f107 020c 	add.w	r2, r7, #12
 800df8e:	4611      	mov	r1, r2
 800df90:	4618      	mov	r0, r3
 800df92:	f005 f8c9 	bl	8013128 <LoRaMacQueryTxPossible>
 800df96:	4603      	mov	r3, r0
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d009      	beq.n	800dfb0 <LmHandlerSend+0x9c>
    {
        /* Send empty frame in order to flush MAC commands */
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800df9c:	2300      	movs	r3, #0
 800df9e:	743b      	strb	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800dfa0:	2300      	movs	r3, #0
 800dfa2:	61bb      	str	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800dfa4:	2300      	movs	r3, #0
 800dfa6:	83bb      	strh	r3, [r7, #28]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 800dfa8:	23f9      	movs	r3, #249	; 0xf9
 800dfaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dfae:	e009      	b.n	800dfc4 <LmHandlerSend+0xb0>
    }
    else
    {
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	781b      	ldrb	r3, [r3, #0]
 800dfb4:	753b      	strb	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	785b      	ldrb	r3, [r3, #1]
 800dfba:	b29b      	uxth	r3, r3
 800dfbc:	83bb      	strh	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	685b      	ldr	r3, [r3, #4]
 800dfc2:	61bb      	str	r3, [r7, #24]
    }

    TxParams.AppData = *appData;
 800dfc4:	4b36      	ldr	r3, [pc, #216]	; (800e0a0 <LmHandlerSend+0x18c>)
 800dfc6:	687a      	ldr	r2, [r7, #4]
 800dfc8:	3310      	adds	r3, #16
 800dfca:	e892 0003 	ldmia.w	r2, {r0, r1}
 800dfce:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800dfd2:	4b34      	ldr	r3, [pc, #208]	; (800e0a4 <LmHandlerSend+0x190>)
 800dfd4:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800dfd8:	4b31      	ldr	r3, [pc, #196]	; (800e0a0 <LmHandlerSend+0x18c>)
 800dfda:	729a      	strb	r2, [r3, #10]

    status = LoRaMacMcpsRequest( &mcpsReq, allowDelayedTx );
 800dfdc:	78ba      	ldrb	r2, [r7, #2]
 800dfde:	f107 0310 	add.w	r3, r7, #16
 800dfe2:	4611      	mov	r1, r2
 800dfe4:	4618      	mov	r0, r3
 800dfe6:	f006 f849 	bl	801407c <LoRaMacMcpsRequest>
 800dfea:	4603      	mov	r3, r0
 800dfec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800dff0:	6a3b      	ldr	r3, [r7, #32]
 800dff2:	4a2d      	ldr	r2, [pc, #180]	; (800e0a8 <LmHandlerSend+0x194>)
 800dff4:	6013      	str	r3, [r2, #0]

    switch( status )
 800dff6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dffa:	2b11      	cmp	r3, #17
 800dffc:	d842      	bhi.n	800e084 <LmHandlerSend+0x170>
 800dffe:	a201      	add	r2, pc, #4	; (adr r2, 800e004 <LmHandlerSend+0xf0>)
 800e000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e004:	0800e04d 	.word	0x0800e04d
 800e008:	0800e065 	.word	0x0800e065
 800e00c:	0800e085 	.word	0x0800e085
 800e010:	0800e085 	.word	0x0800e085
 800e014:	0800e085 	.word	0x0800e085
 800e018:	0800e085 	.word	0x0800e085
 800e01c:	0800e085 	.word	0x0800e085
 800e020:	0800e06d 	.word	0x0800e06d
 800e024:	0800e085 	.word	0x0800e085
 800e028:	0800e085 	.word	0x0800e085
 800e02c:	0800e085 	.word	0x0800e085
 800e030:	0800e07d 	.word	0x0800e07d
 800e034:	0800e085 	.word	0x0800e085
 800e038:	0800e085 	.word	0x0800e085
 800e03c:	0800e065 	.word	0x0800e065
 800e040:	0800e065 	.word	0x0800e065
 800e044:	0800e065 	.word	0x0800e065
 800e048:	0800e075 	.word	0x0800e075
    {
        case LORAMAC_STATUS_OK:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            IsUplinkTxPending = false;
 800e04c:	4b17      	ldr	r3, [pc, #92]	; (800e0ac <LmHandlerSend+0x198>)
 800e04e:	2200      	movs	r2, #0
 800e050:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */
            if( lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED )
 800e052:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e056:	f113 0f07 	cmn.w	r3, #7
 800e05a:	d017      	beq.n	800e08c <LmHandlerSend+0x178>
            {
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800e05c:	2300      	movs	r3, #0
 800e05e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 800e062:	e013      	b.n	800e08c <LmHandlerSend+0x178>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800e064:	23fe      	movs	r3, #254	; 0xfe
 800e066:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800e06a:	e010      	b.n	800e08e <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800e06c:	23fd      	movs	r3, #253	; 0xfd
 800e06e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800e072:	e00c      	b.n	800e08e <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800e074:	23fb      	movs	r3, #251	; 0xfb
 800e076:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800e07a:	e008      	b.n	800e08e <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800e07c:	23fa      	movs	r3, #250	; 0xfa
 800e07e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800e082:	e004      	b.n	800e08e <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800e084:	23ff      	movs	r3, #255	; 0xff
 800e086:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800e08a:	e000      	b.n	800e08e <LmHandlerSend+0x17a>
            break;
 800e08c:	bf00      	nop
    }

    return lmhStatus;
 800e08e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800e092:	4618      	mov	r0, r3
 800e094:	3728      	adds	r7, #40	; 0x28
 800e096:	46bd      	mov	sp, r7
 800e098:	bd80      	pop	{r7, pc}
 800e09a:	bf00      	nop
 800e09c:	20000098 	.word	0x20000098
 800e0a0:	200000a4 	.word	0x200000a4
 800e0a4:	20000548 	.word	0x20000548
 800e0a8:	2000058c 	.word	0x2000058c
 800e0ac:	20000590 	.word	0x20000590

0800e0b0 <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	b086      	sub	sp, #24
 800e0b4:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800e0b6:	2309      	movs	r3, #9
 800e0b8:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800e0ba:	463b      	mov	r3, r7
 800e0bc:	4618      	mov	r0, r3
 800e0be:	f005 fe45 	bl	8013d4c <LoRaMacMlmeRequest>
 800e0c2:	4603      	mov	r3, r0
 800e0c4:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800e0c6:	693b      	ldr	r3, [r7, #16]
 800e0c8:	4a06      	ldr	r2, [pc, #24]	; (800e0e4 <LmHandlerDeviceTimeReq+0x34>)
 800e0ca:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 800e0cc:	7dfb      	ldrb	r3, [r7, #23]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d101      	bne.n	800e0d6 <LmHandlerDeviceTimeReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800e0d2:	2300      	movs	r3, #0
 800e0d4:	e001      	b.n	800e0da <LmHandlerDeviceTimeReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800e0d6:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800e0da:	4618      	mov	r0, r3
 800e0dc:	3718      	adds	r7, #24
 800e0de:	46bd      	mov	sp, r7
 800e0e0:	bd80      	pop	{r7, pc}
 800e0e2:	bf00      	nop
 800e0e4:	2000058c 	.word	0x2000058c

0800e0e8 <LmHandlerPingSlotReq>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerPingSlotReq( uint8_t periodicity )
{
 800e0e8:	b480      	push	{r7}
 800e0ea:	b083      	sub	sp, #12
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	4603      	mov	r3, r0
 800e0f0:	71fb      	strb	r3, [r7, #7]
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
    }
    else
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    {
        return LORAMAC_HANDLER_ERROR;
 800e0f2:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800e0f6:	4618      	mov	r0, r3
 800e0f8:	370c      	adds	r7, #12
 800e0fa:	46bd      	mov	sp, r7
 800e0fc:	bc80      	pop	{r7}
 800e0fe:	4770      	bx	lr

0800e100 <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800e100:	b580      	push	{r7, lr}
 800e102:	b08e      	sub	sp, #56	; 0x38
 800e104:	af00      	add	r7, sp, #0
 800e106:	4603      	mov	r3, r0
 800e108:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800e10a:	2300      	movs	r3, #0
 800e10c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( LoRaMacIsBusy() == true )
 800e110:	f002 f9b4 	bl	801047c <LoRaMacIsBusy>
 800e114:	4603      	mov	r3, r0
 800e116:	2b00      	cmp	r3, #0
 800e118:	d002      	beq.n	800e120 <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800e11a:	f06f 0301 	mvn.w	r3, #1
 800e11e:	e071      	b.n	800e204 <LmHandlerRequestClass+0x104>
    }

    if( LmHandlerJoinStatus() != LORAMAC_HANDLER_SET )
 800e120:	f7ff fedc 	bl	800dedc <LmHandlerJoinStatus>
 800e124:	4603      	mov	r3, r0
 800e126:	2b01      	cmp	r3, #1
 800e128:	d002      	beq.n	800e130 <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800e12a:	f06f 0302 	mvn.w	r3, #2
 800e12e:	e069      	b.n	800e204 <LmHandlerRequestClass+0x104>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800e130:	2300      	movs	r3, #0
 800e132:	733b      	strb	r3, [r7, #12]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800e134:	f107 030c 	add.w	r3, r7, #12
 800e138:	4618      	mov	r0, r3
 800e13a:	f005 f885 	bl	8013248 <LoRaMacMibGetRequestConfirm>
 800e13e:	4603      	mov	r3, r0
 800e140:	2b00      	cmp	r3, #0
 800e142:	d002      	beq.n	800e14a <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800e144:	f04f 33ff 	mov.w	r3, #4294967295
 800e148:	e05c      	b.n	800e204 <LmHandlerRequestClass+0x104>
    }
    currentClass = mibReq.Param.Class;
 800e14a:	7c3b      	ldrb	r3, [r7, #16]
 800e14c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Attempt to switch only if class update */
    if( currentClass != newClass )
 800e150:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800e154:	79fb      	ldrb	r3, [r7, #7]
 800e156:	429a      	cmp	r2, r3
 800e158:	d052      	beq.n	800e200 <LmHandlerRequestClass+0x100>
    {
        switch( newClass )
 800e15a:	79fb      	ldrb	r3, [r7, #7]
 800e15c:	2b02      	cmp	r3, #2
 800e15e:	d028      	beq.n	800e1b2 <LmHandlerRequestClass+0xb2>
 800e160:	2b02      	cmp	r3, #2
 800e162:	dc48      	bgt.n	800e1f6 <LmHandlerRequestClass+0xf6>
 800e164:	2b00      	cmp	r3, #0
 800e166:	d002      	beq.n	800e16e <LmHandlerRequestClass+0x6e>
 800e168:	2b01      	cmp	r3, #1
 800e16a:	d01e      	beq.n	800e1aa <LmHandlerRequestClass+0xaa>
                        }
                    }
                }
                break;
            default:
                break;
 800e16c:	e043      	b.n	800e1f6 <LmHandlerRequestClass+0xf6>
                    if( currentClass != CLASS_A )
 800e16e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e172:	2b00      	cmp	r3, #0
 800e174:	d041      	beq.n	800e1fa <LmHandlerRequestClass+0xfa>
                        mibReq.Param.Class = newClass;
 800e176:	79fb      	ldrb	r3, [r7, #7]
 800e178:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800e17a:	f107 030c 	add.w	r3, r7, #12
 800e17e:	4618      	mov	r0, r3
 800e180:	f005 fa3a 	bl	80135f8 <LoRaMacMibSetRequestConfirm>
 800e184:	4603      	mov	r3, r0
 800e186:	2b00      	cmp	r3, #0
 800e188:	d10b      	bne.n	800e1a2 <LmHandlerRequestClass+0xa2>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800e18a:	4b20      	ldr	r3, [pc, #128]	; (800e20c <LmHandlerRequestClass+0x10c>)
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e190:	2b00      	cmp	r3, #0
 800e192:	d032      	beq.n	800e1fa <LmHandlerRequestClass+0xfa>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800e194:	4b1d      	ldr	r3, [pc, #116]	; (800e20c <LmHandlerRequestClass+0x10c>)
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e19a:	79fa      	ldrb	r2, [r7, #7]
 800e19c:	4610      	mov	r0, r2
 800e19e:	4798      	blx	r3
                break;
 800e1a0:	e02b      	b.n	800e1fa <LmHandlerRequestClass+0xfa>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800e1a2:	23ff      	movs	r3, #255	; 0xff
 800e1a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800e1a8:	e027      	b.n	800e1fa <LmHandlerRequestClass+0xfa>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800e1aa:	23ff      	movs	r3, #255	; 0xff
 800e1ac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800e1b0:	e026      	b.n	800e200 <LmHandlerRequestClass+0x100>
                    if( currentClass != CLASS_A )
 800e1b2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d003      	beq.n	800e1c2 <LmHandlerRequestClass+0xc2>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800e1ba:	23ff      	movs	r3, #255	; 0xff
 800e1bc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800e1c0:	e01d      	b.n	800e1fe <LmHandlerRequestClass+0xfe>
                        mibReq.Param.Class = newClass;
 800e1c2:	79fb      	ldrb	r3, [r7, #7]
 800e1c4:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800e1c6:	f107 030c 	add.w	r3, r7, #12
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	f005 fa14 	bl	80135f8 <LoRaMacMibSetRequestConfirm>
 800e1d0:	4603      	mov	r3, r0
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d10b      	bne.n	800e1ee <LmHandlerRequestClass+0xee>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800e1d6:	4b0d      	ldr	r3, [pc, #52]	; (800e20c <LmHandlerRequestClass+0x10c>)
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d00e      	beq.n	800e1fe <LmHandlerRequestClass+0xfe>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800e1e0:	4b0a      	ldr	r3, [pc, #40]	; (800e20c <LmHandlerRequestClass+0x10c>)
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1e6:	79fa      	ldrb	r2, [r7, #7]
 800e1e8:	4610      	mov	r0, r2
 800e1ea:	4798      	blx	r3
                break;
 800e1ec:	e007      	b.n	800e1fe <LmHandlerRequestClass+0xfe>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800e1ee:	23ff      	movs	r3, #255	; 0xff
 800e1f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800e1f4:	e003      	b.n	800e1fe <LmHandlerRequestClass+0xfe>
                break;
 800e1f6:	bf00      	nop
 800e1f8:	e002      	b.n	800e200 <LmHandlerRequestClass+0x100>
                break;
 800e1fa:	bf00      	nop
 800e1fc:	e000      	b.n	800e200 <LmHandlerRequestClass+0x100>
                break;
 800e1fe:	bf00      	nop
        }
    }
    return errorStatus;
 800e200:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800e204:	4618      	mov	r0, r3
 800e206:	3738      	adds	r7, #56	; 0x38
 800e208:	46bd      	mov	sp, r7
 800e20a:	bd80      	pop	{r7, pc}
 800e20c:	20000560 	.word	0x20000560

0800e210 <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800e210:	b580      	push	{r7, lr}
 800e212:	b08c      	sub	sp, #48	; 0x30
 800e214:	af00      	add	r7, sp, #0
 800e216:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( deviceClass == NULL )
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d102      	bne.n	800e224 <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800e21e:	f04f 33ff 	mov.w	r3, #4294967295
 800e222:	e010      	b.n	800e246 <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800e224:	2300      	movs	r3, #0
 800e226:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800e228:	f107 0308 	add.w	r3, r7, #8
 800e22c:	4618      	mov	r0, r3
 800e22e:	f005 f80b 	bl	8013248 <LoRaMacMibGetRequestConfirm>
 800e232:	4603      	mov	r3, r0
 800e234:	2b00      	cmp	r3, #0
 800e236:	d002      	beq.n	800e23e <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800e238:	f04f 33ff 	mov.w	r3, #4294967295
 800e23c:	e003      	b.n	800e246 <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800e23e:	7b3a      	ldrb	r2, [r7, #12]
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800e244:	2300      	movs	r3, #0
}
 800e246:	4618      	mov	r0, r3
 800e248:	3730      	adds	r7, #48	; 0x30
 800e24a:	46bd      	mov	sp, r7
 800e24c:	bd80      	pop	{r7, pc}
	...

0800e250 <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800e250:	b580      	push	{r7, lr}
 800e252:	b08c      	sub	sp, #48	; 0x30
 800e254:	af00      	add	r7, sp, #0
 800e256:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if( txDatarate == NULL )
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d102      	bne.n	800e264 <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800e25e:	f04f 33ff 	mov.w	r3, #4294967295
 800e262:	e016      	b.n	800e292 <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800e264:	2320      	movs	r3, #32
 800e266:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK )
 800e268:	f107 0308 	add.w	r3, r7, #8
 800e26c:	4618      	mov	r0, r3
 800e26e:	f004 ffeb 	bl	8013248 <LoRaMacMibGetRequestConfirm>
 800e272:	4603      	mov	r3, r0
 800e274:	2b00      	cmp	r3, #0
 800e276:	d002      	beq.n	800e27e <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800e278:	f04f 33ff 	mov.w	r3, #4294967295
 800e27c:	e009      	b.n	800e292 <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800e27e:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	f993 2000 	ldrsb.w	r2, [r3]
 800e28c:	4b03      	ldr	r3, [pc, #12]	; (800e29c <LmHandlerGetTxDatarate+0x4c>)
 800e28e:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 800e290:	2300      	movs	r3, #0
}
 800e292:	4618      	mov	r0, r3
 800e294:	3730      	adds	r7, #48	; 0x30
 800e296:	46bd      	mov	sp, r7
 800e298:	bd80      	pop	{r7, pc}
 800e29a:	bf00      	nop
 800e29c:	20000548 	.word	0x20000548

0800e2a0 <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800e2a0:	b580      	push	{r7, lr}
 800e2a2:	b08c      	sub	sp, #48	; 0x30
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800e2a8:	2323      	movs	r3, #35	; 0x23
 800e2aa:	723b      	strb	r3, [r7, #8]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	60fb      	str	r3, [r7, #12]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800e2b0:	f107 0308 	add.w	r3, r7, #8
 800e2b4:	4618      	mov	r0, r3
 800e2b6:	f005 f99f 	bl	80135f8 <LoRaMacMibSetRequestConfirm>
 800e2ba:	4603      	mov	r3, r0
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d002      	beq.n	800e2c6 <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800e2c0:	f04f 33ff 	mov.w	r3, #4294967295
 800e2c4:	e000      	b.n	800e2c8 <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800e2c6:	2300      	movs	r3, #0
}
 800e2c8:	4618      	mov	r0, r3
 800e2ca:	3730      	adds	r7, #48	; 0x30
 800e2cc:	46bd      	mov	sp, r7
 800e2ce:	bd80      	pop	{r7, pc}

0800e2d0 <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800e2d0:	b580      	push	{r7, lr}
 800e2d2:	b082      	sub	sp, #8
 800e2d4:	af00      	add	r7, sp, #0
 800e2d6:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800e2d8:	4b18      	ldr	r3, [pc, #96]	; (800e33c <McpsConfirm+0x6c>)
 800e2da:	2201      	movs	r2, #1
 800e2dc:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	785a      	ldrb	r2, [r3, #1]
 800e2e2:	4b16      	ldr	r3, [pc, #88]	; (800e33c <McpsConfirm+0x6c>)
 800e2e4:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	789b      	ldrb	r3, [r3, #2]
 800e2ea:	b25a      	sxtb	r2, r3
 800e2ec:	4b13      	ldr	r3, [pc, #76]	; (800e33c <McpsConfirm+0x6c>)
 800e2ee:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	68db      	ldr	r3, [r3, #12]
 800e2f4:	4a11      	ldr	r2, [pc, #68]	; (800e33c <McpsConfirm+0x6c>)
 800e2f6:	60d3      	str	r3, [r2, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800e2fe:	4b0f      	ldr	r3, [pc, #60]	; (800e33c <McpsConfirm+0x6c>)
 800e300:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	691b      	ldr	r3, [r3, #16]
 800e306:	b2da      	uxtb	r2, r3
 800e308:	4b0c      	ldr	r3, [pc, #48]	; (800e33c <McpsConfirm+0x6c>)
 800e30a:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	791b      	ldrb	r3, [r3, #4]
 800e310:	461a      	mov	r2, r3
 800e312:	4b0a      	ldr	r3, [pc, #40]	; (800e33c <McpsConfirm+0x6c>)
 800e314:	725a      	strb	r2, [r3, #9]

    if( LmHandlerCallbacks->OnTxData != NULL )
 800e316:	4b0a      	ldr	r3, [pc, #40]	; (800e340 <McpsConfirm+0x70>)
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d004      	beq.n	800e32a <McpsConfirm+0x5a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 800e320:	4b07      	ldr	r3, [pc, #28]	; (800e340 <McpsConfirm+0x70>)
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e326:	4805      	ldr	r0, [pc, #20]	; (800e33c <McpsConfirm+0x6c>)
 800e328:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800e32a:	6879      	ldr	r1, [r7, #4]
 800e32c:	2000      	movs	r0, #0
 800e32e:	f000 f9e9 	bl	800e704 <LmHandlerPackagesNotify>
}
 800e332:	bf00      	nop
 800e334:	3708      	adds	r7, #8
 800e336:	46bd      	mov	sp, r7
 800e338:	bd80      	pop	{r7, pc}
 800e33a:	bf00      	nop
 800e33c:	200000a4 	.word	0x200000a4
 800e340:	20000560 	.word	0x20000560

0800e344 <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *rxStatus )
{
 800e344:	b580      	push	{r7, lr}
 800e346:	b086      	sub	sp, #24
 800e348:	af00      	add	r7, sp, #0
 800e34a:	6078      	str	r0, [r7, #4]
 800e34c:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800e34e:	2300      	movs	r3, #0
 800e350:	73fb      	strb	r3, [r7, #15]
    RxParams.IsMcpsIndication = 1;
 800e352:	4b2d      	ldr	r3, [pc, #180]	; (800e408 <McpsIndication+0xc4>)
 800e354:	2201      	movs	r2, #1
 800e356:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	785a      	ldrb	r2, [r3, #1]
 800e35c:	4b2a      	ldr	r3, [pc, #168]	; (800e408 <McpsIndication+0xc4>)
 800e35e:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800e360:	4b29      	ldr	r3, [pc, #164]	; (800e408 <McpsIndication+0xc4>)
 800e362:	785b      	ldrb	r3, [r3, #1]
 800e364:	2b00      	cmp	r3, #0
 800e366:	d14b      	bne.n	800e400 <McpsIndication+0xbc>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	791b      	ldrb	r3, [r3, #4]
 800e36c:	b25a      	sxtb	r2, r3
 800e36e:	4b26      	ldr	r3, [pc, #152]	; (800e408 <McpsIndication+0xc4>)
 800e370:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800e372:	683b      	ldr	r3, [r7, #0]
 800e374:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e378:	b25a      	sxtb	r2, r3
 800e37a:	4b23      	ldr	r3, [pc, #140]	; (800e408 <McpsIndication+0xc4>)
 800e37c:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800e37e:	683b      	ldr	r3, [r7, #0]
 800e380:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800e384:	4b20      	ldr	r3, [pc, #128]	; (800e408 <McpsIndication+0xc4>)
 800e386:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800e388:	683b      	ldr	r3, [r7, #0]
 800e38a:	78da      	ldrb	r2, [r3, #3]
 800e38c:	4b1e      	ldr	r3, [pc, #120]	; (800e408 <McpsIndication+0xc4>)
 800e38e:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	691b      	ldr	r3, [r3, #16]
 800e394:	4a1c      	ldr	r2, [pc, #112]	; (800e408 <McpsIndication+0xc4>)
 800e396:	60d3      	str	r3, [r2, #12]

    appData.Port = mcpsIndication->Port;
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	78db      	ldrb	r3, [r3, #3]
 800e39c:	743b      	strb	r3, [r7, #16]
    appData.BufferSize = mcpsIndication->BufferSize;
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	7b1b      	ldrb	r3, [r3, #12]
 800e3a2:	747b      	strb	r3, [r7, #17]
    appData.Buffer = mcpsIndication->Buffer;
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	689b      	ldr	r3, [r3, #8]
 800e3a8:	617b      	str	r3, [r7, #20]

    if( LmHandlerCallbacks->OnRxData != NULL )
 800e3aa:	4b18      	ldr	r3, [pc, #96]	; (800e40c <McpsIndication+0xc8>)
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d007      	beq.n	800e3c4 <McpsIndication+0x80>
    {
        LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 800e3b4:	4b15      	ldr	r3, [pc, #84]	; (800e40c <McpsIndication+0xc8>)
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3ba:	f107 0210 	add.w	r2, r7, #16
 800e3be:	4912      	ldr	r1, [pc, #72]	; (800e408 <McpsIndication+0xc4>)
 800e3c0:	4610      	mov	r0, r2
 800e3c2:	4798      	blx	r3
    }

    if( ( LmHandlerCallbacks->OnSysTimeUpdate != NULL ) && ( mcpsIndication->DeviceTimeAnsReceived == true ) )
 800e3c4:	4b11      	ldr	r3, [pc, #68]	; (800e40c <McpsIndication+0xc8>)
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d007      	beq.n	800e3de <McpsIndication+0x9a>
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	7e1b      	ldrb	r3, [r3, #24]
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d003      	beq.n	800e3de <McpsIndication+0x9a>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800e3d6:	4b0d      	ldr	r3, [pc, #52]	; (800e40c <McpsIndication+0xc8>)
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3dc:	4798      	blx	r3
    }
    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800e3de:	6879      	ldr	r1, [r7, #4]
 800e3e0:	2001      	movs	r0, #1
 800e3e2:	f000 f98f 	bl	800e704 <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass( &deviceClass );
 800e3e6:	f107 030f 	add.w	r3, r7, #15
 800e3ea:	4618      	mov	r0, r3
 800e3ec:	f7ff ff10 	bl	800e210 <LmHandlerGetCurrentClass>
            .Port = 0
        };
        LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( mcpsIndication->IsUplinkTxPending != 0 )
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	795b      	ldrb	r3, [r3, #5]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d004      	beq.n	800e402 <McpsIndication+0xbe>
    {
        /* The server signals that it has pending data to be sent. */
        /* We schedule an uplink as soon as possible to flush the server. */
        IsUplinkTxPending = true;
 800e3f8:	4b05      	ldr	r3, [pc, #20]	; (800e410 <McpsIndication+0xcc>)
 800e3fa:	2201      	movs	r2, #1
 800e3fc:	701a      	strb	r2, [r3, #0]
 800e3fe:	e000      	b.n	800e402 <McpsIndication+0xbe>
        return;
 800e400:	bf00      	nop
    }
#endif /* LORAMAC_VERSION */
}
 800e402:	3718      	adds	r7, #24
 800e404:	46bd      	mov	sp, r7
 800e406:	bd80      	pop	{r7, pc}
 800e408:	200000c0 	.word	0x200000c0
 800e40c:	20000560 	.word	0x20000560
 800e410:	20000590 	.word	0x20000590

0800e414 <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800e414:	b580      	push	{r7, lr}
 800e416:	b08c      	sub	sp, #48	; 0x30
 800e418:	af00      	add	r7, sp, #0
 800e41a:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800e41c:	4b49      	ldr	r3, [pc, #292]	; (800e544 <MlmeConfirm+0x130>)
 800e41e:	2200      	movs	r2, #0
 800e420:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	785a      	ldrb	r2, [r3, #1]
 800e426:	4b47      	ldr	r3, [pc, #284]	; (800e544 <MlmeConfirm+0x130>)
 800e428:	705a      	strb	r2, [r3, #1]
    if( LmHandlerCallbacks->OnTxData != NULL )
 800e42a:	4b47      	ldr	r3, [pc, #284]	; (800e548 <MlmeConfirm+0x134>)
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e430:	2b00      	cmp	r3, #0
 800e432:	d004      	beq.n	800e43e <MlmeConfirm+0x2a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 800e434:	4b44      	ldr	r3, [pc, #272]	; (800e548 <MlmeConfirm+0x134>)
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e43a:	4842      	ldr	r0, [pc, #264]	; (800e544 <MlmeConfirm+0x130>)
 800e43c:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800e43e:	6879      	ldr	r1, [r7, #4]
 800e440:	2002      	movs	r0, #2
 800e442:	f000 f95f 	bl	800e704 <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	781b      	ldrb	r3, [r3, #0]
 800e44a:	3b01      	subs	r3, #1
 800e44c:	2b0b      	cmp	r3, #11
 800e44e:	d872      	bhi.n	800e536 <MlmeConfirm+0x122>
 800e450:	a201      	add	r2, pc, #4	; (adr r2, 800e458 <MlmeConfirm+0x44>)
 800e452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e456:	bf00      	nop
 800e458:	0800e489 	.word	0x0800e489
 800e45c:	0800e537 	.word	0x0800e537
 800e460:	0800e537 	.word	0x0800e537
 800e464:	0800e537 	.word	0x0800e537
 800e468:	0800e505 	.word	0x0800e505
 800e46c:	0800e537 	.word	0x0800e537
 800e470:	0800e537 	.word	0x0800e537
 800e474:	0800e537 	.word	0x0800e537
 800e478:	0800e537 	.word	0x0800e537
 800e47c:	0800e537 	.word	0x0800e537
 800e480:	0800e51d 	.word	0x0800e51d
 800e484:	0800e537 	.word	0x0800e537
    {
        case MLME_JOIN:
            {
                MibRequestConfirm_t mibReq;
                mibReq.Type = MIB_DEV_ADDR;
 800e488:	2306      	movs	r3, #6
 800e48a:	723b      	strb	r3, [r7, #8]
                LoRaMacMibGetRequestConfirm( &mibReq );
 800e48c:	f107 0308 	add.w	r3, r7, #8
 800e490:	4618      	mov	r0, r3
 800e492:	f004 fed9 	bl	8013248 <LoRaMacMibGetRequestConfirm>
                if( SecureElementSetDevAddr( JoinParams.Mode, mibReq.Param.DevAddr ) == SECURE_ELEMENT_SUCCESS )
 800e496:	4b2d      	ldr	r3, [pc, #180]	; (800e54c <MlmeConfirm+0x138>)
 800e498:	79db      	ldrb	r3, [r3, #7]
 800e49a:	68fa      	ldr	r2, [r7, #12]
 800e49c:	4611      	mov	r1, r2
 800e49e:	4618      	mov	r0, r3
 800e4a0:	f7ff fa78 	bl	800d994 <SecureElementSetDevAddr>
 800e4a4:	4603      	mov	r3, r0
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d102      	bne.n	800e4b0 <MlmeConfirm+0x9c>
                {
                    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	4a28      	ldr	r2, [pc, #160]	; (800e550 <MlmeConfirm+0x13c>)
 800e4ae:	6153      	str	r3, [r2, #20]
                }
                LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800e4b0:	4828      	ldr	r0, [pc, #160]	; (800e554 <MlmeConfirm+0x140>)
 800e4b2:	f7ff fecd 	bl	800e250 <LmHandlerGetTxDatarate>
                LmHandlerGetTxPower( &JoinParams.TxPower );
 800e4b6:	4828      	ldr	r0, [pc, #160]	; (800e558 <MlmeConfirm+0x144>)
 800e4b8:	f000 fa74 	bl	800e9a4 <LmHandlerGetTxPower>

                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800e4bc:	4b21      	ldr	r3, [pc, #132]	; (800e544 <MlmeConfirm+0x130>)
 800e4be:	785b      	ldrb	r3, [r3, #1]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d108      	bne.n	800e4d6 <MlmeConfirm+0xc2>
                {
                    /* Status is OK, node has joined the network */
                    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800e4c4:	4b21      	ldr	r3, [pc, #132]	; (800e54c <MlmeConfirm+0x138>)
 800e4c6:	2200      	movs	r2, #0
 800e4c8:	719a      	strb	r2, [r3, #6]
                    LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 800e4ca:	4b24      	ldr	r3, [pc, #144]	; (800e55c <MlmeConfirm+0x148>)
 800e4cc:	785b      	ldrb	r3, [r3, #1]
 800e4ce:	4618      	mov	r0, r3
 800e4d0:	f7ff fe16 	bl	800e100 <LmHandlerRequestClass>
 800e4d4:	e002      	b.n	800e4dc <MlmeConfirm+0xc8>
                }
                else
                {
                    /* Join was not successful. Try to join again */
                    JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800e4d6:	4b1d      	ldr	r3, [pc, #116]	; (800e54c <MlmeConfirm+0x138>)
 800e4d8:	22ff      	movs	r2, #255	; 0xff
 800e4da:	719a      	strb	r2, [r3, #6]
                }
                /* Notify upper layer */
                if( LmHandlerCallbacks->OnJoinRequest != NULL )
 800e4dc:	4b1a      	ldr	r3, [pc, #104]	; (800e548 <MlmeConfirm+0x134>)
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d004      	beq.n	800e4f0 <MlmeConfirm+0xdc>
                {
                    LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800e4e6:	4b18      	ldr	r3, [pc, #96]	; (800e548 <MlmeConfirm+0x134>)
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4ec:	4817      	ldr	r0, [pc, #92]	; (800e54c <MlmeConfirm+0x138>)
 800e4ee:	4798      	blx	r3
                }
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800e4f0:	4b14      	ldr	r3, [pc, #80]	; (800e544 <MlmeConfirm+0x130>)
 800e4f2:	785b      	ldrb	r3, [r3, #1]
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d120      	bne.n	800e53a <MlmeConfirm+0x126>
                {
                    SecureElementPrintSessionKeys( JoinParams.Mode );
 800e4f8:	4b14      	ldr	r3, [pc, #80]	; (800e54c <MlmeConfirm+0x138>)
 800e4fa:	79db      	ldrb	r3, [r3, #7]
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	f7fe fff1 	bl	800d4e4 <SecureElementPrintSessionKeys>
                }
            }
            break;
 800e502:	e01a      	b.n	800e53a <MlmeConfirm+0x126>
        case MLME_LINK_CHECK:
            {
                RxParams.LinkCheck = true;
 800e504:	4b16      	ldr	r3, [pc, #88]	; (800e560 <MlmeConfirm+0x14c>)
 800e506:	2201      	movs	r2, #1
 800e508:	745a      	strb	r2, [r3, #17]
                RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	7a1a      	ldrb	r2, [r3, #8]
 800e50e:	4b14      	ldr	r3, [pc, #80]	; (800e560 <MlmeConfirm+0x14c>)
 800e510:	749a      	strb	r2, [r3, #18]
                RxParams.NbGateways = mlmeConfirm->NbGateways;
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	7a5a      	ldrb	r2, [r3, #9]
 800e516:	4b12      	ldr	r3, [pc, #72]	; (800e560 <MlmeConfirm+0x14c>)
 800e518:	74da      	strb	r2, [r3, #19]
            }
            break;
 800e51a:	e00f      	b.n	800e53c <MlmeConfirm+0x128>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        case MLME_BEACON_ACQUISITION:
            {
                if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	785b      	ldrb	r3, [r3, #1]
 800e520:	2b00      	cmp	r3, #0
 800e522:	d105      	bne.n	800e530 <MlmeConfirm+0x11c>
                {
                    /* Beacon has been acquired */
                    /* Request server for ping slot */
                    LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 800e524:	4b0d      	ldr	r3, [pc, #52]	; (800e55c <MlmeConfirm+0x148>)
 800e526:	7c1b      	ldrb	r3, [r3, #16]
 800e528:	4618      	mov	r0, r3
 800e52a:	f7ff fddd 	bl	800e0e8 <LmHandlerPingSlotReq>
                    /* Beacon not acquired */
                    /* Request Device Time again. */
                    LmHandlerDeviceTimeReq( );
                }
            }
            break;
 800e52e:	e005      	b.n	800e53c <MlmeConfirm+0x128>
                    LmHandlerDeviceTimeReq( );
 800e530:	f7ff fdbe 	bl	800e0b0 <LmHandlerDeviceTimeReq>
            break;
 800e534:	e002      	b.n	800e53c <MlmeConfirm+0x128>
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 800e536:	bf00      	nop
 800e538:	e000      	b.n	800e53c <MlmeConfirm+0x128>
            break;
 800e53a:	bf00      	nop
    }
}
 800e53c:	bf00      	nop
 800e53e:	3730      	adds	r7, #48	; 0x30
 800e540:	46bd      	mov	sp, r7
 800e542:	bd80      	pop	{r7, pc}
 800e544:	200000a4 	.word	0x200000a4
 800e548:	20000560 	.word	0x20000560
 800e54c:	20000098 	.word	0x20000098
 800e550:	2000050c 	.word	0x2000050c
 800e554:	2000009c 	.word	0x2000009c
 800e558:	2000009d 	.word	0x2000009d
 800e55c:	20000548 	.word	0x20000548
 800e560:	200000c0 	.word	0x200000c0

0800e564 <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *rxStatus )
{
 800e564:	b580      	push	{r7, lr}
 800e566:	b082      	sub	sp, #8
 800e568:	af00      	add	r7, sp, #0
 800e56a:	6078      	str	r0, [r7, #4]
 800e56c:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800e56e:	4b20      	ldr	r3, [pc, #128]	; (800e5f0 <MlmeIndication+0x8c>)
 800e570:	2200      	movs	r2, #0
 800e572:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	785a      	ldrb	r2, [r3, #1]
 800e578:	4b1d      	ldr	r3, [pc, #116]	; (800e5f0 <MlmeIndication+0x8c>)
 800e57a:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	789b      	ldrb	r3, [r3, #2]
 800e580:	b25a      	sxtb	r2, r3
 800e582:	4b1b      	ldr	r3, [pc, #108]	; (800e5f0 <MlmeIndication+0x8c>)
 800e584:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800e586:	683b      	ldr	r3, [r7, #0]
 800e588:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e58c:	b25a      	sxtb	r2, r3
 800e58e:	4b18      	ldr	r3, [pc, #96]	; (800e5f0 <MlmeIndication+0x8c>)
 800e590:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800e592:	683b      	ldr	r3, [r7, #0]
 800e594:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800e598:	4b15      	ldr	r3, [pc, #84]	; (800e5f0 <MlmeIndication+0x8c>)
 800e59a:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800e59c:	683b      	ldr	r3, [r7, #0]
 800e59e:	78da      	ldrb	r2, [r3, #3]
 800e5a0:	4b13      	ldr	r3, [pc, #76]	; (800e5f0 <MlmeIndication+0x8c>)
 800e5a2:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	685b      	ldr	r3, [r3, #4]
 800e5a8:	4a11      	ldr	r2, [pc, #68]	; (800e5f0 <MlmeIndication+0x8c>)
 800e5aa:	60d3      	str	r3, [r2, #12]
    if( ( LmHandlerCallbacks->OnRxData != NULL ) && ( mlmeIndication->MlmeIndication != MLME_BEACON ) && ( mlmeIndication->MlmeIndication != MLME_BEACON_LOST ) )
 800e5ac:	4b11      	ldr	r3, [pc, #68]	; (800e5f4 <MlmeIndication+0x90>)
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d00d      	beq.n	800e5d2 <MlmeIndication+0x6e>
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	781b      	ldrb	r3, [r3, #0]
 800e5ba:	2b0a      	cmp	r3, #10
 800e5bc:	d009      	beq.n	800e5d2 <MlmeIndication+0x6e>
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	781b      	ldrb	r3, [r3, #0]
 800e5c2:	2b0e      	cmp	r3, #14
 800e5c4:	d005      	beq.n	800e5d2 <MlmeIndication+0x6e>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800e5c6:	4b0b      	ldr	r3, [pc, #44]	; (800e5f4 <MlmeIndication+0x90>)
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5cc:	4908      	ldr	r1, [pc, #32]	; (800e5f0 <MlmeIndication+0x8c>)
 800e5ce:	2000      	movs	r0, #0
 800e5d0:	4798      	blx	r3
    }

    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 800e5d2:	6879      	ldr	r1, [r7, #4]
 800e5d4:	2003      	movs	r0, #3
 800e5d6:	f000 f895 	bl	800e704 <LmHandlerPackagesNotify>

    switch( mlmeIndication->MlmeIndication )
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	781b      	ldrb	r3, [r3, #0]
 800e5de:	2b0a      	cmp	r3, #10
 800e5e0:	d001      	beq.n	800e5e6 <MlmeIndication+0x82>
 800e5e2:	2b0e      	cmp	r3, #14
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 800e5e4:	e000      	b.n	800e5e8 <MlmeIndication+0x84>
            break;
 800e5e6:	bf00      	nop
    }
}
 800e5e8:	bf00      	nop
 800e5ea:	3708      	adds	r7, #8
 800e5ec:	46bd      	mov	sp, r7
 800e5ee:	bd80      	pop	{r7, pc}
 800e5f0:	200000c0 	.word	0x200000c0
 800e5f4:	20000560 	.word	0x20000560

0800e5f8 <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 800e5f8:	b580      	push	{r7, lr}
 800e5fa:	b084      	sub	sp, #16
 800e5fc:	af00      	add	r7, sp, #0
 800e5fe:	4603      	mov	r3, r0
 800e600:	6039      	str	r1, [r7, #0]
 800e602:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 800e604:	2300      	movs	r3, #0
 800e606:	60fb      	str	r3, [r7, #12]
    switch( id )
 800e608:	79fb      	ldrb	r3, [r7, #7]
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d104      	bne.n	800e618 <LmHandlerPackageRegister+0x20>
    {
        case PACKAGE_ID_COMPLIANCE:
            {
                package = LmhpCompliancePackageFactory( );
 800e60e:	f000 fa8b 	bl	800eb28 <LmhpCompliancePackageFactory>
 800e612:	4603      	mov	r3, r0
 800e614:	60fb      	str	r3, [r7, #12]
                break;
 800e616:	e00d      	b.n	800e634 <LmHandlerPackageRegister+0x3c>
            }
        default:
            {
                if( LORAMAC_HANDLER_SUCCESS != LmhpPackagesRegister( id, &package ) )
 800e618:	f107 020c 	add.w	r2, r7, #12
 800e61c:	79fb      	ldrb	r3, [r7, #7]
 800e61e:	4611      	mov	r1, r2
 800e620:	4618      	mov	r0, r3
 800e622:	f000 ff73 	bl	800f50c <LmhpPackagesRegister>
 800e626:	4603      	mov	r3, r0
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d002      	beq.n	800e632 <LmHandlerPackageRegister+0x3a>
                {
                    return LORAMAC_HANDLER_ERROR;
 800e62c:	f04f 33ff 	mov.w	r3, #4294967295
 800e630:	e03b      	b.n	800e6aa <LmHandlerPackageRegister+0xb2>
                }
                break;
 800e632:	bf00      	nop
            }
    }
    if( package != NULL )
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	2b00      	cmp	r3, #0
 800e638:	d035      	beq.n	800e6a6 <LmHandlerPackageRegister+0xae>
    {
        LmHandlerPackages[id] = package;
 800e63a:	79fb      	ldrb	r3, [r7, #7]
 800e63c:	68fa      	ldr	r2, [r7, #12]
 800e63e:	491d      	ldr	r1, [pc, #116]	; (800e6b4 <LmHandlerPackageRegister+0xbc>)
 800e640:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800e644:	79fb      	ldrb	r3, [r7, #7]
 800e646:	4a1b      	ldr	r2, [pc, #108]	; (800e6b4 <LmHandlerPackageRegister+0xbc>)
 800e648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e64c:	4a1a      	ldr	r2, [pc, #104]	; (800e6b8 <LmHandlerPackageRegister+0xc0>)
 800e64e:	629a      	str	r2, [r3, #40]	; 0x28
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
 800e650:	4b1a      	ldr	r3, [pc, #104]	; (800e6bc <LmHandlerPackageRegister+0xc4>)
 800e652:	681a      	ldr	r2, [r3, #0]
 800e654:	79fb      	ldrb	r3, [r7, #7]
 800e656:	4917      	ldr	r1, [pc, #92]	; (800e6b4 <LmHandlerPackageRegister+0xbc>)
 800e658:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800e65c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800e65e:	631a      	str	r2, [r3, #48]	; 0x30
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
 800e660:	4b16      	ldr	r3, [pc, #88]	; (800e6bc <LmHandlerPackageRegister+0xc4>)
 800e662:	681a      	ldr	r2, [r3, #0]
 800e664:	79fb      	ldrb	r3, [r7, #7]
 800e666:	4913      	ldr	r1, [pc, #76]	; (800e6b4 <LmHandlerPackageRegister+0xbc>)
 800e668:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800e66c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800e66e:	635a      	str	r2, [r3, #52]	; 0x34
#endif /* LORAMAC_VERSION */
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800e670:	79fb      	ldrb	r3, [r7, #7]
 800e672:	4a10      	ldr	r2, [pc, #64]	; (800e6b4 <LmHandlerPackageRegister+0xbc>)
 800e674:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e678:	4a11      	ldr	r2, [pc, #68]	; (800e6c0 <LmHandlerPackageRegister+0xc8>)
 800e67a:	62da      	str	r2, [r3, #44]	; 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800e67c:	4b0f      	ldr	r3, [pc, #60]	; (800e6bc <LmHandlerPackageRegister+0xc4>)
 800e67e:	681a      	ldr	r2, [r3, #0]
 800e680:	79fb      	ldrb	r3, [r7, #7]
 800e682:	490c      	ldr	r1, [pc, #48]	; (800e6b4 <LmHandlerPackageRegister+0xbc>)
 800e684:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800e688:	6992      	ldr	r2, [r2, #24]
 800e68a:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800e68c:	79fb      	ldrb	r3, [r7, #7]
 800e68e:	4a09      	ldr	r2, [pc, #36]	; (800e6b4 <LmHandlerPackageRegister+0xbc>)
 800e690:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e694:	685b      	ldr	r3, [r3, #4]
 800e696:	4a0b      	ldr	r2, [pc, #44]	; (800e6c4 <LmHandlerPackageRegister+0xcc>)
 800e698:	6851      	ldr	r1, [r2, #4]
 800e69a:	4a0a      	ldr	r2, [pc, #40]	; (800e6c4 <LmHandlerPackageRegister+0xcc>)
 800e69c:	7852      	ldrb	r2, [r2, #1]
 800e69e:	6838      	ldr	r0, [r7, #0]
 800e6a0:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 800e6a2:	2300      	movs	r3, #0
 800e6a4:	e001      	b.n	800e6aa <LmHandlerPackageRegister+0xb2>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800e6a6:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	3710      	adds	r7, #16
 800e6ae:	46bd      	mov	sp, r7
 800e6b0:	bd80      	pop	{r7, pc}
 800e6b2:	bf00      	nop
 800e6b4:	20000534 	.word	0x20000534
 800e6b8:	0800dd99 	.word	0x0800dd99
 800e6bc:	20000560 	.word	0x20000560
 800e6c0:	0800e0b1 	.word	0x0800e0b1
 800e6c4:	200000d4 	.word	0x200000d4

0800e6c8 <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 800e6c8:	b580      	push	{r7, lr}
 800e6ca:	b082      	sub	sp, #8
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	4603      	mov	r3, r0
 800e6d0:	71fb      	strb	r3, [r7, #7]
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 800e6d2:	79fb      	ldrb	r3, [r7, #7]
 800e6d4:	2b04      	cmp	r3, #4
 800e6d6:	d80e      	bhi.n	800e6f6 <LmHandlerPackageIsInitialized+0x2e>
 800e6d8:	79fb      	ldrb	r3, [r7, #7]
 800e6da:	4a09      	ldr	r2, [pc, #36]	; (800e700 <LmHandlerPackageIsInitialized+0x38>)
 800e6dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e6e0:	689b      	ldr	r3, [r3, #8]
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d007      	beq.n	800e6f6 <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800e6e6:	79fb      	ldrb	r3, [r7, #7]
 800e6e8:	4a05      	ldr	r2, [pc, #20]	; (800e700 <LmHandlerPackageIsInitialized+0x38>)
 800e6ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e6ee:	689b      	ldr	r3, [r3, #8]
 800e6f0:	4798      	blx	r3
 800e6f2:	4603      	mov	r3, r0
 800e6f4:	e000      	b.n	800e6f8 <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 800e6f6:	2300      	movs	r3, #0
    }
}
 800e6f8:	4618      	mov	r0, r3
 800e6fa:	3708      	adds	r7, #8
 800e6fc:	46bd      	mov	sp, r7
 800e6fe:	bd80      	pop	{r7, pc}
 800e700:	20000534 	.word	0x20000534

0800e704 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800e704:	b580      	push	{r7, lr}
 800e706:	b084      	sub	sp, #16
 800e708:	af00      	add	r7, sp, #0
 800e70a:	4603      	mov	r3, r0
 800e70c:	6039      	str	r1, [r7, #0]
 800e70e:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800e710:	2300      	movs	r3, #0
 800e712:	73fb      	strb	r3, [r7, #15]
 800e714:	e067      	b.n	800e7e6 <LmHandlerPackagesNotify+0xe2>
    {
        if( LmHandlerPackages[i] != NULL )
 800e716:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e71a:	4a37      	ldr	r2, [pc, #220]	; (800e7f8 <LmHandlerPackagesNotify+0xf4>)
 800e71c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e720:	2b00      	cmp	r3, #0
 800e722:	d05a      	beq.n	800e7da <LmHandlerPackagesNotify+0xd6>
        {
            switch( notifyType )
 800e724:	79fb      	ldrb	r3, [r7, #7]
 800e726:	2b03      	cmp	r3, #3
 800e728:	d84e      	bhi.n	800e7c8 <LmHandlerPackagesNotify+0xc4>
 800e72a:	a201      	add	r2, pc, #4	; (adr r2, 800e730 <LmHandlerPackagesNotify+0x2c>)
 800e72c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e730:	0800e741 	.word	0x0800e741
 800e734:	0800e763 	.word	0x0800e763
 800e738:	0800e785 	.word	0x0800e785
 800e73c:	0800e7a7 	.word	0x0800e7a7
            {
                case PACKAGE_MCPS_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800e740:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e744:	4a2c      	ldr	r2, [pc, #176]	; (800e7f8 <LmHandlerPackagesNotify+0xf4>)
 800e746:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e74a:	699b      	ldr	r3, [r3, #24]
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d03d      	beq.n	800e7cc <LmHandlerPackagesNotify+0xc8>
                        {
                            LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t * ) params );
 800e750:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e754:	4a28      	ldr	r2, [pc, #160]	; (800e7f8 <LmHandlerPackagesNotify+0xf4>)
 800e756:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e75a:	699b      	ldr	r3, [r3, #24]
 800e75c:	6838      	ldr	r0, [r7, #0]
 800e75e:	4798      	blx	r3
                        }
                        break;
 800e760:	e034      	b.n	800e7cc <LmHandlerPackagesNotify+0xc8>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
                              ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ) ) ) )
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                        if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
 800e762:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e766:	4a24      	ldr	r2, [pc, #144]	; (800e7f8 <LmHandlerPackagesNotify+0xf4>)
 800e768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e76c:	69db      	ldr	r3, [r3, #28]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d02e      	beq.n	800e7d0 <LmHandlerPackagesNotify+0xcc>
#endif /* LORAMAC_VERSION */
                        {
                            LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t * )params );
 800e772:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e776:	4a20      	ldr	r2, [pc, #128]	; (800e7f8 <LmHandlerPackagesNotify+0xf4>)
 800e778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e77c:	69db      	ldr	r3, [r3, #28]
 800e77e:	6838      	ldr	r0, [r7, #0]
 800e780:	4798      	blx	r3
                        }
                        break;
 800e782:	e025      	b.n	800e7d0 <LmHandlerPackagesNotify+0xcc>
                    }
                case PACKAGE_MLME_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800e784:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e788:	4a1b      	ldr	r2, [pc, #108]	; (800e7f8 <LmHandlerPackagesNotify+0xf4>)
 800e78a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e78e:	6a1b      	ldr	r3, [r3, #32]
 800e790:	2b00      	cmp	r3, #0
 800e792:	d01f      	beq.n	800e7d4 <LmHandlerPackagesNotify+0xd0>
                        {
                            LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t * )params );
 800e794:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e798:	4a17      	ldr	r2, [pc, #92]	; (800e7f8 <LmHandlerPackagesNotify+0xf4>)
 800e79a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e79e:	6a1b      	ldr	r3, [r3, #32]
 800e7a0:	6838      	ldr	r0, [r7, #0]
 800e7a2:	4798      	blx	r3
                        }
                        break;
 800e7a4:	e016      	b.n	800e7d4 <LmHandlerPackagesNotify+0xd0>
                    }
                case PACKAGE_MLME_INDICATION:
                    {
                        if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 800e7a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e7aa:	4a13      	ldr	r2, [pc, #76]	; (800e7f8 <LmHandlerPackagesNotify+0xf4>)
 800e7ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e7b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d010      	beq.n	800e7d8 <LmHandlerPackagesNotify+0xd4>
                        {
                            LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 800e7b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e7ba:	4a0f      	ldr	r2, [pc, #60]	; (800e7f8 <LmHandlerPackagesNotify+0xf4>)
 800e7bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e7c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7c2:	6838      	ldr	r0, [r7, #0]
 800e7c4:	4798      	blx	r3
                        }
                        break;
 800e7c6:	e007      	b.n	800e7d8 <LmHandlerPackagesNotify+0xd4>
                    }
                default:
                    {
                        break;
 800e7c8:	bf00      	nop
 800e7ca:	e006      	b.n	800e7da <LmHandlerPackagesNotify+0xd6>
                        break;
 800e7cc:	bf00      	nop
 800e7ce:	e004      	b.n	800e7da <LmHandlerPackagesNotify+0xd6>
                        break;
 800e7d0:	bf00      	nop
 800e7d2:	e002      	b.n	800e7da <LmHandlerPackagesNotify+0xd6>
                        break;
 800e7d4:	bf00      	nop
 800e7d6:	e000      	b.n	800e7da <LmHandlerPackagesNotify+0xd6>
                        break;
 800e7d8:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800e7da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e7de:	b2db      	uxtb	r3, r3
 800e7e0:	3301      	adds	r3, #1
 800e7e2:	b2db      	uxtb	r3, r3
 800e7e4:	73fb      	strb	r3, [r7, #15]
 800e7e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e7ea:	2b04      	cmp	r3, #4
 800e7ec:	dd93      	ble.n	800e716 <LmHandlerPackagesNotify+0x12>
                    }
            }
        }
    }
}
 800e7ee:	bf00      	nop
 800e7f0:	bf00      	nop
 800e7f2:	3710      	adds	r7, #16
 800e7f4:	46bd      	mov	sp, r7
 800e7f6:	bd80      	pop	{r7, pc}
 800e7f8:	20000534 	.word	0x20000534

0800e7fc <LmHandlerPackageIsTxPending>:

static bool LmHandlerPackageIsTxPending( void )
{
 800e7fc:	b580      	push	{r7, lr}
 800e7fe:	b082      	sub	sp, #8
 800e800:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800e802:	2300      	movs	r3, #0
 800e804:	71fb      	strb	r3, [r7, #7]
 800e806:	e018      	b.n	800e83a <LmHandlerPackageIsTxPending+0x3e>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        if( ( LmHandlerPackages[i] != NULL ) && ( i != PACKAGE_ID_COMPLIANCE ) )
#else
        if( LmHandlerPackages[i] != NULL )
 800e808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e80c:	4a0f      	ldr	r2, [pc, #60]	; (800e84c <LmHandlerPackageIsTxPending+0x50>)
 800e80e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e812:	2b00      	cmp	r3, #0
 800e814:	d00b      	beq.n	800e82e <LmHandlerPackageIsTxPending+0x32>
#endif /* LORAMAC_VERSION */
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 800e816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e81a:	4a0c      	ldr	r2, [pc, #48]	; (800e84c <LmHandlerPackageIsTxPending+0x50>)
 800e81c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e820:	68db      	ldr	r3, [r3, #12]
 800e822:	4798      	blx	r3
 800e824:	4603      	mov	r3, r0
 800e826:	2b00      	cmp	r3, #0
 800e828:	d001      	beq.n	800e82e <LmHandlerPackageIsTxPending+0x32>
            {
                return true;
 800e82a:	2301      	movs	r3, #1
 800e82c:	e00a      	b.n	800e844 <LmHandlerPackageIsTxPending+0x48>
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800e82e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e832:	b2db      	uxtb	r3, r3
 800e834:	3301      	adds	r3, #1
 800e836:	b2db      	uxtb	r3, r3
 800e838:	71fb      	strb	r3, [r7, #7]
 800e83a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e83e:	2b04      	cmp	r3, #4
 800e840:	dde2      	ble.n	800e808 <LmHandlerPackageIsTxPending+0xc>
            }
        }
    }
    return false;
 800e842:	2300      	movs	r3, #0
}
 800e844:	4618      	mov	r0, r3
 800e846:	3708      	adds	r7, #8
 800e848:	46bd      	mov	sp, r7
 800e84a:	bd80      	pop	{r7, pc}
 800e84c:	20000534 	.word	0x20000534

0800e850 <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 800e850:	b580      	push	{r7, lr}
 800e852:	b082      	sub	sp, #8
 800e854:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800e856:	2300      	movs	r3, #0
 800e858:	71fb      	strb	r3, [r7, #7]
 800e85a:	e022      	b.n	800e8a2 <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800e85c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e860:	4a14      	ldr	r2, [pc, #80]	; (800e8b4 <LmHandlerPackagesProcess+0x64>)
 800e862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e866:	2b00      	cmp	r3, #0
 800e868:	d015      	beq.n	800e896 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800e86a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e86e:	4a11      	ldr	r2, [pc, #68]	; (800e8b4 <LmHandlerPackagesProcess+0x64>)
 800e870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e874:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800e876:	2b00      	cmp	r3, #0
 800e878:	d00d      	beq.n	800e896 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800e87a:	79fb      	ldrb	r3, [r7, #7]
 800e87c:	4618      	mov	r0, r3
 800e87e:	f7ff ff23 	bl	800e6c8 <LmHandlerPackageIsInitialized>
 800e882:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800e884:	2b00      	cmp	r3, #0
 800e886:	d006      	beq.n	800e896 <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 800e888:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e88c:	4a09      	ldr	r2, [pc, #36]	; (800e8b4 <LmHandlerPackagesProcess+0x64>)
 800e88e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e892:	691b      	ldr	r3, [r3, #16]
 800e894:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800e896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e89a:	b2db      	uxtb	r3, r3
 800e89c:	3301      	adds	r3, #1
 800e89e:	b2db      	uxtb	r3, r3
 800e8a0:	71fb      	strb	r3, [r7, #7]
 800e8a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e8a6:	2b04      	cmp	r3, #4
 800e8a8:	ddd8      	ble.n	800e85c <LmHandlerPackagesProcess+0xc>
        }
    }
}
 800e8aa:	bf00      	nop
 800e8ac:	bf00      	nop
 800e8ae:	3708      	adds	r7, #8
 800e8b0:	46bd      	mov	sp, r7
 800e8b2:	bd80      	pop	{r7, pc}
 800e8b4:	20000534 	.word	0x20000534

0800e8b8 <LmHandlerOnTxFrameCtrlChanged>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static void LmHandlerOnTxFrameCtrlChanged( LmHandlerMsgTypes_t isTxConfirmed )
{
 800e8b8:	b580      	push	{r7, lr}
 800e8ba:	b082      	sub	sp, #8
 800e8bc:	af00      	add	r7, sp, #0
 800e8be:	4603      	mov	r3, r0
 800e8c0:	71fb      	strb	r3, [r7, #7]
    LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800e8c2:	4a09      	ldr	r2, [pc, #36]	; (800e8e8 <LmHandlerOnTxFrameCtrlChanged+0x30>)
 800e8c4:	79fb      	ldrb	r3, [r7, #7]
 800e8c6:	70d3      	strb	r3, [r2, #3]

    if (LmHandlerCallbacks->OnTxFrameCtrlChanged != NULL)
 800e8c8:	4b08      	ldr	r3, [pc, #32]	; (800e8ec <LmHandlerOnTxFrameCtrlChanged+0x34>)
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d005      	beq.n	800e8de <LmHandlerOnTxFrameCtrlChanged+0x26>
    {
        LmHandlerCallbacks->OnTxFrameCtrlChanged( isTxConfirmed );
 800e8d2:	4b06      	ldr	r3, [pc, #24]	; (800e8ec <LmHandlerOnTxFrameCtrlChanged+0x34>)
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8d8:	79fa      	ldrb	r2, [r7, #7]
 800e8da:	4610      	mov	r0, r2
 800e8dc:	4798      	blx	r3
    }
}
 800e8de:	bf00      	nop
 800e8e0:	3708      	adds	r7, #8
 800e8e2:	46bd      	mov	sp, r7
 800e8e4:	bd80      	pop	{r7, pc}
 800e8e6:	bf00      	nop
 800e8e8:	20000548 	.word	0x20000548
 800e8ec:	20000560 	.word	0x20000560

0800e8f0 <LmHandlerOnPingSlotPeriodicityChanged>:

static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity )
{
 800e8f0:	b580      	push	{r7, lr}
 800e8f2:	b082      	sub	sp, #8
 800e8f4:	af00      	add	r7, sp, #0
 800e8f6:	4603      	mov	r3, r0
 800e8f8:	71fb      	strb	r3, [r7, #7]
    LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800e8fa:	4a09      	ldr	r2, [pc, #36]	; (800e920 <LmHandlerOnPingSlotPeriodicityChanged+0x30>)
 800e8fc:	79fb      	ldrb	r3, [r7, #7]
 800e8fe:	7413      	strb	r3, [r2, #16]

    if (LmHandlerCallbacks->OnPingSlotPeriodicityChanged != NULL)
 800e900:	4b08      	ldr	r3, [pc, #32]	; (800e924 <LmHandlerOnPingSlotPeriodicityChanged+0x34>)
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e906:	2b00      	cmp	r3, #0
 800e908:	d005      	beq.n	800e916 <LmHandlerOnPingSlotPeriodicityChanged+0x26>
    {
        LmHandlerCallbacks->OnPingSlotPeriodicityChanged( pingSlotPeriodicity );
 800e90a:	4b06      	ldr	r3, [pc, #24]	; (800e924 <LmHandlerOnPingSlotPeriodicityChanged+0x34>)
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e910:	79fa      	ldrb	r2, [r7, #7]
 800e912:	4610      	mov	r0, r2
 800e914:	4798      	blx	r3
    }
}
 800e916:	bf00      	nop
 800e918:	3708      	adds	r7, #8
 800e91a:	46bd      	mov	sp, r7
 800e91c:	bd80      	pop	{r7, pc}
 800e91e:	bf00      	nop
 800e920:	20000548 	.word	0x20000548
 800e924:	20000560 	.word	0x20000560

0800e928 <LmHandlerGetVersion>:
 * ST ADDITIONAL FUNCTIONS
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion( LmHandlerVersionType_t lmhType, uint32_t *featureVersion )
{
 800e928:	b480      	push	{r7}
 800e92a:	b083      	sub	sp, #12
 800e92c:	af00      	add	r7, sp, #0
 800e92e:	4603      	mov	r3, r0
 800e930:	6039      	str	r1, [r7, #0]
 800e932:	71fb      	strb	r3, [r7, #7]
    if( featureVersion == NULL )
 800e934:	683b      	ldr	r3, [r7, #0]
 800e936:	2b00      	cmp	r3, #0
 800e938:	d102      	bne.n	800e940 <LmHandlerGetVersion+0x18>
    {
        return LORAMAC_HANDLER_ERROR;
 800e93a:	f04f 33ff 	mov.w	r3, #4294967295
 800e93e:	e00e      	b.n	800e95e <LmHandlerGetVersion+0x36>
    }

    switch( lmhType )
 800e940:	79fb      	ldrb	r3, [r7, #7]
 800e942:	2b00      	cmp	r3, #0
 800e944:	d002      	beq.n	800e94c <LmHandlerGetVersion+0x24>
 800e946:	2b01      	cmp	r3, #1
 800e948:	d004      	beq.n	800e954 <LmHandlerGetVersion+0x2c>
            break;
        case LORAMAC_HANDLER_REGION_VERSION:
            *featureVersion = REGION_VERSION;
            break;
        default:
            break;
 800e94a:	e007      	b.n	800e95c <LmHandlerGetVersion+0x34>
            *featureVersion = LORAMAC_VERSION;
 800e94c:	683b      	ldr	r3, [r7, #0]
 800e94e:	4a06      	ldr	r2, [pc, #24]	; (800e968 <LmHandlerGetVersion+0x40>)
 800e950:	601a      	str	r2, [r3, #0]
            break;
 800e952:	e003      	b.n	800e95c <LmHandlerGetVersion+0x34>
            *featureVersion = REGION_VERSION;
 800e954:	683b      	ldr	r3, [r7, #0]
 800e956:	4a05      	ldr	r2, [pc, #20]	; (800e96c <LmHandlerGetVersion+0x44>)
 800e958:	601a      	str	r2, [r3, #0]
            break;
 800e95a:	bf00      	nop
    }

    return LORAMAC_HANDLER_SUCCESS;
 800e95c:	2300      	movs	r3, #0
}
 800e95e:	4618      	mov	r0, r3
 800e960:	370c      	adds	r7, #12
 800e962:	46bd      	mov	sp, r7
 800e964:	bc80      	pop	{r7}
 800e966:	4770      	bx	lr
 800e968:	01000400 	.word	0x01000400
 800e96c:	02010001 	.word	0x02010001

0800e970 <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop( void )
{
 800e970:	b580      	push	{r7, lr}
 800e972:	af00      	add	r7, sp, #0
    if( LoRaMacDeInitialization() == LORAMAC_STATUS_OK )
 800e974:	f005 fce0 	bl	8014338 <LoRaMacDeInitialization>
 800e978:	4603      	mov	r3, r0
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d101      	bne.n	800e982 <LmHandlerStop+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800e97e:	2300      	movs	r3, #0
 800e980:	e001      	b.n	800e986 <LmHandlerStop+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800e982:	f06f 0301 	mvn.w	r3, #1
    }
}
 800e986:	4618      	mov	r0, r3
 800e988:	bd80      	pop	{r7, pc}

0800e98a <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt( void )
{
 800e98a:	b580      	push	{r7, lr}
 800e98c:	af00      	add	r7, sp, #0
    if( LoRaMacHalt() == LORAMAC_STATUS_OK )
 800e98e:	f004 fb93 	bl	80130b8 <LoRaMacHalt>
 800e992:	4603      	mov	r3, r0
 800e994:	2b00      	cmp	r3, #0
 800e996:	d101      	bne.n	800e99c <LmHandlerHalt+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800e998:	2300      	movs	r3, #0
 800e99a:	e001      	b.n	800e9a0 <LmHandlerHalt+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800e99c:	f06f 0301 	mvn.w	r3, #1
    }
}
 800e9a0:	4618      	mov	r0, r3
 800e9a2:	bd80      	pop	{r7, pc}

0800e9a4 <LmHandlerGetTxPower>:
    rxParams->Datarate = mibReq.Param.Rx2Channel.Datarate;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerGetTxPower( int8_t *txPower )
{
 800e9a4:	b580      	push	{r7, lr}
 800e9a6:	b08c      	sub	sp, #48	; 0x30
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( txPower == NULL )
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d102      	bne.n	800e9b8 <LmHandlerGetTxPower+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800e9b2:	f04f 33ff 	mov.w	r3, #4294967295
 800e9b6:	e016      	b.n	800e9e6 <LmHandlerGetTxPower+0x42>
    }

    mibReq.Type = MIB_CHANNELS_TX_POWER;
 800e9b8:	2321      	movs	r3, #33	; 0x21
 800e9ba:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800e9bc:	f107 0308 	add.w	r3, r7, #8
 800e9c0:	4618      	mov	r0, r3
 800e9c2:	f004 fc41 	bl	8013248 <LoRaMacMibGetRequestConfirm>
 800e9c6:	4603      	mov	r3, r0
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d002      	beq.n	800e9d2 <LmHandlerGetTxPower+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800e9cc:	f04f 33ff 	mov.w	r3, #4294967295
 800e9d0:	e009      	b.n	800e9e6 <LmHandlerGetTxPower+0x42>
    }

    *txPower = mibReq.Param.ChannelsTxPower;
 800e9d2:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxPower = *txPower;
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	f993 2000 	ldrsb.w	r2, [r3]
 800e9e0:	4b03      	ldr	r3, [pc, #12]	; (800e9f0 <LmHandlerGetTxPower+0x4c>)
 800e9e2:	715a      	strb	r2, [r3, #5]
    return LORAMAC_HANDLER_SUCCESS;
 800e9e4:	2300      	movs	r3, #0
}
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	3730      	adds	r7, #48	; 0x30
 800e9ea:	46bd      	mov	sp, r7
 800e9ec:	bd80      	pop	{r7, pc}
 800e9ee:	bf00      	nop
 800e9f0:	20000548 	.word	0x20000548

0800e9f4 <LmHandlerNvmDataStore>:

    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 800e9f4:	b580      	push	{r7, lr}
 800e9f6:	b08e      	sub	sp, #56	; 0x38
 800e9f8:	af00      	add	r7, sp, #0
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800e9fa:	2300      	movs	r3, #0
 800e9fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    int32_t status = NVM_DATA_OK;
 800ea00:	2300      	movs	r3, #0
 800ea02:	633b      	str	r3, [r7, #48]	; 0x30

    lmhStatus = LmHandlerHalt();
 800ea04:	f7ff ffc1 	bl	800e98a <LmHandlerHalt>
 800ea08:	4603      	mov	r3, r0
 800ea0a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( lmhStatus == LORAMAC_HANDLER_SUCCESS )
 800ea0e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d12f      	bne.n	800ea76 <LmHandlerNvmDataStore+0x82>
    {
        status = NvmDataMgmtStoreBegin();
 800ea16:	f000 f859 	bl	800eacc <NvmDataMgmtStoreBegin>
 800ea1a:	6338      	str	r0, [r7, #48]	; 0x30

        if( status == NVM_DATA_NO_UPDATED_DATA )
 800ea1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea1e:	f113 0f02 	cmn.w	r3, #2
 800ea22:	d103      	bne.n	800ea2c <LmHandlerNvmDataStore+0x38>
        {
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 800ea24:	23f8      	movs	r3, #248	; 0xf8
 800ea26:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ea2a:	e01c      	b.n	800ea66 <LmHandlerNvmDataStore+0x72>
        }
        else if( ( status != NVM_DATA_OK ) || ( LmHandlerCallbacks->OnStoreContextRequest == NULL ) )
 800ea2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d104      	bne.n	800ea3c <LmHandlerNvmDataStore+0x48>
 800ea32:	4b1b      	ldr	r3, [pc, #108]	; (800eaa0 <LmHandlerNvmDataStore+0xac>)
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	695b      	ldr	r3, [r3, #20]
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d103      	bne.n	800ea44 <LmHandlerNvmDataStore+0x50>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800ea3c:	23ff      	movs	r3, #255	; 0xff
 800ea3e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ea42:	e010      	b.n	800ea66 <LmHandlerNvmDataStore+0x72>
        }
        else
        {
            MibRequestConfirm_t mibReq;
            mibReq.Type = MIB_NVM_CTXS;
 800ea44:	2327      	movs	r3, #39	; 0x27
 800ea46:	703b      	strb	r3, [r7, #0]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800ea48:	463b      	mov	r3, r7
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	f004 fbfc 	bl	8013248 <LoRaMacMibGetRequestConfirm>
            nvm = ( LoRaMacNvmData_t * )mibReq.Param.Contexts;
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	62fb      	str	r3, [r7, #44]	; 0x2c
            nvm_size = ( ( sizeof( LoRaMacNvmData_t ) + 7 ) & ~0x07 );
 800ea54:	f44f 63ba 	mov.w	r3, #1488	; 0x5d0
 800ea58:	62bb      	str	r3, [r7, #40]	; 0x28
            LmHandlerCallbacks->OnStoreContextRequest( nvm, nvm_size );
 800ea5a:	4b11      	ldr	r3, [pc, #68]	; (800eaa0 <LmHandlerNvmDataStore+0xac>)
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	695b      	ldr	r3, [r3, #20]
 800ea60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ea62:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ea64:	4798      	blx	r3
        }

        if( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 800ea66:	f000 f847 	bl	800eaf8 <NvmDataMgmtStoreEnd>
 800ea6a:	4603      	mov	r3, r0
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d002      	beq.n	800ea76 <LmHandlerNvmDataStore+0x82>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800ea70:	23ff      	movs	r3, #255	; 0xff
 800ea72:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
    }

    if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) && ( LmHandlerCallbacks->OnNvmDataChange != NULL ) )
 800ea76:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d109      	bne.n	800ea92 <LmHandlerNvmDataStore+0x9e>
 800ea7e:	4b08      	ldr	r3, [pc, #32]	; (800eaa0 <LmHandlerNvmDataStore+0xac>)
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	69db      	ldr	r3, [r3, #28]
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d004      	beq.n	800ea92 <LmHandlerNvmDataStore+0x9e>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 800ea88:	4b05      	ldr	r3, [pc, #20]	; (800eaa0 <LmHandlerNvmDataStore+0xac>)
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	69db      	ldr	r3, [r3, #28]
 800ea8e:	2001      	movs	r0, #1
 800ea90:	4798      	blx	r3
    }

    return lmhStatus;
 800ea92:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
#else
    return LORAMAC_HANDLER_ERROR;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800ea96:	4618      	mov	r0, r3
 800ea98:	3738      	adds	r7, #56	; 0x38
 800ea9a:	46bd      	mov	sp, r7
 800ea9c:	bd80      	pop	{r7, pc}
 800ea9e:	bf00      	nop
 800eaa0:	20000560 	.word	0x20000560

0800eaa4 <NvmDataMgmtEvent>:
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
static uint16_t NvmNotifyFlags = 0;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 800eaa4:	b480      	push	{r7}
 800eaa6:	b083      	sub	sp, #12
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	4603      	mov	r3, r0
 800eaac:	80fb      	strh	r3, [r7, #6]
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
 800eaae:	4b06      	ldr	r3, [pc, #24]	; (800eac8 <NvmDataMgmtEvent+0x24>)
 800eab0:	881a      	ldrh	r2, [r3, #0]
 800eab2:	88fb      	ldrh	r3, [r7, #6]
 800eab4:	4313      	orrs	r3, r2
 800eab6:	b29a      	uxth	r2, r3
 800eab8:	4b03      	ldr	r3, [pc, #12]	; (800eac8 <NvmDataMgmtEvent+0x24>)
 800eaba:	801a      	strh	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800eabc:	bf00      	nop
 800eabe:	370c      	adds	r7, #12
 800eac0:	46bd      	mov	sp, r7
 800eac2:	bc80      	pop	{r7}
 800eac4:	4770      	bx	lr
 800eac6:	bf00      	nop
 800eac8:	20000688 	.word	0x20000688

0800eacc <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 800eacc:	b580      	push	{r7, lr}
 800eace:	af00      	add	r7, sp, #0
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Input checks */
    if( NvmNotifyFlags == LORAMAC_NVM_NOTIFY_FLAG_NONE )
 800ead0:	4b08      	ldr	r3, [pc, #32]	; (800eaf4 <NvmDataMgmtStoreBegin+0x28>)
 800ead2:	881b      	ldrh	r3, [r3, #0]
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d102      	bne.n	800eade <NvmDataMgmtStoreBegin+0x12>
    {
        /* There was no update. */
        return NVM_DATA_NO_UPDATED_DATA;
 800ead8:	f06f 0301 	mvn.w	r3, #1
 800eadc:	e008      	b.n	800eaf0 <NvmDataMgmtStoreBegin+0x24>
    }
    if( LoRaMacStop( ) != LORAMAC_STATUS_OK )
 800eade:	f004 fac3 	bl	8013068 <LoRaMacStop>
 800eae2:	4603      	mov	r3, r0
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d002      	beq.n	800eaee <NvmDataMgmtStoreBegin+0x22>
    {
        return NVM_DATA_NOT_AVAILABLE;
 800eae8:	f06f 0302 	mvn.w	r3, #2
 800eaec:	e000      	b.n	800eaf0 <NvmDataMgmtStoreBegin+0x24>
    }
    return NVM_DATA_OK;
 800eaee:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800eaf0:	4618      	mov	r0, r3
 800eaf2:	bd80      	pop	{r7, pc}
 800eaf4:	20000688 	.word	0x20000688

0800eaf8 <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 800eaf8:	b580      	push	{r7, lr}
 800eafa:	af00      	add	r7, sp, #0
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Reset notification flags */
    NvmNotifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800eafc:	4b03      	ldr	r3, [pc, #12]	; (800eb0c <NvmDataMgmtStoreEnd+0x14>)
 800eafe:	2200      	movs	r2, #0
 800eb00:	801a      	strh	r2, [r3, #0]

    /* Resume LoRaMac */
    LoRaMacStart( );
 800eb02:	f004 faa3 	bl	801304c <LoRaMacStart>
    return NVM_DATA_OK;
 800eb06:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800eb08:	4618      	mov	r0, r3
 800eb0a:	bd80      	pop	{r7, pc}
 800eb0c:	20000688 	.word	0x20000688

0800eb10 <ClassBStatusReset>:

/*!
 * Reset Beacon status structure
 */
static inline void ClassBStatusReset( void )
{
 800eb10:	b580      	push	{r7, lr}
 800eb12:	af00      	add	r7, sp, #0
    memset1( ( uint8_t * ) &ComplianceTestState.ClassBStatus, 0, sizeof( ClassBStatus_t ) / sizeof( uint8_t ) );
 800eb14:	2220      	movs	r2, #32
 800eb16:	2100      	movs	r1, #0
 800eb18:	4802      	ldr	r0, [pc, #8]	; (800eb24 <ClassBStatusReset+0x14>)
 800eb1a:	f00b fb03 	bl	801a124 <memset1>
}
 800eb1e:	bf00      	nop
 800eb20:	bd80      	pop	{r7, pc}
 800eb22:	bf00      	nop
 800eb24:	200006a0 	.word	0x200006a0

0800eb28 <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate         = NULL,  /* To be initialized by LmHandler */
    .OnSystemReset           = NULL,  /* To be initialized by LmHandler */
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 800eb28:	b480      	push	{r7}
 800eb2a:	af00      	add	r7, sp, #0
    return &CompliancePackage;
 800eb2c:	4b02      	ldr	r3, [pc, #8]	; (800eb38 <LmhpCompliancePackageFactory+0x10>)
}
 800eb2e:	4618      	mov	r0, r3
 800eb30:	46bd      	mov	sp, r7
 800eb32:	bc80      	pop	{r7}
 800eb34:	4770      	bx	lr
 800eb36:	bf00      	nop
 800eb38:	200000dc 	.word	0x200000dc

0800eb3c <LmhpComplianceInit>:

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 800eb3c:	b580      	push	{r7, lr}
 800eb3e:	b086      	sub	sp, #24
 800eb40:	af02      	add	r7, sp, #8
 800eb42:	60f8      	str	r0, [r7, #12]
 800eb44:	60b9      	str	r1, [r7, #8]
 800eb46:	4613      	mov	r3, r2
 800eb48:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d018      	beq.n	800eb82 <LmhpComplianceInit+0x46>
 800eb50:	68bb      	ldr	r3, [r7, #8]
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d015      	beq.n	800eb82 <LmhpComplianceInit+0x46>
    {
        ComplianceParams                      = ( LmhpComplianceParams_t * ) params;
 800eb56:	4a19      	ldr	r2, [pc, #100]	; (800ebbc <LmhpComplianceInit+0x80>)
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer        = dataBuffer;
 800eb5c:	4a18      	ldr	r2, [pc, #96]	; (800ebc0 <LmhpComplianceInit+0x84>)
 800eb5e:	68bb      	ldr	r3, [r7, #8]
 800eb60:	60d3      	str	r3, [r2, #12]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800eb62:	4a17      	ldr	r2, [pc, #92]	; (800ebc0 <LmhpComplianceInit+0x84>)
 800eb64:	79fb      	ldrb	r3, [r7, #7]
 800eb66:	7253      	strb	r3, [r2, #9]
        ComplianceTestState.Initialized       = true;
 800eb68:	4b15      	ldr	r3, [pc, #84]	; (800ebc0 <LmhpComplianceInit+0x84>)
 800eb6a:	2201      	movs	r2, #1
 800eb6c:	701a      	strb	r2, [r3, #0]
        TimerInit( &ProcessTimer, OnProcessTimer );
 800eb6e:	2300      	movs	r3, #0
 800eb70:	9300      	str	r3, [sp, #0]
 800eb72:	4b14      	ldr	r3, [pc, #80]	; (800ebc4 <LmhpComplianceInit+0x88>)
 800eb74:	2200      	movs	r2, #0
 800eb76:	f04f 31ff 	mov.w	r1, #4294967295
 800eb7a:	4813      	ldr	r0, [pc, #76]	; (800ebc8 <LmhpComplianceInit+0x8c>)
 800eb7c:	f00f fb8e 	bl	801e29c <UTIL_TIMER_Create>
 800eb80:	e005      	b.n	800eb8e <LmhpComplianceInit+0x52>
    }
    else
    {
        ComplianceParams                = NULL;
 800eb82:	4b0e      	ldr	r3, [pc, #56]	; (800ebbc <LmhpComplianceInit+0x80>)
 800eb84:	2200      	movs	r2, #0
 800eb86:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 800eb88:	4b0d      	ldr	r3, [pc, #52]	; (800ebc0 <LmhpComplianceInit+0x84>)
 800eb8a:	2200      	movs	r2, #0
 800eb8c:	701a      	strb	r2, [r3, #0]
    }
    ComplianceTestState.RxAppCnt = 0;
 800eb8e:	4b0c      	ldr	r3, [pc, #48]	; (800ebc0 <LmhpComplianceInit+0x84>)
 800eb90:	2200      	movs	r2, #0
 800eb92:	821a      	strh	r2, [r3, #16]
    ClassBStatusReset( );
 800eb94:	f7ff ffbc 	bl	800eb10 <ClassBStatusReset>
    ComplianceTestState.IsTxPending = false;
 800eb98:	4b09      	ldr	r3, [pc, #36]	; (800ebc0 <LmhpComplianceInit+0x84>)
 800eb9a:	2200      	movs	r2, #0
 800eb9c:	705a      	strb	r2, [r3, #1]
    ComplianceTestState.IsBeaconRxStatusIndOn = false;
 800eb9e:	4b08      	ldr	r3, [pc, #32]	; (800ebc0 <LmhpComplianceInit+0x84>)
 800eba0:	2200      	movs	r2, #0
 800eba2:	749a      	strb	r2, [r3, #18]
    ComplianceTestState.IsResetCmdPending = false;
 800eba4:	4b06      	ldr	r3, [pc, #24]	; (800ebc0 <LmhpComplianceInit+0x84>)
 800eba6:	2200      	movs	r2, #0
 800eba8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    ComplianceTestState.IsClassReqCmdPending = false;
 800ebac:	4b04      	ldr	r3, [pc, #16]	; (800ebc0 <LmhpComplianceInit+0x84>)
 800ebae:	2200      	movs	r2, #0
 800ebb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
}
 800ebb4:	bf00      	nop
 800ebb6:	3710      	adds	r7, #16
 800ebb8:	46bd      	mov	sp, r7
 800ebba:	bd80      	pop	{r7, pc}
 800ebbc:	200006c4 	.word	0x200006c4
 800ebc0:	2000068c 	.word	0x2000068c
 800ebc4:	0800f4c5 	.word	0x0800f4c5
 800ebc8:	200006c8 	.word	0x200006c8

0800ebcc <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 800ebcc:	b480      	push	{r7}
 800ebce:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 800ebd0:	4b02      	ldr	r3, [pc, #8]	; (800ebdc <LmhpComplianceIsInitialized+0x10>)
 800ebd2:	781b      	ldrb	r3, [r3, #0]
}
 800ebd4:	4618      	mov	r0, r3
 800ebd6:	46bd      	mov	sp, r7
 800ebd8:	bc80      	pop	{r7}
 800ebda:	4770      	bx	lr
 800ebdc:	2000068c 	.word	0x2000068c

0800ebe0 <LmhpComplianceIsTxPending>:

static bool LmhpComplianceIsTxPending( void )
{
 800ebe0:	b480      	push	{r7}
 800ebe2:	af00      	add	r7, sp, #0
    return ComplianceTestState.IsTxPending;
 800ebe4:	4b02      	ldr	r3, [pc, #8]	; (800ebf0 <LmhpComplianceIsTxPending+0x10>)
 800ebe6:	785b      	ldrb	r3, [r3, #1]
}
 800ebe8:	4618      	mov	r0, r3
 800ebea:	46bd      	mov	sp, r7
 800ebec:	bc80      	pop	{r7}
 800ebee:	4770      	bx	lr
 800ebf0:	2000068c 	.word	0x2000068c

0800ebf4 <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 800ebf4:	b590      	push	{r4, r7, lr}
 800ebf6:	b085      	sub	sp, #20
 800ebf8:	af00      	add	r7, sp, #0
    if( ComplianceTestState.IsTxPending == true )
 800ebfa:	4b33      	ldr	r3, [pc, #204]	; (800ecc8 <LmhpComplianceProcess+0xd4>)
 800ebfc:	785b      	ldrb	r3, [r3, #1]
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d03e      	beq.n	800ec80 <LmhpComplianceProcess+0x8c>
    {
        TimerTime_t now = TimerGetCurrentTime( );
 800ec02:	f00f fd09 	bl	801e618 <UTIL_TIMER_GetCurrentTime>
 800ec06:	60f8      	str	r0, [r7, #12]
        if( now > ( ComplianceTestState.TxPendingTimestamp + LmHandlerGetDutyCycleWaitTime( ) ) )
 800ec08:	4b2f      	ldr	r3, [pc, #188]	; (800ecc8 <LmhpComplianceProcess+0xd4>)
 800ec0a:	685c      	ldr	r4, [r3, #4]
 800ec0c:	f7ff f8ba 	bl	800dd84 <LmHandlerGetDutyCycleWaitTime>
 800ec10:	4603      	mov	r3, r0
 800ec12:	4423      	add	r3, r4
 800ec14:	68fa      	ldr	r2, [r7, #12]
 800ec16:	429a      	cmp	r2, r3
 800ec18:	d941      	bls.n	800ec9e <LmhpComplianceProcess+0xaa>
        {
            if( ComplianceTestState.DataBufferSize != 0 )
 800ec1a:	4b2b      	ldr	r3, [pc, #172]	; (800ecc8 <LmhpComplianceProcess+0xd4>)
 800ec1c:	7a9b      	ldrb	r3, [r3, #10]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d03d      	beq.n	800ec9e <LmhpComplianceProcess+0xaa>
            {
                /* Answer commands */
                LmHandlerAppData_t appData =
 800ec22:	23e0      	movs	r3, #224	; 0xe0
 800ec24:	703b      	strb	r3, [r7, #0]
                {
                    .Buffer     = ComplianceTestState.DataBuffer,
                    .BufferSize = ComplianceTestState.DataBufferSize,
 800ec26:	4b28      	ldr	r3, [pc, #160]	; (800ecc8 <LmhpComplianceProcess+0xd4>)
 800ec28:	7a9b      	ldrb	r3, [r3, #10]
                LmHandlerAppData_t appData =
 800ec2a:	707b      	strb	r3, [r7, #1]
                    .Buffer     = ComplianceTestState.DataBuffer,
 800ec2c:	4b26      	ldr	r3, [pc, #152]	; (800ecc8 <LmhpComplianceProcess+0xd4>)
 800ec2e:	68db      	ldr	r3, [r3, #12]
                LmHandlerAppData_t appData =
 800ec30:	607b      	str	r3, [r7, #4]
                    .Port       = COMPLIANCE_PORT,
                };

                LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800ec32:	23ff      	movs	r3, #255	; 0xff
 800ec34:	72fb      	strb	r3, [r7, #11]
                lmhStatus = LmHandlerSend( &appData, ComplianceTestState.IsTxConfirmed, true );
 800ec36:	4b24      	ldr	r3, [pc, #144]	; (800ecc8 <LmhpComplianceProcess+0xd4>)
 800ec38:	7a19      	ldrb	r1, [r3, #8]
 800ec3a:	463b      	mov	r3, r7
 800ec3c:	2201      	movs	r2, #1
 800ec3e:	4618      	mov	r0, r3
 800ec40:	f7ff f968 	bl	800df14 <LmHandlerSend>
 800ec44:	4603      	mov	r3, r0
 800ec46:	72fb      	strb	r3, [r7, #11]
                if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) || ( lmhStatus == LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED ) )
 800ec48:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d004      	beq.n	800ec5a <LmhpComplianceProcess+0x66>
 800ec50:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800ec54:	f113 0f07 	cmn.w	r3, #7
 800ec58:	d106      	bne.n	800ec68 <LmhpComplianceProcess+0x74>
                {
                    ComplianceTestState.IsTxPending = false;
 800ec5a:	4b1b      	ldr	r3, [pc, #108]	; (800ecc8 <LmhpComplianceProcess+0xd4>)
 800ec5c:	2200      	movs	r2, #0
 800ec5e:	705a      	strb	r2, [r3, #1]
                    ComplianceTestState.DataBufferSize = 0;
 800ec60:	4b19      	ldr	r3, [pc, #100]	; (800ecc8 <LmhpComplianceProcess+0xd4>)
 800ec62:	2200      	movs	r2, #0
 800ec64:	729a      	strb	r2, [r3, #10]
 800ec66:	e007      	b.n	800ec78 <LmhpComplianceProcess+0x84>
                }
                else
                {
                    /* try to send the message again */
                    TimerSetValue( &ProcessTimer, 1500 );
 800ec68:	f240 51dc 	movw	r1, #1500	; 0x5dc
 800ec6c:	4817      	ldr	r0, [pc, #92]	; (800eccc <LmhpComplianceProcess+0xd8>)
 800ec6e:	f00f fc29 	bl	801e4c4 <UTIL_TIMER_SetPeriod>
                    TimerStart( &ProcessTimer );
 800ec72:	4816      	ldr	r0, [pc, #88]	; (800eccc <LmhpComplianceProcess+0xd8>)
 800ec74:	f00f fb48 	bl	801e308 <UTIL_TIMER_Start>
                }

                ComplianceTestState.TxPendingTimestamp = now;
 800ec78:	4a13      	ldr	r2, [pc, #76]	; (800ecc8 <LmhpComplianceProcess+0xd4>)
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	6053      	str	r3, [r2, #4]
 800ec7e:	e00e      	b.n	800ec9e <LmhpComplianceProcess+0xaa>
        }
    }
    else
    {
        /* If no Tx is pending process other commands */
        if( ComplianceTestState.IsClassReqCmdPending == true )
 800ec80:	4b11      	ldr	r3, [pc, #68]	; (800ecc8 <LmhpComplianceProcess+0xd4>)
 800ec82:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d009      	beq.n	800ec9e <LmhpComplianceProcess+0xaa>
        {
            ComplianceTestState.IsClassReqCmdPending = false;
 800ec8a:	4b0f      	ldr	r3, [pc, #60]	; (800ecc8 <LmhpComplianceProcess+0xd4>)
 800ec8c:	2200      	movs	r2, #0
 800ec8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
            LmHandlerRequestClass( ComplianceTestState.NewClass );
 800ec92:	4b0d      	ldr	r3, [pc, #52]	; (800ecc8 <LmhpComplianceProcess+0xd4>)
 800ec94:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800ec98:	4618      	mov	r0, r3
 800ec9a:	f7ff fa31 	bl	800e100 <LmHandlerRequestClass>
        }
    }

    if( ComplianceTestState.IsResetCmdPending == true )
 800ec9e:	4b0a      	ldr	r3, [pc, #40]	; (800ecc8 <LmhpComplianceProcess+0xd4>)
 800eca0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d00a      	beq.n	800ecbe <LmhpComplianceProcess+0xca>
    {
        ComplianceTestState.IsResetCmdPending = false;
 800eca8:	4b07      	ldr	r3, [pc, #28]	; (800ecc8 <LmhpComplianceProcess+0xd4>)
 800ecaa:	2200      	movs	r2, #0
 800ecac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Call platform MCU reset API */
        if( CompliancePackage.OnSystemReset != NULL )
 800ecb0:	4b07      	ldr	r3, [pc, #28]	; (800ecd0 <LmhpComplianceProcess+0xdc>)
 800ecb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d002      	beq.n	800ecbe <LmhpComplianceProcess+0xca>
        {
            CompliancePackage.OnSystemReset( );
 800ecb8:	4b05      	ldr	r3, [pc, #20]	; (800ecd0 <LmhpComplianceProcess+0xdc>)
 800ecba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ecbc:	4798      	blx	r3
        }
    }
}
 800ecbe:	bf00      	nop
 800ecc0:	3714      	adds	r7, #20
 800ecc2:	46bd      	mov	sp, r7
 800ecc4:	bd90      	pop	{r4, r7, pc}
 800ecc6:	bf00      	nop
 800ecc8:	2000068c 	.word	0x2000068c
 800eccc:	200006c8 	.word	0x200006c8
 800ecd0:	200000dc 	.word	0x200000dc

0800ecd4 <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t *mcpsIndication )
{
 800ecd4:	b5b0      	push	{r4, r5, r7, lr}
 800ecd6:	b0a4      	sub	sp, #144	; 0x90
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	6078      	str	r0, [r7, #4]
    uint8_t cmdIndex        = 0;
 800ecdc:	2300      	movs	r3, #0
 800ecde:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    MibRequestConfirm_t mibReq;

    if( ComplianceTestState.Initialized == false )
 800ece2:	4bd0      	ldr	r3, [pc, #832]	; (800f024 <LmhpComplianceOnMcpsIndication+0x350>)
 800ece4:	781b      	ldrb	r3, [r3, #0]
 800ece6:	f083 0301 	eor.w	r3, r3, #1
 800ecea:	b2db      	uxtb	r3, r3
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	f040 83bf 	bne.w	800f470 <LmhpComplianceOnMcpsIndication+0x79c>
        return;
    }

    /* Increment the compliance certification protocol downlink counter */
    /* Not counting downlinks on FPort 0 */
    if( ( mcpsIndication->Port > 0 ) || ( mcpsIndication->AckReceived == true ) )
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	78db      	ldrb	r3, [r3, #3]
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d103      	bne.n	800ed02 <LmhpComplianceOnMcpsIndication+0x2e>
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	7b9b      	ldrb	r3, [r3, #14]
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d005      	beq.n	800ed0e <LmhpComplianceOnMcpsIndication+0x3a>
    {
        ComplianceTestState.RxAppCnt++;
 800ed02:	4bc8      	ldr	r3, [pc, #800]	; (800f024 <LmhpComplianceOnMcpsIndication+0x350>)
 800ed04:	8a1b      	ldrh	r3, [r3, #16]
 800ed06:	3301      	adds	r3, #1
 800ed08:	b29a      	uxth	r2, r3
 800ed0a:	4bc6      	ldr	r3, [pc, #792]	; (800f024 <LmhpComplianceOnMcpsIndication+0x350>)
 800ed0c:	821a      	strh	r2, [r3, #16]
    }

    if( mcpsIndication->RxData == false )
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	7b5b      	ldrb	r3, [r3, #13]
 800ed12:	f083 0301 	eor.w	r3, r3, #1
 800ed16:	b2db      	uxtb	r3, r3
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	f040 83ab 	bne.w	800f474 <LmhpComplianceOnMcpsIndication+0x7a0>
    {
        return;
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	78db      	ldrb	r3, [r3, #3]
 800ed22:	2be0      	cmp	r3, #224	; 0xe0
 800ed24:	f040 83a8 	bne.w	800f478 <LmhpComplianceOnMcpsIndication+0x7a4>
    {
        return;
    }

    ComplianceTestState.DataBufferSize = 0;
 800ed28:	4bbe      	ldr	r3, [pc, #760]	; (800f024 <LmhpComplianceOnMcpsIndication+0x350>)
 800ed2a:	2200      	movs	r2, #0
 800ed2c:	729a      	strb	r2, [r3, #10]

    switch( mcpsIndication->Buffer[cmdIndex++] )
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	689a      	ldr	r2, [r3, #8]
 800ed32:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800ed36:	1c59      	adds	r1, r3, #1
 800ed38:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800ed3c:	4413      	add	r3, r2
 800ed3e:	781b      	ldrb	r3, [r3, #0]
 800ed40:	2b7f      	cmp	r3, #127	; 0x7f
 800ed42:	f200 8372 	bhi.w	800f42a <LmhpComplianceOnMcpsIndication+0x756>
 800ed46:	a201      	add	r2, pc, #4	; (adr r2, 800ed4c <LmhpComplianceOnMcpsIndication+0x78>)
 800ed48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed4c:	0800ef4d 	.word	0x0800ef4d
 800ed50:	0800ef91 	.word	0x0800ef91
 800ed54:	0800ef9b 	.word	0x0800ef9b
 800ed58:	0800efb1 	.word	0x0800efb1
 800ed5c:	0800efd3 	.word	0x0800efd3
 800ed60:	0800f001 	.word	0x0800f001
 800ed64:	0800f02d 	.word	0x0800f02d
 800ed68:	0800f08b 	.word	0x0800f08b
 800ed6c:	0800f0e3 	.word	0x0800f0e3
 800ed70:	0800f14f 	.word	0x0800f14f
 800ed74:	0800f19f 	.word	0x0800f19f
 800ed78:	0800f42b 	.word	0x0800f42b
 800ed7c:	0800f42b 	.word	0x0800f42b
 800ed80:	0800f42b 	.word	0x0800f42b
 800ed84:	0800f42b 	.word	0x0800f42b
 800ed88:	0800f42b 	.word	0x0800f42b
 800ed8c:	0800f42b 	.word	0x0800f42b
 800ed90:	0800f42b 	.word	0x0800f42b
 800ed94:	0800f42b 	.word	0x0800f42b
 800ed98:	0800f42b 	.word	0x0800f42b
 800ed9c:	0800f42b 	.word	0x0800f42b
 800eda0:	0800f42b 	.word	0x0800f42b
 800eda4:	0800f42b 	.word	0x0800f42b
 800eda8:	0800f42b 	.word	0x0800f42b
 800edac:	0800f42b 	.word	0x0800f42b
 800edb0:	0800f42b 	.word	0x0800f42b
 800edb4:	0800f42b 	.word	0x0800f42b
 800edb8:	0800f42b 	.word	0x0800f42b
 800edbc:	0800f42b 	.word	0x0800f42b
 800edc0:	0800f42b 	.word	0x0800f42b
 800edc4:	0800f42b 	.word	0x0800f42b
 800edc8:	0800f42b 	.word	0x0800f42b
 800edcc:	0800f1a7 	.word	0x0800f1a7
 800edd0:	0800f1b9 	.word	0x0800f1b9
 800edd4:	0800f1c1 	.word	0x0800f1c1
 800edd8:	0800f42b 	.word	0x0800f42b
 800eddc:	0800f42b 	.word	0x0800f42b
 800ede0:	0800f42b 	.word	0x0800f42b
 800ede4:	0800f42b 	.word	0x0800f42b
 800ede8:	0800f42b 	.word	0x0800f42b
 800edec:	0800f42b 	.word	0x0800f42b
 800edf0:	0800f42b 	.word	0x0800f42b
 800edf4:	0800f42b 	.word	0x0800f42b
 800edf8:	0800f42b 	.word	0x0800f42b
 800edfc:	0800f42b 	.word	0x0800f42b
 800ee00:	0800f42b 	.word	0x0800f42b
 800ee04:	0800f42b 	.word	0x0800f42b
 800ee08:	0800f42b 	.word	0x0800f42b
 800ee0c:	0800f42b 	.word	0x0800f42b
 800ee10:	0800f42b 	.word	0x0800f42b
 800ee14:	0800f42b 	.word	0x0800f42b
 800ee18:	0800f42b 	.word	0x0800f42b
 800ee1c:	0800f42b 	.word	0x0800f42b
 800ee20:	0800f42b 	.word	0x0800f42b
 800ee24:	0800f42b 	.word	0x0800f42b
 800ee28:	0800f42b 	.word	0x0800f42b
 800ee2c:	0800f42b 	.word	0x0800f42b
 800ee30:	0800f42b 	.word	0x0800f42b
 800ee34:	0800f42b 	.word	0x0800f42b
 800ee38:	0800f42b 	.word	0x0800f42b
 800ee3c:	0800f42b 	.word	0x0800f42b
 800ee40:	0800f42b 	.word	0x0800f42b
 800ee44:	0800f42b 	.word	0x0800f42b
 800ee48:	0800f42b 	.word	0x0800f42b
 800ee4c:	0800f42b 	.word	0x0800f42b
 800ee50:	0800f42b 	.word	0x0800f42b
 800ee54:	0800f42b 	.word	0x0800f42b
 800ee58:	0800f42b 	.word	0x0800f42b
 800ee5c:	0800f42b 	.word	0x0800f42b
 800ee60:	0800f42b 	.word	0x0800f42b
 800ee64:	0800f42b 	.word	0x0800f42b
 800ee68:	0800f42b 	.word	0x0800f42b
 800ee6c:	0800f42b 	.word	0x0800f42b
 800ee70:	0800f42b 	.word	0x0800f42b
 800ee74:	0800f42b 	.word	0x0800f42b
 800ee78:	0800f42b 	.word	0x0800f42b
 800ee7c:	0800f42b 	.word	0x0800f42b
 800ee80:	0800f42b 	.word	0x0800f42b
 800ee84:	0800f42b 	.word	0x0800f42b
 800ee88:	0800f42b 	.word	0x0800f42b
 800ee8c:	0800f42b 	.word	0x0800f42b
 800ee90:	0800f42b 	.word	0x0800f42b
 800ee94:	0800f42b 	.word	0x0800f42b
 800ee98:	0800f42b 	.word	0x0800f42b
 800ee9c:	0800f42b 	.word	0x0800f42b
 800eea0:	0800f42b 	.word	0x0800f42b
 800eea4:	0800f42b 	.word	0x0800f42b
 800eea8:	0800f42b 	.word	0x0800f42b
 800eeac:	0800f42b 	.word	0x0800f42b
 800eeb0:	0800f42b 	.word	0x0800f42b
 800eeb4:	0800f42b 	.word	0x0800f42b
 800eeb8:	0800f42b 	.word	0x0800f42b
 800eebc:	0800f42b 	.word	0x0800f42b
 800eec0:	0800f42b 	.word	0x0800f42b
 800eec4:	0800f42b 	.word	0x0800f42b
 800eec8:	0800f42b 	.word	0x0800f42b
 800eecc:	0800f42b 	.word	0x0800f42b
 800eed0:	0800f42b 	.word	0x0800f42b
 800eed4:	0800f42b 	.word	0x0800f42b
 800eed8:	0800f42b 	.word	0x0800f42b
 800eedc:	0800f42b 	.word	0x0800f42b
 800eee0:	0800f42b 	.word	0x0800f42b
 800eee4:	0800f42b 	.word	0x0800f42b
 800eee8:	0800f42b 	.word	0x0800f42b
 800eeec:	0800f42b 	.word	0x0800f42b
 800eef0:	0800f42b 	.word	0x0800f42b
 800eef4:	0800f42b 	.word	0x0800f42b
 800eef8:	0800f42b 	.word	0x0800f42b
 800eefc:	0800f42b 	.word	0x0800f42b
 800ef00:	0800f42b 	.word	0x0800f42b
 800ef04:	0800f42b 	.word	0x0800f42b
 800ef08:	0800f42b 	.word	0x0800f42b
 800ef0c:	0800f42b 	.word	0x0800f42b
 800ef10:	0800f42b 	.word	0x0800f42b
 800ef14:	0800f42b 	.word	0x0800f42b
 800ef18:	0800f42b 	.word	0x0800f42b
 800ef1c:	0800f42b 	.word	0x0800f42b
 800ef20:	0800f42b 	.word	0x0800f42b
 800ef24:	0800f42b 	.word	0x0800f42b
 800ef28:	0800f42b 	.word	0x0800f42b
 800ef2c:	0800f42b 	.word	0x0800f42b
 800ef30:	0800f42b 	.word	0x0800f42b
 800ef34:	0800f42b 	.word	0x0800f42b
 800ef38:	0800f42b 	.word	0x0800f42b
 800ef3c:	0800f42b 	.word	0x0800f42b
 800ef40:	0800f1f3 	.word	0x0800f1f3
 800ef44:	0800f2a3 	.word	0x0800f2a3
 800ef48:	0800f2d5 	.word	0x0800f2d5
    {
        case COMPLIANCE_PKG_VERSION_REQ:
            {
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_PKG_VERSION_ANS;
 800ef4c:	4b35      	ldr	r3, [pc, #212]	; (800f024 <LmhpComplianceOnMcpsIndication+0x350>)
 800ef4e:	68da      	ldr	r2, [r3, #12]
 800ef50:	4b34      	ldr	r3, [pc, #208]	; (800f024 <LmhpComplianceOnMcpsIndication+0x350>)
 800ef52:	7a9b      	ldrb	r3, [r3, #10]
 800ef54:	1c59      	adds	r1, r3, #1
 800ef56:	b2c8      	uxtb	r0, r1
 800ef58:	4932      	ldr	r1, [pc, #200]	; (800f024 <LmhpComplianceOnMcpsIndication+0x350>)
 800ef5a:	7288      	strb	r0, [r1, #10]
 800ef5c:	4413      	add	r3, r2
 800ef5e:	2200      	movs	r2, #0
 800ef60:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ID;
 800ef62:	4b30      	ldr	r3, [pc, #192]	; (800f024 <LmhpComplianceOnMcpsIndication+0x350>)
 800ef64:	68da      	ldr	r2, [r3, #12]
 800ef66:	4b2f      	ldr	r3, [pc, #188]	; (800f024 <LmhpComplianceOnMcpsIndication+0x350>)
 800ef68:	7a9b      	ldrb	r3, [r3, #10]
 800ef6a:	1c59      	adds	r1, r3, #1
 800ef6c:	b2c8      	uxtb	r0, r1
 800ef6e:	492d      	ldr	r1, [pc, #180]	; (800f024 <LmhpComplianceOnMcpsIndication+0x350>)
 800ef70:	7288      	strb	r0, [r1, #10]
 800ef72:	4413      	add	r3, r2
 800ef74:	2206      	movs	r2, #6
 800ef76:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_VERSION;
 800ef78:	4b2a      	ldr	r3, [pc, #168]	; (800f024 <LmhpComplianceOnMcpsIndication+0x350>)
 800ef7a:	68da      	ldr	r2, [r3, #12]
 800ef7c:	4b29      	ldr	r3, [pc, #164]	; (800f024 <LmhpComplianceOnMcpsIndication+0x350>)
 800ef7e:	7a9b      	ldrb	r3, [r3, #10]
 800ef80:	1c59      	adds	r1, r3, #1
 800ef82:	b2c8      	uxtb	r0, r1
 800ef84:	4927      	ldr	r1, [pc, #156]	; (800f024 <LmhpComplianceOnMcpsIndication+0x350>)
 800ef86:	7288      	strb	r0, [r1, #10]
 800ef88:	4413      	add	r3, r2
 800ef8a:	2201      	movs	r2, #1
 800ef8c:	701a      	strb	r2, [r3, #0]
                break;
 800ef8e:	e257      	b.n	800f440 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_DUT_RESET_REQ:
            {
                ComplianceTestState.IsResetCmdPending = true;
 800ef90:	4b24      	ldr	r3, [pc, #144]	; (800f024 <LmhpComplianceOnMcpsIndication+0x350>)
 800ef92:	2201      	movs	r2, #1
 800ef94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                break;
 800ef98:	e252      	b.n	800f440 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_DUT_JOIN_REQ:
            {
                if( CompliancePackage.OnJoinRequest != NULL )
 800ef9a:	4b23      	ldr	r3, [pc, #140]	; (800f028 <LmhpComplianceOnMcpsIndication+0x354>)
 800ef9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	f000 8245 	beq.w	800f42e <LmhpComplianceOnMcpsIndication+0x75a>
                {
                    CompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 800efa4:	4b20      	ldr	r3, [pc, #128]	; (800f028 <LmhpComplianceOnMcpsIndication+0x354>)
 800efa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800efa8:	2101      	movs	r1, #1
 800efaa:	2002      	movs	r0, #2
 800efac:	4798      	blx	r3
                }
                break;
 800efae:	e23e      	b.n	800f42e <LmhpComplianceOnMcpsIndication+0x75a>
            }
        case COMPLIANCE_SWITCH_CLASS_REQ:
            {
                /* CLASS_A = 0, CLASS_B = 1, CLASS_C = 2 */
                ComplianceTestState.NewClass = ( DeviceClass_t ) mcpsIndication->Buffer[cmdIndex++];
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	689a      	ldr	r2, [r3, #8]
 800efb4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800efb8:	1c59      	adds	r1, r3, #1
 800efba:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800efbe:	4413      	add	r3, r2
 800efc0:	781a      	ldrb	r2, [r3, #0]
 800efc2:	4b18      	ldr	r3, [pc, #96]	; (800f024 <LmhpComplianceOnMcpsIndication+0x350>)
 800efc4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                ComplianceTestState.IsClassReqCmdPending = true;
 800efc8:	4b16      	ldr	r3, [pc, #88]	; (800f024 <LmhpComplianceOnMcpsIndication+0x350>)
 800efca:	2201      	movs	r2, #1
 800efcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                break;
 800efd0:	e236      	b.n	800f440 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_ADR_BIT_CHANGE_REQ:
            {
                MibRequestConfirm_t mibReq;
                mibReq.Type            = MIB_ADR;
 800efd2:	2304      	movs	r3, #4
 800efd4:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = mcpsIndication->Buffer[cmdIndex++];
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	689a      	ldr	r2, [r3, #8]
 800efda:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800efde:	1c59      	adds	r1, r3, #1
 800efe0:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800efe4:	4413      	add	r3, r2
 800efe6:	781b      	ldrb	r3, [r3, #0]
 800efe8:	2b00      	cmp	r3, #0
 800efea:	bf14      	ite	ne
 800efec:	2301      	movne	r3, #1
 800efee:	2300      	moveq	r3, #0
 800eff0:	b2db      	uxtb	r3, r3
 800eff2:	733b      	strb	r3, [r7, #12]

                LoRaMacMibSetRequestConfirm( &mibReq );
 800eff4:	f107 0308 	add.w	r3, r7, #8
 800eff8:	4618      	mov	r0, r3
 800effa:	f004 fafd 	bl	80135f8 <LoRaMacMibSetRequestConfirm>
                break;
 800effe:	e21f      	b.n	800f440 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_REGIONAL_DUTY_CYCLE_CTRL_REQ:
            {
                LoRaMacTestSetDutyCycleOn( mcpsIndication->Buffer[cmdIndex++] );
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	689a      	ldr	r2, [r3, #8]
 800f004:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800f008:	1c59      	adds	r1, r3, #1
 800f00a:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800f00e:	4413      	add	r3, r2
 800f010:	781b      	ldrb	r3, [r3, #0]
 800f012:	2b00      	cmp	r3, #0
 800f014:	bf14      	ite	ne
 800f016:	2301      	movne	r3, #1
 800f018:	2300      	moveq	r3, #0
 800f01a:	b2db      	uxtb	r3, r3
 800f01c:	4618      	mov	r0, r3
 800f01e:	f005 f965 	bl	80142ec <LoRaMacTestSetDutyCycleOn>
                break;
 800f022:	e20d      	b.n	800f440 <LmhpComplianceOnMcpsIndication+0x76c>
 800f024:	2000068c 	.word	0x2000068c
 800f028:	200000dc 	.word	0x200000dc
            }
        case COMPLIANCE_TX_PERIODICITY_CHANGE_REQ:
            {
                /* Periodicity in milli-seconds */
                uint32_t periodicity[] = { 0, 5000, 10000, 20000, 30000, 40000, 50000, 60000, 120000, 240000, 480000 };
 800f02c:	4ba5      	ldr	r3, [pc, #660]	; (800f2c4 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800f02e:	f107 0408 	add.w	r4, r7, #8
 800f032:	461d      	mov	r5, r3
 800f034:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f036:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f038:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f03a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f03c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800f040:	e884 0007 	stmia.w	r4, {r0, r1, r2}
                uint8_t  index         = mcpsIndication->Buffer[cmdIndex++];
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	689a      	ldr	r2, [r3, #8]
 800f048:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800f04c:	1c59      	adds	r1, r3, #1
 800f04e:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800f052:	4413      	add	r3, r2
 800f054:	781b      	ldrb	r3, [r3, #0]
 800f056:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c

                if( index < ( sizeof( periodicity ) / sizeof( uint32_t ) ) )
 800f05a:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 800f05e:	2b0a      	cmp	r3, #10
 800f060:	f200 81e7 	bhi.w	800f432 <LmhpComplianceOnMcpsIndication+0x75e>
                {
                    if( ComplianceParams->OnTxPeriodicityChanged != NULL )
 800f064:	4b98      	ldr	r3, [pc, #608]	; (800f2c8 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	685b      	ldr	r3, [r3, #4]
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	f000 81e1 	beq.w	800f432 <LmhpComplianceOnMcpsIndication+0x75e>
                    {
                        ComplianceParams->OnTxPeriodicityChanged( periodicity[index] );
 800f070:	4b95      	ldr	r3, [pc, #596]	; (800f2c8 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	685a      	ldr	r2, [r3, #4]
 800f076:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 800f07a:	009b      	lsls	r3, r3, #2
 800f07c:	3390      	adds	r3, #144	; 0x90
 800f07e:	443b      	add	r3, r7
 800f080:	f853 3c88 	ldr.w	r3, [r3, #-136]
 800f084:	4618      	mov	r0, r3
 800f086:	4790      	blx	r2
                    }
                }
                break;
 800f088:	e1d3      	b.n	800f432 <LmhpComplianceOnMcpsIndication+0x75e>
            }
        case COMPLIANCE_TX_FRAMES_CTRL_REQ:
            {
                uint8_t frameType = mcpsIndication->Buffer[cmdIndex++];
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	689a      	ldr	r2, [r3, #8]
 800f08e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800f092:	1c59      	adds	r1, r3, #1
 800f094:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800f098:	4413      	add	r3, r2
 800f09a:	781b      	ldrb	r3, [r3, #0]
 800f09c:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d

                if( ( frameType == 1 ) || ( frameType == 2 ) )
 800f0a0:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800f0a4:	2b01      	cmp	r3, #1
 800f0a6:	d004      	beq.n	800f0b2 <LmhpComplianceOnMcpsIndication+0x3de>
 800f0a8:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800f0ac:	2b02      	cmp	r3, #2
 800f0ae:	f040 81c2 	bne.w	800f436 <LmhpComplianceOnMcpsIndication+0x762>
                {
                    ComplianceTestState.IsTxConfirmed = ( frameType != 1 ) ? LORAMAC_HANDLER_CONFIRMED_MSG : LORAMAC_HANDLER_UNCONFIRMED_MSG;
 800f0b2:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800f0b6:	2b01      	cmp	r3, #1
 800f0b8:	bf14      	ite	ne
 800f0ba:	2301      	movne	r3, #1
 800f0bc:	2300      	moveq	r3, #0
 800f0be:	b2db      	uxtb	r3, r3
 800f0c0:	461a      	mov	r2, r3
 800f0c2:	4b82      	ldr	r3, [pc, #520]	; (800f2cc <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f0c4:	721a      	strb	r2, [r3, #8]

                    if( ComplianceParams->OnTxFrameCtrlChanged != NULL )
 800f0c6:	4b80      	ldr	r3, [pc, #512]	; (800f2c8 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	689b      	ldr	r3, [r3, #8]
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	f000 81b2 	beq.w	800f436 <LmhpComplianceOnMcpsIndication+0x762>
                    {
                        ComplianceParams->OnTxFrameCtrlChanged( ComplianceTestState.IsTxConfirmed );
 800f0d2:	4b7d      	ldr	r3, [pc, #500]	; (800f2c8 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	689b      	ldr	r3, [r3, #8]
 800f0d8:	4a7c      	ldr	r2, [pc, #496]	; (800f2cc <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f0da:	7a12      	ldrb	r2, [r2, #8]
 800f0dc:	4610      	mov	r0, r2
 800f0de:	4798      	blx	r3
                    }
                }
                break;
 800f0e0:	e1a9      	b.n	800f436 <LmhpComplianceOnMcpsIndication+0x762>
            }
        case COMPLIANCE_ECHO_PAYLOAD_REQ:
            {
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ECHO_PAYLOAD_ANS;
 800f0e2:	4b7a      	ldr	r3, [pc, #488]	; (800f2cc <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f0e4:	68da      	ldr	r2, [r3, #12]
 800f0e6:	4b79      	ldr	r3, [pc, #484]	; (800f2cc <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f0e8:	7a9b      	ldrb	r3, [r3, #10]
 800f0ea:	1c59      	adds	r1, r3, #1
 800f0ec:	b2c8      	uxtb	r0, r1
 800f0ee:	4977      	ldr	r1, [pc, #476]	; (800f2cc <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f0f0:	7288      	strb	r0, [r1, #10]
 800f0f2:	4413      	add	r3, r2
 800f0f4:	2208      	movs	r2, #8
 800f0f6:	701a      	strb	r2, [r3, #0]

                for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800f0f8:	2301      	movs	r3, #1
 800f0fa:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 800f0fe:	e019      	b.n	800f134 <LmhpComplianceOnMcpsIndication+0x460>
                     i++ )
                {
                    ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	689a      	ldr	r2, [r3, #8]
 800f104:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800f108:	1c59      	adds	r1, r3, #1
 800f10a:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800f10e:	4413      	add	r3, r2
 800f110:	781a      	ldrb	r2, [r3, #0]
 800f112:	4b6e      	ldr	r3, [pc, #440]	; (800f2cc <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f114:	68d9      	ldr	r1, [r3, #12]
 800f116:	4b6d      	ldr	r3, [pc, #436]	; (800f2cc <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f118:	7a9b      	ldrb	r3, [r3, #10]
 800f11a:	1c58      	adds	r0, r3, #1
 800f11c:	b2c4      	uxtb	r4, r0
 800f11e:	486b      	ldr	r0, [pc, #428]	; (800f2cc <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f120:	7284      	strb	r4, [r0, #10]
 800f122:	440b      	add	r3, r1
 800f124:	3201      	adds	r2, #1
 800f126:	b2d2      	uxtb	r2, r2
 800f128:	701a      	strb	r2, [r3, #0]
                     i++ )
 800f12a:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800f12e:	3301      	adds	r3, #1
 800f130:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
                for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800f134:	4b65      	ldr	r3, [pc, #404]	; (800f2cc <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f136:	7a5a      	ldrb	r2, [r3, #9]
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	7b1b      	ldrb	r3, [r3, #12]
 800f13c:	4293      	cmp	r3, r2
 800f13e:	bf28      	it	cs
 800f140:	4613      	movcs	r3, r2
 800f142:	b2db      	uxtb	r3, r3
 800f144:	f897 208e 	ldrb.w	r2, [r7, #142]	; 0x8e
 800f148:	429a      	cmp	r2, r3
 800f14a:	d3d9      	bcc.n	800f100 <LmhpComplianceOnMcpsIndication+0x42c>
                }
                break;
 800f14c:	e178      	b.n	800f440 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_RX_APP_CNT_REQ:
            {
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_RX_APP_CNT_ANS;
 800f14e:	4b5f      	ldr	r3, [pc, #380]	; (800f2cc <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f150:	68da      	ldr	r2, [r3, #12]
 800f152:	4b5e      	ldr	r3, [pc, #376]	; (800f2cc <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f154:	7a9b      	ldrb	r3, [r3, #10]
 800f156:	1c59      	adds	r1, r3, #1
 800f158:	b2c8      	uxtb	r0, r1
 800f15a:	495c      	ldr	r1, [pc, #368]	; (800f2cc <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f15c:	7288      	strb	r0, [r1, #10]
 800f15e:	4413      	add	r3, r2
 800f160:	2209      	movs	r2, #9
 800f162:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt;
 800f164:	4b59      	ldr	r3, [pc, #356]	; (800f2cc <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f166:	8a18      	ldrh	r0, [r3, #16]
 800f168:	4b58      	ldr	r3, [pc, #352]	; (800f2cc <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f16a:	68da      	ldr	r2, [r3, #12]
 800f16c:	4b57      	ldr	r3, [pc, #348]	; (800f2cc <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f16e:	7a9b      	ldrb	r3, [r3, #10]
 800f170:	1c59      	adds	r1, r3, #1
 800f172:	b2cc      	uxtb	r4, r1
 800f174:	4955      	ldr	r1, [pc, #340]	; (800f2cc <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f176:	728c      	strb	r4, [r1, #10]
 800f178:	4413      	add	r3, r2
 800f17a:	b2c2      	uxtb	r2, r0
 800f17c:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt >> 8;
 800f17e:	4b53      	ldr	r3, [pc, #332]	; (800f2cc <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f180:	8a1b      	ldrh	r3, [r3, #16]
 800f182:	0a1b      	lsrs	r3, r3, #8
 800f184:	b298      	uxth	r0, r3
 800f186:	4b51      	ldr	r3, [pc, #324]	; (800f2cc <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f188:	68da      	ldr	r2, [r3, #12]
 800f18a:	4b50      	ldr	r3, [pc, #320]	; (800f2cc <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f18c:	7a9b      	ldrb	r3, [r3, #10]
 800f18e:	1c59      	adds	r1, r3, #1
 800f190:	b2cc      	uxtb	r4, r1
 800f192:	494e      	ldr	r1, [pc, #312]	; (800f2cc <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f194:	728c      	strb	r4, [r1, #10]
 800f196:	4413      	add	r3, r2
 800f198:	b2c2      	uxtb	r2, r0
 800f19a:	701a      	strb	r2, [r3, #0]
                break;
 800f19c:	e150      	b.n	800f440 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_RX_APP_CNT_RESET_REQ:
            {
                ComplianceTestState.RxAppCnt = 0;
 800f19e:	4b4b      	ldr	r3, [pc, #300]	; (800f2cc <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f1a0:	2200      	movs	r2, #0
 800f1a2:	821a      	strh	r2, [r3, #16]
                break;
 800f1a4:	e14c      	b.n	800f440 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_LINK_CHECK_REQ:
            {
                MlmeReq_t mlmeReq;
                mlmeReq.Type = MLME_LINK_CHECK;
 800f1a6:	2305      	movs	r3, #5
 800f1a8:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50

                LoRaMacMlmeRequest( &mlmeReq );
 800f1ac:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f1b0:	4618      	mov	r0, r3
 800f1b2:	f004 fdcb 	bl	8013d4c <LoRaMacMlmeRequest>
                break;
 800f1b6:	e143      	b.n	800f440 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_DEVICE_TIME_REQ:
            {
                CompliancePackage.OnDeviceTimeRequest( );
 800f1b8:	4b45      	ldr	r3, [pc, #276]	; (800f2d0 <LmhpComplianceOnMcpsIndication+0x5fc>)
 800f1ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1bc:	4798      	blx	r3
                break;
 800f1be:	e13f      	b.n	800f440 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_PING_SLOT_INFO_REQ:
            {
                ComplianceTestState.ClassBStatus.PingSlotPeriodicity = mcpsIndication->Buffer[cmdIndex++];
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	689a      	ldr	r2, [r3, #8]
 800f1c4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800f1c8:	1c59      	adds	r1, r3, #1
 800f1ca:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800f1ce:	4413      	add	r3, r2
 800f1d0:	781a      	ldrb	r2, [r3, #0]
 800f1d2:	4b3e      	ldr	r3, [pc, #248]	; (800f2cc <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f1d4:	755a      	strb	r2, [r3, #21]
                if( ComplianceParams->OnPingSlotPeriodicityChanged != NULL )
 800f1d6:	4b3c      	ldr	r3, [pc, #240]	; (800f2c8 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	68db      	ldr	r3, [r3, #12]
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	f000 812c 	beq.w	800f43a <LmhpComplianceOnMcpsIndication+0x766>
                {
                    ComplianceParams->OnPingSlotPeriodicityChanged( ComplianceTestState.ClassBStatus.PingSlotPeriodicity );
 800f1e2:	4b39      	ldr	r3, [pc, #228]	; (800f2c8 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	68db      	ldr	r3, [r3, #12]
 800f1e8:	4a38      	ldr	r2, [pc, #224]	; (800f2cc <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f1ea:	7d52      	ldrb	r2, [r2, #21]
 800f1ec:	4610      	mov	r0, r2
 800f1ee:	4798      	blx	r3
                }
                break;
 800f1f0:	e123      	b.n	800f43a <LmhpComplianceOnMcpsIndication+0x766>
            }
#endif /* CLASS_B not available */
        case COMPLIANCE_TX_CW_REQ:
            {
                MlmeReq_t mlmeReq;
                if( mcpsIndication->BufferSize == 7 )
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	7b1b      	ldrb	r3, [r3, #12]
 800f1f6:	2b07      	cmp	r3, #7
 800f1f8:	f040 8121 	bne.w	800f43e <LmhpComplianceOnMcpsIndication+0x76a>
                {
                    mlmeReq.Type = MLME_TXCW;
 800f1fc:	2306      	movs	r3, #6
 800f1fe:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
                    mlmeReq.Req.TxCw.Timeout =
                        ( uint16_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) );
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	689a      	ldr	r2, [r3, #8]
 800f206:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800f20a:	4413      	add	r3, r2
 800f20c:	781b      	ldrb	r3, [r3, #0]
 800f20e:	b21a      	sxth	r2, r3
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	6899      	ldr	r1, [r3, #8]
 800f214:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800f218:	3301      	adds	r3, #1
 800f21a:	440b      	add	r3, r1
 800f21c:	781b      	ldrb	r3, [r3, #0]
 800f21e:	021b      	lsls	r3, r3, #8
 800f220:	b21b      	sxth	r3, r3
 800f222:	4313      	orrs	r3, r2
 800f224:	b21b      	sxth	r3, r3
 800f226:	b29b      	uxth	r3, r3
                    mlmeReq.Req.TxCw.Timeout =
 800f228:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                    cmdIndex += 2;
 800f22c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800f230:	3302      	adds	r3, #2
 800f232:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
                    mlmeReq.Req.TxCw.Frequency =
                        ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	689a      	ldr	r2, [r3, #8]
 800f23a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800f23e:	4413      	add	r3, r2
 800f240:	781b      	ldrb	r3, [r3, #0]
 800f242:	4619      	mov	r1, r3
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	689a      	ldr	r2, [r3, #8]
 800f248:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800f24c:	3301      	adds	r3, #1
 800f24e:	4413      	add	r3, r2
 800f250:	781b      	ldrb	r3, [r3, #0]
 800f252:	021b      	lsls	r3, r3, #8
 800f254:	ea41 0203 	orr.w	r2, r1, r3
                                      ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	6899      	ldr	r1, [r3, #8]
 800f25c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800f260:	3302      	adds	r3, #2
 800f262:	440b      	add	r3, r1
 800f264:	781b      	ldrb	r3, [r3, #0]
 800f266:	041b      	lsls	r3, r3, #16
                        ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800f268:	4313      	orrs	r3, r2
 800f26a:	461a      	mov	r2, r3
                                      ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800f26c:	2364      	movs	r3, #100	; 0x64
 800f26e:	fb02 f303 	mul.w	r3, r2, r3
                    mlmeReq.Req.TxCw.Frequency =
 800f272:	647b      	str	r3, [r7, #68]	; 0x44
                        100;
                    cmdIndex += 3;
 800f274:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800f278:	3303      	adds	r3, #3
 800f27a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[cmdIndex++];
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	689a      	ldr	r2, [r3, #8]
 800f282:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800f286:	1c59      	adds	r1, r3, #1
 800f288:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800f28c:	4413      	add	r3, r2
 800f28e:	781b      	ldrb	r3, [r3, #0]
 800f290:	b25b      	sxtb	r3, r3
 800f292:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48

                    LoRaMacMlmeRequest( &mlmeReq );
 800f296:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800f29a:	4618      	mov	r0, r3
 800f29c:	f004 fd56 	bl	8013d4c <LoRaMacMlmeRequest>
                }
                break;
 800f2a0:	e0cd      	b.n	800f43e <LmhpComplianceOnMcpsIndication+0x76a>
            }
        case COMPLIANCE_DUT_FPORT_224_DISABLE_REQ:
            {
                mibReq.Type = MIB_IS_CERT_FPORT_ON;
 800f2a2:	233b      	movs	r3, #59	; 0x3b
 800f2a4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                mibReq.Param.IsCertPortOn = false;
 800f2a8:	2300      	movs	r3, #0
 800f2aa:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacMibSetRequestConfirm( &mibReq );
 800f2ae:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800f2b2:	4618      	mov	r0, r3
 800f2b4:	f004 f9a0 	bl	80135f8 <LoRaMacMibSetRequestConfirm>

                ComplianceTestState.IsResetCmdPending = true;
 800f2b8:	4b04      	ldr	r3, [pc, #16]	; (800f2cc <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f2ba:	2201      	movs	r2, #1
 800f2bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                break;
 800f2c0:	e0be      	b.n	800f440 <LmhpComplianceOnMcpsIndication+0x76c>
 800f2c2:	bf00      	nop
 800f2c4:	0801f53c 	.word	0x0801f53c
 800f2c8:	200006c4 	.word	0x200006c4
 800f2cc:	2000068c 	.word	0x2000068c
 800f2d0:	200000dc 	.word	0x200000dc
            {
                Version_t           lrwanVersion;
                Version_t           lrwanRpVersion;
                MibRequestConfirm_t mibReq;

                mibReq.Type = MIB_LORAWAN_VERSION;
 800f2d4:	232a      	movs	r3, #42	; 0x2a
 800f2d6:	723b      	strb	r3, [r7, #8]

                LoRaMacMibGetRequestConfirm( &mibReq );
 800f2d8:	f107 0308 	add.w	r3, r7, #8
 800f2dc:	4618      	mov	r0, r3
 800f2de:	f003 ffb3 	bl	8013248 <LoRaMacMibGetRequestConfirm>
                lrwanVersion   = mibReq.Param.LrWanVersion.LoRaWan;
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	63bb      	str	r3, [r7, #56]	; 0x38
                lrwanRpVersion = mibReq.Param.LrWanVersion.LoRaWanRegion;
 800f2e6:	693b      	ldr	r3, [r7, #16]
 800f2e8:	637b      	str	r3, [r7, #52]	; 0x34

                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_DUT_VERSION_ANS;
 800f2ea:	4b65      	ldr	r3, [pc, #404]	; (800f480 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f2ec:	68da      	ldr	r2, [r3, #12]
 800f2ee:	4b64      	ldr	r3, [pc, #400]	; (800f480 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f2f0:	7a9b      	ldrb	r3, [r3, #10]
 800f2f2:	1c59      	adds	r1, r3, #1
 800f2f4:	b2c8      	uxtb	r0, r1
 800f2f6:	4962      	ldr	r1, [pc, #392]	; (800f480 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f2f8:	7288      	strb	r0, [r1, #10]
 800f2fa:	4413      	add	r3, r2
 800f2fc:	227f      	movs	r2, #127	; 0x7f
 800f2fe:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Major;
 800f300:	4b60      	ldr	r3, [pc, #384]	; (800f484 <LmhpComplianceOnMcpsIndication+0x7b0>)
 800f302:	681a      	ldr	r2, [r3, #0]
 800f304:	4b5e      	ldr	r3, [pc, #376]	; (800f480 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f306:	68d9      	ldr	r1, [r3, #12]
 800f308:	4b5d      	ldr	r3, [pc, #372]	; (800f480 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f30a:	7a9b      	ldrb	r3, [r3, #10]
 800f30c:	1c58      	adds	r0, r3, #1
 800f30e:	b2c4      	uxtb	r4, r0
 800f310:	485b      	ldr	r0, [pc, #364]	; (800f480 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f312:	7284      	strb	r4, [r0, #10]
 800f314:	440b      	add	r3, r1
 800f316:	78d2      	ldrb	r2, [r2, #3]
 800f318:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Minor;
 800f31a:	4b5a      	ldr	r3, [pc, #360]	; (800f484 <LmhpComplianceOnMcpsIndication+0x7b0>)
 800f31c:	681a      	ldr	r2, [r3, #0]
 800f31e:	4b58      	ldr	r3, [pc, #352]	; (800f480 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f320:	68d9      	ldr	r1, [r3, #12]
 800f322:	4b57      	ldr	r3, [pc, #348]	; (800f480 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f324:	7a9b      	ldrb	r3, [r3, #10]
 800f326:	1c58      	adds	r0, r3, #1
 800f328:	b2c4      	uxtb	r4, r0
 800f32a:	4855      	ldr	r0, [pc, #340]	; (800f480 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f32c:	7284      	strb	r4, [r0, #10]
 800f32e:	440b      	add	r3, r1
 800f330:	7892      	ldrb	r2, [r2, #2]
 800f332:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Patch;
 800f334:	4b53      	ldr	r3, [pc, #332]	; (800f484 <LmhpComplianceOnMcpsIndication+0x7b0>)
 800f336:	681a      	ldr	r2, [r3, #0]
 800f338:	4b51      	ldr	r3, [pc, #324]	; (800f480 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f33a:	68d9      	ldr	r1, [r3, #12]
 800f33c:	4b50      	ldr	r3, [pc, #320]	; (800f480 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f33e:	7a9b      	ldrb	r3, [r3, #10]
 800f340:	1c58      	adds	r0, r3, #1
 800f342:	b2c4      	uxtb	r4, r0
 800f344:	484e      	ldr	r0, [pc, #312]	; (800f480 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f346:	7284      	strb	r4, [r0, #10]
 800f348:	440b      	add	r3, r1
 800f34a:	7852      	ldrb	r2, [r2, #1]
 800f34c:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Revision;
 800f34e:	4b4d      	ldr	r3, [pc, #308]	; (800f484 <LmhpComplianceOnMcpsIndication+0x7b0>)
 800f350:	681a      	ldr	r2, [r3, #0]
 800f352:	4b4b      	ldr	r3, [pc, #300]	; (800f480 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f354:	68d9      	ldr	r1, [r3, #12]
 800f356:	4b4a      	ldr	r3, [pc, #296]	; (800f480 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f358:	7a9b      	ldrb	r3, [r3, #10]
 800f35a:	1c58      	adds	r0, r3, #1
 800f35c:	b2c4      	uxtb	r4, r0
 800f35e:	4848      	ldr	r0, [pc, #288]	; (800f480 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f360:	7284      	strb	r4, [r0, #10]
 800f362:	440b      	add	r3, r1
 800f364:	7812      	ldrb	r2, [r2, #0]
 800f366:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Major;
 800f368:	4b45      	ldr	r3, [pc, #276]	; (800f480 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f36a:	68da      	ldr	r2, [r3, #12]
 800f36c:	4b44      	ldr	r3, [pc, #272]	; (800f480 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f36e:	7a9b      	ldrb	r3, [r3, #10]
 800f370:	1c59      	adds	r1, r3, #1
 800f372:	b2c8      	uxtb	r0, r1
 800f374:	4942      	ldr	r1, [pc, #264]	; (800f480 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f376:	7288      	strb	r0, [r1, #10]
 800f378:	4413      	add	r3, r2
 800f37a:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800f37e:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Minor;
 800f380:	4b3f      	ldr	r3, [pc, #252]	; (800f480 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f382:	68da      	ldr	r2, [r3, #12]
 800f384:	4b3e      	ldr	r3, [pc, #248]	; (800f480 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f386:	7a9b      	ldrb	r3, [r3, #10]
 800f388:	1c59      	adds	r1, r3, #1
 800f38a:	b2c8      	uxtb	r0, r1
 800f38c:	493c      	ldr	r1, [pc, #240]	; (800f480 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f38e:	7288      	strb	r0, [r1, #10]
 800f390:	4413      	add	r3, r2
 800f392:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 800f396:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Patch;
 800f398:	4b39      	ldr	r3, [pc, #228]	; (800f480 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f39a:	68da      	ldr	r2, [r3, #12]
 800f39c:	4b38      	ldr	r3, [pc, #224]	; (800f480 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f39e:	7a9b      	ldrb	r3, [r3, #10]
 800f3a0:	1c59      	adds	r1, r3, #1
 800f3a2:	b2c8      	uxtb	r0, r1
 800f3a4:	4936      	ldr	r1, [pc, #216]	; (800f480 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f3a6:	7288      	strb	r0, [r1, #10]
 800f3a8:	4413      	add	r3, r2
 800f3aa:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 800f3ae:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Revision;
 800f3b0:	4b33      	ldr	r3, [pc, #204]	; (800f480 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f3b2:	68da      	ldr	r2, [r3, #12]
 800f3b4:	4b32      	ldr	r3, [pc, #200]	; (800f480 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f3b6:	7a9b      	ldrb	r3, [r3, #10]
 800f3b8:	1c59      	adds	r1, r3, #1
 800f3ba:	b2c8      	uxtb	r0, r1
 800f3bc:	4930      	ldr	r1, [pc, #192]	; (800f480 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f3be:	7288      	strb	r0, [r1, #10]
 800f3c0:	4413      	add	r3, r2
 800f3c2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800f3c6:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Major;
 800f3c8:	4b2d      	ldr	r3, [pc, #180]	; (800f480 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f3ca:	68da      	ldr	r2, [r3, #12]
 800f3cc:	4b2c      	ldr	r3, [pc, #176]	; (800f480 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f3ce:	7a9b      	ldrb	r3, [r3, #10]
 800f3d0:	1c59      	adds	r1, r3, #1
 800f3d2:	b2c8      	uxtb	r0, r1
 800f3d4:	492a      	ldr	r1, [pc, #168]	; (800f480 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f3d6:	7288      	strb	r0, [r1, #10]
 800f3d8:	4413      	add	r3, r2
 800f3da:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800f3de:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Minor;
 800f3e0:	4b27      	ldr	r3, [pc, #156]	; (800f480 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f3e2:	68da      	ldr	r2, [r3, #12]
 800f3e4:	4b26      	ldr	r3, [pc, #152]	; (800f480 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f3e6:	7a9b      	ldrb	r3, [r3, #10]
 800f3e8:	1c59      	adds	r1, r3, #1
 800f3ea:	b2c8      	uxtb	r0, r1
 800f3ec:	4924      	ldr	r1, [pc, #144]	; (800f480 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f3ee:	7288      	strb	r0, [r1, #10]
 800f3f0:	4413      	add	r3, r2
 800f3f2:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800f3f6:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Patch;
 800f3f8:	4b21      	ldr	r3, [pc, #132]	; (800f480 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f3fa:	68da      	ldr	r2, [r3, #12]
 800f3fc:	4b20      	ldr	r3, [pc, #128]	; (800f480 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f3fe:	7a9b      	ldrb	r3, [r3, #10]
 800f400:	1c59      	adds	r1, r3, #1
 800f402:	b2c8      	uxtb	r0, r1
 800f404:	491e      	ldr	r1, [pc, #120]	; (800f480 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f406:	7288      	strb	r0, [r1, #10]
 800f408:	4413      	add	r3, r2
 800f40a:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800f40e:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Revision;
 800f410:	4b1b      	ldr	r3, [pc, #108]	; (800f480 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f412:	68da      	ldr	r2, [r3, #12]
 800f414:	4b1a      	ldr	r3, [pc, #104]	; (800f480 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f416:	7a9b      	ldrb	r3, [r3, #10]
 800f418:	1c59      	adds	r1, r3, #1
 800f41a:	b2c8      	uxtb	r0, r1
 800f41c:	4918      	ldr	r1, [pc, #96]	; (800f480 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f41e:	7288      	strb	r0, [r1, #10]
 800f420:	4413      	add	r3, r2
 800f422:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800f426:	701a      	strb	r2, [r3, #0]
                break;
 800f428:	e00a      	b.n	800f440 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        default:
            {
                break;
 800f42a:	bf00      	nop
 800f42c:	e008      	b.n	800f440 <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 800f42e:	bf00      	nop
 800f430:	e006      	b.n	800f440 <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 800f432:	bf00      	nop
 800f434:	e004      	b.n	800f440 <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 800f436:	bf00      	nop
 800f438:	e002      	b.n	800f440 <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 800f43a:	bf00      	nop
 800f43c:	e000      	b.n	800f440 <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 800f43e:	bf00      	nop
            }
    }

    if( ComplianceTestState.DataBufferSize != 0 )
 800f440:	4b0f      	ldr	r3, [pc, #60]	; (800f480 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f442:	7a9b      	ldrb	r3, [r3, #10]
 800f444:	2b00      	cmp	r3, #0
 800f446:	d00c      	beq.n	800f462 <LmhpComplianceOnMcpsIndication+0x78e>
    {
        if( ProcessTimer.IsRunning == 0U)
 800f448:	4b0f      	ldr	r3, [pc, #60]	; (800f488 <LmhpComplianceOnMcpsIndication+0x7b4>)
 800f44a:	7a5b      	ldrb	r3, [r3, #9]
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d114      	bne.n	800f47a <LmhpComplianceOnMcpsIndication+0x7a6>
        {
            TimerSetValue( &ProcessTimer, 1000 );
 800f450:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800f454:	480c      	ldr	r0, [pc, #48]	; (800f488 <LmhpComplianceOnMcpsIndication+0x7b4>)
 800f456:	f00f f835 	bl	801e4c4 <UTIL_TIMER_SetPeriod>
            TimerStart( &ProcessTimer );
 800f45a:	480b      	ldr	r0, [pc, #44]	; (800f488 <LmhpComplianceOnMcpsIndication+0x7b4>)
 800f45c:	f00e ff54 	bl	801e308 <UTIL_TIMER_Start>
 800f460:	e00b      	b.n	800f47a <LmhpComplianceOnMcpsIndication+0x7a6>
        }
    }
    else
    {
        /* Abort any pending Tx as a new command has been processed */
        TimerStop( &ProcessTimer );
 800f462:	4809      	ldr	r0, [pc, #36]	; (800f488 <LmhpComplianceOnMcpsIndication+0x7b4>)
 800f464:	f00e ffbe 	bl	801e3e4 <UTIL_TIMER_Stop>
        ComplianceTestState.IsTxPending = false;
 800f468:	4b05      	ldr	r3, [pc, #20]	; (800f480 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f46a:	2200      	movs	r2, #0
 800f46c:	705a      	strb	r2, [r3, #1]
 800f46e:	e004      	b.n	800f47a <LmhpComplianceOnMcpsIndication+0x7a6>
        return;
 800f470:	bf00      	nop
 800f472:	e002      	b.n	800f47a <LmhpComplianceOnMcpsIndication+0x7a6>
        return;
 800f474:	bf00      	nop
 800f476:	e000      	b.n	800f47a <LmhpComplianceOnMcpsIndication+0x7a6>
        return;
 800f478:	bf00      	nop
    }
}
 800f47a:	3790      	adds	r7, #144	; 0x90
 800f47c:	46bd      	mov	sp, r7
 800f47e:	bdb0      	pop	{r4, r5, r7, pc}
 800f480:	2000068c 	.word	0x2000068c
 800f484:	200006c4 	.word	0x200006c4
 800f488:	200006c8 	.word	0x200006c8

0800f48c <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800f48c:	b480      	push	{r7}
 800f48e:	b083      	sub	sp, #12
 800f490:	af00      	add	r7, sp, #0
 800f492:	6078      	str	r0, [r7, #4]
                }
                break;
            }
#endif /* CLASS_B not available */
        default:
            break;
 800f494:	bf00      	nop
    }
}
 800f496:	bf00      	nop
 800f498:	370c      	adds	r7, #12
 800f49a:	46bd      	mov	sp, r7
 800f49c:	bc80      	pop	{r7}
 800f49e:	4770      	bx	lr

0800f4a0 <LmhpComplianceOnMlmeIndication>:

static void LmhpComplianceOnMlmeIndication( MlmeIndication_t *mlmeIndication )
{
 800f4a0:	b480      	push	{r7}
 800f4a2:	b083      	sub	sp, #12
 800f4a4:	af00      	add	r7, sp, #0
 800f4a6:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800f4a8:	4b05      	ldr	r3, [pc, #20]	; (800f4c0 <LmhpComplianceOnMlmeIndication+0x20>)
 800f4aa:	781b      	ldrb	r3, [r3, #0]
 800f4ac:	f083 0301 	eor.w	r3, r3, #1
 800f4b0:	b2db      	uxtb	r3, r3
 800f4b2:	2b00      	cmp	r3, #0
    {
        return;
 800f4b4:	bf00      	nop
            }
#endif /* CLASS_B not available */
        default:
            break;
    }
}
 800f4b6:	370c      	adds	r7, #12
 800f4b8:	46bd      	mov	sp, r7
 800f4ba:	bc80      	pop	{r7}
 800f4bc:	4770      	bx	lr
 800f4be:	bf00      	nop
 800f4c0:	2000068c 	.word	0x2000068c

0800f4c4 <OnProcessTimer>:
    }
}
#endif /* CLASS_B not available */

static void OnProcessTimer( void *context )
{
 800f4c4:	b580      	push	{r7, lr}
 800f4c6:	b082      	sub	sp, #8
 800f4c8:	af00      	add	r7, sp, #0
 800f4ca:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.DataBufferSize != 0 )
 800f4cc:	4b08      	ldr	r3, [pc, #32]	; (800f4f0 <OnProcessTimer+0x2c>)
 800f4ce:	7a9b      	ldrb	r3, [r3, #10]
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d002      	beq.n	800f4da <OnProcessTimer+0x16>
    {
        ComplianceTestState.IsTxPending = true;
 800f4d4:	4b06      	ldr	r3, [pc, #24]	; (800f4f0 <OnProcessTimer+0x2c>)
 800f4d6:	2201      	movs	r2, #1
 800f4d8:	705a      	strb	r2, [r3, #1]
    }
    if( CompliancePackage.OnPackageProcessEvent != NULL )
 800f4da:	4b06      	ldr	r3, [pc, #24]	; (800f4f4 <OnProcessTimer+0x30>)
 800f4dc:	695b      	ldr	r3, [r3, #20]
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d002      	beq.n	800f4e8 <OnProcessTimer+0x24>
    {
        CompliancePackage.OnPackageProcessEvent();
 800f4e2:	4b04      	ldr	r3, [pc, #16]	; (800f4f4 <OnProcessTimer+0x30>)
 800f4e4:	695b      	ldr	r3, [r3, #20]
 800f4e6:	4798      	blx	r3
    }
}
 800f4e8:	bf00      	nop
 800f4ea:	3708      	adds	r7, #8
 800f4ec:	46bd      	mov	sp, r7
 800f4ee:	bd80      	pop	{r7, pc}
 800f4f0:	2000068c 	.word	0x2000068c
 800f4f4:	200000dc 	.word	0x200000dc

0800f4f8 <LmhpPackagesRegistrationInit>:

/* Private variables ---------------------------------------------------------*/

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmhpPackagesRegistrationInit( Version_t *fwVersion )
{
 800f4f8:	b480      	push	{r7}
 800f4fa:	b083      	sub	sp, #12
 800f4fc:	af00      	add	r7, sp, #0
 800f4fe:	6078      	str	r0, [r7, #4]
        return LORAMAC_HANDLER_ERROR;
    }
#endif /* LORAWAN_PACKAGES_VERSION */
#endif /* LORAWAN_DATA_DISTRIB_MGT */

    return LORAMAC_HANDLER_SUCCESS;
 800f500:	2300      	movs	r3, #0
}
 800f502:	4618      	mov	r0, r3
 800f504:	370c      	adds	r7, #12
 800f506:	46bd      	mov	sp, r7
 800f508:	bc80      	pop	{r7}
 800f50a:	4770      	bx	lr

0800f50c <LmhpPackagesRegister>:

LmHandlerErrorStatus_t LmhpPackagesRegister( uint8_t id, LmhPackage_t **package )
{
 800f50c:	b480      	push	{r7}
 800f50e:	b083      	sub	sp, #12
 800f510:	af00      	add	r7, sp, #0
 800f512:	4603      	mov	r3, r0
 800f514:	6039      	str	r1, [r7, #0]
 800f516:	71fb      	strb	r3, [r7, #7]
                break;
            }
    }
    return LORAMAC_HANDLER_SUCCESS;
#else
    return LORAMAC_HANDLER_ERROR;
 800f518:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* LORAWAN_DATA_DISTRIB_MGT */
}
 800f51c:	4618      	mov	r0, r3
 800f51e:	370c      	adds	r7, #12
 800f520:	46bd      	mov	sp, r7
 800f522:	bc80      	pop	{r7}
 800f524:	4770      	bx	lr
	...

0800f528 <OnRadioTxDone>:
}RxDoneParams_t;

static RxDoneParams_t RxDoneParams;

static void OnRadioTxDone( void )
{
 800f528:	b590      	push	{r4, r7, lr}
 800f52a:	b083      	sub	sp, #12
 800f52c:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800f52e:	f00f f873 	bl	801e618 <UTIL_TIMER_GetCurrentTime>
 800f532:	4603      	mov	r3, r0
 800f534:	4a0f      	ldr	r2, [pc, #60]	; (800f574 <OnRadioTxDone+0x4c>)
 800f536:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800f538:	4c0f      	ldr	r4, [pc, #60]	; (800f578 <OnRadioTxDone+0x50>)
 800f53a:	463b      	mov	r3, r7
 800f53c:	4618      	mov	r0, r3
 800f53e:	f00e f9e9 	bl	801d914 <SysTimeGet>
 800f542:	f504 734e 	add.w	r3, r4, #824	; 0x338
 800f546:	463a      	mov	r2, r7
 800f548:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f54c:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800f550:	4a0a      	ldr	r2, [pc, #40]	; (800f57c <OnRadioTxDone+0x54>)
 800f552:	7813      	ldrb	r3, [r2, #0]
 800f554:	f043 0320 	orr.w	r3, r3, #32
 800f558:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800f55a:	f003 fa71 	bl	8012a40 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800f55e:	4b08      	ldr	r3, [pc, #32]	; (800f580 <OnRadioTxDone+0x58>)
 800f560:	2201      	movs	r2, #1
 800f562:	2100      	movs	r1, #0
 800f564:	2002      	movs	r0, #2
 800f566:	f00f f947 	bl	801e7f8 <UTIL_ADV_TRACE_COND_FSend>
}
 800f56a:	bf00      	nop
 800f56c:	370c      	adds	r7, #12
 800f56e:	46bd      	mov	sp, r7
 800f570:	bd90      	pop	{r4, r7, pc}
 800f572:	bf00      	nop
 800f574:	20001828 	.word	0x20001828
 800f578:	200006e0 	.word	0x200006e0
 800f57c:	20001824 	.word	0x20001824
 800f580:	0801f568 	.word	0x0801f568

0800f584 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800f584:	b580      	push	{r7, lr}
 800f586:	b084      	sub	sp, #16
 800f588:	af00      	add	r7, sp, #0
 800f58a:	60f8      	str	r0, [r7, #12]
 800f58c:	4608      	mov	r0, r1
 800f58e:	4611      	mov	r1, r2
 800f590:	461a      	mov	r2, r3
 800f592:	4603      	mov	r3, r0
 800f594:	817b      	strh	r3, [r7, #10]
 800f596:	460b      	mov	r3, r1
 800f598:	813b      	strh	r3, [r7, #8]
 800f59a:	4613      	mov	r3, r2
 800f59c:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800f59e:	f00f f83b 	bl	801e618 <UTIL_TIMER_GetCurrentTime>
 800f5a2:	4603      	mov	r3, r0
 800f5a4:	4a11      	ldr	r2, [pc, #68]	; (800f5ec <OnRadioRxDone+0x68>)
 800f5a6:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 800f5a8:	4a10      	ldr	r2, [pc, #64]	; (800f5ec <OnRadioRxDone+0x68>)
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 800f5ae:	4a0f      	ldr	r2, [pc, #60]	; (800f5ec <OnRadioRxDone+0x68>)
 800f5b0:	897b      	ldrh	r3, [r7, #10]
 800f5b2:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 800f5b4:	4a0d      	ldr	r2, [pc, #52]	; (800f5ec <OnRadioRxDone+0x68>)
 800f5b6:	893b      	ldrh	r3, [r7, #8]
 800f5b8:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 800f5ba:	4a0c      	ldr	r2, [pc, #48]	; (800f5ec <OnRadioRxDone+0x68>)
 800f5bc:	79fb      	ldrb	r3, [r7, #7]
 800f5be:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800f5c0:	4a0b      	ldr	r2, [pc, #44]	; (800f5f0 <OnRadioRxDone+0x6c>)
 800f5c2:	7813      	ldrb	r3, [r2, #0]
 800f5c4:	f043 0310 	orr.w	r3, r3, #16
 800f5c8:	7013      	strb	r3, [r2, #0]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 800f5ca:	4a09      	ldr	r2, [pc, #36]	; (800f5f0 <OnRadioRxDone+0x6c>)
 800f5cc:	7813      	ldrb	r3, [r2, #0]
 800f5ce:	f043 0301 	orr.w	r3, r3, #1
 800f5d2:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    OnMacProcessNotify( );
 800f5d4:	f003 fa34 	bl	8012a40 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800f5d8:	4b06      	ldr	r3, [pc, #24]	; (800f5f4 <OnRadioRxDone+0x70>)
 800f5da:	2201      	movs	r2, #1
 800f5dc:	2100      	movs	r1, #0
 800f5de:	2002      	movs	r0, #2
 800f5e0:	f00f f90a 	bl	801e7f8 <UTIL_ADV_TRACE_COND_FSend>
}
 800f5e4:	bf00      	nop
 800f5e6:	3710      	adds	r7, #16
 800f5e8:	46bd      	mov	sp, r7
 800f5ea:	bd80      	pop	{r7, pc}
 800f5ec:	2000182c 	.word	0x2000182c
 800f5f0:	20001824 	.word	0x20001824
 800f5f4:	0801f578 	.word	0x0801f578

0800f5f8 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800f5f8:	b580      	push	{r7, lr}
 800f5fa:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800f5fc:	4a07      	ldr	r2, [pc, #28]	; (800f61c <OnRadioTxTimeout+0x24>)
 800f5fe:	7813      	ldrb	r3, [r2, #0]
 800f600:	f043 0308 	orr.w	r3, r3, #8
 800f604:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800f606:	f003 fa1b 	bl	8012a40 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800f60a:	4b05      	ldr	r3, [pc, #20]	; (800f620 <OnRadioTxTimeout+0x28>)
 800f60c:	2201      	movs	r2, #1
 800f60e:	2100      	movs	r1, #0
 800f610:	2002      	movs	r0, #2
 800f612:	f00f f8f1 	bl	801e7f8 <UTIL_ADV_TRACE_COND_FSend>
}
 800f616:	bf00      	nop
 800f618:	bd80      	pop	{r7, pc}
 800f61a:	bf00      	nop
 800f61c:	20001824 	.word	0x20001824
 800f620:	0801f588 	.word	0x0801f588

0800f624 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800f624:	b580      	push	{r7, lr}
 800f626:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800f628:	4a04      	ldr	r2, [pc, #16]	; (800f63c <OnRadioRxError+0x18>)
 800f62a:	7813      	ldrb	r3, [r2, #0]
 800f62c:	f043 0304 	orr.w	r3, r3, #4
 800f630:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800f632:	f003 fa05 	bl	8012a40 <OnMacProcessNotify>
}
 800f636:	bf00      	nop
 800f638:	bd80      	pop	{r7, pc}
 800f63a:	bf00      	nop
 800f63c:	20001824 	.word	0x20001824

0800f640 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800f640:	b580      	push	{r7, lr}
 800f642:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800f644:	4a07      	ldr	r2, [pc, #28]	; (800f664 <OnRadioRxTimeout+0x24>)
 800f646:	7813      	ldrb	r3, [r2, #0]
 800f648:	f043 0302 	orr.w	r3, r3, #2
 800f64c:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800f64e:	f003 f9f7 	bl	8012a40 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800f652:	4b05      	ldr	r3, [pc, #20]	; (800f668 <OnRadioRxTimeout+0x28>)
 800f654:	2201      	movs	r2, #1
 800f656:	2100      	movs	r1, #0
 800f658:	2002      	movs	r0, #2
 800f65a:	f00f f8cd 	bl	801e7f8 <UTIL_ADV_TRACE_COND_FSend>
}
 800f65e:	bf00      	nop
 800f660:	bd80      	pop	{r7, pc}
 800f662:	bf00      	nop
 800f664:	20001824 	.word	0x20001824
 800f668:	0801f598 	.word	0x0801f598

0800f66c <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800f66c:	b480      	push	{r7}
 800f66e:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800f670:	4b08      	ldr	r3, [pc, #32]	; (800f694 <UpdateRxSlotIdleState+0x28>)
 800f672:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800f676:	2b02      	cmp	r3, #2
 800f678:	d004      	beq.n	800f684 <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800f67a:	4b07      	ldr	r3, [pc, #28]	; (800f698 <UpdateRxSlotIdleState+0x2c>)
 800f67c:	2206      	movs	r2, #6
 800f67e:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800f682:	e003      	b.n	800f68c <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800f684:	4b04      	ldr	r3, [pc, #16]	; (800f698 <UpdateRxSlotIdleState+0x2c>)
 800f686:	2202      	movs	r2, #2
 800f688:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
}
 800f68c:	bf00      	nop
 800f68e:	46bd      	mov	sp, r7
 800f690:	bc80      	pop	{r7}
 800f692:	4770      	bx	lr
 800f694:	20000bfc 	.word	0x20000bfc
 800f698:	200006e0 	.word	0x200006e0

0800f69c <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800f69c:	b580      	push	{r7, lr}
 800f69e:	b092      	sub	sp, #72	; 0x48
 800f6a0:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800f6a2:	4b4a      	ldr	r3, [pc, #296]	; (800f7cc <ProcessRadioTxDone+0x130>)
 800f6a4:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800f6a8:	2b02      	cmp	r3, #2
 800f6aa:	d002      	beq.n	800f6b2 <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 800f6ac:	4b48      	ldr	r3, [pc, #288]	; (800f7d0 <ProcessRadioTxDone+0x134>)
 800f6ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6b0:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f6b2:	f3ef 8310 	mrs	r3, PRIMASK
 800f6b6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800f6b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    }
#if ( !defined(DISABLE_LORAWAN_RX_WINDOW) || (DISABLE_LORAWAN_RX_WINDOW == 0) )
    // Setup timers
    CRITICAL_SECTION_BEGIN( );
 800f6ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("cpsid i" : : : "memory");
 800f6bc:	b672      	cpsid	i
}
 800f6be:	bf00      	nop
    uint32_t offset = TimerGetCurrentTime( ) - TxDoneParams.CurTime;
 800f6c0:	f00e ffaa 	bl	801e618 <UTIL_TIMER_GetCurrentTime>
 800f6c4:	4602      	mov	r2, r0
 800f6c6:	4b43      	ldr	r3, [pc, #268]	; (800f7d4 <ProcessRadioTxDone+0x138>)
 800f6c8:	681b      	ldr	r3, [r3, #0]
 800f6ca:	1ad3      	subs	r3, r2, r3
 800f6cc:	63bb      	str	r3, [r7, #56]	; 0x38
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay - offset );
 800f6ce:	4b42      	ldr	r3, [pc, #264]	; (800f7d8 <ProcessRadioTxDone+0x13c>)
 800f6d0:	f8d3 23b0 	ldr.w	r2, [r3, #944]	; 0x3b0
 800f6d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6d6:	1ad3      	subs	r3, r2, r3
 800f6d8:	4619      	mov	r1, r3
 800f6da:	4840      	ldr	r0, [pc, #256]	; (800f7dc <ProcessRadioTxDone+0x140>)
 800f6dc:	f00e fef2 	bl	801e4c4 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800f6e0:	483e      	ldr	r0, [pc, #248]	; (800f7dc <ProcessRadioTxDone+0x140>)
 800f6e2:	f00e fe11 	bl	801e308 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay - offset );
 800f6e6:	4b3c      	ldr	r3, [pc, #240]	; (800f7d8 <ProcessRadioTxDone+0x13c>)
 800f6e8:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 800f6ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6ee:	1ad3      	subs	r3, r2, r3
 800f6f0:	4619      	mov	r1, r3
 800f6f2:	483b      	ldr	r0, [pc, #236]	; (800f7e0 <ProcessRadioTxDone+0x144>)
 800f6f4:	f00e fee6 	bl	801e4c4 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800f6f8:	4839      	ldr	r0, [pc, #228]	; (800f7e0 <ProcessRadioTxDone+0x144>)
 800f6fa:	f00e fe05 	bl	801e308 <UTIL_TIMER_Start>
 800f6fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f700:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f704:	f383 8810 	msr	PRIMASK, r3
}
 800f708:	bf00      	nop
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
        TimerStart( &MacCtx.AckTimeoutTimer );
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( MacCtx.NodeAckRequested == true )
 800f70a:	4b33      	ldr	r3, [pc, #204]	; (800f7d8 <ProcessRadioTxDone+0x13c>)
 800f70c:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 800f710:	2b00      	cmp	r3, #0
 800f712:	d01a      	beq.n	800f74a <ProcessRadioTxDone+0xae>
    {
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
 800f714:	2315      	movs	r3, #21
 800f716:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800f71a:	4b2c      	ldr	r3, [pc, #176]	; (800f7cc <ProcessRadioTxDone+0x130>)
 800f71c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800f720:	f107 0220 	add.w	r2, r7, #32
 800f724:	4611      	mov	r1, r2
 800f726:	4618      	mov	r0, r3
 800f728:	f006 fec0 	bl	80164ac <RegionGetPhyParam>
 800f72c:	4603      	mov	r3, r0
 800f72e:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800f730:	4b29      	ldr	r3, [pc, #164]	; (800f7d8 <ProcessRadioTxDone+0x13c>)
 800f732:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 800f736:	69fb      	ldr	r3, [r7, #28]
 800f738:	4413      	add	r3, r2
 800f73a:	4619      	mov	r1, r3
 800f73c:	4829      	ldr	r0, [pc, #164]	; (800f7e4 <ProcessRadioTxDone+0x148>)
 800f73e:	f00e fec1 	bl	801e4c4 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.RetransmitTimeoutTimer );
 800f742:	4828      	ldr	r0, [pc, #160]	; (800f7e4 <ProcessRadioTxDone+0x148>)
 800f744:	f00e fde0 	bl	801e308 <UTIL_TIMER_Start>
 800f748:	e003      	b.n	800f752 <ProcessRadioTxDone+0xb6>
    }
    else
    {
        // Transmission successful, setup status directly
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800f74a:	4b23      	ldr	r3, [pc, #140]	; (800f7d8 <ProcessRadioTxDone+0x13c>)
 800f74c:	2200      	movs	r2, #0
 800f74e:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
    }
#endif /* LORAMAC_VERSION */

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800f752:	4b20      	ldr	r3, [pc, #128]	; (800f7d4 <ProcessRadioTxDone+0x138>)
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	4a1d      	ldr	r2, [pc, #116]	; (800f7cc <ProcessRadioTxDone+0x130>)
 800f758:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800f75a:	4b1f      	ldr	r3, [pc, #124]	; (800f7d8 <ProcessRadioTxDone+0x13c>)
 800f75c:	f893 341b 	ldrb.w	r3, [r3, #1051]	; 0x41b
 800f760:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800f762:	4b1c      	ldr	r3, [pc, #112]	; (800f7d4 <ProcessRadioTxDone+0x138>)
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800f768:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f76c:	4618      	mov	r0, r3
 800f76e:	f00e f909 	bl	801d984 <SysTimeGetMcuTime>
 800f772:	4638      	mov	r0, r7
 800f774:	4b15      	ldr	r3, [pc, #84]	; (800f7cc <ProcessRadioTxDone+0x130>)
 800f776:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
 800f77a:	9200      	str	r2, [sp, #0]
 800f77c:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800f780:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800f784:	ca06      	ldmia	r2, {r1, r2}
 800f786:	f00e f85e 	bl	801d846 <SysTimeSub>
 800f78a:	f107 0314 	add.w	r3, r7, #20
 800f78e:	463a      	mov	r2, r7
 800f790:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f794:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800f798:	4b0f      	ldr	r3, [pc, #60]	; (800f7d8 <ProcessRadioTxDone+0x13c>)
 800f79a:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 800f79e:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 800f7a0:	2301      	movs	r3, #1
 800f7a2:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800f7a4:	4b09      	ldr	r3, [pc, #36]	; (800f7cc <ProcessRadioTxDone+0x130>)
 800f7a6:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d101      	bne.n	800f7b2 <ProcessRadioTxDone+0x116>
    {
        txDone.Joined  = false;
 800f7ae:	2300      	movs	r3, #0
 800f7b0:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800f7b2:	4b06      	ldr	r3, [pc, #24]	; (800f7cc <ProcessRadioTxDone+0x130>)
 800f7b4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800f7b8:	f107 0208 	add.w	r2, r7, #8
 800f7bc:	4611      	mov	r1, r2
 800f7be:	4618      	mov	r0, r3
 800f7c0:	f006 fe95 	bl	80164ee <RegionSetBandTxDone>
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    }
#endif /* LORAMAC_VERSION */
}
 800f7c4:	bf00      	nop
 800f7c6:	3740      	adds	r7, #64	; 0x40
 800f7c8:	46bd      	mov	sp, r7
 800f7ca:	bd80      	pop	{r7, pc}
 800f7cc:	20000bfc 	.word	0x20000bfc
 800f7d0:	0801fccc 	.word	0x0801fccc
 800f7d4:	20001828 	.word	0x20001828
 800f7d8:	200006e0 	.word	0x200006e0
 800f7dc:	20000a60 	.word	0x20000a60
 800f7e0:	20000a78 	.word	0x20000a78
 800f7e4:	20000ae0 	.word	0x20000ae0

0800f7e8 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800f7e8:	b580      	push	{r7, lr}
 800f7ea:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800f7ec:	4b10      	ldr	r3, [pc, #64]	; (800f830 <PrepareRxDoneAbort+0x48>)
 800f7ee:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f7f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f7f6:	4a0e      	ldr	r2, [pc, #56]	; (800f830 <PrepareRxDoneAbort+0x48>)
 800f7f8:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    if( MacCtx.NodeAckRequested == true )
 800f7fc:	4b0c      	ldr	r3, [pc, #48]	; (800f830 <PrepareRxDoneAbort+0x48>)
 800f7fe:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 800f802:	2b00      	cmp	r3, #0
 800f804:	d002      	beq.n	800f80c <PrepareRxDoneAbort+0x24>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        OnAckTimeoutTimerEvent( NULL );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        OnRetransmitTimeoutTimerEvent( NULL );
 800f806:	2000      	movs	r0, #0
 800f808:	f001 f9fa 	bl	8010c00 <OnRetransmitTimeoutTimerEvent>
#endif /* LORAMAC_VERSION */
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800f80c:	4a08      	ldr	r2, [pc, #32]	; (800f830 <PrepareRxDoneAbort+0x48>)
 800f80e:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800f812:	f043 0302 	orr.w	r3, r3, #2
 800f816:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    MacCtx.MacFlags.Bits.MacDone = 1;
 800f81a:	4a05      	ldr	r2, [pc, #20]	; (800f830 <PrepareRxDoneAbort+0x48>)
 800f81c:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800f820:	f043 0310 	orr.w	r3, r3, #16
 800f824:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491

    UpdateRxSlotIdleState( );
 800f828:	f7ff ff20 	bl	800f66c <UpdateRxSlotIdleState>
}
 800f82c:	bf00      	nop
 800f82e:	bd80      	pop	{r7, pc}
 800f830:	200006e0 	.word	0x200006e0

0800f834 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800f834:	b590      	push	{r4, r7, lr}
 800f836:	b0ab      	sub	sp, #172	; 0xac
 800f838:	af02      	add	r7, sp, #8
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800f83a:	2312      	movs	r3, #18
 800f83c:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800f840:	4b81      	ldr	r3, [pc, #516]	; (800fa48 <ProcessRadioRxDone+0x214>)
 800f842:	685b      	ldr	r3, [r3, #4]
 800f844:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    uint16_t size = RxDoneParams.Size;
 800f848:	4b7f      	ldr	r3, [pc, #508]	; (800fa48 <ProcessRadioRxDone+0x214>)
 800f84a:	891b      	ldrh	r3, [r3, #8]
 800f84c:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
    int16_t rssi = RxDoneParams.Rssi;
 800f850:	4b7d      	ldr	r3, [pc, #500]	; (800fa48 <ProcessRadioRxDone+0x214>)
 800f852:	895b      	ldrh	r3, [r3, #10]
 800f854:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
    int8_t snr = RxDoneParams.Snr;
 800f858:	4b7b      	ldr	r3, [pc, #492]	; (800fa48 <ProcessRadioRxDone+0x214>)
 800f85a:	7b1b      	ldrb	r3, [r3, #12]
 800f85c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

    uint8_t pktHeaderLen = 0;
 800f860:	2300      	movs	r3, #0
 800f862:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e

    uint32_t downLinkCounter = 0;
 800f866:	2300      	movs	r3, #0
 800f868:	617b      	str	r3, [r7, #20]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800f86a:	4b78      	ldr	r3, [pc, #480]	; (800fa4c <ProcessRadioRxDone+0x218>)
 800f86c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800f870:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    uint8_t multicast = 0;
 800f874:	2300      	movs	r3, #0
 800f876:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800f87a:	2301      	movs	r3, #1
 800f87c:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
    FCntIdentifier_t fCntID;
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    uint8_t macCmdPayload[2] = { 0 };
#endif /* LORAMAC_VERSION */
    Mlme_t joinType = MLME_JOIN;
 800f880:	2301      	movs	r3, #1
 800f882:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 800f886:	4a72      	ldr	r2, [pc, #456]	; (800fa50 <ProcessRadioRxDone+0x21c>)
 800f888:	7813      	ldrb	r3, [r2, #0]
 800f88a:	f36f 0300 	bfc	r3, #0, #1
 800f88e:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    MacCtx.McpsConfirm.AckReceived = false;
 800f890:	4b70      	ldr	r3, [pc, #448]	; (800fa54 <ProcessRadioRxDone+0x220>)
 800f892:	2200      	movs	r2, #0
 800f894:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
    MacCtx.RxStatus.Rssi = rssi;
 800f898:	4a6e      	ldr	r2, [pc, #440]	; (800fa54 <ProcessRadioRxDone+0x220>)
 800f89a:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 800f89e:	f8a2 348c 	strh.w	r3, [r2, #1164]	; 0x48c
    MacCtx.RxStatus.Snr = snr;
 800f8a2:	4a6c      	ldr	r2, [pc, #432]	; (800fa54 <ProcessRadioRxDone+0x220>)
 800f8a4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800f8a8:	f882 348e 	strb.w	r3, [r2, #1166]	; 0x48e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800f8ac:	4b69      	ldr	r3, [pc, #420]	; (800fa54 <ProcessRadioRxDone+0x220>)
 800f8ae:	f893 2490 	ldrb.w	r2, [r3, #1168]	; 0x490
 800f8b2:	4b68      	ldr	r3, [pc, #416]	; (800fa54 <ProcessRadioRxDone+0x220>)
 800f8b4:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
    MacCtx.McpsIndication.Port = 0;
 800f8b8:	4b66      	ldr	r3, [pc, #408]	; (800fa54 <ProcessRadioRxDone+0x220>)
 800f8ba:	2200      	movs	r2, #0
 800f8bc:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
    MacCtx.McpsIndication.Multicast = 0;
 800f8c0:	4b64      	ldr	r3, [pc, #400]	; (800fa54 <ProcessRadioRxDone+0x220>)
 800f8c2:	2200      	movs	r2, #0
 800f8c4:	f883 2422 	strb.w	r2, [r3, #1058]	; 0x422
    MacCtx.McpsIndication.IsUplinkTxPending = 0;
 800f8c8:	4b62      	ldr	r3, [pc, #392]	; (800fa54 <ProcessRadioRxDone+0x220>)
 800f8ca:	2200      	movs	r2, #0
 800f8cc:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
    MacCtx.McpsIndication.Buffer = NULL;
 800f8d0:	4b60      	ldr	r3, [pc, #384]	; (800fa54 <ProcessRadioRxDone+0x220>)
 800f8d2:	2200      	movs	r2, #0
 800f8d4:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
    MacCtx.McpsIndication.BufferSize = 0;
 800f8d8:	4b5e      	ldr	r3, [pc, #376]	; (800fa54 <ProcessRadioRxDone+0x220>)
 800f8da:	2200      	movs	r2, #0
 800f8dc:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
    MacCtx.McpsIndication.RxData = false;
 800f8e0:	4b5c      	ldr	r3, [pc, #368]	; (800fa54 <ProcessRadioRxDone+0x220>)
 800f8e2:	2200      	movs	r2, #0
 800f8e4:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
    MacCtx.McpsIndication.AckReceived = false;
 800f8e8:	4b5a      	ldr	r3, [pc, #360]	; (800fa54 <ProcessRadioRxDone+0x220>)
 800f8ea:	2200      	movs	r2, #0
 800f8ec:	f883 242e 	strb.w	r2, [r3, #1070]	; 0x42e
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800f8f0:	4b58      	ldr	r3, [pc, #352]	; (800fa54 <ProcessRadioRxDone+0x220>)
 800f8f2:	2200      	movs	r2, #0
 800f8f4:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800f8f8:	4b56      	ldr	r3, [pc, #344]	; (800fa54 <ProcessRadioRxDone+0x220>)
 800f8fa:	2200      	movs	r2, #0
 800f8fc:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
    MacCtx.McpsIndication.DevAddress = 0;
 800f900:	4b54      	ldr	r3, [pc, #336]	; (800fa54 <ProcessRadioRxDone+0x220>)
 800f902:	2200      	movs	r2, #0
 800f904:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800f908:	4b52      	ldr	r3, [pc, #328]	; (800fa54 <ProcessRadioRxDone+0x220>)
 800f90a:	2200      	movs	r2, #0
 800f90c:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.McpsIndication.ResponseTimeout = 0;
 800f910:	4b50      	ldr	r3, [pc, #320]	; (800fa54 <ProcessRadioRxDone+0x220>)
 800f912:	2200      	movs	r2, #0
 800f914:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
#endif /* LORAMAC_VERSION */

    Radio.Sleep( );
 800f918:	4b4f      	ldr	r3, [pc, #316]	; (800fa58 <ProcessRadioRxDone+0x224>)
 800f91a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f91c:	4798      	blx	r3

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.RxWindowTimer2 );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 800f91e:	4b4d      	ldr	r3, [pc, #308]	; (800fa54 <ProcessRadioRxDone+0x220>)
 800f920:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 800f924:	2b00      	cmp	r3, #0
 800f926:	d102      	bne.n	800f92e <ProcessRadioRxDone+0xfa>
    {
        TimerStop( &MacCtx.RxWindowTimer2 );
 800f928:	484c      	ldr	r0, [pc, #304]	; (800fa5c <ProcessRadioRxDone+0x228>)
 800f92a:	f00e fd5b 	bl	801e3e4 <UTIL_TIMER_Stop>
    }
#endif /* LORAMAC_VERSION */

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800f92e:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800f932:	4619      	mov	r1, r3
 800f934:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800f938:	f004 fe28 	bl	801458c <LoRaMacClassBRxBeacon>
 800f93c:	4603      	mov	r3, r0
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d00b      	beq.n	800f95a <ProcessRadioRxDone+0x126>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800f942:	4a44      	ldr	r2, [pc, #272]	; (800fa54 <ProcessRadioRxDone+0x220>)
 800f944:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 800f948:	f8a2 347e 	strh.w	r3, [r2, #1150]	; 0x47e
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800f94c:	4a41      	ldr	r2, [pc, #260]	; (800fa54 <ProcessRadioRxDone+0x220>)
 800f94e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800f952:	f882 3480 	strb.w	r3, [r2, #1152]	; 0x480
        return;
 800f956:	f000 bc75 	b.w	8010244 <ProcessRadioRxDone+0xa10>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800f95a:	4b3c      	ldr	r3, [pc, #240]	; (800fa4c <ProcessRadioRxDone+0x218>)
 800f95c:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800f960:	2b01      	cmp	r3, #1
 800f962:	d11e      	bne.n	800f9a2 <ProcessRadioRxDone+0x16e>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800f964:	f004 fe25 	bl	80145b2 <LoRaMacClassBIsPingExpected>
 800f968:	4603      	mov	r3, r0
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d00a      	beq.n	800f984 <ProcessRadioRxDone+0x150>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800f96e:	2000      	movs	r0, #0
 800f970:	f004 fdd6 	bl	8014520 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800f974:	2000      	movs	r0, #0
 800f976:	f004 fdf7 	bl	8014568 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800f97a:	4b36      	ldr	r3, [pc, #216]	; (800fa54 <ProcessRadioRxDone+0x220>)
 800f97c:	2204      	movs	r2, #4
 800f97e:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
 800f982:	e00e      	b.n	800f9a2 <ProcessRadioRxDone+0x16e>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800f984:	f004 fe1c 	bl	80145c0 <LoRaMacClassBIsMulticastExpected>
 800f988:	4603      	mov	r3, r0
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d009      	beq.n	800f9a2 <ProcessRadioRxDone+0x16e>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800f98e:	2000      	movs	r0, #0
 800f990:	f004 fdd0 	bl	8014534 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800f994:	2000      	movs	r0, #0
 800f996:	f004 fdf0 	bl	801457a <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800f99a:	4b2e      	ldr	r3, [pc, #184]	; (800fa54 <ProcessRadioRxDone+0x220>)
 800f99c:	2205      	movs	r2, #5
 800f99e:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
        }
    }

    // Abort on empty radio frames
    if( size == 0 )
 800f9a2:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d107      	bne.n	800f9ba <ProcessRadioRxDone+0x186>
    {
        MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f9aa:	4b2a      	ldr	r3, [pc, #168]	; (800fa54 <ProcessRadioRxDone+0x220>)
 800f9ac:	2201      	movs	r2, #1
 800f9ae:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
        PrepareRxDoneAbort( );
 800f9b2:	f7ff ff19 	bl	800f7e8 <PrepareRxDoneAbort>
        return;
 800f9b6:	f000 bc45 	b.w	8010244 <ProcessRadioRxDone+0xa10>
    }

    macHdr.Value = payload[pktHeaderLen++];
 800f9ba:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800f9be:	1c5a      	adds	r2, r3, #1
 800f9c0:	f887 208e 	strb.w	r2, [r7, #142]	; 0x8e
 800f9c4:	461a      	mov	r2, r3
 800f9c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f9ca:	4413      	add	r3, r2
 800f9cc:	781b      	ldrb	r3, [r3, #0]
 800f9ce:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
        PrepareRxDoneAbort( );
        return;
    }
#endif /* LORAMAC_VERSION */

    switch( macHdr.Bits.MType )
 800f9d2:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800f9d6:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800f9da:	b2db      	uxtb	r3, r3
 800f9dc:	3b01      	subs	r3, #1
 800f9de:	2b06      	cmp	r3, #6
 800f9e0:	f200 8403 	bhi.w	80101ea <ProcessRadioRxDone+0x9b6>
 800f9e4:	a201      	add	r2, pc, #4	; (adr r2, 800f9ec <ProcessRadioRxDone+0x1b8>)
 800f9e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9ea:	bf00      	nop
 800f9ec:	0800fa09 	.word	0x0800fa09
 800f9f0:	080101eb 	.word	0x080101eb
 800f9f4:	0800fc07 	.word	0x0800fc07
 800f9f8:	080101eb 	.word	0x080101eb
 800f9fc:	0800fbff 	.word	0x0800fbff
 800fa00:	080101eb 	.word	0x080101eb
 800fa04:	0801018f 	.word	0x0801018f
    {
        case FRAME_TYPE_JOIN_ACCEPT:
        {
            uint8_t joinEui[SE_EUI_SIZE];
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800fa08:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800fa0c:	2b10      	cmp	r3, #16
 800fa0e:	d807      	bhi.n	800fa20 <ProcessRadioRxDone+0x1ec>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fa10:	4b10      	ldr	r3, [pc, #64]	; (800fa54 <ProcessRadioRxDone+0x220>)
 800fa12:	2201      	movs	r2, #1
 800fa14:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 800fa18:	f7ff fee6 	bl	800f7e8 <PrepareRxDoneAbort>
                return;
 800fa1c:	f000 bc12 	b.w	8010244 <ProcessRadioRxDone+0xa10>
            }
            macMsgJoinAccept.Buffer = payload;
 800fa20:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fa24:	61bb      	str	r3, [r7, #24]
            macMsgJoinAccept.BufSize = size;
 800fa26:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800fa2a:	b2db      	uxtb	r3, r3
 800fa2c:	773b      	strb	r3, [r7, #28]

            // Abort in case if the device is already joined and no rejoin request is ongoing.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
            if( ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) && ( Nvm.MacGroup2.IsRejoinAcceptPending == false ) )
#else
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800fa2e:	4b07      	ldr	r3, [pc, #28]	; (800fa4c <ProcessRadioRxDone+0x218>)
 800fa30:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d013      	beq.n	800fa60 <ProcessRadioRxDone+0x22c>
#endif /* LORAMAC_VERSION */
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fa38:	4b06      	ldr	r3, [pc, #24]	; (800fa54 <ProcessRadioRxDone+0x220>)
 800fa3a:	2201      	movs	r2, #1
 800fa3c:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 800fa40:	f7ff fed2 	bl	800f7e8 <PrepareRxDoneAbort>
                return;
 800fa44:	e3fe      	b.n	8010244 <ProcessRadioRxDone+0xa10>
 800fa46:	bf00      	nop
 800fa48:	2000182c 	.word	0x2000182c
 800fa4c:	20000bfc 	.word	0x20000bfc
 800fa50:	20001824 	.word	0x20001824
 800fa54:	200006e0 	.word	0x200006e0
 800fa58:	0801fccc 	.word	0x0801fccc
 800fa5c:	20000a78 	.word	0x20000a78
            }

            SecureElementGetJoinEui( joinEui );
 800fa60:	f107 0308 	add.w	r3, r7, #8
 800fa64:	4618      	mov	r0, r3
 800fa66:	f7fd ff7d 	bl	800d964 <SecureElementGetJoinEui>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, joinEui, &macMsgJoinAccept );
 800fa6a:	f107 0218 	add.w	r2, r7, #24
 800fa6e:	f107 0308 	add.w	r3, r7, #8
 800fa72:	4619      	mov	r1, r3
 800fa74:	20ff      	movs	r0, #255	; 0xff
 800fa76:	f005 ff95 	bl	80159a4 <LoRaMacCryptoHandleJoinAccept>
 800fa7a:	4603      	mov	r3, r0
 800fa7c:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
                joinType = MLME_REJOIN_2;
            }
#endif /* LORAMAC_VERSION */

            VerifyParams_t verifyRxDr;
            bool rxDrValid = false;
 800fa80:	2300      	movs	r3, #0
 800fa82:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
            verifyRxDr.DatarateParams.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800fa86:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800fa8a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800fa8e:	b2db      	uxtb	r3, r3
 800fa90:	b25b      	sxtb	r3, r3
 800fa92:	713b      	strb	r3, [r7, #4]
            verifyRxDr.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800fa94:	4bb1      	ldr	r3, [pc, #708]	; (800fd5c <ProcessRadioRxDone+0x528>)
 800fa96:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800fa9a:	717b      	strb	r3, [r7, #5]
            rxDrValid = RegionVerify( Nvm.MacGroup2.Region, &verifyRxDr, PHY_RX_DR );
 800fa9c:	4baf      	ldr	r3, [pc, #700]	; (800fd5c <ProcessRadioRxDone+0x528>)
 800fa9e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800faa2:	1d39      	adds	r1, r7, #4
 800faa4:	2207      	movs	r2, #7
 800faa6:	4618      	mov	r0, r3
 800faa8:	f006 fd4e 	bl	8016548 <RegionVerify>
 800faac:	4603      	mov	r3, r0
 800faae:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c

            if( ( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus ) && ( rxDrValid == true ) )
 800fab2:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	f040 8095 	bne.w	800fbe6 <ProcessRadioRxDone+0x3b2>
 800fabc:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	f000 8090 	beq.w	800fbe6 <ProcessRadioRxDone+0x3b2>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800fac6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800faca:	461a      	mov	r2, r3
 800facc:	4ba3      	ldr	r3, [pc, #652]	; (800fd5c <ProcessRadioRxDone+0x528>)
 800face:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800fad2:	4ba2      	ldr	r3, [pc, #648]	; (800fd5c <ProcessRadioRxDone+0x528>)
 800fad4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800fad8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800fadc:	021b      	lsls	r3, r3, #8
 800fade:	4313      	orrs	r3, r2
 800fae0:	4a9e      	ldr	r2, [pc, #632]	; (800fd5c <ProcessRadioRxDone+0x528>)
 800fae2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800fae6:	4b9d      	ldr	r3, [pc, #628]	; (800fd5c <ProcessRadioRxDone+0x528>)
 800fae8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800faec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800faf0:	041b      	lsls	r3, r3, #16
 800faf2:	4313      	orrs	r3, r2
 800faf4:	4a99      	ldr	r2, [pc, #612]	; (800fd5c <ProcessRadioRxDone+0x528>)
 800faf6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800fafa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fafc:	4a97      	ldr	r2, [pc, #604]	; (800fd5c <ProcessRadioRxDone+0x528>)
 800fafe:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
                // Update NVM DevAddrOTAA with network value
                SecureElementSetDevAddr( ACTIVATION_TYPE_OTAA, Nvm.MacGroup2.DevAddr );
 800fb02:	4b96      	ldr	r3, [pc, #600]	; (800fd5c <ProcessRadioRxDone+0x528>)
 800fb04:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800fb08:	4619      	mov	r1, r3
 800fb0a:	2002      	movs	r0, #2
 800fb0c:	f7fd ff42 	bl	800d994 <SecureElementSetDevAddr>

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800fb10:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800fb14:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800fb18:	b2db      	uxtb	r3, r3
 800fb1a:	461a      	mov	r2, r3
 800fb1c:	4b8f      	ldr	r3, [pc, #572]	; (800fd5c <ProcessRadioRxDone+0x528>)
 800fb1e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800fb22:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800fb26:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800fb2a:	b2db      	uxtb	r3, r3
 800fb2c:	461a      	mov	r2, r3
 800fb2e:	4b8b      	ldr	r3, [pc, #556]	; (800fd5c <ProcessRadioRxDone+0x528>)
 800fb30:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800fb34:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800fb38:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800fb3c:	b2db      	uxtb	r3, r3
 800fb3e:	461a      	mov	r2, r3
 800fb40:	4b86      	ldr	r3, [pc, #536]	; (800fd5c <ProcessRadioRxDone+0x528>)
 800fb42:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800fb46:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800fb4a:	461a      	mov	r2, r3
 800fb4c:	4b83      	ldr	r3, [pc, #524]	; (800fd5c <ProcessRadioRxDone+0x528>)
 800fb4e:	659a      	str	r2, [r3, #88]	; 0x58
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800fb50:	4b82      	ldr	r3, [pc, #520]	; (800fd5c <ProcessRadioRxDone+0x528>)
 800fb52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d102      	bne.n	800fb5e <ProcessRadioRxDone+0x32a>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800fb58:	4b80      	ldr	r3, [pc, #512]	; (800fd5c <ProcessRadioRxDone+0x528>)
 800fb5a:	2201      	movs	r2, #1
 800fb5c:	659a      	str	r2, [r3, #88]	; 0x58
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800fb5e:	4b7f      	ldr	r3, [pc, #508]	; (800fd5c <ProcessRadioRxDone+0x528>)
 800fb60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fb62:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800fb66:	fb02 f303 	mul.w	r3, r2, r3
 800fb6a:	4a7c      	ldr	r2, [pc, #496]	; (800fd5c <ProcessRadioRxDone+0x528>)
 800fb6c:	6593      	str	r3, [r2, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800fb6e:	4b7b      	ldr	r3, [pc, #492]	; (800fd5c <ProcessRadioRxDone+0x528>)
 800fb70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fb72:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800fb76:	4a79      	ldr	r2, [pc, #484]	; (800fd5c <ProcessRadioRxDone+0x528>)
 800fb78:	65d3      	str	r3, [r2, #92]	; 0x5c

                // Reset NbTrans to default value
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = 1;
 800fb7a:	4b78      	ldr	r3, [pc, #480]	; (800fd5c <ProcessRadioRxDone+0x528>)
 800fb7c:	2201      	movs	r2, #1
 800fb7e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                else
                {
                    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
                }
#else
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800fb82:	4b76      	ldr	r3, [pc, #472]	; (800fd5c <ProcessRadioRxDone+0x528>)
 800fb84:	2200      	movs	r2, #0
 800fb86:	f883 212e 	strb.w	r2, [r3, #302]	; 0x12e
#endif /* LORAMAC_VERSION */

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800fb8a:	f107 0318 	add.w	r3, r7, #24
 800fb8e:	3312      	adds	r3, #18
 800fb90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800fb94:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800fb98:	b2db      	uxtb	r3, r3
 800fb9a:	3b11      	subs	r3, #17
 800fb9c:	b2db      	uxtb	r3, r3
 800fb9e:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                // Apply the last tx channel
                applyCFList.JoinChannel = MacCtx.Channel;
 800fba2:	4b6f      	ldr	r3, [pc, #444]	; (800fd60 <ProcessRadioRxDone+0x52c>)
 800fba4:	f893 341b 	ldrb.w	r3, [r3, #1051]	; 0x41b
 800fba8:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
#endif /* LORAMAC_VERSION */

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800fbac:	4b6b      	ldr	r3, [pc, #428]	; (800fd5c <ProcessRadioRxDone+0x528>)
 800fbae:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800fbb2:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 800fbb6:	4611      	mov	r1, r2
 800fbb8:	4618      	mov	r0, r3
 800fbba:	f006 fce6 	bl	801658a <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800fbbe:	4b67      	ldr	r3, [pc, #412]	; (800fd5c <ProcessRadioRxDone+0x528>)
 800fbc0:	2202      	movs	r2, #2
 800fbc2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
                    LoRaMacCommandsAddCmd( MOTE_MAC_REKEY_IND, macCmdPayload, 1 );
                }
#endif /* LORAMAC_VERSION */

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 800fbc6:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800fbca:	4618      	mov	r0, r3
 800fbcc:	f005 f9f4 	bl	8014fb8 <LoRaMacConfirmQueueIsCmdActive>
 800fbd0:	4603      	mov	r3, r0
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	f000 8311 	beq.w	80101fa <ProcessRadioRxDone+0x9c6>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, joinType );
 800fbd8:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800fbdc:	4619      	mov	r1, r3
 800fbde:	2000      	movs	r0, #0
 800fbe0:	f005 f95e 	bl	8014ea0 <LoRaMacConfirmQueueSetStatus>
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 800fbe4:	e309      	b.n	80101fa <ProcessRadioRxDone+0x9c6>
#endif /* LORAMAC_VERSION */
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800fbe6:	2001      	movs	r0, #1
 800fbe8:	f005 f9e6 	bl	8014fb8 <LoRaMacConfirmQueueIsCmdActive>
 800fbec:	4603      	mov	r3, r0
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	f000 8302 	beq.w	80101f8 <ProcessRadioRxDone+0x9c4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800fbf4:	2101      	movs	r1, #1
 800fbf6:	2007      	movs	r0, #7
 800fbf8:	f005 f952 	bl	8014ea0 <LoRaMacConfirmQueueSetStatus>
                }
            }

            break;
 800fbfc:	e2fc      	b.n	80101f8 <ProcessRadioRxDone+0x9c4>
        }
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800fbfe:	4b58      	ldr	r3, [pc, #352]	; (800fd60 <ProcessRadioRxDone+0x52c>)
 800fc00:	2201      	movs	r2, #1
 800fc02:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800fc06:	4b55      	ldr	r3, [pc, #340]	; (800fd5c <ProcessRadioRxDone+0x528>)
 800fc08:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800fc0c:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800fc10:	4b53      	ldr	r3, [pc, #332]	; (800fd60 <ProcessRadioRxDone+0x52c>)
 800fc12:	f893 3424 	ldrb.w	r3, [r3, #1060]	; 0x424
 800fc16:	b25b      	sxtb	r3, r3
 800fc18:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800fc1c:	230d      	movs	r3, #13
 800fc1e:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74

            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800fc22:	4b4e      	ldr	r3, [pc, #312]	; (800fd5c <ProcessRadioRxDone+0x528>)
 800fc24:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d002      	beq.n	800fc32 <ProcessRadioRxDone+0x3fe>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800fc2c:	230e      	movs	r3, #14
 800fc2e:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
            }

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800fc32:	4b4a      	ldr	r3, [pc, #296]	; (800fd5c <ProcessRadioRxDone+0x528>)
 800fc34:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800fc38:	f107 0274 	add.w	r2, r7, #116	; 0x74
 800fc3c:	4611      	mov	r1, r2
 800fc3e:	4618      	mov	r0, r3
 800fc40:	f006 fc34 	bl	80164ac <RegionGetPhyParam>
 800fc44:	4603      	mov	r3, r0
 800fc46:	673b      	str	r3, [r7, #112]	; 0x70
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800fc48:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800fc4c:	3b0d      	subs	r3, #13
 800fc4e:	b29b      	uxth	r3, r3
 800fc50:	b21b      	sxth	r3, r3
 800fc52:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800fc56:	b21a      	sxth	r2, r3
 800fc58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fc5a:	b21b      	sxth	r3, r3
 800fc5c:	429a      	cmp	r2, r3
 800fc5e:	dc03      	bgt.n	800fc68 <ProcessRadioRxDone+0x434>
 800fc60:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800fc64:	2b0b      	cmp	r3, #11
 800fc66:	d806      	bhi.n	800fc76 <ProcessRadioRxDone+0x442>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fc68:	4b3d      	ldr	r3, [pc, #244]	; (800fd60 <ProcessRadioRxDone+0x52c>)
 800fc6a:	2201      	movs	r2, #1
 800fc6c:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 800fc70:	f7ff fdba 	bl	800f7e8 <PrepareRxDoneAbort>
                return;
 800fc74:	e2e6      	b.n	8010244 <ProcessRadioRxDone+0xa10>
            }
            macMsgData.Buffer = payload;
 800fc76:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fc7a:	643b      	str	r3, [r7, #64]	; 0x40
            macMsgData.BufSize = size;
 800fc7c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800fc80:	b2db      	uxtb	r3, r3
 800fc82:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800fc86:	4b37      	ldr	r3, [pc, #220]	; (800fd64 <ProcessRadioRxDone+0x530>)
 800fc88:	667b      	str	r3, [r7, #100]	; 0x64
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800fc8a:	23ff      	movs	r3, #255	; 0xff
 800fc8c:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800fc90:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800fc94:	4618      	mov	r0, r3
 800fc96:	f006 f987 	bl	8015fa8 <LoRaMacParserData>
 800fc9a:	4603      	mov	r3, r0
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d006      	beq.n	800fcae <ProcessRadioRxDone+0x47a>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fca0:	4b2f      	ldr	r3, [pc, #188]	; (800fd60 <ProcessRadioRxDone+0x52c>)
 800fca2:	2201      	movs	r2, #1
 800fca4:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 800fca8:	f7ff fd9e 	bl	800f7e8 <PrepareRxDoneAbort>
                return;
 800fcac:	e2ca      	b.n	8010244 <ProcessRadioRxDone+0xa10>
            }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            // Handle Class B
            // Check if we expect a ping or a multicast slot.
            if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800fcae:	4b2b      	ldr	r3, [pc, #172]	; (800fd5c <ProcessRadioRxDone+0x528>)
 800fcb0:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800fcb4:	2b01      	cmp	r3, #1
 800fcb6:	d132      	bne.n	800fd1e <ProcessRadioRxDone+0x4ea>
            {
                if( LoRaMacClassBIsPingExpected( ) == true )
 800fcb8:	f004 fc7b 	bl	80145b2 <LoRaMacClassBIsPingExpected>
 800fcbc:	4603      	mov	r3, r0
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d014      	beq.n	800fcec <ProcessRadioRxDone+0x4b8>
                {
                    LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800fcc2:	2000      	movs	r0, #0
 800fcc4:	f004 fc2c 	bl	8014520 <LoRaMacClassBSetPingSlotState>
                    LoRaMacClassBPingSlotTimerEvent( NULL );
 800fcc8:	2000      	movs	r0, #0
 800fcca:	f004 fc4d 	bl	8014568 <LoRaMacClassBPingSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800fcce:	4b24      	ldr	r3, [pc, #144]	; (800fd60 <ProcessRadioRxDone+0x52c>)
 800fcd0:	2204      	movs	r2, #4
 800fcd2:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800fcd6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fcd8:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800fcdc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800fce0:	b2db      	uxtb	r3, r3
 800fce2:	4619      	mov	r1, r3
 800fce4:	4610      	mov	r0, r2
 800fce6:	f004 fced 	bl	80146c4 <LoRaMacClassBSetFPendingBit>
 800fcea:	e018      	b.n	800fd1e <ProcessRadioRxDone+0x4ea>
                }
                else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800fcec:	f004 fc68 	bl	80145c0 <LoRaMacClassBIsMulticastExpected>
 800fcf0:	4603      	mov	r3, r0
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d013      	beq.n	800fd1e <ProcessRadioRxDone+0x4ea>
                {
                    LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800fcf6:	2000      	movs	r0, #0
 800fcf8:	f004 fc1c 	bl	8014534 <LoRaMacClassBSetMulticastSlotState>
                    LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800fcfc:	2000      	movs	r0, #0
 800fcfe:	f004 fc3c 	bl	801457a <LoRaMacClassBMulticastSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800fd02:	4b17      	ldr	r3, [pc, #92]	; (800fd60 <ProcessRadioRxDone+0x52c>)
 800fd04:	2205      	movs	r2, #5
 800fd06:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800fd0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fd0c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800fd10:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800fd14:	b2db      	uxtb	r3, r3
 800fd16:	4619      	mov	r1, r3
 800fd18:	4610      	mov	r0, r2
 800fd1a:	f004 fcd3 	bl	80146c4 <LoRaMacClassBSetFPendingBit>
                }
            }
#endif /* LORAMAC_VERSION */

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800fd1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd20:	4a0f      	ldr	r2, [pc, #60]	; (800fd60 <ProcessRadioRxDone+0x52c>)
 800fd22:	f8c2 3434 	str.w	r3, [r2, #1076]	; 0x434

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800fd26:	f107 0212 	add.w	r2, r7, #18
 800fd2a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800fd2e:	4611      	mov	r1, r2
 800fd30:	4618      	mov	r0, r3
 800fd32:	f002 fd81 	bl	8012838 <DetermineFrameType>
 800fd36:	4603      	mov	r3, r0
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d006      	beq.n	800fd4a <ProcessRadioRxDone+0x516>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fd3c:	4b08      	ldr	r3, [pc, #32]	; (800fd60 <ProcessRadioRxDone+0x52c>)
 800fd3e:	2201      	movs	r2, #1
 800fd40:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 800fd44:	f7ff fd50 	bl	800f7e8 <PrepareRxDoneAbort>
                return;
 800fd48:	e27c      	b.n	8010244 <ProcessRadioRxDone+0xa10>
            }

            //Check if it is a multicast message
            multicast = 0;
 800fd4a:	2300      	movs	r3, #0
 800fd4c:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
            downLinkCounter = 0;
 800fd50:	2300      	movs	r3, #0
 800fd52:	617b      	str	r3, [r7, #20]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800fd54:	2300      	movs	r3, #0
 800fd56:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
 800fd5a:	e055      	b.n	800fe08 <ProcessRadioRxDone+0x5d4>
 800fd5c:	20000bfc 	.word	0x20000bfc
 800fd60:	200006e0 	.word	0x200006e0
 800fd64:	20000918 	.word	0x20000918
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800fd68:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 800fd6c:	499f      	ldr	r1, [pc, #636]	; (800ffec <ProcessRadioRxDone+0x7b8>)
 800fd6e:	4613      	mov	r3, r2
 800fd70:	005b      	lsls	r3, r3, #1
 800fd72:	4413      	add	r3, r2
 800fd74:	011b      	lsls	r3, r3, #4
 800fd76:	440b      	add	r3, r1
 800fd78:	33ec      	adds	r3, #236	; 0xec
 800fd7a:	681a      	ldr	r2, [r3, #0]
 800fd7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd7e:	429a      	cmp	r2, r3
 800fd80:	d13d      	bne.n	800fdfe <ProcessRadioRxDone+0x5ca>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800fd82:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 800fd86:	4999      	ldr	r1, [pc, #612]	; (800ffec <ProcessRadioRxDone+0x7b8>)
 800fd88:	4613      	mov	r3, r2
 800fd8a:	005b      	lsls	r3, r3, #1
 800fd8c:	4413      	add	r3, r2
 800fd8e:	011b      	lsls	r3, r3, #4
 800fd90:	440b      	add	r3, r1
 800fd92:	33e9      	adds	r3, #233	; 0xe9
 800fd94:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d031      	beq.n	800fdfe <ProcessRadioRxDone+0x5ca>
                {
                    multicast = 1;
 800fd9a:	2301      	movs	r3, #1
 800fd9c:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800fda0:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 800fda4:	4991      	ldr	r1, [pc, #580]	; (800ffec <ProcessRadioRxDone+0x7b8>)
 800fda6:	4613      	mov	r3, r2
 800fda8:	005b      	lsls	r3, r3, #1
 800fdaa:	4413      	add	r3, r2
 800fdac:	011b      	lsls	r3, r3, #4
 800fdae:	440b      	add	r3, r1
 800fdb0:	33ea      	adds	r3, #234	; 0xea
 800fdb2:	781b      	ldrb	r3, [r3, #0]
 800fdb4:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800fdb8:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 800fdbc:	498b      	ldr	r1, [pc, #556]	; (800ffec <ProcessRadioRxDone+0x7b8>)
 800fdbe:	4613      	mov	r3, r2
 800fdc0:	005b      	lsls	r3, r3, #1
 800fdc2:	4413      	add	r3, r2
 800fdc4:	011b      	lsls	r3, r3, #4
 800fdc6:	440b      	add	r3, r1
 800fdc8:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	617b      	str	r3, [r7, #20]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800fdd2:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 800fdd6:	4985      	ldr	r1, [pc, #532]	; (800ffec <ProcessRadioRxDone+0x7b8>)
 800fdd8:	4613      	mov	r3, r2
 800fdda:	005b      	lsls	r3, r3, #1
 800fddc:	4413      	add	r3, r2
 800fdde:	011b      	lsls	r3, r3, #4
 800fde0:	440b      	add	r3, r1
 800fde2:	33ec      	adds	r3, #236	; 0xec
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800fdea:	4b80      	ldr	r3, [pc, #512]	; (800ffec <ProcessRadioRxDone+0x7b8>)
 800fdec:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800fdf0:	2b02      	cmp	r3, #2
 800fdf2:	d10e      	bne.n	800fe12 <ProcessRadioRxDone+0x5de>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800fdf4:	4b7e      	ldr	r3, [pc, #504]	; (800fff0 <ProcessRadioRxDone+0x7bc>)
 800fdf6:	2203      	movs	r2, #3
 800fdf8:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
                    }
                    break;
 800fdfc:	e009      	b.n	800fe12 <ProcessRadioRxDone+0x5de>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800fdfe:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 800fe02:	3301      	adds	r3, #1
 800fe04:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
 800fe08:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d0ab      	beq.n	800fd68 <ProcessRadioRxDone+0x534>
 800fe10:	e000      	b.n	800fe14 <ProcessRadioRxDone+0x5e0>
                    break;
 800fe12:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800fe14:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 800fe18:	2b01      	cmp	r3, #1
 800fe1a:	d117      	bne.n	800fe4c <ProcessRadioRxDone+0x618>
 800fe1c:	7cbb      	ldrb	r3, [r7, #18]
 800fe1e:	2b03      	cmp	r3, #3
 800fe20:	d10d      	bne.n	800fe3e <ProcessRadioRxDone+0x60a>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800fe22:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800fe26:	f003 0320 	and.w	r3, r3, #32
 800fe2a:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d106      	bne.n	800fe3e <ProcessRadioRxDone+0x60a>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 800fe30:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800fe34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fe38:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d006      	beq.n	800fe4c <ProcessRadioRxDone+0x618>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fe3e:	4b6c      	ldr	r3, [pc, #432]	; (800fff0 <ProcessRadioRxDone+0x7bc>)
 800fe40:	2201      	movs	r2, #1
 800fe42:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 800fe46:	f7ff fccf 	bl	800f7e8 <PrepareRxDoneAbort>
                return;
 800fe4a:	e1fb      	b.n	8010244 <ProcessRadioRxDone+0xa10>
                PrepareRxDoneAbort( );
                return;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
 800fe4c:	7cb9      	ldrb	r1, [r7, #18]
 800fe4e:	4c67      	ldr	r4, [pc, #412]	; (800ffec <ProcessRadioRxDone+0x7b8>)
 800fe50:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800fe54:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 800fe58:	f107 0314 	add.w	r3, r7, #20
 800fe5c:	9301      	str	r3, [sp, #4]
 800fe5e:	f107 0313 	add.w	r3, r7, #19
 800fe62:	9300      	str	r3, [sp, #0]
 800fe64:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
 800fe68:	f000 fee4 	bl	8010c34 <GetFCntDown>
 800fe6c:	4603      	mov	r3, r0
 800fe6e:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800fe72:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d017      	beq.n	800feaa <ProcessRadioRxDone+0x676>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800fe7a:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 800fe7e:	2b07      	cmp	r3, #7
 800fe80:	d104      	bne.n	800fe8c <ProcessRadioRxDone+0x658>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800fe82:	4b5b      	ldr	r3, [pc, #364]	; (800fff0 <ProcessRadioRxDone+0x7bc>)
 800fe84:	2208      	movs	r2, #8
 800fe86:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
 800fe8a:	e003      	b.n	800fe94 <ProcessRadioRxDone+0x660>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fe8c:	4b58      	ldr	r3, [pc, #352]	; (800fff0 <ProcessRadioRxDone+0x7bc>)
 800fe8e:	2201      	movs	r2, #1
 800fe90:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800fe94:	697b      	ldr	r3, [r7, #20]
 800fe96:	4a56      	ldr	r2, [pc, #344]	; (800fff0 <ProcessRadioRxDone+0x7bc>)
 800fe98:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800fe9c:	697b      	ldr	r3, [r7, #20]
 800fe9e:	4a54      	ldr	r2, [pc, #336]	; (800fff0 <ProcessRadioRxDone+0x7bc>)
 800fea0:	f8c2 346c 	str.w	r3, [r2, #1132]	; 0x46c
                PrepareRxDoneAbort( );
 800fea4:	f7ff fca0 	bl	800f7e8 <PrepareRxDoneAbort>
                return;
 800fea8:	e1cc      	b.n	8010244 <ProcessRadioRxDone+0xa10>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800feaa:	7cfa      	ldrb	r2, [r7, #19]
 800feac:	6979      	ldr	r1, [r7, #20]
 800feae:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 800feb2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800feb6:	9300      	str	r3, [sp, #0]
 800feb8:	460b      	mov	r3, r1
 800feba:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800febe:	f005 fed3 	bl	8015c68 <LoRaMacCryptoUnsecureMessage>
 800fec2:	4603      	mov	r3, r0
 800fec4:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800fec8:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d00f      	beq.n	800fef0 <ProcessRadioRxDone+0x6bc>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800fed0:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 800fed4:	2b02      	cmp	r3, #2
 800fed6:	d104      	bne.n	800fee2 <ProcessRadioRxDone+0x6ae>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800fed8:	4b45      	ldr	r3, [pc, #276]	; (800fff0 <ProcessRadioRxDone+0x7bc>)
 800feda:	220a      	movs	r2, #10
 800fedc:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
 800fee0:	e003      	b.n	800feea <ProcessRadioRxDone+0x6b6>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800fee2:	4b43      	ldr	r3, [pc, #268]	; (800fff0 <ProcessRadioRxDone+0x7bc>)
 800fee4:	220b      	movs	r2, #11
 800fee6:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                }
                PrepareRxDoneAbort( );
 800feea:	f7ff fc7d 	bl	800f7e8 <PrepareRxDoneAbort>
                return;
 800feee:	e1a9      	b.n	8010244 <ProcessRadioRxDone+0xa10>
            }
#endif /* LORAMAC_VERSION */

            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800fef0:	4b3f      	ldr	r3, [pc, #252]	; (800fff0 <ProcessRadioRxDone+0x7bc>)
 800fef2:	2200      	movs	r2, #0
 800fef4:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Multicast = multicast;
 800fef8:	4a3d      	ldr	r2, [pc, #244]	; (800fff0 <ProcessRadioRxDone+0x7bc>)
 800fefa:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 800fefe:	f882 3422 	strb.w	r3, [r2, #1058]	; 0x422
            MacCtx.McpsIndication.Buffer = NULL;
 800ff02:	4b3b      	ldr	r3, [pc, #236]	; (800fff0 <ProcessRadioRxDone+0x7bc>)
 800ff04:	2200      	movs	r2, #0
 800ff06:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.BufferSize = 0;
 800ff0a:	4b39      	ldr	r3, [pc, #228]	; (800fff0 <ProcessRadioRxDone+0x7bc>)
 800ff0c:	2200      	movs	r2, #0
 800ff0e:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800ff12:	697b      	ldr	r3, [r7, #20]
 800ff14:	4a36      	ldr	r2, [pc, #216]	; (800fff0 <ProcessRadioRxDone+0x7bc>)
 800ff16:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800ff1a:	697b      	ldr	r3, [r7, #20]
 800ff1c:	4a34      	ldr	r2, [pc, #208]	; (800fff0 <ProcessRadioRxDone+0x7bc>)
 800ff1e:	f8c2 346c 	str.w	r3, [r2, #1132]	; 0x46c
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800ff22:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800ff26:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800ff2a:	b2db      	uxtb	r3, r3
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	bf14      	ite	ne
 800ff30:	2301      	movne	r3, #1
 800ff32:	2300      	moveq	r3, #0
 800ff34:	b2da      	uxtb	r2, r3
 800ff36:	4b2e      	ldr	r3, [pc, #184]	; (800fff0 <ProcessRadioRxDone+0x7bc>)
 800ff38:	f883 242e 	strb.w	r2, [r3, #1070]	; 0x42e

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800ff3c:	4b2c      	ldr	r3, [pc, #176]	; (800fff0 <ProcessRadioRxDone+0x7bc>)
 800ff3e:	2200      	movs	r2, #0
 800ff40:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800ff44:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800ff48:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800ff4c:	b2db      	uxtb	r3, r3
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	bf14      	ite	ne
 800ff52:	2301      	movne	r3, #1
 800ff54:	2300      	moveq	r3, #0
 800ff56:	b2da      	uxtb	r2, r3
 800ff58:	4b25      	ldr	r3, [pc, #148]	; (800fff0 <ProcessRadioRxDone+0x7bc>)
 800ff5a:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800ff5e:	4b24      	ldr	r3, [pc, #144]	; (800fff0 <ProcessRadioRxDone+0x7bc>)
 800ff60:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d004      	beq.n	800ff72 <ProcessRadioRxDone+0x73e>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800ff68:	4b21      	ldr	r3, [pc, #132]	; (800fff0 <ProcessRadioRxDone+0x7bc>)
 800ff6a:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800ff6e:	2b01      	cmp	r3, #1
 800ff70:	d106      	bne.n	800ff80 <ProcessRadioRxDone+0x74c>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 800ff72:	4b1e      	ldr	r3, [pc, #120]	; (800ffec <ProcessRadioRxDone+0x7b8>)
 800ff74:	2200      	movs	r2, #0
 800ff76:	629a      	str	r2, [r3, #40]	; 0x28
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                Nvm.MacGroup2.DownlinkReceived = true;
 800ff78:	4b1c      	ldr	r3, [pc, #112]	; (800ffec <ProcessRadioRxDone+0x7b8>)
 800ff7a:	2201      	movs	r2, #1
 800ff7c:	f883 211e 	strb.w	r2, [r3, #286]	; 0x11e
#endif /* LORAMAC_VERSION */
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800ff80:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 800ff84:	2b01      	cmp	r3, #1
 800ff86:	d104      	bne.n	800ff92 <ProcessRadioRxDone+0x75e>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800ff88:	4b19      	ldr	r3, [pc, #100]	; (800fff0 <ProcessRadioRxDone+0x7bc>)
 800ff8a:	2202      	movs	r2, #2
 800ff8c:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
 800ff90:	e03a      	b.n	8010008 <ProcessRadioRxDone+0x7d4>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800ff92:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800ff96:	f023 031f 	bic.w	r3, r3, #31
 800ff9a:	b2db      	uxtb	r3, r3
 800ff9c:	2ba0      	cmp	r3, #160	; 0xa0
 800ff9e:	d12b      	bne.n	800fff8 <ProcessRadioRxDone+0x7c4>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 800ffa0:	4b12      	ldr	r3, [pc, #72]	; (800ffec <ProcessRadioRxDone+0x7b8>)
 800ffa2:	2201      	movs	r2, #1
 800ffa4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800ffa8:	4b10      	ldr	r3, [pc, #64]	; (800ffec <ProcessRadioRxDone+0x7b8>)
 800ffaa:	f893 312e 	ldrb.w	r3, [r3, #302]	; 0x12e
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d102      	bne.n	800ffb8 <ProcessRadioRxDone+0x784>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800ffb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ffb4:	4a0d      	ldr	r2, [pc, #52]	; (800ffec <ProcessRadioRxDone+0x7b8>)
 800ffb6:	6353      	str	r3, [r2, #52]	; 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800ffb8:	4b0d      	ldr	r3, [pc, #52]	; (800fff0 <ProcessRadioRxDone+0x7bc>)
 800ffba:	2201      	movs	r2, #1
 800ffbc:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                    // Handle response timeout for class c and class b downlinks
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800ffc0:	4b0b      	ldr	r3, [pc, #44]	; (800fff0 <ProcessRadioRxDone+0x7bc>)
 800ffc2:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d01e      	beq.n	8010008 <ProcessRadioRxDone+0x7d4>
                        ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) )
 800ffca:	4b09      	ldr	r3, [pc, #36]	; (800fff0 <ProcessRadioRxDone+0x7bc>)
 800ffcc:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800ffd0:	2b01      	cmp	r3, #1
 800ffd2:	d019      	beq.n	8010008 <ProcessRadioRxDone+0x7d4>
                    {
                        // Calculate timeout
                        MacCtx.McpsIndication.ResponseTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800ffd4:	4b05      	ldr	r3, [pc, #20]	; (800ffec <ProcessRadioRxDone+0x7b8>)
 800ffd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ffda:	4a05      	ldr	r2, [pc, #20]	; (800fff0 <ProcessRadioRxDone+0x7bc>)
 800ffdc:	f8c2 343c 	str.w	r3, [r2, #1084]	; 0x43c
                        MacCtx.ResponseTimeoutStartTime = RxDoneParams.LastRxDone;
 800ffe0:	4b04      	ldr	r3, [pc, #16]	; (800fff4 <ProcessRadioRxDone+0x7c0>)
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	4a02      	ldr	r2, [pc, #8]	; (800fff0 <ProcessRadioRxDone+0x7bc>)
 800ffe6:	f8c2 3498 	str.w	r3, [r2, #1176]	; 0x498
 800ffea:	e00d      	b.n	8010008 <ProcessRadioRxDone+0x7d4>
 800ffec:	20000bfc 	.word	0x20000bfc
 800fff0:	200006e0 	.word	0x200006e0
 800fff4:	2000182c 	.word	0x2000182c
                    }
#endif /* LORAMAC_VERSION */
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 800fff8:	4b94      	ldr	r3, [pc, #592]	; (801024c <ProcessRadioRxDone+0xa18>)
 800fffa:	2200      	movs	r2, #0
 800fffc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8010000:	4b93      	ldr	r3, [pc, #588]	; (8010250 <ProcessRadioRxDone+0xa1c>)
 8010002:	2200      	movs	r2, #0
 8010004:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
            }

            // Set the pending status
            /* if( ( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) ) ||
                ( MacCtx.McpsIndication.ResponseTimeout > 0 ) ) */
            if( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) )
 8010008:	4b90      	ldr	r3, [pc, #576]	; (801024c <ProcessRadioRxDone+0xa18>)
 801000a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 801000e:	2b00      	cmp	r3, #0
 8010010:	d106      	bne.n	8010020 <ProcessRadioRxDone+0x7ec>
 8010012:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8010016:	f003 0310 	and.w	r3, r3, #16
 801001a:	b2db      	uxtb	r3, r3
 801001c:	2b00      	cmp	r3, #0
 801001e:	d008      	beq.n	8010032 <ProcessRadioRxDone+0x7fe>
 8010020:	4b8a      	ldr	r3, [pc, #552]	; (801024c <ProcessRadioRxDone+0xa18>)
 8010022:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8010026:	2b00      	cmp	r3, #0
 8010028:	d103      	bne.n	8010032 <ProcessRadioRxDone+0x7fe>
            {
                MacCtx.McpsIndication.IsUplinkTxPending = 1;
 801002a:	4b89      	ldr	r3, [pc, #548]	; (8010250 <ProcessRadioRxDone+0xa1c>)
 801002c:	2201      	movs	r2, #1
 801002e:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 8010032:	4b87      	ldr	r3, [pc, #540]	; (8010250 <ProcessRadioRxDone+0xa1c>)
 8010034:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 8010038:	4a85      	ldr	r2, [pc, #532]	; (8010250 <ProcessRadioRxDone+0xa1c>)
 801003a:	f892 2440 	ldrb.w	r2, [r2, #1088]	; 0x440
 801003e:	f897 104c 	ldrb.w	r1, [r7, #76]	; 0x4c
 8010042:	4618      	mov	r0, r3
 8010044:	f001 ff8a 	bl	8011f5c <RemoveMacCommands>

            switch( fType )
 8010048:	7cbb      	ldrb	r3, [r7, #18]
 801004a:	2b03      	cmp	r3, #3
 801004c:	d873      	bhi.n	8010136 <ProcessRadioRxDone+0x902>
 801004e:	a201      	add	r2, pc, #4	; (adr r2, 8010054 <ProcessRadioRxDone+0x820>)
 8010050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010054:	08010065 	.word	0x08010065
 8010058:	080100b5 	.word	0x080100b5
 801005c:	080100eb 	.word	0x080100eb
 8010060:	08010111 	.word	0x08010111
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 8010064:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8010068:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801006c:	b2db      	uxtb	r3, r3
 801006e:	461c      	mov	r4, r3
 8010070:	4b77      	ldr	r3, [pc, #476]	; (8010250 <ProcessRadioRxDone+0xa1c>)
 8010072:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 8010076:	f997 108f 	ldrsb.w	r1, [r7, #143]	; 0x8f
 801007a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801007e:	f102 0010 	add.w	r0, r2, #16
 8010082:	9300      	str	r3, [sp, #0]
 8010084:	460b      	mov	r3, r1
 8010086:	4622      	mov	r2, r4
 8010088:	2100      	movs	r1, #0
 801008a:	f000 ff4f 	bl	8010f2c <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 801008e:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8010092:	4b6f      	ldr	r3, [pc, #444]	; (8010250 <ProcessRadioRxDone+0xa1c>)
 8010094:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8010098:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801009a:	4a6d      	ldr	r2, [pc, #436]	; (8010250 <ProcessRadioRxDone+0xa1c>)
 801009c:	f8c2 3428 	str.w	r3, [r2, #1064]	; 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 80100a0:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 80100a4:	4b6a      	ldr	r3, [pc, #424]	; (8010250 <ProcessRadioRxDone+0xa1c>)
 80100a6:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
                    MacCtx.McpsIndication.RxData = true;
 80100aa:	4b69      	ldr	r3, [pc, #420]	; (8010250 <ProcessRadioRxDone+0xa1c>)
 80100ac:	2201      	movs	r2, #1
 80100ae:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
                    break;
 80100b2:	e047      	b.n	8010144 <ProcessRadioRxDone+0x910>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 80100b4:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80100b8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80100bc:	b2db      	uxtb	r3, r3
 80100be:	461c      	mov	r4, r3
 80100c0:	4b63      	ldr	r3, [pc, #396]	; (8010250 <ProcessRadioRxDone+0xa1c>)
 80100c2:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 80100c6:	f997 108f 	ldrsb.w	r1, [r7, #143]	; 0x8f
 80100ca:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80100ce:	f102 0010 	add.w	r0, r2, #16
 80100d2:	9300      	str	r3, [sp, #0]
 80100d4:	460b      	mov	r3, r1
 80100d6:	4622      	mov	r2, r4
 80100d8:	2100      	movs	r1, #0
 80100da:	f000 ff27 	bl	8010f2c <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 80100de:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 80100e2:	4b5b      	ldr	r3, [pc, #364]	; (8010250 <ProcessRadioRxDone+0xa1c>)
 80100e4:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                    break;
 80100e8:	e02c      	b.n	8010144 <ProcessRadioRxDone+0x910>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 80100ea:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80100ec:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 80100f0:	4b57      	ldr	r3, [pc, #348]	; (8010250 <ProcessRadioRxDone+0xa1c>)
 80100f2:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 80100f6:	f997 108f 	ldrsb.w	r1, [r7, #143]	; 0x8f
 80100fa:	9300      	str	r3, [sp, #0]
 80100fc:	460b      	mov	r3, r1
 80100fe:	2100      	movs	r1, #0
 8010100:	f000 ff14 	bl	8010f2c <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8010104:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8010108:	4b51      	ldr	r3, [pc, #324]	; (8010250 <ProcessRadioRxDone+0xa1c>)
 801010a:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                    break;
 801010e:	e019      	b.n	8010144 <ProcessRadioRxDone+0x910>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8010110:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8010114:	4b4e      	ldr	r3, [pc, #312]	; (8010250 <ProcessRadioRxDone+0xa1c>)
 8010116:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 801011a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801011c:	4a4c      	ldr	r2, [pc, #304]	; (8010250 <ProcessRadioRxDone+0xa1c>)
 801011e:	f8c2 3428 	str.w	r3, [r2, #1064]	; 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8010122:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 8010126:	4b4a      	ldr	r3, [pc, #296]	; (8010250 <ProcessRadioRxDone+0xa1c>)
 8010128:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
                    MacCtx.McpsIndication.RxData = true;
 801012c:	4b48      	ldr	r3, [pc, #288]	; (8010250 <ProcessRadioRxDone+0xa1c>)
 801012e:	2201      	movs	r2, #1
 8010130:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
                    break;
 8010134:	e006      	b.n	8010144 <ProcessRadioRxDone+0x910>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010136:	4b46      	ldr	r3, [pc, #280]	; (8010250 <ProcessRadioRxDone+0xa1c>)
 8010138:	2201      	movs	r2, #1
 801013a:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                    PrepareRxDoneAbort( );
 801013e:	f7ff fb53 	bl	800f7e8 <PrepareRxDoneAbort>
                    break;
 8010142:	bf00      	nop
                }
            }
#endif /* LORAMAC_VERSION */

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 8010144:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8010148:	2be0      	cmp	r3, #224	; 0xe0
 801014a:	d118      	bne.n	801017e <ProcessRadioRxDone+0x94a>
 801014c:	4b3f      	ldr	r3, [pc, #252]	; (801024c <ProcessRadioRxDone+0xa18>)
 801014e:	f893 311f 	ldrb.w	r3, [r3, #287]	; 0x11f
 8010152:	f083 0301 	eor.w	r3, r3, #1
 8010156:	b2db      	uxtb	r3, r3
 8010158:	2b00      	cmp	r3, #0
 801015a:	d010      	beq.n	801017e <ProcessRadioRxDone+0x94a>
            { // Do not notify the upper layer of data reception on FPort LORAMAC_CERT_FPORT if the port
              // handling is disabled.
                MacCtx.McpsIndication.Port = macMsgData.FPort;
 801015c:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8010160:	4b3b      	ldr	r3, [pc, #236]	; (8010250 <ProcessRadioRxDone+0xa1c>)
 8010162:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                MacCtx.McpsIndication.Buffer = NULL;
 8010166:	4b3a      	ldr	r3, [pc, #232]	; (8010250 <ProcessRadioRxDone+0xa1c>)
 8010168:	2200      	movs	r2, #0
 801016a:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
                MacCtx.McpsIndication.BufferSize = 0;
 801016e:	4b38      	ldr	r3, [pc, #224]	; (8010250 <ProcessRadioRxDone+0xa1c>)
 8010170:	2200      	movs	r2, #0
 8010172:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
                MacCtx.McpsIndication.RxData = false;
 8010176:	4b36      	ldr	r3, [pc, #216]	; (8010250 <ProcessRadioRxDone+0xa1c>)
 8010178:	2200      	movs	r2, #0
 801017a:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
            }
#endif /* LORAMAC_VERSION */

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 801017e:	4a34      	ldr	r2, [pc, #208]	; (8010250 <ProcessRadioRxDone+0xa1c>)
 8010180:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8010184:	f043 0302 	orr.w	r3, r3, #2
 8010188:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491

            break;
 801018c:	e035      	b.n	80101fa <ProcessRadioRxDone+0x9c6>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 801018e:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8010192:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010196:	18d1      	adds	r1, r2, r3
 8010198:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 801019c:	b29b      	uxth	r3, r3
 801019e:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 80101a2:	1ad3      	subs	r3, r2, r3
 80101a4:	b29b      	uxth	r3, r3
 80101a6:	461a      	mov	r2, r3
 80101a8:	482a      	ldr	r0, [pc, #168]	; (8010254 <ProcessRadioRxDone+0xa20>)
 80101aa:	f009 ff80 	bl	801a0ae <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 80101ae:	4b28      	ldr	r3, [pc, #160]	; (8010250 <ProcessRadioRxDone+0xa1c>)
 80101b0:	2203      	movs	r2, #3
 80101b2:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80101b6:	4b26      	ldr	r3, [pc, #152]	; (8010250 <ProcessRadioRxDone+0xa1c>)
 80101b8:	2200      	movs	r2, #0
 80101ba:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 80101be:	4b24      	ldr	r3, [pc, #144]	; (8010250 <ProcessRadioRxDone+0xa1c>)
 80101c0:	4a24      	ldr	r2, [pc, #144]	; (8010254 <ProcessRadioRxDone+0xa20>)
 80101c2:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 80101c6:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80101ca:	b2da      	uxtb	r2, r3
 80101cc:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80101d0:	1ad3      	subs	r3, r2, r3
 80101d2:	b2da      	uxtb	r2, r3
 80101d4:	4b1e      	ldr	r3, [pc, #120]	; (8010250 <ProcessRadioRxDone+0xa1c>)
 80101d6:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c

            MacCtx.MacFlags.Bits.McpsInd = 1;
 80101da:	4a1d      	ldr	r2, [pc, #116]	; (8010250 <ProcessRadioRxDone+0xa1c>)
 80101dc:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 80101e0:	f043 0302 	orr.w	r3, r3, #2
 80101e4:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
            break;
 80101e8:	e007      	b.n	80101fa <ProcessRadioRxDone+0x9c6>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80101ea:	4b19      	ldr	r3, [pc, #100]	; (8010250 <ProcessRadioRxDone+0xa1c>)
 80101ec:	2201      	movs	r2, #1
 80101ee:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            PrepareRxDoneAbort( );
 80101f2:	f7ff faf9 	bl	800f7e8 <PrepareRxDoneAbort>
            break;
 80101f6:	e000      	b.n	80101fa <ProcessRadioRxDone+0x9c6>
            break;
 80101f8:	bf00      	nop
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Verify if we need to disable the RetransmitTimeoutTimer
    // Only applies if downlink is received on Rx1 or Rx2 windows.
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 80101fa:	4b15      	ldr	r3, [pc, #84]	; (8010250 <ProcessRadioRxDone+0xa1c>)
 80101fc:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 8010200:	2b00      	cmp	r3, #0
 8010202:	d004      	beq.n	801020e <ProcessRadioRxDone+0x9da>
        ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 8010204:	4b12      	ldr	r3, [pc, #72]	; (8010250 <ProcessRadioRxDone+0xa1c>)
 8010206:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 801020a:	2b01      	cmp	r3, #1
 801020c:	d10c      	bne.n	8010228 <ProcessRadioRxDone+0x9f4>
    {
        if( MacCtx.NodeAckRequested == true )
 801020e:	4b10      	ldr	r3, [pc, #64]	; (8010250 <ProcessRadioRxDone+0xa1c>)
 8010210:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 8010214:	2b00      	cmp	r3, #0
 8010216:	d007      	beq.n	8010228 <ProcessRadioRxDone+0x9f4>
        {
            if( MacCtx.McpsConfirm.AckReceived == true )
 8010218:	4b0d      	ldr	r3, [pc, #52]	; (8010250 <ProcessRadioRxDone+0xa1c>)
 801021a:	f893 3444 	ldrb.w	r3, [r3, #1092]	; 0x444
 801021e:	2b00      	cmp	r3, #0
 8010220:	d002      	beq.n	8010228 <ProcessRadioRxDone+0x9f4>
            {
                OnRetransmitTimeoutTimerEvent( NULL );
 8010222:	2000      	movs	r0, #0
 8010224:	f000 fcec 	bl	8010c00 <OnRetransmitTimeoutTimerEvent>
            }
        }
    }

    if( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_CLASS_C )
 8010228:	4b09      	ldr	r3, [pc, #36]	; (8010250 <ProcessRadioRxDone+0xa1c>)
 801022a:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 801022e:	2b02      	cmp	r3, #2
 8010230:	d006      	beq.n	8010240 <ProcessRadioRxDone+0xa0c>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 8010232:	4a07      	ldr	r2, [pc, #28]	; (8010250 <ProcessRadioRxDone+0xa1c>)
 8010234:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8010238:	f043 0310 	orr.w	r3, r3, #16
 801023c:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
#endif /* LORAMAC_VERSION */

    UpdateRxSlotIdleState( );
 8010240:	f7ff fa14 	bl	800f66c <UpdateRxSlotIdleState>
}
 8010244:	37a4      	adds	r7, #164	; 0xa4
 8010246:	46bd      	mov	sp, r7
 8010248:	bd90      	pop	{r4, r7, pc}
 801024a:	bf00      	nop
 801024c:	20000bfc 	.word	0x20000bfc
 8010250:	200006e0 	.word	0x200006e0
 8010254:	20000918 	.word	0x20000918

08010258 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 8010258:	b580      	push	{r7, lr}
 801025a:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 801025c:	4b11      	ldr	r3, [pc, #68]	; (80102a4 <ProcessRadioTxTimeout+0x4c>)
 801025e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8010262:	2b02      	cmp	r3, #2
 8010264:	d002      	beq.n	801026c <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 8010266:	4b10      	ldr	r3, [pc, #64]	; (80102a8 <ProcessRadioTxTimeout+0x50>)
 8010268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801026a:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 801026c:	f7ff f9fe 	bl	800f66c <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 8010270:	4b0e      	ldr	r3, [pc, #56]	; (80102ac <ProcessRadioTxTimeout+0x54>)
 8010272:	2202      	movs	r2, #2
 8010274:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 8010278:	2002      	movs	r0, #2
 801027a:	f004 fe69 	bl	8014f50 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 801027e:	4b0b      	ldr	r3, [pc, #44]	; (80102ac <ProcessRadioTxTimeout+0x54>)
 8010280:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 8010284:	2b00      	cmp	r3, #0
 8010286:	d003      	beq.n	8010290 <ProcessRadioTxTimeout+0x38>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        MacCtx.AckTimeoutRetry = true;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        MacCtx.RetransmitTimeoutRetry = true;
 8010288:	4b08      	ldr	r3, [pc, #32]	; (80102ac <ProcessRadioTxTimeout+0x54>)
 801028a:	2201      	movs	r2, #1
 801028c:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
#endif /* LORAMAC_VERSION */
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 8010290:	4a06      	ldr	r2, [pc, #24]	; (80102ac <ProcessRadioTxTimeout+0x54>)
 8010292:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8010296:	f043 0310 	orr.w	r3, r3, #16
 801029a:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
}
 801029e:	bf00      	nop
 80102a0:	bd80      	pop	{r7, pc}
 80102a2:	bf00      	nop
 80102a4:	20000bfc 	.word	0x20000bfc
 80102a8:	0801fccc 	.word	0x0801fccc
 80102ac:	200006e0 	.word	0x200006e0

080102b0 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 80102b0:	b580      	push	{r7, lr}
 80102b2:	b084      	sub	sp, #16
 80102b4:	af00      	add	r7, sp, #0
 80102b6:	4603      	mov	r3, r0
 80102b8:	460a      	mov	r2, r1
 80102ba:	71fb      	strb	r3, [r7, #7]
 80102bc:	4613      	mov	r3, r2
 80102be:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 80102c0:	2300      	movs	r3, #0
 80102c2:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80102c4:	4b3d      	ldr	r3, [pc, #244]	; (80103bc <HandleRadioRxErrorTimeout+0x10c>)
 80102c6:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80102ca:	2b02      	cmp	r3, #2
 80102cc:	d002      	beq.n	80102d4 <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 80102ce:	4b3c      	ldr	r3, [pc, #240]	; (80103c0 <HandleRadioRxErrorTimeout+0x110>)
 80102d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102d2:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 80102d4:	f004 f966 	bl	80145a4 <LoRaMacClassBIsBeaconExpected>
 80102d8:	4603      	mov	r3, r0
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d007      	beq.n	80102ee <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 80102de:	2002      	movs	r0, #2
 80102e0:	f004 f914 	bl	801450c <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 80102e4:	2000      	movs	r0, #0
 80102e6:	f004 f936 	bl	8014556 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 80102ea:	2301      	movs	r3, #1
 80102ec:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80102ee:	4b33      	ldr	r3, [pc, #204]	; (80103bc <HandleRadioRxErrorTimeout+0x10c>)
 80102f0:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80102f4:	2b01      	cmp	r3, #1
 80102f6:	d119      	bne.n	801032c <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 80102f8:	f004 f95b 	bl	80145b2 <LoRaMacClassBIsPingExpected>
 80102fc:	4603      	mov	r3, r0
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d007      	beq.n	8010312 <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8010302:	2000      	movs	r0, #0
 8010304:	f004 f90c 	bl	8014520 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8010308:	2000      	movs	r0, #0
 801030a:	f004 f92d 	bl	8014568 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 801030e:	2301      	movs	r3, #1
 8010310:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 8010312:	f004 f955 	bl	80145c0 <LoRaMacClassBIsMulticastExpected>
 8010316:	4603      	mov	r3, r0
 8010318:	2b00      	cmp	r3, #0
 801031a:	d007      	beq.n	801032c <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 801031c:	2000      	movs	r0, #0
 801031e:	f004 f909 	bl	8014534 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8010322:	2000      	movs	r0, #0
 8010324:	f004 f929 	bl	801457a <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 8010328:	2301      	movs	r3, #1
 801032a:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 801032c:	7bfb      	ldrb	r3, [r7, #15]
 801032e:	f083 0301 	eor.w	r3, r3, #1
 8010332:	b2db      	uxtb	r3, r3
 8010334:	2b00      	cmp	r3, #0
 8010336:	d03b      	beq.n	80103b0 <HandleRadioRxErrorTimeout+0x100>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8010338:	4b22      	ldr	r3, [pc, #136]	; (80103c4 <HandleRadioRxErrorTimeout+0x114>)
 801033a:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 801033e:	2b00      	cmp	r3, #0
 8010340:	d122      	bne.n	8010388 <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 8010342:	4b20      	ldr	r3, [pc, #128]	; (80103c4 <HandleRadioRxErrorTimeout+0x114>)
 8010344:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 8010348:	2b00      	cmp	r3, #0
 801034a:	d003      	beq.n	8010354 <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 801034c:	4a1d      	ldr	r2, [pc, #116]	; (80103c4 <HandleRadioRxErrorTimeout+0x114>)
 801034e:	79fb      	ldrb	r3, [r7, #7]
 8010350:	f882 3441 	strb.w	r3, [r2, #1089]	; 0x441
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 8010354:	79fb      	ldrb	r3, [r7, #7]
 8010356:	4618      	mov	r0, r3
 8010358:	f004 fdfa 	bl	8014f50 <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 801035c:	4b17      	ldr	r3, [pc, #92]	; (80103bc <HandleRadioRxErrorTimeout+0x10c>)
 801035e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010360:	4618      	mov	r0, r3
 8010362:	f00e f96b 	bl	801e63c <UTIL_TIMER_GetElapsedTime>
 8010366:	4602      	mov	r2, r0
 8010368:	4b16      	ldr	r3, [pc, #88]	; (80103c4 <HandleRadioRxErrorTimeout+0x114>)
 801036a:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 801036e:	429a      	cmp	r2, r3
 8010370:	d31e      	bcc.n	80103b0 <HandleRadioRxErrorTimeout+0x100>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 8010372:	4815      	ldr	r0, [pc, #84]	; (80103c8 <HandleRadioRxErrorTimeout+0x118>)
 8010374:	f00e f836 	bl	801e3e4 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 8010378:	4a12      	ldr	r2, [pc, #72]	; (80103c4 <HandleRadioRxErrorTimeout+0x114>)
 801037a:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 801037e:	f043 0310 	orr.w	r3, r3, #16
 8010382:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
 8010386:	e013      	b.n	80103b0 <HandleRadioRxErrorTimeout+0x100>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 8010388:	4b0e      	ldr	r3, [pc, #56]	; (80103c4 <HandleRadioRxErrorTimeout+0x114>)
 801038a:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 801038e:	2b00      	cmp	r3, #0
 8010390:	d003      	beq.n	801039a <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 8010392:	4a0c      	ldr	r2, [pc, #48]	; (80103c4 <HandleRadioRxErrorTimeout+0x114>)
 8010394:	79bb      	ldrb	r3, [r7, #6]
 8010396:	f882 3441 	strb.w	r3, [r2, #1089]	; 0x441
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 801039a:	79bb      	ldrb	r3, [r7, #6]
 801039c:	4618      	mov	r0, r3
 801039e:	f004 fdd7 	bl	8014f50 <LoRaMacConfirmQueueSetStatusCmn>
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.MacFlags.Bits.MacDone = 1;
 80103a2:	4a08      	ldr	r2, [pc, #32]	; (80103c4 <HandleRadioRxErrorTimeout+0x114>)
 80103a4:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 80103a8:	f043 0310 	orr.w	r3, r3, #16
 80103ac:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
#endif /* LORAMAC_VERSION */
        }
    }

    UpdateRxSlotIdleState( );
 80103b0:	f7ff f95c 	bl	800f66c <UpdateRxSlotIdleState>
}
 80103b4:	bf00      	nop
 80103b6:	3710      	adds	r7, #16
 80103b8:	46bd      	mov	sp, r7
 80103ba:	bd80      	pop	{r7, pc}
 80103bc:	20000bfc 	.word	0x20000bfc
 80103c0:	0801fccc 	.word	0x0801fccc
 80103c4:	200006e0 	.word	0x200006e0
 80103c8:	20000a78 	.word	0x20000a78

080103cc <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 80103cc:	b580      	push	{r7, lr}
 80103ce:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 80103d0:	2106      	movs	r1, #6
 80103d2:	2005      	movs	r0, #5
 80103d4:	f7ff ff6c 	bl	80102b0 <HandleRadioRxErrorTimeout>
}
 80103d8:	bf00      	nop
 80103da:	bd80      	pop	{r7, pc}

080103dc <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 80103dc:	b580      	push	{r7, lr}
 80103de:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 80103e0:	2104      	movs	r1, #4
 80103e2:	2003      	movs	r0, #3
 80103e4:	f7ff ff64 	bl	80102b0 <HandleRadioRxErrorTimeout>
}
 80103e8:	bf00      	nop
 80103ea:	bd80      	pop	{r7, pc}

080103ec <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 80103ec:	b580      	push	{r7, lr}
 80103ee:	b084      	sub	sp, #16
 80103f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80103f2:	f3ef 8310 	mrs	r3, PRIMASK
 80103f6:	607b      	str	r3, [r7, #4]
  return(result);
 80103f8:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 80103fa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80103fc:	b672      	cpsid	i
}
 80103fe:	bf00      	nop
    events = LoRaMacRadioEvents;
 8010400:	4b1d      	ldr	r3, [pc, #116]	; (8010478 <LoRaMacHandleIrqEvents+0x8c>)
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 8010406:	4b1c      	ldr	r3, [pc, #112]	; (8010478 <LoRaMacHandleIrqEvents+0x8c>)
 8010408:	2200      	movs	r2, #0
 801040a:	601a      	str	r2, [r3, #0]
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010410:	68bb      	ldr	r3, [r7, #8]
 8010412:	f383 8810 	msr	PRIMASK, r3
}
 8010416:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 8010418:	683b      	ldr	r3, [r7, #0]
 801041a:	2b00      	cmp	r3, #0
 801041c:	d027      	beq.n	801046e <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 801041e:	783b      	ldrb	r3, [r7, #0]
 8010420:	f003 0320 	and.w	r3, r3, #32
 8010424:	b2db      	uxtb	r3, r3
 8010426:	2b00      	cmp	r3, #0
 8010428:	d001      	beq.n	801042e <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 801042a:	f7ff f937 	bl	800f69c <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 801042e:	783b      	ldrb	r3, [r7, #0]
 8010430:	f003 0310 	and.w	r3, r3, #16
 8010434:	b2db      	uxtb	r3, r3
 8010436:	2b00      	cmp	r3, #0
 8010438:	d001      	beq.n	801043e <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 801043a:	f7ff f9fb 	bl	800f834 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 801043e:	783b      	ldrb	r3, [r7, #0]
 8010440:	f003 0308 	and.w	r3, r3, #8
 8010444:	b2db      	uxtb	r3, r3
 8010446:	2b00      	cmp	r3, #0
 8010448:	d001      	beq.n	801044e <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 801044a:	f7ff ff05 	bl	8010258 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 801044e:	783b      	ldrb	r3, [r7, #0]
 8010450:	f003 0304 	and.w	r3, r3, #4
 8010454:	b2db      	uxtb	r3, r3
 8010456:	2b00      	cmp	r3, #0
 8010458:	d001      	beq.n	801045e <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 801045a:	f7ff ffb7 	bl	80103cc <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 801045e:	783b      	ldrb	r3, [r7, #0]
 8010460:	f003 0302 	and.w	r3, r3, #2
 8010464:	b2db      	uxtb	r3, r3
 8010466:	2b00      	cmp	r3, #0
 8010468:	d001      	beq.n	801046e <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 801046a:	f7ff ffb7 	bl	80103dc <ProcessRadioRxTimeout>
        }
    }
}
 801046e:	bf00      	nop
 8010470:	3710      	adds	r7, #16
 8010472:	46bd      	mov	sp, r7
 8010474:	bd80      	pop	{r7, pc}
 8010476:	bf00      	nop
 8010478:	20001824 	.word	0x20001824

0801047c <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 801047c:	b480      	push	{r7}
 801047e:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 8010480:	4b10      	ldr	r3, [pc, #64]	; (80104c4 <LoRaMacIsBusy+0x48>)
 8010482:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010486:	2b01      	cmp	r3, #1
 8010488:	d101      	bne.n	801048e <LoRaMacIsBusy+0x12>
    {
        return false;
 801048a:	2300      	movs	r3, #0
 801048c:	e015      	b.n	80104ba <LoRaMacIsBusy+0x3e>
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
 801048e:	4b0e      	ldr	r3, [pc, #56]	; (80104c8 <LoRaMacIsBusy+0x4c>)
 8010490:	781b      	ldrb	r3, [r3, #0]
 8010492:	f003 0301 	and.w	r3, r3, #1
 8010496:	b2db      	uxtb	r3, r3
 8010498:	2b00      	cmp	r3, #0
 801049a:	d001      	beq.n	80104a0 <LoRaMacIsBusy+0x24>
    {
        return true;
 801049c:	2301      	movs	r3, #1
 801049e:	e00c      	b.n	80104ba <LoRaMacIsBusy+0x3e>
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 80104a0:	4b08      	ldr	r3, [pc, #32]	; (80104c4 <LoRaMacIsBusy+0x48>)
 80104a2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d106      	bne.n	80104b8 <LoRaMacIsBusy+0x3c>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 80104aa:	4b06      	ldr	r3, [pc, #24]	; (80104c4 <LoRaMacIsBusy+0x48>)
 80104ac:	f893 3492 	ldrb.w	r3, [r3, #1170]	; 0x492
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 80104b0:	2b01      	cmp	r3, #1
 80104b2:	d101      	bne.n	80104b8 <LoRaMacIsBusy+0x3c>
    {
        return false;
 80104b4:	2300      	movs	r3, #0
 80104b6:	e000      	b.n	80104ba <LoRaMacIsBusy+0x3e>
    }
    return true;
 80104b8:	2301      	movs	r3, #1
}
 80104ba:	4618      	mov	r0, r3
 80104bc:	46bd      	mov	sp, r7
 80104be:	bc80      	pop	{r7}
 80104c0:	4770      	bx	lr
 80104c2:	bf00      	nop
 80104c4:	200006e0 	.word	0x200006e0
 80104c8:	20001824 	.word	0x20001824

080104cc <LoRaMacIsStopped>:

bool LoRaMacIsStopped( void )
{
 80104cc:	b480      	push	{r7}
 80104ce:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 80104d0:	4b05      	ldr	r3, [pc, #20]	; (80104e8 <LoRaMacIsStopped+0x1c>)
 80104d2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80104d6:	2b01      	cmp	r3, #1
 80104d8:	d101      	bne.n	80104de <LoRaMacIsStopped+0x12>
    {
        return true;
 80104da:	2301      	movs	r3, #1
 80104dc:	e000      	b.n	80104e0 <LoRaMacIsStopped+0x14>
    }
    return false;
 80104de:	2300      	movs	r3, #0
}
 80104e0:	4618      	mov	r0, r3
 80104e2:	46bd      	mov	sp, r7
 80104e4:	bc80      	pop	{r7}
 80104e6:	4770      	bx	lr
 80104e8:	200006e0 	.word	0x200006e0

080104ec <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 80104ec:	b480      	push	{r7}
 80104ee:	b083      	sub	sp, #12
 80104f0:	af00      	add	r7, sp, #0
 80104f2:	4603      	mov	r3, r0
 80104f4:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 80104f6:	4a04      	ldr	r2, [pc, #16]	; (8010508 <LoRaMacEnableRequests+0x1c>)
 80104f8:	79fb      	ldrb	r3, [r7, #7]
 80104fa:	f882 3492 	strb.w	r3, [r2, #1170]	; 0x492
}
 80104fe:	bf00      	nop
 8010500:	370c      	adds	r7, #12
 8010502:	46bd      	mov	sp, r7
 8010504:	bc80      	pop	{r7}
 8010506:	4770      	bx	lr
 8010508:	200006e0 	.word	0x200006e0

0801050c <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 801050c:	b580      	push	{r7, lr}
 801050e:	b082      	sub	sp, #8
 8010510:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 8010512:	4b2c      	ldr	r3, [pc, #176]	; (80105c4 <LoRaMacHandleRequestEvents+0xb8>)
 8010514:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8010518:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 801051a:	4b2a      	ldr	r3, [pc, #168]	; (80105c4 <LoRaMacHandleRequestEvents+0xb8>)
 801051c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010520:	2b00      	cmp	r3, #0
 8010522:	d14a      	bne.n	80105ba <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8010524:	4b27      	ldr	r3, [pc, #156]	; (80105c4 <LoRaMacHandleRequestEvents+0xb8>)
 8010526:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 801052a:	f003 0301 	and.w	r3, r3, #1
 801052e:	b2db      	uxtb	r3, r3
 8010530:	2b00      	cmp	r3, #0
 8010532:	d006      	beq.n	8010542 <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 8010534:	4a23      	ldr	r2, [pc, #140]	; (80105c4 <LoRaMacHandleRequestEvents+0xb8>)
 8010536:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 801053a:	f36f 0300 	bfc	r3, #0, #1
 801053e:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8010542:	4b20      	ldr	r3, [pc, #128]	; (80105c4 <LoRaMacHandleRequestEvents+0xb8>)
 8010544:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8010548:	f003 0304 	and.w	r3, r3, #4
 801054c:	b2db      	uxtb	r3, r3
 801054e:	2b00      	cmp	r3, #0
 8010550:	d006      	beq.n	8010560 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8010552:	4a1c      	ldr	r2, [pc, #112]	; (80105c4 <LoRaMacHandleRequestEvents+0xb8>)
 8010554:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8010558:	f36f 0382 	bfc	r3, #2, #1
 801055c:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8010560:	2001      	movs	r0, #1
 8010562:	f7ff ffc3 	bl	80104ec <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 8010566:	793b      	ldrb	r3, [r7, #4]
 8010568:	f003 0301 	and.w	r3, r3, #1
 801056c:	b2db      	uxtb	r3, r3
 801056e:	2b00      	cmp	r3, #0
 8010570:	d005      	beq.n	801057e <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 8010572:	4b14      	ldr	r3, [pc, #80]	; (80105c4 <LoRaMacHandleRequestEvents+0xb8>)
 8010574:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	4813      	ldr	r0, [pc, #76]	; (80105c8 <LoRaMacHandleRequestEvents+0xbc>)
 801057c:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 801057e:	793b      	ldrb	r3, [r7, #4]
 8010580:	f003 0304 	and.w	r3, r3, #4
 8010584:	b2db      	uxtb	r3, r3
 8010586:	2b00      	cmp	r3, #0
 8010588:	d00e      	beq.n	80105a8 <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 801058a:	4810      	ldr	r0, [pc, #64]	; (80105cc <LoRaMacHandleRequestEvents+0xc0>)
 801058c:	f004 fd2e 	bl	8014fec <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 8010590:	f004 fd7e 	bl	8015090 <LoRaMacConfirmQueueGetCnt>
 8010594:	4603      	mov	r3, r0
 8010596:	2b00      	cmp	r3, #0
 8010598:	d006      	beq.n	80105a8 <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 801059a:	4a0a      	ldr	r2, [pc, #40]	; (80105c4 <LoRaMacHandleRequestEvents+0xb8>)
 801059c:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 80105a0:	f043 0304 	orr.w	r3, r3, #4
 80105a4:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 80105a8:	f004 f828 	bl	80145fc <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 80105ac:	4a05      	ldr	r2, [pc, #20]	; (80105c4 <LoRaMacHandleRequestEvents+0xb8>)
 80105ae:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 80105b2:	f36f 1304 	bfc	r3, #4, #1
 80105b6:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
}
 80105ba:	bf00      	nop
 80105bc:	3708      	adds	r7, #8
 80105be:	46bd      	mov	sp, r7
 80105c0:	bd80      	pop	{r7, pc}
 80105c2:	bf00      	nop
 80105c4:	200006e0 	.word	0x200006e0
 80105c8:	20000b20 	.word	0x20000b20
 80105cc:	20000b34 	.word	0x20000b34

080105d0 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 80105d0:	b580      	push	{r7, lr}
 80105d2:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 80105d4:	4b16      	ldr	r3, [pc, #88]	; (8010630 <LoRaMacHandleIndicationEvents+0x60>)
 80105d6:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 80105da:	f003 0308 	and.w	r3, r3, #8
 80105de:	b2db      	uxtb	r3, r3
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d00d      	beq.n	8010600 <LoRaMacHandleIndicationEvents+0x30>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 80105e4:	4a12      	ldr	r2, [pc, #72]	; (8010630 <LoRaMacHandleIndicationEvents+0x60>)
 80105e6:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 80105ea:	f36f 03c3 	bfc	r3, #3, #1
 80105ee:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 80105f2:	4b0f      	ldr	r3, [pc, #60]	; (8010630 <LoRaMacHandleIndicationEvents+0x60>)
 80105f4:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 80105f8:	68db      	ldr	r3, [r3, #12]
 80105fa:	490e      	ldr	r1, [pc, #56]	; (8010634 <LoRaMacHandleIndicationEvents+0x64>)
 80105fc:	480e      	ldr	r0, [pc, #56]	; (8010638 <LoRaMacHandleIndicationEvents+0x68>)
 80105fe:	4798      	blx	r3
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8010600:	4b0b      	ldr	r3, [pc, #44]	; (8010630 <LoRaMacHandleIndicationEvents+0x60>)
 8010602:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8010606:	f003 0302 	and.w	r3, r3, #2
 801060a:	b2db      	uxtb	r3, r3
 801060c:	2b00      	cmp	r3, #0
 801060e:	d00d      	beq.n	801062c <LoRaMacHandleIndicationEvents+0x5c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 8010610:	4a07      	ldr	r2, [pc, #28]	; (8010630 <LoRaMacHandleIndicationEvents+0x60>)
 8010612:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8010616:	f36f 0341 	bfc	r3, #1, #1
 801061a:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 801061e:	4b04      	ldr	r3, [pc, #16]	; (8010630 <LoRaMacHandleIndicationEvents+0x60>)
 8010620:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 8010624:	685b      	ldr	r3, [r3, #4]
 8010626:	4903      	ldr	r1, [pc, #12]	; (8010634 <LoRaMacHandleIndicationEvents+0x64>)
 8010628:	4804      	ldr	r0, [pc, #16]	; (801063c <LoRaMacHandleIndicationEvents+0x6c>)
 801062a:	4798      	blx	r3
    }
}
 801062c:	bf00      	nop
 801062e:	bd80      	pop	{r7, pc}
 8010630:	200006e0 	.word	0x200006e0
 8010634:	20000b6c 	.word	0x20000b6c
 8010638:	20000b48 	.word	0x20000b48
 801063c:	20000b00 	.word	0x20000b00

08010640 <LoRaMacHandleMcpsRequest>:
    }
}
#endif /* LORAMAC_VERSION */

static void LoRaMacHandleMcpsRequest( void )
{
 8010640:	b580      	push	{r7, lr}
 8010642:	b082      	sub	sp, #8
 8010644:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8010646:	4b2a      	ldr	r3, [pc, #168]	; (80106f0 <LoRaMacHandleMcpsRequest+0xb0>)
 8010648:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 801064c:	f003 0301 	and.w	r3, r3, #1
 8010650:	b2db      	uxtb	r3, r3
 8010652:	2b00      	cmp	r3, #0
 8010654:	d048      	beq.n	80106e8 <LoRaMacHandleMcpsRequest+0xa8>
    {
        bool stopRetransmission = false;
 8010656:	2300      	movs	r3, #0
 8010658:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 801065a:	2300      	movs	r3, #0
 801065c:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 801065e:	4b24      	ldr	r3, [pc, #144]	; (80106f0 <LoRaMacHandleMcpsRequest+0xb0>)
 8010660:	f893 3440 	ldrb.w	r3, [r3, #1088]	; 0x440
 8010664:	2b00      	cmp	r3, #0
 8010666:	d004      	beq.n	8010672 <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 8010668:	4b21      	ldr	r3, [pc, #132]	; (80106f0 <LoRaMacHandleMcpsRequest+0xb0>)
 801066a:	f893 3440 	ldrb.w	r3, [r3, #1088]	; 0x440
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 801066e:	2b03      	cmp	r3, #3
 8010670:	d104      	bne.n	801067c <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 8010672:	f002 f943 	bl	80128fc <CheckRetransUnconfirmedUplink>
 8010676:	4603      	mov	r3, r0
 8010678:	71fb      	strb	r3, [r7, #7]
 801067a:	e010      	b.n	801069e <LoRaMacHandleMcpsRequest+0x5e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 801067c:	4b1c      	ldr	r3, [pc, #112]	; (80106f0 <LoRaMacHandleMcpsRequest+0xb0>)
 801067e:	f893 3440 	ldrb.w	r3, [r3, #1088]	; 0x440
 8010682:	2b01      	cmp	r3, #1
 8010684:	d10b      	bne.n	801069e <LoRaMacHandleMcpsRequest+0x5e>
            else
            {
                waitForRetransmission = true;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( MacCtx.RetransmitTimeoutRetry == true )
 8010686:	4b1a      	ldr	r3, [pc, #104]	; (80106f0 <LoRaMacHandleMcpsRequest+0xb0>)
 8010688:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 801068c:	2b00      	cmp	r3, #0
 801068e:	d004      	beq.n	801069a <LoRaMacHandleMcpsRequest+0x5a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 8010690:	f002 f960 	bl	8012954 <CheckRetransConfirmedUplink>
 8010694:	4603      	mov	r3, r0
 8010696:	71fb      	strb	r3, [r7, #7]
 8010698:	e001      	b.n	801069e <LoRaMacHandleMcpsRequest+0x5e>
            }
            else
            {
                waitForRetransmission = true;
 801069a:	2301      	movs	r3, #1
 801069c:	71bb      	strb	r3, [r7, #6]
            }
#endif /* LORAMAC_VERSION */
        }

        if( stopRetransmission == true )
 801069e:	79fb      	ldrb	r3, [r7, #7]
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d00d      	beq.n	80106c0 <LoRaMacHandleMcpsRequest+0x80>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 80106a4:	4813      	ldr	r0, [pc, #76]	; (80106f4 <LoRaMacHandleMcpsRequest+0xb4>)
 80106a6:	f00d fe9d 	bl	801e3e4 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 80106aa:	4b11      	ldr	r3, [pc, #68]	; (80106f0 <LoRaMacHandleMcpsRequest+0xb0>)
 80106ac:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80106b0:	f023 0320 	bic.w	r3, r3, #32
 80106b4:	4a0e      	ldr	r2, [pc, #56]	; (80106f0 <LoRaMacHandleMcpsRequest+0xb0>)
 80106b6:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            StopRetransmission( );
 80106ba:	f002 f985 	bl	80129c8 <StopRetransmission>
#endif /* LORAMAC_VERSION */
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 80106be:	e013      	b.n	80106e8 <LoRaMacHandleMcpsRequest+0xa8>
        else if( waitForRetransmission == false )
 80106c0:	79bb      	ldrb	r3, [r7, #6]
 80106c2:	f083 0301 	eor.w	r3, r3, #1
 80106c6:	b2db      	uxtb	r3, r3
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d00d      	beq.n	80106e8 <LoRaMacHandleMcpsRequest+0xa8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 80106cc:	4a08      	ldr	r2, [pc, #32]	; (80106f0 <LoRaMacHandleMcpsRequest+0xb0>)
 80106ce:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 80106d2:	f36f 1304 	bfc	r3, #4, #1
 80106d6:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
            MacCtx.RetransmitTimeoutRetry = false;
 80106da:	4b05      	ldr	r3, [pc, #20]	; (80106f0 <LoRaMacHandleMcpsRequest+0xb0>)
 80106dc:	2200      	movs	r2, #0
 80106de:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
            OnTxDelayedTimerEvent( NULL );
 80106e2:	2000      	movs	r0, #0
 80106e4:	f000 f9c8 	bl	8010a78 <OnTxDelayedTimerEvent>
}
 80106e8:	bf00      	nop
 80106ea:	3708      	adds	r7, #8
 80106ec:	46bd      	mov	sp, r7
 80106ee:	bd80      	pop	{r7, pc}
 80106f0:	200006e0 	.word	0x200006e0
 80106f4:	20000a48 	.word	0x20000a48

080106f8 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 80106f8:	b580      	push	{r7, lr}
 80106fa:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 80106fc:	4b18      	ldr	r3, [pc, #96]	; (8010760 <LoRaMacHandleMlmeRequest+0x68>)
 80106fe:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8010702:	f003 0304 	and.w	r3, r3, #4
 8010706:	b2db      	uxtb	r3, r3
 8010708:	2b00      	cmp	r3, #0
 801070a:	d026      	beq.n	801075a <LoRaMacHandleMlmeRequest+0x62>
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_1 ) == true ) ||
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_2 ) == true ) )
        {
            MacCtx.ChannelsNbTransCounter = 0;
#else
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 801070c:	2001      	movs	r0, #1
 801070e:	f004 fc53 	bl	8014fb8 <LoRaMacConfirmQueueIsCmdActive>
 8010712:	4603      	mov	r3, r0
 8010714:	2b00      	cmp	r3, #0
 8010716:	d012      	beq.n	801073e <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 8010718:	2001      	movs	r0, #1
 801071a:	f004 fbef 	bl	8014efc <LoRaMacConfirmQueueGetStatus>
 801071e:	4603      	mov	r3, r0
 8010720:	2b00      	cmp	r3, #0
 8010722:	d103      	bne.n	801072c <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 8010724:	4b0e      	ldr	r3, [pc, #56]	; (8010760 <LoRaMacHandleMlmeRequest+0x68>)
 8010726:	2200      	movs	r2, #0
 8010728:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
            }
#endif /* LORAMAC_VERSION */
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 801072c:	4b0c      	ldr	r3, [pc, #48]	; (8010760 <LoRaMacHandleMlmeRequest+0x68>)
 801072e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010732:	f023 0302 	bic.w	r3, r3, #2
 8010736:	4a0a      	ldr	r2, [pc, #40]	; (8010760 <LoRaMacHandleMlmeRequest+0x68>)
 8010738:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
#endif /* LORAMAC_VERSION */
    }
}
 801073c:	e00d      	b.n	801075a <LoRaMacHandleMlmeRequest+0x62>
        else if( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true )
 801073e:	2006      	movs	r0, #6
 8010740:	f004 fc3a 	bl	8014fb8 <LoRaMacConfirmQueueIsCmdActive>
 8010744:	4603      	mov	r3, r0
 8010746:	2b00      	cmp	r3, #0
 8010748:	d007      	beq.n	801075a <LoRaMacHandleMlmeRequest+0x62>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 801074a:	4b05      	ldr	r3, [pc, #20]	; (8010760 <LoRaMacHandleMlmeRequest+0x68>)
 801074c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010750:	f023 0302 	bic.w	r3, r3, #2
 8010754:	4a02      	ldr	r2, [pc, #8]	; (8010760 <LoRaMacHandleMlmeRequest+0x68>)
 8010756:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 801075a:	bf00      	nop
 801075c:	bd80      	pop	{r7, pc}
 801075e:	bf00      	nop
 8010760:	200006e0 	.word	0x200006e0

08010764 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 8010764:	b580      	push	{r7, lr}
 8010766:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8010768:	200b      	movs	r0, #11
 801076a:	f004 fc25 	bl	8014fb8 <LoRaMacConfirmQueueIsCmdActive>
 801076e:	4603      	mov	r3, r0
 8010770:	2b00      	cmp	r3, #0
 8010772:	d019      	beq.n	80107a8 <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 8010774:	4b0e      	ldr	r3, [pc, #56]	; (80107b0 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8010776:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 801077a:	f003 0301 	and.w	r3, r3, #1
 801077e:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8010780:	2b00      	cmp	r3, #0
 8010782:	d111      	bne.n	80107a8 <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8010784:	4b0a      	ldr	r3, [pc, #40]	; (80107b0 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8010786:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 801078a:	f003 0304 	and.w	r3, r3, #4
 801078e:	b2db      	uxtb	r3, r3
 8010790:	2b00      	cmp	r3, #0
 8010792:	d009      	beq.n	80107a8 <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8010794:	4b06      	ldr	r3, [pc, #24]	; (80107b0 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8010796:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801079a:	f023 0302 	bic.w	r3, r3, #2
 801079e:	4a04      	ldr	r2, [pc, #16]	; (80107b0 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 80107a0:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 80107a4:	2301      	movs	r3, #1
 80107a6:	e000      	b.n	80107aa <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 80107a8:	2300      	movs	r3, #0
}
 80107aa:	4618      	mov	r0, r3
 80107ac:	bd80      	pop	{r7, pc}
 80107ae:	bf00      	nop
 80107b0:	200006e0 	.word	0x200006e0

080107b4 <CheckForMinimumAbpDatarate>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckForMinimumAbpDatarate( bool adr, ActivationType_t activation, bool datarateChanged )
{
 80107b4:	b480      	push	{r7}
 80107b6:	b083      	sub	sp, #12
 80107b8:	af00      	add	r7, sp, #0
 80107ba:	4603      	mov	r3, r0
 80107bc:	71fb      	strb	r3, [r7, #7]
 80107be:	460b      	mov	r3, r1
 80107c0:	71bb      	strb	r3, [r7, #6]
 80107c2:	4613      	mov	r3, r2
 80107c4:	717b      	strb	r3, [r7, #5]
    if( ( adr == true ) &&
 80107c6:	79fb      	ldrb	r3, [r7, #7]
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d00a      	beq.n	80107e2 <CheckForMinimumAbpDatarate+0x2e>
 80107cc:	79bb      	ldrb	r3, [r7, #6]
 80107ce:	2b01      	cmp	r3, #1
 80107d0:	d107      	bne.n	80107e2 <CheckForMinimumAbpDatarate+0x2e>
        ( activation == ACTIVATION_TYPE_ABP ) &&
        ( datarateChanged == false ) )
 80107d2:	797b      	ldrb	r3, [r7, #5]
 80107d4:	f083 0301 	eor.w	r3, r3, #1
 80107d8:	b2db      	uxtb	r3, r3
        ( activation == ACTIVATION_TYPE_ABP ) &&
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d001      	beq.n	80107e2 <CheckForMinimumAbpDatarate+0x2e>
    {
        return true;
 80107de:	2301      	movs	r3, #1
 80107e0:	e000      	b.n	80107e4 <CheckForMinimumAbpDatarate+0x30>
    }
    return false;
 80107e2:	2300      	movs	r3, #0
}
 80107e4:	4618      	mov	r0, r3
 80107e6:	370c      	adds	r7, #12
 80107e8:	46bd      	mov	sp, r7
 80107ea:	bc80      	pop	{r7}
 80107ec:	4770      	bx	lr
	...

080107f0 <LoRaMacCheckForRxAbort>:
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
 80107f0:	b480      	push	{r7}
 80107f2:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 80107f4:	4b0d      	ldr	r3, [pc, #52]	; (801082c <LoRaMacCheckForRxAbort+0x3c>)
 80107f6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80107fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d00f      	beq.n	8010822 <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 8010802:	4b0a      	ldr	r3, [pc, #40]	; (801082c <LoRaMacCheckForRxAbort+0x3c>)
 8010804:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010808:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801080c:	4a07      	ldr	r2, [pc, #28]	; (801082c <LoRaMacCheckForRxAbort+0x3c>)
 801080e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8010812:	4b06      	ldr	r3, [pc, #24]	; (801082c <LoRaMacCheckForRxAbort+0x3c>)
 8010814:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010818:	f023 0302 	bic.w	r3, r3, #2
 801081c:	4a03      	ldr	r2, [pc, #12]	; (801082c <LoRaMacCheckForRxAbort+0x3c>)
 801081e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 8010822:	bf00      	nop
 8010824:	46bd      	mov	sp, r7
 8010826:	bc80      	pop	{r7}
 8010828:	4770      	bx	lr
 801082a:	bf00      	nop
 801082c:	200006e0 	.word	0x200006e0

08010830 <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 8010830:	b580      	push	{r7, lr}
 8010832:	b084      	sub	sp, #16
 8010834:	af00      	add	r7, sp, #0
 8010836:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 8010838:	2300      	movs	r3, #0
 801083a:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 801083c:	2300      	movs	r3, #0
 801083e:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 8010840:	4b51      	ldr	r3, [pc, #324]	; (8010988 <LoRaMacHandleNvm+0x158>)
 8010842:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010846:	2b00      	cmp	r3, #0
 8010848:	f040 8099 	bne.w	801097e <LoRaMacHandleNvm+0x14e>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	2124      	movs	r1, #36	; 0x24
 8010850:	4618      	mov	r0, r3
 8010852:	f009 fc81 	bl	801a158 <Crc32>
 8010856:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801085c:	68ba      	ldr	r2, [r7, #8]
 801085e:	429a      	cmp	r2, r3
 8010860:	d006      	beq.n	8010870 <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	68ba      	ldr	r2, [r7, #8]
 8010866:	625a      	str	r2, [r3, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 8010868:	89fb      	ldrh	r3, [r7, #14]
 801086a:	f043 0301 	orr.w	r3, r3, #1
 801086e:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	3328      	adds	r3, #40	; 0x28
 8010874:	211c      	movs	r1, #28
 8010876:	4618      	mov	r0, r3
 8010878:	f009 fc6e 	bl	801a158 <Crc32>
 801087c:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010882:	68ba      	ldr	r2, [r7, #8]
 8010884:	429a      	cmp	r2, r3
 8010886:	d006      	beq.n	8010896 <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	68ba      	ldr	r2, [r7, #8]
 801088c:	645a      	str	r2, [r3, #68]	; 0x44
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 801088e:	89fb      	ldrh	r3, [r7, #14]
 8010890:	f043 0302 	orr.w	r3, r3, #2
 8010894:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	3348      	adds	r3, #72	; 0x48
 801089a:	f44f 7180 	mov.w	r1, #256	; 0x100
 801089e:	4618      	mov	r0, r3
 80108a0:	f009 fc5a 	bl	801a158 <Crc32>
 80108a4:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80108ac:	68ba      	ldr	r2, [r7, #8]
 80108ae:	429a      	cmp	r2, r3
 80108b0:	d007      	beq.n	80108c2 <LoRaMacHandleNvm+0x92>
    {
        nvmData->MacGroup2.Crc32 = crc;
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	68ba      	ldr	r2, [r7, #8]
 80108b6:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 80108ba:	89fb      	ldrh	r3, [r7, #14]
 80108bc:	f043 0304 	orr.w	r3, r3, #4
 80108c0:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 80108c8:	21d4      	movs	r1, #212	; 0xd4
 80108ca:	4618      	mov	r0, r3
 80108cc:	f009 fc44 	bl	801a158 <Crc32>
 80108d0:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80108d8:	68ba      	ldr	r2, [r7, #8]
 80108da:	429a      	cmp	r2, r3
 80108dc:	d007      	beq.n	80108ee <LoRaMacHandleNvm+0xbe>
    {
        nvmData->SecureElement.Crc32 = crc;
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	68ba      	ldr	r2, [r7, #8]
 80108e2:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 80108e6:	89fb      	ldrh	r3, [r7, #14]
 80108e8:	f043 0308 	orr.w	r3, r3, #8
 80108ec:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	f503 7309 	add.w	r3, r3, #548	; 0x224
 80108f4:	2110      	movs	r1, #16
 80108f6:	4618      	mov	r0, r3
 80108f8:	f009 fc2e 	bl	801a158 <Crc32>
 80108fc:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 8010904:	68ba      	ldr	r2, [r7, #8]
 8010906:	429a      	cmp	r2, r3
 8010908:	d007      	beq.n	801091a <LoRaMacHandleNvm+0xea>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	68ba      	ldr	r2, [r7, #8]
 801090e:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 8010912:	89fb      	ldrh	r3, [r7, #14]
 8010914:	f043 0310 	orr.w	r3, r3, #16
 8010918:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8010920:	f44f 715e 	mov.w	r1, #888	; 0x378
 8010924:	4618      	mov	r0, r3
 8010926:	f009 fc17 	bl	801a158 <Crc32>
 801092a:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	f8d3 35b0 	ldr.w	r3, [r3, #1456]	; 0x5b0
 8010932:	68ba      	ldr	r2, [r7, #8]
 8010934:	429a      	cmp	r2, r3
 8010936:	d007      	beq.n	8010948 <LoRaMacHandleNvm+0x118>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	68ba      	ldr	r2, [r7, #8]
 801093c:	f8c3 25b0 	str.w	r2, [r3, #1456]	; 0x5b0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 8010940:	89fb      	ldrh	r3, [r7, #14]
 8010942:	f043 0320 	orr.w	r3, r3, #32
 8010946:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	f203 53b4 	addw	r3, r3, #1460	; 0x5b4
 801094e:	2114      	movs	r1, #20
 8010950:	4618      	mov	r0, r3
 8010952:	f009 fc01 	bl	801a158 <Crc32>
 8010956:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	f8d3 35c8 	ldr.w	r3, [r3, #1480]	; 0x5c8
 801095e:	68ba      	ldr	r2, [r7, #8]
 8010960:	429a      	cmp	r2, r3
 8010962:	d007      	beq.n	8010974 <LoRaMacHandleNvm+0x144>
    {
        nvmData->ClassB.Crc32 = crc;
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	68ba      	ldr	r2, [r7, #8]
 8010968:	f8c3 25c8 	str.w	r2, [r3, #1480]	; 0x5c8
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 801096c:	89fb      	ldrh	r3, [r7, #14]
 801096e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010972:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 8010974:	89fb      	ldrh	r3, [r7, #14]
 8010976:	4618      	mov	r0, r3
 8010978:	f002 f878 	bl	8012a6c <CallNvmDataChangeCallback>
 801097c:	e000      	b.n	8010980 <LoRaMacHandleNvm+0x150>
        return;
 801097e:	bf00      	nop
}
 8010980:	3710      	adds	r7, #16
 8010982:	46bd      	mov	sp, r7
 8010984:	bd80      	pop	{r7, pc}
 8010986:	bf00      	nop
 8010988:	200006e0 	.word	0x200006e0

0801098c <LoRaMacHandleResponseTimeout>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool LoRaMacHandleResponseTimeout( TimerTime_t timeoutInMs, TimerTime_t startTimeInMs )
{
 801098c:	b580      	push	{r7, lr}
 801098e:	b084      	sub	sp, #16
 8010990:	af00      	add	r7, sp, #0
 8010992:	6078      	str	r0, [r7, #4]
 8010994:	6039      	str	r1, [r7, #0]
    if( startTimeInMs != 0 )
 8010996:	683b      	ldr	r3, [r7, #0]
 8010998:	2b00      	cmp	r3, #0
 801099a:	d00d      	beq.n	80109b8 <LoRaMacHandleResponseTimeout+0x2c>
    {
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
 801099c:	6838      	ldr	r0, [r7, #0]
 801099e:	f00d fe4d 	bl	801e63c <UTIL_TIMER_GetElapsedTime>
 80109a2:	60f8      	str	r0, [r7, #12]
        if( elapsedTime > timeoutInMs )
 80109a4:	68fa      	ldr	r2, [r7, #12]
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	429a      	cmp	r2, r3
 80109aa:	d905      	bls.n	80109b8 <LoRaMacHandleResponseTimeout+0x2c>
        {
            Nvm.MacGroup1.SrvAckRequested = false;
 80109ac:	4b05      	ldr	r3, [pc, #20]	; (80109c4 <LoRaMacHandleResponseTimeout+0x38>)
 80109ae:	2200      	movs	r2, #0
 80109b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
            return true;
 80109b4:	2301      	movs	r3, #1
 80109b6:	e000      	b.n	80109ba <LoRaMacHandleResponseTimeout+0x2e>
        }
    }
    return false;
 80109b8:	2300      	movs	r3, #0
}
 80109ba:	4618      	mov	r0, r3
 80109bc:	3710      	adds	r7, #16
 80109be:	46bd      	mov	sp, r7
 80109c0:	bd80      	pop	{r7, pc}
 80109c2:	bf00      	nop
 80109c4:	20000bfc 	.word	0x20000bfc

080109c8 <LoRaMacProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacProcess( void )
{
 80109c8:	b580      	push	{r7, lr}
 80109ca:	b082      	sub	sp, #8
 80109cc:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 80109ce:	2300      	movs	r3, #0
 80109d0:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 80109d2:	f7ff fd0b 	bl	80103ec <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 80109d6:	f003 fe80 	bl	80146da <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 80109da:	4b25      	ldr	r3, [pc, #148]	; (8010a70 <LoRaMacProcess+0xa8>)
 80109dc:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 80109e0:	f003 0310 	and.w	r3, r3, #16
 80109e4:	b2db      	uxtb	r3, r3
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d023      	beq.n	8010a32 <LoRaMacProcess+0x6a>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 80109ea:	2000      	movs	r0, #0
 80109ec:	f7ff fd7e 	bl	80104ec <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 80109f0:	f7ff fefe 	bl	80107f0 <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 80109f4:	f002 f858 	bl	8012aa8 <IsRequestPending>
 80109f8:	4603      	mov	r3, r0
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d006      	beq.n	8010a0c <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 80109fe:	f7ff feb1 	bl	8010764 <LoRaMacCheckForBeaconAcquisition>
 8010a02:	4603      	mov	r3, r0
 8010a04:	461a      	mov	r2, r3
 8010a06:	79fb      	ldrb	r3, [r7, #7]
 8010a08:	4313      	orrs	r3, r2
 8010a0a:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 8010a0c:	79fb      	ldrb	r3, [r7, #7]
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d103      	bne.n	8010a1a <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 8010a12:	f7ff fe71 	bl	80106f8 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 8010a16:	f7ff fe13 	bl	8010640 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 8010a1a:	f7ff fd77 	bl	801050c <LoRaMacHandleRequestEvents>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8010a1e:	2001      	movs	r0, #1
 8010a20:	f7ff fd64 	bl	80104ec <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8010a24:	4a12      	ldr	r2, [pc, #72]	; (8010a70 <LoRaMacProcess+0xa8>)
 8010a26:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8010a2a:	f043 0320 	orr.w	r3, r3, #32
 8010a2e:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
    LoRaMacHandleIndicationEvents( );
 8010a32:	f7ff fdcd 	bl	80105d0 <LoRaMacHandleIndicationEvents>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    LoRaMacHandleRejoinEvents( );
#endif /* LORAMAC_VERSION */

    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 8010a36:	4b0e      	ldr	r3, [pc, #56]	; (8010a70 <LoRaMacProcess+0xa8>)
 8010a38:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 8010a3c:	2b02      	cmp	r3, #2
 8010a3e:	d101      	bne.n	8010a44 <LoRaMacProcess+0x7c>
    {
        OpenContinuousRxCWindow( );
 8010a40:	f001 fc1a 	bl	8012278 <OpenContinuousRxCWindow>
    }
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 8010a44:	4b0a      	ldr	r3, [pc, #40]	; (8010a70 <LoRaMacProcess+0xa8>)
 8010a46:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8010a4a:	f003 0320 	and.w	r3, r3, #32
 8010a4e:	b2db      	uxtb	r3, r3
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d009      	beq.n	8010a68 <LoRaMacProcess+0xa0>
    {
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 8010a54:	4a06      	ldr	r2, [pc, #24]	; (8010a70 <LoRaMacProcess+0xa8>)
 8010a56:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8010a5a:	f36f 1345 	bfc	r3, #5, #1
 8010a5e:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
        LoRaMacHandleNvm( &Nvm );
 8010a62:	4804      	ldr	r0, [pc, #16]	; (8010a74 <LoRaMacProcess+0xac>)
 8010a64:	f7ff fee4 	bl	8010830 <LoRaMacHandleNvm>
    }
}
 8010a68:	bf00      	nop
 8010a6a:	3708      	adds	r7, #8
 8010a6c:	46bd      	mov	sp, r7
 8010a6e:	bd80      	pop	{r7, pc}
 8010a70:	200006e0 	.word	0x200006e0
 8010a74:	20000bfc 	.word	0x20000bfc

08010a78 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 8010a78:	b580      	push	{r7, lr}
 8010a7a:	b082      	sub	sp, #8
 8010a7c:	af00      	add	r7, sp, #0
 8010a7e:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 8010a80:	481e      	ldr	r0, [pc, #120]	; (8010afc <OnTxDelayedTimerEvent+0x84>)
 8010a82:	f00d fcaf 	bl	801e3e4 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8010a86:	4b1e      	ldr	r3, [pc, #120]	; (8010b00 <OnTxDelayedTimerEvent+0x88>)
 8010a88:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010a8c:	f023 0320 	bic.w	r3, r3, #32
 8010a90:	4a1b      	ldr	r2, [pc, #108]	; (8010b00 <OnTxDelayedTimerEvent+0x88>)
 8010a92:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 8010a96:	4b1b      	ldr	r3, [pc, #108]	; (8010b04 <OnTxDelayedTimerEvent+0x8c>)
 8010a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010a9c:	4a18      	ldr	r2, [pc, #96]	; (8010b00 <OnTxDelayedTimerEvent+0x88>)
 8010a9e:	f8d2 2498 	ldr.w	r2, [r2, #1176]	; 0x498
 8010aa2:	4611      	mov	r1, r2
 8010aa4:	4618      	mov	r0, r3
 8010aa6:	f7ff ff71 	bl	801098c <LoRaMacHandleResponseTimeout>
 8010aaa:	4603      	mov	r3, r0
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d11e      	bne.n	8010aee <OnTxDelayedTimerEvent+0x76>
        return;
    }
#endif /* LORAMAC_VERSION */

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 8010ab0:	2001      	movs	r0, #1
 8010ab2:	f001 f92b 	bl	8011d0c <ScheduleTx>
 8010ab6:	4603      	mov	r3, r0
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d01a      	beq.n	8010af2 <OnTxDelayedTimerEvent+0x7a>
 8010abc:	2b0b      	cmp	r3, #11
 8010abe:	d018      	beq.n	8010af2 <OnTxDelayedTimerEvent+0x7a>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010ac0:	4b10      	ldr	r3, [pc, #64]	; (8010b04 <OnTxDelayedTimerEvent+0x8c>)
 8010ac2:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010ac6:	b2da      	uxtb	r2, r3
 8010ac8:	4b0d      	ldr	r3, [pc, #52]	; (8010b00 <OnTxDelayedTimerEvent+0x88>)
 8010aca:	f883 2442 	strb.w	r2, [r3, #1090]	; 0x442
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 8010ace:	4b0c      	ldr	r3, [pc, #48]	; (8010b00 <OnTxDelayedTimerEvent+0x88>)
 8010ad0:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8010ad4:	4b0a      	ldr	r3, [pc, #40]	; (8010b00 <OnTxDelayedTimerEvent+0x88>)
 8010ad6:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8010ada:	4b09      	ldr	r3, [pc, #36]	; (8010b00 <OnTxDelayedTimerEvent+0x88>)
 8010adc:	2209      	movs	r2, #9
 8010ade:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 8010ae2:	2009      	movs	r0, #9
 8010ae4:	f004 fa34 	bl	8014f50 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 8010ae8:	f001 ff6e 	bl	80129c8 <StopRetransmission>
            break;
 8010aec:	e002      	b.n	8010af4 <OnTxDelayedTimerEvent+0x7c>
        return;
 8010aee:	bf00      	nop
 8010af0:	e000      	b.n	8010af4 <OnTxDelayedTimerEvent+0x7c>
            break;
 8010af2:	bf00      	nop
        }
    }
}
 8010af4:	3708      	adds	r7, #8
 8010af6:	46bd      	mov	sp, r7
 8010af8:	bd80      	pop	{r7, pc}
 8010afa:	bf00      	nop
 8010afc:	20000a48 	.word	0x20000a48
 8010b00:	200006e0 	.word	0x200006e0
 8010b04:	20000bfc 	.word	0x20000bfc

08010b08 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 8010b08:	b580      	push	{r7, lr}
 8010b0a:	b082      	sub	sp, #8
 8010b0c:	af00      	add	r7, sp, #0
 8010b0e:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 8010b10:	4b17      	ldr	r3, [pc, #92]	; (8010b70 <OnRxWindow1TimerEvent+0x68>)
 8010b12:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 8010b16:	4b16      	ldr	r3, [pc, #88]	; (8010b70 <OnRxWindow1TimerEvent+0x68>)
 8010b18:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 8010b1c:	4b15      	ldr	r3, [pc, #84]	; (8010b74 <OnRxWindow1TimerEvent+0x6c>)
 8010b1e:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8010b22:	b25a      	sxtb	r2, r3
 8010b24:	4b12      	ldr	r3, [pc, #72]	; (8010b70 <OnRxWindow1TimerEvent+0x68>)
 8010b26:	f883 23bb 	strb.w	r2, [r3, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010b2a:	4b12      	ldr	r3, [pc, #72]	; (8010b74 <OnRxWindow1TimerEvent+0x6c>)
 8010b2c:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 8010b30:	4b0f      	ldr	r3, [pc, #60]	; (8010b70 <OnRxWindow1TimerEvent+0x68>)
 8010b32:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8010b36:	4b0f      	ldr	r3, [pc, #60]	; (8010b74 <OnRxWindow1TimerEvent+0x6c>)
 8010b38:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8010b3c:	4b0c      	ldr	r3, [pc, #48]	; (8010b70 <OnRxWindow1TimerEvent+0x68>)
 8010b3e:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 8010b42:	4b0b      	ldr	r3, [pc, #44]	; (8010b70 <OnRxWindow1TimerEvent+0x68>)
 8010b44:	2200      	movs	r2, #0
 8010b46:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 8010b4a:	4b09      	ldr	r3, [pc, #36]	; (8010b70 <OnRxWindow1TimerEvent+0x68>)
 8010b4c:	2200      	movs	r2, #0
 8010b4e:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8010b52:	4b08      	ldr	r3, [pc, #32]	; (8010b74 <OnRxWindow1TimerEvent+0x6c>)
 8010b54:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 8010b58:	4b05      	ldr	r3, [pc, #20]	; (8010b70 <OnRxWindow1TimerEvent+0x68>)
 8010b5a:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 8010b5e:	4906      	ldr	r1, [pc, #24]	; (8010b78 <OnRxWindow1TimerEvent+0x70>)
 8010b60:	4806      	ldr	r0, [pc, #24]	; (8010b7c <OnRxWindow1TimerEvent+0x74>)
 8010b62:	f001 fb55 	bl	8012210 <RxWindowSetup>
}
 8010b66:	bf00      	nop
 8010b68:	3708      	adds	r7, #8
 8010b6a:	46bd      	mov	sp, r7
 8010b6c:	bd80      	pop	{r7, pc}
 8010b6e:	bf00      	nop
 8010b70:	200006e0 	.word	0x200006e0
 8010b74:	20000bfc 	.word	0x20000bfc
 8010b78:	20000a98 	.word	0x20000a98
 8010b7c:	20000a60 	.word	0x20000a60

08010b80 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 8010b80:	b580      	push	{r7, lr}
 8010b82:	b082      	sub	sp, #8
 8010b84:	af00      	add	r7, sp, #0
 8010b86:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8010b88:	4b19      	ldr	r3, [pc, #100]	; (8010bf0 <OnRxWindow2TimerEvent+0x70>)
 8010b8a:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d029      	beq.n	8010be6 <OnRxWindow2TimerEvent+0x66>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8010b92:	4b17      	ldr	r3, [pc, #92]	; (8010bf0 <OnRxWindow2TimerEvent+0x70>)
 8010b94:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 8010b98:	4b15      	ldr	r3, [pc, #84]	; (8010bf0 <OnRxWindow2TimerEvent+0x70>)
 8010b9a:	f883 23d0 	strb.w	r2, [r3, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8010b9e:	4b15      	ldr	r3, [pc, #84]	; (8010bf4 <OnRxWindow2TimerEvent+0x74>)
 8010ba0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ba2:	4a13      	ldr	r2, [pc, #76]	; (8010bf0 <OnRxWindow2TimerEvent+0x70>)
 8010ba4:	f8c2 33d4 	str.w	r3, [r2, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010ba8:	4b12      	ldr	r3, [pc, #72]	; (8010bf4 <OnRxWindow2TimerEvent+0x74>)
 8010baa:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 8010bae:	4b10      	ldr	r3, [pc, #64]	; (8010bf0 <OnRxWindow2TimerEvent+0x70>)
 8010bb0:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8010bb4:	4b0f      	ldr	r3, [pc, #60]	; (8010bf4 <OnRxWindow2TimerEvent+0x74>)
 8010bb6:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8010bba:	4b0d      	ldr	r3, [pc, #52]	; (8010bf0 <OnRxWindow2TimerEvent+0x70>)
 8010bbc:	f883 23e1 	strb.w	r2, [r3, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 8010bc0:	4b0b      	ldr	r3, [pc, #44]	; (8010bf0 <OnRxWindow2TimerEvent+0x70>)
 8010bc2:	2200      	movs	r2, #0
 8010bc4:	f883 23e2 	strb.w	r2, [r3, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8010bc8:	4b09      	ldr	r3, [pc, #36]	; (8010bf0 <OnRxWindow2TimerEvent+0x70>)
 8010bca:	2201      	movs	r2, #1
 8010bcc:	f883 23e3 	strb.w	r2, [r3, #995]	; 0x3e3
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8010bd0:	4b08      	ldr	r3, [pc, #32]	; (8010bf4 <OnRxWindow2TimerEvent+0x74>)
 8010bd2:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 8010bd6:	4b06      	ldr	r3, [pc, #24]	; (8010bf0 <OnRxWindow2TimerEvent+0x70>)
 8010bd8:	f883 23e4 	strb.w	r2, [r3, #996]	; 0x3e4
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 8010bdc:	4906      	ldr	r1, [pc, #24]	; (8010bf8 <OnRxWindow2TimerEvent+0x78>)
 8010bde:	4807      	ldr	r0, [pc, #28]	; (8010bfc <OnRxWindow2TimerEvent+0x7c>)
 8010be0:	f001 fb16 	bl	8012210 <RxWindowSetup>
 8010be4:	e000      	b.n	8010be8 <OnRxWindow2TimerEvent+0x68>
        return;
 8010be6:	bf00      	nop
}
 8010be8:	3708      	adds	r7, #8
 8010bea:	46bd      	mov	sp, r7
 8010bec:	bd80      	pop	{r7, pc}
 8010bee:	bf00      	nop
 8010bf0:	200006e0 	.word	0x200006e0
 8010bf4:	20000bfc 	.word	0x20000bfc
 8010bf8:	20000ab0 	.word	0x20000ab0
 8010bfc:	20000a78 	.word	0x20000a78

08010c00 <OnRetransmitTimeoutTimerEvent>:

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static void OnRetransmitTimeoutTimerEvent( void* context )
{
 8010c00:	b580      	push	{r7, lr}
 8010c02:	b082      	sub	sp, #8
 8010c04:	af00      	add	r7, sp, #0
 8010c06:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 8010c08:	4808      	ldr	r0, [pc, #32]	; (8010c2c <OnRetransmitTimeoutTimerEvent+0x2c>)
 8010c0a:	f00d fbeb 	bl	801e3e4 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 8010c0e:	4b08      	ldr	r3, [pc, #32]	; (8010c30 <OnRetransmitTimeoutTimerEvent+0x30>)
 8010c10:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	d003      	beq.n	8010c20 <OnRetransmitTimeoutTimerEvent+0x20>
    {
        MacCtx.RetransmitTimeoutRetry = true;
 8010c18:	4b05      	ldr	r3, [pc, #20]	; (8010c30 <OnRetransmitTimeoutTimerEvent+0x30>)
 8010c1a:	2201      	movs	r2, #1
 8010c1c:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
    }
    OnMacProcessNotify( );
 8010c20:	f001 ff0e 	bl	8012a40 <OnMacProcessNotify>
}
 8010c24:	bf00      	nop
 8010c26:	3708      	adds	r7, #8
 8010c28:	46bd      	mov	sp, r7
 8010c2a:	bd80      	pop	{r7, pc}
 8010c2c:	20000ae0 	.word	0x20000ae0
 8010c30:	200006e0 	.word	0x200006e0

08010c34 <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 8010c34:	b580      	push	{r7, lr}
 8010c36:	b084      	sub	sp, #16
 8010c38:	af00      	add	r7, sp, #0
 8010c3a:	60ba      	str	r2, [r7, #8]
 8010c3c:	607b      	str	r3, [r7, #4]
 8010c3e:	4603      	mov	r3, r0
 8010c40:	73fb      	strb	r3, [r7, #15]
 8010c42:	460b      	mov	r3, r1
 8010c44:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 8010c46:	68bb      	ldr	r3, [r7, #8]
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	d005      	beq.n	8010c58 <GetFCntDown+0x24>
 8010c4c:	69bb      	ldr	r3, [r7, #24]
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d002      	beq.n	8010c58 <GetFCntDown+0x24>
 8010c52:	69fb      	ldr	r3, [r7, #28]
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d101      	bne.n	8010c5c <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8010c58:	2309      	movs	r3, #9
 8010c5a:	e028      	b.n	8010cae <GetFCntDown+0x7a>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 8010c5c:	7bfb      	ldrb	r3, [r7, #15]
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	d016      	beq.n	8010c90 <GetFCntDown+0x5c>
 8010c62:	2b01      	cmp	r3, #1
 8010c64:	d118      	bne.n	8010c98 <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 8010c66:	79bb      	ldrb	r3, [r7, #6]
 8010c68:	2b01      	cmp	r3, #1
 8010c6a:	d10d      	bne.n	8010c88 <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 8010c6c:	7bbb      	ldrb	r3, [r7, #14]
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d002      	beq.n	8010c78 <GetFCntDown+0x44>
 8010c72:	7bbb      	ldrb	r3, [r7, #14]
 8010c74:	2b03      	cmp	r3, #3
 8010c76:	d103      	bne.n	8010c80 <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 8010c78:	69bb      	ldr	r3, [r7, #24]
 8010c7a:	2202      	movs	r2, #2
 8010c7c:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 8010c7e:	e00d      	b.n	8010c9c <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 8010c80:	69bb      	ldr	r3, [r7, #24]
 8010c82:	2201      	movs	r2, #1
 8010c84:	701a      	strb	r2, [r3, #0]
            break;
 8010c86:	e009      	b.n	8010c9c <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 8010c88:	69bb      	ldr	r3, [r7, #24]
 8010c8a:	2203      	movs	r2, #3
 8010c8c:	701a      	strb	r2, [r3, #0]
            break;
 8010c8e:	e005      	b.n	8010c9c <GetFCntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 8010c90:	69bb      	ldr	r3, [r7, #24]
 8010c92:	2204      	movs	r2, #4
 8010c94:	701a      	strb	r2, [r3, #0]
            break;
 8010c96:	e001      	b.n	8010c9c <GetFCntDown+0x68>
        case MULTICAST_3_ADDR:
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8010c98:	2305      	movs	r3, #5
 8010c9a:	e008      	b.n	8010cae <GetFCntDown+0x7a>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
 8010c9c:	69bb      	ldr	r3, [r7, #24]
 8010c9e:	7818      	ldrb	r0, [r3, #0]
 8010ca0:	68bb      	ldr	r3, [r7, #8]
 8010ca2:	89db      	ldrh	r3, [r3, #14]
 8010ca4:	69fa      	ldr	r2, [r7, #28]
 8010ca6:	4619      	mov	r1, r3
 8010ca8:	f004 fd90 	bl	80157cc <LoRaMacCryptoGetFCntDown>
 8010cac:	4603      	mov	r3, r0
}
 8010cae:	4618      	mov	r0, r3
 8010cb0:	3710      	adds	r7, #16
 8010cb2:	46bd      	mov	sp, r7
 8010cb4:	bd80      	pop	{r7, pc}
	...

08010cb8 <SwitchClass>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 8010cb8:	b5b0      	push	{r4, r5, r7, lr}
 8010cba:	b084      	sub	sp, #16
 8010cbc:	af00      	add	r7, sp, #0
 8010cbe:	4603      	mov	r3, r0
 8010cc0:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010cc2:	2303      	movs	r3, #3
 8010cc4:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 8010cc6:	4b6e      	ldr	r3, [pc, #440]	; (8010e80 <SwitchClass+0x1c8>)
 8010cc8:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8010ccc:	2b02      	cmp	r3, #2
 8010cce:	f000 80bb 	beq.w	8010e48 <SwitchClass+0x190>
 8010cd2:	2b02      	cmp	r3, #2
 8010cd4:	f300 80ce 	bgt.w	8010e74 <SwitchClass+0x1bc>
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d003      	beq.n	8010ce4 <SwitchClass+0x2c>
 8010cdc:	2b01      	cmp	r3, #1
 8010cde:	f000 80a5 	beq.w	8010e2c <SwitchClass+0x174>
 8010ce2:	e0c7      	b.n	8010e74 <SwitchClass+0x1bc>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 8010ce4:	79fb      	ldrb	r3, [r7, #7]
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d109      	bne.n	8010cfe <SwitchClass+0x46>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8010cea:	4b65      	ldr	r3, [pc, #404]	; (8010e80 <SwitchClass+0x1c8>)
 8010cec:	4a64      	ldr	r2, [pc, #400]	; (8010e80 <SwitchClass+0x1c8>)
 8010cee:	3374      	adds	r3, #116	; 0x74
 8010cf0:	326c      	adds	r2, #108	; 0x6c
 8010cf2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010cf6:	e883 0003 	stmia.w	r3, {r0, r1}

                status = LORAMAC_STATUS_OK;
 8010cfa:	2300      	movs	r3, #0
 8010cfc:	73fb      	strb	r3, [r7, #15]
            }
            if( deviceClass == CLASS_B )
 8010cfe:	79fb      	ldrb	r3, [r7, #7]
 8010d00:	2b01      	cmp	r3, #1
 8010d02:	d10c      	bne.n	8010d1e <SwitchClass+0x66>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 8010d04:	79fb      	ldrb	r3, [r7, #7]
 8010d06:	4618      	mov	r0, r3
 8010d08:	f003 fc7e 	bl	8014608 <LoRaMacClassBSwitchClass>
 8010d0c:	4603      	mov	r3, r0
 8010d0e:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 8010d10:	7bfb      	ldrb	r3, [r7, #15]
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d103      	bne.n	8010d1e <SwitchClass+0x66>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 8010d16:	4a5a      	ldr	r2, [pc, #360]	; (8010e80 <SwitchClass+0x1c8>)
 8010d18:	79fb      	ldrb	r3, [r7, #7]
 8010d1a:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118
                }
            }

            if( deviceClass == CLASS_C )
 8010d1e:	79fb      	ldrb	r3, [r7, #7]
 8010d20:	2b02      	cmp	r3, #2
 8010d22:	f040 80a2 	bne.w	8010e6a <SwitchClass+0x1b2>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8010d26:	4a56      	ldr	r2, [pc, #344]	; (8010e80 <SwitchClass+0x1c8>)
 8010d28:	79fb      	ldrb	r3, [r7, #7]
 8010d2a:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8010d2e:	4a55      	ldr	r2, [pc, #340]	; (8010e84 <SwitchClass+0x1cc>)
 8010d30:	4b54      	ldr	r3, [pc, #336]	; (8010e84 <SwitchClass+0x1cc>)
 8010d32:	f502 747a 	add.w	r4, r2, #1000	; 0x3e8
 8010d36:	f503 7574 	add.w	r5, r3, #976	; 0x3d0
 8010d3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010d3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010d3e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010d42:	e884 0003 	stmia.w	r4, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8010d46:	4b4f      	ldr	r3, [pc, #316]	; (8010e84 <SwitchClass+0x1cc>)
 8010d48:	2202      	movs	r2, #2
 8010d4a:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8010d4e:	2300      	movs	r3, #0
 8010d50:	73bb      	strb	r3, [r7, #14]
 8010d52:	e05b      	b.n	8010e0c <SwitchClass+0x154>
                {
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 8010d54:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8010d58:	4949      	ldr	r1, [pc, #292]	; (8010e80 <SwitchClass+0x1c8>)
 8010d5a:	4613      	mov	r3, r2
 8010d5c:	005b      	lsls	r3, r3, #1
 8010d5e:	4413      	add	r3, r2
 8010d60:	011b      	lsls	r3, r3, #4
 8010d62:	440b      	add	r3, r1
 8010d64:	33e9      	adds	r3, #233	; 0xe9
 8010d66:	781b      	ldrb	r3, [r3, #0]
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d049      	beq.n	8010e00 <SwitchClass+0x148>
                        ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Class == CLASS_C ) )
 8010d6c:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8010d70:	4943      	ldr	r1, [pc, #268]	; (8010e80 <SwitchClass+0x1c8>)
 8010d72:	4613      	mov	r3, r2
 8010d74:	005b      	lsls	r3, r3, #1
 8010d76:	4413      	add	r3, r2
 8010d78:	011b      	lsls	r3, r3, #4
 8010d7a:	440b      	add	r3, r1
 8010d7c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8010d80:	781b      	ldrb	r3, [r3, #0]
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 8010d82:	2b02      	cmp	r3, #2
 8010d84:	d13c      	bne.n	8010e00 <SwitchClass+0x148>
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Frequency;
 8010d86:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8010d8a:	493d      	ldr	r1, [pc, #244]	; (8010e80 <SwitchClass+0x1c8>)
 8010d8c:	4613      	mov	r3, r2
 8010d8e:	005b      	lsls	r3, r3, #1
 8010d90:	4413      	add	r3, r2
 8010d92:	011b      	lsls	r3, r3, #4
 8010d94:	440b      	add	r3, r1
 8010d96:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	4a38      	ldr	r2, [pc, #224]	; (8010e80 <SwitchClass+0x1c8>)
 8010d9e:	6753      	str	r3, [r2, #116]	; 0x74
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Datarate;
 8010da0:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8010da4:	4936      	ldr	r1, [pc, #216]	; (8010e80 <SwitchClass+0x1c8>)
 8010da6:	4613      	mov	r3, r2
 8010da8:	005b      	lsls	r3, r3, #1
 8010daa:	4413      	add	r3, r2
 8010dac:	011b      	lsls	r3, r3, #4
 8010dae:	440b      	add	r3, r1
 8010db0:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8010db4:	f993 3000 	ldrsb.w	r3, [r3]
 8010db8:	b2da      	uxtb	r2, r3
 8010dba:	4b31      	ldr	r3, [pc, #196]	; (8010e80 <SwitchClass+0x1c8>)
 8010dbc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8010dc0:	4b30      	ldr	r3, [pc, #192]	; (8010e84 <SwitchClass+0x1cc>)
 8010dc2:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 8010dc6:	4b2f      	ldr	r3, [pc, #188]	; (8010e84 <SwitchClass+0x1cc>)
 8010dc8:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8010dcc:	4b2c      	ldr	r3, [pc, #176]	; (8010e80 <SwitchClass+0x1c8>)
 8010dce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010dd0:	4a2c      	ldr	r2, [pc, #176]	; (8010e84 <SwitchClass+0x1cc>)
 8010dd2:	f8c2 33ec 	str.w	r3, [r2, #1004]	; 0x3ec
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010dd6:	4b2a      	ldr	r3, [pc, #168]	; (8010e80 <SwitchClass+0x1c8>)
 8010dd8:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 8010ddc:	4b29      	ldr	r3, [pc, #164]	; (8010e84 <SwitchClass+0x1cc>)
 8010dde:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8010de2:	4b27      	ldr	r3, [pc, #156]	; (8010e80 <SwitchClass+0x1c8>)
 8010de4:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8010de8:	4b26      	ldr	r3, [pc, #152]	; (8010e84 <SwitchClass+0x1cc>)
 8010dea:	f883 23f9 	strb.w	r2, [r3, #1017]	; 0x3f9
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8010dee:	4b25      	ldr	r3, [pc, #148]	; (8010e84 <SwitchClass+0x1cc>)
 8010df0:	2203      	movs	r2, #3
 8010df2:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 8010df6:	4b23      	ldr	r3, [pc, #140]	; (8010e84 <SwitchClass+0x1cc>)
 8010df8:	2201      	movs	r2, #1
 8010dfa:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
                        break;
 8010dfe:	e009      	b.n	8010e14 <SwitchClass+0x15c>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8010e00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010e04:	b2db      	uxtb	r3, r3
 8010e06:	3301      	adds	r3, #1
 8010e08:	b2db      	uxtb	r3, r3
 8010e0a:	73bb      	strb	r3, [r7, #14]
 8010e0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	dd9f      	ble.n	8010d54 <SwitchClass+0x9c>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 8010e14:	4b1b      	ldr	r3, [pc, #108]	; (8010e84 <SwitchClass+0x1cc>)
 8010e16:	2200      	movs	r2, #0
 8010e18:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 8010e1c:	4b1a      	ldr	r3, [pc, #104]	; (8010e88 <SwitchClass+0x1d0>)
 8010e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e20:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 8010e22:	f001 fa29 	bl	8012278 <OpenContinuousRxCWindow>
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */

                status = LORAMAC_STATUS_OK;
 8010e26:	2300      	movs	r3, #0
 8010e28:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8010e2a:	e01e      	b.n	8010e6a <SwitchClass+0x1b2>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 8010e2c:	79fb      	ldrb	r3, [r7, #7]
 8010e2e:	4618      	mov	r0, r3
 8010e30:	f003 fbea 	bl	8014608 <LoRaMacClassBSwitchClass>
 8010e34:	4603      	mov	r3, r0
 8010e36:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 8010e38:	7bfb      	ldrb	r3, [r7, #15]
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d117      	bne.n	8010e6e <SwitchClass+0x1b6>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8010e3e:	4a10      	ldr	r2, [pc, #64]	; (8010e80 <SwitchClass+0x1c8>)
 8010e40:	79fb      	ldrb	r3, [r7, #7]
 8010e42:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118
            }
            break;
 8010e46:	e012      	b.n	8010e6e <SwitchClass+0x1b6>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 8010e48:	79fb      	ldrb	r3, [r7, #7]
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d111      	bne.n	8010e72 <SwitchClass+0x1ba>
            {
                // Reset RxSlot to NONE
                MacCtx.RxSlot = RX_SLOT_NONE;
 8010e4e:	4b0d      	ldr	r3, [pc, #52]	; (8010e84 <SwitchClass+0x1cc>)
 8010e50:	2206      	movs	r2, #6
 8010e52:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490

                Nvm.MacGroup2.DeviceClass = deviceClass;
 8010e56:	4a0a      	ldr	r2, [pc, #40]	; (8010e80 <SwitchClass+0x1c8>)
 8010e58:	79fb      	ldrb	r3, [r7, #7]
 8010e5a:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 8010e5e:	4b0a      	ldr	r3, [pc, #40]	; (8010e88 <SwitchClass+0x1d0>)
 8010e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e62:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 8010e64:	2300      	movs	r3, #0
 8010e66:	73fb      	strb	r3, [r7, #15]
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */
            }
            break;
 8010e68:	e003      	b.n	8010e72 <SwitchClass+0x1ba>
            break;
 8010e6a:	bf00      	nop
 8010e6c:	e002      	b.n	8010e74 <SwitchClass+0x1bc>
            break;
 8010e6e:	bf00      	nop
 8010e70:	e000      	b.n	8010e74 <SwitchClass+0x1bc>
            break;
 8010e72:	bf00      	nop
        }
    }

    return status;
 8010e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e76:	4618      	mov	r0, r3
 8010e78:	3710      	adds	r7, #16
 8010e7a:	46bd      	mov	sp, r7
 8010e7c:	bdb0      	pop	{r4, r5, r7, pc}
 8010e7e:	bf00      	nop
 8010e80:	20000bfc 	.word	0x20000bfc
 8010e84:	200006e0 	.word	0x200006e0
 8010e88:	0801fccc 	.word	0x0801fccc

08010e8c <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 8010e8c:	b580      	push	{r7, lr}
 8010e8e:	b086      	sub	sp, #24
 8010e90:	af00      	add	r7, sp, #0
 8010e92:	4603      	mov	r3, r0
 8010e94:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8010e96:	4b10      	ldr	r3, [pc, #64]	; (8010ed8 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8010e98:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8010e9c:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 8010e9e:	79fb      	ldrb	r3, [r7, #7]
 8010ea0:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 8010ea2:	230d      	movs	r3, #13
 8010ea4:	743b      	strb	r3, [r7, #16]

    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8010ea6:	4b0c      	ldr	r3, [pc, #48]	; (8010ed8 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8010ea8:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d001      	beq.n	8010eb4 <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8010eb0:	230e      	movs	r3, #14
 8010eb2:	743b      	strb	r3, [r7, #16]
    }
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010eb4:	4b08      	ldr	r3, [pc, #32]	; (8010ed8 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8010eb6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8010eba:	f107 0210 	add.w	r2, r7, #16
 8010ebe:	4611      	mov	r1, r2
 8010ec0:	4618      	mov	r0, r3
 8010ec2:	f005 faf3 	bl	80164ac <RegionGetPhyParam>
 8010ec6:	4603      	mov	r3, r0
 8010ec8:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 8010eca:	68fb      	ldr	r3, [r7, #12]
 8010ecc:	b2db      	uxtb	r3, r3
}
 8010ece:	4618      	mov	r0, r3
 8010ed0:	3718      	adds	r7, #24
 8010ed2:	46bd      	mov	sp, r7
 8010ed4:	bd80      	pop	{r7, pc}
 8010ed6:	bf00      	nop
 8010ed8:	20000bfc 	.word	0x20000bfc

08010edc <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 8010edc:	b580      	push	{r7, lr}
 8010ede:	b084      	sub	sp, #16
 8010ee0:	af00      	add	r7, sp, #0
 8010ee2:	4603      	mov	r3, r0
 8010ee4:	71fb      	strb	r3, [r7, #7]
 8010ee6:	460b      	mov	r3, r1
 8010ee8:	71bb      	strb	r3, [r7, #6]
 8010eea:	4613      	mov	r3, r2
 8010eec:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 8010eee:	2300      	movs	r3, #0
 8010ef0:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 8010ef2:	2300      	movs	r3, #0
 8010ef4:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8010ef6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8010efa:	4618      	mov	r0, r3
 8010efc:	f7ff ffc6 	bl	8010e8c <GetMaxAppPayloadWithoutFOptsLength>
 8010f00:	4603      	mov	r3, r0
 8010f02:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 8010f04:	79fb      	ldrb	r3, [r7, #7]
 8010f06:	b29a      	uxth	r2, r3
 8010f08:	797b      	ldrb	r3, [r7, #5]
 8010f0a:	b29b      	uxth	r3, r3
 8010f0c:	4413      	add	r3, r2
 8010f0e:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8010f10:	89ba      	ldrh	r2, [r7, #12]
 8010f12:	89fb      	ldrh	r3, [r7, #14]
 8010f14:	429a      	cmp	r2, r3
 8010f16:	d804      	bhi.n	8010f22 <ValidatePayloadLength+0x46>
 8010f18:	89bb      	ldrh	r3, [r7, #12]
 8010f1a:	2bff      	cmp	r3, #255	; 0xff
 8010f1c:	d801      	bhi.n	8010f22 <ValidatePayloadLength+0x46>
    {
        return true;
 8010f1e:	2301      	movs	r3, #1
 8010f20:	e000      	b.n	8010f24 <ValidatePayloadLength+0x48>
    }
    return false;
 8010f22:	2300      	movs	r3, #0
}
 8010f24:	4618      	mov	r0, r3
 8010f26:	3710      	adds	r7, #16
 8010f28:	46bd      	mov	sp, r7
 8010f2a:	bd80      	pop	{r7, pc}

08010f2c <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 8010f2c:	b590      	push	{r4, r7, lr}
 8010f2e:	b0a5      	sub	sp, #148	; 0x94
 8010f30:	af02      	add	r7, sp, #8
 8010f32:	6078      	str	r0, [r7, #4]
 8010f34:	4608      	mov	r0, r1
 8010f36:	4611      	mov	r1, r2
 8010f38:	461a      	mov	r2, r3
 8010f3a:	4603      	mov	r3, r0
 8010f3c:	70fb      	strb	r3, [r7, #3]
 8010f3e:	460b      	mov	r3, r1
 8010f40:	70bb      	strb	r3, [r7, #2]
 8010f42:	4613      	mov	r3, r2
 8010f44:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 8010f46:	2300      	movs	r3, #0
 8010f48:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    bool adrBlockFound = false;
 8010f4c:	2300      	movs	r3, #0
 8010f4e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8010f52:	2300      	movs	r3, #0
 8010f54:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    MacCommand_t* macCmd;
#endif /* LORAMAC_VERSION */

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
 8010f58:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	f000 84ab 	beq.w	80118b8 <ProcessMacCommands+0x98c>
 8010f62:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8010f66:	2b01      	cmp	r3, #1
 8010f68:	f040 84ac 	bne.w	80118c4 <ProcessMacCommands+0x998>
        // Do only parse MAC commands for Class A RX windows
        return;
    }
#endif /* LORAMAC_VERSION */

    while( macIndex < commandsSize )
 8010f6c:	f000 bca4 	b.w	80118b8 <ProcessMacCommands+0x98c>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 8010f70:	78fb      	ldrb	r3, [r7, #3]
 8010f72:	687a      	ldr	r2, [r7, #4]
 8010f74:	4413      	add	r3, r2
 8010f76:	781b      	ldrb	r3, [r3, #0]
 8010f78:	4618      	mov	r0, r3
 8010f7a:	f003 fe45 	bl	8014c08 <LoRaMacCommandsGetCmdSize>
 8010f7e:	4603      	mov	r3, r0
 8010f80:	461a      	mov	r2, r3
 8010f82:	78fb      	ldrb	r3, [r7, #3]
 8010f84:	441a      	add	r2, r3
 8010f86:	78bb      	ldrb	r3, [r7, #2]
 8010f88:	429a      	cmp	r2, r3
 8010f8a:	f300 849d 	bgt.w	80118c8 <ProcessMacCommands+0x99c>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 8010f8e:	78fb      	ldrb	r3, [r7, #3]
 8010f90:	1c5a      	adds	r2, r3, #1
 8010f92:	70fa      	strb	r2, [r7, #3]
 8010f94:	461a      	mov	r2, r3
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	4413      	add	r3, r2
 8010f9a:	781b      	ldrb	r3, [r3, #0]
 8010f9c:	3b02      	subs	r3, #2
 8010f9e:	2b11      	cmp	r3, #17
 8010fa0:	f200 8494 	bhi.w	80118cc <ProcessMacCommands+0x9a0>
 8010fa4:	a201      	add	r2, pc, #4	; (adr r2, 8010fac <ProcessMacCommands+0x80>)
 8010fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010faa:	bf00      	nop
 8010fac:	08010ff5 	.word	0x08010ff5
 8010fb0:	08011037 	.word	0x08011037
 8010fb4:	080111b3 	.word	0x080111b3
 8010fb8:	080111f1 	.word	0x080111f1
 8010fbc:	080112e9 	.word	0x080112e9
 8010fc0:	08011339 	.word	0x08011339
 8010fc4:	080113f5 	.word	0x080113f5
 8010fc8:	0801144b 	.word	0x0801144b
 8010fcc:	08011531 	.word	0x08011531
 8010fd0:	080118cd 	.word	0x080118cd
 8010fd4:	080118cd 	.word	0x080118cd
 8010fd8:	080115d9 	.word	0x080115d9
 8010fdc:	080118cd 	.word	0x080118cd
 8010fe0:	080118cd 	.word	0x080118cd
 8010fe4:	080116f9 	.word	0x080116f9
 8010fe8:	0801172d 	.word	0x0801172d
 8010fec:	080117bd 	.word	0x080117bd
 8010ff0:	08011833 	.word	0x08011833
                break;
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 8010ff4:	2005      	movs	r0, #5
 8010ff6:	f003 ffdf 	bl	8014fb8 <LoRaMacConfirmQueueIsCmdActive>
 8010ffa:	4603      	mov	r3, r0
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	f000 845b 	beq.w	80118b8 <ProcessMacCommands+0x98c>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 8011002:	2105      	movs	r1, #5
 8011004:	2000      	movs	r0, #0
 8011006:	f003 ff4b 	bl	8014ea0 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 801100a:	78fb      	ldrb	r3, [r7, #3]
 801100c:	1c5a      	adds	r2, r3, #1
 801100e:	70fa      	strb	r2, [r7, #3]
 8011010:	461a      	mov	r2, r3
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	4413      	add	r3, r2
 8011016:	781a      	ldrb	r2, [r3, #0]
 8011018:	4bb0      	ldr	r3, [pc, #704]	; (80112dc <ProcessMacCommands+0x3b0>)
 801101a:	f883 245c 	strb.w	r2, [r3, #1116]	; 0x45c
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 801101e:	78fb      	ldrb	r3, [r7, #3]
 8011020:	1c5a      	adds	r2, r3, #1
 8011022:	70fa      	strb	r2, [r7, #3]
 8011024:	461a      	mov	r2, r3
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	4413      	add	r3, r2
 801102a:	781a      	ldrb	r2, [r3, #0]
 801102c:	4bab      	ldr	r3, [pc, #684]	; (80112dc <ProcessMacCommands+0x3b0>)
 801102e:	f883 245d 	strb.w	r2, [r3, #1117]	; 0x45d
                }
                break;
 8011032:	f000 bc41 	b.w	80118b8 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 8011036:	2300      	movs	r3, #0
 8011038:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 801103c:	2300      	movs	r3, #0
 801103e:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
                uint8_t linkAdrNbRep = 0;
 8011042:	2300      	movs	r3, #0
 8011044:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 8011048:	2300      	movs	r3, #0
 801104a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
                }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                if( adrBlockFound == false )
 801104e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8011052:	f083 0301 	eor.w	r3, r3, #1
 8011056:	b2db      	uxtb	r3, r3
 8011058:	2b00      	cmp	r3, #0
 801105a:	f000 80a5 	beq.w	80111a8 <ProcessMacCommands+0x27c>
                {
                    adrBlockFound = true;
 801105e:	2301      	movs	r3, #1
 8011060:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

                    do
                    {
                        // Fill parameter structure
                        linkAdrReq.Payload = &payload[macIndex - 1];
 8011064:	78fb      	ldrb	r3, [r7, #3]
 8011066:	3b01      	subs	r3, #1
 8011068:	687a      	ldr	r2, [r7, #4]
 801106a:	4413      	add	r3, r2
 801106c:	65fb      	str	r3, [r7, #92]	; 0x5c
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 801106e:	4b9c      	ldr	r3, [pc, #624]	; (80112e0 <ProcessMacCommands+0x3b4>)
 8011070:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8011074:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011078:	4b99      	ldr	r3, [pc, #612]	; (80112e0 <ProcessMacCommands+0x3b4>)
 801107a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 801107e:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8011082:	4b97      	ldr	r3, [pc, #604]	; (80112e0 <ProcessMacCommands+0x3b4>)
 8011084:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8011088:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 801108c:	4b94      	ldr	r3, [pc, #592]	; (80112e0 <ProcessMacCommands+0x3b4>)
 801108e:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8011092:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8011096:	4b92      	ldr	r3, [pc, #584]	; (80112e0 <ProcessMacCommands+0x3b4>)
 8011098:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 801109c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
 80110a0:	4b8f      	ldr	r3, [pc, #572]	; (80112e0 <ProcessMacCommands+0x3b4>)
 80110a2:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 80110a6:	65bb      	str	r3, [r7, #88]	; 0x58

                        // There is a fundamental difference in reporting the status
                        // of the LinkAdrRequests when ADR is on or off. When ADR is on, every
                        // LinkAdrAns contains the same value. This does not hold when ADR is off,
                        // where every LinkAdrAns requires an individual status.
                        if( Nvm.MacGroup2.AdrCtrlOn == true )
 80110a8:	4b8d      	ldr	r3, [pc, #564]	; (80112e0 <ProcessMacCommands+0x3b4>)
 80110aa:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d008      	beq.n	80110c4 <ProcessMacCommands+0x198>
                        {
                            // When ADR is on, the function RegionLinkAdrReq will take care
                            // about the parsing and interpretation of the LinkAdrRequest block and
                            // it provides one status which shall be applied to every LinkAdrAns
                            linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 80110b2:	78ba      	ldrb	r2, [r7, #2]
 80110b4:	78fb      	ldrb	r3, [r7, #3]
 80110b6:	1ad3      	subs	r3, r2, r3
 80110b8:	b2db      	uxtb	r3, r3
 80110ba:	3301      	adds	r3, #1
 80110bc:	b2db      	uxtb	r3, r3
 80110be:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
 80110c2:	e002      	b.n	80110ca <ProcessMacCommands+0x19e>
                            // When ADR is off, this function will loop over the individual LinkAdrRequests
                            // and will call RegionLinkAdrReq for each individually, as every request
                            // requires an individual answer.
                            // When ADR is off, the function RegionLinkAdrReq ignores the new values for
                            // ChannelsDatarate, ChannelsTxPower and ChannelsNbTrans.
                            linkAdrReq.PayloadSize = 5;
 80110c4:	2305      	movs	r3, #5
 80110c6:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                        }

                        // Process the ADR requests
                        status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 80110ca:	4b85      	ldr	r3, [pc, #532]	; (80112e0 <ProcessMacCommands+0x3b4>)
 80110cc:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 80110d0:	f107 0456 	add.w	r4, r7, #86	; 0x56
 80110d4:	f107 0257 	add.w	r2, r7, #87	; 0x57
 80110d8:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80110dc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80110e0:	9301      	str	r3, [sp, #4]
 80110e2:	f107 0355 	add.w	r3, r7, #85	; 0x55
 80110e6:	9300      	str	r3, [sp, #0]
 80110e8:	4623      	mov	r3, r4
 80110ea:	f005 fae2 	bl	80166b2 <RegionLinkAdrReq>
 80110ee:	4603      	mov	r3, r0
 80110f0:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                                                &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                        if( ( status & 0x07 ) == 0x07 )
 80110f4:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80110f8:	f003 0307 	and.w	r3, r3, #7
 80110fc:	2b07      	cmp	r3, #7
 80110fe:	d119      	bne.n	8011134 <ProcessMacCommands+0x208>
                        {
                            // Set the status that the datarate has been increased
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
 8011100:	4b77      	ldr	r3, [pc, #476]	; (80112e0 <ProcessMacCommands+0x3b4>)
 8011102:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 8011106:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 801110a:	429a      	cmp	r2, r3
 801110c:	da03      	bge.n	8011116 <ProcessMacCommands+0x1ea>
                            {
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
 801110e:	4b74      	ldr	r3, [pc, #464]	; (80112e0 <ProcessMacCommands+0x3b4>)
 8011110:	2201      	movs	r2, #1
 8011112:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
                            }
                            Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 8011116:	f997 2057 	ldrsb.w	r2, [r7, #87]	; 0x57
 801111a:	4b71      	ldr	r3, [pc, #452]	; (80112e0 <ProcessMacCommands+0x3b4>)
 801111c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 8011120:	f997 2056 	ldrsb.w	r2, [r7, #86]	; 0x56
 8011124:	4b6e      	ldr	r3, [pc, #440]	; (80112e0 <ProcessMacCommands+0x3b4>)
 8011126:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 801112a:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 801112e:	4b6c      	ldr	r3, [pc, #432]	; (80112e0 <ProcessMacCommands+0x3b4>)
 8011130:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                        }

                        // Add the answers to the buffer
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8011134:	2300      	movs	r3, #0
 8011136:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 801113a:	e00b      	b.n	8011154 <ProcessMacCommands+0x228>
                        {
                            LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 801113c:	f107 036b 	add.w	r3, r7, #107	; 0x6b
 8011140:	2201      	movs	r2, #1
 8011142:	4619      	mov	r1, r3
 8011144:	2003      	movs	r0, #3
 8011146:	f003 fbff 	bl	8014948 <LoRaMacCommandsAddCmd>
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 801114a:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 801114e:	3301      	adds	r3, #1
 8011150:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 8011154:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8011158:	4a62      	ldr	r2, [pc, #392]	; (80112e4 <ProcessMacCommands+0x3b8>)
 801115a:	fba2 2303 	umull	r2, r3, r2, r3
 801115e:	089b      	lsrs	r3, r3, #2
 8011160:	b2db      	uxtb	r3, r3
 8011162:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 8011166:	429a      	cmp	r2, r3
 8011168:	d3e8      	bcc.n	801113c <ProcessMacCommands+0x210>
                        }
                        // Update MAC index
                        macIndex += linkAdrNbBytesParsed - 1;
 801116a:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 801116e:	78fb      	ldrb	r3, [r7, #3]
 8011170:	4413      	add	r3, r2
 8011172:	b2db      	uxtb	r3, r3
 8011174:	3b01      	subs	r3, #1
 8011176:	70fb      	strb	r3, [r7, #3]

                        // Check to prevent invalid access
                        if( macIndex >= commandsSize )
 8011178:	78fa      	ldrb	r2, [r7, #3]
 801117a:	78bb      	ldrb	r3, [r7, #2]
 801117c:	429a      	cmp	r2, r3
 801117e:	d20a      	bcs.n	8011196 <ProcessMacCommands+0x26a>
                            break;

                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 8011180:	78fb      	ldrb	r3, [r7, #3]
 8011182:	1c5a      	adds	r2, r3, #1
 8011184:	70fa      	strb	r2, [r7, #3]
 8011186:	461a      	mov	r2, r3
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	4413      	add	r3, r2
 801118c:	781b      	ldrb	r3, [r3, #0]
 801118e:	2b03      	cmp	r3, #3
 8011190:	f43f af68 	beq.w	8011064 <ProcessMacCommands+0x138>
 8011194:	e000      	b.n	8011198 <ProcessMacCommands+0x26c>
                            break;
 8011196:	bf00      	nop

                    if( macIndex < commandsSize )
 8011198:	78fa      	ldrb	r2, [r7, #3]
 801119a:	78bb      	ldrb	r3, [r7, #2]
 801119c:	429a      	cmp	r2, r3
 801119e:	d206      	bcs.n	80111ae <ProcessMacCommands+0x282>
                    {
                        // Decrease the index such that it points to the next MAC command
                        macIndex--;
 80111a0:	78fb      	ldrb	r3, [r7, #3]
 80111a2:	3b01      	subs	r3, #1
 80111a4:	70fb      	strb	r3, [r7, #3]
                {
                    // Increase the index by the MAC command size (without command)
                    macIndex += 4;
                }
#endif /* LORAMAC_VERSION */
                break;
 80111a6:	e002      	b.n	80111ae <ProcessMacCommands+0x282>
                    macIndex += 4;
 80111a8:	78fb      	ldrb	r3, [r7, #3]
 80111aa:	3304      	adds	r3, #4
 80111ac:	70fb      	strb	r3, [r7, #3]
                break;
 80111ae:	bf00      	nop
 80111b0:	e382      	b.n	80118b8 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 80111b2:	78fb      	ldrb	r3, [r7, #3]
 80111b4:	1c5a      	adds	r2, r3, #1
 80111b6:	70fa      	strb	r2, [r7, #3]
 80111b8:	461a      	mov	r2, r3
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	4413      	add	r3, r2
 80111be:	781b      	ldrb	r3, [r3, #0]
 80111c0:	f003 030f 	and.w	r3, r3, #15
 80111c4:	b2da      	uxtb	r2, r3
 80111c6:	4b46      	ldr	r3, [pc, #280]	; (80112e0 <ProcessMacCommands+0x3b4>)
 80111c8:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 80111cc:	4b44      	ldr	r3, [pc, #272]	; (80112e0 <ProcessMacCommands+0x3b4>)
 80111ce:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 80111d2:	461a      	mov	r2, r3
 80111d4:	2301      	movs	r3, #1
 80111d6:	4093      	lsls	r3, r2
 80111d8:	b29a      	uxth	r2, r3
 80111da:	4b41      	ldr	r3, [pc, #260]	; (80112e0 <ProcessMacCommands+0x3b4>)
 80111dc:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 80111e0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80111e4:	2200      	movs	r2, #0
 80111e6:	4619      	mov	r1, r3
 80111e8:	2004      	movs	r0, #4
 80111ea:	f003 fbad 	bl	8014948 <LoRaMacCommandsAddCmd>
                break;
 80111ee:	e363      	b.n	80118b8 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 80111f0:	2307      	movs	r3, #7
 80111f2:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 80111f6:	78fb      	ldrb	r3, [r7, #3]
 80111f8:	687a      	ldr	r2, [r7, #4]
 80111fa:	4413      	add	r3, r2
 80111fc:	781b      	ldrb	r3, [r3, #0]
 80111fe:	091b      	lsrs	r3, r3, #4
 8011200:	b2db      	uxtb	r3, r3
 8011202:	b25b      	sxtb	r3, r3
 8011204:	f003 0307 	and.w	r3, r3, #7
 8011208:	b25b      	sxtb	r3, r3
 801120a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 801120e:	78fb      	ldrb	r3, [r7, #3]
 8011210:	687a      	ldr	r2, [r7, #4]
 8011212:	4413      	add	r3, r2
 8011214:	781b      	ldrb	r3, [r3, #0]
 8011216:	b25b      	sxtb	r3, r3
 8011218:	f003 030f 	and.w	r3, r3, #15
 801121c:	b25b      	sxtb	r3, r3
 801121e:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
                macIndex++;
 8011222:	78fb      	ldrb	r3, [r7, #3]
 8011224:	3301      	adds	r3, #1
 8011226:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8011228:	78fb      	ldrb	r3, [r7, #3]
 801122a:	1c5a      	adds	r2, r3, #1
 801122c:	70fa      	strb	r2, [r7, #3]
 801122e:	461a      	mov	r2, r3
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	4413      	add	r3, r2
 8011234:	781b      	ldrb	r3, [r3, #0]
 8011236:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8011238:	78fb      	ldrb	r3, [r7, #3]
 801123a:	1c5a      	adds	r2, r3, #1
 801123c:	70fa      	strb	r2, [r7, #3]
 801123e:	461a      	mov	r2, r3
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	4413      	add	r3, r2
 8011244:	781b      	ldrb	r3, [r3, #0]
 8011246:	021a      	lsls	r2, r3, #8
 8011248:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801124a:	4313      	orrs	r3, r2
 801124c:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 801124e:	78fb      	ldrb	r3, [r7, #3]
 8011250:	1c5a      	adds	r2, r3, #1
 8011252:	70fa      	strb	r2, [r7, #3]
 8011254:	461a      	mov	r2, r3
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	4413      	add	r3, r2
 801125a:	781b      	ldrb	r3, [r3, #0]
 801125c:	041a      	lsls	r2, r3, #16
 801125e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011260:	4313      	orrs	r3, r2
 8011262:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency *= 100;
 8011264:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011266:	2264      	movs	r2, #100	; 0x64
 8011268:	fb02 f303 	mul.w	r3, r2, r3
 801126c:	653b      	str	r3, [r7, #80]	; 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 801126e:	4b1c      	ldr	r3, [pc, #112]	; (80112e0 <ProcessMacCommands+0x3b4>)
 8011270:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011274:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8011278:	4611      	mov	r1, r2
 801127a:	4618      	mov	r0, r3
 801127c:	f005 fa40 	bl	8016700 <RegionRxParamSetupReq>
 8011280:	4603      	mov	r3, r0
 8011282:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( status & 0x07 ) == 0x07 )
 8011286:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 801128a:	f003 0307 	and.w	r3, r3, #7
 801128e:	2b07      	cmp	r3, #7
 8011290:	d117      	bne.n	80112c2 <ProcessMacCommands+0x396>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 8011292:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 8011296:	b2da      	uxtb	r2, r3
 8011298:	4b11      	ldr	r3, [pc, #68]	; (80112e0 <ProcessMacCommands+0x3b4>)
 801129a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 801129e:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 80112a2:	b2da      	uxtb	r2, r3
 80112a4:	4b0e      	ldr	r3, [pc, #56]	; (80112e0 <ProcessMacCommands+0x3b4>)
 80112a6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 80112aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80112ac:	4a0c      	ldr	r2, [pc, #48]	; (80112e0 <ProcessMacCommands+0x3b4>)
 80112ae:	66d3      	str	r3, [r2, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 80112b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80112b2:	4a0b      	ldr	r2, [pc, #44]	; (80112e0 <ProcessMacCommands+0x3b4>)
 80112b4:	6753      	str	r3, [r2, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 80112b6:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 80112ba:	b2da      	uxtb	r2, r3
 80112bc:	4b08      	ldr	r3, [pc, #32]	; (80112e0 <ProcessMacCommands+0x3b4>)
 80112be:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                }
                macCmdPayload[0] = status;
 80112c2:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80112c6:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 80112ca:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80112ce:	2201      	movs	r2, #1
 80112d0:	4619      	mov	r1, r3
 80112d2:	2005      	movs	r0, #5
 80112d4:	f003 fb38 	bl	8014948 <LoRaMacCommandsAddCmd>
                break;
 80112d8:	bf00      	nop
 80112da:	e2ed      	b.n	80118b8 <ProcessMacCommands+0x98c>
 80112dc:	200006e0 	.word	0x200006e0
 80112e0:	20000bfc 	.word	0x20000bfc
 80112e4:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 80112e8:	23ff      	movs	r3, #255	; 0xff
 80112ea:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 80112ee:	4bb7      	ldr	r3, [pc, #732]	; (80115cc <ProcessMacCommands+0x6a0>)
 80112f0:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d00d      	beq.n	8011314 <ProcessMacCommands+0x3e8>
 80112f8:	4bb4      	ldr	r3, [pc, #720]	; (80115cc <ProcessMacCommands+0x6a0>)
 80112fa:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80112fe:	681b      	ldr	r3, [r3, #0]
 8011300:	2b00      	cmp	r3, #0
 8011302:	d007      	beq.n	8011314 <ProcessMacCommands+0x3e8>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 8011304:	4bb1      	ldr	r3, [pc, #708]	; (80115cc <ProcessMacCommands+0x6a0>)
 8011306:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	4798      	blx	r3
 801130e:	4603      	mov	r3, r0
 8011310:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                }
                macCmdPayload[0] = batteryLevel;
 8011314:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8011318:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 801131c:	787b      	ldrb	r3, [r7, #1]
 801131e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011322:	b2db      	uxtb	r3, r3
 8011324:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 8011328:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801132c:	2202      	movs	r2, #2
 801132e:	4619      	mov	r1, r3
 8011330:	2006      	movs	r0, #6
 8011332:	f003 fb09 	bl	8014948 <LoRaMacCommandsAddCmd>
                break;
 8011336:	e2bf      	b.n	80118b8 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 8011338:	2303      	movs	r3, #3
 801133a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 801133e:	78fb      	ldrb	r3, [r7, #3]
 8011340:	1c5a      	adds	r2, r3, #1
 8011342:	70fa      	strb	r2, [r7, #3]
 8011344:	461a      	mov	r2, r3
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	4413      	add	r3, r2
 801134a:	781b      	ldrb	r3, [r3, #0]
 801134c:	b25b      	sxtb	r3, r3
 801134e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                newChannelReq.NewChannel = &chParam;
 8011352:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8011356:	647b      	str	r3, [r7, #68]	; 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8011358:	78fb      	ldrb	r3, [r7, #3]
 801135a:	1c5a      	adds	r2, r3, #1
 801135c:	70fa      	strb	r2, [r7, #3]
 801135e:	461a      	mov	r2, r3
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	4413      	add	r3, r2
 8011364:	781b      	ldrb	r3, [r3, #0]
 8011366:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8011368:	78fb      	ldrb	r3, [r7, #3]
 801136a:	1c5a      	adds	r2, r3, #1
 801136c:	70fa      	strb	r2, [r7, #3]
 801136e:	461a      	mov	r2, r3
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	4413      	add	r3, r2
 8011374:	781b      	ldrb	r3, [r3, #0]
 8011376:	021a      	lsls	r2, r3, #8
 8011378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801137a:	4313      	orrs	r3, r2
 801137c:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 801137e:	78fb      	ldrb	r3, [r7, #3]
 8011380:	1c5a      	adds	r2, r3, #1
 8011382:	70fa      	strb	r2, [r7, #3]
 8011384:	461a      	mov	r2, r3
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	4413      	add	r3, r2
 801138a:	781b      	ldrb	r3, [r3, #0]
 801138c:	041a      	lsls	r2, r3, #16
 801138e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011390:	4313      	orrs	r3, r2
 8011392:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency *= 100;
 8011394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011396:	2264      	movs	r2, #100	; 0x64
 8011398:	fb02 f303 	mul.w	r3, r2, r3
 801139c:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Rx1Frequency = 0;
 801139e:	2300      	movs	r3, #0
 80113a0:	63fb      	str	r3, [r7, #60]	; 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 80113a2:	78fb      	ldrb	r3, [r7, #3]
 80113a4:	1c5a      	adds	r2, r3, #1
 80113a6:	70fa      	strb	r2, [r7, #3]
 80113a8:	461a      	mov	r2, r3
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	4413      	add	r3, r2
 80113ae:	781b      	ldrb	r3, [r3, #0]
 80113b0:	b25b      	sxtb	r3, r3
 80113b2:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 80113b6:	4b86      	ldr	r3, [pc, #536]	; (80115d0 <ProcessMacCommands+0x6a4>)
 80113b8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80113bc:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80113c0:	4611      	mov	r1, r2
 80113c2:	4618      	mov	r0, r3
 80113c4:	f005 f9b7 	bl	8016736 <RegionNewChannelReq>
 80113c8:	4603      	mov	r3, r0
 80113ca:	b2db      	uxtb	r3, r3
 80113cc:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 80113d0:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80113d4:	b25b      	sxtb	r3, r3
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	db0a      	blt.n	80113f0 <ProcessMacCommands+0x4c4>
                {
                    macCmdPayload[0] = status;
 80113da:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80113de:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 80113e2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80113e6:	2201      	movs	r2, #1
 80113e8:	4619      	mov	r1, r3
 80113ea:	2007      	movs	r0, #7
 80113ec:	f003 faac 	bl	8014948 <LoRaMacCommandsAddCmd>
                }
                break;
 80113f0:	bf00      	nop
 80113f2:	e261      	b.n	80118b8 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 80113f4:	78fb      	ldrb	r3, [r7, #3]
 80113f6:	1c5a      	adds	r2, r3, #1
 80113f8:	70fa      	strb	r2, [r7, #3]
 80113fa:	461a      	mov	r2, r3
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	4413      	add	r3, r2
 8011400:	781b      	ldrb	r3, [r3, #0]
 8011402:	f003 030f 	and.w	r3, r3, #15
 8011406:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84

                if( delay == 0 )
 801140a:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 801140e:	2b00      	cmp	r3, #0
 8011410:	d104      	bne.n	801141c <ProcessMacCommands+0x4f0>
                {
                    delay++;
 8011412:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8011416:	3301      	adds	r3, #1
 8011418:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 801141c:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8011420:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8011424:	fb02 f303 	mul.w	r3, r2, r3
 8011428:	461a      	mov	r2, r3
 801142a:	4b69      	ldr	r3, [pc, #420]	; (80115d0 <ProcessMacCommands+0x6a4>)
 801142c:	659a      	str	r2, [r3, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 801142e:	4b68      	ldr	r3, [pc, #416]	; (80115d0 <ProcessMacCommands+0x6a4>)
 8011430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011432:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8011436:	4a66      	ldr	r2, [pc, #408]	; (80115d0 <ProcessMacCommands+0x6a4>)
 8011438:	65d3      	str	r3, [r2, #92]	; 0x5c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 801143a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801143e:	2200      	movs	r2, #0
 8011440:	4619      	mov	r1, r3
 8011442:	2008      	movs	r0, #8
 8011444:	f003 fa80 	bl	8014948 <LoRaMacCommandsAddCmd>
                break;
 8011448:	e236      	b.n	80118b8 <ProcessMacCommands+0x98c>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 801144a:	78fb      	ldrb	r3, [r7, #3]
 801144c:	1c5a      	adds	r2, r3, #1
 801144e:	70fa      	strb	r2, [r7, #3]
 8011450:	461a      	mov	r2, r3
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	4413      	add	r3, r2
 8011456:	781b      	ldrb	r3, [r3, #0]
 8011458:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 801145c:	2300      	movs	r3, #0
 801145e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 8011462:	2300      	movs	r3, #0
 8011464:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8011468:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 801146c:	f003 0320 	and.w	r3, r3, #32
 8011470:	2b00      	cmp	r3, #0
 8011472:	d002      	beq.n	801147a <ProcessMacCommands+0x54e>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 8011474:	2301      	movs	r3, #1
 8011476:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 801147a:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 801147e:	f003 0310 	and.w	r3, r3, #16
 8011482:	2b00      	cmp	r3, #0
 8011484:	d002      	beq.n	801148c <ProcessMacCommands+0x560>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 8011486:	2301      	movs	r3, #1
 8011488:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 801148c:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8011490:	f003 030f 	and.w	r3, r3, #15
 8011494:	b2db      	uxtb	r3, r3
 8011496:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 801149a:	4b4d      	ldr	r3, [pc, #308]	; (80115d0 <ProcessMacCommands+0x6a4>)
 801149c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80114a0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80114a4:	4611      	mov	r1, r2
 80114a6:	4618      	mov	r0, r3
 80114a8:	f005 f960 	bl	801676c <RegionTxParamSetupReq>
 80114ac:	4603      	mov	r3, r0
 80114ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80114b2:	d03b      	beq.n	801152c <ProcessMacCommands+0x600>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 80114b4:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 80114b8:	4b45      	ldr	r3, [pc, #276]	; (80115d0 <ProcessMacCommands+0x6a4>)
 80114ba:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 80114be:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80114c2:	4b43      	ldr	r3, [pc, #268]	; (80115d0 <ProcessMacCommands+0x6a4>)
 80114c4:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 80114c8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80114cc:	461a      	mov	r2, r3
 80114ce:	4b41      	ldr	r3, [pc, #260]	; (80115d4 <ProcessMacCommands+0x6a8>)
 80114d0:	5c9b      	ldrb	r3, [r3, r2]
 80114d2:	4618      	mov	r0, r3
 80114d4:	f7ef fbdc 	bl	8000c90 <__aeabi_ui2f>
 80114d8:	4603      	mov	r3, r0
 80114da:	4a3d      	ldr	r2, [pc, #244]	; (80115d0 <ProcessMacCommands+0x6a4>)
 80114dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 80114e0:	2302      	movs	r3, #2
 80114e2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80114e6:	4b3a      	ldr	r3, [pc, #232]	; (80115d0 <ProcessMacCommands+0x6a4>)
 80114e8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80114ec:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80114f0:	4b37      	ldr	r3, [pc, #220]	; (80115d0 <ProcessMacCommands+0x6a4>)
 80114f2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80114f6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80114fa:	4611      	mov	r1, r2
 80114fc:	4618      	mov	r0, r3
 80114fe:	f004 ffd5 	bl	80164ac <RegionGetPhyParam>
 8011502:	4603      	mov	r3, r0
 8011504:	62bb      	str	r3, [r7, #40]	; 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 8011506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011508:	b25a      	sxtb	r2, r3
 801150a:	4b31      	ldr	r3, [pc, #196]	; (80115d0 <ProcessMacCommands+0x6a4>)
 801150c:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8011510:	4293      	cmp	r3, r2
 8011512:	bfb8      	it	lt
 8011514:	4613      	movlt	r3, r2
 8011516:	b25a      	sxtb	r2, r3
 8011518:	4b2d      	ldr	r3, [pc, #180]	; (80115d0 <ProcessMacCommands+0x6a4>)
 801151a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 801151e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8011522:	2200      	movs	r2, #0
 8011524:	4619      	mov	r1, r3
 8011526:	2009      	movs	r0, #9
 8011528:	f003 fa0e 	bl	8014948 <LoRaMacCommandsAddCmd>
                }
                break;
 801152c:	bf00      	nop
 801152e:	e1c3      	b.n	80118b8 <ProcessMacCommands+0x98c>
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 8011530:	2303      	movs	r3, #3
 8011532:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 8011536:	78fb      	ldrb	r3, [r7, #3]
 8011538:	1c5a      	adds	r2, r3, #1
 801153a:	70fa      	strb	r2, [r7, #3]
 801153c:	461a      	mov	r2, r3
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	4413      	add	r3, r2
 8011542:	781b      	ldrb	r3, [r3, #0]
 8011544:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8011548:	78fb      	ldrb	r3, [r7, #3]
 801154a:	1c5a      	adds	r2, r3, #1
 801154c:	70fa      	strb	r2, [r7, #3]
 801154e:	461a      	mov	r2, r3
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	4413      	add	r3, r2
 8011554:	781b      	ldrb	r3, [r3, #0]
 8011556:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8011558:	78fb      	ldrb	r3, [r7, #3]
 801155a:	1c5a      	adds	r2, r3, #1
 801155c:	70fa      	strb	r2, [r7, #3]
 801155e:	461a      	mov	r2, r3
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	4413      	add	r3, r2
 8011564:	781b      	ldrb	r3, [r3, #0]
 8011566:	021a      	lsls	r2, r3, #8
 8011568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801156a:	4313      	orrs	r3, r2
 801156c:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 801156e:	78fb      	ldrb	r3, [r7, #3]
 8011570:	1c5a      	adds	r2, r3, #1
 8011572:	70fa      	strb	r2, [r7, #3]
 8011574:	461a      	mov	r2, r3
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	4413      	add	r3, r2
 801157a:	781b      	ldrb	r3, [r3, #0]
 801157c:	041a      	lsls	r2, r3, #16
 801157e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011580:	4313      	orrs	r3, r2
 8011582:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency *= 100;
 8011584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011586:	2264      	movs	r2, #100	; 0x64
 8011588:	fb02 f303 	mul.w	r3, r2, r3
 801158c:	627b      	str	r3, [r7, #36]	; 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 801158e:	4b10      	ldr	r3, [pc, #64]	; (80115d0 <ProcessMacCommands+0x6a4>)
 8011590:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011594:	f107 0220 	add.w	r2, r7, #32
 8011598:	4611      	mov	r1, r2
 801159a:	4618      	mov	r0, r3
 801159c:	f005 f901 	bl	80167a2 <RegionDlChannelReq>
 80115a0:	4603      	mov	r3, r0
 80115a2:	b2db      	uxtb	r3, r3
 80115a4:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 80115a8:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80115ac:	b25b      	sxtb	r3, r3
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	db0a      	blt.n	80115c8 <ProcessMacCommands+0x69c>
                {
                    macCmdPayload[0] = status;
 80115b2:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80115b6:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 80115ba:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80115be:	2201      	movs	r2, #1
 80115c0:	4619      	mov	r1, r3
 80115c2:	200a      	movs	r0, #10
 80115c4:	f003 f9c0 	bl	8014948 <LoRaMacCommandsAddCmd>
                }
                break;
 80115c8:	bf00      	nop
 80115ca:	e175      	b.n	80118b8 <ProcessMacCommands+0x98c>
 80115cc:	200006e0 	.word	0x200006e0
 80115d0:	20000bfc 	.word	0x20000bfc
 80115d4:	0801fc00 	.word	0x0801fc00
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                // The mote time can be updated only when the time is received in classA
                // receive windows only.
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 80115d8:	2009      	movs	r0, #9
 80115da:	f003 fced 	bl	8014fb8 <LoRaMacConfirmQueueIsCmdActive>
 80115de:	4603      	mov	r3, r0
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	f000 8084 	beq.w	80116ee <ProcessMacCommands+0x7c2>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 80115e6:	2109      	movs	r1, #9
 80115e8:	2000      	movs	r0, #0
 80115ea:	f003 fc59 	bl	8014ea0 <LoRaMacConfirmQueueSetStatus>

                    SysTime_t gpsEpochTime = { 0 };
 80115ee:	f107 0318 	add.w	r3, r7, #24
 80115f2:	2200      	movs	r2, #0
 80115f4:	601a      	str	r2, [r3, #0]
 80115f6:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 80115f8:	f107 0310 	add.w	r3, r7, #16
 80115fc:	2200      	movs	r2, #0
 80115fe:	601a      	str	r2, [r3, #0]
 8011600:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 8011602:	f107 0308 	add.w	r3, r7, #8
 8011606:	2200      	movs	r2, #0
 8011608:	601a      	str	r2, [r3, #0]
 801160a:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 801160c:	78fb      	ldrb	r3, [r7, #3]
 801160e:	1c5a      	adds	r2, r3, #1
 8011610:	70fa      	strb	r2, [r7, #3]
 8011612:	461a      	mov	r2, r3
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	4413      	add	r3, r2
 8011618:	781b      	ldrb	r3, [r3, #0]
 801161a:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 801161c:	78fb      	ldrb	r3, [r7, #3]
 801161e:	1c5a      	adds	r2, r3, #1
 8011620:	70fa      	strb	r2, [r7, #3]
 8011622:	461a      	mov	r2, r3
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	4413      	add	r3, r2
 8011628:	781b      	ldrb	r3, [r3, #0]
 801162a:	021a      	lsls	r2, r3, #8
 801162c:	69bb      	ldr	r3, [r7, #24]
 801162e:	4313      	orrs	r3, r2
 8011630:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8011632:	78fb      	ldrb	r3, [r7, #3]
 8011634:	1c5a      	adds	r2, r3, #1
 8011636:	70fa      	strb	r2, [r7, #3]
 8011638:	461a      	mov	r2, r3
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	4413      	add	r3, r2
 801163e:	781b      	ldrb	r3, [r3, #0]
 8011640:	041a      	lsls	r2, r3, #16
 8011642:	69bb      	ldr	r3, [r7, #24]
 8011644:	4313      	orrs	r3, r2
 8011646:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8011648:	78fb      	ldrb	r3, [r7, #3]
 801164a:	1c5a      	adds	r2, r3, #1
 801164c:	70fa      	strb	r2, [r7, #3]
 801164e:	461a      	mov	r2, r3
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	4413      	add	r3, r2
 8011654:	781b      	ldrb	r3, [r3, #0]
 8011656:	061a      	lsls	r2, r3, #24
 8011658:	69bb      	ldr	r3, [r7, #24]
 801165a:	4313      	orrs	r3, r2
 801165c:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 801165e:	78fb      	ldrb	r3, [r7, #3]
 8011660:	1c5a      	adds	r2, r3, #1
 8011662:	70fa      	strb	r2, [r7, #3]
 8011664:	461a      	mov	r2, r3
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	4413      	add	r3, r2
 801166a:	781b      	ldrb	r3, [r3, #0]
 801166c:	b21b      	sxth	r3, r3
 801166e:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8011670:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8011674:	461a      	mov	r2, r3
 8011676:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801167a:	fb02 f303 	mul.w	r3, r2, r3
 801167e:	121b      	asrs	r3, r3, #8
 8011680:	b21b      	sxth	r3, r3
 8011682:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 8011684:	f107 0310 	add.w	r3, r7, #16
 8011688:	f107 0218 	add.w	r2, r7, #24
 801168c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011690:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epoch offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 8011694:	693a      	ldr	r2, [r7, #16]
 8011696:	4b8f      	ldr	r3, [pc, #572]	; (80118d4 <ProcessMacCommands+0x9a8>)
 8011698:	4413      	add	r3, r2
 801169a:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 801169c:	f107 0308 	add.w	r3, r7, #8
 80116a0:	4618      	mov	r0, r3
 80116a2:	f00c f937 	bl	801d914 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 80116a6:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 80116aa:	4b8b      	ldr	r3, [pc, #556]	; (80118d8 <ProcessMacCommands+0x9ac>)
 80116ac:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 80116b0:	9200      	str	r2, [sp, #0]
 80116b2:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 80116b6:	f107 0210 	add.w	r2, r7, #16
 80116ba:	ca06      	ldmia	r2, {r1, r2}
 80116bc:	f00c f8c3 	bl	801d846 <SysTimeSub>
 80116c0:	f107 0010 	add.w	r0, r7, #16
 80116c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80116c6:	9300      	str	r3, [sp, #0]
 80116c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80116ca:	f107 0208 	add.w	r2, r7, #8
 80116ce:	ca06      	ldmia	r2, {r1, r2}
 80116d0:	f00c f880 	bl	801d7d4 <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 80116d4:	f107 0310 	add.w	r3, r7, #16
 80116d8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80116dc:	f00c f8ec 	bl	801d8b8 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 80116e0:	f002 ffd0 	bl	8014684 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 80116e4:	4b7c      	ldr	r3, [pc, #496]	; (80118d8 <ProcessMacCommands+0x9ac>)
 80116e6:	2201      	movs	r2, #1
 80116e8:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
 80116ec:	e0e4      	b.n	80118b8 <ProcessMacCommands+0x98c>
                }
                else
                {
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                    // In case of other receive windows the Device Time Answer is not received.
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 80116ee:	4b7a      	ldr	r3, [pc, #488]	; (80118d8 <ProcessMacCommands+0x9ac>)
 80116f0:	2200      	movs	r2, #0
 80116f2:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
#endif /* LORAMAC_VERSION */
                }
                break;
 80116f6:	e0df      	b.n	80118b8 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 80116f8:	200c      	movs	r0, #12
 80116fa:	f003 fc5d 	bl	8014fb8 <LoRaMacConfirmQueueIsCmdActive>
 80116fe:	4603      	mov	r3, r0
 8011700:	2b00      	cmp	r3, #0
 8011702:	f000 80d9 	beq.w	80118b8 <ProcessMacCommands+0x98c>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 8011706:	210c      	movs	r1, #12
 8011708:	2000      	movs	r0, #0
 801170a:	f003 fbc9 	bl	8014ea0 <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 801170e:	4b72      	ldr	r3, [pc, #456]	; (80118d8 <ProcessMacCommands+0x9ac>)
 8011710:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 8011714:	2b04      	cmp	r3, #4
 8011716:	f000 80cf 	beq.w	80118b8 <ProcessMacCommands+0x98c>
 801171a:	4b6f      	ldr	r3, [pc, #444]	; (80118d8 <ProcessMacCommands+0x9ac>)
 801171c:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 8011720:	2b05      	cmp	r3, #5
 8011722:	f000 80c9 	beq.w	80118b8 <ProcessMacCommands+0x98c>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 8011726:	f002 ff8e 	bl	8014646 <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 801172a:	e0c5      	b.n	80118b8 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 801172c:	2303      	movs	r3, #3
 801172e:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                uint32_t frequency = 0;
 8011732:	2300      	movs	r3, #0
 8011734:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 8011736:	78fb      	ldrb	r3, [r7, #3]
 8011738:	1c5a      	adds	r2, r3, #1
 801173a:	70fa      	strb	r2, [r7, #3]
 801173c:	461a      	mov	r2, r3
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	4413      	add	r3, r2
 8011742:	781b      	ldrb	r3, [r3, #0]
 8011744:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8011746:	78fb      	ldrb	r3, [r7, #3]
 8011748:	1c5a      	adds	r2, r3, #1
 801174a:	70fa      	strb	r2, [r7, #3]
 801174c:	461a      	mov	r2, r3
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	4413      	add	r3, r2
 8011752:	781b      	ldrb	r3, [r3, #0]
 8011754:	021b      	lsls	r3, r3, #8
 8011756:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8011758:	4313      	orrs	r3, r2
 801175a:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 801175c:	78fb      	ldrb	r3, [r7, #3]
 801175e:	1c5a      	adds	r2, r3, #1
 8011760:	70fa      	strb	r2, [r7, #3]
 8011762:	461a      	mov	r2, r3
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	4413      	add	r3, r2
 8011768:	781b      	ldrb	r3, [r3, #0]
 801176a:	041b      	lsls	r3, r3, #16
 801176c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801176e:	4313      	orrs	r3, r2
 8011770:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 8011772:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011774:	2264      	movs	r2, #100	; 0x64
 8011776:	fb02 f303 	mul.w	r3, r2, r3
 801177a:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 801177c:	78fb      	ldrb	r3, [r7, #3]
 801177e:	1c5a      	adds	r2, r3, #1
 8011780:	70fa      	strb	r2, [r7, #3]
 8011782:	461a      	mov	r2, r3
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	4413      	add	r3, r2
 8011788:	781b      	ldrb	r3, [r3, #0]
 801178a:	f003 030f 	and.w	r3, r3, #15
 801178e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 8011792:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011796:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8011798:	4618      	mov	r0, r3
 801179a:	f002 ff5a 	bl	8014652 <LoRaMacClassBPingSlotChannelReq>
 801179e:	4603      	mov	r3, r0
 80117a0:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                macCmdPayload[0] = status;
 80117a4:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 80117a8:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
 80117ac:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80117b0:	2201      	movs	r2, #1
 80117b2:	4619      	mov	r1, r3
 80117b4:	2011      	movs	r0, #17
 80117b6:	f003 f8c7 	bl	8014948 <LoRaMacCommandsAddCmd>
#endif /* LORAMAC_VERSION */
                break;
 80117ba:	e07d      	b.n	80118b8 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 80117bc:	200d      	movs	r0, #13
 80117be:	f003 fbfb 	bl	8014fb8 <LoRaMacConfirmQueueIsCmdActive>
 80117c2:	4603      	mov	r3, r0
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d077      	beq.n	80118b8 <ProcessMacCommands+0x98c>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 80117c8:	210d      	movs	r1, #13
 80117ca:	2000      	movs	r0, #0
 80117cc:	f003 fb68 	bl	8014ea0 <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 80117d0:	2300      	movs	r3, #0
 80117d2:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    uint8_t beaconTimingChannel = 0;
 80117d6:	2300      	movs	r3, #0
 80117d8:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 80117dc:	78fb      	ldrb	r3, [r7, #3]
 80117de:	1c5a      	adds	r2, r3, #1
 80117e0:	70fa      	strb	r2, [r7, #3]
 80117e2:	461a      	mov	r2, r3
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	4413      	add	r3, r2
 80117e8:	781b      	ldrb	r3, [r3, #0]
 80117ea:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 80117ee:	78fb      	ldrb	r3, [r7, #3]
 80117f0:	1c5a      	adds	r2, r3, #1
 80117f2:	70fa      	strb	r2, [r7, #3]
 80117f4:	461a      	mov	r2, r3
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	4413      	add	r3, r2
 80117fa:	781b      	ldrb	r3, [r3, #0]
 80117fc:	021b      	lsls	r3, r3, #8
 80117fe:	b21a      	sxth	r2, r3
 8011800:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 8011804:	4313      	orrs	r3, r2
 8011806:	b21b      	sxth	r3, r3
 8011808:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingChannel = payload[macIndex++];
 801180c:	78fb      	ldrb	r3, [r7, #3]
 801180e:	1c5a      	adds	r2, r3, #1
 8011810:	70fa      	strb	r2, [r7, #3]
 8011812:	461a      	mov	r2, r3
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	4413      	add	r3, r2
 8011818:	781b      	ldrb	r3, [r3, #0]
 801181a:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 801181e:	4b2f      	ldr	r3, [pc, #188]	; (80118dc <ProcessMacCommands+0x9b0>)
 8011820:	681a      	ldr	r2, [r3, #0]
 8011822:	f897 107d 	ldrb.w	r1, [r7, #125]	; 0x7d
 8011826:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 801182a:	4618      	mov	r0, r3
 801182c:	f002 ff1d 	bl	801466a <LoRaMacClassBBeaconTimingAns>
                }
                break;
 8011830:	e042      	b.n	80118b8 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 8011832:	2300      	movs	r3, #0
 8011834:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 8011838:	78fb      	ldrb	r3, [r7, #3]
 801183a:	1c5a      	adds	r2, r3, #1
 801183c:	70fa      	strb	r2, [r7, #3]
 801183e:	461a      	mov	r2, r3
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	4413      	add	r3, r2
 8011844:	781b      	ldrb	r3, [r3, #0]
 8011846:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 801184a:	78fb      	ldrb	r3, [r7, #3]
 801184c:	1c5a      	adds	r2, r3, #1
 801184e:	70fa      	strb	r2, [r7, #3]
 8011850:	461a      	mov	r2, r3
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	4413      	add	r3, r2
 8011856:	781b      	ldrb	r3, [r3, #0]
 8011858:	021b      	lsls	r3, r3, #8
 801185a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801185e:	4313      	orrs	r3, r2
 8011860:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8011864:	78fb      	ldrb	r3, [r7, #3]
 8011866:	1c5a      	adds	r2, r3, #1
 8011868:	70fa      	strb	r2, [r7, #3]
 801186a:	461a      	mov	r2, r3
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	4413      	add	r3, r2
 8011870:	781b      	ldrb	r3, [r3, #0]
 8011872:	041b      	lsls	r3, r3, #16
 8011874:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8011878:	4313      	orrs	r3, r2
 801187a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency *= 100;
 801187e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011882:	2264      	movs	r2, #100	; 0x64
 8011884:	fb02 f303 	mul.w	r3, r2, r3
 8011888:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 801188c:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8011890:	f002 fefe 	bl	8014690 <LoRaMacClassBBeaconFreqReq>
 8011894:	4603      	mov	r3, r0
 8011896:	2b00      	cmp	r3, #0
 8011898:	d003      	beq.n	80118a2 <ProcessMacCommands+0x976>
                    {
                        macCmdPayload[0] = 1;
 801189a:	2301      	movs	r3, #1
 801189c:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 80118a0:	e002      	b.n	80118a8 <ProcessMacCommands+0x97c>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 80118a2:	2300      	movs	r3, #0
 80118a4:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 80118a8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80118ac:	2201      	movs	r2, #1
 80118ae:	4619      	mov	r1, r3
 80118b0:	2013      	movs	r0, #19
 80118b2:	f003 f849 	bl	8014948 <LoRaMacCommandsAddCmd>
                }
                break;
 80118b6:	bf00      	nop
    while( macIndex < commandsSize )
 80118b8:	78fa      	ldrb	r2, [r7, #3]
 80118ba:	78bb      	ldrb	r3, [r7, #2]
 80118bc:	429a      	cmp	r2, r3
 80118be:	f4ff ab57 	bcc.w	8010f70 <ProcessMacCommands+0x44>
 80118c2:	e004      	b.n	80118ce <ProcessMacCommands+0x9a2>
        return;
 80118c4:	bf00      	nop
 80118c6:	e002      	b.n	80118ce <ProcessMacCommands+0x9a2>
            return;
 80118c8:	bf00      	nop
 80118ca:	e000      	b.n	80118ce <ProcessMacCommands+0x9a2>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 80118cc:	bf00      	nop
        }
    }
}
 80118ce:	378c      	adds	r7, #140	; 0x8c
 80118d0:	46bd      	mov	sp, r7
 80118d2:	bd90      	pop	{r4, r7, pc}
 80118d4:	12d53d80 	.word	0x12d53d80
 80118d8:	200006e0 	.word	0x200006e0
 80118dc:	2000182c 	.word	0x2000182c

080118e0 <Send>:

static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 80118e0:	b580      	push	{r7, lr}
 80118e2:	b08e      	sub	sp, #56	; 0x38
 80118e4:	af02      	add	r7, sp, #8
 80118e6:	60f8      	str	r0, [r7, #12]
 80118e8:	607a      	str	r2, [r7, #4]
 80118ea:	461a      	mov	r2, r3
 80118ec:	460b      	mov	r3, r1
 80118ee:	72fb      	strb	r3, [r7, #11]
 80118f0:	4613      	mov	r3, r2
 80118f2:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80118f4:	2303      	movs	r3, #3
 80118f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 80118fa:	4b66      	ldr	r3, [pc, #408]	; (8011a94 <Send+0x1b4>)
 80118fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8011900:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 8011904:	4b63      	ldr	r3, [pc, #396]	; (8011a94 <Send+0x1b4>)
 8011906:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801190a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 801190e:	4b61      	ldr	r3, [pc, #388]	; (8011a94 <Send+0x1b4>)
 8011910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011912:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8011914:	4b5f      	ldr	r3, [pc, #380]	; (8011a94 <Send+0x1b4>)
 8011916:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 801191a:	2b00      	cmp	r3, #0
 801191c:	d101      	bne.n	8011922 <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 801191e:	2307      	movs	r3, #7
 8011920:	e0b4      	b.n	8011a8c <Send+0x1ac>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 8011922:	4b5c      	ldr	r3, [pc, #368]	; (8011a94 <Send+0x1b4>)
 8011924:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 8011928:	2b00      	cmp	r3, #0
 801192a:	d102      	bne.n	8011932 <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 801192c:	4b59      	ldr	r3, [pc, #356]	; (8011a94 <Send+0x1b4>)
 801192e:	2200      	movs	r2, #0
 8011930:	631a      	str	r2, [r3, #48]	; 0x30
    }

    fCtrl.Value = 0;
 8011932:	2300      	movs	r3, #0
 8011934:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 8011938:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801193c:	f36f 0303 	bfc	r3, #0, #4
 8011940:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 8011944:	4b53      	ldr	r3, [pc, #332]	; (8011a94 <Send+0x1b4>)
 8011946:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 801194a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801194e:	f362 13c7 	bfi	r3, r2, #7, #1
 8011952:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8011956:	4b4f      	ldr	r3, [pc, #316]	; (8011a94 <Send+0x1b4>)
 8011958:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 801195c:	2b01      	cmp	r3, #1
 801195e:	d106      	bne.n	801196e <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 8011960:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8011964:	f043 0310 	orr.w	r3, r3, #16
 8011968:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 801196c:	e005      	b.n	801197a <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 801196e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8011972:	f36f 1304 	bfc	r3, #4, #1
 8011976:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 801197a:	4b46      	ldr	r3, [pc, #280]	; (8011a94 <Send+0x1b4>)
 801197c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8011980:	2b00      	cmp	r3, #0
 8011982:	d005      	beq.n	8011990 <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 8011984:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8011988:	f043 0320 	orr.w	r3, r3, #32
 801198c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // ADR next request
    adrNext.UpdateChanMask = true;
 8011990:	2301      	movs	r3, #1
 8011992:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 8011994:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8011998:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 801199c:	b2db      	uxtb	r3, r3
 801199e:	2b00      	cmp	r3, #0
 80119a0:	bf14      	ite	ne
 80119a2:	2301      	movne	r3, #1
 80119a4:	2300      	moveq	r3, #0
 80119a6:	b2db      	uxtb	r3, r3
 80119a8:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80119aa:	4b3a      	ldr	r3, [pc, #232]	; (8011a94 <Send+0x1b4>)
 80119ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80119ae:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 80119b0:	4b38      	ldr	r3, [pc, #224]	; (8011a94 <Send+0x1b4>)
 80119b2:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80119b6:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 80119b8:	4b36      	ldr	r3, [pc, #216]	; (8011a94 <Send+0x1b4>)
 80119ba:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 80119be:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80119c0:	4b34      	ldr	r3, [pc, #208]	; (8011a94 <Send+0x1b4>)
 80119c2:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80119c6:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80119ca:	4b32      	ldr	r3, [pc, #200]	; (8011a94 <Send+0x1b4>)
 80119cc:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 80119d0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80119d4:	4b2f      	ldr	r3, [pc, #188]	; (8011a94 <Send+0x1b4>)
 80119d6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80119da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 80119de:	4b2d      	ldr	r3, [pc, #180]	; (8011a94 <Send+0x1b4>)
 80119e0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80119e4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
                                               &Nvm.MacGroup1.ChannelsTxPower, &adrAckCounter );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 80119e8:	4b2a      	ldr	r3, [pc, #168]	; (8011a94 <Send+0x1b4>)
 80119ea:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80119ee:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 80119f2:	f107 0014 	add.w	r0, r7, #20
 80119f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80119fa:	9300      	str	r3, [sp, #0]
 80119fc:	4b26      	ldr	r3, [pc, #152]	; (8011a98 <Send+0x1b8>)
 80119fe:	4a27      	ldr	r2, [pc, #156]	; (8011a9c <Send+0x1bc>)
 8011a00:	4927      	ldr	r1, [pc, #156]	; (8011aa0 <Send+0x1c0>)
 8011a02:	f002 fcbf 	bl	8014384 <LoRaMacAdrCalcNext>
 8011a06:	4603      	mov	r3, r0
 8011a08:	461a      	mov	r2, r3
 8011a0a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8011a0e:	f362 1386 	bfi	r3, r2, #6, #1
 8011a12:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower,
                                               &Nvm.MacGroup2.MacParams.ChannelsNbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 8011a16:	7afa      	ldrb	r2, [r7, #11]
 8011a18:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8011a1c:	893b      	ldrh	r3, [r7, #8]
 8011a1e:	9300      	str	r3, [sp, #0]
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	68f8      	ldr	r0, [r7, #12]
 8011a24:	f000 fc72 	bl	801230c <PrepareFrame>
 8011a28:	4603      	mov	r3, r0
 8011a2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 8011a2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d003      	beq.n	8011a3e <Send+0x15e>
 8011a36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011a3a:	2b0a      	cmp	r3, #10
 8011a3c:	d107      	bne.n	8011a4e <Send+0x16e>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx );
 8011a3e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8011a42:	4618      	mov	r0, r3
 8011a44:	f000 f962 	bl	8011d0c <ScheduleTx>
 8011a48:	4603      	mov	r3, r0
 8011a4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 8011a4e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d00a      	beq.n	8011a6c <Send+0x18c>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 8011a56:	4a0f      	ldr	r2, [pc, #60]	; (8011a94 <Send+0x1b4>)
 8011a58:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8011a5c:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 8011a60:	4a0c      	ldr	r2, [pc, #48]	; (8011a94 <Send+0x1b4>)
 8011a62:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011a66:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
 8011a6a:	e00d      	b.n	8011a88 <Send+0x1a8>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 8011a6c:	4b09      	ldr	r3, [pc, #36]	; (8011a94 <Send+0x1b4>)
 8011a6e:	2200      	movs	r2, #0
 8011a70:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 8011a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a76:	4a07      	ldr	r2, [pc, #28]	; (8011a94 <Send+0x1b4>)
 8011a78:	6293      	str	r3, [r2, #40]	; 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 8011a7a:	f003 f80b 	bl	8014a94 <LoRaMacCommandsRemoveNoneStickyCmds>
 8011a7e:	4603      	mov	r3, r0
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d001      	beq.n	8011a88 <Send+0x1a8>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011a84:	2313      	movs	r3, #19
 8011a86:	e001      	b.n	8011a8c <Send+0x1ac>
        }
    }
    return status;
 8011a88:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8011a8c:	4618      	mov	r0, r3
 8011a8e:	3730      	adds	r7, #48	; 0x30
 8011a90:	46bd      	mov	sp, r7
 8011a92:	bd80      	pop	{r7, pc}
 8011a94:	20000bfc 	.word	0x20000bfc
 8011a98:	20000c64 	.word	0x20000c64
 8011a9c:	20000c34 	.word	0x20000c34
 8011aa0:	20000c35 	.word	0x20000c35

08011aa4 <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 8011aa4:	b580      	push	{r7, lr}
 8011aa6:	b084      	sub	sp, #16
 8011aa8:	af00      	add	r7, sp, #0
 8011aaa:	4603      	mov	r3, r0
 8011aac:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8011aae:	2300      	movs	r3, #0
 8011ab0:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 8011ab2:	2300      	movs	r3, #0
 8011ab4:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 8011ab6:	2301      	movs	r3, #1
 8011ab8:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 8011aba:	79fb      	ldrb	r3, [r7, #7]
 8011abc:	2bff      	cmp	r3, #255	; 0xff
 8011abe:	d11f      	bne.n	8011b00 <SendReJoinReq+0x5c>
            break;
        }
#endif /* LORAMAC_VERSION */
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 8011ac0:	2000      	movs	r0, #0
 8011ac2:	f7ff f8f9 	bl	8010cb8 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 8011ac6:	4b15      	ldr	r3, [pc, #84]	; (8011b1c <SendReJoinReq+0x78>)
 8011ac8:	2200      	movs	r2, #0
 8011aca:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 8011ace:	4b13      	ldr	r3, [pc, #76]	; (8011b1c <SendReJoinReq+0x78>)
 8011ad0:	4a13      	ldr	r2, [pc, #76]	; (8011b20 <SendReJoinReq+0x7c>)
 8011ad2:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8011ad6:	4b11      	ldr	r3, [pc, #68]	; (8011b1c <SendReJoinReq+0x78>)
 8011ad8:	22ff      	movs	r2, #255	; 0xff
 8011ada:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 8011ade:	7b3b      	ldrb	r3, [r7, #12]
 8011ae0:	f36f 1347 	bfc	r3, #5, #3
 8011ae4:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 8011ae6:	7b3a      	ldrb	r2, [r7, #12]
 8011ae8:	4b0c      	ldr	r3, [pc, #48]	; (8011b1c <SendReJoinReq+0x78>)
 8011aea:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d

            SecureElementGetJoinEui( MacCtx.TxMsg.Message.JoinReq.JoinEUI );
 8011aee:	480d      	ldr	r0, [pc, #52]	; (8011b24 <SendReJoinReq+0x80>)
 8011af0:	f7fb ff38 	bl	800d964 <SecureElementGetJoinEui>
            SecureElementGetDevEui( MacCtx.TxMsg.Message.JoinReq.DevEUI );
 8011af4:	480c      	ldr	r0, [pc, #48]	; (8011b28 <SendReJoinReq+0x84>)
 8011af6:	f7fb ff05 	bl	800d904 <SecureElementGetDevEui>

            allowDelayedTx = false;
 8011afa:	2300      	movs	r3, #0
 8011afc:	73fb      	strb	r3, [r7, #15]

            break;
 8011afe:	e002      	b.n	8011b06 <SendReJoinReq+0x62>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011b00:	2302      	movs	r3, #2
 8011b02:	73bb      	strb	r3, [r7, #14]
            break;
 8011b04:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 8011b06:	7bfb      	ldrb	r3, [r7, #15]
 8011b08:	4618      	mov	r0, r3
 8011b0a:	f000 f8ff 	bl	8011d0c <ScheduleTx>
 8011b0e:	4603      	mov	r3, r0
 8011b10:	73bb      	strb	r3, [r7, #14]
    return status;
 8011b12:	7bbb      	ldrb	r3, [r7, #14]
}
 8011b14:	4618      	mov	r0, r3
 8011b16:	3710      	adds	r7, #16
 8011b18:	46bd      	mov	sp, r7
 8011b1a:	bd80      	pop	{r7, pc}
 8011b1c:	200006e0 	.word	0x200006e0
 8011b20:	200006e2 	.word	0x200006e2
 8011b24:	200007ee 	.word	0x200007ee
 8011b28:	200007f6 	.word	0x200007f6

08011b2c <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 8011b2c:	b580      	push	{r7, lr}
 8011b2e:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8011b30:	f002 fd38 	bl	80145a4 <LoRaMacClassBIsBeaconExpected>
 8011b34:	4603      	mov	r3, r0
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	d001      	beq.n	8011b3e <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8011b3a:	230e      	movs	r3, #14
 8011b3c:	e013      	b.n	8011b66 <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8011b3e:	4b0b      	ldr	r3, [pc, #44]	; (8011b6c <CheckForClassBCollision+0x40>)
 8011b40:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8011b44:	2b01      	cmp	r3, #1
 8011b46:	d10d      	bne.n	8011b64 <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8011b48:	f002 fd33 	bl	80145b2 <LoRaMacClassBIsPingExpected>
 8011b4c:	4603      	mov	r3, r0
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	d001      	beq.n	8011b56 <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8011b52:	230f      	movs	r3, #15
 8011b54:	e007      	b.n	8011b66 <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8011b56:	f002 fd33 	bl	80145c0 <LoRaMacClassBIsMulticastExpected>
 8011b5a:	4603      	mov	r3, r0
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d001      	beq.n	8011b64 <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8011b60:	230f      	movs	r3, #15
 8011b62:	e000      	b.n	8011b66 <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 8011b64:	2300      	movs	r3, #0
}
 8011b66:	4618      	mov	r0, r3
 8011b68:	bd80      	pop	{r7, pc}
 8011b6a:	bf00      	nop
 8011b6c:	20000bfc 	.word	0x20000bfc

08011b70 <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 8011b70:	b590      	push	{r4, r7, lr}
 8011b72:	b083      	sub	sp, #12
 8011b74:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8011b76:	4b2d      	ldr	r3, [pc, #180]	; (8011c2c <ComputeRxWindowParameters+0xbc>)
 8011b78:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8011b7c:	4b2b      	ldr	r3, [pc, #172]	; (8011c2c <ComputeRxWindowParameters+0xbc>)
 8011b7e:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8011b82:	4b2a      	ldr	r3, [pc, #168]	; (8011c2c <ComputeRxWindowParameters+0xbc>)
 8011b84:	f893 107d 	ldrb.w	r1, [r3, #125]	; 0x7d
 8011b88:	4b28      	ldr	r3, [pc, #160]	; (8011c2c <ComputeRxWindowParameters+0xbc>)
 8011b8a:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 8011b8e:	4b27      	ldr	r3, [pc, #156]	; (8011c2c <ComputeRxWindowParameters+0xbc>)
 8011b90:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8011b94:	b25b      	sxtb	r3, r3
 8011b96:	f004 fe68 	bl	801686a <RegionApplyDrOffset>
 8011b9a:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8011b9c:	b259      	sxtb	r1, r3
 8011b9e:	4b23      	ldr	r3, [pc, #140]	; (8011c2c <ComputeRxWindowParameters+0xbc>)
 8011ba0:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8011ba4:	4b21      	ldr	r3, [pc, #132]	; (8011c2c <ComputeRxWindowParameters+0xbc>)
 8011ba6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011ba8:	4821      	ldr	r0, [pc, #132]	; (8011c30 <ComputeRxWindowParameters+0xc0>)
 8011baa:	9000      	str	r0, [sp, #0]
 8011bac:	4620      	mov	r0, r4
 8011bae:	f004 fd1e 	bl	80165ee <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8011bb2:	4b1e      	ldr	r3, [pc, #120]	; (8011c2c <ComputeRxWindowParameters+0xbc>)
 8011bb4:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 8011bb8:	4b1c      	ldr	r3, [pc, #112]	; (8011c2c <ComputeRxWindowParameters+0xbc>)
 8011bba:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8011bbe:	b259      	sxtb	r1, r3
 8011bc0:	4b1a      	ldr	r3, [pc, #104]	; (8011c2c <ComputeRxWindowParameters+0xbc>)
 8011bc2:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8011bc6:	4b19      	ldr	r3, [pc, #100]	; (8011c2c <ComputeRxWindowParameters+0xbc>)
 8011bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011bca:	4c1a      	ldr	r4, [pc, #104]	; (8011c34 <ComputeRxWindowParameters+0xc4>)
 8011bcc:	9400      	str	r4, [sp, #0]
 8011bce:	f004 fd0e 	bl	80165ee <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8011bd2:	4b16      	ldr	r3, [pc, #88]	; (8011c2c <ComputeRxWindowParameters+0xbc>)
 8011bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011bd6:	4a18      	ldr	r2, [pc, #96]	; (8011c38 <ComputeRxWindowParameters+0xc8>)
 8011bd8:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 8011bdc:	4413      	add	r3, r2
 8011bde:	4a16      	ldr	r2, [pc, #88]	; (8011c38 <ComputeRxWindowParameters+0xc8>)
 8011be0:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8011be4:	4b11      	ldr	r3, [pc, #68]	; (8011c2c <ComputeRxWindowParameters+0xbc>)
 8011be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011be8:	4a13      	ldr	r2, [pc, #76]	; (8011c38 <ComputeRxWindowParameters+0xc8>)
 8011bea:	f8d2 23dc 	ldr.w	r2, [r2, #988]	; 0x3dc
 8011bee:	4413      	add	r3, r2
 8011bf0:	4a11      	ldr	r2, [pc, #68]	; (8011c38 <ComputeRxWindowParameters+0xc8>)
 8011bf2:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4

    if( MacCtx.TxMsg.Type != LORAMAC_MSG_TYPE_DATA )
 8011bf6:	4b10      	ldr	r3, [pc, #64]	; (8011c38 <ComputeRxWindowParameters+0xc8>)
 8011bf8:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8011bfc:	2b04      	cmp	r3, #4
 8011bfe:	d011      	beq.n	8011c24 <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8011c00:	4b0a      	ldr	r3, [pc, #40]	; (8011c2c <ComputeRxWindowParameters+0xbc>)
 8011c02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011c04:	4a0c      	ldr	r2, [pc, #48]	; (8011c38 <ComputeRxWindowParameters+0xc8>)
 8011c06:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 8011c0a:	4413      	add	r3, r2
 8011c0c:	4a0a      	ldr	r2, [pc, #40]	; (8011c38 <ComputeRxWindowParameters+0xc8>)
 8011c0e:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8011c12:	4b06      	ldr	r3, [pc, #24]	; (8011c2c <ComputeRxWindowParameters+0xbc>)
 8011c14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011c16:	4a08      	ldr	r2, [pc, #32]	; (8011c38 <ComputeRxWindowParameters+0xc8>)
 8011c18:	f8d2 23dc 	ldr.w	r2, [r2, #988]	; 0x3dc
 8011c1c:	4413      	add	r3, r2
 8011c1e:	4a06      	ldr	r2, [pc, #24]	; (8011c38 <ComputeRxWindowParameters+0xc8>)
 8011c20:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4
    }
}
 8011c24:	bf00      	nop
 8011c26:	3704      	adds	r7, #4
 8011c28:	46bd      	mov	sp, r7
 8011c2a:	bd90      	pop	{r4, r7, pc}
 8011c2c:	20000bfc 	.word	0x20000bfc
 8011c30:	20000a98 	.word	0x20000a98
 8011c34:	20000ab0 	.word	0x20000ab0
 8011c38:	200006e0 	.word	0x200006e0

08011c3c <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 8011c3c:	b580      	push	{r7, lr}
 8011c3e:	b082      	sub	sp, #8
 8011c40:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 8011c42:	2300      	movs	r3, #0
 8011c44:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8011c46:	4b13      	ldr	r3, [pc, #76]	; (8011c94 <VerifyTxFrame+0x58>)
 8011c48:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	d01b      	beq.n	8011c88 <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8011c50:	1d3b      	adds	r3, r7, #4
 8011c52:	4618      	mov	r0, r3
 8011c54:	f002 ff6e 	bl	8014b34 <LoRaMacCommandsGetSizeSerializedCmds>
 8011c58:	4603      	mov	r3, r0
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d001      	beq.n	8011c62 <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011c5e:	2313      	movs	r3, #19
 8011c60:	e013      	b.n	8011c8a <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 8011c62:	4b0d      	ldr	r3, [pc, #52]	; (8011c98 <VerifyTxFrame+0x5c>)
 8011c64:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8011c68:	4a0a      	ldr	r2, [pc, #40]	; (8011c94 <VerifyTxFrame+0x58>)
 8011c6a:	f992 1039 	ldrsb.w	r1, [r2, #57]	; 0x39
 8011c6e:	687a      	ldr	r2, [r7, #4]
 8011c70:	b2d2      	uxtb	r2, r2
 8011c72:	4618      	mov	r0, r3
 8011c74:	f7ff f932 	bl	8010edc <ValidatePayloadLength>
 8011c78:	4603      	mov	r3, r0
 8011c7a:	f083 0301 	eor.w	r3, r3, #1
 8011c7e:	b2db      	uxtb	r3, r3
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d001      	beq.n	8011c88 <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 8011c84:	2308      	movs	r3, #8
 8011c86:	e000      	b.n	8011c8a <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 8011c88:	2300      	movs	r3, #0
}
 8011c8a:	4618      	mov	r0, r3
 8011c8c:	3708      	adds	r7, #8
 8011c8e:	46bd      	mov	sp, r7
 8011c90:	bd80      	pop	{r7, pc}
 8011c92:	bf00      	nop
 8011c94:	20000bfc 	.word	0x20000bfc
 8011c98:	200006e0 	.word	0x200006e0

08011c9c <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 8011c9c:	b580      	push	{r7, lr}
 8011c9e:	b082      	sub	sp, #8
 8011ca0:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 8011ca2:	4b18      	ldr	r3, [pc, #96]	; (8011d04 <SerializeTxFrame+0x68>)
 8011ca4:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	d002      	beq.n	8011cb2 <SerializeTxFrame+0x16>
 8011cac:	2b04      	cmp	r3, #4
 8011cae:	d011      	beq.n	8011cd4 <SerializeTxFrame+0x38>
 8011cb0:	e021      	b.n	8011cf6 <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8011cb2:	4815      	ldr	r0, [pc, #84]	; (8011d08 <SerializeTxFrame+0x6c>)
 8011cb4:	f004 fa6c 	bl	8016190 <LoRaMacSerializerJoinRequest>
 8011cb8:	4603      	mov	r3, r0
 8011cba:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8011cbc:	79fb      	ldrb	r3, [r7, #7]
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	d001      	beq.n	8011cc6 <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8011cc2:	2311      	movs	r3, #17
 8011cc4:	e01a      	b.n	8011cfc <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8011cc6:	4b0f      	ldr	r3, [pc, #60]	; (8011d04 <SerializeTxFrame+0x68>)
 8011cc8:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8011ccc:	b29a      	uxth	r2, r3
 8011cce:	4b0d      	ldr	r3, [pc, #52]	; (8011d04 <SerializeTxFrame+0x68>)
 8011cd0:	801a      	strh	r2, [r3, #0]
            break;
 8011cd2:	e012      	b.n	8011cfa <SerializeTxFrame+0x5e>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 8011cd4:	480c      	ldr	r0, [pc, #48]	; (8011d08 <SerializeTxFrame+0x6c>)
 8011cd6:	f004 fadd 	bl	8016294 <LoRaMacSerializerData>
 8011cda:	4603      	mov	r3, r0
 8011cdc:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8011cde:	79fb      	ldrb	r3, [r7, #7]
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	d001      	beq.n	8011ce8 <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8011ce4:	2311      	movs	r3, #17
 8011ce6:	e009      	b.n	8011cfc <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8011ce8:	4b06      	ldr	r3, [pc, #24]	; (8011d04 <SerializeTxFrame+0x68>)
 8011cea:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8011cee:	b29a      	uxth	r2, r3
 8011cf0:	4b04      	ldr	r3, [pc, #16]	; (8011d04 <SerializeTxFrame+0x68>)
 8011cf2:	801a      	strh	r2, [r3, #0]
            break;
 8011cf4:	e001      	b.n	8011cfa <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8011cf6:	2303      	movs	r3, #3
 8011cf8:	e000      	b.n	8011cfc <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 8011cfa:	2300      	movs	r3, #0
}
 8011cfc:	4618      	mov	r0, r3
 8011cfe:	3708      	adds	r7, #8
 8011d00:	46bd      	mov	sp, r7
 8011d02:	bd80      	pop	{r7, pc}
 8011d04:	200006e0 	.word	0x200006e0
 8011d08:	200007e8 	.word	0x200007e8

08011d0c <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 8011d0c:	b580      	push	{r7, lr}
 8011d0e:	b090      	sub	sp, #64	; 0x40
 8011d10:	af02      	add	r7, sp, #8
 8011d12:	4603      	mov	r3, r0
 8011d14:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011d16:	2303      	movs	r3, #3
 8011d18:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 8011d1c:	f7ff ff06 	bl	8011b2c <CheckForClassBCollision>
 8011d20:	4603      	mov	r3, r0
 8011d22:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8011d26:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	d002      	beq.n	8011d34 <ScheduleTx+0x28>
    {
        return status;
 8011d2e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011d32:	e092      	b.n	8011e5a <ScheduleTx+0x14e>
    }

    // Update back-off
    CalculateBackOff( );
 8011d34:	f000 f8f8 	bl	8011f28 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 8011d38:	f7ff ffb0 	bl	8011c9c <SerializeTxFrame>
 8011d3c:	4603      	mov	r3, r0
 8011d3e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8011d42:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	d002      	beq.n	8011d50 <ScheduleTx+0x44>
    {
        return status;
 8011d4a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011d4e:	e084      	b.n	8011e5a <ScheduleTx+0x14e>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 8011d50:	4b44      	ldr	r3, [pc, #272]	; (8011e64 <ScheduleTx+0x158>)
 8011d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011d54:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8011d56:	4b43      	ldr	r3, [pc, #268]	; (8011e64 <ScheduleTx+0x158>)
 8011d58:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8011d5c:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 8011d5e:	4b41      	ldr	r3, [pc, #260]	; (8011e64 <ScheduleTx+0x158>)
 8011d60:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8011d64:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8011d66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011d6a:	4618      	mov	r0, r3
 8011d6c:	f00b fe0a 	bl	801d984 <SysTimeGetMcuTime>
 8011d70:	4638      	mov	r0, r7
 8011d72:	4b3c      	ldr	r3, [pc, #240]	; (8011e64 <ScheduleTx+0x158>)
 8011d74:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
 8011d78:	9200      	str	r2, [sp, #0]
 8011d7a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8011d7e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8011d82:	ca06      	ldmia	r2, {r1, r2}
 8011d84:	f00b fd5f 	bl	801d846 <SysTimeSub>
 8011d88:	f107 0320 	add.w	r3, r7, #32
 8011d8c:	463a      	mov	r2, r7
 8011d8e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011d92:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 8011d96:	4b33      	ldr	r3, [pc, #204]	; (8011e64 <ScheduleTx+0x158>)
 8011d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d9a:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 8011d9c:	2300      	movs	r3, #0
 8011d9e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    nextChan.Joined = true;
 8011da2:	2301      	movs	r3, #1
 8011da4:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 8011da6:	4b30      	ldr	r3, [pc, #192]	; (8011e68 <ScheduleTx+0x15c>)
 8011da8:	881b      	ldrh	r3, [r3, #0]
 8011daa:	857b      	strh	r3, [r7, #42]	; 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8011dac:	4b2d      	ldr	r3, [pc, #180]	; (8011e64 <ScheduleTx+0x158>)
 8011dae:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	d104      	bne.n	8011dc0 <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 8011db6:	2301      	movs	r3, #1
 8011db8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        nextChan.Joined = false;
 8011dbc:	2300      	movs	r3, #0
 8011dbe:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 8011dc0:	4b28      	ldr	r3, [pc, #160]	; (8011e64 <ScheduleTx+0x158>)
 8011dc2:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8011dc6:	f107 0114 	add.w	r1, r7, #20
 8011dca:	4b28      	ldr	r3, [pc, #160]	; (8011e6c <ScheduleTx+0x160>)
 8011dcc:	9300      	str	r3, [sp, #0]
 8011dce:	4b28      	ldr	r3, [pc, #160]	; (8011e70 <ScheduleTx+0x164>)
 8011dd0:	4a28      	ldr	r2, [pc, #160]	; (8011e74 <ScheduleTx+0x168>)
 8011dd2:	f004 fd27 	bl	8016824 <RegionNextChannel>
 8011dd6:	4603      	mov	r3, r0
 8011dd8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( status != LORAMAC_STATUS_OK )
 8011ddc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	d025      	beq.n	8011e30 <ScheduleTx+0x124>
    {
        if( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED )
 8011de4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011de8:	2b0b      	cmp	r3, #11
 8011dea:	d11e      	bne.n	8011e2a <ScheduleTx+0x11e>
        {
            if( MacCtx.DutyCycleWaitTime != 0 )
 8011dec:	4b1e      	ldr	r3, [pc, #120]	; (8011e68 <ScheduleTx+0x15c>)
 8011dee:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	d01c      	beq.n	8011e30 <ScheduleTx+0x124>
            {
                if( allowDelayedTx == true )
 8011df6:	7bfb      	ldrb	r3, [r7, #15]
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	d013      	beq.n	8011e24 <ScheduleTx+0x118>
                {
                    // Allow delayed transmissions. We have to allow it in case
                    // the MAC must retransmit a frame with the frame repetitions
                    MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8011dfc:	4b1a      	ldr	r3, [pc, #104]	; (8011e68 <ScheduleTx+0x15c>)
 8011dfe:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011e02:	f043 0320 	orr.w	r3, r3, #32
 8011e06:	4a18      	ldr	r2, [pc, #96]	; (8011e68 <ScheduleTx+0x15c>)
 8011e08:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                    TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8011e0c:	4b16      	ldr	r3, [pc, #88]	; (8011e68 <ScheduleTx+0x15c>)
 8011e0e:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8011e12:	4619      	mov	r1, r3
 8011e14:	4818      	ldr	r0, [pc, #96]	; (8011e78 <ScheduleTx+0x16c>)
 8011e16:	f00c fb55 	bl	801e4c4 <UTIL_TIMER_SetPeriod>
                    TimerStart( &MacCtx.TxDelayedTimer );
 8011e1a:	4817      	ldr	r0, [pc, #92]	; (8011e78 <ScheduleTx+0x16c>)
 8011e1c:	f00c fa74 	bl	801e308 <UTIL_TIMER_Start>
                    return LORAMAC_STATUS_OK;
 8011e20:	2300      	movs	r3, #0
 8011e22:	e01a      	b.n	8011e5a <ScheduleTx+0x14e>
                }
                // Need to delay, but allowDelayedTx does not allow it
                return status;
 8011e24:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011e28:	e017      	b.n	8011e5a <ScheduleTx+0x14e>
            }
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 8011e2a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011e2e:	e014      	b.n	8011e5a <ScheduleTx+0x14e>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 8011e30:	f7ff fe9e 	bl	8011b70 <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 8011e34:	f7ff ff02 	bl	8011c3c <VerifyTxFrame>
 8011e38:	4603      	mov	r3, r0
 8011e3a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8011e3e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	d002      	beq.n	8011e4c <ScheduleTx+0x140>
    {
        return status;
 8011e46:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011e4a:	e006      	b.n	8011e5a <ScheduleTx+0x14e>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 8011e4c:	4b06      	ldr	r3, [pc, #24]	; (8011e68 <ScheduleTx+0x15c>)
 8011e4e:	f893 341b 	ldrb.w	r3, [r3, #1051]	; 0x41b
 8011e52:	4618      	mov	r0, r3
 8011e54:	f000 fb76 	bl	8012544 <SendFrameOnChannel>
 8011e58:	4603      	mov	r3, r0
}
 8011e5a:	4618      	mov	r0, r3
 8011e5c:	3738      	adds	r7, #56	; 0x38
 8011e5e:	46bd      	mov	sp, r7
 8011e60:	bd80      	pop	{r7, pc}
 8011e62:	bf00      	nop
 8011e64:	20000bfc 	.word	0x20000bfc
 8011e68:	200006e0 	.word	0x200006e0
 8011e6c:	20000c2c 	.word	0x20000c2c
 8011e70:	20000b74 	.word	0x20000b74
 8011e74:	20000afb 	.word	0x20000afb
 8011e78:	20000a48 	.word	0x20000a48

08011e7c <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 8011e7c:	b580      	push	{r7, lr}
 8011e7e:	b084      	sub	sp, #16
 8011e80:	af00      	add	r7, sp, #0
 8011e82:	4603      	mov	r3, r0
 8011e84:	460a      	mov	r2, r1
 8011e86:	71fb      	strb	r3, [r7, #7]
 8011e88:	4613      	mov	r3, r2
 8011e8a:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 8011e8c:	2312      	movs	r3, #18
 8011e8e:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 8011e90:	2300      	movs	r3, #0
 8011e92:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 8011e94:	4b22      	ldr	r3, [pc, #136]	; (8011f20 <SecureFrame+0xa4>)
 8011e96:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d002      	beq.n	8011ea4 <SecureFrame+0x28>
 8011e9e:	2b04      	cmp	r3, #4
 8011ea0:	d011      	beq.n	8011ec6 <SecureFrame+0x4a>
 8011ea2:	e036      	b.n	8011f12 <SecureFrame+0x96>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8011ea4:	481f      	ldr	r0, [pc, #124]	; (8011f24 <SecureFrame+0xa8>)
 8011ea6:	f003 fd3f 	bl	8015928 <LoRaMacCryptoPrepareJoinRequest>
 8011eaa:	4603      	mov	r3, r0
 8011eac:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8011eae:	7bfb      	ldrb	r3, [r7, #15]
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	d001      	beq.n	8011eb8 <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8011eb4:	2311      	movs	r3, #17
 8011eb6:	e02f      	b.n	8011f18 <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8011eb8:	4b19      	ldr	r3, [pc, #100]	; (8011f20 <SecureFrame+0xa4>)
 8011eba:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8011ebe:	b29a      	uxth	r2, r3
 8011ec0:	4b17      	ldr	r3, [pc, #92]	; (8011f20 <SecureFrame+0xa4>)
 8011ec2:	801a      	strh	r2, [r3, #0]
            break;
 8011ec4:	e027      	b.n	8011f16 <SecureFrame+0x9a>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8011ec6:	f107 0308 	add.w	r3, r7, #8
 8011eca:	4618      	mov	r0, r3
 8011ecc:	f003 fc66 	bl	801579c <LoRaMacCryptoGetFCntUp>
 8011ed0:	4603      	mov	r3, r0
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d001      	beq.n	8011eda <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8011ed6:	2312      	movs	r3, #18
 8011ed8:	e01e      	b.n	8011f18 <SecureFrame+0x9c>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( MacCtx.ChannelsNbTransCounter >= 1 )
 8011eda:	4b11      	ldr	r3, [pc, #68]	; (8011f20 <SecureFrame+0xa4>)
 8011edc:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	d002      	beq.n	8011eea <SecureFrame+0x6e>
#endif /* LORAMAC_VERSION */
            {
                fCntUp -= 1;
 8011ee4:	68bb      	ldr	r3, [r7, #8]
 8011ee6:	3b01      	subs	r3, #1
 8011ee8:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 8011eea:	68b8      	ldr	r0, [r7, #8]
 8011eec:	79ba      	ldrb	r2, [r7, #6]
 8011eee:	79f9      	ldrb	r1, [r7, #7]
 8011ef0:	4b0c      	ldr	r3, [pc, #48]	; (8011f24 <SecureFrame+0xa8>)
 8011ef2:	f003 fe41 	bl	8015b78 <LoRaMacCryptoSecureMessage>
 8011ef6:	4603      	mov	r3, r0
 8011ef8:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8011efa:	7bfb      	ldrb	r3, [r7, #15]
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	d001      	beq.n	8011f04 <SecureFrame+0x88>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8011f00:	2311      	movs	r3, #17
 8011f02:	e009      	b.n	8011f18 <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8011f04:	4b06      	ldr	r3, [pc, #24]	; (8011f20 <SecureFrame+0xa4>)
 8011f06:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8011f0a:	b29a      	uxth	r2, r3
 8011f0c:	4b04      	ldr	r3, [pc, #16]	; (8011f20 <SecureFrame+0xa4>)
 8011f0e:	801a      	strh	r2, [r3, #0]
            break;
 8011f10:	e001      	b.n	8011f16 <SecureFrame+0x9a>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8011f12:	2303      	movs	r3, #3
 8011f14:	e000      	b.n	8011f18 <SecureFrame+0x9c>
    }
    return LORAMAC_STATUS_OK;
 8011f16:	2300      	movs	r3, #0
}
 8011f18:	4618      	mov	r0, r3
 8011f1a:	3710      	adds	r7, #16
 8011f1c:	46bd      	mov	sp, r7
 8011f1e:	bd80      	pop	{r7, pc}
 8011f20:	200006e0 	.word	0x200006e0
 8011f24:	200007e8 	.word	0x200007e8

08011f28 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 8011f28:	b480      	push	{r7}
 8011f2a:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8011f2c:	4b09      	ldr	r3, [pc, #36]	; (8011f54 <CalculateBackOff+0x2c>)
 8011f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d10a      	bne.n	8011f4a <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8011f34:	4b07      	ldr	r3, [pc, #28]	; (8011f54 <CalculateBackOff+0x2c>)
 8011f36:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
 8011f3a:	3b01      	subs	r3, #1
 8011f3c:	4a06      	ldr	r2, [pc, #24]	; (8011f58 <CalculateBackOff+0x30>)
 8011f3e:	f8d2 241c 	ldr.w	r2, [r2, #1052]	; 0x41c
 8011f42:	fb02 f303 	mul.w	r3, r2, r3
 8011f46:	4a03      	ldr	r2, [pc, #12]	; (8011f54 <CalculateBackOff+0x2c>)
 8011f48:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 8011f4a:	bf00      	nop
 8011f4c:	46bd      	mov	sp, r7
 8011f4e:	bc80      	pop	{r7}
 8011f50:	4770      	bx	lr
 8011f52:	bf00      	nop
 8011f54:	20000bfc 	.word	0x20000bfc
 8011f58:	200006e0 	.word	0x200006e0

08011f5c <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 8011f5c:	b580      	push	{r7, lr}
 8011f5e:	b082      	sub	sp, #8
 8011f60:	af00      	add	r7, sp, #0
 8011f62:	4603      	mov	r3, r0
 8011f64:	7139      	strb	r1, [r7, #4]
 8011f66:	71fb      	strb	r3, [r7, #7]
 8011f68:	4613      	mov	r3, r2
 8011f6a:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8011f6c:	79fb      	ldrb	r3, [r7, #7]
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d002      	beq.n	8011f78 <RemoveMacCommands+0x1c>
 8011f72:	79fb      	ldrb	r3, [r7, #7]
 8011f74:	2b01      	cmp	r3, #1
 8011f76:	d10d      	bne.n	8011f94 <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 8011f78:	79bb      	ldrb	r3, [r7, #6]
 8011f7a:	2b01      	cmp	r3, #1
 8011f7c:	d108      	bne.n	8011f90 <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 8011f7e:	793b      	ldrb	r3, [r7, #4]
 8011f80:	f003 0320 	and.w	r3, r3, #32
 8011f84:	b2db      	uxtb	r3, r3
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d004      	beq.n	8011f94 <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 8011f8a:	f002 fda7 	bl	8014adc <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 8011f8e:	e001      	b.n	8011f94 <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 8011f90:	f002 fda4 	bl	8014adc <LoRaMacCommandsRemoveStickyAnsCmds>
}
 8011f94:	bf00      	nop
 8011f96:	3708      	adds	r7, #8
 8011f98:	46bd      	mov	sp, r7
 8011f9a:	bd80      	pop	{r7, pc}

08011f9c <ResetMacParameters>:

static void ResetMacParameters( bool isRejoin )
{
 8011f9c:	b5b0      	push	{r4, r5, r7, lr}
 8011f9e:	b092      	sub	sp, #72	; 0x48
 8011fa0:	af00      	add	r7, sp, #0
 8011fa2:	4603      	mov	r3, r0
 8011fa4:	71fb      	strb	r3, [r7, #7]
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    if( isRejoin == false )
 8011fa6:	79fb      	ldrb	r3, [r7, #7]
 8011fa8:	f083 0301 	eor.w	r3, r3, #1
 8011fac:	b2db      	uxtb	r3, r3
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d003      	beq.n	8011fba <ResetMacParameters+0x1e>
    {
        Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 8011fb2:	4b88      	ldr	r3, [pc, #544]	; (80121d4 <ResetMacParameters+0x238>)
 8011fb4:	2200      	movs	r2, #0
 8011fb6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
    }

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 8011fba:	4b86      	ldr	r3, [pc, #536]	; (80121d4 <ResetMacParameters+0x238>)
 8011fbc:	2200      	movs	r2, #0
 8011fbe:	629a      	str	r2, [r3, #40]	; 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 8011fc0:	4b85      	ldr	r3, [pc, #532]	; (80121d8 <ResetMacParameters+0x23c>)
 8011fc2:	2200      	movs	r2, #0
 8011fc4:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetries = 1;
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetry = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
 8011fc8:	4b83      	ldr	r3, [pc, #524]	; (80121d8 <ResetMacParameters+0x23c>)
 8011fca:	2200      	movs	r2, #0
 8011fcc:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
    MacCtx.ResponseTimeoutStartTime = 0;
 8011fd0:	4b81      	ldr	r3, [pc, #516]	; (80121d8 <ResetMacParameters+0x23c>)
 8011fd2:	2200      	movs	r2, #0
 8011fd4:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.MaxDCycle = 0;
 8011fd8:	4b7e      	ldr	r3, [pc, #504]	; (80121d4 <ResetMacParameters+0x238>)
 8011fda:	2200      	movs	r2, #0
 8011fdc:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
    Nvm.MacGroup2.AggregatedDCycle = 1;
 8011fe0:	4b7c      	ldr	r3, [pc, #496]	; (80121d4 <ResetMacParameters+0x238>)
 8011fe2:	2201      	movs	r2, #1
 8011fe4:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8011fe8:	4b7a      	ldr	r3, [pc, #488]	; (80121d4 <ResetMacParameters+0x238>)
 8011fea:	f993 20dc 	ldrsb.w	r2, [r3, #220]	; 0xdc
 8011fee:	4b79      	ldr	r3, [pc, #484]	; (80121d4 <ResetMacParameters+0x238>)
 8011ff0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8011ff4:	4b77      	ldr	r3, [pc, #476]	; (80121d4 <ResetMacParameters+0x238>)
 8011ff6:	f993 20dd 	ldrsb.w	r2, [r3, #221]	; 0xdd
 8011ffa:	4b76      	ldr	r3, [pc, #472]	; (80121d4 <ResetMacParameters+0x238>)
 8011ffc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 8012000:	4b74      	ldr	r3, [pc, #464]	; (80121d4 <ResetMacParameters+0x238>)
 8012002:	f893 20b1 	ldrb.w	r2, [r3, #177]	; 0xb1
 8012006:	4b73      	ldr	r3, [pc, #460]	; (80121d4 <ResetMacParameters+0x238>)
 8012008:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 801200c:	4b71      	ldr	r3, [pc, #452]	; (80121d4 <ResetMacParameters+0x238>)
 801200e:	4a71      	ldr	r2, [pc, #452]	; (80121d4 <ResetMacParameters+0x238>)
 8012010:	336c      	adds	r3, #108	; 0x6c
 8012012:	32b4      	adds	r2, #180	; 0xb4
 8012014:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012018:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 801201c:	4b6d      	ldr	r3, [pc, #436]	; (80121d4 <ResetMacParameters+0x238>)
 801201e:	4a6d      	ldr	r2, [pc, #436]	; (80121d4 <ResetMacParameters+0x238>)
 8012020:	3374      	adds	r3, #116	; 0x74
 8012022:	32bc      	adds	r2, #188	; 0xbc
 8012024:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012028:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 801202c:	4b69      	ldr	r3, [pc, #420]	; (80121d4 <ResetMacParameters+0x238>)
 801202e:	f893 20c4 	ldrb.w	r2, [r3, #196]	; 0xc4
 8012032:	4b68      	ldr	r3, [pc, #416]	; (80121d4 <ResetMacParameters+0x238>)
 8012034:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 8012038:	4b66      	ldr	r3, [pc, #408]	; (80121d4 <ResetMacParameters+0x238>)
 801203a:	f893 20c5 	ldrb.w	r2, [r3, #197]	; 0xc5
 801203e:	4b65      	ldr	r3, [pc, #404]	; (80121d4 <ResetMacParameters+0x238>)
 8012040:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 8012044:	4b63      	ldr	r3, [pc, #396]	; (80121d4 <ResetMacParameters+0x238>)
 8012046:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 801204a:	4a62      	ldr	r2, [pc, #392]	; (80121d4 <ResetMacParameters+0x238>)
 801204c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8012050:	4b60      	ldr	r3, [pc, #384]	; (80121d4 <ResetMacParameters+0x238>)
 8012052:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8012056:	4a5f      	ldr	r2, [pc, #380]	; (80121d4 <ResetMacParameters+0x238>)
 8012058:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    Nvm.MacGroup2.MacParams.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 801205c:	4b5d      	ldr	r3, [pc, #372]	; (80121d4 <ResetMacParameters+0x238>)
 801205e:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	; 0xd0
 8012062:	4b5c      	ldr	r3, [pc, #368]	; (80121d4 <ResetMacParameters+0x238>)
 8012064:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
    Nvm.MacGroup2.MacParams.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 8012068:	4b5a      	ldr	r3, [pc, #360]	; (80121d4 <ResetMacParameters+0x238>)
 801206a:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	; 0xd2
 801206e:	4b59      	ldr	r3, [pc, #356]	; (80121d4 <ResetMacParameters+0x238>)
 8012070:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a

    MacCtx.NodeAckRequested = false;
 8012074:	4b58      	ldr	r3, [pc, #352]	; (80121d8 <ResetMacParameters+0x23c>)
 8012076:	2200      	movs	r2, #0
 8012078:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
    Nvm.MacGroup1.SrvAckRequested = false;
 801207c:	4b55      	ldr	r3, [pc, #340]	; (80121d4 <ResetMacParameters+0x238>)
 801207e:	2200      	movs	r2, #0
 8012080:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 8012084:	4b53      	ldr	r3, [pc, #332]	; (80121d4 <ResetMacParameters+0x238>)
 8012086:	2200      	movs	r2, #0
 8012088:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
    Nvm.MacGroup2.DownlinkReceived = false;
 801208c:	4b51      	ldr	r3, [pc, #324]	; (80121d4 <ResetMacParameters+0x238>)
 801208e:	2200      	movs	r2, #0
 8012090:	f883 211e 	strb.w	r2, [r3, #286]	; 0x11e
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.Rejoin0UplinksLimit = 0;
 8012094:	4b4f      	ldr	r3, [pc, #316]	; (80121d4 <ResetMacParameters+0x238>)
 8012096:	2200      	movs	r2, #0
 8012098:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    Nvm.MacGroup2.ForceRejoinMaxRetries = 0;
 801209c:	4b4d      	ldr	r3, [pc, #308]	; (80121d4 <ResetMacParameters+0x238>)
 801209e:	2200      	movs	r2, #0
 80120a0:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
    Nvm.MacGroup2.ForceRejoinType = 0;
 80120a4:	4b4b      	ldr	r3, [pc, #300]	; (80121d4 <ResetMacParameters+0x238>)
 80120a6:	2200      	movs	r2, #0
 80120a8:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
    Nvm.MacGroup2.Rejoin0CycleInSec = 0;
 80120ac:	4b49      	ldr	r3, [pc, #292]	; (80121d4 <ResetMacParameters+0x238>)
 80120ae:	2200      	movs	r2, #0
 80120b0:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    Nvm.MacGroup2.Rejoin1CycleInSec = 0;
 80120b4:	4b47      	ldr	r3, [pc, #284]	; (80121d4 <ResetMacParameters+0x238>)
 80120b6:	2200      	movs	r2, #0
 80120b8:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    Nvm.MacGroup2.IsRejoin0RequestQueued = 0;
 80120bc:	4b45      	ldr	r3, [pc, #276]	; (80121d4 <ResetMacParameters+0x238>)
 80120be:	2200      	movs	r2, #0
 80120c0:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
    Nvm.MacGroup2.IsRejoin1RequestQueued = 0;
 80120c4:	4b43      	ldr	r3, [pc, #268]	; (80121d4 <ResetMacParameters+0x238>)
 80120c6:	2200      	movs	r2, #0
 80120c8:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
    Nvm.MacGroup2.IsRejoin2RequestQueued = 0;
 80120cc:	4b41      	ldr	r3, [pc, #260]	; (80121d4 <ResetMacParameters+0x238>)
 80120ce:	2200      	movs	r2, #0
 80120d0:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 80120d4:	2301      	movs	r3, #1
 80120d6:	763b      	strb	r3, [r7, #24]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 80120d8:	4b40      	ldr	r3, [pc, #256]	; (80121dc <ResetMacParameters+0x240>)
 80120da:	60fb      	str	r3, [r7, #12]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 80120dc:	4b40      	ldr	r3, [pc, #256]	; (80121e0 <ResetMacParameters+0x244>)
 80120de:	613b      	str	r3, [r7, #16]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    params.Bands = &RegionBands;
 80120e0:	4b40      	ldr	r3, [pc, #256]	; (80121e4 <ResetMacParameters+0x248>)
 80120e2:	617b      	str	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80120e4:	4b3b      	ldr	r3, [pc, #236]	; (80121d4 <ResetMacParameters+0x238>)
 80120e6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80120ea:	f107 020c 	add.w	r2, r7, #12
 80120ee:	4611      	mov	r1, r2
 80120f0:	4618      	mov	r0, r3
 80120f2:	f004 fa12 	bl	801651a <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 80120f6:	4b38      	ldr	r3, [pc, #224]	; (80121d8 <ResetMacParameters+0x23c>)
 80120f8:	2200      	movs	r2, #0
 80120fa:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 80120fe:	4b36      	ldr	r3, [pc, #216]	; (80121d8 <ResetMacParameters+0x23c>)
 8012100:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 8012104:	4b34      	ldr	r3, [pc, #208]	; (80121d8 <ResetMacParameters+0x23c>)
 8012106:	f883 23d0 	strb.w	r2, [r3, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 801210a:	4b32      	ldr	r3, [pc, #200]	; (80121d4 <ResetMacParameters+0x238>)
 801210c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801210e:	4a32      	ldr	r2, [pc, #200]	; (80121d8 <ResetMacParameters+0x23c>)
 8012110:	f8c2 33d4 	str.w	r3, [r2, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8012114:	4b2f      	ldr	r3, [pc, #188]	; (80121d4 <ResetMacParameters+0x238>)
 8012116:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 801211a:	4b2f      	ldr	r3, [pc, #188]	; (80121d8 <ResetMacParameters+0x23c>)
 801211c:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8012120:	4b2c      	ldr	r3, [pc, #176]	; (80121d4 <ResetMacParameters+0x238>)
 8012122:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8012126:	4b2c      	ldr	r3, [pc, #176]	; (80121d8 <ResetMacParameters+0x23c>)
 8012128:	f883 23e1 	strb.w	r2, [r3, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 801212c:	4b2a      	ldr	r3, [pc, #168]	; (80121d8 <ResetMacParameters+0x23c>)
 801212e:	2200      	movs	r2, #0
 8012130:	f883 23e2 	strb.w	r2, [r3, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8012134:	4b28      	ldr	r3, [pc, #160]	; (80121d8 <ResetMacParameters+0x23c>)
 8012136:	2201      	movs	r2, #1
 8012138:	f883 23e3 	strb.w	r2, [r3, #995]	; 0x3e3
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 801213c:	4b25      	ldr	r3, [pc, #148]	; (80121d4 <ResetMacParameters+0x238>)
 801213e:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 8012142:	4b25      	ldr	r3, [pc, #148]	; (80121d8 <ResetMacParameters+0x23c>)
 8012144:	f883 23e4 	strb.w	r2, [r3, #996]	; 0x3e4
#endif /* LORAMAC_VERSION */

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8012148:	4a23      	ldr	r2, [pc, #140]	; (80121d8 <ResetMacParameters+0x23c>)
 801214a:	4b23      	ldr	r3, [pc, #140]	; (80121d8 <ResetMacParameters+0x23c>)
 801214c:	f502 747a 	add.w	r4, r2, #1000	; 0x3e8
 8012150:	f503 7574 	add.w	r5, r3, #976	; 0x3d0
 8012154:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012156:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012158:	e895 0003 	ldmia.w	r5, {r0, r1}
 801215c:	e884 0003 	stmia.w	r4, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8012160:	4b1d      	ldr	r3, [pc, #116]	; (80121d8 <ResetMacParameters+0x23c>)
 8012162:	2201      	movs	r2, #1
 8012164:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8012168:	4b1b      	ldr	r3, [pc, #108]	; (80121d8 <ResetMacParameters+0x23c>)
 801216a:	2202      	movs	r2, #2
 801216c:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 8012170:	2300      	movs	r3, #0
 8012172:	643b      	str	r3, [r7, #64]	; 0x40
    classBCallbacks.MacProcessNotify = NULL;
 8012174:	2300      	movs	r3, #0
 8012176:	647b      	str	r3, [r7, #68]	; 0x44

    if( MacCtx.MacCallbacks != NULL )
 8012178:	4b17      	ldr	r3, [pc, #92]	; (80121d8 <ResetMacParameters+0x23c>)
 801217a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801217e:	2b00      	cmp	r3, #0
 8012180:	d009      	beq.n	8012196 <ResetMacParameters+0x1fa>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 8012182:	4b15      	ldr	r3, [pc, #84]	; (80121d8 <ResetMacParameters+0x23c>)
 8012184:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8012188:	685b      	ldr	r3, [r3, #4]
 801218a:	643b      	str	r3, [r7, #64]	; 0x40
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 801218c:	4b12      	ldr	r3, [pc, #72]	; (80121d8 <ResetMacParameters+0x23c>)
 801218e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8012192:	695b      	ldr	r3, [r3, #20]
 8012194:	647b      	str	r3, [r7, #68]	; 0x44
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 8012196:	4b14      	ldr	r3, [pc, #80]	; (80121e8 <ResetMacParameters+0x24c>)
 8012198:	61fb      	str	r3, [r7, #28]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 801219a:	4b14      	ldr	r3, [pc, #80]	; (80121ec <ResetMacParameters+0x250>)
 801219c:	623b      	str	r3, [r7, #32]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 801219e:	4b14      	ldr	r3, [pc, #80]	; (80121f0 <ResetMacParameters+0x254>)
 80121a0:	627b      	str	r3, [r7, #36]	; 0x24
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 80121a2:	4b14      	ldr	r3, [pc, #80]	; (80121f4 <ResetMacParameters+0x258>)
 80121a4:	62bb      	str	r3, [r7, #40]	; 0x28
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 80121a6:	4b14      	ldr	r3, [pc, #80]	; (80121f8 <ResetMacParameters+0x25c>)
 80121a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 80121aa:	4b14      	ldr	r3, [pc, #80]	; (80121fc <ResetMacParameters+0x260>)
 80121ac:	633b      	str	r3, [r7, #48]	; 0x30
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 80121ae:	4b14      	ldr	r3, [pc, #80]	; (8012200 <ResetMacParameters+0x264>)
 80121b0:	637b      	str	r3, [r7, #52]	; 0x34
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 80121b2:	4b14      	ldr	r3, [pc, #80]	; (8012204 <ResetMacParameters+0x268>)
 80121b4:	63bb      	str	r3, [r7, #56]	; 0x38
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
 80121b6:	4b14      	ldr	r3, [pc, #80]	; (8012208 <ResetMacParameters+0x26c>)
 80121b8:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif /* LORAMAC_VERSION */

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 80121ba:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80121be:	f107 031c 	add.w	r3, r7, #28
 80121c2:	4a12      	ldr	r2, [pc, #72]	; (801220c <ResetMacParameters+0x270>)
 80121c4:	4618      	mov	r0, r3
 80121c6:	f002 f996 	bl	80144f6 <LoRaMacClassBInit>
}
 80121ca:	bf00      	nop
 80121cc:	3748      	adds	r7, #72	; 0x48
 80121ce:	46bd      	mov	sp, r7
 80121d0:	bdb0      	pop	{r4, r5, r7, pc}
 80121d2:	bf00      	nop
 80121d4:	20000bfc 	.word	0x20000bfc
 80121d8:	200006e0 	.word	0x200006e0
 80121dc:	20000e20 	.word	0x20000e20
 80121e0:	20000e34 	.word	0x20000e34
 80121e4:	20001794 	.word	0x20001794
 80121e8:	20000b48 	.word	0x20000b48
 80121ec:	20000b00 	.word	0x20000b00
 80121f0:	20000b34 	.word	0x20000b34
 80121f4:	20000b71 	.word	0x20000b71
 80121f8:	20000ce0 	.word	0x20000ce0
 80121fc:	20000c44 	.word	0x20000c44
 8012200:	20000c48 	.word	0x20000c48
 8012204:	20000ce4 	.word	0x20000ce4
 8012208:	20000d2c 	.word	0x20000d2c
 801220c:	200011b0 	.word	0x200011b0

08012210 <RxWindowSetup>:
 *
 * \param [in] rxTimer  Window timer to be topped.
 * \param [in] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 8012210:	b580      	push	{r7, lr}
 8012212:	b082      	sub	sp, #8
 8012214:	af00      	add	r7, sp, #0
 8012216:	6078      	str	r0, [r7, #4]
 8012218:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 801221a:	6878      	ldr	r0, [r7, #4]
 801221c:	f00c f8e2 	bl	801e3e4 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 8012220:	4b11      	ldr	r3, [pc, #68]	; (8012268 <RxWindowSetup+0x58>)
 8012222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012224:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8012226:	4b11      	ldr	r3, [pc, #68]	; (801226c <RxWindowSetup+0x5c>)
 8012228:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801222c:	4a10      	ldr	r2, [pc, #64]	; (8012270 <RxWindowSetup+0x60>)
 801222e:	6839      	ldr	r1, [r7, #0]
 8012230:	4618      	mov	r0, r3
 8012232:	f004 f9ff 	bl	8016634 <RegionRxConfig>
 8012236:	4603      	mov	r3, r0
 8012238:	2b00      	cmp	r3, #0
 801223a:	d010      	beq.n	801225e <RxWindowSetup+0x4e>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 801223c:	4b0d      	ldr	r3, [pc, #52]	; (8012274 <RxWindowSetup+0x64>)
 801223e:	f893 2424 	ldrb.w	r2, [r3, #1060]	; 0x424
 8012242:	4b0c      	ldr	r3, [pc, #48]	; (8012274 <RxWindowSetup+0x64>)
 8012244:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 8012248:	4b07      	ldr	r3, [pc, #28]	; (8012268 <RxWindowSetup+0x58>)
 801224a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801224c:	4a07      	ldr	r2, [pc, #28]	; (801226c <RxWindowSetup+0x5c>)
 801224e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8012250:	4610      	mov	r0, r2
 8012252:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 8012254:	683b      	ldr	r3, [r7, #0]
 8012256:	7cda      	ldrb	r2, [r3, #19]
 8012258:	4b06      	ldr	r3, [pc, #24]	; (8012274 <RxWindowSetup+0x64>)
 801225a:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
    }
}
 801225e:	bf00      	nop
 8012260:	3708      	adds	r7, #8
 8012262:	46bd      	mov	sp, r7
 8012264:	bd80      	pop	{r7, pc}
 8012266:	bf00      	nop
 8012268:	0801fccc 	.word	0x0801fccc
 801226c:	20000bfc 	.word	0x20000bfc
 8012270:	20000b04 	.word	0x20000b04
 8012274:	200006e0 	.word	0x200006e0

08012278 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 8012278:	b590      	push	{r4, r7, lr}
 801227a:	b083      	sub	sp, #12
 801227c:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 801227e:	4b1e      	ldr	r3, [pc, #120]	; (80122f8 <OpenContinuousRxCWindow+0x80>)
 8012280:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 8012284:	4b1c      	ldr	r3, [pc, #112]	; (80122f8 <OpenContinuousRxCWindow+0x80>)
 8012286:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 801228a:	b259      	sxtb	r1, r3
 801228c:	4b1a      	ldr	r3, [pc, #104]	; (80122f8 <OpenContinuousRxCWindow+0x80>)
 801228e:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8012292:	4b19      	ldr	r3, [pc, #100]	; (80122f8 <OpenContinuousRxCWindow+0x80>)
 8012294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012296:	4c19      	ldr	r4, [pc, #100]	; (80122fc <OpenContinuousRxCWindow+0x84>)
 8012298:	9400      	str	r4, [sp, #0]
 801229a:	f004 f9a8 	bl	80165ee <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 801229e:	4b18      	ldr	r3, [pc, #96]	; (8012300 <OpenContinuousRxCWindow+0x88>)
 80122a0:	2202      	movs	r2, #2
 80122a2:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80122a6:	4b14      	ldr	r3, [pc, #80]	; (80122f8 <OpenContinuousRxCWindow+0x80>)
 80122a8:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 80122ac:	4b14      	ldr	r3, [pc, #80]	; (8012300 <OpenContinuousRxCWindow+0x88>)
 80122ae:	f883 23fc 	strb.w	r2, [r3, #1020]	; 0x3fc
#endif /* LORAMAC_VERSION */
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80122b2:	4b13      	ldr	r3, [pc, #76]	; (8012300 <OpenContinuousRxCWindow+0x88>)
 80122b4:	2201      	movs	r2, #1
 80122b6:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 80122ba:	4b0f      	ldr	r3, [pc, #60]	; (80122f8 <OpenContinuousRxCWindow+0x80>)
 80122bc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80122c0:	4a10      	ldr	r2, [pc, #64]	; (8012304 <OpenContinuousRxCWindow+0x8c>)
 80122c2:	490e      	ldr	r1, [pc, #56]	; (80122fc <OpenContinuousRxCWindow+0x84>)
 80122c4:	4618      	mov	r0, r3
 80122c6:	f004 f9b5 	bl	8016634 <RegionRxConfig>
 80122ca:	4603      	mov	r3, r0
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	d00f      	beq.n	80122f0 <OpenContinuousRxCWindow+0x78>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 80122d0:	4b0b      	ldr	r3, [pc, #44]	; (8012300 <OpenContinuousRxCWindow+0x88>)
 80122d2:	f893 2424 	ldrb.w	r2, [r3, #1060]	; 0x424
 80122d6:	4b0a      	ldr	r3, [pc, #40]	; (8012300 <OpenContinuousRxCWindow+0x88>)
 80122d8:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a
        Radio.Rx( 0 ); // Continuous mode
 80122dc:	4b0a      	ldr	r3, [pc, #40]	; (8012308 <OpenContinuousRxCWindow+0x90>)
 80122de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80122e0:	2000      	movs	r0, #0
 80122e2:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 80122e4:	4b06      	ldr	r3, [pc, #24]	; (8012300 <OpenContinuousRxCWindow+0x88>)
 80122e6:	f893 23fb 	ldrb.w	r2, [r3, #1019]	; 0x3fb
 80122ea:	4b05      	ldr	r3, [pc, #20]	; (8012300 <OpenContinuousRxCWindow+0x88>)
 80122ec:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
    }
}
 80122f0:	bf00      	nop
 80122f2:	3704      	adds	r7, #4
 80122f4:	46bd      	mov	sp, r7
 80122f6:	bd90      	pop	{r4, r7, pc}
 80122f8:	20000bfc 	.word	0x20000bfc
 80122fc:	20000ac8 	.word	0x20000ac8
 8012300:	200006e0 	.word	0x200006e0
 8012304:	20000b04 	.word	0x20000b04
 8012308:	0801fccc 	.word	0x0801fccc

0801230c <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 801230c:	b580      	push	{r7, lr}
 801230e:	b088      	sub	sp, #32
 8012310:	af00      	add	r7, sp, #0
 8012312:	60f8      	str	r0, [r7, #12]
 8012314:	60b9      	str	r1, [r7, #8]
 8012316:	603b      	str	r3, [r7, #0]
 8012318:	4613      	mov	r3, r2
 801231a:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 801231c:	4b82      	ldr	r3, [pc, #520]	; (8012528 <PrepareFrame+0x21c>)
 801231e:	2200      	movs	r2, #0
 8012320:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 8012322:	4b81      	ldr	r3, [pc, #516]	; (8012528 <PrepareFrame+0x21c>)
 8012324:	2200      	movs	r2, #0
 8012326:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
    uint32_t fCntUp = 0;
 801232a:	2300      	movs	r3, #0
 801232c:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 801232e:	2300      	movs	r3, #0
 8012330:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 8012332:	2300      	movs	r3, #0
 8012334:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 8012336:	683b      	ldr	r3, [r7, #0]
 8012338:	2b00      	cmp	r3, #0
 801233a:	d101      	bne.n	8012340 <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 801233c:	2300      	movs	r3, #0
 801233e:	853b      	strh	r3, [r7, #40]	; 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8012340:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8012342:	461a      	mov	r2, r3
 8012344:	6839      	ldr	r1, [r7, #0]
 8012346:	4879      	ldr	r0, [pc, #484]	; (801252c <PrepareFrame+0x220>)
 8012348:	f007 feb1 	bl	801a0ae <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 801234c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801234e:	b2da      	uxtb	r2, r3
 8012350:	4b75      	ldr	r3, [pc, #468]	; (8012528 <PrepareFrame+0x21c>)
 8012352:	f883 2237 	strb.w	r2, [r3, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 8012356:	68fb      	ldr	r3, [r7, #12]
 8012358:	781a      	ldrb	r2, [r3, #0]
 801235a:	4b73      	ldr	r3, [pc, #460]	; (8012528 <PrepareFrame+0x21c>)
 801235c:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 801235e:	68fb      	ldr	r3, [r7, #12]
 8012360:	781b      	ldrb	r3, [r3, #0]
 8012362:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8012366:	b2db      	uxtb	r3, r3
 8012368:	2b07      	cmp	r3, #7
 801236a:	f000 80b9 	beq.w	80124e0 <PrepareFrame+0x1d4>
 801236e:	2b07      	cmp	r3, #7
 8012370:	f300 80d0 	bgt.w	8012514 <PrepareFrame+0x208>
 8012374:	2b02      	cmp	r3, #2
 8012376:	d006      	beq.n	8012386 <PrepareFrame+0x7a>
 8012378:	2b04      	cmp	r3, #4
 801237a:	f040 80cb 	bne.w	8012514 <PrepareFrame+0x208>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 801237e:	4b6a      	ldr	r3, [pc, #424]	; (8012528 <PrepareFrame+0x21c>)
 8012380:	2201      	movs	r2, #1
 8012382:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8012386:	4b68      	ldr	r3, [pc, #416]	; (8012528 <PrepareFrame+0x21c>)
 8012388:	2204      	movs	r2, #4
 801238a:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 801238e:	4b66      	ldr	r3, [pc, #408]	; (8012528 <PrepareFrame+0x21c>)
 8012390:	4a67      	ldr	r2, [pc, #412]	; (8012530 <PrepareFrame+0x224>)
 8012392:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8012396:	4b64      	ldr	r3, [pc, #400]	; (8012528 <PrepareFrame+0x21c>)
 8012398:	22ff      	movs	r2, #255	; 0xff
 801239a:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 801239e:	68fb      	ldr	r3, [r7, #12]
 80123a0:	781a      	ldrb	r2, [r3, #0]
 80123a2:	4b61      	ldr	r3, [pc, #388]	; (8012528 <PrepareFrame+0x21c>)
 80123a4:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 80123a8:	4a5f      	ldr	r2, [pc, #380]	; (8012528 <PrepareFrame+0x21c>)
 80123aa:	79fb      	ldrb	r3, [r7, #7]
 80123ac:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 80123b0:	4b60      	ldr	r3, [pc, #384]	; (8012534 <PrepareFrame+0x228>)
 80123b2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80123b6:	4a5c      	ldr	r2, [pc, #368]	; (8012528 <PrepareFrame+0x21c>)
 80123b8:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 80123bc:	68bb      	ldr	r3, [r7, #8]
 80123be:	781a      	ldrb	r2, [r3, #0]
 80123c0:	4b59      	ldr	r3, [pc, #356]	; (8012528 <PrepareFrame+0x21c>)
 80123c2:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 80123c6:	4b58      	ldr	r3, [pc, #352]	; (8012528 <PrepareFrame+0x21c>)
 80123c8:	f893 2237 	ldrb.w	r2, [r3, #567]	; 0x237
 80123cc:	4b56      	ldr	r3, [pc, #344]	; (8012528 <PrepareFrame+0x21c>)
 80123ce:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 80123d2:	4b55      	ldr	r3, [pc, #340]	; (8012528 <PrepareFrame+0x21c>)
 80123d4:	4a55      	ldr	r2, [pc, #340]	; (801252c <PrepareFrame+0x220>)
 80123d6:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 80123da:	f107 0318 	add.w	r3, r7, #24
 80123de:	4618      	mov	r0, r3
 80123e0:	f003 f9dc 	bl	801579c <LoRaMacCryptoGetFCntUp>
 80123e4:	4603      	mov	r3, r0
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	d001      	beq.n	80123ee <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 80123ea:	2312      	movs	r3, #18
 80123ec:	e098      	b.n	8012520 <PrepareFrame+0x214>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 80123ee:	69bb      	ldr	r3, [r7, #24]
 80123f0:	b29a      	uxth	r2, r3
 80123f2:	4b4d      	ldr	r3, [pc, #308]	; (8012528 <PrepareFrame+0x21c>)
 80123f4:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116

            // Reset confirm parameters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = 0;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = 0;
 80123f8:	4b4b      	ldr	r3, [pc, #300]	; (8012528 <PrepareFrame+0x21c>)
 80123fa:	2200      	movs	r2, #0
 80123fc:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.AckReceived = false;
 8012400:	4b49      	ldr	r3, [pc, #292]	; (8012528 <PrepareFrame+0x21c>)
 8012402:	2200      	movs	r2, #0
 8012404:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8012408:	69bb      	ldr	r3, [r7, #24]
 801240a:	4a47      	ldr	r2, [pc, #284]	; (8012528 <PrepareFrame+0x21c>)
 801240c:	f8c2 344c 	str.w	r3, [r2, #1100]	; 0x44c

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8012410:	f107 0314 	add.w	r3, r7, #20
 8012414:	4618      	mov	r0, r3
 8012416:	f002 fb8d 	bl	8014b34 <LoRaMacCommandsGetSizeSerializedCmds>
 801241a:	4603      	mov	r3, r0
 801241c:	2b00      	cmp	r3, #0
 801241e:	d001      	beq.n	8012424 <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012420:	2313      	movs	r3, #19
 8012422:	e07d      	b.n	8012520 <PrepareFrame+0x214>
            }

            if( macCmdsSize > 0 )
 8012424:	697b      	ldr	r3, [r7, #20]
 8012426:	2b00      	cmp	r3, #0
 8012428:	d076      	beq.n	8012518 <PrepareFrame+0x20c>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 801242a:	4b42      	ldr	r3, [pc, #264]	; (8012534 <PrepareFrame+0x228>)
 801242c:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8012430:	4618      	mov	r0, r3
 8012432:	f7fe fd2b 	bl	8010e8c <GetMaxAppPayloadWithoutFOptsLength>
 8012436:	4603      	mov	r3, r0
 8012438:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 801243a:	4b3b      	ldr	r3, [pc, #236]	; (8012528 <PrepareFrame+0x21c>)
 801243c:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8012440:	2b00      	cmp	r3, #0
 8012442:	d01d      	beq.n	8012480 <PrepareFrame+0x174>
 8012444:	697b      	ldr	r3, [r7, #20]
 8012446:	2b0f      	cmp	r3, #15
 8012448:	d81a      	bhi.n	8012480 <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 801244a:	f107 0314 	add.w	r3, r7, #20
 801244e:	4a3a      	ldr	r2, [pc, #232]	; (8012538 <PrepareFrame+0x22c>)
 8012450:	4619      	mov	r1, r3
 8012452:	200f      	movs	r0, #15
 8012454:	f002 fb84 	bl	8014b60 <LoRaMacCommandsSerializeCmds>
 8012458:	4603      	mov	r3, r0
 801245a:	2b00      	cmp	r3, #0
 801245c:	d001      	beq.n	8012462 <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801245e:	2313      	movs	r3, #19
 8012460:	e05e      	b.n	8012520 <PrepareFrame+0x214>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 8012462:	697b      	ldr	r3, [r7, #20]
 8012464:	f003 030f 	and.w	r3, r3, #15
 8012468:	b2d9      	uxtb	r1, r3
 801246a:	68ba      	ldr	r2, [r7, #8]
 801246c:	7813      	ldrb	r3, [r2, #0]
 801246e:	f361 0303 	bfi	r3, r1, #0, #4
 8012472:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8012474:	68bb      	ldr	r3, [r7, #8]
 8012476:	781a      	ldrb	r2, [r3, #0]
 8012478:	4b2b      	ldr	r3, [pc, #172]	; (8012528 <PrepareFrame+0x21c>)
 801247a:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 801247e:	e04b      	b.n	8012518 <PrepareFrame+0x20c>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8012480:	4b29      	ldr	r3, [pc, #164]	; (8012528 <PrepareFrame+0x21c>)
 8012482:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8012486:	2b00      	cmp	r3, #0
 8012488:	d010      	beq.n	80124ac <PrepareFrame+0x1a0>
 801248a:	697b      	ldr	r3, [r7, #20]
 801248c:	2b0f      	cmp	r3, #15
 801248e:	d90d      	bls.n	80124ac <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8012490:	7ffb      	ldrb	r3, [r7, #31]
 8012492:	f107 0114 	add.w	r1, r7, #20
 8012496:	4a29      	ldr	r2, [pc, #164]	; (801253c <PrepareFrame+0x230>)
 8012498:	4618      	mov	r0, r3
 801249a:	f002 fb61 	bl	8014b60 <LoRaMacCommandsSerializeCmds>
 801249e:	4603      	mov	r3, r0
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	d001      	beq.n	80124a8 <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80124a4:	2313      	movs	r3, #19
 80124a6:	e03b      	b.n	8012520 <PrepareFrame+0x214>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 80124a8:	230a      	movs	r3, #10
 80124aa:	e039      	b.n	8012520 <PrepareFrame+0x214>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 80124ac:	7ffb      	ldrb	r3, [r7, #31]
 80124ae:	f107 0114 	add.w	r1, r7, #20
 80124b2:	4a22      	ldr	r2, [pc, #136]	; (801253c <PrepareFrame+0x230>)
 80124b4:	4618      	mov	r0, r3
 80124b6:	f002 fb53 	bl	8014b60 <LoRaMacCommandsSerializeCmds>
 80124ba:	4603      	mov	r3, r0
 80124bc:	2b00      	cmp	r3, #0
 80124be:	d001      	beq.n	80124c4 <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80124c0:	2313      	movs	r3, #19
 80124c2:	e02d      	b.n	8012520 <PrepareFrame+0x214>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 80124c4:	4b18      	ldr	r3, [pc, #96]	; (8012528 <PrepareFrame+0x21c>)
 80124c6:	2200      	movs	r2, #0
 80124c8:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 80124cc:	4b16      	ldr	r3, [pc, #88]	; (8012528 <PrepareFrame+0x21c>)
 80124ce:	4a1b      	ldr	r2, [pc, #108]	; (801253c <PrepareFrame+0x230>)
 80124d0:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 80124d4:	697b      	ldr	r3, [r7, #20]
 80124d6:	b2da      	uxtb	r2, r3
 80124d8:	4b13      	ldr	r3, [pc, #76]	; (8012528 <PrepareFrame+0x21c>)
 80124da:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            break;
 80124de:	e01b      	b.n	8012518 <PrepareFrame+0x20c>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 80124e0:	683b      	ldr	r3, [r7, #0]
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	d01a      	beq.n	801251c <PrepareFrame+0x210>
 80124e6:	4b10      	ldr	r3, [pc, #64]	; (8012528 <PrepareFrame+0x21c>)
 80124e8:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d015      	beq.n	801251c <PrepareFrame+0x210>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 80124f0:	4813      	ldr	r0, [pc, #76]	; (8012540 <PrepareFrame+0x234>)
 80124f2:	4b0d      	ldr	r3, [pc, #52]	; (8012528 <PrepareFrame+0x21c>)
 80124f4:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80124f8:	b29b      	uxth	r3, r3
 80124fa:	461a      	mov	r2, r3
 80124fc:	6839      	ldr	r1, [r7, #0]
 80124fe:	f007 fdd6 	bl	801a0ae <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 8012502:	4b09      	ldr	r3, [pc, #36]	; (8012528 <PrepareFrame+0x21c>)
 8012504:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8012508:	b29b      	uxth	r3, r3
 801250a:	3301      	adds	r3, #1
 801250c:	b29a      	uxth	r2, r3
 801250e:	4b06      	ldr	r3, [pc, #24]	; (8012528 <PrepareFrame+0x21c>)
 8012510:	801a      	strh	r2, [r3, #0]
            }
            break;
 8012512:	e003      	b.n	801251c <PrepareFrame+0x210>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012514:	2302      	movs	r3, #2
 8012516:	e003      	b.n	8012520 <PrepareFrame+0x214>
            break;
 8012518:	bf00      	nop
 801251a:	e000      	b.n	801251e <PrepareFrame+0x212>
            break;
 801251c:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 801251e:	2300      	movs	r3, #0
}
 8012520:	4618      	mov	r0, r3
 8012522:	3720      	adds	r7, #32
 8012524:	46bd      	mov	sp, r7
 8012526:	bd80      	pop	{r7, pc}
 8012528:	200006e0 	.word	0x200006e0
 801252c:	20000818 	.word	0x20000818
 8012530:	200006e2 	.word	0x200006e2
 8012534:	20000bfc 	.word	0x20000bfc
 8012538:	200007f8 	.word	0x200007f8
 801253c:	20000b7c 	.word	0x20000b7c
 8012540:	200006e3 	.word	0x200006e3

08012544 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 8012544:	b580      	push	{r7, lr}
 8012546:	b08a      	sub	sp, #40	; 0x28
 8012548:	af00      	add	r7, sp, #0
 801254a:	4603      	mov	r3, r0
 801254c:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 801254e:	2303      	movs	r3, #3
 8012550:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 8012554:	2300      	movs	r3, #0
 8012556:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 8012558:	79fb      	ldrb	r3, [r7, #7]
 801255a:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801255c:	4b4b      	ldr	r3, [pc, #300]	; (801268c <SendFrameOnChannel+0x148>)
 801255e:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8012562:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8012564:	4b49      	ldr	r3, [pc, #292]	; (801268c <SendFrameOnChannel+0x148>)
 8012566:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 801256a:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 801256c:	4b47      	ldr	r3, [pc, #284]	; (801268c <SendFrameOnChannel+0x148>)
 801256e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012572:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8012574:	4b45      	ldr	r3, [pc, #276]	; (801268c <SendFrameOnChannel+0x148>)
 8012576:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801257a:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 801257c:	4b44      	ldr	r3, [pc, #272]	; (8012690 <SendFrameOnChannel+0x14c>)
 801257e:	881b      	ldrh	r3, [r3, #0]
 8012580:	83bb      	strh	r3, [r7, #28]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8012582:	4b42      	ldr	r3, [pc, #264]	; (801268c <SendFrameOnChannel+0x148>)
 8012584:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8012588:	77bb      	strb	r3, [r7, #30]
#endif /* LORAMAC_VERSION */

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 801258a:	4b40      	ldr	r3, [pc, #256]	; (801268c <SendFrameOnChannel+0x148>)
 801258c:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8012590:	f107 020f 	add.w	r2, r7, #15
 8012594:	f107 0110 	add.w	r1, r7, #16
 8012598:	4b3e      	ldr	r3, [pc, #248]	; (8012694 <SendFrameOnChannel+0x150>)
 801259a:	f004 f869 	bl	8016670 <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801259e:	4b3c      	ldr	r3, [pc, #240]	; (8012690 <SendFrameOnChannel+0x14c>)
 80125a0:	2201      	movs	r2, #1
 80125a2:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80125a6:	4b39      	ldr	r3, [pc, #228]	; (801268c <SendFrameOnChannel+0x148>)
 80125a8:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80125ac:	b2da      	uxtb	r2, r3
 80125ae:	4b38      	ldr	r3, [pc, #224]	; (8012690 <SendFrameOnChannel+0x14c>)
 80125b0:	f883 2442 	strb.w	r2, [r3, #1090]	; 0x442
    MacCtx.McpsConfirm.TxPower = txPower;
 80125b4:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80125b8:	4b35      	ldr	r3, [pc, #212]	; (8012690 <SendFrameOnChannel+0x14c>)
 80125ba:	f883 2443 	strb.w	r2, [r3, #1091]	; 0x443
    MacCtx.McpsConfirm.Channel = channel;
 80125be:	79fb      	ldrb	r3, [r7, #7]
 80125c0:	4a33      	ldr	r2, [pc, #204]	; (8012690 <SendFrameOnChannel+0x14c>)
 80125c2:	f8c2 3450 	str.w	r3, [r2, #1104]	; 0x450

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 80125c6:	4b32      	ldr	r3, [pc, #200]	; (8012690 <SendFrameOnChannel+0x14c>)
 80125c8:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 80125cc:	4a30      	ldr	r2, [pc, #192]	; (8012690 <SendFrameOnChannel+0x14c>)
 80125ce:	f8c2 3448 	str.w	r3, [r2, #1096]	; 0x448
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 80125d2:	4b2f      	ldr	r3, [pc, #188]	; (8012690 <SendFrameOnChannel+0x14c>)
 80125d4:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 80125d8:	4a2d      	ldr	r2, [pc, #180]	; (8012690 <SendFrameOnChannel+0x14c>)
 80125da:	f8c2 3458 	str.w	r3, [r2, #1112]	; 0x458

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 80125de:	f001 fff6 	bl	80145ce <LoRaMacClassBIsBeaconModeActive>
 80125e2:	4603      	mov	r3, r0
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	d00b      	beq.n	8012600 <SendFrameOnChannel+0xbc>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 80125e8:	4b29      	ldr	r3, [pc, #164]	; (8012690 <SendFrameOnChannel+0x14c>)
 80125ea:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 80125ee:	4618      	mov	r0, r3
 80125f0:	f002 f858 	bl	80146a4 <LoRaMacClassBIsUplinkCollision>
 80125f4:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 80125f6:	6a3b      	ldr	r3, [r7, #32]
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	d001      	beq.n	8012600 <SendFrameOnChannel+0xbc>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 80125fc:	2310      	movs	r3, #16
 80125fe:	e040      	b.n	8012682 <SendFrameOnChannel+0x13e>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8012600:	4b22      	ldr	r3, [pc, #136]	; (801268c <SendFrameOnChannel+0x148>)
 8012602:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8012606:	2b01      	cmp	r3, #1
 8012608:	d101      	bne.n	801260e <SendFrameOnChannel+0xca>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 801260a:	f002 f855 	bl	80146b8 <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 801260e:	f001 ffef 	bl	80145f0 <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 8012612:	4b1e      	ldr	r3, [pc, #120]	; (801268c <SendFrameOnChannel+0x148>)
 8012614:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8012618:	b2db      	uxtb	r3, r3
 801261a:	4a1d      	ldr	r2, [pc, #116]	; (8012690 <SendFrameOnChannel+0x14c>)
 801261c:	f892 241b 	ldrb.w	r2, [r2, #1051]	; 0x41b
 8012620:	4611      	mov	r1, r2
 8012622:	4618      	mov	r0, r3
 8012624:	f7ff fc2a 	bl	8011e7c <SecureFrame>
 8012628:	4603      	mov	r3, r0
 801262a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( status != LORAMAC_STATUS_OK )
 801262e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012632:	2b00      	cmp	r3, #0
 8012634:	d002      	beq.n	801263c <SendFrameOnChannel+0xf8>
    {
        return status;
 8012636:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801263a:	e022      	b.n	8012682 <SendFrameOnChannel+0x13e>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 801263c:	4b14      	ldr	r3, [pc, #80]	; (8012690 <SendFrameOnChannel+0x14c>)
 801263e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8012642:	f043 0302 	orr.w	r3, r3, #2
 8012646:	4a12      	ldr	r2, [pc, #72]	; (8012690 <SendFrameOnChannel+0x14c>)
 8012648:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.ChannelsNbTransCounter++;
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.ChannelsNbTransCounter++;
 801264c:	4b10      	ldr	r3, [pc, #64]	; (8012690 <SendFrameOnChannel+0x14c>)
 801264e:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8012652:	3301      	adds	r3, #1
 8012654:	b2da      	uxtb	r2, r3
 8012656:	4b0e      	ldr	r3, [pc, #56]	; (8012690 <SendFrameOnChannel+0x14c>)
 8012658:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 801265c:	4b0c      	ldr	r3, [pc, #48]	; (8012690 <SendFrameOnChannel+0x14c>)
 801265e:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8012662:	4b0b      	ldr	r3, [pc, #44]	; (8012690 <SendFrameOnChannel+0x14c>)
 8012664:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
    MacCtx.ResponseTimeoutStartTime = 0;
 8012668:	4b09      	ldr	r3, [pc, #36]	; (8012690 <SendFrameOnChannel+0x14c>)
 801266a:	2200      	movs	r2, #0
 801266c:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
#endif /* LORAMAC_VERSION */

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8012670:	4b09      	ldr	r3, [pc, #36]	; (8012698 <SendFrameOnChannel+0x154>)
 8012672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012674:	4a06      	ldr	r2, [pc, #24]	; (8012690 <SendFrameOnChannel+0x14c>)
 8012676:	8812      	ldrh	r2, [r2, #0]
 8012678:	b2d2      	uxtb	r2, r2
 801267a:	4611      	mov	r1, r2
 801267c:	4807      	ldr	r0, [pc, #28]	; (801269c <SendFrameOnChannel+0x158>)
 801267e:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 8012680:	2300      	movs	r3, #0
}
 8012682:	4618      	mov	r0, r3
 8012684:	3728      	adds	r7, #40	; 0x28
 8012686:	46bd      	mov	sp, r7
 8012688:	bd80      	pop	{r7, pc}
 801268a:	bf00      	nop
 801268c:	20000bfc 	.word	0x20000bfc
 8012690:	200006e0 	.word	0x200006e0
 8012694:	20000afc 	.word	0x20000afc
 8012698:	0801fccc 	.word	0x0801fccc
 801269c:	200006e2 	.word	0x200006e2

080126a0 <SetTxContinuousWave>:

    return LORAMAC_STATUS_OK;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 80126a0:	b580      	push	{r7, lr}
 80126a2:	b082      	sub	sp, #8
 80126a4:	af00      	add	r7, sp, #0
 80126a6:	4603      	mov	r3, r0
 80126a8:	6039      	str	r1, [r7, #0]
 80126aa:	80fb      	strh	r3, [r7, #6]
 80126ac:	4613      	mov	r3, r2
 80126ae:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 80126b0:	4b09      	ldr	r3, [pc, #36]	; (80126d8 <SetTxContinuousWave+0x38>)
 80126b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80126b4:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80126b8:	88fa      	ldrh	r2, [r7, #6]
 80126ba:	6838      	ldr	r0, [r7, #0]
 80126bc:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80126be:	4b07      	ldr	r3, [pc, #28]	; (80126dc <SetTxContinuousWave+0x3c>)
 80126c0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80126c4:	f043 0302 	orr.w	r3, r3, #2
 80126c8:	4a04      	ldr	r2, [pc, #16]	; (80126dc <SetTxContinuousWave+0x3c>)
 80126ca:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 80126ce:	2300      	movs	r3, #0
}
 80126d0:	4618      	mov	r0, r3
 80126d2:	3708      	adds	r7, #8
 80126d4:	46bd      	mov	sp, r7
 80126d6:	bd80      	pop	{r7, pc}
 80126d8:	0801fccc 	.word	0x0801fccc
 80126dc:	200006e0 	.word	0x200006e0

080126e0 <RestoreNvmData>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t RestoreNvmData( void )
{
 80126e0:	b580      	push	{r7, lr}
 80126e2:	b082      	sub	sp, #8
 80126e4:	af00      	add	r7, sp, #0
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    uint32_t crc = 0;
 80126e6:	2300      	movs	r3, #0
 80126e8:	607b      	str	r3, [r7, #4]

    // Status and parameter validation
    if( MacCtx.MacState != LORAMAC_STOPPED )
 80126ea:	4b49      	ldr	r3, [pc, #292]	; (8012810 <RestoreNvmData+0x130>)
 80126ec:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80126f0:	2b01      	cmp	r3, #1
 80126f2:	d001      	beq.n	80126f8 <RestoreNvmData+0x18>
    {
        return LORAMAC_STATUS_BUSY;
 80126f4:	2301      	movs	r3, #1
 80126f6:	e087      	b.n	8012808 <RestoreNvmData+0x128>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 80126f8:	2124      	movs	r1, #36	; 0x24
 80126fa:	4846      	ldr	r0, [pc, #280]	; (8012814 <RestoreNvmData+0x134>)
 80126fc:	f007 fd2c 	bl	801a158 <Crc32>
 8012700:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.Crypto.Crc32 ) );
    if( crc != NvmBackup.Crypto.Crc32 )
 8012702:	4b44      	ldr	r3, [pc, #272]	; (8012814 <RestoreNvmData+0x134>)
 8012704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012706:	687a      	ldr	r2, [r7, #4]
 8012708:	429a      	cmp	r2, r3
 801270a:	d001      	beq.n	8012710 <RestoreNvmData+0x30>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 801270c:	2317      	movs	r3, #23
 801270e:	e07b      	b.n	8012808 <RestoreNvmData+0x128>
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 8012710:	211c      	movs	r1, #28
 8012712:	4841      	ldr	r0, [pc, #260]	; (8012818 <RestoreNvmData+0x138>)
 8012714:	f007 fd20 	bl	801a158 <Crc32>
 8012718:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup1.Crc32 ) );
    if( crc != NvmBackup.MacGroup1.Crc32 )
 801271a:	4b3e      	ldr	r3, [pc, #248]	; (8012814 <RestoreNvmData+0x134>)
 801271c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801271e:	687a      	ldr	r2, [r7, #4]
 8012720:	429a      	cmp	r2, r3
 8012722:	d001      	beq.n	8012728 <RestoreNvmData+0x48>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8012724:	2317      	movs	r3, #23
 8012726:	e06f      	b.n	8012808 <RestoreNvmData+0x128>
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 8012728:	f44f 7180 	mov.w	r1, #256	; 0x100
 801272c:	483b      	ldr	r0, [pc, #236]	; (801281c <RestoreNvmData+0x13c>)
 801272e:	f007 fd13 	bl	801a158 <Crc32>
 8012732:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup2.Crc32 ) );
    if( crc != NvmBackup.MacGroup2.Crc32 )
 8012734:	4b37      	ldr	r3, [pc, #220]	; (8012814 <RestoreNvmData+0x134>)
 8012736:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 801273a:	687a      	ldr	r2, [r7, #4]
 801273c:	429a      	cmp	r2, r3
 801273e:	d001      	beq.n	8012744 <RestoreNvmData+0x64>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8012740:	2317      	movs	r3, #23
 8012742:	e061      	b.n	8012808 <RestoreNvmData+0x128>
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 8012744:	21d4      	movs	r1, #212	; 0xd4
 8012746:	4836      	ldr	r0, [pc, #216]	; (8012820 <RestoreNvmData+0x140>)
 8012748:	f007 fd06 	bl	801a158 <Crc32>
 801274c:	6078      	str	r0, [r7, #4]
                                                   sizeof( NvmBackup.SecureElement.Crc32 ) );
    if( crc != NvmBackup.SecureElement.Crc32 )
 801274e:	4b31      	ldr	r3, [pc, #196]	; (8012814 <RestoreNvmData+0x134>)
 8012750:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8012754:	687a      	ldr	r2, [r7, #4]
 8012756:	429a      	cmp	r2, r3
 8012758:	d001      	beq.n	801275e <RestoreNvmData+0x7e>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 801275a:	2317      	movs	r3, #23
 801275c:	e054      	b.n	8012808 <RestoreNvmData+0x128>
    }

    // RegionGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 801275e:	2110      	movs	r1, #16
 8012760:	4830      	ldr	r0, [pc, #192]	; (8012824 <RestoreNvmData+0x144>)
 8012762:	f007 fcf9 	bl	801a158 <Crc32>
 8012766:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup1.Crc32 ) );
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 8012768:	4b2a      	ldr	r3, [pc, #168]	; (8012814 <RestoreNvmData+0x134>)
 801276a:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 801276e:	687a      	ldr	r2, [r7, #4]
 8012770:	429a      	cmp	r2, r3
 8012772:	d001      	beq.n	8012778 <RestoreNvmData+0x98>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8012774:	2317      	movs	r3, #23
 8012776:	e047      	b.n	8012808 <RestoreNvmData+0x128>
    }

    // RegionGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup2), sizeof( NvmBackup.RegionGroup2 ) -
 8012778:	f44f 715e 	mov.w	r1, #888	; 0x378
 801277c:	482a      	ldr	r0, [pc, #168]	; (8012828 <RestoreNvmData+0x148>)
 801277e:	f007 fceb 	bl	801a158 <Crc32>
 8012782:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup2.Crc32 ) );
    if( crc != NvmBackup.RegionGroup2.Crc32 )
 8012784:	4b23      	ldr	r3, [pc, #140]	; (8012814 <RestoreNvmData+0x134>)
 8012786:	f8d3 35b0 	ldr.w	r3, [r3, #1456]	; 0x5b0
 801278a:	687a      	ldr	r2, [r7, #4]
 801278c:	429a      	cmp	r2, r3
 801278e:	d001      	beq.n	8012794 <RestoreNvmData+0xb4>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8012790:	2317      	movs	r3, #23
 8012792:	e039      	b.n	8012808 <RestoreNvmData+0x128>
    }

    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 8012794:	2114      	movs	r1, #20
 8012796:	4825      	ldr	r0, [pc, #148]	; (801282c <RestoreNvmData+0x14c>)
 8012798:	f007 fcde 	bl	801a158 <Crc32>
 801279c:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.ClassB.Crc32 ) );
    if( crc != NvmBackup.ClassB.Crc32 )
 801279e:	4b1d      	ldr	r3, [pc, #116]	; (8012814 <RestoreNvmData+0x134>)
 80127a0:	f8d3 35c8 	ldr.w	r3, [r3, #1480]	; 0x5c8
 80127a4:	687a      	ldr	r2, [r7, #4]
 80127a6:	429a      	cmp	r2, r3
 80127a8:	d001      	beq.n	80127ae <RestoreNvmData+0xce>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80127aa:	2317      	movs	r3, #23
 80127ac:	e02c      	b.n	8012808 <RestoreNvmData+0x128>
    }

    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 80127ae:	f240 52cc 	movw	r2, #1484	; 0x5cc
 80127b2:	4918      	ldr	r1, [pc, #96]	; (8012814 <RestoreNvmData+0x134>)
 80127b4:	481e      	ldr	r0, [pc, #120]	; (8012830 <RestoreNvmData+0x150>)
 80127b6:	f007 fc7a 	bl	801a0ae <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 80127ba:	f240 52cc 	movw	r2, #1484	; 0x5cc
 80127be:	2100      	movs	r1, #0
 80127c0:	4814      	ldr	r0, [pc, #80]	; (8012814 <RestoreNvmData+0x134>)
 80127c2:	f007 fcaf 	bl	801a124 <memset1>

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 80127c6:	4b12      	ldr	r3, [pc, #72]	; (8012810 <RestoreNvmData+0x130>)
 80127c8:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 80127cc:	4b10      	ldr	r3, [pc, #64]	; (8012810 <RestoreNvmData+0x130>)
 80127ce:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 80127d2:	4b17      	ldr	r3, [pc, #92]	; (8012830 <RestoreNvmData+0x150>)
 80127d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80127d6:	4a0e      	ldr	r2, [pc, #56]	; (8012810 <RestoreNvmData+0x130>)
 80127d8:	f8c2 33ec 	str.w	r3, [r2, #1004]	; 0x3ec
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80127dc:	4b14      	ldr	r3, [pc, #80]	; (8012830 <RestoreNvmData+0x150>)
 80127de:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 80127e2:	4b0b      	ldr	r3, [pc, #44]	; (8012810 <RestoreNvmData+0x130>)
 80127e4:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80127e8:	4b09      	ldr	r3, [pc, #36]	; (8012810 <RestoreNvmData+0x130>)
 80127ea:	2201      	movs	r2, #1
 80127ec:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80127f0:	4b07      	ldr	r3, [pc, #28]	; (8012810 <RestoreNvmData+0x130>)
 80127f2:	2202      	movs	r2, #2
 80127f4:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb

    // The public/private network flag may change upon reloading MacGroup2
    // from NVM and we thus need to synchronize the radio. The same function
    // is invoked in LoRaMacInitialization.
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 80127f8:	4b0e      	ldr	r3, [pc, #56]	; (8012834 <RestoreNvmData+0x154>)
 80127fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80127fc:	4a0c      	ldr	r2, [pc, #48]	; (8012830 <RestoreNvmData+0x150>)
 80127fe:	f892 2119 	ldrb.w	r2, [r2, #281]	; 0x119
 8012802:	4610      	mov	r0, r2
 8012804:	4798      	blx	r3
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

    return LORAMAC_STATUS_OK;
 8012806:	2300      	movs	r3, #0
}
 8012808:	4618      	mov	r0, r3
 801280a:	3708      	adds	r7, #8
 801280c:	46bd      	mov	sp, r7
 801280e:	bd80      	pop	{r7, pc}
 8012810:	200006e0 	.word	0x200006e0
 8012814:	200011c8 	.word	0x200011c8
 8012818:	200011f0 	.word	0x200011f0
 801281c:	20001210 	.word	0x20001210
 8012820:	20001314 	.word	0x20001314
 8012824:	200013ec 	.word	0x200013ec
 8012828:	20001400 	.word	0x20001400
 801282c:	2000177c 	.word	0x2000177c
 8012830:	20000bfc 	.word	0x20000bfc
 8012834:	0801fccc 	.word	0x0801fccc

08012838 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 8012838:	b480      	push	{r7}
 801283a:	b083      	sub	sp, #12
 801283c:	af00      	add	r7, sp, #0
 801283e:	6078      	str	r0, [r7, #4]
 8012840:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	2b00      	cmp	r3, #0
 8012846:	d002      	beq.n	801284e <DetermineFrameType+0x16>
 8012848:	683b      	ldr	r3, [r7, #0]
 801284a:	2b00      	cmp	r3, #0
 801284c:	d101      	bne.n	8012852 <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801284e:	2303      	movs	r3, #3
 8012850:	e03b      	b.n	80128ca <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	7b1b      	ldrb	r3, [r3, #12]
 8012856:	f003 030f 	and.w	r3, r3, #15
 801285a:	b2db      	uxtb	r3, r3
 801285c:	2b00      	cmp	r3, #0
 801285e:	d008      	beq.n	8012872 <DetermineFrameType+0x3a>
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012866:	2b00      	cmp	r3, #0
 8012868:	d003      	beq.n	8012872 <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 801286a:	683b      	ldr	r3, [r7, #0]
 801286c:	2200      	movs	r2, #0
 801286e:	701a      	strb	r2, [r3, #0]
 8012870:	e02a      	b.n	80128c8 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012878:	2b00      	cmp	r3, #0
 801287a:	d103      	bne.n	8012884 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 801287c:	683b      	ldr	r3, [r7, #0]
 801287e:	2201      	movs	r2, #1
 8012880:	701a      	strb	r2, [r3, #0]
 8012882:	e021      	b.n	80128c8 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	7b1b      	ldrb	r3, [r3, #12]
 8012888:	f003 030f 	and.w	r3, r3, #15
 801288c:	b2db      	uxtb	r3, r3
 801288e:	2b00      	cmp	r3, #0
 8012890:	d108      	bne.n	80128a4 <DetermineFrameType+0x6c>
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012898:	2b00      	cmp	r3, #0
 801289a:	d103      	bne.n	80128a4 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 801289c:	683b      	ldr	r3, [r7, #0]
 801289e:	2202      	movs	r2, #2
 80128a0:	701a      	strb	r2, [r3, #0]
 80128a2:	e011      	b.n	80128c8 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	7b1b      	ldrb	r3, [r3, #12]
 80128a8:	f003 030f 	and.w	r3, r3, #15
 80128ac:	b2db      	uxtb	r3, r3
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	d108      	bne.n	80128c4 <DetermineFrameType+0x8c>
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d003      	beq.n	80128c4 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 80128bc:	683b      	ldr	r3, [r7, #0]
 80128be:	2203      	movs	r2, #3
 80128c0:	701a      	strb	r2, [r3, #0]
 80128c2:	e001      	b.n	80128c8 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 80128c4:	2318      	movs	r3, #24
 80128c6:	e000      	b.n	80128ca <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 80128c8:	2300      	movs	r3, #0
}
 80128ca:	4618      	mov	r0, r3
 80128cc:	370c      	adds	r7, #12
 80128ce:	46bd      	mov	sp, r7
 80128d0:	bc80      	pop	{r7}
 80128d2:	4770      	bx	lr

080128d4 <CheckRetrans>:
    }
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckRetrans( uint8_t counter, uint8_t limit )
{
 80128d4:	b480      	push	{r7}
 80128d6:	b083      	sub	sp, #12
 80128d8:	af00      	add	r7, sp, #0
 80128da:	4603      	mov	r3, r0
 80128dc:	460a      	mov	r2, r1
 80128de:	71fb      	strb	r3, [r7, #7]
 80128e0:	4613      	mov	r3, r2
 80128e2:	71bb      	strb	r3, [r7, #6]
    if( counter >= limit )
 80128e4:	79fa      	ldrb	r2, [r7, #7]
 80128e6:	79bb      	ldrb	r3, [r7, #6]
 80128e8:	429a      	cmp	r2, r3
 80128ea:	d301      	bcc.n	80128f0 <CheckRetrans+0x1c>
    {
        return true;
 80128ec:	2301      	movs	r3, #1
 80128ee:	e000      	b.n	80128f2 <CheckRetrans+0x1e>
    }
    return false;
 80128f0:	2300      	movs	r3, #0
}
 80128f2:	4618      	mov	r0, r3
 80128f4:	370c      	adds	r7, #12
 80128f6:	46bd      	mov	sp, r7
 80128f8:	bc80      	pop	{r7}
 80128fa:	4770      	bx	lr

080128fc <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 80128fc:	b580      	push	{r7, lr}
 80128fe:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 8012900:	4b12      	ldr	r3, [pc, #72]	; (801294c <CheckRetransUnconfirmedUplink+0x50>)
 8012902:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8012906:	4a12      	ldr	r2, [pc, #72]	; (8012950 <CheckRetransUnconfirmedUplink+0x54>)
 8012908:	f892 2068 	ldrb.w	r2, [r2, #104]	; 0x68
 801290c:	4611      	mov	r1, r2
 801290e:	4618      	mov	r0, r3
 8012910:	f7ff ffe0 	bl	80128d4 <CheckRetrans>
 8012914:	4603      	mov	r3, r0
 8012916:	2b00      	cmp	r3, #0
 8012918:	d001      	beq.n	801291e <CheckRetransUnconfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 801291a:	2301      	movs	r3, #1
 801291c:	e014      	b.n	8012948 <CheckRetransUnconfirmedUplink+0x4c>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 801291e:	4b0b      	ldr	r3, [pc, #44]	; (801294c <CheckRetransUnconfirmedUplink+0x50>)
 8012920:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8012924:	f003 0302 	and.w	r3, r3, #2
 8012928:	b2db      	uxtb	r3, r3
 801292a:	2b00      	cmp	r3, #0
 801292c:	d00b      	beq.n	8012946 <CheckRetransUnconfirmedUplink+0x4a>
    {
        // Stop the retransmissions, if a valid downlink is received
        // a class A RX window. This holds also for class B and C.
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 801292e:	4b07      	ldr	r3, [pc, #28]	; (801294c <CheckRetransUnconfirmedUplink+0x50>)
 8012930:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 8012934:	2b00      	cmp	r3, #0
 8012936:	d004      	beq.n	8012942 <CheckRetransUnconfirmedUplink+0x46>
            ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 8012938:	4b04      	ldr	r3, [pc, #16]	; (801294c <CheckRetransUnconfirmedUplink+0x50>)
 801293a:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 801293e:	2b01      	cmp	r3, #1
 8012940:	d101      	bne.n	8012946 <CheckRetransUnconfirmedUplink+0x4a>
        {
            return true;
 8012942:	2301      	movs	r3, #1
 8012944:	e000      	b.n	8012948 <CheckRetransUnconfirmedUplink+0x4c>
        }
    }
    return false;
 8012946:	2300      	movs	r3, #0
}
 8012948:	4618      	mov	r0, r3
 801294a:	bd80      	pop	{r7, pc}
 801294c:	200006e0 	.word	0x200006e0
 8012950:	20000bfc 	.word	0x20000bfc

08012954 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 8012954:	b580      	push	{r7, lr}
 8012956:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 8012958:	4b10      	ldr	r3, [pc, #64]	; (801299c <CheckRetransConfirmedUplink+0x48>)
 801295a:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 801295e:	4a10      	ldr	r2, [pc, #64]	; (80129a0 <CheckRetransConfirmedUplink+0x4c>)
 8012960:	f892 2068 	ldrb.w	r2, [r2, #104]	; 0x68
 8012964:	4611      	mov	r1, r2
 8012966:	4618      	mov	r0, r3
 8012968:	f7ff ffb4 	bl	80128d4 <CheckRetrans>
 801296c:	4603      	mov	r3, r0
 801296e:	2b00      	cmp	r3, #0
 8012970:	d001      	beq.n	8012976 <CheckRetransConfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 8012972:	2301      	movs	r3, #1
 8012974:	e00f      	b.n	8012996 <CheckRetransConfirmedUplink+0x42>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8012976:	4b09      	ldr	r3, [pc, #36]	; (801299c <CheckRetransConfirmedUplink+0x48>)
 8012978:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 801297c:	f003 0302 	and.w	r3, r3, #2
 8012980:	b2db      	uxtb	r3, r3
 8012982:	2b00      	cmp	r3, #0
 8012984:	d006      	beq.n	8012994 <CheckRetransConfirmedUplink+0x40>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8012986:	4b05      	ldr	r3, [pc, #20]	; (801299c <CheckRetransConfirmedUplink+0x48>)
 8012988:	f893 3444 	ldrb.w	r3, [r3, #1092]	; 0x444
 801298c:	2b00      	cmp	r3, #0
 801298e:	d001      	beq.n	8012994 <CheckRetransConfirmedUplink+0x40>
        {
            return true;
 8012990:	2301      	movs	r3, #1
 8012992:	e000      	b.n	8012996 <CheckRetransConfirmedUplink+0x42>
        }
    }
    return false;
 8012994:	2300      	movs	r3, #0
}
 8012996:	4618      	mov	r0, r3
 8012998:	bd80      	pop	{r7, pc}
 801299a:	bf00      	nop
 801299c:	200006e0 	.word	0x200006e0
 80129a0:	20000bfc 	.word	0x20000bfc

080129a4 <IncreaseAdrAckCounter>:

static uint32_t IncreaseAdrAckCounter( uint32_t counter )
{
 80129a4:	b480      	push	{r7}
 80129a6:	b083      	sub	sp, #12
 80129a8:	af00      	add	r7, sp, #0
 80129aa:	6078      	str	r0, [r7, #4]
    if( counter < ADR_ACK_COUNTER_MAX )
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80129b2:	d002      	beq.n	80129ba <IncreaseAdrAckCounter+0x16>
    {
        counter++;
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	3301      	adds	r3, #1
 80129b8:	607b      	str	r3, [r7, #4]
    }
    return counter;
 80129ba:	687b      	ldr	r3, [r7, #4]
}
 80129bc:	4618      	mov	r0, r3
 80129be:	370c      	adds	r7, #12
 80129c0:	46bd      	mov	sp, r7
 80129c2:	bc80      	pop	{r7}
 80129c4:	4770      	bx	lr
	...

080129c8 <StopRetransmission>:
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 80129c8:	b580      	push	{r7, lr}
 80129ca:	af00      	add	r7, sp, #0
            }
        }
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 80129cc:	4b1a      	ldr	r3, [pc, #104]	; (8012a38 <StopRetransmission+0x70>)
 80129ce:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 80129d2:	f003 0302 	and.w	r3, r3, #2
 80129d6:	b2db      	uxtb	r3, r3
 80129d8:	2b00      	cmp	r3, #0
 80129da:	d009      	beq.n	80129f0 <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 80129dc:	4b16      	ldr	r3, [pc, #88]	; (8012a38 <StopRetransmission+0x70>)
 80129de:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	d011      	beq.n	8012a0a <StopRetransmission+0x42>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 80129e6:	4b14      	ldr	r3, [pc, #80]	; (8012a38 <StopRetransmission+0x70>)
 80129e8:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 80129ec:	2b01      	cmp	r3, #1
 80129ee:	d00c      	beq.n	8012a0a <StopRetransmission+0x42>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 80129f0:	4b12      	ldr	r3, [pc, #72]	; (8012a3c <StopRetransmission+0x74>)
 80129f2:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	d007      	beq.n	8012a0a <StopRetransmission+0x42>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 80129fa:	4b10      	ldr	r3, [pc, #64]	; (8012a3c <StopRetransmission+0x74>)
 80129fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80129fe:	4618      	mov	r0, r3
 8012a00:	f7ff ffd0 	bl	80129a4 <IncreaseAdrAckCounter>
 8012a04:	4603      	mov	r3, r0
 8012a06:	4a0d      	ldr	r2, [pc, #52]	; (8012a3c <StopRetransmission+0x74>)
 8012a08:	6293      	str	r3, [r2, #40]	; 0x28
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8012a0a:	4b0b      	ldr	r3, [pc, #44]	; (8012a38 <StopRetransmission+0x70>)
 8012a0c:	2200      	movs	r2, #0
 8012a0e:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    MacCtx.NodeAckRequested = false;
 8012a12:	4b09      	ldr	r3, [pc, #36]	; (8012a38 <StopRetransmission+0x70>)
 8012a14:	2200      	movs	r2, #0
 8012a16:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
 8012a1a:	4b07      	ldr	r3, [pc, #28]	; (8012a38 <StopRetransmission+0x70>)
 8012a1c:	2200      	movs	r2, #0
 8012a1e:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8012a22:	4b05      	ldr	r3, [pc, #20]	; (8012a38 <StopRetransmission+0x70>)
 8012a24:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8012a28:	f023 0302 	bic.w	r3, r3, #2
 8012a2c:	4a02      	ldr	r2, [pc, #8]	; (8012a38 <StopRetransmission+0x70>)
 8012a2e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return true;
 8012a32:	2301      	movs	r3, #1
}
 8012a34:	4618      	mov	r0, r3
 8012a36:	bd80      	pop	{r7, pc}
 8012a38:	200006e0 	.word	0x200006e0
 8012a3c:	20000bfc 	.word	0x20000bfc

08012a40 <OnMacProcessNotify>:

static void OnMacProcessNotify( void )
{
 8012a40:	b580      	push	{r7, lr}
 8012a42:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8012a44:	4b08      	ldr	r3, [pc, #32]	; (8012a68 <OnMacProcessNotify+0x28>)
 8012a46:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8012a4a:	2b00      	cmp	r3, #0
 8012a4c:	d00a      	beq.n	8012a64 <OnMacProcessNotify+0x24>
 8012a4e:	4b06      	ldr	r3, [pc, #24]	; (8012a68 <OnMacProcessNotify+0x28>)
 8012a50:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8012a54:	695b      	ldr	r3, [r3, #20]
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	d004      	beq.n	8012a64 <OnMacProcessNotify+0x24>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8012a5a:	4b03      	ldr	r3, [pc, #12]	; (8012a68 <OnMacProcessNotify+0x28>)
 8012a5c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8012a60:	695b      	ldr	r3, [r3, #20]
 8012a62:	4798      	blx	r3
    }
}
 8012a64:	bf00      	nop
 8012a66:	bd80      	pop	{r7, pc}
 8012a68:	200006e0 	.word	0x200006e0

08012a6c <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 8012a6c:	b580      	push	{r7, lr}
 8012a6e:	b082      	sub	sp, #8
 8012a70:	af00      	add	r7, sp, #0
 8012a72:	4603      	mov	r3, r0
 8012a74:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 8012a76:	4b0b      	ldr	r3, [pc, #44]	; (8012aa4 <CallNvmDataChangeCallback+0x38>)
 8012a78:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	d00c      	beq.n	8012a9a <CallNvmDataChangeCallback+0x2e>
 8012a80:	4b08      	ldr	r3, [pc, #32]	; (8012aa4 <CallNvmDataChangeCallback+0x38>)
 8012a82:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8012a86:	691b      	ldr	r3, [r3, #16]
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	d006      	beq.n	8012a9a <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8012a8c:	4b05      	ldr	r3, [pc, #20]	; (8012aa4 <CallNvmDataChangeCallback+0x38>)
 8012a8e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8012a92:	691b      	ldr	r3, [r3, #16]
 8012a94:	88fa      	ldrh	r2, [r7, #6]
 8012a96:	4610      	mov	r0, r2
 8012a98:	4798      	blx	r3
    }
}
 8012a9a:	bf00      	nop
 8012a9c:	3708      	adds	r7, #8
 8012a9e:	46bd      	mov	sp, r7
 8012aa0:	bd80      	pop	{r7, pc}
 8012aa2:	bf00      	nop
 8012aa4:	200006e0 	.word	0x200006e0

08012aa8 <IsRequestPending>:
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
}
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
 8012aa8:	b480      	push	{r7}
 8012aaa:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8012aac:	4b0b      	ldr	r3, [pc, #44]	; (8012adc <IsRequestPending+0x34>)
 8012aae:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8012ab2:	f003 0304 	and.w	r3, r3, #4
 8012ab6:	b2db      	uxtb	r3, r3
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	d107      	bne.n	8012acc <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 8012abc:	4b07      	ldr	r3, [pc, #28]	; (8012adc <IsRequestPending+0x34>)
 8012abe:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8012ac2:	f003 0301 	and.w	r3, r3, #1
 8012ac6:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	d001      	beq.n	8012ad0 <IsRequestPending+0x28>
    {
        return 1;
 8012acc:	2301      	movs	r3, #1
 8012ace:	e000      	b.n	8012ad2 <IsRequestPending+0x2a>
    }
    return 0;
 8012ad0:	2300      	movs	r3, #0
}
 8012ad2:	4618      	mov	r0, r3
 8012ad4:	46bd      	mov	sp, r7
 8012ad6:	bc80      	pop	{r7}
 8012ad8:	4770      	bx	lr
 8012ada:	bf00      	nop
 8012adc:	200006e0 	.word	0x200006e0

08012ae0 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 8012ae0:	b590      	push	{r4, r7, lr}
 8012ae2:	b091      	sub	sp, #68	; 0x44
 8012ae4:	af02      	add	r7, sp, #8
 8012ae6:	6178      	str	r0, [r7, #20]
 8012ae8:	6139      	str	r1, [r7, #16]
 8012aea:	4613      	mov	r3, r2
 8012aec:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 8012aee:	697b      	ldr	r3, [r7, #20]
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	d002      	beq.n	8012afa <LoRaMacInitialization+0x1a>
 8012af4:	693b      	ldr	r3, [r7, #16]
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	d101      	bne.n	8012afe <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012afa:	2303      	movs	r3, #3
 8012afc:	e27a      	b.n	8012ff4 <LoRaMacInitialization+0x514>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8012afe:	697b      	ldr	r3, [r7, #20]
 8012b00:	681b      	ldr	r3, [r3, #0]
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	d00b      	beq.n	8012b1e <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 8012b06:	697b      	ldr	r3, [r7, #20]
 8012b08:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	d007      	beq.n	8012b1e <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8012b0e:	697b      	ldr	r3, [r7, #20]
 8012b10:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	d003      	beq.n	8012b1e <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 8012b16:	697b      	ldr	r3, [r7, #20]
 8012b18:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d101      	bne.n	8012b22 <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012b1e:	2303      	movs	r3, #3
 8012b20:	e268      	b.n	8012ff4 <LoRaMacInitialization+0x514>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 8012b22:	7bfb      	ldrb	r3, [r7, #15]
 8012b24:	4618      	mov	r0, r3
 8012b26:	f003 fcac 	bl	8016482 <RegionIsActive>
 8012b2a:	4603      	mov	r3, r0
 8012b2c:	f083 0301 	eor.w	r3, r3, #1
 8012b30:	b2db      	uxtb	r3, r3
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	d001      	beq.n	8012b3a <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8012b36:	2309      	movs	r3, #9
 8012b38:	e25c      	b.n	8012ff4 <LoRaMacInitialization+0x514>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 8012b3a:	6978      	ldr	r0, [r7, #20]
 8012b3c:	f002 f932 	bl	8014da4 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 8012b40:	f240 52cc 	movw	r2, #1484	; 0x5cc
 8012b44:	2100      	movs	r1, #0
 8012b46:	48c7      	ldr	r0, [pc, #796]	; (8012e64 <LoRaMacInitialization+0x384>)
 8012b48:	f007 faec 	bl	801a124 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8012b4c:	f240 521c 	movw	r2, #1308	; 0x51c
 8012b50:	2100      	movs	r1, #0
 8012b52:	48c5      	ldr	r0, [pc, #788]	; (8012e68 <LoRaMacInitialization+0x388>)
 8012b54:	f007 fae6 	bl	801a124 <memset1>
    // Set non zero variables to its default value
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetries = 1;
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 8012b58:	4ac2      	ldr	r2, [pc, #776]	; (8012e64 <LoRaMacInitialization+0x384>)
 8012b5a:	7bfb      	ldrb	r3, [r7, #15]
 8012b5c:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8012b60:	4bc0      	ldr	r3, [pc, #768]	; (8012e64 <LoRaMacInitialization+0x384>)
 8012b62:	2200      	movs	r2, #0
 8012b64:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
    Nvm.MacGroup2.MacParams.RepeaterSupport = false;
 8012b68:	4bbe      	ldr	r3, [pc, #760]	; (8012e64 <LoRaMacInitialization+0x384>)
 8012b6a:	2200      	movs	r2, #0
 8012b6c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8012b70:	4bbc      	ldr	r3, [pc, #752]	; (8012e64 <LoRaMacInitialization+0x384>)
 8012b72:	4abe      	ldr	r2, [pc, #760]	; (8012e6c <LoRaMacInitialization+0x38c>)
 8012b74:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 8012b78:	2300      	movs	r3, #0
 8012b7a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8012b7e:	4bbc      	ldr	r3, [pc, #752]	; (8012e70 <LoRaMacInitialization+0x390>)
 8012b80:	61fb      	str	r3, [r7, #28]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8012b82:	4bbc      	ldr	r3, [pc, #752]	; (8012e74 <LoRaMacInitialization+0x394>)
 8012b84:	623b      	str	r3, [r7, #32]
    params.Bands = &RegionBands;
 8012b86:	4bbc      	ldr	r3, [pc, #752]	; (8012e78 <LoRaMacInitialization+0x398>)
 8012b88:	627b      	str	r3, [r7, #36]	; 0x24
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8012b8a:	4bb6      	ldr	r3, [pc, #728]	; (8012e64 <LoRaMacInitialization+0x384>)
 8012b8c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012b90:	f107 021c 	add.w	r2, r7, #28
 8012b94:	4611      	mov	r1, r2
 8012b96:	4618      	mov	r0, r3
 8012b98:	f003 fcbf 	bl	801651a <RegionInitDefaults>
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8012b9c:	230f      	movs	r3, #15
 8012b9e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012ba2:	4bb0      	ldr	r3, [pc, #704]	; (8012e64 <LoRaMacInitialization+0x384>)
 8012ba4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012ba8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8012bac:	4611      	mov	r1, r2
 8012bae:	4618      	mov	r0, r3
 8012bb0:	f003 fc7c 	bl	80164ac <RegionGetPhyParam>
 8012bb4:	4603      	mov	r3, r0
 8012bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8012bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	bf14      	ite	ne
 8012bbe:	2301      	movne	r3, #1
 8012bc0:	2300      	moveq	r3, #0
 8012bc2:	b2da      	uxtb	r2, r3
 8012bc4:	4ba7      	ldr	r3, [pc, #668]	; (8012e64 <LoRaMacInitialization+0x384>)
 8012bc6:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8012bca:	230a      	movs	r3, #10
 8012bcc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012bd0:	4ba4      	ldr	r3, [pc, #656]	; (8012e64 <LoRaMacInitialization+0x384>)
 8012bd2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012bd6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8012bda:	4611      	mov	r1, r2
 8012bdc:	4618      	mov	r0, r3
 8012bde:	f003 fc65 	bl	80164ac <RegionGetPhyParam>
 8012be2:	4603      	mov	r3, r0
 8012be4:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 8012be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012be8:	b25a      	sxtb	r2, r3
 8012bea:	4b9e      	ldr	r3, [pc, #632]	; (8012e64 <LoRaMacInitialization+0x384>)
 8012bec:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

    getPhy.Attribute = PHY_DEF_TX_DR;
 8012bf0:	2306      	movs	r3, #6
 8012bf2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012bf6:	4b9b      	ldr	r3, [pc, #620]	; (8012e64 <LoRaMacInitialization+0x384>)
 8012bf8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012bfc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8012c00:	4611      	mov	r1, r2
 8012c02:	4618      	mov	r0, r3
 8012c04:	f003 fc52 	bl	80164ac <RegionGetPhyParam>
 8012c08:	4603      	mov	r3, r0
 8012c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 8012c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c0e:	b25a      	sxtb	r2, r3
 8012c10:	4b94      	ldr	r3, [pc, #592]	; (8012e64 <LoRaMacInitialization+0x384>)
 8012c12:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8012c16:	2310      	movs	r3, #16
 8012c18:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012c1c:	4b91      	ldr	r3, [pc, #580]	; (8012e64 <LoRaMacInitialization+0x384>)
 8012c1e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012c22:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8012c26:	4611      	mov	r1, r2
 8012c28:	4618      	mov	r0, r3
 8012c2a:	f003 fc3f 	bl	80164ac <RegionGetPhyParam>
 8012c2e:	4603      	mov	r3, r0
 8012c30:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8012c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c34:	4a8b      	ldr	r2, [pc, #556]	; (8012e64 <LoRaMacInitialization+0x384>)
 8012c36:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8012c3a:	2311      	movs	r3, #17
 8012c3c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012c40:	4b88      	ldr	r3, [pc, #544]	; (8012e64 <LoRaMacInitialization+0x384>)
 8012c42:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012c46:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8012c4a:	4611      	mov	r1, r2
 8012c4c:	4618      	mov	r0, r3
 8012c4e:	f003 fc2d 	bl	80164ac <RegionGetPhyParam>
 8012c52:	4603      	mov	r3, r0
 8012c54:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8012c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c58:	4a82      	ldr	r2, [pc, #520]	; (8012e64 <LoRaMacInitialization+0x384>)
 8012c5a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8012c5e:	2312      	movs	r3, #18
 8012c60:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012c64:	4b7f      	ldr	r3, [pc, #508]	; (8012e64 <LoRaMacInitialization+0x384>)
 8012c66:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012c6a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8012c6e:	4611      	mov	r1, r2
 8012c70:	4618      	mov	r0, r3
 8012c72:	f003 fc1b 	bl	80164ac <RegionGetPhyParam>
 8012c76:	4603      	mov	r3, r0
 8012c78:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8012c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c7c:	4a79      	ldr	r2, [pc, #484]	; (8012e64 <LoRaMacInitialization+0x384>)
 8012c7e:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8012c82:	2313      	movs	r3, #19
 8012c84:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012c88:	4b76      	ldr	r3, [pc, #472]	; (8012e64 <LoRaMacInitialization+0x384>)
 8012c8a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012c8e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8012c92:	4611      	mov	r1, r2
 8012c94:	4618      	mov	r0, r3
 8012c96:	f003 fc09 	bl	80164ac <RegionGetPhyParam>
 8012c9a:	4603      	mov	r3, r0
 8012c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8012c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ca0:	4a70      	ldr	r2, [pc, #448]	; (8012e64 <LoRaMacInitialization+0x384>)
 8012ca2:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8012ca6:	2314      	movs	r3, #20
 8012ca8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012cac:	4b6d      	ldr	r3, [pc, #436]	; (8012e64 <LoRaMacInitialization+0x384>)
 8012cae:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012cb2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8012cb6:	4611      	mov	r1, r2
 8012cb8:	4618      	mov	r0, r3
 8012cba:	f003 fbf7 	bl	80164ac <RegionGetPhyParam>
 8012cbe:	4603      	mov	r3, r0
 8012cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8012cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cc4:	4a67      	ldr	r2, [pc, #412]	; (8012e64 <LoRaMacInitialization+0x384>)
 8012cc6:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8012cca:	2316      	movs	r3, #22
 8012ccc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012cd0:	4b64      	ldr	r3, [pc, #400]	; (8012e64 <LoRaMacInitialization+0x384>)
 8012cd2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012cd6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8012cda:	4611      	mov	r1, r2
 8012cdc:	4618      	mov	r0, r3
 8012cde:	f003 fbe5 	bl	80164ac <RegionGetPhyParam>
 8012ce2:	4603      	mov	r3, r0
 8012ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8012ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ce8:	b2da      	uxtb	r2, r3
 8012cea:	4b5e      	ldr	r3, [pc, #376]	; (8012e64 <LoRaMacInitialization+0x384>)
 8012cec:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8012cf0:	2317      	movs	r3, #23
 8012cf2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012cf6:	4b5b      	ldr	r3, [pc, #364]	; (8012e64 <LoRaMacInitialization+0x384>)
 8012cf8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012cfc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8012d00:	4611      	mov	r1, r2
 8012d02:	4618      	mov	r0, r3
 8012d04:	f003 fbd2 	bl	80164ac <RegionGetPhyParam>
 8012d08:	4603      	mov	r3, r0
 8012d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8012d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d0e:	4a55      	ldr	r2, [pc, #340]	; (8012e64 <LoRaMacInitialization+0x384>)
 8012d10:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8012d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d16:	4a53      	ldr	r2, [pc, #332]	; (8012e64 <LoRaMacInitialization+0x384>)
 8012d18:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8012d1c:	2318      	movs	r3, #24
 8012d1e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012d22:	4b50      	ldr	r3, [pc, #320]	; (8012e64 <LoRaMacInitialization+0x384>)
 8012d24:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012d28:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8012d2c:	4611      	mov	r1, r2
 8012d2e:	4618      	mov	r0, r3
 8012d30:	f003 fbbc 	bl	80164ac <RegionGetPhyParam>
 8012d34:	4603      	mov	r3, r0
 8012d36:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8012d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d3a:	b2da      	uxtb	r2, r3
 8012d3c:	4b49      	ldr	r3, [pc, #292]	; (8012e64 <LoRaMacInitialization+0x384>)
 8012d3e:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 8012d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d44:	b2da      	uxtb	r2, r3
 8012d46:	4b47      	ldr	r3, [pc, #284]	; (8012e64 <LoRaMacInitialization+0x384>)
 8012d48:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8012d4c:	231d      	movs	r3, #29
 8012d4e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012d52:	4b44      	ldr	r3, [pc, #272]	; (8012e64 <LoRaMacInitialization+0x384>)
 8012d54:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012d58:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8012d5c:	4611      	mov	r1, r2
 8012d5e:	4618      	mov	r0, r3
 8012d60:	f003 fba4 	bl	80164ac <RegionGetPhyParam>
 8012d64:	4603      	mov	r3, r0
 8012d66:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8012d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d6a:	b2da      	uxtb	r2, r3
 8012d6c:	4b3d      	ldr	r3, [pc, #244]	; (8012e64 <LoRaMacInitialization+0x384>)
 8012d6e:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8012d72:	231e      	movs	r3, #30
 8012d74:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012d78:	4b3a      	ldr	r3, [pc, #232]	; (8012e64 <LoRaMacInitialization+0x384>)
 8012d7a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012d7e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8012d82:	4611      	mov	r1, r2
 8012d84:	4618      	mov	r0, r3
 8012d86:	f003 fb91 	bl	80164ac <RegionGetPhyParam>
 8012d8a:	4603      	mov	r3, r0
 8012d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8012d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d90:	b2da      	uxtb	r2, r3
 8012d92:	4b34      	ldr	r3, [pc, #208]	; (8012e64 <LoRaMacInitialization+0x384>)
 8012d94:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8012d98:	231f      	movs	r3, #31
 8012d9a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012d9e:	4b31      	ldr	r3, [pc, #196]	; (8012e64 <LoRaMacInitialization+0x384>)
 8012da0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012da4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8012da8:	4611      	mov	r1, r2
 8012daa:	4618      	mov	r0, r3
 8012dac:	f003 fb7e 	bl	80164ac <RegionGetPhyParam>
 8012db0:	4603      	mov	r3, r0
 8012db2:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 8012db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012db6:	4a2b      	ldr	r2, [pc, #172]	; (8012e64 <LoRaMacInitialization+0x384>)
 8012db8:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8012dbc:	2320      	movs	r3, #32
 8012dbe:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012dc2:	4b28      	ldr	r3, [pc, #160]	; (8012e64 <LoRaMacInitialization+0x384>)
 8012dc4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012dc8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8012dcc:	4611      	mov	r1, r2
 8012dce:	4618      	mov	r0, r3
 8012dd0:	f003 fb6c 	bl	80164ac <RegionGetPhyParam>
 8012dd4:	4603      	mov	r3, r0
 8012dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 8012dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dda:	4a22      	ldr	r2, [pc, #136]	; (8012e64 <LoRaMacInitialization+0x384>)
 8012ddc:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8012de0:	230b      	movs	r3, #11
 8012de2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012de6:	4b1f      	ldr	r3, [pc, #124]	; (8012e64 <LoRaMacInitialization+0x384>)
 8012de8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012dec:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8012df0:	4611      	mov	r1, r2
 8012df2:	4618      	mov	r0, r3
 8012df4:	f003 fb5a 	bl	80164ac <RegionGetPhyParam>
 8012df8:	4603      	mov	r3, r0
 8012dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = phyParam.Value;
 8012dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dfe:	b29a      	uxth	r2, r3
 8012e00:	4b18      	ldr	r3, [pc, #96]	; (8012e64 <LoRaMacInitialization+0x384>)
 8012e02:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8012e06:	230c      	movs	r3, #12
 8012e08:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012e0c:	4b15      	ldr	r3, [pc, #84]	; (8012e64 <LoRaMacInitialization+0x384>)
 8012e0e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012e12:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8012e16:	4611      	mov	r1, r2
 8012e18:	4618      	mov	r0, r3
 8012e1a:	f003 fb47 	bl	80164ac <RegionGetPhyParam>
 8012e1e:	4603      	mov	r3, r0
 8012e20:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = phyParam.Value;
 8012e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e24:	b29a      	uxth	r2, r3
 8012e26:	4b0f      	ldr	r3, [pc, #60]	; (8012e64 <LoRaMacInitialization+0x384>)
 8012e28:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8012e2c:	4b0d      	ldr	r3, [pc, #52]	; (8012e64 <LoRaMacInitialization+0x384>)
 8012e2e:	2201      	movs	r2, #1
 8012e30:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 8012e34:	4b0b      	ldr	r3, [pc, #44]	; (8012e64 <LoRaMacInitialization+0x384>)
 8012e36:	220a      	movs	r2, #10
 8012e38:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 8012e3c:	4b09      	ldr	r3, [pc, #36]	; (8012e64 <LoRaMacInitialization+0x384>)
 8012e3e:	2206      	movs	r2, #6
 8012e40:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 8012e44:	4b07      	ldr	r3, [pc, #28]	; (8012e64 <LoRaMacInitialization+0x384>)
 8012e46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8012e4a:	4a06      	ldr	r2, [pc, #24]	; (8012e64 <LoRaMacInitialization+0x384>)
 8012e4c:	64d3      	str	r3, [r2, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 8012e4e:	4b05      	ldr	r3, [pc, #20]	; (8012e64 <LoRaMacInitialization+0x384>)
 8012e50:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 8012e54:	4b03      	ldr	r3, [pc, #12]	; (8012e64 <LoRaMacInitialization+0x384>)
 8012e56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 8012e5a:	4b02      	ldr	r3, [pc, #8]	; (8012e64 <LoRaMacInitialization+0x384>)
 8012e5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8012e60:	e00c      	b.n	8012e7c <LoRaMacInitialization+0x39c>
 8012e62:	bf00      	nop
 8012e64:	20000bfc 	.word	0x20000bfc
 8012e68:	200006e0 	.word	0x200006e0
 8012e6c:	01000400 	.word	0x01000400
 8012e70:	20000e20 	.word	0x20000e20
 8012e74:	20000e34 	.word	0x20000e34
 8012e78:	20001794 	.word	0x20001794
 8012e7c:	4a5f      	ldr	r2, [pc, #380]	; (8012ffc <LoRaMacInitialization+0x51c>)
 8012e7e:	6553      	str	r3, [r2, #84]	; 0x54
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 8012e80:	4b5e      	ldr	r3, [pc, #376]	; (8012ffc <LoRaMacInitialization+0x51c>)
 8012e82:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8012e86:	4a5d      	ldr	r2, [pc, #372]	; (8012ffc <LoRaMacInitialization+0x51c>)
 8012e88:	6593      	str	r3, [r2, #88]	; 0x58
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 8012e8a:	4b5c      	ldr	r3, [pc, #368]	; (8012ffc <LoRaMacInitialization+0x51c>)
 8012e8c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8012e90:	4a5a      	ldr	r2, [pc, #360]	; (8012ffc <LoRaMacInitialization+0x51c>)
 8012e92:	65d3      	str	r3, [r2, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 8012e94:	4b59      	ldr	r3, [pc, #356]	; (8012ffc <LoRaMacInitialization+0x51c>)
 8012e96:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8012e9a:	4a58      	ldr	r2, [pc, #352]	; (8012ffc <LoRaMacInitialization+0x51c>)
 8012e9c:	6613      	str	r3, [r2, #96]	; 0x60
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 8012e9e:	4b57      	ldr	r3, [pc, #348]	; (8012ffc <LoRaMacInitialization+0x51c>)
 8012ea0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8012ea4:	4a55      	ldr	r2, [pc, #340]	; (8012ffc <LoRaMacInitialization+0x51c>)
 8012ea6:	6653      	str	r3, [r2, #100]	; 0x64
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 8012ea8:	4b54      	ldr	r3, [pc, #336]	; (8012ffc <LoRaMacInitialization+0x51c>)
 8012eaa:	f893 20b0 	ldrb.w	r2, [r3, #176]	; 0xb0
 8012eae:	4b53      	ldr	r3, [pc, #332]	; (8012ffc <LoRaMacInitialization+0x51c>)
 8012eb0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    params.NvmGroup1 = &Nvm.RegionGroup1;
    params.NvmGroup2 = &Nvm.RegionGroup2;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
 8012eb4:	4b51      	ldr	r3, [pc, #324]	; (8012ffc <LoRaMacInitialization+0x51c>)
 8012eb6:	2201      	movs	r2, #1
 8012eb8:	f883 211f 	strb.w	r2, [r3, #287]	; 0x11f
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 8012ebc:	4a50      	ldr	r2, [pc, #320]	; (8013000 <LoRaMacInitialization+0x520>)
 8012ebe:	693b      	ldr	r3, [r7, #16]
 8012ec0:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    ResetMacParameters( false );
 8012ec4:	2000      	movs	r0, #0
 8012ec6:	f7ff f869 	bl	8011f9c <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 8012eca:	4b4c      	ldr	r3, [pc, #304]	; (8012ffc <LoRaMacInitialization+0x51c>)
 8012ecc:	2201      	movs	r2, #1
 8012ece:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119

    MacCtx.MacPrimitives = primitives;
 8012ed2:	4a4b      	ldr	r2, [pc, #300]	; (8013000 <LoRaMacInitialization+0x520>)
 8012ed4:	697b      	ldr	r3, [r7, #20]
 8012ed6:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 8012eda:	4b49      	ldr	r3, [pc, #292]	; (8013000 <LoRaMacInitialization+0x520>)
 8012edc:	2200      	movs	r2, #0
 8012ede:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
    MacCtx.MacState = LORAMAC_STOPPED;
 8012ee2:	4b47      	ldr	r3, [pc, #284]	; (8013000 <LoRaMacInitialization+0x520>)
 8012ee4:	2201      	movs	r2, #1
 8012ee6:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 8012eea:	4b44      	ldr	r3, [pc, #272]	; (8012ffc <LoRaMacInitialization+0x51c>)
 8012eec:	2200      	movs	r2, #0
 8012eee:	62da      	str	r2, [r3, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 8012ef0:	4b42      	ldr	r3, [pc, #264]	; (8012ffc <LoRaMacInitialization+0x51c>)
 8012ef2:	2200      	movs	r2, #0
 8012ef4:	631a      	str	r2, [r3, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8012ef6:	2300      	movs	r3, #0
 8012ef8:	9300      	str	r3, [sp, #0]
 8012efa:	4b42      	ldr	r3, [pc, #264]	; (8013004 <LoRaMacInitialization+0x524>)
 8012efc:	2200      	movs	r2, #0
 8012efe:	f04f 31ff 	mov.w	r1, #4294967295
 8012f02:	4841      	ldr	r0, [pc, #260]	; (8013008 <LoRaMacInitialization+0x528>)
 8012f04:	f00b f9ca 	bl	801e29c <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8012f08:	2300      	movs	r3, #0
 8012f0a:	9300      	str	r3, [sp, #0]
 8012f0c:	4b3f      	ldr	r3, [pc, #252]	; (801300c <LoRaMacInitialization+0x52c>)
 8012f0e:	2200      	movs	r2, #0
 8012f10:	f04f 31ff 	mov.w	r1, #4294967295
 8012f14:	483e      	ldr	r0, [pc, #248]	; (8013010 <LoRaMacInitialization+0x530>)
 8012f16:	f00b f9c1 	bl	801e29c <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8012f1a:	2300      	movs	r3, #0
 8012f1c:	9300      	str	r3, [sp, #0]
 8012f1e:	4b3d      	ldr	r3, [pc, #244]	; (8013014 <LoRaMacInitialization+0x534>)
 8012f20:	2200      	movs	r2, #0
 8012f22:	f04f 31ff 	mov.w	r1, #4294967295
 8012f26:	483c      	ldr	r0, [pc, #240]	; (8013018 <LoRaMacInitialization+0x538>)
 8012f28:	f00b f9b8 	bl	801e29c <UTIL_TIMER_Create>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
 8012f2c:	2300      	movs	r3, #0
 8012f2e:	9300      	str	r3, [sp, #0]
 8012f30:	4b3a      	ldr	r3, [pc, #232]	; (801301c <LoRaMacInitialization+0x53c>)
 8012f32:	2200      	movs	r2, #0
 8012f34:	f04f 31ff 	mov.w	r1, #4294967295
 8012f38:	4839      	ldr	r0, [pc, #228]	; (8013020 <LoRaMacInitialization+0x540>)
 8012f3a:	f00b f9af 	bl	801e29c <UTIL_TIMER_Create>
    TimerInit( &MacCtx.Rejoin1CycleTimer, OnRejoin1CycleTimerEvent );
    TimerInit( &MacCtx.ForceRejoinReqCycleTimer, OnForceRejoinReqCycleTimerEvent );
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 8012f3e:	4c2f      	ldr	r4, [pc, #188]	; (8012ffc <LoRaMacInitialization+0x51c>)
 8012f40:	463b      	mov	r3, r7
 8012f42:	4618      	mov	r0, r3
 8012f44:	f00a fd1e 	bl	801d984 <SysTimeGetMcuTime>
 8012f48:	f504 7392 	add.w	r3, r4, #292	; 0x124
 8012f4c:	463a      	mov	r2, r7
 8012f4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012f52:	e883 0003 	stmia.w	r3, {r0, r1}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
 8012f56:	4b33      	ldr	r3, [pc, #204]	; (8013024 <LoRaMacInitialization+0x544>)
 8012f58:	2200      	movs	r2, #0
 8012f5a:	601a      	str	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 8012f5c:	4b28      	ldr	r3, [pc, #160]	; (8013000 <LoRaMacInitialization+0x520>)
 8012f5e:	4a32      	ldr	r2, [pc, #200]	; (8013028 <LoRaMacInitialization+0x548>)
 8012f60:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 8012f64:	4b26      	ldr	r3, [pc, #152]	; (8013000 <LoRaMacInitialization+0x520>)
 8012f66:	4a31      	ldr	r2, [pc, #196]	; (801302c <LoRaMacInitialization+0x54c>)
 8012f68:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 8012f6c:	4b24      	ldr	r3, [pc, #144]	; (8013000 <LoRaMacInitialization+0x520>)
 8012f6e:	4a30      	ldr	r2, [pc, #192]	; (8013030 <LoRaMacInitialization+0x550>)
 8012f70:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8012f74:	4b22      	ldr	r3, [pc, #136]	; (8013000 <LoRaMacInitialization+0x520>)
 8012f76:	4a2f      	ldr	r2, [pc, #188]	; (8013034 <LoRaMacInitialization+0x554>)
 8012f78:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 8012f7c:	4b20      	ldr	r3, [pc, #128]	; (8013000 <LoRaMacInitialization+0x520>)
 8012f7e:	4a2e      	ldr	r2, [pc, #184]	; (8013038 <LoRaMacInitialization+0x558>)
 8012f80:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 8012f84:	4b2d      	ldr	r3, [pc, #180]	; (801303c <LoRaMacInitialization+0x55c>)
 8012f86:	681b      	ldr	r3, [r3, #0]
 8012f88:	482d      	ldr	r0, [pc, #180]	; (8013040 <LoRaMacInitialization+0x560>)
 8012f8a:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement ) != SECURE_ELEMENT_SUCCESS )
 8012f8c:	482d      	ldr	r0, [pc, #180]	; (8013044 <LoRaMacInitialization+0x564>)
 8012f8e:	f7fa f9f9 	bl	800d384 <SecureElementInit>
 8012f92:	4603      	mov	r3, r0
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	d001      	beq.n	8012f9c <LoRaMacInitialization+0x4bc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8012f98:	2311      	movs	r3, #17
 8012f9a:	e02b      	b.n	8012ff4 <LoRaMacInitialization+0x514>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 8012f9c:	4817      	ldr	r0, [pc, #92]	; (8012ffc <LoRaMacInitialization+0x51c>)
 8012f9e:	f002 fbc1 	bl	8015724 <LoRaMacCryptoInit>
 8012fa2:	4603      	mov	r3, r0
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	d001      	beq.n	8012fac <LoRaMacInitialization+0x4cc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8012fa8:	2311      	movs	r3, #17
 8012faa:	e023      	b.n	8012ff4 <LoRaMacInitialization+0x514>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 8012fac:	f001 fcbc 	bl	8014928 <LoRaMacCommandsInit>
 8012fb0:	4603      	mov	r3, r0
 8012fb2:	2b00      	cmp	r3, #0
 8012fb4:	d001      	beq.n	8012fba <LoRaMacInitialization+0x4da>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012fb6:	2313      	movs	r3, #19
 8012fb8:	e01c      	b.n	8012ff4 <LoRaMacInitialization+0x514>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 8012fba:	4823      	ldr	r0, [pc, #140]	; (8013048 <LoRaMacInitialization+0x568>)
 8012fbc:	f002 fc52 	bl	8015864 <LoRaMacCryptoSetMulticastReference>
 8012fc0:	4603      	mov	r3, r0
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	d001      	beq.n	8012fca <LoRaMacInitialization+0x4ea>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8012fc6:	2311      	movs	r3, #17
 8012fc8:	e014      	b.n	8012ff4 <LoRaMacInitialization+0x514>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 8012fca:	4b1c      	ldr	r3, [pc, #112]	; (801303c <LoRaMacInitialization+0x55c>)
 8012fcc:	695b      	ldr	r3, [r3, #20]
 8012fce:	4798      	blx	r3
 8012fd0:	4603      	mov	r3, r0
 8012fd2:	4618      	mov	r0, r3
 8012fd4:	f007 f846 	bl	801a064 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8012fd8:	4b18      	ldr	r3, [pc, #96]	; (801303c <LoRaMacInitialization+0x55c>)
 8012fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012fdc:	4a07      	ldr	r2, [pc, #28]	; (8012ffc <LoRaMacInitialization+0x51c>)
 8012fde:	f892 2119 	ldrb.w	r2, [r2, #281]	; 0x119
 8012fe2:	4610      	mov	r0, r2
 8012fe4:	4798      	blx	r3
    Radio.Sleep( );
 8012fe6:	4b15      	ldr	r3, [pc, #84]	; (801303c <LoRaMacInitialization+0x55c>)
 8012fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012fea:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8012fec:	2001      	movs	r0, #1
 8012fee:	f7fd fa7d 	bl	80104ec <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 8012ff2:	2300      	movs	r3, #0
}
 8012ff4:	4618      	mov	r0, r3
 8012ff6:	373c      	adds	r7, #60	; 0x3c
 8012ff8:	46bd      	mov	sp, r7
 8012ffa:	bd90      	pop	{r4, r7, pc}
 8012ffc:	20000bfc 	.word	0x20000bfc
 8013000:	200006e0 	.word	0x200006e0
 8013004:	08010a79 	.word	0x08010a79
 8013008:	20000a48 	.word	0x20000a48
 801300c:	08010b09 	.word	0x08010b09
 8013010:	20000a60 	.word	0x20000a60
 8013014:	08010b81 	.word	0x08010b81
 8013018:	20000a78 	.word	0x20000a78
 801301c:	08010c01 	.word	0x08010c01
 8013020:	20000ae0 	.word	0x20000ae0
 8013024:	20001824 	.word	0x20001824
 8013028:	0800f529 	.word	0x0800f529
 801302c:	0800f585 	.word	0x0800f585
 8013030:	0800f625 	.word	0x0800f625
 8013034:	0800f5f9 	.word	0x0800f5f9
 8013038:	0800f641 	.word	0x0800f641
 801303c:	0801fccc 	.word	0x0801fccc
 8013040:	20000a2c 	.word	0x20000a2c
 8013044:	20000d48 	.word	0x20000d48
 8013048:	20000ce4 	.word	0x20000ce4

0801304c <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 801304c:	b580      	push	{r7, lr}
 801304e:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 8013050:	4b04      	ldr	r3, [pc, #16]	; (8013064 <LoRaMacStart+0x18>)
 8013052:	2200      	movs	r2, #0
 8013054:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    UpdateRxSlotIdleState();
 8013058:	f7fc fb08 	bl	800f66c <UpdateRxSlotIdleState>
    return LORAMAC_STATUS_OK;
 801305c:	2300      	movs	r3, #0
}
 801305e:	4618      	mov	r0, r3
 8013060:	bd80      	pop	{r7, pc}
 8013062:	bf00      	nop
 8013064:	200006e0 	.word	0x200006e0

08013068 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 8013068:	b580      	push	{r7, lr}
 801306a:	af00      	add	r7, sp, #0
    if( LoRaMacIsBusy( ) == false )
 801306c:	f7fd fa06 	bl	801047c <LoRaMacIsBusy>
 8013070:	4603      	mov	r3, r0
 8013072:	f083 0301 	eor.w	r3, r3, #1
 8013076:	b2db      	uxtb	r3, r3
 8013078:	2b00      	cmp	r3, #0
 801307a:	d00d      	beq.n	8013098 <LoRaMacStop+0x30>
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 801307c:	4b0b      	ldr	r3, [pc, #44]	; (80130ac <LoRaMacStop+0x44>)
 801307e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8013082:	2b02      	cmp	r3, #2
 8013084:	d102      	bne.n	801308c <LoRaMacStop+0x24>
        {
            Radio.Sleep( );
 8013086:	4b0a      	ldr	r3, [pc, #40]	; (80130b0 <LoRaMacStop+0x48>)
 8013088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801308a:	4798      	blx	r3
        }
        MacCtx.MacState = LORAMAC_STOPPED;
 801308c:	4b09      	ldr	r3, [pc, #36]	; (80130b4 <LoRaMacStop+0x4c>)
 801308e:	2201      	movs	r2, #1
 8013090:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
        return LORAMAC_STATUS_OK;
 8013094:	2300      	movs	r3, #0
 8013096:	e007      	b.n	80130a8 <LoRaMacStop+0x40>
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 8013098:	4b06      	ldr	r3, [pc, #24]	; (80130b4 <LoRaMacStop+0x4c>)
 801309a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801309e:	2b01      	cmp	r3, #1
 80130a0:	d101      	bne.n	80130a6 <LoRaMacStop+0x3e>
    {
        return LORAMAC_STATUS_OK;
 80130a2:	2300      	movs	r3, #0
 80130a4:	e000      	b.n	80130a8 <LoRaMacStop+0x40>
    }
    return LORAMAC_STATUS_BUSY;
 80130a6:	2301      	movs	r3, #1
}
 80130a8:	4618      	mov	r0, r3
 80130aa:	bd80      	pop	{r7, pc}
 80130ac:	20000bfc 	.word	0x20000bfc
 80130b0:	0801fccc 	.word	0x0801fccc
 80130b4:	200006e0 	.word	0x200006e0

080130b8 <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 80130b8:	b580      	push	{r7, lr}
 80130ba:	af00      	add	r7, sp, #0
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 80130bc:	4812      	ldr	r0, [pc, #72]	; (8013108 <LoRaMacHalt+0x50>)
 80130be:	f00b f991 	bl	801e3e4 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 80130c2:	4812      	ldr	r0, [pc, #72]	; (801310c <LoRaMacHalt+0x54>)
 80130c4:	f00b f98e 	bl	801e3e4 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 80130c8:	4811      	ldr	r0, [pc, #68]	; (8013110 <LoRaMacHalt+0x58>)
 80130ca:	f00b f98b 	bl	801e3e4 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 80130ce:	4811      	ldr	r0, [pc, #68]	; (8013114 <LoRaMacHalt+0x5c>)
 80130d0:	f00b f988 	bl	801e3e4 <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 80130d4:	f001 fa8c 	bl	80145f0 <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 80130d8:	4b0f      	ldr	r3, [pc, #60]	; (8013118 <LoRaMacHalt+0x60>)
 80130da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80130dc:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 80130de:	4b0f      	ldr	r3, [pc, #60]	; (801311c <LoRaMacHalt+0x64>)
 80130e0:	2200      	movs	r2, #0
 80130e2:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    LoRaMacHandleNvm( &Nvm );
 80130e6:	480e      	ldr	r0, [pc, #56]	; (8013120 <LoRaMacHalt+0x68>)
 80130e8:	f7fd fba2 	bl	8010830 <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 80130ec:	f240 52cc 	movw	r2, #1484	; 0x5cc
 80130f0:	490b      	ldr	r1, [pc, #44]	; (8013120 <LoRaMacHalt+0x68>)
 80130f2:	480c      	ldr	r0, [pc, #48]	; (8013124 <LoRaMacHalt+0x6c>)
 80130f4:	f006 ffdb 	bl	801a0ae <memcpy1>
#endif /* CONTEXT_MANAGEMENT_ENABLED */

    MacCtx.MacState = LORAMAC_STOPPED;
 80130f8:	4b08      	ldr	r3, [pc, #32]	; (801311c <LoRaMacHalt+0x64>)
 80130fa:	2201      	movs	r2, #1
 80130fc:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8013100:	2300      	movs	r3, #0
}
 8013102:	4618      	mov	r0, r3
 8013104:	bd80      	pop	{r7, pc}
 8013106:	bf00      	nop
 8013108:	20000a48 	.word	0x20000a48
 801310c:	20000a60 	.word	0x20000a60
 8013110:	20000a78 	.word	0x20000a78
 8013114:	20000ae0 	.word	0x20000ae0
 8013118:	0801fccc 	.word	0x0801fccc
 801311c:	200006e0 	.word	0x200006e0
 8013120:	20000bfc 	.word	0x20000bfc
 8013124:	200011c8 	.word	0x200011c8

08013128 <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8013128:	b590      	push	{r4, r7, lr}
 801312a:	b08d      	sub	sp, #52	; 0x34
 801312c:	af02      	add	r7, sp, #8
 801312e:	4603      	mov	r3, r0
 8013130:	6039      	str	r1, [r7, #0]
 8013132:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8013134:	4b42      	ldr	r3, [pc, #264]	; (8013240 <LoRaMacQueryTxPossible+0x118>)
 8013136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013138:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 801313a:	4b41      	ldr	r3, [pc, #260]	; (8013240 <LoRaMacQueryTxPossible+0x118>)
 801313c:	f993 30dd 	ldrsb.w	r3, [r3, #221]	; 0xdd
 8013140:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8013142:	4b3f      	ldr	r3, [pc, #252]	; (8013240 <LoRaMacQueryTxPossible+0x118>)
 8013144:	f993 30dc 	ldrsb.w	r3, [r3, #220]	; 0xdc
 8013148:	73bb      	strb	r3, [r7, #14]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
 801314a:	4b3e      	ldr	r3, [pc, #248]	; (8013244 <LoRaMacQueryTxPossible+0x11c>)
 801314c:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8013150:	737b      	strb	r3, [r7, #13]
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 8013152:	2300      	movs	r3, #0
 8013154:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 8013156:	683b      	ldr	r3, [r7, #0]
 8013158:	2b00      	cmp	r3, #0
 801315a:	d101      	bne.n	8013160 <LoRaMacQueryTxPossible+0x38>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801315c:	2303      	movs	r3, #3
 801315e:	e06b      	b.n	8013238 <LoRaMacQueryTxPossible+0x110>

    // Setup ADR request
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 8013160:	2300      	movs	r3, #0
 8013162:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8013164:	4b36      	ldr	r3, [pc, #216]	; (8013240 <LoRaMacQueryTxPossible+0x118>)
 8013166:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 801316a:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 801316c:	4b34      	ldr	r3, [pc, #208]	; (8013240 <LoRaMacQueryTxPossible+0x118>)
 801316e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013170:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 8013172:	4b33      	ldr	r3, [pc, #204]	; (8013240 <LoRaMacQueryTxPossible+0x118>)
 8013174:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8013178:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 801317a:	4b31      	ldr	r3, [pc, #196]	; (8013240 <LoRaMacQueryTxPossible+0x118>)
 801317c:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8013180:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8013182:	4b2f      	ldr	r3, [pc, #188]	; (8013240 <LoRaMacQueryTxPossible+0x118>)
 8013184:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013188:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 801318c:	4b2c      	ldr	r3, [pc, #176]	; (8013240 <LoRaMacQueryTxPossible+0x118>)
 801318e:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8013192:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
 8013196:	4b2b      	ldr	r3, [pc, #172]	; (8013244 <LoRaMacQueryTxPossible+0x11c>)
 8013198:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 801319c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80131a0:	4b27      	ldr	r3, [pc, #156]	; (8013240 <LoRaMacQueryTxPossible+0x118>)
 80131a2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80131a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 80131aa:	4b25      	ldr	r3, [pc, #148]	; (8013240 <LoRaMacQueryTxPossible+0x118>)
 80131ac:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80131b0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 80131b4:	f107 040d 	add.w	r4, r7, #13
 80131b8:	f107 020e 	add.w	r2, r7, #14
 80131bc:	f107 010f 	add.w	r1, r7, #15
 80131c0:	f107 0014 	add.w	r0, r7, #20
 80131c4:	f107 0310 	add.w	r3, r7, #16
 80131c8:	9300      	str	r3, [sp, #0]
 80131ca:	4623      	mov	r3, r4
 80131cc:	f001 f8da 	bl	8014384 <LoRaMacAdrCalcNext>
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 80131d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80131d4:	4618      	mov	r0, r3
 80131d6:	f7fd fe59 	bl	8010e8c <GetMaxAppPayloadWithoutFOptsLength>
 80131da:	4603      	mov	r3, r0
 80131dc:	461a      	mov	r2, r3
 80131de:	683b      	ldr	r3, [r7, #0]
 80131e0:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80131e2:	f107 0308 	add.w	r3, r7, #8
 80131e6:	4618      	mov	r0, r3
 80131e8:	f001 fca4 	bl	8014b34 <LoRaMacCommandsGetSizeSerializedCmds>
 80131ec:	4603      	mov	r3, r0
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	d001      	beq.n	80131f6 <LoRaMacQueryTxPossible+0xce>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80131f2:	2313      	movs	r3, #19
 80131f4:	e020      	b.n	8013238 <LoRaMacQueryTxPossible+0x110>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 80131f6:	68bb      	ldr	r3, [r7, #8]
 80131f8:	2b0f      	cmp	r3, #15
 80131fa:	d819      	bhi.n	8013230 <LoRaMacQueryTxPossible+0x108>
 80131fc:	683b      	ldr	r3, [r7, #0]
 80131fe:	785b      	ldrb	r3, [r3, #1]
 8013200:	461a      	mov	r2, r3
 8013202:	68bb      	ldr	r3, [r7, #8]
 8013204:	429a      	cmp	r2, r3
 8013206:	d313      	bcc.n	8013230 <LoRaMacQueryTxPossible+0x108>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8013208:	683b      	ldr	r3, [r7, #0]
 801320a:	785a      	ldrb	r2, [r3, #1]
 801320c:	68bb      	ldr	r3, [r7, #8]
 801320e:	b2db      	uxtb	r3, r3
 8013210:	1ad3      	subs	r3, r2, r3
 8013212:	b2da      	uxtb	r2, r3
 8013214:	683b      	ldr	r3, [r7, #0]
 8013216:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 8013218:	683b      	ldr	r3, [r7, #0]
 801321a:	785b      	ldrb	r3, [r3, #1]
 801321c:	4619      	mov	r1, r3
 801321e:	79fa      	ldrb	r2, [r7, #7]
 8013220:	68bb      	ldr	r3, [r7, #8]
 8013222:	4413      	add	r3, r2
 8013224:	4299      	cmp	r1, r3
 8013226:	d301      	bcc.n	801322c <LoRaMacQueryTxPossible+0x104>
        {
            return LORAMAC_STATUS_OK;
 8013228:	2300      	movs	r3, #0
 801322a:	e005      	b.n	8013238 <LoRaMacQueryTxPossible+0x110>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 801322c:	2308      	movs	r3, #8
 801322e:	e003      	b.n	8013238 <LoRaMacQueryTxPossible+0x110>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 8013230:	683b      	ldr	r3, [r7, #0]
 8013232:	2200      	movs	r2, #0
 8013234:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 8013236:	2308      	movs	r3, #8
    }
}
 8013238:	4618      	mov	r0, r3
 801323a:	372c      	adds	r7, #44	; 0x2c
 801323c:	46bd      	mov	sp, r7
 801323e:	bd90      	pop	{r4, r7, pc}
 8013240:	20000bfc 	.word	0x20000bfc
 8013244:	200006e0 	.word	0x200006e0

08013248 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 8013248:	b590      	push	{r4, r7, lr}
 801324a:	b087      	sub	sp, #28
 801324c:	af00      	add	r7, sp, #0
 801324e:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8013250:	2300      	movs	r3, #0
 8013252:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	2b00      	cmp	r3, #0
 8013258:	d101      	bne.n	801325e <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801325a:	2303      	movs	r3, #3
 801325c:	e1c4      	b.n	80135e8 <LoRaMacMibGetRequestConfirm+0x3a0>
    }

    switch( mibGet->Type )
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	781b      	ldrb	r3, [r3, #0]
 8013262:	2b41      	cmp	r3, #65	; 0x41
 8013264:	f200 81b9 	bhi.w	80135da <LoRaMacMibGetRequestConfirm+0x392>
 8013268:	a201      	add	r2, pc, #4	; (adr r2, 8013270 <LoRaMacMibGetRequestConfirm+0x28>)
 801326a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801326e:	bf00      	nop
 8013270:	08013379 	.word	0x08013379
 8013274:	08013385 	.word	0x08013385
 8013278:	08013391 	.word	0x08013391
 801327c:	0801339d 	.word	0x0801339d
 8013280:	080133a9 	.word	0x080133a9
 8013284:	080133b5 	.word	0x080133b5
 8013288:	080133c1 	.word	0x080133c1
 801328c:	080135db 	.word	0x080135db
 8013290:	080135db 	.word	0x080135db
 8013294:	080135db 	.word	0x080135db
 8013298:	080135db 	.word	0x080135db
 801329c:	080135db 	.word	0x080135db
 80132a0:	080135db 	.word	0x080135db
 80132a4:	080135db 	.word	0x080135db
 80132a8:	080135db 	.word	0x080135db
 80132ac:	080133d5 	.word	0x080133d5
 80132b0:	080133e1 	.word	0x080133e1
 80132b4:	080133ed 	.word	0x080133ed
 80132b8:	0801340f 	.word	0x0801340f
 80132bc:	08013421 	.word	0x08013421
 80132c0:	08013433 	.word	0x08013433
 80132c4:	08013445 	.word	0x08013445
 80132c8:	08013479 	.word	0x08013479
 80132cc:	08013457 	.word	0x08013457
 80132d0:	0801349b 	.word	0x0801349b
 80132d4:	080134a7 	.word	0x080134a7
 80132d8:	080134b1 	.word	0x080134b1
 80132dc:	080134bb 	.word	0x080134bb
 80132e0:	080134c5 	.word	0x080134c5
 80132e4:	080134cf 	.word	0x080134cf
 80132e8:	080134d9 	.word	0x080134d9
 80132ec:	08013505 	.word	0x08013505
 80132f0:	08013511 	.word	0x08013511
 80132f4:	08013529 	.word	0x08013529
 80132f8:	0801351d 	.word	0x0801351d
 80132fc:	08013535 	.word	0x08013535
 8013300:	0801353f 	.word	0x0801353f
 8013304:	0801354b 	.word	0x0801354b
 8013308:	08013567 	.word	0x08013567
 801330c:	08013557 	.word	0x08013557
 8013310:	0801355f 	.word	0x0801355f
 8013314:	080135db 	.word	0x080135db
 8013318:	08013573 	.word	0x08013573
 801331c:	080135db 	.word	0x080135db
 8013320:	080135db 	.word	0x080135db
 8013324:	080135db 	.word	0x080135db
 8013328:	080135db 	.word	0x080135db
 801332c:	080135db 	.word	0x080135db
 8013330:	080135db 	.word	0x080135db
 8013334:	080135db 	.word	0x080135db
 8013338:	080135db 	.word	0x080135db
 801333c:	080135db 	.word	0x080135db
 8013340:	080135db 	.word	0x080135db
 8013344:	080135db 	.word	0x080135db
 8013348:	080135db 	.word	0x080135db
 801334c:	080135db 	.word	0x080135db
 8013350:	080135db 	.word	0x080135db
 8013354:	080135db 	.word	0x080135db
 8013358:	08013587 	.word	0x08013587
 801335c:	08013593 	.word	0x08013593
 8013360:	0801359f 	.word	0x0801359f
 8013364:	080135ab 	.word	0x080135ab
 8013368:	080135b7 	.word	0x080135b7
 801336c:	080135c3 	.word	0x080135c3
 8013370:	080135cf 	.word	0x080135cf
 8013374:	080135d5 	.word	0x080135d5
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 8013378:	4b9d      	ldr	r3, [pc, #628]	; (80135f0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801337a:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	711a      	strb	r2, [r3, #4]
            break;
 8013382:	e130      	b.n	80135e6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8013384:	4b9a      	ldr	r3, [pc, #616]	; (80135f0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013386:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	711a      	strb	r2, [r3, #4]
            break;
 801338e:	e12a      	b.n	80135e6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEV_EUI:
        {
            SecureElementGetDevEui( mibGet->Param.DevEui );
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	685b      	ldr	r3, [r3, #4]
 8013394:	4618      	mov	r0, r3
 8013396:	f7fa fab5 	bl	800d904 <SecureElementGetDevEui>
            break;
 801339a:	e124      	b.n	80135e6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_EUI:
        {
             SecureElementGetJoinEui( mibGet->Param.JoinEui );
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	685b      	ldr	r3, [r3, #4]
 80133a0:	4618      	mov	r0, r3
 80133a2:	f7fa fadf 	bl	800d964 <SecureElementGetJoinEui>
            break;
 80133a6:	e11e      	b.n	80135e6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 80133a8:	4b91      	ldr	r3, [pc, #580]	; (80135f0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80133aa:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	711a      	strb	r2, [r3, #4]
            break;
 80133b2:	e118      	b.n	80135e6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 80133b4:	4b8e      	ldr	r3, [pc, #568]	; (80135f0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80133b6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	605a      	str	r2, [r3, #4]
            break;
 80133be:	e112      	b.n	80135e6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEV_ADDR:
        {
            SecureElementGetDevAddr( Nvm.MacGroup2.NetworkActivation, &mibGet->Param.DevAddr );
 80133c0:	4b8b      	ldr	r3, [pc, #556]	; (80135f0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80133c2:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	3304      	adds	r3, #4
 80133ca:	4619      	mov	r1, r3
 80133cc:	4610      	mov	r0, r2
 80133ce:	f7fa fafb 	bl	800d9c8 <SecureElementGetDevAddr>
            break;
 80133d2:	e108      	b.n	80135e6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 80133d4:	4b86      	ldr	r3, [pc, #536]	; (80135f0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80133d6:	f893 2119 	ldrb.w	r2, [r3, #281]	; 0x119
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	711a      	strb	r2, [r3, #4]
            break;
 80133de:	e102      	b.n	80135e6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 80133e0:	4b83      	ldr	r3, [pc, #524]	; (80135f0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80133e2:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	711a      	strb	r2, [r3, #4]
            break;
 80133ea:	e0fc      	b.n	80135e6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 80133ec:	231c      	movs	r3, #28
 80133ee:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80133f0:	4b7f      	ldr	r3, [pc, #508]	; (80135f0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80133f2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80133f6:	f107 0210 	add.w	r2, r7, #16
 80133fa:	4611      	mov	r1, r2
 80133fc:	4618      	mov	r0, r3
 80133fe:	f003 f855 	bl	80164ac <RegionGetPhyParam>
 8013402:	4603      	mov	r3, r0
 8013404:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 8013406:	68fa      	ldr	r2, [r7, #12]
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	605a      	str	r2, [r3, #4]
            break;
 801340c:	e0eb      	b.n	80135e6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	4a77      	ldr	r2, [pc, #476]	; (80135f0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013412:	3304      	adds	r3, #4
 8013414:	326c      	adds	r2, #108	; 0x6c
 8013416:	e892 0003 	ldmia.w	r2, {r0, r1}
 801341a:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 801341e:	e0e2      	b.n	80135e6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	4a73      	ldr	r2, [pc, #460]	; (80135f0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013424:	3304      	adds	r3, #4
 8013426:	32b4      	adds	r2, #180	; 0xb4
 8013428:	e892 0003 	ldmia.w	r2, {r0, r1}
 801342c:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8013430:	e0d9      	b.n	80135e6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	4a6e      	ldr	r2, [pc, #440]	; (80135f0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013436:	3304      	adds	r3, #4
 8013438:	3274      	adds	r2, #116	; 0x74
 801343a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801343e:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8013442:	e0d0      	b.n	80135e6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	4a6a      	ldr	r2, [pc, #424]	; (80135f0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013448:	3304      	adds	r3, #4
 801344a:	32bc      	adds	r2, #188	; 0xbc
 801344c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013450:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8013454:	e0c7      	b.n	80135e6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 8013456:	231a      	movs	r3, #26
 8013458:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801345a:	4b65      	ldr	r3, [pc, #404]	; (80135f0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801345c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013460:	f107 0210 	add.w	r2, r7, #16
 8013464:	4611      	mov	r1, r2
 8013466:	4618      	mov	r0, r3
 8013468:	f003 f820 	bl	80164ac <RegionGetPhyParam>
 801346c:	4603      	mov	r3, r0
 801346e:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 8013470:	68fa      	ldr	r2, [r7, #12]
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	605a      	str	r2, [r3, #4]
            break;
 8013476:	e0b6      	b.n	80135e6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8013478:	2319      	movs	r3, #25
 801347a:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801347c:	4b5c      	ldr	r3, [pc, #368]	; (80135f0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801347e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013482:	f107 0210 	add.w	r2, r7, #16
 8013486:	4611      	mov	r1, r2
 8013488:	4618      	mov	r0, r3
 801348a:	f003 f80f 	bl	80164ac <RegionGetPhyParam>
 801348e:	4603      	mov	r3, r0
 8013490:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 8013492:	68fa      	ldr	r2, [r7, #12]
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	605a      	str	r2, [r3, #4]
            break;
 8013498:	e0a5      	b.n	80135e6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 801349a:	4b55      	ldr	r3, [pc, #340]	; (80135f0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801349c:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	711a      	strb	r2, [r3, #4]
            break;
 80134a4:	e09f      	b.n	80135e6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 80134a6:	4b52      	ldr	r3, [pc, #328]	; (80135f0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80134a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	605a      	str	r2, [r3, #4]
            break;
 80134ae:	e09a      	b.n	80135e6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 80134b0:	4b4f      	ldr	r3, [pc, #316]	; (80135f0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80134b2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	605a      	str	r2, [r3, #4]
            break;
 80134b8:	e095      	b.n	80135e6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 80134ba:	4b4d      	ldr	r3, [pc, #308]	; (80135f0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80134bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	605a      	str	r2, [r3, #4]
            break;
 80134c2:	e090      	b.n	80135e6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 80134c4:	4b4a      	ldr	r3, [pc, #296]	; (80135f0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80134c6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	605a      	str	r2, [r3, #4]
            break;
 80134cc:	e08b      	b.n	80135e6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 80134ce:	4b48      	ldr	r3, [pc, #288]	; (80135f0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80134d0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	605a      	str	r2, [r3, #4]
            break;
 80134d6:	e086      	b.n	80135e6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_CHANNELS_MIN_TX_DATARATE:
        {
            getPhy.Attribute = PHY_MIN_TX_DR;
 80134d8:	2302      	movs	r3, #2
 80134da:	743b      	strb	r3, [r7, #16]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80134dc:	4b44      	ldr	r3, [pc, #272]	; (80135f0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80134de:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80134e2:	74bb      	strb	r3, [r7, #18]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80134e4:	4b42      	ldr	r3, [pc, #264]	; (80135f0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80134e6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80134ea:	f107 0210 	add.w	r2, r7, #16
 80134ee:	4611      	mov	r1, r2
 80134f0:	4618      	mov	r0, r3
 80134f2:	f002 ffdb 	bl	80164ac <RegionGetPhyParam>
 80134f6:	4603      	mov	r3, r0
 80134f8:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMinTxDatarate = phyParam.Value;
 80134fa:	68fb      	ldr	r3, [r7, #12]
 80134fc:	b25a      	sxtb	r2, r3
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	711a      	strb	r2, [r3, #4]
            break;
 8013502:	e070      	b.n	80135e6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8013504:	4b3a      	ldr	r3, [pc, #232]	; (80135f0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013506:	f993 20dd 	ldrsb.w	r2, [r3, #221]	; 0xdd
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	711a      	strb	r2, [r3, #4]
            break;
 801350e:	e06a      	b.n	80135e6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8013510:	4b37      	ldr	r3, [pc, #220]	; (80135f0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013512:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 8013516:	687b      	ldr	r3, [r7, #4]
 8013518:	711a      	strb	r2, [r3, #4]
            break;
 801351a:	e064      	b.n	80135e6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 801351c:	4b34      	ldr	r3, [pc, #208]	; (80135f0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801351e:	f993 20dc 	ldrsb.w	r2, [r3, #220]	; 0xdc
 8013522:	687b      	ldr	r3, [r7, #4]
 8013524:	711a      	strb	r2, [r3, #4]
            break;
 8013526:	e05e      	b.n	80135e6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8013528:	4b31      	ldr	r3, [pc, #196]	; (80135f0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801352a:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	711a      	strb	r2, [r3, #4]
            break;
 8013532:	e058      	b.n	80135e6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 8013534:	4b2e      	ldr	r3, [pc, #184]	; (80135f0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013536:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	605a      	str	r2, [r3, #4]
            break;
 801353c:	e053      	b.n	80135e6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 801353e:	4b2c      	ldr	r3, [pc, #176]	; (80135f0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013540:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	711a      	strb	r2, [r3, #4]
            break;
 8013548:	e04d      	b.n	80135e6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 801354a:	4b29      	ldr	r3, [pc, #164]	; (80135f0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801354c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	605a      	str	r2, [r3, #4]
            break;
 8013554:	e047      	b.n	80135e6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	4a25      	ldr	r2, [pc, #148]	; (80135f0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801355a:	605a      	str	r2, [r3, #4]
            break;
 801355c:	e043      	b.n	80135e6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NVM_BKP_CTXS:
        {
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
            mibGet->Param.BackupContexts = &NvmBackup;
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	4a24      	ldr	r2, [pc, #144]	; (80135f4 <LoRaMacMibGetRequestConfirm+0x3ac>)
 8013562:	605a      	str	r2, [r3, #4]
#else
            mibGet->Param.BackupContexts = NULL;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
            break;
 8013564:	e03f      	b.n	80135e6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8013566:	4b22      	ldr	r3, [pc, #136]	; (80135f0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013568:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	605a      	str	r2, [r3, #4]
            break;
 8013570:	e039      	b.n	80135e6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 8013572:	687b      	ldr	r3, [r7, #4]
 8013574:	4a1e      	ldr	r2, [pc, #120]	; (80135f0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013576:	f8d2 212c 	ldr.w	r2, [r2, #300]	; 0x12c
 801357a:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 801357c:	687c      	ldr	r4, [r7, #4]
 801357e:	f003 f9a3 	bl	80168c8 <RegionGetVersion>
 8013582:	60a0      	str	r0, [r4, #8]
            break;
 8013584:	e02f      	b.n	80135e6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 8013586:	4b1a      	ldr	r3, [pc, #104]	; (80135f0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013588:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	605a      	str	r2, [r3, #4]
            break;
 8013590:	e029      	b.n	80135e6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_IS_CERT_FPORT_ON:
        {
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 8013592:	4b17      	ldr	r3, [pc, #92]	; (80135f0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013594:	f893 211f 	ldrb.w	r2, [r3, #287]	; 0x11f
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	711a      	strb	r2, [r3, #4]
            break;
 801359c:	e023      	b.n	80135e6 <LoRaMacMibGetRequestConfirm+0x39e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 801359e:	4b14      	ldr	r3, [pc, #80]	; (80135f0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80135a0:	f8b3 2088 	ldrh.w	r2, [r3, #136]	; 0x88
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	809a      	strh	r2, [r3, #4]
            break;
 80135a8:	e01d      	b.n	80135e6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 80135aa:	4b11      	ldr	r3, [pc, #68]	; (80135f0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80135ac:	f8b3 208a 	ldrh.w	r2, [r3, #138]	; 0x8a
 80135b0:	687b      	ldr	r3, [r7, #4]
 80135b2:	809a      	strh	r2, [r3, #4]
            break;
 80135b4:	e017      	b.n	80135e6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 80135b6:	4b0e      	ldr	r3, [pc, #56]	; (80135f0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80135b8:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	; 0xd0
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	809a      	strh	r2, [r3, #4]
            break;
 80135c0:	e011      	b.n	80135e6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 80135c2:	4b0b      	ldr	r3, [pc, #44]	; (80135f0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80135c4:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	; 0xd2
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	809a      	strh	r2, [r3, #4]
            break;
 80135cc:	e00b      	b.n	80135e6 <LoRaMacMibGetRequestConfirm+0x39e>
            else
            {
                mibGet->Param.RssiFreeThreshold = Nvm.RegionGroup2.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 80135ce:	2318      	movs	r3, #24
 80135d0:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 80135d2:	e008      	b.n	80135e6 <LoRaMacMibGetRequestConfirm+0x39e>
            else
            {
                mibGet->Param.CarrierSenseTime = Nvm.RegionGroup2.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 80135d4:	2318      	movs	r3, #24
 80135d6:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 80135d8:	e005      	b.n	80135e6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 80135da:	6878      	ldr	r0, [r7, #4]
 80135dc:	f001 f81f 	bl	801461e <LoRaMacClassBMibGetRequestConfirm>
 80135e0:	4603      	mov	r3, r0
 80135e2:	75fb      	strb	r3, [r7, #23]
            break;
 80135e4:	bf00      	nop
        }
    }
    return status;
 80135e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80135e8:	4618      	mov	r0, r3
 80135ea:	371c      	adds	r7, #28
 80135ec:	46bd      	mov	sp, r7
 80135ee:	bd90      	pop	{r4, r7, pc}
 80135f0:	20000bfc 	.word	0x20000bfc
 80135f4:	200011c8 	.word	0x200011c8

080135f8 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 80135f8:	b580      	push	{r7, lr}
 80135fa:	b086      	sub	sp, #24
 80135fc:	af00      	add	r7, sp, #0
 80135fe:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8013600:	2300      	movs	r3, #0
 8013602:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	2b00      	cmp	r3, #0
 8013608:	d101      	bne.n	801360e <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801360a:	2303      	movs	r3, #3
 801360c:	e396      	b.n	8013d3c <LoRaMacMibSetRequestConfirm+0x744>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 801360e:	4bbd      	ldr	r3, [pc, #756]	; (8013904 <LoRaMacMibSetRequestConfirm+0x30c>)
 8013610:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013614:	f003 0302 	and.w	r3, r3, #2
 8013618:	2b00      	cmp	r3, #0
 801361a:	d001      	beq.n	8013620 <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 801361c:	2301      	movs	r3, #1
 801361e:	e38d      	b.n	8013d3c <LoRaMacMibSetRequestConfirm+0x744>
    }

    switch( mibSet->Type )
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	781b      	ldrb	r3, [r3, #0]
 8013624:	2b41      	cmp	r3, #65	; 0x41
 8013626:	f200 835d 	bhi.w	8013ce4 <LoRaMacMibSetRequestConfirm+0x6ec>
 801362a:	a201      	add	r2, pc, #4	; (adr r2, 8013630 <LoRaMacMibSetRequestConfirm+0x38>)
 801362c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013630:	08013739 	.word	0x08013739
 8013634:	08013749 	.word	0x08013749
 8013638:	08013763 	.word	0x08013763
 801363c:	0801377b 	.word	0x0801377b
 8013640:	08013793 	.word	0x08013793
 8013644:	0801379f 	.word	0x0801379f
 8013648:	080137ab 	.word	0x080137ab
 801364c:	080137d5 	.word	0x080137d5
 8013650:	080137fb 	.word	0x080137fb
 8013654:	08013821 	.word	0x08013821
 8013658:	08013847 	.word	0x08013847
 801365c:	0801386d 	.word	0x0801386d
 8013660:	08013893 	.word	0x08013893
 8013664:	080138b9 	.word	0x080138b9
 8013668:	080138df 	.word	0x080138df
 801366c:	0801390d 	.word	0x0801390d
 8013670:	0801392d 	.word	0x0801392d
 8013674:	08013ce5 	.word	0x08013ce5
 8013678:	08013939 	.word	0x08013939
 801367c:	080139a9 	.word	0x080139a9
 8013680:	080139e9 	.word	0x080139e9
 8013684:	08013a4b 	.word	0x08013a4b
 8013688:	08013abb 	.word	0x08013abb
 801368c:	08013a8b 	.word	0x08013a8b
 8013690:	08013aeb 	.word	0x08013aeb
 8013694:	08013b0d 	.word	0x08013b0d
 8013698:	08013b17 	.word	0x08013b17
 801369c:	08013b21 	.word	0x08013b21
 80136a0:	08013b2b 	.word	0x08013b2b
 80136a4:	08013b35 	.word	0x08013b35
 80136a8:	08013ce5 	.word	0x08013ce5
 80136ac:	08013b3f 	.word	0x08013b3f
 80136b0:	08013b71 	.word	0x08013b71
 80136b4:	08013be5 	.word	0x08013be5
 80136b8:	08013bab 	.word	0x08013bab
 80136bc:	08013c17 	.word	0x08013c17
 80136c0:	08013c2d 	.word	0x08013c2d
 80136c4:	08013c45 	.word	0x08013c45
 80136c8:	08013c51 	.word	0x08013c51
 80136cc:	08013c5d 	.word	0x08013c5d
 80136d0:	08013ce5 	.word	0x08013ce5
 80136d4:	08013c67 	.word	0x08013c67
 80136d8:	08013ce5 	.word	0x08013ce5
 80136dc:	08013ce5 	.word	0x08013ce5
 80136e0:	08013ce5 	.word	0x08013ce5
 80136e4:	08013ce5 	.word	0x08013ce5
 80136e8:	08013ce5 	.word	0x08013ce5
 80136ec:	08013ce5 	.word	0x08013ce5
 80136f0:	08013ce5 	.word	0x08013ce5
 80136f4:	08013ce5 	.word	0x08013ce5
 80136f8:	08013ce5 	.word	0x08013ce5
 80136fc:	08013ce5 	.word	0x08013ce5
 8013700:	08013ce5 	.word	0x08013ce5
 8013704:	08013ce5 	.word	0x08013ce5
 8013708:	08013ce5 	.word	0x08013ce5
 801370c:	08013ce5 	.word	0x08013ce5
 8013710:	08013ce5 	.word	0x08013ce5
 8013714:	08013ce5 	.word	0x08013ce5
 8013718:	08013c91 	.word	0x08013c91
 801371c:	08013c9d 	.word	0x08013c9d
 8013720:	08013ca9 	.word	0x08013ca9
 8013724:	08013cb5 	.word	0x08013cb5
 8013728:	08013cc1 	.word	0x08013cc1
 801372c:	08013ccd 	.word	0x08013ccd
 8013730:	08013cd9 	.word	0x08013cd9
 8013734:	08013cdf 	.word	0x08013cdf
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	791b      	ldrb	r3, [r3, #4]
 801373c:	4618      	mov	r0, r3
 801373e:	f7fd fabb 	bl	8010cb8 <SwitchClass>
 8013742:	4603      	mov	r3, r0
 8013744:	75fb      	strb	r3, [r7, #23]
            break;
 8013746:	e2ee      	b.n	8013d26 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	791b      	ldrb	r3, [r3, #4]
 801374c:	2b02      	cmp	r3, #2
 801374e:	d005      	beq.n	801375c <LoRaMacMibSetRequestConfirm+0x164>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	791a      	ldrb	r2, [r3, #4]
 8013754:	4b6c      	ldr	r3, [pc, #432]	; (8013908 <LoRaMacMibSetRequestConfirm+0x310>)
 8013756:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801375a:	e2e4      	b.n	8013d26 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801375c:	2303      	movs	r3, #3
 801375e:	75fb      	strb	r3, [r7, #23]
            break;
 8013760:	e2e1      	b.n	8013d26 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	685b      	ldr	r3, [r3, #4]
 8013766:	4618      	mov	r0, r3
 8013768:	f7fa f8b4 	bl	800d8d4 <SecureElementSetDevEui>
 801376c:	4603      	mov	r3, r0
 801376e:	2b00      	cmp	r3, #0
 8013770:	f000 82be 	beq.w	8013cf0 <LoRaMacMibSetRequestConfirm+0x6f8>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013774:	2303      	movs	r3, #3
 8013776:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013778:	e2ba      	b.n	8013cf0 <LoRaMacMibSetRequestConfirm+0x6f8>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	685b      	ldr	r3, [r3, #4]
 801377e:	4618      	mov	r0, r3
 8013780:	f7fa f8d8 	bl	800d934 <SecureElementSetJoinEui>
 8013784:	4603      	mov	r3, r0
 8013786:	2b00      	cmp	r3, #0
 8013788:	f000 82b4 	beq.w	8013cf4 <LoRaMacMibSetRequestConfirm+0x6fc>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801378c:	2303      	movs	r3, #3
 801378e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013790:	e2b0      	b.n	8013cf4 <LoRaMacMibSetRequestConfirm+0x6fc>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	791a      	ldrb	r2, [r3, #4]
 8013796:	4b5c      	ldr	r3, [pc, #368]	; (8013908 <LoRaMacMibSetRequestConfirm+0x310>)
 8013798:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
            break;
 801379c:	e2c3      	b.n	8013d26 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	685b      	ldr	r3, [r3, #4]
 80137a2:	4a59      	ldr	r2, [pc, #356]	; (8013908 <LoRaMacMibSetRequestConfirm+0x310>)
 80137a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
            break;
 80137a8:	e2bd      	b.n	8013d26 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_DEV_ADDR:
        {
            if(SecureElementSetDevAddr( Nvm.MacGroup2.NetworkActivation, mibSet->Param.DevAddr ) != SECURE_ELEMENT_SUCCESS )
 80137aa:	4b57      	ldr	r3, [pc, #348]	; (8013908 <LoRaMacMibSetRequestConfirm+0x310>)
 80137ac:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	685b      	ldr	r3, [r3, #4]
 80137b4:	4619      	mov	r1, r3
 80137b6:	4610      	mov	r0, r2
 80137b8:	f7fa f8ec 	bl	800d994 <SecureElementSetDevAddr>
 80137bc:	4603      	mov	r3, r0
 80137be:	2b00      	cmp	r3, #0
 80137c0:	d002      	beq.n	80137c8 <LoRaMacMibSetRequestConfirm+0x1d0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80137c2:	2303      	movs	r3, #3
 80137c4:	75fb      	strb	r3, [r7, #23]
            else
            {
                /* Update Nvm.MacGroup2.devAdr to handle set/get sequence */
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
            }
            break;
 80137c6:	e2ae      	b.n	8013d26 <LoRaMacMibSetRequestConfirm+0x72e>
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	685b      	ldr	r3, [r3, #4]
 80137cc:	4a4e      	ldr	r2, [pc, #312]	; (8013908 <LoRaMacMibSetRequestConfirm+0x310>)
 80137ce:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
            break;
 80137d2:	e2a8      	b.n	8013d26 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	685b      	ldr	r3, [r3, #4]
 80137d8:	2b00      	cmp	r3, #0
 80137da:	d00b      	beq.n	80137f4 <LoRaMacMibSetRequestConfirm+0x1fc>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	685b      	ldr	r3, [r3, #4]
 80137e0:	4619      	mov	r1, r3
 80137e2:	2000      	movs	r0, #0
 80137e4:	f002 f868 	bl	80158b8 <LoRaMacCryptoSetKey>
 80137e8:	4603      	mov	r3, r0
 80137ea:	2b00      	cmp	r3, #0
 80137ec:	f000 8284 	beq.w	8013cf8 <LoRaMacMibSetRequestConfirm+0x700>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80137f0:	2311      	movs	r3, #17
 80137f2:	e2a3      	b.n	8013d3c <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80137f4:	2303      	movs	r3, #3
 80137f6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80137f8:	e27e      	b.n	8013cf8 <LoRaMacMibSetRequestConfirm+0x700>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	685b      	ldr	r3, [r3, #4]
 80137fe:	2b00      	cmp	r3, #0
 8013800:	d00b      	beq.n	801381a <LoRaMacMibSetRequestConfirm+0x222>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 8013802:	687b      	ldr	r3, [r7, #4]
 8013804:	685b      	ldr	r3, [r3, #4]
 8013806:	4619      	mov	r1, r3
 8013808:	2001      	movs	r0, #1
 801380a:	f002 f855 	bl	80158b8 <LoRaMacCryptoSetKey>
 801380e:	4603      	mov	r3, r0
 8013810:	2b00      	cmp	r3, #0
 8013812:	f000 8273 	beq.w	8013cfc <LoRaMacMibSetRequestConfirm+0x704>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013816:	2311      	movs	r3, #17
 8013818:	e290      	b.n	8013d3c <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801381a:	2303      	movs	r3, #3
 801381c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801381e:	e26d      	b.n	8013cfc <LoRaMacMibSetRequestConfirm+0x704>
            break;
        }
#else
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	685b      	ldr	r3, [r3, #4]
 8013824:	2b00      	cmp	r3, #0
 8013826:	d00b      	beq.n	8013840 <LoRaMacMibSetRequestConfirm+0x248>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 8013828:	687b      	ldr	r3, [r7, #4]
 801382a:	685b      	ldr	r3, [r3, #4]
 801382c:	4619      	mov	r1, r3
 801382e:	2008      	movs	r0, #8
 8013830:	f002 f842 	bl	80158b8 <LoRaMacCryptoSetKey>
 8013834:	4603      	mov	r3, r0
 8013836:	2b00      	cmp	r3, #0
 8013838:	f000 8262 	beq.w	8013d00 <LoRaMacMibSetRequestConfirm+0x708>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801383c:	2311      	movs	r3, #17
 801383e:	e27d      	b.n	8013d3c <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013840:	2303      	movs	r3, #3
 8013842:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013844:	e25c      	b.n	8013d00 <LoRaMacMibSetRequestConfirm+0x708>
        }
#endif /* LORAMAC_VERSION */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	685b      	ldr	r3, [r3, #4]
 801384a:	2b00      	cmp	r3, #0
 801384c:	d00b      	beq.n	8013866 <LoRaMacMibSetRequestConfirm+0x26e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	685b      	ldr	r3, [r3, #4]
 8013852:	4619      	mov	r1, r3
 8013854:	2009      	movs	r0, #9
 8013856:	f002 f82f 	bl	80158b8 <LoRaMacCryptoSetKey>
 801385a:	4603      	mov	r3, r0
 801385c:	2b00      	cmp	r3, #0
 801385e:	f000 8251 	beq.w	8013d04 <LoRaMacMibSetRequestConfirm+0x70c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013862:	2311      	movs	r3, #17
 8013864:	e26a      	b.n	8013d3c <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013866:	2303      	movs	r3, #3
 8013868:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801386a:	e24b      	b.n	8013d04 <LoRaMacMibSetRequestConfirm+0x70c>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	685b      	ldr	r3, [r3, #4]
 8013870:	2b00      	cmp	r3, #0
 8013872:	d00b      	beq.n	801388c <LoRaMacMibSetRequestConfirm+0x294>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	685b      	ldr	r3, [r3, #4]
 8013878:	4619      	mov	r1, r3
 801387a:	200c      	movs	r0, #12
 801387c:	f002 f81c 	bl	80158b8 <LoRaMacCryptoSetKey>
 8013880:	4603      	mov	r3, r0
 8013882:	2b00      	cmp	r3, #0
 8013884:	f000 8240 	beq.w	8013d08 <LoRaMacMibSetRequestConfirm+0x710>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013888:	2311      	movs	r3, #17
 801388a:	e257      	b.n	8013d3c <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801388c:	2303      	movs	r3, #3
 801388e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013890:	e23a      	b.n	8013d08 <LoRaMacMibSetRequestConfirm+0x710>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	685b      	ldr	r3, [r3, #4]
 8013896:	2b00      	cmp	r3, #0
 8013898:	d00b      	beq.n	80138b2 <LoRaMacMibSetRequestConfirm+0x2ba>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	685b      	ldr	r3, [r3, #4]
 801389e:	4619      	mov	r1, r3
 80138a0:	200d      	movs	r0, #13
 80138a2:	f002 f809 	bl	80158b8 <LoRaMacCryptoSetKey>
 80138a6:	4603      	mov	r3, r0
 80138a8:	2b00      	cmp	r3, #0
 80138aa:	f000 822f 	beq.w	8013d0c <LoRaMacMibSetRequestConfirm+0x714>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80138ae:	2311      	movs	r3, #17
 80138b0:	e244      	b.n	8013d3c <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80138b2:	2303      	movs	r3, #3
 80138b4:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80138b6:	e229      	b.n	8013d0c <LoRaMacMibSetRequestConfirm+0x714>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	685b      	ldr	r3, [r3, #4]
 80138bc:	2b00      	cmp	r3, #0
 80138be:	d00b      	beq.n	80138d8 <LoRaMacMibSetRequestConfirm+0x2e0>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	685b      	ldr	r3, [r3, #4]
 80138c4:	4619      	mov	r1, r3
 80138c6:	200e      	movs	r0, #14
 80138c8:	f001 fff6 	bl	80158b8 <LoRaMacCryptoSetKey>
 80138cc:	4603      	mov	r3, r0
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	f000 821e 	beq.w	8013d10 <LoRaMacMibSetRequestConfirm+0x718>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80138d4:	2311      	movs	r3, #17
 80138d6:	e231      	b.n	8013d3c <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80138d8:	2303      	movs	r3, #3
 80138da:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80138dc:	e218      	b.n	8013d10 <LoRaMacMibSetRequestConfirm+0x718>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	685b      	ldr	r3, [r3, #4]
 80138e2:	2b00      	cmp	r3, #0
 80138e4:	d00b      	beq.n	80138fe <LoRaMacMibSetRequestConfirm+0x306>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	685b      	ldr	r3, [r3, #4]
 80138ea:	4619      	mov	r1, r3
 80138ec:	200f      	movs	r0, #15
 80138ee:	f001 ffe3 	bl	80158b8 <LoRaMacCryptoSetKey>
 80138f2:	4603      	mov	r3, r0
 80138f4:	2b00      	cmp	r3, #0
 80138f6:	f000 820d 	beq.w	8013d14 <LoRaMacMibSetRequestConfirm+0x71c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80138fa:	2311      	movs	r3, #17
 80138fc:	e21e      	b.n	8013d3c <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80138fe:	2303      	movs	r3, #3
 8013900:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013902:	e207      	b.n	8013d14 <LoRaMacMibSetRequestConfirm+0x71c>
 8013904:	200006e0 	.word	0x200006e0
 8013908:	20000bfc 	.word	0x20000bfc
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	791a      	ldrb	r2, [r3, #4]
 8013910:	4bb2      	ldr	r3, [pc, #712]	; (8013bdc <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013912:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8013916:	4bb2      	ldr	r3, [pc, #712]	; (8013be0 <LoRaMacMibSetRequestConfirm+0x5e8>)
 8013918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801391a:	4ab0      	ldr	r2, [pc, #704]	; (8013bdc <LoRaMacMibSetRequestConfirm+0x5e4>)
 801391c:	f892 2119 	ldrb.w	r2, [r2, #281]	; 0x119
 8013920:	4610      	mov	r0, r2
 8013922:	4798      	blx	r3
            Radio.Sleep( );
 8013924:	4bae      	ldr	r3, [pc, #696]	; (8013be0 <LoRaMacMibSetRequestConfirm+0x5e8>)
 8013926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013928:	4798      	blx	r3
            break;
 801392a:	e1fc      	b.n	8013d26 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	791a      	ldrb	r2, [r3, #4]
 8013930:	4baa      	ldr	r3, [pc, #680]	; (8013bdc <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013932:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
            break;
 8013936:	e1f6      	b.n	8013d26 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	7a1b      	ldrb	r3, [r3, #8]
 801393c:	b25b      	sxtb	r3, r3
 801393e:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8013940:	4ba6      	ldr	r3, [pc, #664]	; (8013bdc <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013942:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8013946:	727b      	strb	r3, [r7, #9]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 8013948:	4ba4      	ldr	r3, [pc, #656]	; (8013bdc <LoRaMacMibSetRequestConfirm+0x5e4>)
 801394a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801394e:	f107 0108 	add.w	r1, r7, #8
 8013952:	2207      	movs	r2, #7
 8013954:	4618      	mov	r0, r3
 8013956:	f002 fdf7 	bl	8016548 <RegionVerify>
 801395a:	4603      	mov	r3, r0
 801395c:	f083 0301 	eor.w	r3, r3, #1
 8013960:	b2db      	uxtb	r3, r3
 8013962:	2b00      	cmp	r3, #0
 8013964:	d002      	beq.n	801396c <LoRaMacMibSetRequestConfirm+0x374>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013966:	2303      	movs	r3, #3
 8013968:	75fb      	strb	r3, [r7, #23]
                else
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            break;
 801396a:	e1dc      	b.n	8013d26 <LoRaMacMibSetRequestConfirm+0x72e>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	685b      	ldr	r3, [r3, #4]
 8013970:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 8013972:	4b9a      	ldr	r3, [pc, #616]	; (8013bdc <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013974:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013978:	f107 0108 	add.w	r1, r7, #8
 801397c:	2200      	movs	r2, #0
 801397e:	4618      	mov	r0, r3
 8013980:	f002 fde2 	bl	8016548 <RegionVerify>
 8013984:	4603      	mov	r3, r0
 8013986:	f083 0301 	eor.w	r3, r3, #1
 801398a:	b2db      	uxtb	r3, r3
 801398c:	2b00      	cmp	r3, #0
 801398e:	d002      	beq.n	8013996 <LoRaMacMibSetRequestConfirm+0x39e>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013990:	2303      	movs	r3, #3
 8013992:	75fb      	strb	r3, [r7, #23]
            break;
 8013994:	e1c7      	b.n	8013d26 <LoRaMacMibSetRequestConfirm+0x72e>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 8013996:	4b91      	ldr	r3, [pc, #580]	; (8013bdc <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013998:	687a      	ldr	r2, [r7, #4]
 801399a:	336c      	adds	r3, #108	; 0x6c
 801399c:	3204      	adds	r2, #4
 801399e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80139a2:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80139a6:	e1be      	b.n	8013d26 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	7a1b      	ldrb	r3, [r3, #8]
 80139ac:	b25b      	sxtb	r3, r3
 80139ae:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80139b0:	4b8a      	ldr	r3, [pc, #552]	; (8013bdc <LoRaMacMibSetRequestConfirm+0x5e4>)
 80139b2:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80139b6:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80139b8:	4b88      	ldr	r3, [pc, #544]	; (8013bdc <LoRaMacMibSetRequestConfirm+0x5e4>)
 80139ba:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80139be:	f107 0108 	add.w	r1, r7, #8
 80139c2:	2207      	movs	r2, #7
 80139c4:	4618      	mov	r0, r3
 80139c6:	f002 fdbf 	bl	8016548 <RegionVerify>
 80139ca:	4603      	mov	r3, r0
 80139cc:	2b00      	cmp	r3, #0
 80139ce:	d008      	beq.n	80139e2 <LoRaMacMibSetRequestConfirm+0x3ea>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 80139d0:	4b82      	ldr	r3, [pc, #520]	; (8013bdc <LoRaMacMibSetRequestConfirm+0x5e4>)
 80139d2:	687a      	ldr	r2, [r7, #4]
 80139d4:	33b4      	adds	r3, #180	; 0xb4
 80139d6:	3204      	adds	r2, #4
 80139d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80139dc:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80139e0:	e1a1      	b.n	8013d26 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80139e2:	2303      	movs	r3, #3
 80139e4:	75fb      	strb	r3, [r7, #23]
            break;
 80139e6:	e19e      	b.n	8013d26 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	7a1b      	ldrb	r3, [r3, #8]
 80139ec:	b25b      	sxtb	r3, r3
 80139ee:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80139f0:	4b7a      	ldr	r3, [pc, #488]	; (8013bdc <LoRaMacMibSetRequestConfirm+0x5e4>)
 80139f2:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80139f6:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80139f8:	4b78      	ldr	r3, [pc, #480]	; (8013bdc <LoRaMacMibSetRequestConfirm+0x5e4>)
 80139fa:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80139fe:	f107 0108 	add.w	r1, r7, #8
 8013a02:	2207      	movs	r2, #7
 8013a04:	4618      	mov	r0, r3
 8013a06:	f002 fd9f 	bl	8016548 <RegionVerify>
 8013a0a:	4603      	mov	r3, r0
 8013a0c:	2b00      	cmp	r3, #0
 8013a0e:	d019      	beq.n	8013a44 <LoRaMacMibSetRequestConfirm+0x44c>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 8013a10:	4b72      	ldr	r3, [pc, #456]	; (8013bdc <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013a12:	687a      	ldr	r2, [r7, #4]
 8013a14:	3374      	adds	r3, #116	; 0x74
 8013a16:	3204      	adds	r2, #4
 8013a18:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013a1c:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8013a20:	4b6e      	ldr	r3, [pc, #440]	; (8013bdc <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013a22:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8013a26:	2b02      	cmp	r3, #2
 8013a28:	f040 8176 	bne.w	8013d18 <LoRaMacMibSetRequestConfirm+0x720>
 8013a2c:	4b6b      	ldr	r3, [pc, #428]	; (8013bdc <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013a2e:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8013a32:	2b00      	cmp	r3, #0
 8013a34:	f000 8170 	beq.w	8013d18 <LoRaMacMibSetRequestConfirm+0x720>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 8013a38:	4b69      	ldr	r3, [pc, #420]	; (8013be0 <LoRaMacMibSetRequestConfirm+0x5e8>)
 8013a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a3c:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 8013a3e:	f7fe fc1b 	bl	8012278 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013a42:	e169      	b.n	8013d18 <LoRaMacMibSetRequestConfirm+0x720>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013a44:	2303      	movs	r3, #3
 8013a46:	75fb      	strb	r3, [r7, #23]
            break;
 8013a48:	e166      	b.n	8013d18 <LoRaMacMibSetRequestConfirm+0x720>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	7a1b      	ldrb	r3, [r3, #8]
 8013a4e:	b25b      	sxtb	r3, r3
 8013a50:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8013a52:	4b62      	ldr	r3, [pc, #392]	; (8013bdc <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013a54:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8013a58:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8013a5a:	4b60      	ldr	r3, [pc, #384]	; (8013bdc <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013a5c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013a60:	f107 0108 	add.w	r1, r7, #8
 8013a64:	2207      	movs	r2, #7
 8013a66:	4618      	mov	r0, r3
 8013a68:	f002 fd6e 	bl	8016548 <RegionVerify>
 8013a6c:	4603      	mov	r3, r0
 8013a6e:	2b00      	cmp	r3, #0
 8013a70:	d008      	beq.n	8013a84 <LoRaMacMibSetRequestConfirm+0x48c>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8013a72:	4b5a      	ldr	r3, [pc, #360]	; (8013bdc <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013a74:	687a      	ldr	r2, [r7, #4]
 8013a76:	33bc      	adds	r3, #188	; 0xbc
 8013a78:	3204      	adds	r2, #4
 8013a7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013a7e:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013a82:	e150      	b.n	8013d26 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013a84:	2303      	movs	r3, #3
 8013a86:	75fb      	strb	r3, [r7, #23]
            break;
 8013a88:	e14d      	b.n	8013d26 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	685b      	ldr	r3, [r3, #4]
 8013a8e:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8013a90:	2301      	movs	r3, #1
 8013a92:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8013a94:	4b51      	ldr	r3, [pc, #324]	; (8013bdc <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013a96:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013a9a:	f107 020c 	add.w	r2, r7, #12
 8013a9e:	4611      	mov	r1, r2
 8013aa0:	4618      	mov	r0, r3
 8013aa2:	f002 fd89 	bl	80165b8 <RegionChanMaskSet>
 8013aa6:	4603      	mov	r3, r0
 8013aa8:	f083 0301 	eor.w	r3, r3, #1
 8013aac:	b2db      	uxtb	r3, r3
 8013aae:	2b00      	cmp	r3, #0
 8013ab0:	f000 8134 	beq.w	8013d1c <LoRaMacMibSetRequestConfirm+0x724>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013ab4:	2303      	movs	r3, #3
 8013ab6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013ab8:	e130      	b.n	8013d1c <LoRaMacMibSetRequestConfirm+0x724>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	685b      	ldr	r3, [r3, #4]
 8013abe:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8013ac0:	2300      	movs	r3, #0
 8013ac2:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8013ac4:	4b45      	ldr	r3, [pc, #276]	; (8013bdc <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013ac6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013aca:	f107 020c 	add.w	r2, r7, #12
 8013ace:	4611      	mov	r1, r2
 8013ad0:	4618      	mov	r0, r3
 8013ad2:	f002 fd71 	bl	80165b8 <RegionChanMaskSet>
 8013ad6:	4603      	mov	r3, r0
 8013ad8:	f083 0301 	eor.w	r3, r3, #1
 8013adc:	b2db      	uxtb	r3, r3
 8013ade:	2b00      	cmp	r3, #0
 8013ae0:	f000 811e 	beq.w	8013d20 <LoRaMacMibSetRequestConfirm+0x728>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013ae4:	2303      	movs	r3, #3
 8013ae6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013ae8:	e11a      	b.n	8013d20 <LoRaMacMibSetRequestConfirm+0x728>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	791b      	ldrb	r3, [r3, #4]
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	d009      	beq.n	8013b06 <LoRaMacMibSetRequestConfirm+0x50e>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8013af6:	2b0f      	cmp	r3, #15
 8013af8:	d805      	bhi.n	8013b06 <LoRaMacMibSetRequestConfirm+0x50e>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	791a      	ldrb	r2, [r3, #4]
 8013afe:	4b37      	ldr	r3, [pc, #220]	; (8013bdc <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013b00:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013b04:	e10f      	b.n	8013d26 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013b06:	2303      	movs	r3, #3
 8013b08:	75fb      	strb	r3, [r7, #23]
            break;
 8013b0a:	e10c      	b.n	8013d26 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	685b      	ldr	r3, [r3, #4]
 8013b10:	4a32      	ldr	r2, [pc, #200]	; (8013bdc <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013b12:	6553      	str	r3, [r2, #84]	; 0x54
            break;
 8013b14:	e107      	b.n	8013d26 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	685b      	ldr	r3, [r3, #4]
 8013b1a:	4a30      	ldr	r2, [pc, #192]	; (8013bdc <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013b1c:	6593      	str	r3, [r2, #88]	; 0x58
            break;
 8013b1e:	e102      	b.n	8013d26 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	685b      	ldr	r3, [r3, #4]
 8013b24:	4a2d      	ldr	r2, [pc, #180]	; (8013bdc <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013b26:	65d3      	str	r3, [r2, #92]	; 0x5c
            break;
 8013b28:	e0fd      	b.n	8013d26 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	685b      	ldr	r3, [r3, #4]
 8013b2e:	4a2b      	ldr	r2, [pc, #172]	; (8013bdc <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013b30:	6613      	str	r3, [r2, #96]	; 0x60
            break;
 8013b32:	e0f8      	b.n	8013d26 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	685b      	ldr	r3, [r3, #4]
 8013b38:	4a28      	ldr	r2, [pc, #160]	; (8013bdc <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013b3a:	6653      	str	r3, [r2, #100]	; 0x64
            break;
 8013b3c:	e0f3      	b.n	8013d26 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8013b44:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 8013b46:	4b25      	ldr	r3, [pc, #148]	; (8013bdc <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013b48:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013b4c:	f107 0108 	add.w	r1, r7, #8
 8013b50:	2206      	movs	r2, #6
 8013b52:	4618      	mov	r0, r3
 8013b54:	f002 fcf8 	bl	8016548 <RegionVerify>
 8013b58:	4603      	mov	r3, r0
 8013b5a:	2b00      	cmp	r3, #0
 8013b5c:	d005      	beq.n	8013b6a <LoRaMacMibSetRequestConfirm+0x572>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 8013b5e:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8013b62:	4b1e      	ldr	r3, [pc, #120]	; (8013bdc <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013b64:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013b68:	e0dd      	b.n	8013d26 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013b6a:	2303      	movs	r3, #3
 8013b6c:	75fb      	strb	r3, [r7, #23]
            break;
 8013b6e:	e0da      	b.n	8013d26 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8013b76:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8013b78:	4b18      	ldr	r3, [pc, #96]	; (8013bdc <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013b7a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8013b7e:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8013b80:	4b16      	ldr	r3, [pc, #88]	; (8013bdc <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013b82:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013b86:	f107 0108 	add.w	r1, r7, #8
 8013b8a:	2205      	movs	r2, #5
 8013b8c:	4618      	mov	r0, r3
 8013b8e:	f002 fcdb 	bl	8016548 <RegionVerify>
 8013b92:	4603      	mov	r3, r0
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	d005      	beq.n	8013ba4 <LoRaMacMibSetRequestConfirm+0x5ac>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8013b98:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8013b9c:	4b0f      	ldr	r3, [pc, #60]	; (8013bdc <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013b9e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013ba2:	e0c0      	b.n	8013d26 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013ba4:	2303      	movs	r3, #3
 8013ba6:	75fb      	strb	r3, [r7, #23]
            break;
 8013ba8:	e0bd      	b.n	8013d26 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8013bb0:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8013bb2:	4b0a      	ldr	r3, [pc, #40]	; (8013bdc <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013bb4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013bb8:	f107 0108 	add.w	r1, r7, #8
 8013bbc:	220a      	movs	r2, #10
 8013bbe:	4618      	mov	r0, r3
 8013bc0:	f002 fcc2 	bl	8016548 <RegionVerify>
 8013bc4:	4603      	mov	r3, r0
 8013bc6:	2b00      	cmp	r3, #0
 8013bc8:	d005      	beq.n	8013bd6 <LoRaMacMibSetRequestConfirm+0x5de>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 8013bca:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8013bce:	4b03      	ldr	r3, [pc, #12]	; (8013bdc <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013bd0:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013bd4:	e0a7      	b.n	8013d26 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013bd6:	2303      	movs	r3, #3
 8013bd8:	75fb      	strb	r3, [r7, #23]
            break;
 8013bda:	e0a4      	b.n	8013d26 <LoRaMacMibSetRequestConfirm+0x72e>
 8013bdc:	20000bfc 	.word	0x20000bfc
 8013be0:	0801fccc 	.word	0x0801fccc
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8013bea:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8013bec:	4b55      	ldr	r3, [pc, #340]	; (8013d44 <LoRaMacMibSetRequestConfirm+0x74c>)
 8013bee:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013bf2:	f107 0108 	add.w	r1, r7, #8
 8013bf6:	2209      	movs	r2, #9
 8013bf8:	4618      	mov	r0, r3
 8013bfa:	f002 fca5 	bl	8016548 <RegionVerify>
 8013bfe:	4603      	mov	r3, r0
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	d005      	beq.n	8013c10 <LoRaMacMibSetRequestConfirm+0x618>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 8013c04:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8013c08:	4b4e      	ldr	r3, [pc, #312]	; (8013d44 <LoRaMacMibSetRequestConfirm+0x74c>)
 8013c0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013c0e:	e08a      	b.n	8013d26 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013c10:	2303      	movs	r3, #3
 8013c12:	75fb      	strb	r3, [r7, #23]
            break;
 8013c14:	e087      	b.n	8013d26 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	685b      	ldr	r3, [r3, #4]
 8013c1a:	4a4a      	ldr	r2, [pc, #296]	; (8013d44 <LoRaMacMibSetRequestConfirm+0x74c>)
 8013c1c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8013c20:	4b48      	ldr	r3, [pc, #288]	; (8013d44 <LoRaMacMibSetRequestConfirm+0x74c>)
 8013c22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8013c26:	4a47      	ldr	r2, [pc, #284]	; (8013d44 <LoRaMacMibSetRequestConfirm+0x74c>)
 8013c28:	64d3      	str	r3, [r2, #76]	; 0x4c
            break;
 8013c2a:	e07c      	b.n	8013d26 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	791a      	ldrb	r2, [r3, #4]
 8013c30:	4b44      	ldr	r3, [pc, #272]	; (8013d44 <LoRaMacMibSetRequestConfirm+0x74c>)
 8013c32:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 8013c36:	4b43      	ldr	r3, [pc, #268]	; (8013d44 <LoRaMacMibSetRequestConfirm+0x74c>)
 8013c38:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 8013c3c:	4b41      	ldr	r3, [pc, #260]	; (8013d44 <LoRaMacMibSetRequestConfirm+0x74c>)
 8013c3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            break;
 8013c42:	e070      	b.n	8013d26 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	685b      	ldr	r3, [r3, #4]
 8013c48:	4a3e      	ldr	r2, [pc, #248]	; (8013d44 <LoRaMacMibSetRequestConfirm+0x74c>)
 8013c4a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
            break;
 8013c4e:	e06a      	b.n	8013d26 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	685b      	ldr	r3, [r3, #4]
 8013c54:	4a3b      	ldr	r2, [pc, #236]	; (8013d44 <LoRaMacMibSetRequestConfirm+0x74c>)
 8013c56:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
            break;
 8013c5a:	e064      	b.n	8013d26 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 8013c5c:	f7fe fd40 	bl	80126e0 <RestoreNvmData>
 8013c60:	4603      	mov	r3, r0
 8013c62:	75fb      	strb	r3, [r7, #23]
            break;
 8013c64:	e05f      	b.n	8013d26 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	799b      	ldrb	r3, [r3, #6]
 8013c6a:	2b01      	cmp	r3, #1
 8013c6c:	d80d      	bhi.n	8013c8a <LoRaMacMibSetRequestConfirm+0x692>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 8013c6e:	4a35      	ldr	r2, [pc, #212]	; (8013d44 <LoRaMacMibSetRequestConfirm+0x74c>)
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	685b      	ldr	r3, [r3, #4]
 8013c74:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	6858      	ldr	r0, [r3, #4]
 8013c7c:	f001 fd7e 	bl	801577c <LoRaMacCryptoSetLrWanVersion>
 8013c80:	4603      	mov	r3, r0
 8013c82:	2b00      	cmp	r3, #0
 8013c84:	d04e      	beq.n	8013d24 <LoRaMacMibSetRequestConfirm+0x72c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013c86:	2311      	movs	r3, #17
 8013c88:	e058      	b.n	8013d3c <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013c8a:	2303      	movs	r3, #3
 8013c8c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013c8e:	e049      	b.n	8013d24 <LoRaMacMibSetRequestConfirm+0x72c>
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	685b      	ldr	r3, [r3, #4]
 8013c94:	4a2b      	ldr	r2, [pc, #172]	; (8013d44 <LoRaMacMibSetRequestConfirm+0x74c>)
 8013c96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
            break;
 8013c9a:	e044      	b.n	8013d26 <LoRaMacMibSetRequestConfirm+0x72e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_IS_CERT_FPORT_ON:
        {
            Nvm.MacGroup2.IsCertPortOn = mibSet->Param.IsCertPortOn;
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	791a      	ldrb	r2, [r3, #4]
 8013ca0:	4b28      	ldr	r3, [pc, #160]	; (8013d44 <LoRaMacMibSetRequestConfirm+0x74c>)
 8013ca2:	f883 211f 	strb.w	r2, [r3, #287]	; 0x11f
            break;
 8013ca6:	e03e      	b.n	8013d26 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            Nvm.MacGroup2.MacParams.AdrAckLimit = mibSet->Param.AdrAckLimit;
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	889a      	ldrh	r2, [r3, #4]
 8013cac:	4b25      	ldr	r3, [pc, #148]	; (8013d44 <LoRaMacMibSetRequestConfirm+0x74c>)
 8013cae:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
            break;
 8013cb2:	e038      	b.n	8013d26 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ADR_ACK_DELAY:
        {
            Nvm.MacGroup2.MacParams.AdrAckDelay = mibSet->Param.AdrAckDelay;
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	889a      	ldrh	r2, [r3, #4]
 8013cb8:	4b22      	ldr	r3, [pc, #136]	; (8013d44 <LoRaMacMibSetRequestConfirm+0x74c>)
 8013cba:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
            break;
 8013cbe:	e032      	b.n	8013d26 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = mibSet->Param.AdrAckLimit;
 8013cc0:	687b      	ldr	r3, [r7, #4]
 8013cc2:	889a      	ldrh	r2, [r3, #4]
 8013cc4:	4b1f      	ldr	r3, [pc, #124]	; (8013d44 <LoRaMacMibSetRequestConfirm+0x74c>)
 8013cc6:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
            break;
 8013cca:	e02c      	b.n	8013d26 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = mibSet->Param.AdrAckDelay;
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	889a      	ldrh	r2, [r3, #4]
 8013cd0:	4b1c      	ldr	r3, [pc, #112]	; (8013d44 <LoRaMacMibSetRequestConfirm+0x74c>)
 8013cd2:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
            break;
 8013cd6:	e026      	b.n	8013d26 <LoRaMacMibSetRequestConfirm+0x72e>
            else
            {
                Nvm.RegionGroup2.RssiFreeThreshold = mibSet->Param.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8013cd8:	2318      	movs	r3, #24
 8013cda:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8013cdc:	e023      	b.n	8013d26 <LoRaMacMibSetRequestConfirm+0x72e>
            else
            {
                Nvm.RegionGroup2.CarrierSenseTime = mibSet->Param.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8013cde:	2318      	movs	r3, #24
 8013ce0:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8013ce2:	e020      	b.n	8013d26 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8013ce4:	6878      	ldr	r0, [r7, #4]
 8013ce6:	f000 fca4 	bl	8014632 <LoRaMacMibClassBSetRequestConfirm>
 8013cea:	4603      	mov	r3, r0
 8013cec:	75fb      	strb	r3, [r7, #23]
            break;
 8013cee:	e01a      	b.n	8013d26 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8013cf0:	bf00      	nop
 8013cf2:	e018      	b.n	8013d26 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8013cf4:	bf00      	nop
 8013cf6:	e016      	b.n	8013d26 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8013cf8:	bf00      	nop
 8013cfa:	e014      	b.n	8013d26 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8013cfc:	bf00      	nop
 8013cfe:	e012      	b.n	8013d26 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8013d00:	bf00      	nop
 8013d02:	e010      	b.n	8013d26 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8013d04:	bf00      	nop
 8013d06:	e00e      	b.n	8013d26 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8013d08:	bf00      	nop
 8013d0a:	e00c      	b.n	8013d26 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8013d0c:	bf00      	nop
 8013d0e:	e00a      	b.n	8013d26 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8013d10:	bf00      	nop
 8013d12:	e008      	b.n	8013d26 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8013d14:	bf00      	nop
 8013d16:	e006      	b.n	8013d26 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8013d18:	bf00      	nop
 8013d1a:	e004      	b.n	8013d26 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8013d1c:	bf00      	nop
 8013d1e:	e002      	b.n	8013d26 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8013d20:	bf00      	nop
 8013d22:	e000      	b.n	8013d26 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8013d24:	bf00      	nop
        }
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( status == LORAMAC_STATUS_OK )
 8013d26:	7dfb      	ldrb	r3, [r7, #23]
 8013d28:	2b00      	cmp	r3, #0
 8013d2a:	d106      	bne.n	8013d3a <LoRaMacMibSetRequestConfirm+0x742>
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8013d2c:	4a06      	ldr	r2, [pc, #24]	; (8013d48 <LoRaMacMibSetRequestConfirm+0x750>)
 8013d2e:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8013d32:	f043 0320 	orr.w	r3, r3, #32
 8013d36:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
#endif /* LORAMAC_VERSION */
    return status;
 8013d3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8013d3c:	4618      	mov	r0, r3
 8013d3e:	3718      	adds	r7, #24
 8013d40:	46bd      	mov	sp, r7
 8013d42:	bd80      	pop	{r7, pc}
 8013d44:	20000bfc 	.word	0x20000bfc
 8013d48:	200006e0 	.word	0x200006e0

08013d4c <LoRaMacMlmeRequest>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 8013d4c:	b580      	push	{r7, lr}
 8013d4e:	b08a      	sub	sp, #40	; 0x28
 8013d50:	af00      	add	r7, sp, #0
 8013d52:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013d54:	2302      	movs	r3, #2
 8013d56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8013d5a:	2300      	movs	r3, #0
 8013d5c:	83bb      	strh	r3, [r7, #28]

    if( mlmeRequest == NULL )
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	2b00      	cmp	r3, #0
 8013d62:	d101      	bne.n	8013d68 <LoRaMacMlmeRequest+0x1c>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013d64:	2303      	movs	r3, #3
 8013d66:	e17e      	b.n	8014066 <LoRaMacMlmeRequest+0x31a>
    }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	2200      	movs	r2, #0
 8013d6c:	611a      	str	r2, [r3, #16]
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 8013d6e:	f7fc fb85 	bl	801047c <LoRaMacIsBusy>
 8013d72:	4603      	mov	r3, r0
 8013d74:	2b00      	cmp	r3, #0
 8013d76:	d001      	beq.n	8013d7c <LoRaMacMlmeRequest+0x30>
    {
        return LORAMAC_STATUS_BUSY;
 8013d78:	2301      	movs	r3, #1
 8013d7a:	e174      	b.n	8014066 <LoRaMacMlmeRequest+0x31a>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8013d7c:	f001 f994 	bl	80150a8 <LoRaMacConfirmQueueIsFull>
 8013d80:	4603      	mov	r3, r0
 8013d82:	2b00      	cmp	r3, #0
 8013d84:	d001      	beq.n	8013d8a <LoRaMacMlmeRequest+0x3e>
    {
        return LORAMAC_STATUS_BUSY;
 8013d86:	2301      	movs	r3, #1
 8013d88:	e16d      	b.n	8014066 <LoRaMacMlmeRequest+0x31a>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8013d8a:	f001 f981 	bl	8015090 <LoRaMacConfirmQueueGetCnt>
 8013d8e:	4603      	mov	r3, r0
 8013d90:	2b00      	cmp	r3, #0
 8013d92:	d104      	bne.n	8013d9e <LoRaMacMlmeRequest+0x52>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8013d94:	2214      	movs	r2, #20
 8013d96:	2100      	movs	r1, #0
 8013d98:	48b5      	ldr	r0, [pc, #724]	; (8014070 <LoRaMacMlmeRequest+0x324>)
 8013d9a:	f006 f9c3 	bl	801a124 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013d9e:	4bb5      	ldr	r3, [pc, #724]	; (8014074 <LoRaMacMlmeRequest+0x328>)
 8013da0:	2201      	movs	r2, #1
 8013da2:	f883 2455 	strb.w	r2, [r3, #1109]	; 0x455

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8013da6:	4ab3      	ldr	r2, [pc, #716]	; (8014074 <LoRaMacMlmeRequest+0x328>)
 8013da8:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8013dac:	f043 0304 	orr.w	r3, r3, #4
 8013db0:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    queueElement.Request = mlmeRequest->Type;
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	781b      	ldrb	r3, [r3, #0]
 8013db8:	f887 3020 	strb.w	r3, [r7, #32]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013dbc:	2301      	movs	r3, #1
 8013dbe:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    queueElement.RestrictCommonReadyToHandle = false;
 8013dc2:	2300      	movs	r3, #0
 8013dc4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    queueElement.ReadyToHandle = false;
 8013dc8:	2300      	movs	r3, #0
 8013dca:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
#endif /* LORAMAC_VERSION */

    switch( mlmeRequest->Type )
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	781b      	ldrb	r3, [r3, #0]
 8013dd2:	3b01      	subs	r3, #1
 8013dd4:	2b0c      	cmp	r3, #12
 8013dd6:	f200 811a 	bhi.w	801400e <LoRaMacMlmeRequest+0x2c2>
 8013dda:	a201      	add	r2, pc, #4	; (adr r2, 8013de0 <LoRaMacMlmeRequest+0x94>)
 8013ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013de0:	08013e15 	.word	0x08013e15
 8013de4:	0801400f 	.word	0x0801400f
 8013de8:	0801400f 	.word	0x0801400f
 8013dec:	0801400f 	.word	0x0801400f
 8013df0:	08013ef3 	.word	0x08013ef3
 8013df4:	08013f17 	.word	0x08013f17
 8013df8:	0801400f 	.word	0x0801400f
 8013dfc:	0801400f 	.word	0x0801400f
 8013e00:	08013f35 	.word	0x08013f35
 8013e04:	0801400f 	.word	0x0801400f
 8013e08:	08013fdd 	.word	0x08013fdd
 8013e0c:	08013f71 	.word	0x08013f71
 8013e10:	08013fbb 	.word	0x08013fbb
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8013e14:	4b97      	ldr	r3, [pc, #604]	; (8014074 <LoRaMacMlmeRequest+0x328>)
 8013e16:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013e1a:	f003 0320 	and.w	r3, r3, #32
 8013e1e:	2b00      	cmp	r3, #0
 8013e20:	d001      	beq.n	8013e26 <LoRaMacMlmeRequest+0xda>
            {
                return LORAMAC_STATUS_BUSY;
 8013e22:	2301      	movs	r3, #1
 8013e24:	e11f      	b.n	8014066 <LoRaMacMlmeRequest+0x31a>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_OTAA )
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	791b      	ldrb	r3, [r3, #4]
 8013e2a:	2b02      	cmp	r3, #2
 8013e2c:	d135      	bne.n	8013e9a <LoRaMacMlmeRequest+0x14e>
            {
                ResetMacParameters( false );
 8013e2e:	2000      	movs	r0, #0
 8013e30:	f7fe f8b4 	bl	8011f9c <ResetMacParameters>

                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8013e34:	4b90      	ldr	r3, [pc, #576]	; (8014078 <LoRaMacMlmeRequest+0x32c>)
 8013e36:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	795b      	ldrb	r3, [r3, #5]
 8013e3e:	b25b      	sxtb	r3, r3
 8013e40:	2200      	movs	r2, #0
 8013e42:	4619      	mov	r1, r3
 8013e44:	f002 fcc8 	bl	80167d8 <RegionAlternateDr>
 8013e48:	4603      	mov	r3, r0
 8013e4a:	461a      	mov	r2, r3
 8013e4c:	4b8a      	ldr	r3, [pc, #552]	; (8014078 <LoRaMacMlmeRequest+0x32c>)
 8013e4e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                Nvm.MacGroup1.ChannelsTxPower = mlmeRequest->Req.Join.TxPower;
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	f993 2006 	ldrsb.w	r2, [r3, #6]
 8013e58:	4b87      	ldr	r3, [pc, #540]	; (8014078 <LoRaMacMlmeRequest+0x32c>)
 8013e5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8013e5e:	2307      	movs	r3, #7
 8013e60:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

                status = SendReJoinReq( JOIN_REQ );
 8013e64:	20ff      	movs	r0, #255	; 0xff
 8013e66:	f7fd fe1d 	bl	8011aa4 <SendReJoinReq>
 8013e6a:	4603      	mov	r3, r0
 8013e6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

                if( status != LORAMAC_STATUS_OK )
 8013e70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013e74:	2b00      	cmp	r3, #0
 8013e76:	f000 80cc 	beq.w	8014012 <LoRaMacMlmeRequest+0x2c6>
                {
                    // Revert back the previous datarate ( mainly used for US915 like regions )
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8013e7a:	4b7f      	ldr	r3, [pc, #508]	; (8014078 <LoRaMacMlmeRequest+0x32c>)
 8013e7c:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	795b      	ldrb	r3, [r3, #5]
 8013e84:	b25b      	sxtb	r3, r3
 8013e86:	2201      	movs	r2, #1
 8013e88:	4619      	mov	r1, r3
 8013e8a:	f002 fca5 	bl	80167d8 <RegionAlternateDr>
 8013e8e:	4603      	mov	r3, r0
 8013e90:	461a      	mov	r2, r3
 8013e92:	4b79      	ldr	r3, [pc, #484]	; (8014078 <LoRaMacMlmeRequest+0x32c>)
 8013e94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                OnMacProcessNotify( );
                MacCtx.MacFlags.Bits.MacDone = 1;
                status = LORAMAC_STATUS_OK;
            }
#endif /* LORAMAC_VERSION */
            break;
 8013e98:	e0bb      	b.n	8014012 <LoRaMacMlmeRequest+0x2c6>
            else if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_ABP )
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	791b      	ldrb	r3, [r3, #4]
 8013e9e:	2b01      	cmp	r3, #1
 8013ea0:	f040 80b7 	bne.w	8014012 <LoRaMacMlmeRequest+0x2c6>
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 8013ea4:	4b74      	ldr	r3, [pc, #464]	; (8014078 <LoRaMacMlmeRequest+0x32c>)
 8013ea6:	2200      	movs	r2, #0
 8013ea8:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8013eac:	2302      	movs	r3, #2
 8013eae:	763b      	strb	r3, [r7, #24]
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8013eb0:	4b71      	ldr	r3, [pc, #452]	; (8014078 <LoRaMacMlmeRequest+0x32c>)
 8013eb2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013eb6:	f107 020c 	add.w	r2, r7, #12
 8013eba:	4611      	mov	r1, r2
 8013ebc:	4618      	mov	r0, r3
 8013ebe:	f002 fb2c 	bl	801651a <RegionInitDefaults>
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
 8013ec2:	687b      	ldr	r3, [r7, #4]
 8013ec4:	791a      	ldrb	r2, [r3, #4]
 8013ec6:	4b6c      	ldr	r3, [pc, #432]	; (8014078 <LoRaMacMlmeRequest+0x32c>)
 8013ec8:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8013ecc:	2300      	movs	r3, #0
 8013ece:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
                queueElement.ReadyToHandle = true;
 8013ed2:	2301      	movs	r3, #1
 8013ed4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
                OnMacProcessNotify( );
 8013ed8:	f7fe fdb2 	bl	8012a40 <OnMacProcessNotify>
                MacCtx.MacFlags.Bits.MacDone = 1;
 8013edc:	4a65      	ldr	r2, [pc, #404]	; (8014074 <LoRaMacMlmeRequest+0x328>)
 8013ede:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8013ee2:	f043 0310 	orr.w	r3, r3, #16
 8013ee6:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
                status = LORAMAC_STATUS_OK;
 8013eea:	2300      	movs	r3, #0
 8013eec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8013ef0:	e08f      	b.n	8014012 <LoRaMacMlmeRequest+0x2c6>
        }
#endif /* LORAMAC_VERSION */
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8013ef2:	2300      	movs	r3, #0
 8013ef4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8013ef8:	f107 031c 	add.w	r3, r7, #28
 8013efc:	2200      	movs	r2, #0
 8013efe:	4619      	mov	r1, r3
 8013f00:	2002      	movs	r0, #2
 8013f02:	f000 fd21 	bl	8014948 <LoRaMacCommandsAddCmd>
 8013f06:	4603      	mov	r3, r0
 8013f08:	2b00      	cmp	r3, #0
 8013f0a:	f000 8084 	beq.w	8014016 <LoRaMacMlmeRequest+0x2ca>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013f0e:	2313      	movs	r3, #19
 8013f10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 8013f14:	e07f      	b.n	8014016 <LoRaMacMlmeRequest+0x2ca>
            break;
        }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	8898      	ldrh	r0, [r3, #4]
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	6899      	ldr	r1, [r3, #8]
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8013f24:	b2db      	uxtb	r3, r3
 8013f26:	461a      	mov	r2, r3
 8013f28:	f7fe fbba 	bl	80126a0 <SetTxContinuousWave>
 8013f2c:	4603      	mov	r3, r0
 8013f2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8013f32:	e077      	b.n	8014024 <LoRaMacMlmeRequest+0x2d8>
        }
#endif /* LORAMAC_VERSION */
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8013f34:	2300      	movs	r3, #0
 8013f36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            MacCommand_t* newCmd;
            /* ST_CODE Begin: Add MAC command condition to prevent some duplicated request */
            if (LoRaMacCommandsGetCmd( MOTE_MAC_DEVICE_TIME_REQ, &newCmd ) == LORAMAC_COMMANDS_SUCCESS)
 8013f3a:	f107 0308 	add.w	r3, r7, #8
 8013f3e:	4619      	mov	r1, r3
 8013f40:	200d      	movs	r0, #13
 8013f42:	f000 fd81 	bl	8014a48 <LoRaMacCommandsGetCmd>
 8013f46:	4603      	mov	r3, r0
 8013f48:	2b00      	cmp	r3, #0
 8013f4a:	d103      	bne.n	8013f54 <LoRaMacMlmeRequest+0x208>
            {
                status = LORAMAC_STATUS_OK;
 8013f4c:	2300      	movs	r3, #0
 8013f4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            /* ST_CODE End */
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
            }
            break;
 8013f52:	e062      	b.n	801401a <LoRaMacMlmeRequest+0x2ce>
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8013f54:	f107 031c 	add.w	r3, r7, #28
 8013f58:	2200      	movs	r2, #0
 8013f5a:	4619      	mov	r1, r3
 8013f5c:	200d      	movs	r0, #13
 8013f5e:	f000 fcf3 	bl	8014948 <LoRaMacCommandsAddCmd>
 8013f62:	4603      	mov	r3, r0
 8013f64:	2b00      	cmp	r3, #0
 8013f66:	d058      	beq.n	801401a <LoRaMacMlmeRequest+0x2ce>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013f68:	2313      	movs	r3, #19
 8013f6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8013f6e:	e054      	b.n	801401a <LoRaMacMlmeRequest+0x2ce>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8013f70:	4b41      	ldr	r3, [pc, #260]	; (8014078 <LoRaMacMlmeRequest+0x32c>)
 8013f72:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8013f76:	2b00      	cmp	r3, #0
 8013f78:	d151      	bne.n	801401e <LoRaMacMlmeRequest+0x2d2>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	791b      	ldrb	r3, [r3, #4]
 8013f7e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	791b      	ldrb	r3, [r3, #4]
 8013f86:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8013f8a:	b2db      	uxtb	r3, r3
 8013f8c:	4618      	mov	r0, r3
 8013f8e:	f000 fb25 	bl	80145dc <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8013f92:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013f96:	773b      	strb	r3, [r7, #28]
                status = LORAMAC_STATUS_OK;
 8013f98:	2300      	movs	r3, #0
 8013f9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8013f9e:	f107 031c 	add.w	r3, r7, #28
 8013fa2:	2201      	movs	r2, #1
 8013fa4:	4619      	mov	r1, r3
 8013fa6:	2010      	movs	r0, #16
 8013fa8:	f000 fcce 	bl	8014948 <LoRaMacCommandsAddCmd>
 8013fac:	4603      	mov	r3, r0
 8013fae:	2b00      	cmp	r3, #0
 8013fb0:	d035      	beq.n	801401e <LoRaMacMlmeRequest+0x2d2>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013fb2:	2313      	movs	r3, #19
 8013fb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }
            }
            break;
 8013fb8:	e031      	b.n	801401e <LoRaMacMlmeRequest+0x2d2>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8013fba:	2300      	movs	r3, #0
 8013fbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8013fc0:	f107 031c 	add.w	r3, r7, #28
 8013fc4:	2200      	movs	r2, #0
 8013fc6:	4619      	mov	r1, r3
 8013fc8:	2012      	movs	r0, #18
 8013fca:	f000 fcbd 	bl	8014948 <LoRaMacCommandsAddCmd>
 8013fce:	4603      	mov	r3, r0
 8013fd0:	2b00      	cmp	r3, #0
 8013fd2:	d026      	beq.n	8014022 <LoRaMacMlmeRequest+0x2d6>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013fd4:	2313      	movs	r3, #19
 8013fd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 8013fda:	e022      	b.n	8014022 <LoRaMacMlmeRequest+0x2d6>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 8013fdc:	2301      	movs	r3, #1
 8013fde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8013fe2:	f000 fab1 	bl	8014548 <LoRaMacClassBIsAcquisitionInProgress>
 8013fe6:	4603      	mov	r3, r0
 8013fe8:	f083 0301 	eor.w	r3, r3, #1
 8013fec:	b2db      	uxtb	r3, r3
 8013fee:	2b00      	cmp	r3, #0
 8013ff0:	d009      	beq.n	8014006 <LoRaMacMlmeRequest+0x2ba>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8013ff2:	2000      	movs	r0, #0
 8013ff4:	f000 fa8a 	bl	801450c <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 8013ff8:	2000      	movs	r0, #0
 8013ffa:	f000 faac 	bl	8014556 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 8013ffe:	2300      	movs	r3, #0
 8014000:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 8014004:	e00e      	b.n	8014024 <LoRaMacMlmeRequest+0x2d8>
                status = LORAMAC_STATUS_BUSY;
 8014006:	2301      	movs	r3, #1
 8014008:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 801400c:	e00a      	b.n	8014024 <LoRaMacMlmeRequest+0x2d8>
        }
        default:
            break;
 801400e:	bf00      	nop
 8014010:	e008      	b.n	8014024 <LoRaMacMlmeRequest+0x2d8>
            break;
 8014012:	bf00      	nop
 8014014:	e006      	b.n	8014024 <LoRaMacMlmeRequest+0x2d8>
            break;
 8014016:	bf00      	nop
 8014018:	e004      	b.n	8014024 <LoRaMacMlmeRequest+0x2d8>
            break;
 801401a:	bf00      	nop
 801401c:	e002      	b.n	8014024 <LoRaMacMlmeRequest+0x2d8>
            break;
 801401e:	bf00      	nop
 8014020:	e000      	b.n	8014024 <LoRaMacMlmeRequest+0x2d8>
            break;
 8014022:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8014024:	4b13      	ldr	r3, [pc, #76]	; (8014074 <LoRaMacMlmeRequest+0x328>)
 8014026:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 801402e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014032:	2b00      	cmp	r3, #0
 8014034:	d010      	beq.n	8014058 <LoRaMacMlmeRequest+0x30c>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8014036:	f001 f82b 	bl	8015090 <LoRaMacConfirmQueueGetCnt>
 801403a:	4603      	mov	r3, r0
 801403c:	2b00      	cmp	r3, #0
 801403e:	d110      	bne.n	8014062 <LoRaMacMlmeRequest+0x316>
        {
            MacCtx.NodeAckRequested = false;
 8014040:	4b0c      	ldr	r3, [pc, #48]	; (8014074 <LoRaMacMlmeRequest+0x328>)
 8014042:	2200      	movs	r2, #0
 8014044:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8014048:	4a0a      	ldr	r2, [pc, #40]	; (8014074 <LoRaMacMlmeRequest+0x328>)
 801404a:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 801404e:	f36f 0382 	bfc	r3, #2, #1
 8014052:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
 8014056:	e004      	b.n	8014062 <LoRaMacMlmeRequest+0x316>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 8014058:	f107 0320 	add.w	r3, r7, #32
 801405c:	4618      	mov	r0, r3
 801405e:	f000 fec3 	bl	8014de8 <LoRaMacConfirmQueueAdd>
    }
    return status;
 8014062:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8014066:	4618      	mov	r0, r3
 8014068:	3728      	adds	r7, #40	; 0x28
 801406a:	46bd      	mov	sp, r7
 801406c:	bd80      	pop	{r7, pc}
 801406e:	bf00      	nop
 8014070:	20000b34 	.word	0x20000b34
 8014074:	200006e0 	.word	0x200006e0
 8014078:	20000bfc 	.word	0x20000bfc

0801407c <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 801407c:	b5b0      	push	{r4, r5, r7, lr}
 801407e:	b092      	sub	sp, #72	; 0x48
 8014080:	af02      	add	r7, sp, #8
 8014082:	6078      	str	r0, [r7, #4]
 8014084:	460b      	mov	r3, r1
 8014086:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8014088:	2302      	movs	r3, #2
 801408a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 801408e:	2300      	movs	r3, #0
 8014090:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    void* fBuffer = NULL;
 8014094:	2300      	movs	r3, #0
 8014096:	63bb      	str	r3, [r7, #56]	; 0x38
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 8014098:	2300      	movs	r3, #0
 801409a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    bool readyToSend = false;
 801409e:	2300      	movs	r3, #0
 80140a0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    if( mcpsRequest == NULL )
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	2b00      	cmp	r3, #0
 80140a8:	d101      	bne.n	80140ae <LoRaMacMcpsRequest+0x32>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80140aa:	2303      	movs	r3, #3
 80140ac:	e113      	b.n	80142d6 <LoRaMacMcpsRequest+0x25a>
        }
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mcpsRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mcpsRequest->ReqReturn.DutyCycleWaitTime = 0;
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	2200      	movs	r2, #0
 80140b2:	611a      	str	r2, [r3, #16]

    if( LoRaMacIsBusy( ) == true )
 80140b4:	f7fc f9e2 	bl	801047c <LoRaMacIsBusy>
 80140b8:	4603      	mov	r3, r0
 80140ba:	2b00      	cmp	r3, #0
 80140bc:	d001      	beq.n	80140c2 <LoRaMacMcpsRequest+0x46>
    {
        return LORAMAC_STATUS_BUSY;
 80140be:	2301      	movs	r3, #1
 80140c0:	e109      	b.n	80142d6 <LoRaMacMcpsRequest+0x25a>
    }

    McpsReq_t request = *mcpsRequest;
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	f107 040c 	add.w	r4, r7, #12
 80140c8:	461d      	mov	r5, r3
 80140ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80140cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80140ce:	682b      	ldr	r3, [r5, #0]
 80140d0:	6023      	str	r3, [r4, #0]

    macHdr.Value = 0;
 80140d2:	2300      	movs	r3, #0
 80140d4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 80140d8:	2214      	movs	r2, #20
 80140da:	2100      	movs	r1, #0
 80140dc:	4880      	ldr	r0, [pc, #512]	; (80142e0 <LoRaMacMcpsRequest+0x264>)
 80140de:	f006 f821 	bl	801a124 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80140e2:	4b80      	ldr	r3, [pc, #512]	; (80142e4 <LoRaMacMcpsRequest+0x268>)
 80140e4:	2201      	movs	r2, #1
 80140e6:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441

    // Apply confirmed downlinks, if the device has not received a valid
    // downlink after a join accept.
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 80140ea:	4b7f      	ldr	r3, [pc, #508]	; (80142e8 <LoRaMacMcpsRequest+0x26c>)
 80140ec:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80140f0:	2b02      	cmp	r3, #2
 80140f2:	d111      	bne.n	8014118 <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 80140f4:	4b7c      	ldr	r3, [pc, #496]	; (80142e8 <LoRaMacMcpsRequest+0x26c>)
 80140f6:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 80140fa:	2b02      	cmp	r3, #2
 80140fc:	d10c      	bne.n	8014118 <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 80140fe:	4b7a      	ldr	r3, [pc, #488]	; (80142e8 <LoRaMacMcpsRequest+0x26c>)
 8014100:	f893 311e 	ldrb.w	r3, [r3, #286]	; 0x11e
 8014104:	f083 0301 	eor.w	r3, r3, #1
 8014108:	b2db      	uxtb	r3, r3
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 801410a:	2b00      	cmp	r3, #0
 801410c:	d004      	beq.n	8014118 <LoRaMacMcpsRequest+0x9c>
        ( request.Type == MCPS_UNCONFIRMED ) )
 801410e:	7b3b      	ldrb	r3, [r7, #12]
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 8014110:	2b00      	cmp	r3, #0
 8014112:	d101      	bne.n	8014118 <LoRaMacMcpsRequest+0x9c>
    {
        request.Type = MCPS_CONFIRMED;
 8014114:	2301      	movs	r3, #1
 8014116:	733b      	strb	r3, [r7, #12]
    }

    switch( request.Type )
 8014118:	7b3b      	ldrb	r3, [r7, #12]
 801411a:	2b03      	cmp	r3, #3
 801411c:	d030      	beq.n	8014180 <LoRaMacMcpsRequest+0x104>
 801411e:	2b03      	cmp	r3, #3
 8014120:	dc3f      	bgt.n	80141a2 <LoRaMacMcpsRequest+0x126>
 8014122:	2b00      	cmp	r3, #0
 8014124:	d002      	beq.n	801412c <LoRaMacMcpsRequest+0xb0>
 8014126:	2b01      	cmp	r3, #1
 8014128:	d015      	beq.n	8014156 <LoRaMacMcpsRequest+0xda>
            fBufferSize = request.Req.Proprietary.fBufferSize;
            datarate = request.Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 801412a:	e03a      	b.n	80141a2 <LoRaMacMcpsRequest+0x126>
            readyToSend = true;
 801412c:	2301      	movs	r3, #1
 801412e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8014132:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014136:	2202      	movs	r2, #2
 8014138:	f362 1347 	bfi	r3, r2, #5, #3
 801413c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            fPort = request.Req.Unconfirmed.fPort;
 8014140:	7c3b      	ldrb	r3, [r7, #16]
 8014142:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
            fBuffer = request.Req.Unconfirmed.fBuffer;
 8014146:	697b      	ldr	r3, [r7, #20]
 8014148:	63bb      	str	r3, [r7, #56]	; 0x38
            fBufferSize = request.Req.Unconfirmed.fBufferSize;
 801414a:	8b3b      	ldrh	r3, [r7, #24]
 801414c:	86fb      	strh	r3, [r7, #54]	; 0x36
            datarate = request.Req.Unconfirmed.Datarate;
 801414e:	7ebb      	ldrb	r3, [r7, #26]
 8014150:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 8014154:	e026      	b.n	80141a4 <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 8014156:	2301      	movs	r3, #1
 8014158:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 801415c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014160:	2204      	movs	r2, #4
 8014162:	f362 1347 	bfi	r3, r2, #5, #3
 8014166:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            fPort = request.Req.Confirmed.fPort;
 801416a:	7c3b      	ldrb	r3, [r7, #16]
 801416c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
            fBuffer = request.Req.Confirmed.fBuffer;
 8014170:	697b      	ldr	r3, [r7, #20]
 8014172:	63bb      	str	r3, [r7, #56]	; 0x38
            fBufferSize = request.Req.Confirmed.fBufferSize;
 8014174:	8b3b      	ldrh	r3, [r7, #24]
 8014176:	86fb      	strh	r3, [r7, #54]	; 0x36
            datarate = request.Req.Confirmed.Datarate;
 8014178:	7ebb      	ldrb	r3, [r7, #26]
 801417a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 801417e:	e011      	b.n	80141a4 <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 8014180:	2301      	movs	r3, #1
 8014182:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8014186:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801418a:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 801418e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            fBuffer = request.Req.Proprietary.fBuffer;
 8014192:	693b      	ldr	r3, [r7, #16]
 8014194:	63bb      	str	r3, [r7, #56]	; 0x38
            fBufferSize = request.Req.Proprietary.fBufferSize;
 8014196:	8abb      	ldrh	r3, [r7, #20]
 8014198:	86fb      	strh	r3, [r7, #54]	; 0x36
            datarate = request.Req.Proprietary.Datarate;
 801419a:	7dbb      	ldrb	r3, [r7, #22]
 801419c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 80141a0:	e000      	b.n	80141a4 <LoRaMacMcpsRequest+0x128>
            break;
 80141a2:	bf00      	nop
    }

    // Make sure that the input datarate is compliant
    // to the regional specification.
    getPhy.Attribute = PHY_MIN_TX_DR;
 80141a4:	2302      	movs	r3, #2
 80141a6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80141aa:	4b4f      	ldr	r3, [pc, #316]	; (80142e8 <LoRaMacMcpsRequest+0x26c>)
 80141ac:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80141b0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80141b4:	4b4c      	ldr	r3, [pc, #304]	; (80142e8 <LoRaMacMcpsRequest+0x26c>)
 80141b6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80141ba:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80141be:	4611      	mov	r1, r2
 80141c0:	4618      	mov	r0, r3
 80141c2:	f002 f973 	bl	80164ac <RegionGetPhyParam>
 80141c6:	4603      	mov	r3, r0
 80141c8:	62bb      	str	r3, [r7, #40]	; 0x28
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 80141ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141cc:	b25b      	sxtb	r3, r3
 80141ce:	f997 2035 	ldrsb.w	r2, [r7, #53]	; 0x35
 80141d2:	4293      	cmp	r3, r2
 80141d4:	bfb8      	it	lt
 80141d6:	4613      	movlt	r3, r2
 80141d8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    // Apply minimum datarate in this special case.
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 80141dc:	4b42      	ldr	r3, [pc, #264]	; (80142e8 <LoRaMacMcpsRequest+0x26c>)
 80141de:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 80141e2:	4a41      	ldr	r2, [pc, #260]	; (80142e8 <LoRaMacMcpsRequest+0x26c>)
 80141e4:	f892 1130 	ldrb.w	r1, [r2, #304]	; 0x130
 80141e8:	4a3f      	ldr	r2, [pc, #252]	; (80142e8 <LoRaMacMcpsRequest+0x26c>)
 80141ea:	f892 211d 	ldrb.w	r2, [r2, #285]	; 0x11d
 80141ee:	4618      	mov	r0, r3
 80141f0:	f7fc fae0 	bl	80107b4 <CheckForMinimumAbpDatarate>
 80141f4:	4603      	mov	r3, r0
 80141f6:	2b00      	cmp	r3, #0
 80141f8:	d002      	beq.n	8014200 <LoRaMacMcpsRequest+0x184>
                                    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true )
    {
        datarate = ( int8_t )phyParam.Value;
 80141fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141fc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if( readyToSend == true )
 8014200:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8014204:	2b00      	cmp	r3, #0
 8014206:	d05f      	beq.n	80142c8 <LoRaMacMcpsRequest+0x24c>
    {
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 8014208:	4b37      	ldr	r3, [pc, #220]	; (80142e8 <LoRaMacMcpsRequest+0x26c>)
 801420a:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 801420e:	f083 0301 	eor.w	r3, r3, #1
 8014212:	b2db      	uxtb	r3, r3
 8014214:	2b00      	cmp	r3, #0
 8014216:	d10e      	bne.n	8014236 <LoRaMacMcpsRequest+0x1ba>
            ( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 8014218:	4b33      	ldr	r3, [pc, #204]	; (80142e8 <LoRaMacMcpsRequest+0x26c>)
 801421a:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 801421e:	4a32      	ldr	r2, [pc, #200]	; (80142e8 <LoRaMacMcpsRequest+0x26c>)
 8014220:	f892 1130 	ldrb.w	r1, [r2, #304]	; 0x130
 8014224:	4a30      	ldr	r2, [pc, #192]	; (80142e8 <LoRaMacMcpsRequest+0x26c>)
 8014226:	f892 211d 	ldrb.w	r2, [r2, #285]	; 0x11d
 801422a:	4618      	mov	r0, r3
 801422c:	f7fc fac2 	bl	80107b4 <CheckForMinimumAbpDatarate>
 8014230:	4603      	mov	r3, r0
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 8014232:	2b00      	cmp	r3, #0
 8014234:	d01c      	beq.n	8014270 <LoRaMacMcpsRequest+0x1f4>
                                          Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true ) )
        {
            verify.DatarateParams.Datarate = datarate;
 8014236:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 801423a:	f887 3020 	strb.w	r3, [r7, #32]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801423e:	4b2a      	ldr	r3, [pc, #168]	; (80142e8 <LoRaMacMcpsRequest+0x26c>)
 8014240:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8014244:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8014248:	4b27      	ldr	r3, [pc, #156]	; (80142e8 <LoRaMacMcpsRequest+0x26c>)
 801424a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801424e:	f107 0120 	add.w	r1, r7, #32
 8014252:	2205      	movs	r2, #5
 8014254:	4618      	mov	r0, r3
 8014256:	f002 f977 	bl	8016548 <RegionVerify>
 801425a:	4603      	mov	r3, r0
 801425c:	2b00      	cmp	r3, #0
 801425e:	d005      	beq.n	801426c <LoRaMacMcpsRequest+0x1f0>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8014260:	f997 2020 	ldrsb.w	r2, [r7, #32]
 8014264:	4b20      	ldr	r3, [pc, #128]	; (80142e8 <LoRaMacMcpsRequest+0x26c>)
 8014266:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 801426a:	e001      	b.n	8014270 <LoRaMacMcpsRequest+0x1f4>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 801426c:	2303      	movs	r3, #3
 801426e:	e032      	b.n	80142d6 <LoRaMacMcpsRequest+0x25a>
            }
        }

        // Verification of response timeout for class b and class c
        LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 8014270:	4b1d      	ldr	r3, [pc, #116]	; (80142e8 <LoRaMacMcpsRequest+0x26c>)
 8014272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014276:	4a1b      	ldr	r2, [pc, #108]	; (80142e4 <LoRaMacMcpsRequest+0x268>)
 8014278:	f8d2 2498 	ldr.w	r2, [r2, #1176]	; 0x498
 801427c:	4611      	mov	r1, r2
 801427e:	4618      	mov	r0, r3
 8014280:	f7fc fb84 	bl	801098c <LoRaMacHandleResponseTimeout>
                                      MacCtx.ResponseTimeoutStartTime );

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx );
 8014284:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8014286:	f897 103e 	ldrb.w	r1, [r7, #62]	; 0x3e
 801428a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801428e:	78fb      	ldrb	r3, [r7, #3]
 8014290:	9300      	str	r3, [sp, #0]
 8014292:	4613      	mov	r3, r2
 8014294:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014296:	f7fd fb23 	bl	80118e0 <Send>
 801429a:	4603      	mov	r3, r0
 801429c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if( status == LORAMAC_STATUS_OK )
 80142a0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80142a4:	2b00      	cmp	r3, #0
 80142a6:	d10b      	bne.n	80142c0 <LoRaMacMcpsRequest+0x244>
        {
            MacCtx.McpsConfirm.McpsRequest = request.Type;
 80142a8:	7b3a      	ldrb	r2, [r7, #12]
 80142aa:	4b0e      	ldr	r3, [pc, #56]	; (80142e4 <LoRaMacMcpsRequest+0x268>)
 80142ac:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
            MacCtx.MacFlags.Bits.McpsReq = 1;
 80142b0:	4a0c      	ldr	r2, [pc, #48]	; (80142e4 <LoRaMacMcpsRequest+0x268>)
 80142b2:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 80142b6:	f043 0301 	orr.w	r3, r3, #1
 80142ba:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
 80142be:	e003      	b.n	80142c8 <LoRaMacMcpsRequest+0x24c>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 80142c0:	4b08      	ldr	r3, [pc, #32]	; (80142e4 <LoRaMacMcpsRequest+0x268>)
 80142c2:	2200      	movs	r2, #0
 80142c4:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
        }
    }
#endif /* LORAMAC_VERSION */

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 80142c8:	4b06      	ldr	r3, [pc, #24]	; (80142e4 <LoRaMacMcpsRequest+0x268>)
 80142ca:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	611a      	str	r2, [r3, #16]

    return status;
 80142d2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80142d6:	4618      	mov	r0, r3
 80142d8:	3740      	adds	r7, #64	; 0x40
 80142da:	46bd      	mov	sp, r7
 80142dc:	bdb0      	pop	{r4, r5, r7, pc}
 80142de:	bf00      	nop
 80142e0:	20000b20 	.word	0x20000b20
 80142e4:	200006e0 	.word	0x200006e0
 80142e8:	20000bfc 	.word	0x20000bfc

080142ec <LoRaMacTestSetDutyCycleOn>:
    OnMacProcessNotify( );
}
#endif /* LORAMAC_VERSION */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 80142ec:	b580      	push	{r7, lr}
 80142ee:	b084      	sub	sp, #16
 80142f0:	af00      	add	r7, sp, #0
 80142f2:	4603      	mov	r3, r0
 80142f4:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 80142f6:	79fb      	ldrb	r3, [r7, #7]
 80142f8:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 80142fa:	4b0d      	ldr	r3, [pc, #52]	; (8014330 <LoRaMacTestSetDutyCycleOn+0x44>)
 80142fc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014300:	f107 010c 	add.w	r1, r7, #12
 8014304:	220f      	movs	r2, #15
 8014306:	4618      	mov	r0, r3
 8014308:	f002 f91e 	bl	8016548 <RegionVerify>
 801430c:	4603      	mov	r3, r0
 801430e:	2b00      	cmp	r3, #0
 8014310:	d00a      	beq.n	8014328 <LoRaMacTestSetDutyCycleOn+0x3c>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 8014312:	4a07      	ldr	r2, [pc, #28]	; (8014330 <LoRaMacTestSetDutyCycleOn+0x44>)
 8014314:	79fb      	ldrb	r3, [r7, #7]
 8014316:	f882 311c 	strb.w	r3, [r2, #284]	; 0x11c
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 801431a:	4a06      	ldr	r2, [pc, #24]	; (8014334 <LoRaMacTestSetDutyCycleOn+0x48>)
 801431c:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8014320:	f043 0320 	orr.w	r3, r3, #32
 8014324:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
}
 8014328:	bf00      	nop
 801432a:	3710      	adds	r7, #16
 801432c:	46bd      	mov	sp, r7
 801432e:	bd80      	pop	{r7, pc}
 8014330:	20000bfc 	.word	0x20000bfc
 8014334:	200006e0 	.word	0x200006e0

08014338 <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 8014338:	b580      	push	{r7, lr}
 801433a:	af00      	add	r7, sp, #0
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 801433c:	f7fe fe94 	bl	8013068 <LoRaMacStop>
 8014340:	4603      	mov	r3, r0
 8014342:	2b00      	cmp	r3, #0
 8014344:	d112      	bne.n	801436c <LoRaMacDeInitialization+0x34>
    {
        // Stop Timers
        TimerStop( &MacCtx.TxDelayedTimer );
 8014346:	480b      	ldr	r0, [pc, #44]	; (8014374 <LoRaMacDeInitialization+0x3c>)
 8014348:	f00a f84c 	bl	801e3e4 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 801434c:	480a      	ldr	r0, [pc, #40]	; (8014378 <LoRaMacDeInitialization+0x40>)
 801434e:	f00a f849 	bl	801e3e4 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 8014352:	480a      	ldr	r0, [pc, #40]	; (801437c <LoRaMacDeInitialization+0x44>)
 8014354:	f00a f846 	bl	801e3e4 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        TimerStop( &MacCtx.AckTimeoutTimer );
#endif /* LORAMAC_VERSION */

        // Take care about class B
        LoRaMacClassBHaltBeaconing( );
 8014358:	f000 f94a 	bl	80145f0 <LoRaMacClassBHaltBeaconing>

        // Reset Mac parameters
        ResetMacParameters( false );
 801435c:	2000      	movs	r0, #0
 801435e:	f7fd fe1d 	bl	8011f9c <ResetMacParameters>

        // Switch off Radio
        Radio.Sleep( );
 8014362:	4b07      	ldr	r3, [pc, #28]	; (8014380 <LoRaMacDeInitialization+0x48>)
 8014364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014366:	4798      	blx	r3

        // Return success
        return LORAMAC_STATUS_OK;
 8014368:	2300      	movs	r3, #0
 801436a:	e000      	b.n	801436e <LoRaMacDeInitialization+0x36>
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 801436c:	2301      	movs	r3, #1
    }
}
 801436e:	4618      	mov	r0, r3
 8014370:	bd80      	pop	{r7, pc}
 8014372:	bf00      	nop
 8014374:	20000a48 	.word	0x20000a48
 8014378:	20000a60 	.word	0x20000a60
 801437c:	20000a78 	.word	0x20000a78
 8014380:	0801fccc 	.word	0x0801fccc

08014384 <LoRaMacAdrCalcNext>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut,
                         uint8_t* nbTransOut, uint32_t* adrAckCounter )
{
 8014384:	b580      	push	{r7, lr}
 8014386:	b08c      	sub	sp, #48	; 0x30
 8014388:	af00      	add	r7, sp, #0
 801438a:	60f8      	str	r0, [r7, #12]
 801438c:	60b9      	str	r1, [r7, #8]
 801438e:	607a      	str	r2, [r7, #4]
 8014390:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 8014392:	2300      	movs	r3, #0
 8014394:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = adrNext->Datarate;
 8014398:	68fb      	ldr	r3, [r7, #12]
 801439a:	7b1b      	ldrb	r3, [r3, #12]
 801439c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = adrNext->TxPower;
 80143a0:	68fb      	ldr	r3, [r7, #12]
 80143a2:	7b5b      	ldrb	r3, [r3, #13]
 80143a4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint8_t nbTrans = adrNext->NbTrans;
 80143a8:	68fb      	ldr	r3, [r7, #12]
 80143aa:	7b9b      	ldrb	r3, [r3, #14]
 80143ac:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 80143b0:	68fb      	ldr	r3, [r7, #12]
 80143b2:	685a      	ldr	r2, [r3, #4]
 80143b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143b6:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 80143b8:	68fb      	ldr	r3, [r7, #12]
 80143ba:	785b      	ldrb	r3, [r3, #1]
 80143bc:	2b00      	cmp	r3, #0
 80143be:	f000 8088 	beq.w	80144d2 <LoRaMacAdrCalcNext+0x14e>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 80143c2:	2302      	movs	r3, #2
 80143c4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 80143c8:	68fb      	ldr	r3, [r7, #12]
 80143ca:	7bdb      	ldrb	r3, [r3, #15]
 80143cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80143d0:	68fb      	ldr	r3, [r7, #12]
 80143d2:	7c1b      	ldrb	r3, [r3, #16]
 80143d4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80143d8:	4611      	mov	r1, r2
 80143da:	4618      	mov	r0, r3
 80143dc:	f002 f866 	bl	80164ac <RegionGetPhyParam>
 80143e0:	4603      	mov	r3, r0
 80143e2:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 80143e4:	6a3b      	ldr	r3, [r7, #32]
 80143e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        datarate = MAX( datarate, minTxDatarate );
 80143ea:	f997 202b 	ldrsb.w	r2, [r7, #43]	; 0x2b
 80143ee:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 80143f2:	4293      	cmp	r3, r2
 80143f4:	bfb8      	it	lt
 80143f6:	4613      	movlt	r3, r2
 80143f8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        // Verify if ADR ack req bit needs to be set.
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 80143fc:	68fb      	ldr	r3, [r7, #12]
 80143fe:	685b      	ldr	r3, [r3, #4]
 8014400:	68fa      	ldr	r2, [r7, #12]
 8014402:	8912      	ldrh	r2, [r2, #8]
 8014404:	4293      	cmp	r3, r2
 8014406:	d302      	bcc.n	801440e <LoRaMacAdrCalcNext+0x8a>
        {
            adrAckReq = true;
 8014408:	2301      	movs	r3, #1
 801440a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }

        // Verify, if we need to set the TX power to default
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 801440e:	68fb      	ldr	r3, [r7, #12]
 8014410:	685b      	ldr	r3, [r3, #4]
 8014412:	68fa      	ldr	r2, [r7, #12]
 8014414:	8912      	ldrh	r2, [r2, #8]
 8014416:	4611      	mov	r1, r2
 8014418:	68fa      	ldr	r2, [r7, #12]
 801441a:	8952      	ldrh	r2, [r2, #10]
 801441c:	440a      	add	r2, r1
 801441e:	4293      	cmp	r3, r2
 8014420:	d30f      	bcc.n	8014442 <LoRaMacAdrCalcNext+0xbe>
        {
            // Set TX Power to default
            getPhy.Attribute = PHY_DEF_TX_POWER;
 8014422:	230a      	movs	r3, #10
 8014424:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8014428:	68fb      	ldr	r3, [r7, #12]
 801442a:	7c1b      	ldrb	r3, [r3, #16]
 801442c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8014430:	4611      	mov	r1, r2
 8014432:	4618      	mov	r0, r3
 8014434:	f002 f83a 	bl	80164ac <RegionGetPhyParam>
 8014438:	4603      	mov	r3, r0
 801443a:	623b      	str	r3, [r7, #32]
            txPower = phyParam.Value;
 801443c:	6a3b      	ldr	r3, [r7, #32]
 801443e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
        }

        // Verify, if we need to decrease the data rate
        if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + ( adrNext->AdrAckDelay << 1 ) ) )
 8014442:	68fb      	ldr	r3, [r7, #12]
 8014444:	685b      	ldr	r3, [r3, #4]
 8014446:	68fa      	ldr	r2, [r7, #12]
 8014448:	8912      	ldrh	r2, [r2, #8]
 801444a:	4611      	mov	r1, r2
 801444c:	68fa      	ldr	r2, [r7, #12]
 801444e:	8952      	ldrh	r2, [r2, #10]
 8014450:	0052      	lsls	r2, r2, #1
 8014452:	440a      	add	r2, r1
 8014454:	4293      	cmp	r3, r2
 8014456:	d33c      	bcc.n	80144d2 <LoRaMacAdrCalcNext+0x14e>
        {
            // Perform actions with every adrNext->AdrAckDelay only
            if( ( ( adrNext->AdrAckCounter - adrNext->AdrAckLimit ) % adrNext->AdrAckDelay ) == 0 )
 8014458:	68fb      	ldr	r3, [r7, #12]
 801445a:	685b      	ldr	r3, [r3, #4]
 801445c:	68fa      	ldr	r2, [r7, #12]
 801445e:	8912      	ldrh	r2, [r2, #8]
 8014460:	1a9b      	subs	r3, r3, r2
 8014462:	68fa      	ldr	r2, [r7, #12]
 8014464:	8952      	ldrh	r2, [r2, #10]
 8014466:	fbb3 f1f2 	udiv	r1, r3, r2
 801446a:	fb01 f202 	mul.w	r2, r1, r2
 801446e:	1a9b      	subs	r3, r3, r2
 8014470:	2b00      	cmp	r3, #0
 8014472:	d12e      	bne.n	80144d2 <LoRaMacAdrCalcNext+0x14e>
            {
                if( datarate == minTxDatarate )
 8014474:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 8014478:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 801447c:	429a      	cmp	r2, r3
 801447e:	d110      	bne.n	80144a2 <LoRaMacAdrCalcNext+0x11e>
                {
                    // Restore the channel mask
                    if( adrNext->UpdateChanMask == true )
 8014480:	68fb      	ldr	r3, [r7, #12]
 8014482:	781b      	ldrb	r3, [r3, #0]
 8014484:	2b00      	cmp	r3, #0
 8014486:	d009      	beq.n	801449c <LoRaMacAdrCalcNext+0x118>
                    {
                        InitDefaultsParams_t params;
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8014488:	2302      	movs	r3, #2
 801448a:	773b      	strb	r3, [r7, #28]
                        RegionInitDefaults( adrNext->Region, &params );
 801448c:	68fb      	ldr	r3, [r7, #12]
 801448e:	7c1b      	ldrb	r3, [r3, #16]
 8014490:	f107 0210 	add.w	r2, r7, #16
 8014494:	4611      	mov	r1, r2
 8014496:	4618      	mov	r0, r3
 8014498:	f002 f83f 	bl	801651a <RegionInitDefaults>
                    }

                    // Restore NbTrans
                    nbTrans = 1;
 801449c:	2301      	movs	r3, #1
 801449e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                // Decrease the datarate
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 80144a2:	2321      	movs	r3, #33	; 0x21
 80144a4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                getPhy.Datarate = datarate;
 80144a8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80144ac:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 80144b0:	68fb      	ldr	r3, [r7, #12]
 80144b2:	7bdb      	ldrb	r3, [r3, #15]
 80144b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80144b8:	68fb      	ldr	r3, [r7, #12]
 80144ba:	7c1b      	ldrb	r3, [r3, #16]
 80144bc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80144c0:	4611      	mov	r1, r2
 80144c2:	4618      	mov	r0, r3
 80144c4:	f001 fff2 	bl	80164ac <RegionGetPhyParam>
 80144c8:	4603      	mov	r3, r0
 80144ca:	623b      	str	r3, [r7, #32]
                datarate = phyParam.Value;
 80144cc:	6a3b      	ldr	r3, [r7, #32]
 80144ce:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            }
        }
    }

    *drOut = datarate;
 80144d2:	68bb      	ldr	r3, [r7, #8]
 80144d4:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80144d8:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 80144da:	687b      	ldr	r3, [r7, #4]
 80144dc:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80144e0:	701a      	strb	r2, [r3, #0]
    *nbTransOut = nbTrans;
 80144e2:	683b      	ldr	r3, [r7, #0]
 80144e4:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80144e8:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 80144ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80144ee:	4618      	mov	r0, r3
 80144f0:	3730      	adds	r7, #48	; 0x30
 80144f2:	46bd      	mov	sp, r7
 80144f4:	bd80      	pop	{r7, pc}

080144f6 <LoRaMacClassBInit>:
#endif /* LORAMAC_VERSION */

#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmData_t* nvm )
{
 80144f6:	b480      	push	{r7}
 80144f8:	b085      	sub	sp, #20
 80144fa:	af00      	add	r7, sp, #0
 80144fc:	60f8      	str	r0, [r7, #12]
 80144fe:	60b9      	str	r1, [r7, #8]
 8014500:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014502:	bf00      	nop
 8014504:	3714      	adds	r7, #20
 8014506:	46bd      	mov	sp, r7
 8014508:	bc80      	pop	{r7}
 801450a:	4770      	bx	lr

0801450c <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 801450c:	b480      	push	{r7}
 801450e:	b083      	sub	sp, #12
 8014510:	af00      	add	r7, sp, #0
 8014512:	4603      	mov	r3, r0
 8014514:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014516:	bf00      	nop
 8014518:	370c      	adds	r7, #12
 801451a:	46bd      	mov	sp, r7
 801451c:	bc80      	pop	{r7}
 801451e:	4770      	bx	lr

08014520 <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 8014520:	b480      	push	{r7}
 8014522:	b083      	sub	sp, #12
 8014524:	af00      	add	r7, sp, #0
 8014526:	4603      	mov	r3, r0
 8014528:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801452a:	bf00      	nop
 801452c:	370c      	adds	r7, #12
 801452e:	46bd      	mov	sp, r7
 8014530:	bc80      	pop	{r7}
 8014532:	4770      	bx	lr

08014534 <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 8014534:	b480      	push	{r7}
 8014536:	b083      	sub	sp, #12
 8014538:	af00      	add	r7, sp, #0
 801453a:	4603      	mov	r3, r0
 801453c:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801453e:	bf00      	nop
 8014540:	370c      	adds	r7, #12
 8014542:	46bd      	mov	sp, r7
 8014544:	bc80      	pop	{r7}
 8014546:	4770      	bx	lr

08014548 <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 8014548:	b480      	push	{r7}
 801454a:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 801454c:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801454e:	4618      	mov	r0, r3
 8014550:	46bd      	mov	sp, r7
 8014552:	bc80      	pop	{r7}
 8014554:	4770      	bx	lr

08014556 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 8014556:	b480      	push	{r7}
 8014558:	b083      	sub	sp, #12
 801455a:	af00      	add	r7, sp, #0
 801455c:	6078      	str	r0, [r7, #4]
    Ctx.BeaconCtx.TimeStamp = TimerGetCurrentTime( );
    TimerStop( &Ctx.BeaconTimer );
    LoRaMacClassBEvents.Events.Beacon = 1;
    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801455e:	bf00      	nop
 8014560:	370c      	adds	r7, #12
 8014562:	46bd      	mov	sp, r7
 8014564:	bc80      	pop	{r7}
 8014566:	4770      	bx	lr

08014568 <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 8014568:	b480      	push	{r7}
 801456a:	b083      	sub	sp, #12
 801456c:	af00      	add	r7, sp, #0
 801456e:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.PingSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014570:	bf00      	nop
 8014572:	370c      	adds	r7, #12
 8014574:	46bd      	mov	sp, r7
 8014576:	bc80      	pop	{r7}
 8014578:	4770      	bx	lr

0801457a <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 801457a:	b480      	push	{r7}
 801457c:	b083      	sub	sp, #12
 801457e:	af00      	add	r7, sp, #0
 8014580:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.MulticastSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014582:	bf00      	nop
 8014584:	370c      	adds	r7, #12
 8014586:	46bd      	mov	sp, r7
 8014588:	bc80      	pop	{r7}
 801458a:	4770      	bx	lr

0801458c <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 801458c:	b480      	push	{r7}
 801458e:	b083      	sub	sp, #12
 8014590:	af00      	add	r7, sp, #0
 8014592:	6078      	str	r0, [r7, #4]
 8014594:	460b      	mov	r3, r1
 8014596:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 8014598:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801459a:	4618      	mov	r0, r3
 801459c:	370c      	adds	r7, #12
 801459e:	46bd      	mov	sp, r7
 80145a0:	bc80      	pop	{r7}
 80145a2:	4770      	bx	lr

080145a4 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 80145a4:	b480      	push	{r7}
 80145a6:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80145a8:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80145aa:	4618      	mov	r0, r3
 80145ac:	46bd      	mov	sp, r7
 80145ae:	bc80      	pop	{r7}
 80145b0:	4770      	bx	lr

080145b2 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 80145b2:	b480      	push	{r7}
 80145b4:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80145b6:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80145b8:	4618      	mov	r0, r3
 80145ba:	46bd      	mov	sp, r7
 80145bc:	bc80      	pop	{r7}
 80145be:	4770      	bx	lr

080145c0 <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 80145c0:	b480      	push	{r7}
 80145c2:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80145c4:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80145c6:	4618      	mov	r0, r3
 80145c8:	46bd      	mov	sp, r7
 80145ca:	bc80      	pop	{r7}
 80145cc:	4770      	bx	lr

080145ce <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 80145ce:	b480      	push	{r7}
 80145d0:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80145d2:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80145d4:	4618      	mov	r0, r3
 80145d6:	46bd      	mov	sp, r7
 80145d8:	bc80      	pop	{r7}
 80145da:	4770      	bx	lr

080145dc <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 80145dc:	b480      	push	{r7}
 80145de:	b083      	sub	sp, #12
 80145e0:	af00      	add	r7, sp, #0
 80145e2:	4603      	mov	r3, r0
 80145e4:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80145e6:	bf00      	nop
 80145e8:	370c      	adds	r7, #12
 80145ea:	46bd      	mov	sp, r7
 80145ec:	bc80      	pop	{r7}
 80145ee:	4770      	bx	lr

080145f0 <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 80145f0:	b480      	push	{r7}
 80145f2:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80145f4:	bf00      	nop
 80145f6:	46bd      	mov	sp, r7
 80145f8:	bc80      	pop	{r7}
 80145fa:	4770      	bx	lr

080145fc <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 80145fc:	b480      	push	{r7}
 80145fe:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014600:	bf00      	nop
 8014602:	46bd      	mov	sp, r7
 8014604:	bc80      	pop	{r7}
 8014606:	4770      	bx	lr

08014608 <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 8014608:	b480      	push	{r7}
 801460a:	b083      	sub	sp, #12
 801460c:	af00      	add	r7, sp, #0
 801460e:	4603      	mov	r3, r0
 8014610:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8014612:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014614:	4618      	mov	r0, r3
 8014616:	370c      	adds	r7, #12
 8014618:	46bd      	mov	sp, r7
 801461a:	bc80      	pop	{r7}
 801461c:	4770      	bx	lr

0801461e <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 801461e:	b480      	push	{r7}
 8014620:	b083      	sub	sp, #12
 8014622:	af00      	add	r7, sp, #0
 8014624:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8014626:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014628:	4618      	mov	r0, r3
 801462a:	370c      	adds	r7, #12
 801462c:	46bd      	mov	sp, r7
 801462e:	bc80      	pop	{r7}
 8014630:	4770      	bx	lr

08014632 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 8014632:	b480      	push	{r7}
 8014634:	b083      	sub	sp, #12
 8014636:	af00      	add	r7, sp, #0
 8014638:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 801463a:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801463c:	4618      	mov	r0, r3
 801463e:	370c      	adds	r7, #12
 8014640:	46bd      	mov	sp, r7
 8014642:	bc80      	pop	{r7}
 8014644:	4770      	bx	lr

08014646 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 8014646:	b480      	push	{r7}
 8014648:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801464a:	bf00      	nop
 801464c:	46bd      	mov	sp, r7
 801464e:	bc80      	pop	{r7}
 8014650:	4770      	bx	lr

08014652 <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 8014652:	b480      	push	{r7}
 8014654:	b083      	sub	sp, #12
 8014656:	af00      	add	r7, sp, #0
 8014658:	4603      	mov	r3, r0
 801465a:	6039      	str	r1, [r7, #0]
 801465c:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 801465e:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014660:	4618      	mov	r0, r3
 8014662:	370c      	adds	r7, #12
 8014664:	46bd      	mov	sp, r7
 8014666:	bc80      	pop	{r7}
 8014668:	4770      	bx	lr

0801466a <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 801466a:	b480      	push	{r7}
 801466c:	b083      	sub	sp, #12
 801466e:	af00      	add	r7, sp, #0
 8014670:	4603      	mov	r3, r0
 8014672:	603a      	str	r2, [r7, #0]
 8014674:	80fb      	strh	r3, [r7, #6]
 8014676:	460b      	mov	r3, r1
 8014678:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801467a:	bf00      	nop
 801467c:	370c      	adds	r7, #12
 801467e:	46bd      	mov	sp, r7
 8014680:	bc80      	pop	{r7}
 8014682:	4770      	bx	lr

08014684 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 8014684:	b480      	push	{r7}
 8014686:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014688:	bf00      	nop
 801468a:	46bd      	mov	sp, r7
 801468c:	bc80      	pop	{r7}
 801468e:	4770      	bx	lr

08014690 <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 8014690:	b480      	push	{r7}
 8014692:	b083      	sub	sp, #12
 8014694:	af00      	add	r7, sp, #0
 8014696:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 8014698:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801469a:	4618      	mov	r0, r3
 801469c:	370c      	adds	r7, #12
 801469e:	46bd      	mov	sp, r7
 80146a0:	bc80      	pop	{r7}
 80146a2:	4770      	bx	lr

080146a4 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 80146a4:	b480      	push	{r7}
 80146a6:	b083      	sub	sp, #12
 80146a8:	af00      	add	r7, sp, #0
 80146aa:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 80146ac:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80146ae:	4618      	mov	r0, r3
 80146b0:	370c      	adds	r7, #12
 80146b2:	46bd      	mov	sp, r7
 80146b4:	bc80      	pop	{r7}
 80146b6:	4770      	bx	lr

080146b8 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 80146b8:	b480      	push	{r7}
 80146ba:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80146bc:	bf00      	nop
 80146be:	46bd      	mov	sp, r7
 80146c0:	bc80      	pop	{r7}
 80146c2:	4770      	bx	lr

080146c4 <LoRaMacClassBSetFPendingBit>:
#endif /* LORAMAC_CLASSB_ENABLED */
}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
void LoRaMacClassBSetFPendingBit( uint32_t address, uint8_t fPendingSet )
{
 80146c4:	b480      	push	{r7}
 80146c6:	b083      	sub	sp, #12
 80146c8:	af00      	add	r7, sp, #0
 80146ca:	6078      	str	r0, [r7, #4]
 80146cc:	460b      	mov	r3, r1
 80146ce:	70fb      	strb	r3, [r7, #3]
            }
            cur++;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80146d0:	bf00      	nop
 80146d2:	370c      	adds	r7, #12
 80146d4:	46bd      	mov	sp, r7
 80146d6:	bc80      	pop	{r7}
 80146d8:	4770      	bx	lr

080146da <LoRaMacClassBProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacClassBProcess( void )
{
 80146da:	b480      	push	{r7}
 80146dc:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80146de:	bf00      	nop
 80146e0:	46bd      	mov	sp, r7
 80146e2:	bc80      	pop	{r7}
 80146e4:	4770      	bx	lr

080146e6 <IsSlotFree>:
 *
 * \param [in]    slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 80146e6:	b480      	push	{r7}
 80146e8:	b085      	sub	sp, #20
 80146ea:	af00      	add	r7, sp, #0
 80146ec:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 80146ee:	687b      	ldr	r3, [r7, #4]
 80146f0:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 80146f2:	2300      	movs	r3, #0
 80146f4:	81fb      	strh	r3, [r7, #14]
 80146f6:	e00a      	b.n	801470e <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 80146f8:	89fb      	ldrh	r3, [r7, #14]
 80146fa:	68ba      	ldr	r2, [r7, #8]
 80146fc:	4413      	add	r3, r2
 80146fe:	781b      	ldrb	r3, [r3, #0]
 8014700:	2b00      	cmp	r3, #0
 8014702:	d001      	beq.n	8014708 <IsSlotFree+0x22>
        {
            return false;
 8014704:	2300      	movs	r3, #0
 8014706:	e006      	b.n	8014716 <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8014708:	89fb      	ldrh	r3, [r7, #14]
 801470a:	3301      	adds	r3, #1
 801470c:	81fb      	strh	r3, [r7, #14]
 801470e:	89fb      	ldrh	r3, [r7, #14]
 8014710:	2b0f      	cmp	r3, #15
 8014712:	d9f1      	bls.n	80146f8 <IsSlotFree+0x12>
        }
    }
    return true;
 8014714:	2301      	movs	r3, #1
}
 8014716:	4618      	mov	r0, r3
 8014718:	3714      	adds	r7, #20
 801471a:	46bd      	mov	sp, r7
 801471c:	bc80      	pop	{r7}
 801471e:	4770      	bx	lr

08014720 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 8014720:	b580      	push	{r7, lr}
 8014722:	b082      	sub	sp, #8
 8014724:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 8014726:	2300      	movs	r3, #0
 8014728:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 801472a:	e007      	b.n	801473c <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 801472c:	79fb      	ldrb	r3, [r7, #7]
 801472e:	3301      	adds	r3, #1
 8014730:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 8014732:	79fb      	ldrb	r3, [r7, #7]
 8014734:	2b20      	cmp	r3, #32
 8014736:	d101      	bne.n	801473c <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 8014738:	2300      	movs	r3, #0
 801473a:	e012      	b.n	8014762 <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 801473c:	79fb      	ldrb	r3, [r7, #7]
 801473e:	011b      	lsls	r3, r3, #4
 8014740:	3308      	adds	r3, #8
 8014742:	4a0a      	ldr	r2, [pc, #40]	; (801476c <MallocNewMacCommandSlot+0x4c>)
 8014744:	4413      	add	r3, r2
 8014746:	4618      	mov	r0, r3
 8014748:	f7ff ffcd 	bl	80146e6 <IsSlotFree>
 801474c:	4603      	mov	r3, r0
 801474e:	f083 0301 	eor.w	r3, r3, #1
 8014752:	b2db      	uxtb	r3, r3
 8014754:	2b00      	cmp	r3, #0
 8014756:	d1e9      	bne.n	801472c <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 8014758:	79fb      	ldrb	r3, [r7, #7]
 801475a:	011b      	lsls	r3, r3, #4
 801475c:	3308      	adds	r3, #8
 801475e:	4a03      	ldr	r2, [pc, #12]	; (801476c <MallocNewMacCommandSlot+0x4c>)
 8014760:	4413      	add	r3, r2
}
 8014762:	4618      	mov	r0, r3
 8014764:	3708      	adds	r7, #8
 8014766:	46bd      	mov	sp, r7
 8014768:	bd80      	pop	{r7, pc}
 801476a:	bf00      	nop
 801476c:	2000183c 	.word	0x2000183c

08014770 <FreeMacCommandSlot>:
 * \param [in]    slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 8014770:	b580      	push	{r7, lr}
 8014772:	b082      	sub	sp, #8
 8014774:	af00      	add	r7, sp, #0
 8014776:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	2b00      	cmp	r3, #0
 801477c:	d101      	bne.n	8014782 <FreeMacCommandSlot+0x12>
    {
        return false;
 801477e:	2300      	movs	r3, #0
 8014780:	e005      	b.n	801478e <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 8014782:	2210      	movs	r2, #16
 8014784:	2100      	movs	r1, #0
 8014786:	6878      	ldr	r0, [r7, #4]
 8014788:	f005 fccc 	bl	801a124 <memset1>

    return true;
 801478c:	2301      	movs	r3, #1
}
 801478e:	4618      	mov	r0, r3
 8014790:	3708      	adds	r7, #8
 8014792:	46bd      	mov	sp, r7
 8014794:	bd80      	pop	{r7, pc}

08014796 <LinkedListInit>:
 *
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 8014796:	b480      	push	{r7}
 8014798:	b083      	sub	sp, #12
 801479a:	af00      	add	r7, sp, #0
 801479c:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 801479e:	687b      	ldr	r3, [r7, #4]
 80147a0:	2b00      	cmp	r3, #0
 80147a2:	d101      	bne.n	80147a8 <LinkedListInit+0x12>
    {
        return false;
 80147a4:	2300      	movs	r3, #0
 80147a6:	e006      	b.n	80147b6 <LinkedListInit+0x20>
    }

    list->First = NULL;
 80147a8:	687b      	ldr	r3, [r7, #4]
 80147aa:	2200      	movs	r2, #0
 80147ac:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	2200      	movs	r2, #0
 80147b2:	605a      	str	r2, [r3, #4]

    return true;
 80147b4:	2301      	movs	r3, #1
}
 80147b6:	4618      	mov	r0, r3
 80147b8:	370c      	adds	r7, #12
 80147ba:	46bd      	mov	sp, r7
 80147bc:	bc80      	pop	{r7}
 80147be:	4770      	bx	lr

080147c0 <LinkedListAdd>:
 * \param [in]    list           - List where the element shall be added.
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 80147c0:	b480      	push	{r7}
 80147c2:	b083      	sub	sp, #12
 80147c4:	af00      	add	r7, sp, #0
 80147c6:	6078      	str	r0, [r7, #4]
 80147c8:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 80147ca:	687b      	ldr	r3, [r7, #4]
 80147cc:	2b00      	cmp	r3, #0
 80147ce:	d002      	beq.n	80147d6 <LinkedListAdd+0x16>
 80147d0:	683b      	ldr	r3, [r7, #0]
 80147d2:	2b00      	cmp	r3, #0
 80147d4:	d101      	bne.n	80147da <LinkedListAdd+0x1a>
    {
        return false;
 80147d6:	2300      	movs	r3, #0
 80147d8:	e015      	b.n	8014806 <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 80147da:	687b      	ldr	r3, [r7, #4]
 80147dc:	681b      	ldr	r3, [r3, #0]
 80147de:	2b00      	cmp	r3, #0
 80147e0:	d102      	bne.n	80147e8 <LinkedListAdd+0x28>
    {
        list->First = element;
 80147e2:	687b      	ldr	r3, [r7, #4]
 80147e4:	683a      	ldr	r2, [r7, #0]
 80147e6:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 80147e8:	687b      	ldr	r3, [r7, #4]
 80147ea:	685b      	ldr	r3, [r3, #4]
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	d003      	beq.n	80147f8 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 80147f0:	687b      	ldr	r3, [r7, #4]
 80147f2:	685b      	ldr	r3, [r3, #4]
 80147f4:	683a      	ldr	r2, [r7, #0]
 80147f6:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 80147f8:	683b      	ldr	r3, [r7, #0]
 80147fa:	2200      	movs	r2, #0
 80147fc:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 80147fe:	687b      	ldr	r3, [r7, #4]
 8014800:	683a      	ldr	r2, [r7, #0]
 8014802:	605a      	str	r2, [r3, #4]

    return true;
 8014804:	2301      	movs	r3, #1
}
 8014806:	4618      	mov	r0, r3
 8014808:	370c      	adds	r7, #12
 801480a:	46bd      	mov	sp, r7
 801480c:	bc80      	pop	{r7}
 801480e:	4770      	bx	lr

08014810 <LinkedListGetPrevious>:
 * \param [in]    list           - List
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 8014810:	b480      	push	{r7}
 8014812:	b085      	sub	sp, #20
 8014814:	af00      	add	r7, sp, #0
 8014816:	6078      	str	r0, [r7, #4]
 8014818:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	2b00      	cmp	r3, #0
 801481e:	d002      	beq.n	8014826 <LinkedListGetPrevious+0x16>
 8014820:	683b      	ldr	r3, [r7, #0]
 8014822:	2b00      	cmp	r3, #0
 8014824:	d101      	bne.n	801482a <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 8014826:	2300      	movs	r3, #0
 8014828:	e016      	b.n	8014858 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	681b      	ldr	r3, [r3, #0]
 801482e:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 8014830:	683a      	ldr	r2, [r7, #0]
 8014832:	68fb      	ldr	r3, [r7, #12]
 8014834:	429a      	cmp	r2, r3
 8014836:	d00c      	beq.n	8014852 <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8014838:	e002      	b.n	8014840 <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 801483a:	68fb      	ldr	r3, [r7, #12]
 801483c:	681b      	ldr	r3, [r3, #0]
 801483e:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8014840:	68fb      	ldr	r3, [r7, #12]
 8014842:	2b00      	cmp	r3, #0
 8014844:	d007      	beq.n	8014856 <LinkedListGetPrevious+0x46>
 8014846:	68fb      	ldr	r3, [r7, #12]
 8014848:	681b      	ldr	r3, [r3, #0]
 801484a:	683a      	ldr	r2, [r7, #0]
 801484c:	429a      	cmp	r2, r3
 801484e:	d1f4      	bne.n	801483a <LinkedListGetPrevious+0x2a>
 8014850:	e001      	b.n	8014856 <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 8014852:	2300      	movs	r3, #0
 8014854:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 8014856:	68fb      	ldr	r3, [r7, #12]
}
 8014858:	4618      	mov	r0, r3
 801485a:	3714      	adds	r7, #20
 801485c:	46bd      	mov	sp, r7
 801485e:	bc80      	pop	{r7}
 8014860:	4770      	bx	lr

08014862 <LinkedListRemove>:
 * \param [in]    list           - List where the element shall be removed from.
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 8014862:	b580      	push	{r7, lr}
 8014864:	b084      	sub	sp, #16
 8014866:	af00      	add	r7, sp, #0
 8014868:	6078      	str	r0, [r7, #4]
 801486a:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 801486c:	687b      	ldr	r3, [r7, #4]
 801486e:	2b00      	cmp	r3, #0
 8014870:	d002      	beq.n	8014878 <LinkedListRemove+0x16>
 8014872:	683b      	ldr	r3, [r7, #0]
 8014874:	2b00      	cmp	r3, #0
 8014876:	d101      	bne.n	801487c <LinkedListRemove+0x1a>
    {
        return false;
 8014878:	2300      	movs	r3, #0
 801487a:	e020      	b.n	80148be <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 801487c:	6839      	ldr	r1, [r7, #0]
 801487e:	6878      	ldr	r0, [r7, #4]
 8014880:	f7ff ffc6 	bl	8014810 <LinkedListGetPrevious>
 8014884:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 8014886:	687b      	ldr	r3, [r7, #4]
 8014888:	681b      	ldr	r3, [r3, #0]
 801488a:	683a      	ldr	r2, [r7, #0]
 801488c:	429a      	cmp	r2, r3
 801488e:	d103      	bne.n	8014898 <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 8014890:	683b      	ldr	r3, [r7, #0]
 8014892:	681a      	ldr	r2, [r3, #0]
 8014894:	687b      	ldr	r3, [r7, #4]
 8014896:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	685b      	ldr	r3, [r3, #4]
 801489c:	683a      	ldr	r2, [r7, #0]
 801489e:	429a      	cmp	r2, r3
 80148a0:	d102      	bne.n	80148a8 <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 80148a2:	687b      	ldr	r3, [r7, #4]
 80148a4:	68fa      	ldr	r2, [r7, #12]
 80148a6:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 80148a8:	68fb      	ldr	r3, [r7, #12]
 80148aa:	2b00      	cmp	r3, #0
 80148ac:	d003      	beq.n	80148b6 <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 80148ae:	683b      	ldr	r3, [r7, #0]
 80148b0:	681a      	ldr	r2, [r3, #0]
 80148b2:	68fb      	ldr	r3, [r7, #12]
 80148b4:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 80148b6:	683b      	ldr	r3, [r7, #0]
 80148b8:	2200      	movs	r2, #0
 80148ba:	601a      	str	r2, [r3, #0]

    return true;
 80148bc:	2301      	movs	r3, #1
}
 80148be:	4618      	mov	r0, r3
 80148c0:	3710      	adds	r7, #16
 80148c2:	46bd      	mov	sp, r7
 80148c4:	bd80      	pop	{r7, pc}
	...

080148c8 <IsSticky>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 80148c8:	b480      	push	{r7}
 80148ca:	b083      	sub	sp, #12
 80148cc:	af00      	add	r7, sp, #0
 80148ce:	4603      	mov	r3, r0
 80148d0:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 80148d2:	79fb      	ldrb	r3, [r7, #7]
 80148d4:	2b11      	cmp	r3, #17
 80148d6:	bf8c      	ite	hi
 80148d8:	2201      	movhi	r2, #1
 80148da:	2200      	movls	r2, #0
 80148dc:	b2d2      	uxtb	r2, r2
 80148de:	2a00      	cmp	r2, #0
 80148e0:	d10d      	bne.n	80148fe <IsSticky+0x36>
 80148e2:	4a0a      	ldr	r2, [pc, #40]	; (801490c <IsSticky+0x44>)
 80148e4:	fa22 f303 	lsr.w	r3, r2, r3
 80148e8:	f003 0301 	and.w	r3, r3, #1
 80148ec:	2b00      	cmp	r3, #0
 80148ee:	bf14      	ite	ne
 80148f0:	2301      	movne	r3, #1
 80148f2:	2300      	moveq	r3, #0
 80148f4:	b2db      	uxtb	r3, r3
 80148f6:	2b00      	cmp	r3, #0
 80148f8:	d001      	beq.n	80148fe <IsSticky+0x36>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
 80148fa:	2301      	movs	r3, #1
 80148fc:	e000      	b.n	8014900 <IsSticky+0x38>
        default:
            return false;
 80148fe:	2300      	movs	r3, #0
    }
}
 8014900:	4618      	mov	r0, r3
 8014902:	370c      	adds	r7, #12
 8014904:	46bd      	mov	sp, r7
 8014906:	bc80      	pop	{r7}
 8014908:	4770      	bx	lr
 801490a:	bf00      	nop
 801490c:	00020720 	.word	0x00020720

08014910 <IsConfirmationRequired>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsConfirmationRequired( uint8_t cid )
{
 8014910:	b480      	push	{r7}
 8014912:	b083      	sub	sp, #12
 8014914:	af00      	add	r7, sp, #0
 8014916:	4603      	mov	r3, r0
 8014918:	71fb      	strb	r3, [r7, #7]
        case MOTE_MAC_REKEY_IND:
        case MOTE_MAC_DEVICE_MODE_IND:
            return true;
#endif /* LORAMAC_VERSION */
        default:
            return false;
 801491a:	2300      	movs	r3, #0
    }
}
 801491c:	4618      	mov	r0, r3
 801491e:	370c      	adds	r7, #12
 8014920:	46bd      	mov	sp, r7
 8014922:	bc80      	pop	{r7}
 8014924:	4770      	bx	lr
	...

08014928 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 8014928:	b580      	push	{r7, lr}
 801492a:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 801492c:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8014930:	2100      	movs	r1, #0
 8014932:	4804      	ldr	r0, [pc, #16]	; (8014944 <LoRaMacCommandsInit+0x1c>)
 8014934:	f005 fbf6 	bl	801a124 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 8014938:	4802      	ldr	r0, [pc, #8]	; (8014944 <LoRaMacCommandsInit+0x1c>)
 801493a:	f7ff ff2c 	bl	8014796 <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 801493e:	2300      	movs	r3, #0
}
 8014940:	4618      	mov	r0, r3
 8014942:	bd80      	pop	{r7, pc}
 8014944:	2000183c 	.word	0x2000183c

08014948 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8014948:	b580      	push	{r7, lr}
 801494a:	b086      	sub	sp, #24
 801494c:	af00      	add	r7, sp, #0
 801494e:	4603      	mov	r3, r0
 8014950:	60b9      	str	r1, [r7, #8]
 8014952:	607a      	str	r2, [r7, #4]
 8014954:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 8014956:	68bb      	ldr	r3, [r7, #8]
 8014958:	2b00      	cmp	r3, #0
 801495a:	d101      	bne.n	8014960 <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801495c:	2301      	movs	r3, #1
 801495e:	e03b      	b.n	80149d8 <LoRaMacCommandsAddCmd+0x90>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 8014960:	f7ff fede 	bl	8014720 <MallocNewMacCommandSlot>
 8014964:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 8014966:	697b      	ldr	r3, [r7, #20]
 8014968:	2b00      	cmp	r3, #0
 801496a:	d101      	bne.n	8014970 <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 801496c:	2302      	movs	r3, #2
 801496e:	e033      	b.n	80149d8 <LoRaMacCommandsAddCmd+0x90>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 8014970:	6979      	ldr	r1, [r7, #20]
 8014972:	481b      	ldr	r0, [pc, #108]	; (80149e0 <LoRaMacCommandsAddCmd+0x98>)
 8014974:	f7ff ff24 	bl	80147c0 <LinkedListAdd>
 8014978:	4603      	mov	r3, r0
 801497a:	f083 0301 	eor.w	r3, r3, #1
 801497e:	b2db      	uxtb	r3, r3
 8014980:	2b00      	cmp	r3, #0
 8014982:	d001      	beq.n	8014988 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 8014984:	2305      	movs	r3, #5
 8014986:	e027      	b.n	80149d8 <LoRaMacCommandsAddCmd+0x90>
    }

    // Set Values
    newCmd->CID = cid;
 8014988:	697b      	ldr	r3, [r7, #20]
 801498a:	7bfa      	ldrb	r2, [r7, #15]
 801498c:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 801498e:	697b      	ldr	r3, [r7, #20]
 8014990:	687a      	ldr	r2, [r7, #4]
 8014992:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8014994:	697b      	ldr	r3, [r7, #20]
 8014996:	3305      	adds	r3, #5
 8014998:	687a      	ldr	r2, [r7, #4]
 801499a:	b292      	uxth	r2, r2
 801499c:	68b9      	ldr	r1, [r7, #8]
 801499e:	4618      	mov	r0, r3
 80149a0:	f005 fb85 	bl	801a0ae <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 80149a4:	7bfb      	ldrb	r3, [r7, #15]
 80149a6:	4618      	mov	r0, r3
 80149a8:	f7ff ff8e 	bl	80148c8 <IsSticky>
 80149ac:	4603      	mov	r3, r0
 80149ae:	461a      	mov	r2, r3
 80149b0:	697b      	ldr	r3, [r7, #20]
 80149b2:	731a      	strb	r2, [r3, #12]
    newCmd->IsConfirmationRequired = IsConfirmationRequired( cid );
 80149b4:	7bfb      	ldrb	r3, [r7, #15]
 80149b6:	4618      	mov	r0, r3
 80149b8:	f7ff ffaa 	bl	8014910 <IsConfirmationRequired>
 80149bc:	4603      	mov	r3, r0
 80149be:	461a      	mov	r2, r3
 80149c0:	697b      	ldr	r3, [r7, #20]
 80149c2:	735a      	strb	r2, [r3, #13]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 80149c4:	4b06      	ldr	r3, [pc, #24]	; (80149e0 <LoRaMacCommandsAddCmd+0x98>)
 80149c6:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80149ca:	687b      	ldr	r3, [r7, #4]
 80149cc:	4413      	add	r3, r2
 80149ce:	3301      	adds	r3, #1
 80149d0:	4a03      	ldr	r2, [pc, #12]	; (80149e0 <LoRaMacCommandsAddCmd+0x98>)
 80149d2:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

    return LORAMAC_COMMANDS_SUCCESS;
 80149d6:	2300      	movs	r3, #0
}
 80149d8:	4618      	mov	r0, r3
 80149da:	3718      	adds	r7, #24
 80149dc:	46bd      	mov	sp, r7
 80149de:	bd80      	pop	{r7, pc}
 80149e0:	2000183c 	.word	0x2000183c

080149e4 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 80149e4:	b580      	push	{r7, lr}
 80149e6:	b082      	sub	sp, #8
 80149e8:	af00      	add	r7, sp, #0
 80149ea:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 80149ec:	687b      	ldr	r3, [r7, #4]
 80149ee:	2b00      	cmp	r3, #0
 80149f0:	d101      	bne.n	80149f6 <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80149f2:	2301      	movs	r3, #1
 80149f4:	e021      	b.n	8014a3a <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 80149f6:	6879      	ldr	r1, [r7, #4]
 80149f8:	4812      	ldr	r0, [pc, #72]	; (8014a44 <LoRaMacCommandsRemoveCmd+0x60>)
 80149fa:	f7ff ff32 	bl	8014862 <LinkedListRemove>
 80149fe:	4603      	mov	r3, r0
 8014a00:	f083 0301 	eor.w	r3, r3, #1
 8014a04:	b2db      	uxtb	r3, r3
 8014a06:	2b00      	cmp	r3, #0
 8014a08:	d001      	beq.n	8014a0e <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8014a0a:	2303      	movs	r3, #3
 8014a0c:	e015      	b.n	8014a3a <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 8014a0e:	4b0d      	ldr	r3, [pc, #52]	; (8014a44 <LoRaMacCommandsRemoveCmd+0x60>)
 8014a10:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8014a14:	687b      	ldr	r3, [r7, #4]
 8014a16:	689b      	ldr	r3, [r3, #8]
 8014a18:	1ad3      	subs	r3, r2, r3
 8014a1a:	3b01      	subs	r3, #1
 8014a1c:	4a09      	ldr	r2, [pc, #36]	; (8014a44 <LoRaMacCommandsRemoveCmd+0x60>)
 8014a1e:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 8014a22:	6878      	ldr	r0, [r7, #4]
 8014a24:	f7ff fea4 	bl	8014770 <FreeMacCommandSlot>
 8014a28:	4603      	mov	r3, r0
 8014a2a:	f083 0301 	eor.w	r3, r3, #1
 8014a2e:	b2db      	uxtb	r3, r3
 8014a30:	2b00      	cmp	r3, #0
 8014a32:	d001      	beq.n	8014a38 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 8014a34:	2305      	movs	r3, #5
 8014a36:	e000      	b.n	8014a3a <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8014a38:	2300      	movs	r3, #0
}
 8014a3a:	4618      	mov	r0, r3
 8014a3c:	3708      	adds	r7, #8
 8014a3e:	46bd      	mov	sp, r7
 8014a40:	bd80      	pop	{r7, pc}
 8014a42:	bf00      	nop
 8014a44:	2000183c 	.word	0x2000183c

08014a48 <LoRaMacCommandsGetCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsGetCmd( uint8_t cid, MacCommand_t** macCmd )
{
 8014a48:	b480      	push	{r7}
 8014a4a:	b085      	sub	sp, #20
 8014a4c:	af00      	add	r7, sp, #0
 8014a4e:	4603      	mov	r3, r0
 8014a50:	6039      	str	r1, [r7, #0]
 8014a52:	71fb      	strb	r3, [r7, #7]
    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8014a54:	4b0e      	ldr	r3, [pc, #56]	; (8014a90 <LoRaMacCommandsGetCmd+0x48>)
 8014a56:	681b      	ldr	r3, [r3, #0]
 8014a58:	60fb      	str	r3, [r7, #12]

    // Loop through all elements until we find the element with the given CID
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 8014a5a:	e002      	b.n	8014a62 <LoRaMacCommandsGetCmd+0x1a>
    {
        curElement = curElement->Next;
 8014a5c:	68fb      	ldr	r3, [r7, #12]
 8014a5e:	681b      	ldr	r3, [r3, #0]
 8014a60:	60fb      	str	r3, [r7, #12]
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 8014a62:	68fb      	ldr	r3, [r7, #12]
 8014a64:	2b00      	cmp	r3, #0
 8014a66:	d004      	beq.n	8014a72 <LoRaMacCommandsGetCmd+0x2a>
 8014a68:	68fb      	ldr	r3, [r7, #12]
 8014a6a:	791b      	ldrb	r3, [r3, #4]
 8014a6c:	79fa      	ldrb	r2, [r7, #7]
 8014a6e:	429a      	cmp	r2, r3
 8014a70:	d1f4      	bne.n	8014a5c <LoRaMacCommandsGetCmd+0x14>
    }

    // Update the pointer anyway
    *macCmd = curElement;
 8014a72:	683b      	ldr	r3, [r7, #0]
 8014a74:	68fa      	ldr	r2, [r7, #12]
 8014a76:	601a      	str	r2, [r3, #0]

    // Handle error in case if we reached the end without finding it.
    if( curElement == NULL )
 8014a78:	68fb      	ldr	r3, [r7, #12]
 8014a7a:	2b00      	cmp	r3, #0
 8014a7c:	d101      	bne.n	8014a82 <LoRaMacCommandsGetCmd+0x3a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8014a7e:	2303      	movs	r3, #3
 8014a80:	e000      	b.n	8014a84 <LoRaMacCommandsGetCmd+0x3c>
    }
    return LORAMAC_COMMANDS_SUCCESS;
 8014a82:	2300      	movs	r3, #0
}
 8014a84:	4618      	mov	r0, r3
 8014a86:	3714      	adds	r7, #20
 8014a88:	46bd      	mov	sp, r7
 8014a8a:	bc80      	pop	{r7}
 8014a8c:	4770      	bx	lr
 8014a8e:	bf00      	nop
 8014a90:	2000183c 	.word	0x2000183c

08014a94 <LoRaMacCommandsRemoveNoneStickyCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 8014a94:	b580      	push	{r7, lr}
 8014a96:	b082      	sub	sp, #8
 8014a98:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8014a9a:	4b0f      	ldr	r3, [pc, #60]	; (8014ad8 <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 8014a9c:	681b      	ldr	r3, [r3, #0]
 8014a9e:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8014aa0:	e012      	b.n	8014ac8 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 8014aa2:	687b      	ldr	r3, [r7, #4]
 8014aa4:	7b1b      	ldrb	r3, [r3, #12]
 8014aa6:	f083 0301 	eor.w	r3, r3, #1
 8014aaa:	b2db      	uxtb	r3, r3
 8014aac:	2b00      	cmp	r3, #0
 8014aae:	d008      	beq.n	8014ac2 <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 8014ab0:	687b      	ldr	r3, [r7, #4]
 8014ab2:	681b      	ldr	r3, [r3, #0]
 8014ab4:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 8014ab6:	6878      	ldr	r0, [r7, #4]
 8014ab8:	f7ff ff94 	bl	80149e4 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 8014abc:	683b      	ldr	r3, [r7, #0]
 8014abe:	607b      	str	r3, [r7, #4]
 8014ac0:	e002      	b.n	8014ac8 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 8014ac2:	687b      	ldr	r3, [r7, #4]
 8014ac4:	681b      	ldr	r3, [r3, #0]
 8014ac6:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8014ac8:	687b      	ldr	r3, [r7, #4]
 8014aca:	2b00      	cmp	r3, #0
 8014acc:	d1e9      	bne.n	8014aa2 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8014ace:	2300      	movs	r3, #0
}
 8014ad0:	4618      	mov	r0, r3
 8014ad2:	3708      	adds	r7, #8
 8014ad4:	46bd      	mov	sp, r7
 8014ad6:	bd80      	pop	{r7, pc}
 8014ad8:	2000183c 	.word	0x2000183c

08014adc <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 8014adc:	b580      	push	{r7, lr}
 8014ade:	b082      	sub	sp, #8
 8014ae0:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8014ae2:	4b13      	ldr	r3, [pc, #76]	; (8014b30 <LoRaMacCommandsRemoveStickyAnsCmds+0x54>)
 8014ae4:	681b      	ldr	r3, [r3, #0]
 8014ae6:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8014ae8:	e01a      	b.n	8014b20 <LoRaMacCommandsRemoveStickyAnsCmds+0x44>
    {
        nexElement = curElement->Next;
 8014aea:	687b      	ldr	r3, [r7, #4]
 8014aec:	681b      	ldr	r3, [r3, #0]
 8014aee:	603b      	str	r3, [r7, #0]
        if( ( IsSticky( curElement->CID ) == true ) &&
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	791b      	ldrb	r3, [r3, #4]
 8014af4:	4618      	mov	r0, r3
 8014af6:	f7ff fee7 	bl	80148c8 <IsSticky>
 8014afa:	4603      	mov	r3, r0
 8014afc:	2b00      	cmp	r3, #0
 8014afe:	d00d      	beq.n	8014b1c <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
            ( IsConfirmationRequired( curElement->CID ) == false ) )
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	791b      	ldrb	r3, [r3, #4]
 8014b04:	4618      	mov	r0, r3
 8014b06:	f7ff ff03 	bl	8014910 <IsConfirmationRequired>
 8014b0a:	4603      	mov	r3, r0
 8014b0c:	f083 0301 	eor.w	r3, r3, #1
 8014b10:	b2db      	uxtb	r3, r3
        if( ( IsSticky( curElement->CID ) == true ) &&
 8014b12:	2b00      	cmp	r3, #0
 8014b14:	d002      	beq.n	8014b1c <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 8014b16:	6878      	ldr	r0, [r7, #4]
 8014b18:	f7ff ff64 	bl	80149e4 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 8014b1c:	683b      	ldr	r3, [r7, #0]
 8014b1e:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8014b20:	687b      	ldr	r3, [r7, #4]
 8014b22:	2b00      	cmp	r3, #0
 8014b24:	d1e1      	bne.n	8014aea <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8014b26:	2300      	movs	r3, #0
}
 8014b28:	4618      	mov	r0, r3
 8014b2a:	3708      	adds	r7, #8
 8014b2c:	46bd      	mov	sp, r7
 8014b2e:	bd80      	pop	{r7, pc}
 8014b30:	2000183c 	.word	0x2000183c

08014b34 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 8014b34:	b480      	push	{r7}
 8014b36:	b083      	sub	sp, #12
 8014b38:	af00      	add	r7, sp, #0
 8014b3a:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	2b00      	cmp	r3, #0
 8014b40:	d101      	bne.n	8014b46 <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8014b42:	2301      	movs	r3, #1
 8014b44:	e005      	b.n	8014b52 <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 8014b46:	4b05      	ldr	r3, [pc, #20]	; (8014b5c <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 8014b48:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 8014b50:	2300      	movs	r3, #0
}
 8014b52:	4618      	mov	r0, r3
 8014b54:	370c      	adds	r7, #12
 8014b56:	46bd      	mov	sp, r7
 8014b58:	bc80      	pop	{r7}
 8014b5a:	4770      	bx	lr
 8014b5c:	2000183c 	.word	0x2000183c

08014b60 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 8014b60:	b580      	push	{r7, lr}
 8014b62:	b088      	sub	sp, #32
 8014b64:	af00      	add	r7, sp, #0
 8014b66:	60f8      	str	r0, [r7, #12]
 8014b68:	60b9      	str	r1, [r7, #8]
 8014b6a:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 8014b6c:	4b25      	ldr	r3, [pc, #148]	; (8014c04 <LoRaMacCommandsSerializeCmds+0xa4>)
 8014b6e:	681b      	ldr	r3, [r3, #0]
 8014b70:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 8014b72:	2300      	movs	r3, #0
 8014b74:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 8014b76:	687b      	ldr	r3, [r7, #4]
 8014b78:	2b00      	cmp	r3, #0
 8014b7a:	d002      	beq.n	8014b82 <LoRaMacCommandsSerializeCmds+0x22>
 8014b7c:	68bb      	ldr	r3, [r7, #8]
 8014b7e:	2b00      	cmp	r3, #0
 8014b80:	d126      	bne.n	8014bd0 <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8014b82:	2301      	movs	r3, #1
 8014b84:	e039      	b.n	8014bfa <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 8014b86:	7efb      	ldrb	r3, [r7, #27]
 8014b88:	68fa      	ldr	r2, [r7, #12]
 8014b8a:	1ad2      	subs	r2, r2, r3
 8014b8c:	69fb      	ldr	r3, [r7, #28]
 8014b8e:	689b      	ldr	r3, [r3, #8]
 8014b90:	3301      	adds	r3, #1
 8014b92:	429a      	cmp	r2, r3
 8014b94:	d320      	bcc.n	8014bd8 <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 8014b96:	7efb      	ldrb	r3, [r7, #27]
 8014b98:	1c5a      	adds	r2, r3, #1
 8014b9a:	76fa      	strb	r2, [r7, #27]
 8014b9c:	461a      	mov	r2, r3
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	4413      	add	r3, r2
 8014ba2:	69fa      	ldr	r2, [r7, #28]
 8014ba4:	7912      	ldrb	r2, [r2, #4]
 8014ba6:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 8014ba8:	7efb      	ldrb	r3, [r7, #27]
 8014baa:	687a      	ldr	r2, [r7, #4]
 8014bac:	18d0      	adds	r0, r2, r3
 8014bae:	69fb      	ldr	r3, [r7, #28]
 8014bb0:	1d59      	adds	r1, r3, #5
 8014bb2:	69fb      	ldr	r3, [r7, #28]
 8014bb4:	689b      	ldr	r3, [r3, #8]
 8014bb6:	b29b      	uxth	r3, r3
 8014bb8:	461a      	mov	r2, r3
 8014bba:	f005 fa78 	bl	801a0ae <memcpy1>
            itr += curElement->PayloadSize;
 8014bbe:	69fb      	ldr	r3, [r7, #28]
 8014bc0:	689b      	ldr	r3, [r3, #8]
 8014bc2:	b2da      	uxtb	r2, r3
 8014bc4:	7efb      	ldrb	r3, [r7, #27]
 8014bc6:	4413      	add	r3, r2
 8014bc8:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 8014bca:	69fb      	ldr	r3, [r7, #28]
 8014bcc:	681b      	ldr	r3, [r3, #0]
 8014bce:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8014bd0:	69fb      	ldr	r3, [r7, #28]
 8014bd2:	2b00      	cmp	r3, #0
 8014bd4:	d1d7      	bne.n	8014b86 <LoRaMacCommandsSerializeCmds+0x26>
 8014bd6:	e009      	b.n	8014bec <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 8014bd8:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 8014bda:	e007      	b.n	8014bec <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 8014bdc:	69fb      	ldr	r3, [r7, #28]
 8014bde:	681b      	ldr	r3, [r3, #0]
 8014be0:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 8014be2:	69f8      	ldr	r0, [r7, #28]
 8014be4:	f7ff fefe 	bl	80149e4 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 8014be8:	697b      	ldr	r3, [r7, #20]
 8014bea:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8014bec:	69fb      	ldr	r3, [r7, #28]
 8014bee:	2b00      	cmp	r3, #0
 8014bf0:	d1f4      	bne.n	8014bdc <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 8014bf2:	68b8      	ldr	r0, [r7, #8]
 8014bf4:	f7ff ff9e 	bl	8014b34 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 8014bf8:	2300      	movs	r3, #0
}
 8014bfa:	4618      	mov	r0, r3
 8014bfc:	3720      	adds	r7, #32
 8014bfe:	46bd      	mov	sp, r7
 8014c00:	bd80      	pop	{r7, pc}
 8014c02:	bf00      	nop
 8014c04:	2000183c 	.word	0x2000183c

08014c08 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 8014c08:	b480      	push	{r7}
 8014c0a:	b085      	sub	sp, #20
 8014c0c:	af00      	add	r7, sp, #0
 8014c0e:	4603      	mov	r3, r0
 8014c10:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 8014c12:	2300      	movs	r3, #0
 8014c14:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 8014c16:	79fb      	ldrb	r3, [r7, #7]
 8014c18:	3b02      	subs	r3, #2
 8014c1a:	2b11      	cmp	r3, #17
 8014c1c:	d850      	bhi.n	8014cc0 <LoRaMacCommandsGetCmdSize+0xb8>
 8014c1e:	a201      	add	r2, pc, #4	; (adr r2, 8014c24 <LoRaMacCommandsGetCmdSize+0x1c>)
 8014c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014c24:	08014c6d 	.word	0x08014c6d
 8014c28:	08014c73 	.word	0x08014c73
 8014c2c:	08014c79 	.word	0x08014c79
 8014c30:	08014c7f 	.word	0x08014c7f
 8014c34:	08014c85 	.word	0x08014c85
 8014c38:	08014c8b 	.word	0x08014c8b
 8014c3c:	08014c91 	.word	0x08014c91
 8014c40:	08014c97 	.word	0x08014c97
 8014c44:	08014c9d 	.word	0x08014c9d
 8014c48:	08014cc1 	.word	0x08014cc1
 8014c4c:	08014cc1 	.word	0x08014cc1
 8014c50:	08014ca3 	.word	0x08014ca3
 8014c54:	08014cc1 	.word	0x08014cc1
 8014c58:	08014cc1 	.word	0x08014cc1
 8014c5c:	08014ca9 	.word	0x08014ca9
 8014c60:	08014caf 	.word	0x08014caf
 8014c64:	08014cb5 	.word	0x08014cb5
 8014c68:	08014cbb 	.word	0x08014cbb
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 8014c6c:	2303      	movs	r3, #3
 8014c6e:	73fb      	strb	r3, [r7, #15]
            break;
 8014c70:	e027      	b.n	8014cc2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 8014c72:	2305      	movs	r3, #5
 8014c74:	73fb      	strb	r3, [r7, #15]
            break;
 8014c76:	e024      	b.n	8014cc2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 8014c78:	2302      	movs	r3, #2
 8014c7a:	73fb      	strb	r3, [r7, #15]
            break;
 8014c7c:	e021      	b.n	8014cc2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 8014c7e:	2305      	movs	r3, #5
 8014c80:	73fb      	strb	r3, [r7, #15]
            break;
 8014c82:	e01e      	b.n	8014cc2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 8014c84:	2301      	movs	r3, #1
 8014c86:	73fb      	strb	r3, [r7, #15]
            break;
 8014c88:	e01b      	b.n	8014cc2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 8014c8a:	2306      	movs	r3, #6
 8014c8c:	73fb      	strb	r3, [r7, #15]
            break;
 8014c8e:	e018      	b.n	8014cc2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 8014c90:	2302      	movs	r3, #2
 8014c92:	73fb      	strb	r3, [r7, #15]
            break;
 8014c94:	e015      	b.n	8014cc2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 8014c96:	2302      	movs	r3, #2
 8014c98:	73fb      	strb	r3, [r7, #15]
            break;
 8014c9a:	e012      	b.n	8014cc2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 8014c9c:	2305      	movs	r3, #5
 8014c9e:	73fb      	strb	r3, [r7, #15]
            break;
 8014ca0:	e00f      	b.n	8014cc2 <LoRaMacCommandsGetCmdSize+0xba>
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 8014ca2:	2306      	movs	r3, #6
 8014ca4:	73fb      	strb	r3, [r7, #15]
            break;
 8014ca6:	e00c      	b.n	8014cc2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 8014ca8:	2301      	movs	r3, #1
 8014caa:	73fb      	strb	r3, [r7, #15]
            break;
 8014cac:	e009      	b.n	8014cc2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 8014cae:	2305      	movs	r3, #5
 8014cb0:	73fb      	strb	r3, [r7, #15]
            break;
 8014cb2:	e006      	b.n	8014cc2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 8014cb4:	2304      	movs	r3, #4
 8014cb6:	73fb      	strb	r3, [r7, #15]
            break;
 8014cb8:	e003      	b.n	8014cc2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 8014cba:	2304      	movs	r3, #4
 8014cbc:	73fb      	strb	r3, [r7, #15]
            break;
 8014cbe:	e000      	b.n	8014cc2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 8014cc0:	bf00      	nop
        }
    }
    return cidSize;
 8014cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8014cc4:	4618      	mov	r0, r3
 8014cc6:	3714      	adds	r7, #20
 8014cc8:	46bd      	mov	sp, r7
 8014cca:	bc80      	pop	{r7}
 8014ccc:	4770      	bx	lr
 8014cce:	bf00      	nop

08014cd0 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 8014cd0:	b480      	push	{r7}
 8014cd2:	b083      	sub	sp, #12
 8014cd4:	af00      	add	r7, sp, #0
 8014cd6:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8014cd8:	687b      	ldr	r3, [r7, #4]
 8014cda:	4a07      	ldr	r2, [pc, #28]	; (8014cf8 <IncreaseBufferPointer+0x28>)
 8014cdc:	4293      	cmp	r3, r2
 8014cde:	d102      	bne.n	8014ce6 <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8014ce0:	4b06      	ldr	r3, [pc, #24]	; (8014cfc <IncreaseBufferPointer+0x2c>)
 8014ce2:	607b      	str	r3, [r7, #4]
 8014ce4:	e002      	b.n	8014cec <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	3304      	adds	r3, #4
 8014cea:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 8014cec:	687b      	ldr	r3, [r7, #4]
}
 8014cee:	4618      	mov	r0, r3
 8014cf0:	370c      	adds	r7, #12
 8014cf2:	46bd      	mov	sp, r7
 8014cf4:	bc80      	pop	{r7}
 8014cf6:	4770      	bx	lr
 8014cf8:	20001a64 	.word	0x20001a64
 8014cfc:	20001a54 	.word	0x20001a54

08014d00 <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 8014d00:	b480      	push	{r7}
 8014d02:	b083      	sub	sp, #12
 8014d04:	af00      	add	r7, sp, #0
 8014d06:	4603      	mov	r3, r0
 8014d08:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 8014d0a:	79fb      	ldrb	r3, [r7, #7]
 8014d0c:	2b00      	cmp	r3, #0
 8014d0e:	d101      	bne.n	8014d14 <IsListEmpty+0x14>
    {
        return true;
 8014d10:	2301      	movs	r3, #1
 8014d12:	e000      	b.n	8014d16 <IsListEmpty+0x16>
    }
    return false;
 8014d14:	2300      	movs	r3, #0
}
 8014d16:	4618      	mov	r0, r3
 8014d18:	370c      	adds	r7, #12
 8014d1a:	46bd      	mov	sp, r7
 8014d1c:	bc80      	pop	{r7}
 8014d1e:	4770      	bx	lr

08014d20 <IsListFull>:

static bool IsListFull( uint8_t count )
{
 8014d20:	b480      	push	{r7}
 8014d22:	b083      	sub	sp, #12
 8014d24:	af00      	add	r7, sp, #0
 8014d26:	4603      	mov	r3, r0
 8014d28:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8014d2a:	79fb      	ldrb	r3, [r7, #7]
 8014d2c:	2b04      	cmp	r3, #4
 8014d2e:	d901      	bls.n	8014d34 <IsListFull+0x14>
    {
        return true;
 8014d30:	2301      	movs	r3, #1
 8014d32:	e000      	b.n	8014d36 <IsListFull+0x16>
    }
    return false;
 8014d34:	2300      	movs	r3, #0
}
 8014d36:	4618      	mov	r0, r3
 8014d38:	370c      	adds	r7, #12
 8014d3a:	46bd      	mov	sp, r7
 8014d3c:	bc80      	pop	{r7}
 8014d3e:	4770      	bx	lr

08014d40 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 8014d40:	b580      	push	{r7, lr}
 8014d42:	b086      	sub	sp, #24
 8014d44:	af00      	add	r7, sp, #0
 8014d46:	4603      	mov	r3, r0
 8014d48:	60b9      	str	r1, [r7, #8]
 8014d4a:	607a      	str	r2, [r7, #4]
 8014d4c:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 8014d4e:	68bb      	ldr	r3, [r7, #8]
 8014d50:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8014d52:	4b13      	ldr	r3, [pc, #76]	; (8014da0 <GetElement+0x60>)
 8014d54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014d58:	4618      	mov	r0, r3
 8014d5a:	f7ff ffd1 	bl	8014d00 <IsListEmpty>
 8014d5e:	4603      	mov	r3, r0
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	d001      	beq.n	8014d68 <GetElement+0x28>
    {
        return NULL;
 8014d64:	2300      	movs	r3, #0
 8014d66:	e017      	b.n	8014d98 <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8014d68:	2300      	movs	r3, #0
 8014d6a:	74fb      	strb	r3, [r7, #19]
 8014d6c:	e00d      	b.n	8014d8a <GetElement+0x4a>
    {
        if( element->Request == request )
 8014d6e:	697b      	ldr	r3, [r7, #20]
 8014d70:	781b      	ldrb	r3, [r3, #0]
 8014d72:	7bfa      	ldrb	r2, [r7, #15]
 8014d74:	429a      	cmp	r2, r3
 8014d76:	d101      	bne.n	8014d7c <GetElement+0x3c>
        {
            // We have found the element
            return element;
 8014d78:	697b      	ldr	r3, [r7, #20]
 8014d7a:	e00d      	b.n	8014d98 <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 8014d7c:	6978      	ldr	r0, [r7, #20]
 8014d7e:	f7ff ffa7 	bl	8014cd0 <IncreaseBufferPointer>
 8014d82:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8014d84:	7cfb      	ldrb	r3, [r7, #19]
 8014d86:	3301      	adds	r3, #1
 8014d88:	74fb      	strb	r3, [r7, #19]
 8014d8a:	4b05      	ldr	r3, [pc, #20]	; (8014da0 <GetElement+0x60>)
 8014d8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014d90:	7cfa      	ldrb	r2, [r7, #19]
 8014d92:	429a      	cmp	r2, r3
 8014d94:	d3eb      	bcc.n	8014d6e <GetElement+0x2e>
    }

    return NULL;
 8014d96:	2300      	movs	r3, #0
}
 8014d98:	4618      	mov	r0, r3
 8014d9a:	3718      	adds	r7, #24
 8014d9c:	46bd      	mov	sp, r7
 8014d9e:	bd80      	pop	{r7, pc}
 8014da0:	20001a48 	.word	0x20001a48

08014da4 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 8014da4:	b580      	push	{r7, lr}
 8014da6:	b082      	sub	sp, #8
 8014da8:	af00      	add	r7, sp, #0
 8014daa:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 8014dac:	4a0c      	ldr	r2, [pc, #48]	; (8014de0 <LoRaMacConfirmQueueInit+0x3c>)
 8014dae:	687b      	ldr	r3, [r7, #4]
 8014db0:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 8014db2:	4b0b      	ldr	r3, [pc, #44]	; (8014de0 <LoRaMacConfirmQueueInit+0x3c>)
 8014db4:	2200      	movs	r2, #0
 8014db6:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8014dba:	4b09      	ldr	r3, [pc, #36]	; (8014de0 <LoRaMacConfirmQueueInit+0x3c>)
 8014dbc:	4a09      	ldr	r2, [pc, #36]	; (8014de4 <LoRaMacConfirmQueueInit+0x40>)
 8014dbe:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8014dc0:	4b07      	ldr	r3, [pc, #28]	; (8014de0 <LoRaMacConfirmQueueInit+0x3c>)
 8014dc2:	4a08      	ldr	r2, [pc, #32]	; (8014de4 <LoRaMacConfirmQueueInit+0x40>)
 8014dc4:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 8014dc6:	2214      	movs	r2, #20
 8014dc8:	21ff      	movs	r1, #255	; 0xff
 8014dca:	4806      	ldr	r0, [pc, #24]	; (8014de4 <LoRaMacConfirmQueueInit+0x40>)
 8014dcc:	f005 f9aa 	bl	801a124 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8014dd0:	4b03      	ldr	r3, [pc, #12]	; (8014de0 <LoRaMacConfirmQueueInit+0x3c>)
 8014dd2:	2201      	movs	r2, #1
 8014dd4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8014dd8:	bf00      	nop
 8014dda:	3708      	adds	r7, #8
 8014ddc:	46bd      	mov	sp, r7
 8014dde:	bd80      	pop	{r7, pc}
 8014de0:	20001a48 	.word	0x20001a48
 8014de4:	20001a54 	.word	0x20001a54

08014de8 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8014de8:	b580      	push	{r7, lr}
 8014dea:	b082      	sub	sp, #8
 8014dec:	af00      	add	r7, sp, #0
 8014dee:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8014df0:	4b19      	ldr	r3, [pc, #100]	; (8014e58 <LoRaMacConfirmQueueAdd+0x70>)
 8014df2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014df6:	4618      	mov	r0, r3
 8014df8:	f7ff ff92 	bl	8014d20 <IsListFull>
 8014dfc:	4603      	mov	r3, r0
 8014dfe:	2b00      	cmp	r3, #0
 8014e00:	d001      	beq.n	8014e06 <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 8014e02:	2300      	movs	r3, #0
 8014e04:	e024      	b.n	8014e50 <LoRaMacConfirmQueueAdd+0x68>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8014e06:	4b14      	ldr	r3, [pc, #80]	; (8014e58 <LoRaMacConfirmQueueAdd+0x70>)
 8014e08:	689b      	ldr	r3, [r3, #8]
 8014e0a:	687a      	ldr	r2, [r7, #4]
 8014e0c:	7812      	ldrb	r2, [r2, #0]
 8014e0e:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8014e10:	4b11      	ldr	r3, [pc, #68]	; (8014e58 <LoRaMacConfirmQueueAdd+0x70>)
 8014e12:	689b      	ldr	r3, [r3, #8]
 8014e14:	687a      	ldr	r2, [r7, #4]
 8014e16:	7852      	ldrb	r2, [r2, #1]
 8014e18:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 8014e1a:	4b0f      	ldr	r3, [pc, #60]	; (8014e58 <LoRaMacConfirmQueueAdd+0x70>)
 8014e1c:	689b      	ldr	r3, [r3, #8]
 8014e1e:	687a      	ldr	r2, [r7, #4]
 8014e20:	78d2      	ldrb	r2, [r2, #3]
 8014e22:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
 8014e24:	4b0c      	ldr	r3, [pc, #48]	; (8014e58 <LoRaMacConfirmQueueAdd+0x70>)
 8014e26:	689b      	ldr	r3, [r3, #8]
 8014e28:	687a      	ldr	r2, [r7, #4]
 8014e2a:	7892      	ldrb	r2, [r2, #2]
 8014e2c:	709a      	strb	r2, [r3, #2]
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 8014e2e:	4b0a      	ldr	r3, [pc, #40]	; (8014e58 <LoRaMacConfirmQueueAdd+0x70>)
 8014e30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014e34:	3301      	adds	r3, #1
 8014e36:	b2da      	uxtb	r2, r3
 8014e38:	4b07      	ldr	r3, [pc, #28]	; (8014e58 <LoRaMacConfirmQueueAdd+0x70>)
 8014e3a:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 8014e3e:	4b06      	ldr	r3, [pc, #24]	; (8014e58 <LoRaMacConfirmQueueAdd+0x70>)
 8014e40:	689b      	ldr	r3, [r3, #8]
 8014e42:	4618      	mov	r0, r3
 8014e44:	f7ff ff44 	bl	8014cd0 <IncreaseBufferPointer>
 8014e48:	4603      	mov	r3, r0
 8014e4a:	4a03      	ldr	r2, [pc, #12]	; (8014e58 <LoRaMacConfirmQueueAdd+0x70>)
 8014e4c:	6093      	str	r3, [r2, #8]

    return true;
 8014e4e:	2301      	movs	r3, #1
}
 8014e50:	4618      	mov	r0, r3
 8014e52:	3708      	adds	r7, #8
 8014e54:	46bd      	mov	sp, r7
 8014e56:	bd80      	pop	{r7, pc}
 8014e58:	20001a48 	.word	0x20001a48

08014e5c <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8014e5c:	b580      	push	{r7, lr}
 8014e5e:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8014e60:	4b0e      	ldr	r3, [pc, #56]	; (8014e9c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8014e62:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014e66:	4618      	mov	r0, r3
 8014e68:	f7ff ff4a 	bl	8014d00 <IsListEmpty>
 8014e6c:	4603      	mov	r3, r0
 8014e6e:	2b00      	cmp	r3, #0
 8014e70:	d001      	beq.n	8014e76 <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 8014e72:	2300      	movs	r3, #0
 8014e74:	e010      	b.n	8014e98 <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 8014e76:	4b09      	ldr	r3, [pc, #36]	; (8014e9c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8014e78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014e7c:	3b01      	subs	r3, #1
 8014e7e:	b2da      	uxtb	r2, r3
 8014e80:	4b06      	ldr	r3, [pc, #24]	; (8014e9c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8014e82:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8014e86:	4b05      	ldr	r3, [pc, #20]	; (8014e9c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8014e88:	685b      	ldr	r3, [r3, #4]
 8014e8a:	4618      	mov	r0, r3
 8014e8c:	f7ff ff20 	bl	8014cd0 <IncreaseBufferPointer>
 8014e90:	4603      	mov	r3, r0
 8014e92:	4a02      	ldr	r2, [pc, #8]	; (8014e9c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8014e94:	6053      	str	r3, [r2, #4]

    return true;
 8014e96:	2301      	movs	r3, #1
}
 8014e98:	4618      	mov	r0, r3
 8014e9a:	bd80      	pop	{r7, pc}
 8014e9c:	20001a48 	.word	0x20001a48

08014ea0 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 8014ea0:	b580      	push	{r7, lr}
 8014ea2:	b084      	sub	sp, #16
 8014ea4:	af00      	add	r7, sp, #0
 8014ea6:	4603      	mov	r3, r0
 8014ea8:	460a      	mov	r2, r1
 8014eaa:	71fb      	strb	r3, [r7, #7]
 8014eac:	4613      	mov	r3, r2
 8014eae:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 8014eb0:	2300      	movs	r3, #0
 8014eb2:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8014eb4:	4b10      	ldr	r3, [pc, #64]	; (8014ef8 <LoRaMacConfirmQueueSetStatus+0x58>)
 8014eb6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014eba:	4618      	mov	r0, r3
 8014ebc:	f7ff ff20 	bl	8014d00 <IsListEmpty>
 8014ec0:	4603      	mov	r3, r0
 8014ec2:	f083 0301 	eor.w	r3, r3, #1
 8014ec6:	b2db      	uxtb	r3, r3
 8014ec8:	2b00      	cmp	r3, #0
 8014eca:	d011      	beq.n	8014ef0 <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8014ecc:	4b0a      	ldr	r3, [pc, #40]	; (8014ef8 <LoRaMacConfirmQueueSetStatus+0x58>)
 8014ece:	6859      	ldr	r1, [r3, #4]
 8014ed0:	4b09      	ldr	r3, [pc, #36]	; (8014ef8 <LoRaMacConfirmQueueSetStatus+0x58>)
 8014ed2:	689a      	ldr	r2, [r3, #8]
 8014ed4:	79bb      	ldrb	r3, [r7, #6]
 8014ed6:	4618      	mov	r0, r3
 8014ed8:	f7ff ff32 	bl	8014d40 <GetElement>
 8014edc:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8014ede:	68fb      	ldr	r3, [r7, #12]
 8014ee0:	2b00      	cmp	r3, #0
 8014ee2:	d005      	beq.n	8014ef0 <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 8014ee4:	68fb      	ldr	r3, [r7, #12]
 8014ee6:	79fa      	ldrb	r2, [r7, #7]
 8014ee8:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 8014eea:	68fb      	ldr	r3, [r7, #12]
 8014eec:	2201      	movs	r2, #1
 8014eee:	709a      	strb	r2, [r3, #2]
        }
    }
}
 8014ef0:	bf00      	nop
 8014ef2:	3710      	adds	r7, #16
 8014ef4:	46bd      	mov	sp, r7
 8014ef6:	bd80      	pop	{r7, pc}
 8014ef8:	20001a48 	.word	0x20001a48

08014efc <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 8014efc:	b580      	push	{r7, lr}
 8014efe:	b084      	sub	sp, #16
 8014f00:	af00      	add	r7, sp, #0
 8014f02:	4603      	mov	r3, r0
 8014f04:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 8014f06:	2300      	movs	r3, #0
 8014f08:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8014f0a:	4b10      	ldr	r3, [pc, #64]	; (8014f4c <LoRaMacConfirmQueueGetStatus+0x50>)
 8014f0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014f10:	4618      	mov	r0, r3
 8014f12:	f7ff fef5 	bl	8014d00 <IsListEmpty>
 8014f16:	4603      	mov	r3, r0
 8014f18:	f083 0301 	eor.w	r3, r3, #1
 8014f1c:	b2db      	uxtb	r3, r3
 8014f1e:	2b00      	cmp	r3, #0
 8014f20:	d00e      	beq.n	8014f40 <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8014f22:	4b0a      	ldr	r3, [pc, #40]	; (8014f4c <LoRaMacConfirmQueueGetStatus+0x50>)
 8014f24:	6859      	ldr	r1, [r3, #4]
 8014f26:	4b09      	ldr	r3, [pc, #36]	; (8014f4c <LoRaMacConfirmQueueGetStatus+0x50>)
 8014f28:	689a      	ldr	r2, [r3, #8]
 8014f2a:	79fb      	ldrb	r3, [r7, #7]
 8014f2c:	4618      	mov	r0, r3
 8014f2e:	f7ff ff07 	bl	8014d40 <GetElement>
 8014f32:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8014f34:	68fb      	ldr	r3, [r7, #12]
 8014f36:	2b00      	cmp	r3, #0
 8014f38:	d002      	beq.n	8014f40 <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 8014f3a:	68fb      	ldr	r3, [r7, #12]
 8014f3c:	785b      	ldrb	r3, [r3, #1]
 8014f3e:	e000      	b.n	8014f42 <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8014f40:	2301      	movs	r3, #1
}
 8014f42:	4618      	mov	r0, r3
 8014f44:	3710      	adds	r7, #16
 8014f46:	46bd      	mov	sp, r7
 8014f48:	bd80      	pop	{r7, pc}
 8014f4a:	bf00      	nop
 8014f4c:	20001a48 	.word	0x20001a48

08014f50 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8014f50:	b580      	push	{r7, lr}
 8014f52:	b084      	sub	sp, #16
 8014f54:	af00      	add	r7, sp, #0
 8014f56:	4603      	mov	r3, r0
 8014f58:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8014f5a:	4b16      	ldr	r3, [pc, #88]	; (8014fb4 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8014f5c:	685b      	ldr	r3, [r3, #4]
 8014f5e:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 8014f60:	4a14      	ldr	r2, [pc, #80]	; (8014fb4 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8014f62:	79fb      	ldrb	r3, [r7, #7]
 8014f64:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8014f68:	4b12      	ldr	r3, [pc, #72]	; (8014fb4 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8014f6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014f6e:	4618      	mov	r0, r3
 8014f70:	f7ff fec6 	bl	8014d00 <IsListEmpty>
 8014f74:	4603      	mov	r3, r0
 8014f76:	f083 0301 	eor.w	r3, r3, #1
 8014f7a:	b2db      	uxtb	r3, r3
 8014f7c:	2b00      	cmp	r3, #0
 8014f7e:	d015      	beq.n	8014fac <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 8014f80:	68fb      	ldr	r3, [r7, #12]
 8014f82:	79fa      	ldrb	r2, [r7, #7]
 8014f84:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 8014f86:	68fb      	ldr	r3, [r7, #12]
 8014f88:	78db      	ldrb	r3, [r3, #3]
 8014f8a:	f083 0301 	eor.w	r3, r3, #1
 8014f8e:	b2db      	uxtb	r3, r3
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	d002      	beq.n	8014f9a <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 8014f94:	68fb      	ldr	r3, [r7, #12]
 8014f96:	2201      	movs	r2, #1
 8014f98:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 8014f9a:	68f8      	ldr	r0, [r7, #12]
 8014f9c:	f7ff fe98 	bl	8014cd0 <IncreaseBufferPointer>
 8014fa0:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 8014fa2:	4b04      	ldr	r3, [pc, #16]	; (8014fb4 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8014fa4:	689b      	ldr	r3, [r3, #8]
 8014fa6:	68fa      	ldr	r2, [r7, #12]
 8014fa8:	429a      	cmp	r2, r3
 8014faa:	d1e9      	bne.n	8014f80 <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 8014fac:	bf00      	nop
 8014fae:	3710      	adds	r7, #16
 8014fb0:	46bd      	mov	sp, r7
 8014fb2:	bd80      	pop	{r7, pc}
 8014fb4:	20001a48 	.word	0x20001a48

08014fb8 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8014fb8:	b580      	push	{r7, lr}
 8014fba:	b082      	sub	sp, #8
 8014fbc:	af00      	add	r7, sp, #0
 8014fbe:	4603      	mov	r3, r0
 8014fc0:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 8014fc2:	4b09      	ldr	r3, [pc, #36]	; (8014fe8 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8014fc4:	6859      	ldr	r1, [r3, #4]
 8014fc6:	4b08      	ldr	r3, [pc, #32]	; (8014fe8 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8014fc8:	689a      	ldr	r2, [r3, #8]
 8014fca:	79fb      	ldrb	r3, [r7, #7]
 8014fcc:	4618      	mov	r0, r3
 8014fce:	f7ff feb7 	bl	8014d40 <GetElement>
 8014fd2:	4603      	mov	r3, r0
 8014fd4:	2b00      	cmp	r3, #0
 8014fd6:	d001      	beq.n	8014fdc <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 8014fd8:	2301      	movs	r3, #1
 8014fda:	e000      	b.n	8014fde <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 8014fdc:	2300      	movs	r3, #0
}
 8014fde:	4618      	mov	r0, r3
 8014fe0:	3708      	adds	r7, #8
 8014fe2:	46bd      	mov	sp, r7
 8014fe4:	bd80      	pop	{r7, pc}
 8014fe6:	bf00      	nop
 8014fe8:	20001a48 	.word	0x20001a48

08014fec <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 8014fec:	b580      	push	{r7, lr}
 8014fee:	b084      	sub	sp, #16
 8014ff0:	af00      	add	r7, sp, #0
 8014ff2:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8014ff4:	4b25      	ldr	r3, [pc, #148]	; (801508c <LoRaMacConfirmQueueHandleCb+0xa0>)
 8014ff6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014ffa:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 8014ffc:	2300      	movs	r3, #0
 8014ffe:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    memset1( ( uint8_t* ) &mlmeConfirmToStore, 0, sizeof( MlmeConfirmQueue_t ) );
 8015000:	f107 0308 	add.w	r3, r7, #8
 8015004:	2204      	movs	r2, #4
 8015006:	2100      	movs	r1, #0
 8015008:	4618      	mov	r0, r3
 801500a:	f005 f88b 	bl	801a124 <memset1>

    for( uint8_t i = 0; i < nbElements; i++ )
 801500e:	2300      	movs	r3, #0
 8015010:	73fb      	strb	r3, [r7, #15]
 8015012:	e032      	b.n	801507a <LoRaMacConfirmQueueHandleCb+0x8e>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8015014:	4b1d      	ldr	r3, [pc, #116]	; (801508c <LoRaMacConfirmQueueHandleCb+0xa0>)
 8015016:	685b      	ldr	r3, [r3, #4]
 8015018:	781a      	ldrb	r2, [r3, #0]
 801501a:	687b      	ldr	r3, [r7, #4]
 801501c:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 801501e:	4b1b      	ldr	r3, [pc, #108]	; (801508c <LoRaMacConfirmQueueHandleCb+0xa0>)
 8015020:	685b      	ldr	r3, [r3, #4]
 8015022:	785a      	ldrb	r2, [r3, #1]
 8015024:	687b      	ldr	r3, [r7, #4]
 8015026:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 8015028:	4b18      	ldr	r3, [pc, #96]	; (801508c <LoRaMacConfirmQueueHandleCb+0xa0>)
 801502a:	685b      	ldr	r3, [r3, #4]
 801502c:	789b      	ldrb	r3, [r3, #2]
 801502e:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 8015030:	7b7b      	ldrb	r3, [r7, #13]
 8015032:	2b00      	cmp	r3, #0
 8015034:	d005      	beq.n	8015042 <LoRaMacConfirmQueueHandleCb+0x56>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8015036:	4b15      	ldr	r3, [pc, #84]	; (801508c <LoRaMacConfirmQueueHandleCb+0xa0>)
 8015038:	681b      	ldr	r3, [r3, #0]
 801503a:	689b      	ldr	r3, [r3, #8]
 801503c:	6878      	ldr	r0, [r7, #4]
 801503e:	4798      	blx	r3
 8015040:	e00b      	b.n	801505a <LoRaMacConfirmQueueHandleCb+0x6e>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 8015042:	4b12      	ldr	r3, [pc, #72]	; (801508c <LoRaMacConfirmQueueHandleCb+0xa0>)
 8015044:	685b      	ldr	r3, [r3, #4]
 8015046:	781b      	ldrb	r3, [r3, #0]
 8015048:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 801504a:	4b10      	ldr	r3, [pc, #64]	; (801508c <LoRaMacConfirmQueueHandleCb+0xa0>)
 801504c:	685b      	ldr	r3, [r3, #4]
 801504e:	785b      	ldrb	r3, [r3, #1]
 8015050:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8015052:	4b0e      	ldr	r3, [pc, #56]	; (801508c <LoRaMacConfirmQueueHandleCb+0xa0>)
 8015054:	685b      	ldr	r3, [r3, #4]
 8015056:	78db      	ldrb	r3, [r3, #3]
 8015058:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 801505a:	f7ff feff 	bl	8014e5c <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 801505e:	7b7b      	ldrb	r3, [r7, #13]
 8015060:	f083 0301 	eor.w	r3, r3, #1
 8015064:	b2db      	uxtb	r3, r3
 8015066:	2b00      	cmp	r3, #0
 8015068:	d004      	beq.n	8015074 <LoRaMacConfirmQueueHandleCb+0x88>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 801506a:	f107 0308 	add.w	r3, r7, #8
 801506e:	4618      	mov	r0, r3
 8015070:	f7ff feba 	bl	8014de8 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 8015074:	7bfb      	ldrb	r3, [r7, #15]
 8015076:	3301      	adds	r3, #1
 8015078:	73fb      	strb	r3, [r7, #15]
 801507a:	7bfa      	ldrb	r2, [r7, #15]
 801507c:	7bbb      	ldrb	r3, [r7, #14]
 801507e:	429a      	cmp	r2, r3
 8015080:	d3c8      	bcc.n	8015014 <LoRaMacConfirmQueueHandleCb+0x28>
        }
    }
}
 8015082:	bf00      	nop
 8015084:	bf00      	nop
 8015086:	3710      	adds	r7, #16
 8015088:	46bd      	mov	sp, r7
 801508a:	bd80      	pop	{r7, pc}
 801508c:	20001a48 	.word	0x20001a48

08015090 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 8015090:	b480      	push	{r7}
 8015092:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8015094:	4b03      	ldr	r3, [pc, #12]	; (80150a4 <LoRaMacConfirmQueueGetCnt+0x14>)
 8015096:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 801509a:	4618      	mov	r0, r3
 801509c:	46bd      	mov	sp, r7
 801509e:	bc80      	pop	{r7}
 80150a0:	4770      	bx	lr
 80150a2:	bf00      	nop
 80150a4:	20001a48 	.word	0x20001a48

080150a8 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 80150a8:	b580      	push	{r7, lr}
 80150aa:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80150ac:	4b06      	ldr	r3, [pc, #24]	; (80150c8 <LoRaMacConfirmQueueIsFull+0x20>)
 80150ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80150b2:	4618      	mov	r0, r3
 80150b4:	f7ff fe34 	bl	8014d20 <IsListFull>
 80150b8:	4603      	mov	r3, r0
 80150ba:	2b00      	cmp	r3, #0
 80150bc:	d001      	beq.n	80150c2 <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 80150be:	2301      	movs	r3, #1
 80150c0:	e000      	b.n	80150c4 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 80150c2:	2300      	movs	r3, #0
    }
}
 80150c4:	4618      	mov	r0, r3
 80150c6:	bd80      	pop	{r7, pc}
 80150c8:	20001a48 	.word	0x20001a48

080150cc <PayloadEncrypt>:
 * \param [in] size             - Size of data
 * \param [in,out] buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 80150cc:	b580      	push	{r7, lr}
 80150ce:	b08e      	sub	sp, #56	; 0x38
 80150d0:	af00      	add	r7, sp, #0
 80150d2:	60f8      	str	r0, [r7, #12]
 80150d4:	607b      	str	r3, [r7, #4]
 80150d6:	460b      	mov	r3, r1
 80150d8:	817b      	strh	r3, [r7, #10]
 80150da:	4613      	mov	r3, r2
 80150dc:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 80150de:	68fb      	ldr	r3, [r7, #12]
 80150e0:	2b00      	cmp	r3, #0
 80150e2:	d101      	bne.n	80150e8 <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80150e4:	2309      	movs	r3, #9
 80150e6:	e086      	b.n	80151f6 <PayloadEncrypt+0x12a>
    }

    uint8_t bufferIndex = 0;
 80150e8:	2300      	movs	r3, #0
 80150ea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint16_t ctr = 1;
 80150ee:	2301      	movs	r3, #1
 80150f0:	86bb      	strh	r3, [r7, #52]	; 0x34
    uint8_t sBlock[16] = { 0 };
 80150f2:	2300      	movs	r3, #0
 80150f4:	623b      	str	r3, [r7, #32]
 80150f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80150fa:	2200      	movs	r2, #0
 80150fc:	601a      	str	r2, [r3, #0]
 80150fe:	605a      	str	r2, [r3, #4]
 8015100:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 8015102:	2300      	movs	r3, #0
 8015104:	613b      	str	r3, [r7, #16]
 8015106:	f107 0314 	add.w	r3, r7, #20
 801510a:	2200      	movs	r2, #0
 801510c:	601a      	str	r2, [r3, #0]
 801510e:	605a      	str	r2, [r3, #4]
 8015110:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 8015112:	2301      	movs	r3, #1
 8015114:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 8015116:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 801511a:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 801511c:	687b      	ldr	r3, [r7, #4]
 801511e:	b2db      	uxtb	r3, r3
 8015120:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8015122:	687b      	ldr	r3, [r7, #4]
 8015124:	0a1b      	lsrs	r3, r3, #8
 8015126:	b2db      	uxtb	r3, r3
 8015128:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 801512a:	687b      	ldr	r3, [r7, #4]
 801512c:	0c1b      	lsrs	r3, r3, #16
 801512e:	b2db      	uxtb	r3, r3
 8015130:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8015132:	687b      	ldr	r3, [r7, #4]
 8015134:	0e1b      	lsrs	r3, r3, #24
 8015136:	b2db      	uxtb	r3, r3
 8015138:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 801513a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801513c:	b2db      	uxtb	r3, r3
 801513e:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8015140:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015142:	0a1b      	lsrs	r3, r3, #8
 8015144:	b2db      	uxtb	r3, r3
 8015146:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8015148:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801514a:	0c1b      	lsrs	r3, r3, #16
 801514c:	b2db      	uxtb	r3, r3
 801514e:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8015150:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015152:	0e1b      	lsrs	r3, r3, #24
 8015154:	b2db      	uxtb	r3, r3
 8015156:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 8015158:	e048      	b.n	80151ec <PayloadEncrypt+0x120>
    {
        aBlock[15] = ctr & 0xFF;
 801515a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801515c:	b2db      	uxtb	r3, r3
 801515e:	77fb      	strb	r3, [r7, #31]
        ctr++;
 8015160:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015162:	3301      	adds	r3, #1
 8015164:	86bb      	strh	r3, [r7, #52]	; 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8015166:	f107 0320 	add.w	r3, r7, #32
 801516a:	7a7a      	ldrb	r2, [r7, #9]
 801516c:	f107 0010 	add.w	r0, r7, #16
 8015170:	2110      	movs	r1, #16
 8015172:	f7f8 fa79 	bl	800d668 <SecureElementAesEncrypt>
 8015176:	4603      	mov	r3, r0
 8015178:	2b00      	cmp	r3, #0
 801517a:	d001      	beq.n	8015180 <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801517c:	230e      	movs	r3, #14
 801517e:	e03a      	b.n	80151f6 <PayloadEncrypt+0x12a>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8015180:	2300      	movs	r3, #0
 8015182:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8015186:	e01e      	b.n	80151c6 <PayloadEncrypt+0xfa>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8015188:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 801518c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8015190:	4413      	add	r3, r2
 8015192:	461a      	mov	r2, r3
 8015194:	68fb      	ldr	r3, [r7, #12]
 8015196:	4413      	add	r3, r2
 8015198:	7819      	ldrb	r1, [r3, #0]
 801519a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801519e:	3338      	adds	r3, #56	; 0x38
 80151a0:	443b      	add	r3, r7
 80151a2:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 80151a6:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 80151aa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80151ae:	4403      	add	r3, r0
 80151b0:	4618      	mov	r0, r3
 80151b2:	68fb      	ldr	r3, [r7, #12]
 80151b4:	4403      	add	r3, r0
 80151b6:	404a      	eors	r2, r1
 80151b8:	b2d2      	uxtb	r2, r2
 80151ba:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 80151bc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80151c0:	3301      	adds	r3, #1
 80151c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80151c6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80151ca:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80151ce:	2a10      	cmp	r2, #16
 80151d0:	bfa8      	it	ge
 80151d2:	2210      	movge	r2, #16
 80151d4:	b212      	sxth	r2, r2
 80151d6:	4293      	cmp	r3, r2
 80151d8:	dbd6      	blt.n	8015188 <PayloadEncrypt+0xbc>
        }
        size -= 16;
 80151da:	897b      	ldrh	r3, [r7, #10]
 80151dc:	3b10      	subs	r3, #16
 80151de:	b29b      	uxth	r3, r3
 80151e0:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 80151e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80151e6:	3310      	adds	r3, #16
 80151e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    while( size > 0 )
 80151ec:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80151f0:	2b00      	cmp	r3, #0
 80151f2:	dcb2      	bgt.n	801515a <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80151f4:	2300      	movs	r3, #0
}
 80151f6:	4618      	mov	r0, r3
 80151f8:	3738      	adds	r7, #56	; 0x38
 80151fa:	46bd      	mov	sp, r7
 80151fc:	bd80      	pop	{r7, pc}

080151fe <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 80151fe:	b490      	push	{r4, r7}
 8015200:	b082      	sub	sp, #8
 8015202:	af00      	add	r7, sp, #0
 8015204:	4604      	mov	r4, r0
 8015206:	4608      	mov	r0, r1
 8015208:	4611      	mov	r1, r2
 801520a:	461a      	mov	r2, r3
 801520c:	4623      	mov	r3, r4
 801520e:	80fb      	strh	r3, [r7, #6]
 8015210:	4603      	mov	r3, r0
 8015212:	717b      	strb	r3, [r7, #5]
 8015214:	460b      	mov	r3, r1
 8015216:	713b      	strb	r3, [r7, #4]
 8015218:	4613      	mov	r3, r2
 801521a:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 801521c:	69bb      	ldr	r3, [r7, #24]
 801521e:	2b00      	cmp	r3, #0
 8015220:	d101      	bne.n	8015226 <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015222:	2309      	movs	r3, #9
 8015224:	e04e      	b.n	80152c4 <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 8015226:	69bb      	ldr	r3, [r7, #24]
 8015228:	2249      	movs	r2, #73	; 0x49
 801522a:	701a      	strb	r2, [r3, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
    }
    else
#endif /* LORAMAC_VERSION */
    {
        b0[1] = 0x00;
 801522c:	69bb      	ldr	r3, [r7, #24]
 801522e:	3301      	adds	r3, #1
 8015230:	2200      	movs	r2, #0
 8015232:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 8015234:	69bb      	ldr	r3, [r7, #24]
 8015236:	3302      	adds	r3, #2
 8015238:	2200      	movs	r2, #0
 801523a:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 801523c:	69bb      	ldr	r3, [r7, #24]
 801523e:	3303      	adds	r3, #3
 8015240:	2200      	movs	r2, #0
 8015242:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 8015244:	69bb      	ldr	r3, [r7, #24]
 8015246:	3304      	adds	r3, #4
 8015248:	2200      	movs	r2, #0
 801524a:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 801524c:	69bb      	ldr	r3, [r7, #24]
 801524e:	3305      	adds	r3, #5
 8015250:	78fa      	ldrb	r2, [r7, #3]
 8015252:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8015254:	69bb      	ldr	r3, [r7, #24]
 8015256:	3306      	adds	r3, #6
 8015258:	693a      	ldr	r2, [r7, #16]
 801525a:	b2d2      	uxtb	r2, r2
 801525c:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 801525e:	693b      	ldr	r3, [r7, #16]
 8015260:	0a1a      	lsrs	r2, r3, #8
 8015262:	69bb      	ldr	r3, [r7, #24]
 8015264:	3307      	adds	r3, #7
 8015266:	b2d2      	uxtb	r2, r2
 8015268:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 801526a:	693b      	ldr	r3, [r7, #16]
 801526c:	0c1a      	lsrs	r2, r3, #16
 801526e:	69bb      	ldr	r3, [r7, #24]
 8015270:	3308      	adds	r3, #8
 8015272:	b2d2      	uxtb	r2, r2
 8015274:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8015276:	693b      	ldr	r3, [r7, #16]
 8015278:	0e1a      	lsrs	r2, r3, #24
 801527a:	69bb      	ldr	r3, [r7, #24]
 801527c:	3309      	adds	r3, #9
 801527e:	b2d2      	uxtb	r2, r2
 8015280:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 8015282:	69bb      	ldr	r3, [r7, #24]
 8015284:	330a      	adds	r3, #10
 8015286:	697a      	ldr	r2, [r7, #20]
 8015288:	b2d2      	uxtb	r2, r2
 801528a:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 801528c:	697b      	ldr	r3, [r7, #20]
 801528e:	0a1a      	lsrs	r2, r3, #8
 8015290:	69bb      	ldr	r3, [r7, #24]
 8015292:	330b      	adds	r3, #11
 8015294:	b2d2      	uxtb	r2, r2
 8015296:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8015298:	697b      	ldr	r3, [r7, #20]
 801529a:	0c1a      	lsrs	r2, r3, #16
 801529c:	69bb      	ldr	r3, [r7, #24]
 801529e:	330c      	adds	r3, #12
 80152a0:	b2d2      	uxtb	r2, r2
 80152a2:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 80152a4:	697b      	ldr	r3, [r7, #20]
 80152a6:	0e1a      	lsrs	r2, r3, #24
 80152a8:	69bb      	ldr	r3, [r7, #24]
 80152aa:	330d      	adds	r3, #13
 80152ac:	b2d2      	uxtb	r2, r2
 80152ae:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 80152b0:	69bb      	ldr	r3, [r7, #24]
 80152b2:	330e      	adds	r3, #14
 80152b4:	2200      	movs	r2, #0
 80152b6:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 80152b8:	69bb      	ldr	r3, [r7, #24]
 80152ba:	330f      	adds	r3, #15
 80152bc:	88fa      	ldrh	r2, [r7, #6]
 80152be:	b2d2      	uxtb	r2, r2
 80152c0:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 80152c2:	2300      	movs	r3, #0
}
 80152c4:	4618      	mov	r0, r3
 80152c6:	3708      	adds	r7, #8
 80152c8:	46bd      	mov	sp, r7
 80152ca:	bc90      	pop	{r4, r7}
 80152cc:	4770      	bx	lr

080152ce <ComputeCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 80152ce:	b590      	push	{r4, r7, lr}
 80152d0:	b08b      	sub	sp, #44	; 0x2c
 80152d2:	af04      	add	r7, sp, #16
 80152d4:	6078      	str	r0, [r7, #4]
 80152d6:	4608      	mov	r0, r1
 80152d8:	4611      	mov	r1, r2
 80152da:	461a      	mov	r2, r3
 80152dc:	4603      	mov	r3, r0
 80152de:	807b      	strh	r3, [r7, #2]
 80152e0:	460b      	mov	r3, r1
 80152e2:	707b      	strb	r3, [r7, #1]
 80152e4:	4613      	mov	r3, r2
 80152e6:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 80152e8:	687b      	ldr	r3, [r7, #4]
 80152ea:	2b00      	cmp	r3, #0
 80152ec:	d002      	beq.n	80152f4 <ComputeCmacB0+0x26>
 80152ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80152f0:	2b00      	cmp	r3, #0
 80152f2:	d101      	bne.n	80152f8 <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80152f4:	2309      	movs	r3, #9
 80152f6:	e024      	b.n	8015342 <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 80152f8:	887b      	ldrh	r3, [r7, #2]
 80152fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80152fe:	d901      	bls.n	8015304 <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8015300:	230d      	movs	r3, #13
 8015302:	e01e      	b.n	8015342 <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE] ALIGN(4);

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8015304:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 8015308:	783a      	ldrb	r2, [r7, #0]
 801530a:	7879      	ldrb	r1, [r7, #1]
 801530c:	8878      	ldrh	r0, [r7, #2]
 801530e:	f107 0308 	add.w	r3, r7, #8
 8015312:	9302      	str	r3, [sp, #8]
 8015314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015316:	9301      	str	r3, [sp, #4]
 8015318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801531a:	9300      	str	r3, [sp, #0]
 801531c:	4623      	mov	r3, r4
 801531e:	f7ff ff6e 	bl	80151fe <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8015322:	887a      	ldrh	r2, [r7, #2]
 8015324:	7879      	ldrb	r1, [r7, #1]
 8015326:	f107 0008 	add.w	r0, r7, #8
 801532a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801532c:	9300      	str	r3, [sp, #0]
 801532e:	460b      	mov	r3, r1
 8015330:	6879      	ldr	r1, [r7, #4]
 8015332:	f7f8 f953 	bl	800d5dc <SecureElementComputeAesCmac>
 8015336:	4603      	mov	r3, r0
 8015338:	2b00      	cmp	r3, #0
 801533a:	d001      	beq.n	8015340 <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801533c:	230e      	movs	r3, #14
 801533e:	e000      	b.n	8015342 <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8015340:	2300      	movs	r3, #0
}
 8015342:	4618      	mov	r0, r3
 8015344:	371c      	adds	r7, #28
 8015346:	46bd      	mov	sp, r7
 8015348:	bd90      	pop	{r4, r7, pc}

0801534a <VerifyCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in] expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 801534a:	b590      	push	{r4, r7, lr}
 801534c:	b0cd      	sub	sp, #308	; 0x134
 801534e:	af04      	add	r7, sp, #16
 8015350:	f507 7490 	add.w	r4, r7, #288	; 0x120
 8015354:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
 8015358:	6020      	str	r0, [r4, #0]
 801535a:	460c      	mov	r4, r1
 801535c:	4610      	mov	r0, r2
 801535e:	4619      	mov	r1, r3
 8015360:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8015364:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8015368:	4622      	mov	r2, r4
 801536a:	801a      	strh	r2, [r3, #0]
 801536c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8015370:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8015374:	4602      	mov	r2, r0
 8015376:	701a      	strb	r2, [r3, #0]
 8015378:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801537c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8015380:	460a      	mov	r2, r1
 8015382:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 8015384:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8015388:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 801538c:	681b      	ldr	r3, [r3, #0]
 801538e:	2b00      	cmp	r3, #0
 8015390:	d101      	bne.n	8015396 <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015392:	2309      	movs	r3, #9
 8015394:	e063      	b.n	801545e <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8015396:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801539a:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 801539e:	881b      	ldrh	r3, [r3, #0]
 80153a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80153a4:	d901      	bls.n	80153aa <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 80153a6:	230d      	movs	r3, #13
 80153a8:	e059      	b.n	801545e <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 80153aa:	f107 030c 	add.w	r3, r7, #12
 80153ae:	f44f 7288 	mov.w	r2, #272	; 0x110
 80153b2:	2100      	movs	r1, #0
 80153b4:	4618      	mov	r0, r3
 80153b6:	f004 feb5 	bl	801a124 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 80153ba:	f897 4130 	ldrb.w	r4, [r7, #304]	; 0x130
 80153be:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80153c2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80153c6:	781a      	ldrb	r2, [r3, #0]
 80153c8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80153cc:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 80153d0:	7819      	ldrb	r1, [r3, #0]
 80153d2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80153d6:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 80153da:	8818      	ldrh	r0, [r3, #0]
 80153dc:	f107 030c 	add.w	r3, r7, #12
 80153e0:	9302      	str	r3, [sp, #8]
 80153e2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80153e6:	9301      	str	r3, [sp, #4]
 80153e8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80153ec:	9300      	str	r3, [sp, #0]
 80153ee:	4623      	mov	r3, r4
 80153f0:	f7ff ff05 	bl	80151fe <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 80153f4:	f107 030c 	add.w	r3, r7, #12
 80153f8:	3310      	adds	r3, #16
 80153fa:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80153fe:	f5a2 728f 	sub.w	r2, r2, #286	; 0x11e
 8015402:	8812      	ldrh	r2, [r2, #0]
 8015404:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8015408:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 801540c:	6809      	ldr	r1, [r1, #0]
 801540e:	4618      	mov	r0, r3
 8015410:	f004 fe4d 	bl	801a0ae <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8015414:	2306      	movs	r3, #6
 8015416:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 801541a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801541e:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8015422:	881b      	ldrh	r3, [r3, #0]
 8015424:	3310      	adds	r3, #16
 8015426:	4619      	mov	r1, r3
 8015428:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801542c:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8015430:	781b      	ldrb	r3, [r3, #0]
 8015432:	f107 000c 	add.w	r0, r7, #12
 8015436:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 801543a:	f7f8 f8e9 	bl	800d610 <SecureElementVerifyAesCmac>
 801543e:	4603      	mov	r3, r0
 8015440:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 8015444:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8015448:	2b00      	cmp	r3, #0
 801544a:	d101      	bne.n	8015450 <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 801544c:	2300      	movs	r3, #0
 801544e:	e006      	b.n	801545e <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 8015450:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8015454:	2b01      	cmp	r3, #1
 8015456:	d101      	bne.n	801545c <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 8015458:	2301      	movs	r3, #1
 801545a:	e000      	b.n	801545e <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801545c:	230e      	movs	r3, #14
}
 801545e:	4618      	mov	r0, r3
 8015460:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8015464:	46bd      	mov	sp, r7
 8015466:	bd90      	pop	{r4, r7, pc}

08015468 <GetKeyAddrItem>:
 * \param [in] addrID         - Address identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8015468:	b480      	push	{r7}
 801546a:	b085      	sub	sp, #20
 801546c:	af00      	add	r7, sp, #0
 801546e:	4603      	mov	r3, r0
 8015470:	6039      	str	r1, [r7, #0]
 8015472:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8015474:	2300      	movs	r3, #0
 8015476:	73fb      	strb	r3, [r7, #15]
 8015478:	e011      	b.n	801549e <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 801547a:	7bfb      	ldrb	r3, [r7, #15]
 801547c:	4a0c      	ldr	r2, [pc, #48]	; (80154b0 <GetKeyAddrItem+0x48>)
 801547e:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8015482:	79fa      	ldrb	r2, [r7, #7]
 8015484:	429a      	cmp	r2, r3
 8015486:	d107      	bne.n	8015498 <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 8015488:	7bfb      	ldrb	r3, [r7, #15]
 801548a:	009b      	lsls	r3, r3, #2
 801548c:	4a08      	ldr	r2, [pc, #32]	; (80154b0 <GetKeyAddrItem+0x48>)
 801548e:	441a      	add	r2, r3
 8015490:	683b      	ldr	r3, [r7, #0]
 8015492:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 8015494:	2300      	movs	r3, #0
 8015496:	e006      	b.n	80154a6 <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8015498:	7bfb      	ldrb	r3, [r7, #15]
 801549a:	3301      	adds	r3, #1
 801549c:	73fb      	strb	r3, [r7, #15]
 801549e:	7bfb      	ldrb	r3, [r7, #15]
 80154a0:	2b01      	cmp	r3, #1
 80154a2:	d9ea      	bls.n	801547a <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 80154a4:	230b      	movs	r3, #11
}
 80154a6:	4618      	mov	r0, r3
 80154a8:	3714      	adds	r7, #20
 80154aa:	46bd      	mov	sp, r7
 80154ac:	bc80      	pop	{r7}
 80154ae:	4770      	bx	lr
 80154b0:	20000114 	.word	0x20000114

080154b4 <DeriveSessionKey10x>:
 * \param [in] netID          - Network Identifier
 * \param [in] deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 80154b4:	b580      	push	{r7, lr}
 80154b6:	b088      	sub	sp, #32
 80154b8:	af00      	add	r7, sp, #0
 80154ba:	60b9      	str	r1, [r7, #8]
 80154bc:	607a      	str	r2, [r7, #4]
 80154be:	461a      	mov	r2, r3
 80154c0:	4603      	mov	r3, r0
 80154c2:	73fb      	strb	r3, [r7, #15]
 80154c4:	4613      	mov	r3, r2
 80154c6:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 80154c8:	2300      	movs	r3, #0
 80154ca:	613b      	str	r3, [r7, #16]
 80154cc:	f107 0314 	add.w	r3, r7, #20
 80154d0:	2200      	movs	r2, #0
 80154d2:	601a      	str	r2, [r3, #0]
 80154d4:	605a      	str	r2, [r3, #4]
 80154d6:	609a      	str	r2, [r3, #8]

    switch( keyID )
 80154d8:	7bfb      	ldrb	r3, [r7, #15]
 80154da:	2b08      	cmp	r3, #8
 80154dc:	d002      	beq.n	80154e4 <DeriveSessionKey10x+0x30>
 80154de:	2b09      	cmp	r3, #9
 80154e0:	d003      	beq.n	80154ea <DeriveSessionKey10x+0x36>
 80154e2:	e005      	b.n	80154f0 <DeriveSessionKey10x+0x3c>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else
        case NWK_S_KEY:
#endif /* LORAMAC_VERSION */
            compBase[0] = 0x01;
 80154e4:	2301      	movs	r3, #1
 80154e6:	743b      	strb	r3, [r7, #16]
            break;
 80154e8:	e004      	b.n	80154f4 <DeriveSessionKey10x+0x40>
        case APP_S_KEY:
            compBase[0] = 0x02;
 80154ea:	2302      	movs	r3, #2
 80154ec:	743b      	strb	r3, [r7, #16]
            break;
 80154ee:	e001      	b.n	80154f4 <DeriveSessionKey10x+0x40>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80154f0:	230a      	movs	r3, #10
 80154f2:	e02a      	b.n	801554a <DeriveSessionKey10x+0x96>
    }

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 80154f4:	68bb      	ldr	r3, [r7, #8]
 80154f6:	b2db      	uxtb	r3, r3
 80154f8:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 80154fa:	68bb      	ldr	r3, [r7, #8]
 80154fc:	0a1b      	lsrs	r3, r3, #8
 80154fe:	b2db      	uxtb	r3, r3
 8015500:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 8015502:	68bb      	ldr	r3, [r7, #8]
 8015504:	0c1b      	lsrs	r3, r3, #16
 8015506:	b2db      	uxtb	r3, r3
 8015508:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 801550a:	687b      	ldr	r3, [r7, #4]
 801550c:	b2db      	uxtb	r3, r3
 801550e:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 8015510:	687b      	ldr	r3, [r7, #4]
 8015512:	0a1b      	lsrs	r3, r3, #8
 8015514:	b2db      	uxtb	r3, r3
 8015516:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 8015518:	687b      	ldr	r3, [r7, #4]
 801551a:	0c1b      	lsrs	r3, r3, #16
 801551c:	b2db      	uxtb	r3, r3
 801551e:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 8015520:	89bb      	ldrh	r3, [r7, #12]
 8015522:	b2db      	uxtb	r3, r3
 8015524:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 8015526:	89bb      	ldrh	r3, [r7, #12]
 8015528:	0a1b      	lsrs	r3, r3, #8
 801552a:	b29b      	uxth	r3, r3
 801552c:	b2db      	uxtb	r3, r3
 801552e:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8015530:	7bfa      	ldrb	r2, [r7, #15]
 8015532:	f107 0310 	add.w	r3, r7, #16
 8015536:	2101      	movs	r1, #1
 8015538:	4618      	mov	r0, r3
 801553a:	f7f8 f915 	bl	800d768 <SecureElementDeriveAndStoreKey>
 801553e:	4603      	mov	r3, r0
 8015540:	2b00      	cmp	r3, #0
 8015542:	d001      	beq.n	8015548 <DeriveSessionKey10x+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015544:	230e      	movs	r3, #14
 8015546:	e000      	b.n	801554a <DeriveSessionKey10x+0x96>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8015548:	2300      	movs	r3, #0
}
 801554a:	4618      	mov	r0, r3
 801554c:	3720      	adds	r7, #32
 801554e:	46bd      	mov	sp, r7
 8015550:	bd80      	pop	{r7, pc}
	...

08015554 <GetLastFcntDown>:
 * \param [in]    lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 8015554:	b480      	push	{r7}
 8015556:	b083      	sub	sp, #12
 8015558:	af00      	add	r7, sp, #0
 801555a:	4603      	mov	r3, r0
 801555c:	6039      	str	r1, [r7, #0]
 801555e:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 8015560:	683b      	ldr	r3, [r7, #0]
 8015562:	2b00      	cmp	r3, #0
 8015564:	d101      	bne.n	801556a <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015566:	2309      	movs	r3, #9
 8015568:	e029      	b.n	80155be <GetLastFcntDown+0x6a>
    }
    switch( fCntID )
 801556a:	79fb      	ldrb	r3, [r7, #7]
 801556c:	3b01      	subs	r3, #1
 801556e:	2b03      	cmp	r3, #3
 8015570:	d822      	bhi.n	80155b8 <GetLastFcntDown+0x64>
 8015572:	a201      	add	r2, pc, #4	; (adr r2, 8015578 <GetLastFcntDown+0x24>)
 8015574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015578:	08015589 	.word	0x08015589
 801557c:	08015595 	.word	0x08015595
 8015580:	080155a1 	.word	0x080155a1
 8015584:	080155ad 	.word	0x080155ad
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 8015588:	4b0f      	ldr	r3, [pc, #60]	; (80155c8 <GetLastFcntDown+0x74>)
 801558a:	681b      	ldr	r3, [r3, #0]
 801558c:	691a      	ldr	r2, [r3, #16]
 801558e:	683b      	ldr	r3, [r7, #0]
 8015590:	601a      	str	r2, [r3, #0]
            break;
 8015592:	e013      	b.n	80155bc <GetLastFcntDown+0x68>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 8015594:	4b0c      	ldr	r3, [pc, #48]	; (80155c8 <GetLastFcntDown+0x74>)
 8015596:	681b      	ldr	r3, [r3, #0]
 8015598:	695a      	ldr	r2, [r3, #20]
 801559a:	683b      	ldr	r3, [r7, #0]
 801559c:	601a      	str	r2, [r3, #0]
            break;
 801559e:	e00d      	b.n	80155bc <GetLastFcntDown+0x68>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 80155a0:	4b09      	ldr	r3, [pc, #36]	; (80155c8 <GetLastFcntDown+0x74>)
 80155a2:	681b      	ldr	r3, [r3, #0]
 80155a4:	699a      	ldr	r2, [r3, #24]
 80155a6:	683b      	ldr	r3, [r7, #0]
 80155a8:	601a      	str	r2, [r3, #0]
            break;
 80155aa:	e007      	b.n	80155bc <GetLastFcntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 80155ac:	4b06      	ldr	r3, [pc, #24]	; (80155c8 <GetLastFcntDown+0x74>)
 80155ae:	681b      	ldr	r3, [r3, #0]
 80155b0:	69da      	ldr	r2, [r3, #28]
 80155b2:	683b      	ldr	r3, [r7, #0]
 80155b4:	601a      	str	r2, [r3, #0]
            break;
 80155b6:	e001      	b.n	80155bc <GetLastFcntDown+0x68>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 80155b8:	2305      	movs	r3, #5
 80155ba:	e000      	b.n	80155be <GetLastFcntDown+0x6a>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80155bc:	2300      	movs	r3, #0
}
 80155be:	4618      	mov	r0, r3
 80155c0:	370c      	adds	r7, #12
 80155c2:	46bd      	mov	sp, r7
 80155c4:	bc80      	pop	{r7}
 80155c6:	4770      	bx	lr
 80155c8:	20001a6c 	.word	0x20001a6c

080155cc <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 80155cc:	b580      	push	{r7, lr}
 80155ce:	b084      	sub	sp, #16
 80155d0:	af00      	add	r7, sp, #0
 80155d2:	4603      	mov	r3, r0
 80155d4:	6039      	str	r1, [r7, #0]
 80155d6:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 80155d8:	2300      	movs	r3, #0
 80155da:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 80155dc:	f107 020c 	add.w	r2, r7, #12
 80155e0:	79fb      	ldrb	r3, [r7, #7]
 80155e2:	4611      	mov	r1, r2
 80155e4:	4618      	mov	r0, r3
 80155e6:	f7ff ffb5 	bl	8015554 <GetLastFcntDown>
 80155ea:	4603      	mov	r3, r0
 80155ec:	2b00      	cmp	r3, #0
 80155ee:	d001      	beq.n	80155f4 <CheckFCntDown+0x28>
    {
        return false;
 80155f0:	2300      	movs	r3, #0
 80155f2:	e00a      	b.n	801560a <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 80155f4:	68fb      	ldr	r3, [r7, #12]
 80155f6:	683a      	ldr	r2, [r7, #0]
 80155f8:	429a      	cmp	r2, r3
 80155fa:	d803      	bhi.n	8015604 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITIAL_VALUE ) )
 80155fc:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 80155fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015602:	d101      	bne.n	8015608 <CheckFCntDown+0x3c>
    {
        return true;
 8015604:	2301      	movs	r3, #1
 8015606:	e000      	b.n	801560a <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 8015608:	2300      	movs	r3, #0
    }
}
 801560a:	4618      	mov	r0, r3
 801560c:	3710      	adds	r7, #16
 801560e:	46bd      	mov	sp, r7
 8015610:	bd80      	pop	{r7, pc}
	...

08015614 <UpdateFCntDown>:
 * \param [in]    currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8015614:	b480      	push	{r7}
 8015616:	b083      	sub	sp, #12
 8015618:	af00      	add	r7, sp, #0
 801561a:	4603      	mov	r3, r0
 801561c:	6039      	str	r1, [r7, #0]
 801561e:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 8015620:	79fb      	ldrb	r3, [r7, #7]
 8015622:	3b01      	subs	r3, #1
 8015624:	2b03      	cmp	r3, #3
 8015626:	d82b      	bhi.n	8015680 <UpdateFCntDown+0x6c>
 8015628:	a201      	add	r2, pc, #4	; (adr r2, 8015630 <UpdateFCntDown+0x1c>)
 801562a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801562e:	bf00      	nop
 8015630:	08015641 	.word	0x08015641
 8015634:	08015653 	.word	0x08015653
 8015638:	08015665 	.word	0x08015665
 801563c:	08015677 	.word	0x08015677
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 8015640:	4b12      	ldr	r3, [pc, #72]	; (801568c <UpdateFCntDown+0x78>)
 8015642:	681b      	ldr	r3, [r3, #0]
 8015644:	683a      	ldr	r2, [r7, #0]
 8015646:	611a      	str	r2, [r3, #16]
            CryptoNvm->LastDownFCnt = currentDown;
 8015648:	4b10      	ldr	r3, [pc, #64]	; (801568c <UpdateFCntDown+0x78>)
 801564a:	681b      	ldr	r3, [r3, #0]
 801564c:	683a      	ldr	r2, [r7, #0]
 801564e:	621a      	str	r2, [r3, #32]
            break;
 8015650:	e017      	b.n	8015682 <UpdateFCntDown+0x6e>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 8015652:	4b0e      	ldr	r3, [pc, #56]	; (801568c <UpdateFCntDown+0x78>)
 8015654:	681b      	ldr	r3, [r3, #0]
 8015656:	683a      	ldr	r2, [r7, #0]
 8015658:	615a      	str	r2, [r3, #20]
            CryptoNvm->LastDownFCnt = currentDown;
 801565a:	4b0c      	ldr	r3, [pc, #48]	; (801568c <UpdateFCntDown+0x78>)
 801565c:	681b      	ldr	r3, [r3, #0]
 801565e:	683a      	ldr	r2, [r7, #0]
 8015660:	621a      	str	r2, [r3, #32]
            break;
 8015662:	e00e      	b.n	8015682 <UpdateFCntDown+0x6e>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 8015664:	4b09      	ldr	r3, [pc, #36]	; (801568c <UpdateFCntDown+0x78>)
 8015666:	681b      	ldr	r3, [r3, #0]
 8015668:	683a      	ldr	r2, [r7, #0]
 801566a:	619a      	str	r2, [r3, #24]
            CryptoNvm->LastDownFCnt = currentDown;
 801566c:	4b07      	ldr	r3, [pc, #28]	; (801568c <UpdateFCntDown+0x78>)
 801566e:	681b      	ldr	r3, [r3, #0]
 8015670:	683a      	ldr	r2, [r7, #0]
 8015672:	621a      	str	r2, [r3, #32]
            break;
 8015674:	e005      	b.n	8015682 <UpdateFCntDown+0x6e>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 8015676:	4b05      	ldr	r3, [pc, #20]	; (801568c <UpdateFCntDown+0x78>)
 8015678:	681b      	ldr	r3, [r3, #0]
 801567a:	683a      	ldr	r2, [r7, #0]
 801567c:	61da      	str	r2, [r3, #28]
            break;
 801567e:	e000      	b.n	8015682 <UpdateFCntDown+0x6e>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 8015680:	bf00      	nop
    }
}
 8015682:	bf00      	nop
 8015684:	370c      	adds	r7, #12
 8015686:	46bd      	mov	sp, r7
 8015688:	bc80      	pop	{r7}
 801568a:	4770      	bx	lr
 801568c:	20001a6c 	.word	0x20001a6c

08015690 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 8015690:	b480      	push	{r7}
 8015692:	b083      	sub	sp, #12
 8015694:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 8015696:	4b18      	ldr	r3, [pc, #96]	; (80156f8 <ResetFCnts+0x68>)
 8015698:	681b      	ldr	r3, [r3, #0]
 801569a:	2200      	movs	r2, #0
 801569c:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 801569e:	4b16      	ldr	r3, [pc, #88]	; (80156f8 <ResetFCnts+0x68>)
 80156a0:	681b      	ldr	r3, [r3, #0]
 80156a2:	f04f 32ff 	mov.w	r2, #4294967295
 80156a6:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 80156a8:	4b13      	ldr	r3, [pc, #76]	; (80156f8 <ResetFCnts+0x68>)
 80156aa:	681b      	ldr	r3, [r3, #0]
 80156ac:	f04f 32ff 	mov.w	r2, #4294967295
 80156b0:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 80156b2:	4b11      	ldr	r3, [pc, #68]	; (80156f8 <ResetFCnts+0x68>)
 80156b4:	681b      	ldr	r3, [r3, #0]
 80156b6:	f04f 32ff 	mov.w	r2, #4294967295
 80156ba:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 80156bc:	4b0e      	ldr	r3, [pc, #56]	; (80156f8 <ResetFCnts+0x68>)
 80156be:	681a      	ldr	r2, [r3, #0]
 80156c0:	4b0d      	ldr	r3, [pc, #52]	; (80156f8 <ResetFCnts+0x68>)
 80156c2:	681b      	ldr	r3, [r3, #0]
 80156c4:	6992      	ldr	r2, [r2, #24]
 80156c6:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80156c8:	2300      	movs	r3, #0
 80156ca:	607b      	str	r3, [r7, #4]
 80156cc:	e00b      	b.n	80156e6 <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
 80156ce:	4b0a      	ldr	r3, [pc, #40]	; (80156f8 <ResetFCnts+0x68>)
 80156d0:	681a      	ldr	r2, [r3, #0]
 80156d2:	687b      	ldr	r3, [r7, #4]
 80156d4:	3306      	adds	r3, #6
 80156d6:	009b      	lsls	r3, r3, #2
 80156d8:	4413      	add	r3, r2
 80156da:	f04f 32ff 	mov.w	r2, #4294967295
 80156de:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80156e0:	687b      	ldr	r3, [r7, #4]
 80156e2:	3301      	adds	r3, #1
 80156e4:	607b      	str	r3, [r7, #4]
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	2b00      	cmp	r3, #0
 80156ea:	ddf0      	ble.n	80156ce <ResetFCnts+0x3e>
    }
}
 80156ec:	bf00      	nop
 80156ee:	bf00      	nop
 80156f0:	370c      	adds	r7, #12
 80156f2:	46bd      	mov	sp, r7
 80156f4:	bc80      	pop	{r7}
 80156f6:	4770      	bx	lr
 80156f8:	20001a6c 	.word	0x20001a6c

080156fc <IsJoinNonce10xOk>:

static bool IsJoinNonce10xOk( uint32_t joinNonce )
{
 80156fc:	b480      	push	{r7}
 80156fe:	b083      	sub	sp, #12
 8015700:	af00      	add	r7, sp, #0
 8015702:	6078      	str	r0, [r7, #4]
#if( USE_10X_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    return ( joinNonce > CryptoNvm->JoinNonce ) ? true : false;
 8015704:	4b06      	ldr	r3, [pc, #24]	; (8015720 <IsJoinNonce10xOk+0x24>)
 8015706:	681b      	ldr	r3, [r3, #0]
 8015708:	689b      	ldr	r3, [r3, #8]
 801570a:	687a      	ldr	r2, [r7, #4]
 801570c:	429a      	cmp	r2, r3
 801570e:	bf8c      	ite	hi
 8015710:	2301      	movhi	r3, #1
 8015712:	2300      	movls	r3, #0
 8015714:	b2db      	uxtb	r3, r3
#else
    // Check if the JoinNonce is different from the previous one
    return( joinNonce != CryptoNvm->JoinNonce ) ? true : false;
#endif
}
 8015716:	4618      	mov	r0, r3
 8015718:	370c      	adds	r7, #12
 801571a:	46bd      	mov	sp, r7
 801571c:	bc80      	pop	{r7}
 801571e:	4770      	bx	lr
 8015720:	20001a6c 	.word	0x20001a6c

08015724 <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 8015724:	b580      	push	{r7, lr}
 8015726:	b082      	sub	sp, #8
 8015728:	af00      	add	r7, sp, #0
 801572a:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 801572c:	687b      	ldr	r3, [r7, #4]
 801572e:	2b00      	cmp	r3, #0
 8015730:	d101      	bne.n	8015736 <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 8015732:	2308      	movs	r3, #8
 8015734:	e01c      	b.n	8015770 <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 8015736:	4a10      	ldr	r2, [pc, #64]	; (8015778 <LoRaMacCryptoInit+0x54>)
 8015738:	687b      	ldr	r3, [r7, #4]
 801573a:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 801573c:	4b0e      	ldr	r3, [pc, #56]	; (8015778 <LoRaMacCryptoInit+0x54>)
 801573e:	681b      	ldr	r3, [r3, #0]
 8015740:	2228      	movs	r2, #40	; 0x28
 8015742:	2100      	movs	r1, #0
 8015744:	4618      	mov	r0, r3
 8015746:	f004 fced 	bl	801a124 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 801574a:	4b0b      	ldr	r3, [pc, #44]	; (8015778 <LoRaMacCryptoInit+0x54>)
 801574c:	681b      	ldr	r3, [r3, #0]
 801574e:	2201      	movs	r2, #1
 8015750:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 8015752:	4b09      	ldr	r3, [pc, #36]	; (8015778 <LoRaMacCryptoInit+0x54>)
 8015754:	681b      	ldr	r3, [r3, #0]
 8015756:	2201      	movs	r2, #1
 8015758:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 801575a:	4b07      	ldr	r3, [pc, #28]	; (8015778 <LoRaMacCryptoInit+0x54>)
 801575c:	681b      	ldr	r3, [r3, #0]
 801575e:	2201      	movs	r2, #1
 8015760:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 8015762:	4b05      	ldr	r3, [pc, #20]	; (8015778 <LoRaMacCryptoInit+0x54>)
 8015764:	681b      	ldr	r3, [r3, #0]
 8015766:	2200      	movs	r2, #0
 8015768:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 801576a:	f7ff ff91 	bl	8015690 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 801576e:	2300      	movs	r3, #0
}
 8015770:	4618      	mov	r0, r3
 8015772:	3708      	adds	r7, #8
 8015774:	46bd      	mov	sp, r7
 8015776:	bd80      	pop	{r7, pc}
 8015778:	20001a6c 	.word	0x20001a6c

0801577c <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 801577c:	b480      	push	{r7}
 801577e:	b083      	sub	sp, #12
 8015780:	af00      	add	r7, sp, #0
 8015782:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 8015784:	4b04      	ldr	r3, [pc, #16]	; (8015798 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 8015786:	681b      	ldr	r3, [r3, #0]
 8015788:	687a      	ldr	r2, [r7, #4]
 801578a:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 801578c:	2300      	movs	r3, #0
}
 801578e:	4618      	mov	r0, r3
 8015790:	370c      	adds	r7, #12
 8015792:	46bd      	mov	sp, r7
 8015794:	bc80      	pop	{r7}
 8015796:	4770      	bx	lr
 8015798:	20001a6c 	.word	0x20001a6c

0801579c <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 801579c:	b480      	push	{r7}
 801579e:	b083      	sub	sp, #12
 80157a0:	af00      	add	r7, sp, #0
 80157a2:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 80157a4:	687b      	ldr	r3, [r7, #4]
 80157a6:	2b00      	cmp	r3, #0
 80157a8:	d101      	bne.n	80157ae <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80157aa:	2309      	movs	r3, #9
 80157ac:	e006      	b.n	80157bc <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 80157ae:	4b06      	ldr	r3, [pc, #24]	; (80157c8 <LoRaMacCryptoGetFCntUp+0x2c>)
 80157b0:	681b      	ldr	r3, [r3, #0]
 80157b2:	68db      	ldr	r3, [r3, #12]
 80157b4:	1c5a      	adds	r2, r3, #1
 80157b6:	687b      	ldr	r3, [r7, #4]
 80157b8:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 80157ba:	2300      	movs	r3, #0
}
 80157bc:	4618      	mov	r0, r3
 80157be:	370c      	adds	r7, #12
 80157c0:	46bd      	mov	sp, r7
 80157c2:	bc80      	pop	{r7}
 80157c4:	4770      	bx	lr
 80157c6:	bf00      	nop
 80157c8:	20001a6c 	.word	0x20001a6c

080157cc <LoRaMacCryptoGetFCntDown>:

    return LORAMAC_CRYPTO_SUCCESS;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint32_t frameFcnt, uint32_t* currentDown )
{
 80157cc:	b580      	push	{r7, lr}
 80157ce:	b088      	sub	sp, #32
 80157d0:	af00      	add	r7, sp, #0
 80157d2:	4603      	mov	r3, r0
 80157d4:	60b9      	str	r1, [r7, #8]
 80157d6:	607a      	str	r2, [r7, #4]
 80157d8:	73fb      	strb	r3, [r7, #15]
    uint32_t lastDown = 0;
 80157da:	2300      	movs	r3, #0
 80157dc:	617b      	str	r3, [r7, #20]
    int32_t fCntDiff = 0;
 80157de:	2300      	movs	r3, #0
 80157e0:	61fb      	str	r3, [r7, #28]
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 80157e2:	2312      	movs	r3, #18
 80157e4:	76fb      	strb	r3, [r7, #27]

    if( currentDown == NULL )
 80157e6:	687b      	ldr	r3, [r7, #4]
 80157e8:	2b00      	cmp	r3, #0
 80157ea:	d101      	bne.n	80157f0 <LoRaMacCryptoGetFCntDown+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80157ec:	2309      	movs	r3, #9
 80157ee:	e035      	b.n	801585c <LoRaMacCryptoGetFCntDown+0x90>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 80157f0:	f107 0214 	add.w	r2, r7, #20
 80157f4:	7bfb      	ldrb	r3, [r7, #15]
 80157f6:	4611      	mov	r1, r2
 80157f8:	4618      	mov	r0, r3
 80157fa:	f7ff feab 	bl	8015554 <GetLastFcntDown>
 80157fe:	4603      	mov	r3, r0
 8015800:	76fb      	strb	r3, [r7, #27]
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8015802:	7efb      	ldrb	r3, [r7, #27]
 8015804:	2b00      	cmp	r3, #0
 8015806:	d001      	beq.n	801580c <LoRaMacCryptoGetFCntDown+0x40>
    {
        return cryptoStatus;
 8015808:	7efb      	ldrb	r3, [r7, #27]
 801580a:	e027      	b.n	801585c <LoRaMacCryptoGetFCntDown+0x90>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITIAL_VALUE )
 801580c:	697b      	ldr	r3, [r7, #20]
 801580e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015812:	d103      	bne.n	801581c <LoRaMacCryptoGetFCntDown+0x50>
    {
        *currentDown = frameFcnt;
 8015814:	687b      	ldr	r3, [r7, #4]
 8015816:	68ba      	ldr	r2, [r7, #8]
 8015818:	601a      	str	r2, [r3, #0]
 801581a:	e01e      	b.n	801585a <LoRaMacCryptoGetFCntDown+0x8e>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 801581c:	697b      	ldr	r3, [r7, #20]
 801581e:	b29b      	uxth	r3, r3
 8015820:	68ba      	ldr	r2, [r7, #8]
 8015822:	1ad3      	subs	r3, r2, r3
 8015824:	61fb      	str	r3, [r7, #28]

        if( fCntDiff > 0 )
 8015826:	69fb      	ldr	r3, [r7, #28]
 8015828:	2b00      	cmp	r3, #0
 801582a:	dd05      	ble.n	8015838 <LoRaMacCryptoGetFCntDown+0x6c>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 801582c:	697a      	ldr	r2, [r7, #20]
 801582e:	69fb      	ldr	r3, [r7, #28]
 8015830:	441a      	add	r2, r3
 8015832:	687b      	ldr	r3, [r7, #4]
 8015834:	601a      	str	r2, [r3, #0]
 8015836:	e010      	b.n	801585a <LoRaMacCryptoGetFCntDown+0x8e>
        }
        else if( fCntDiff == 0 )
 8015838:	69fb      	ldr	r3, [r7, #28]
 801583a:	2b00      	cmp	r3, #0
 801583c:	d104      	bne.n	8015848 <LoRaMacCryptoGetFCntDown+0x7c>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 801583e:	697a      	ldr	r2, [r7, #20]
 8015840:	687b      	ldr	r3, [r7, #4]
 8015842:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8015844:	2307      	movs	r3, #7
 8015846:	e009      	b.n	801585c <LoRaMacCryptoGetFCntDown+0x90>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 8015848:	697b      	ldr	r3, [r7, #20]
 801584a:	0c1b      	lsrs	r3, r3, #16
 801584c:	041b      	lsls	r3, r3, #16
 801584e:	68ba      	ldr	r2, [r7, #8]
 8015850:	4413      	add	r3, r2
 8015852:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8015856:	687b      	ldr	r3, [r7, #4]
 8015858:	601a      	str	r2, [r3, #0]
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801585a:	2300      	movs	r3, #0
}
 801585c:	4618      	mov	r0, r3
 801585e:	3720      	adds	r7, #32
 8015860:	46bd      	mov	sp, r7
 8015862:	bd80      	pop	{r7, pc}

08015864 <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 8015864:	b480      	push	{r7}
 8015866:	b085      	sub	sp, #20
 8015868:	af00      	add	r7, sp, #0
 801586a:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 801586c:	687b      	ldr	r3, [r7, #4]
 801586e:	2b00      	cmp	r3, #0
 8015870:	d101      	bne.n	8015876 <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015872:	2309      	movs	r3, #9
 8015874:	e019      	b.n	80158aa <LoRaMacCryptoSetMulticastReference+0x46>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8015876:	2300      	movs	r3, #0
 8015878:	60fb      	str	r3, [r7, #12]
 801587a:	e012      	b.n	80158a2 <LoRaMacCryptoSetMulticastReference+0x3e>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 801587c:	4b0d      	ldr	r3, [pc, #52]	; (80158b4 <LoRaMacCryptoSetMulticastReference+0x50>)
 801587e:	6819      	ldr	r1, [r3, #0]
 8015880:	68fa      	ldr	r2, [r7, #12]
 8015882:	4613      	mov	r3, r2
 8015884:	005b      	lsls	r3, r3, #1
 8015886:	4413      	add	r3, r2
 8015888:	011b      	lsls	r3, r3, #4
 801588a:	461a      	mov	r2, r3
 801588c:	687b      	ldr	r3, [r7, #4]
 801588e:	4413      	add	r3, r2
 8015890:	68fa      	ldr	r2, [r7, #12]
 8015892:	3206      	adds	r2, #6
 8015894:	0092      	lsls	r2, r2, #2
 8015896:	440a      	add	r2, r1
 8015898:	3204      	adds	r2, #4
 801589a:	625a      	str	r2, [r3, #36]	; 0x24
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 801589c:	68fb      	ldr	r3, [r7, #12]
 801589e:	3301      	adds	r3, #1
 80158a0:	60fb      	str	r3, [r7, #12]
 80158a2:	68fb      	ldr	r3, [r7, #12]
 80158a4:	2b00      	cmp	r3, #0
 80158a6:	dde9      	ble.n	801587c <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80158a8:	2300      	movs	r3, #0
}
 80158aa:	4618      	mov	r0, r3
 80158ac:	3714      	adds	r7, #20
 80158ae:	46bd      	mov	sp, r7
 80158b0:	bc80      	pop	{r7}
 80158b2:	4770      	bx	lr
 80158b4:	20001a6c 	.word	0x20001a6c

080158b8 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 80158b8:	b580      	push	{r7, lr}
 80158ba:	b082      	sub	sp, #8
 80158bc:	af00      	add	r7, sp, #0
 80158be:	4603      	mov	r3, r0
 80158c0:	6039      	str	r1, [r7, #0]
 80158c2:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 80158c4:	79fb      	ldrb	r3, [r7, #7]
 80158c6:	6839      	ldr	r1, [r7, #0]
 80158c8:	4618      	mov	r0, r3
 80158ca:	f7f7 fe29 	bl	800d520 <SecureElementSetKey>
 80158ce:	4603      	mov	r3, r0
 80158d0:	2b00      	cmp	r3, #0
 80158d2:	d001      	beq.n	80158d8 <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80158d4:	230e      	movs	r3, #14
 80158d6:	e021      	b.n	801591c <LoRaMacCryptoSetKey+0x64>
    }
    if( keyID == APP_KEY )
 80158d8:	79fb      	ldrb	r3, [r7, #7]
 80158da:	2b00      	cmp	r3, #0
 80158dc:	d11d      	bne.n	801591a <LoRaMacCryptoSetKey+0x62>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveLifeTimeKey( CryptoNvm->LrWanVersion.Fields.Minor, MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 80158de:	4b11      	ldr	r3, [pc, #68]	; (8015924 <LoRaMacCryptoSetKey+0x6c>)
 80158e0:	681b      	ldr	r3, [r3, #0]
 80158e2:	789b      	ldrb	r3, [r3, #2]
 80158e4:	210b      	movs	r1, #11
 80158e6:	4618      	mov	r0, r3
 80158e8:	f000 fa58 	bl	8015d9c <LoRaMacCryptoDeriveLifeTimeKey>
 80158ec:	4603      	mov	r3, r0
 80158ee:	2b00      	cmp	r3, #0
 80158f0:	d001      	beq.n	80158f6 <LoRaMacCryptoSetKey+0x3e>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80158f2:	230e      	movs	r3, #14
 80158f4:	e012      	b.n	801591c <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 80158f6:	210c      	movs	r1, #12
 80158f8:	2000      	movs	r0, #0
 80158fa:	f000 fa4f 	bl	8015d9c <LoRaMacCryptoDeriveLifeTimeKey>
 80158fe:	4603      	mov	r3, r0
 8015900:	2b00      	cmp	r3, #0
 8015902:	d001      	beq.n	8015908 <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015904:	230e      	movs	r3, #14
 8015906:	e009      	b.n	801591c <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8015908:	210a      	movs	r1, #10
 801590a:	2000      	movs	r0, #0
 801590c:	f000 fa46 	bl	8015d9c <LoRaMacCryptoDeriveLifeTimeKey>
 8015910:	4603      	mov	r3, r0
 8015912:	2b00      	cmp	r3, #0
 8015914:	d001      	beq.n	801591a <LoRaMacCryptoSetKey+0x62>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015916:	230e      	movs	r3, #14
 8015918:	e000      	b.n	801591c <LoRaMacCryptoSetKey+0x64>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 801591a:	2300      	movs	r3, #0
}
 801591c:	4618      	mov	r0, r3
 801591e:	3708      	adds	r7, #8
 8015920:	46bd      	mov	sp, r7
 8015922:	bd80      	pop	{r7, pc}
 8015924:	20001a6c 	.word	0x20001a6c

08015928 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8015928:	b580      	push	{r7, lr}
 801592a:	b086      	sub	sp, #24
 801592c:	af02      	add	r7, sp, #8
 801592e:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 8015930:	687b      	ldr	r3, [r7, #4]
 8015932:	2b00      	cmp	r3, #0
 8015934:	d101      	bne.n	801593a <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015936:	2309      	movs	r3, #9
 8015938:	e02d      	b.n	8015996 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 801593a:	2301      	movs	r3, #1
 801593c:	73fb      	strb	r3, [r7, #15]
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
    SecureElementRandomNumber( &devNonce );
    CryptoNvm->DevNonce = devNonce;
#else
    CryptoNvm->DevNonce++;
 801593e:	4b18      	ldr	r3, [pc, #96]	; (80159a0 <LoRaMacCryptoPrepareJoinRequest+0x78>)
 8015940:	681b      	ldr	r3, [r3, #0]
 8015942:	889a      	ldrh	r2, [r3, #4]
 8015944:	3201      	adds	r2, #1
 8015946:	b292      	uxth	r2, r2
 8015948:	809a      	strh	r2, [r3, #4]
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 801594a:	4b15      	ldr	r3, [pc, #84]	; (80159a0 <LoRaMacCryptoPrepareJoinRequest+0x78>)
 801594c:	681b      	ldr	r3, [r3, #0]
 801594e:	889a      	ldrh	r2, [r3, #4]
 8015950:	687b      	ldr	r3, [r7, #4]
 8015952:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* LORAMAC_VERSION */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8015954:	6878      	ldr	r0, [r7, #4]
 8015956:	f000 fc1b 	bl	8016190 <LoRaMacSerializerJoinRequest>
 801595a:	4603      	mov	r3, r0
 801595c:	2b00      	cmp	r3, #0
 801595e:	d001      	beq.n	8015964 <LoRaMacCryptoPrepareJoinRequest+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8015960:	2310      	movs	r3, #16
 8015962:	e018      	b.n	8015996 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8015964:	687b      	ldr	r3, [r7, #4]
 8015966:	6819      	ldr	r1, [r3, #0]
 8015968:	687b      	ldr	r3, [r7, #4]
 801596a:	3318      	adds	r3, #24
 801596c:	7bfa      	ldrb	r2, [r7, #15]
 801596e:	9300      	str	r3, [sp, #0]
 8015970:	4613      	mov	r3, r2
 8015972:	2213      	movs	r2, #19
 8015974:	2000      	movs	r0, #0
 8015976:	f7f7 fe31 	bl	800d5dc <SecureElementComputeAesCmac>
 801597a:	4603      	mov	r3, r0
 801597c:	2b00      	cmp	r3, #0
 801597e:	d001      	beq.n	8015984 <LoRaMacCryptoPrepareJoinRequest+0x5c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015980:	230e      	movs	r3, #14
 8015982:	e008      	b.n	8015996 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8015984:	6878      	ldr	r0, [r7, #4]
 8015986:	f000 fc03 	bl	8016190 <LoRaMacSerializerJoinRequest>
 801598a:	4603      	mov	r3, r0
 801598c:	2b00      	cmp	r3, #0
 801598e:	d001      	beq.n	8015994 <LoRaMacCryptoPrepareJoinRequest+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8015990:	2310      	movs	r3, #16
 8015992:	e000      	b.n	8015996 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8015994:	2300      	movs	r3, #0
}
 8015996:	4618      	mov	r0, r3
 8015998:	3710      	adds	r7, #16
 801599a:	46bd      	mov	sp, r7
 801599c:	bd80      	pop	{r7, pc}
 801599e:	bf00      	nop
 80159a0:	20001a6c 	.word	0x20001a6c

080159a4 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 80159a4:	b590      	push	{r4, r7, lr}
 80159a6:	b097      	sub	sp, #92	; 0x5c
 80159a8:	af04      	add	r7, sp, #16
 80159aa:	4603      	mov	r3, r0
 80159ac:	60b9      	str	r1, [r7, #8]
 80159ae:	607a      	str	r2, [r7, #4]
 80159b0:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 80159b2:	687b      	ldr	r3, [r7, #4]
 80159b4:	2b00      	cmp	r3, #0
 80159b6:	d002      	beq.n	80159be <LoRaMacCryptoHandleJoinAccept+0x1a>
 80159b8:	68bb      	ldr	r3, [r7, #8]
 80159ba:	2b00      	cmp	r3, #0
 80159bc:	d101      	bne.n	80159c2 <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80159be:	2309      	movs	r3, #9
 80159c0:	e0d3      	b.n	8015b6a <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 80159c2:	2312      	movs	r3, #18
 80159c4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 80159c8:	2300      	movs	r3, #0
 80159ca:	617b      	str	r3, [r7, #20]
 80159cc:	f107 0318 	add.w	r3, r7, #24
 80159d0:	221d      	movs	r2, #29
 80159d2:	2100      	movs	r1, #0
 80159d4:	4618      	mov	r0, r3
 80159d6:	f009 f987 	bl	801ece8 <memset>
    uint8_t versionMinor         = 0;
 80159da:	2300      	movs	r3, #0
 80159dc:	74fb      	strb	r3, [r7, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 80159de:	4b65      	ldr	r3, [pc, #404]	; (8015b74 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 80159e0:	681b      	ldr	r3, [r3, #0]
 80159e2:	889b      	ldrh	r3, [r3, #4]
 80159e4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* LORAMAC_VERSION */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 80159e8:	687b      	ldr	r3, [r7, #4]
 80159ea:	681c      	ldr	r4, [r3, #0]
 80159ec:	687b      	ldr	r3, [r7, #4]
 80159ee:	791b      	ldrb	r3, [r3, #4]
 80159f0:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 80159f4:	7bf8      	ldrb	r0, [r7, #15]
 80159f6:	f107 0213 	add.w	r2, r7, #19
 80159fa:	9202      	str	r2, [sp, #8]
 80159fc:	f107 0214 	add.w	r2, r7, #20
 8015a00:	9201      	str	r2, [sp, #4]
 8015a02:	9300      	str	r3, [sp, #0]
 8015a04:	4623      	mov	r3, r4
 8015a06:	460a      	mov	r2, r1
 8015a08:	68b9      	ldr	r1, [r7, #8]
 8015a0a:	f7f7 feed 	bl	800d7e8 <SecureElementProcessJoinAccept>
 8015a0e:	4603      	mov	r3, r0
 8015a10:	2b00      	cmp	r3, #0
 8015a12:	d001      	beq.n	8015a18 <LoRaMacCryptoHandleJoinAccept+0x74>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015a14:	230e      	movs	r3, #14
 8015a16:	e0a8      	b.n	8015b6a <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 8015a18:	687b      	ldr	r3, [r7, #4]
 8015a1a:	6818      	ldr	r0, [r3, #0]
 8015a1c:	687b      	ldr	r3, [r7, #4]
 8015a1e:	791b      	ldrb	r3, [r3, #4]
 8015a20:	b29a      	uxth	r2, r3
 8015a22:	f107 0314 	add.w	r3, r7, #20
 8015a26:	4619      	mov	r1, r3
 8015a28:	f004 fb41 	bl	801a0ae <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8015a2c:	6878      	ldr	r0, [r7, #4]
 8015a2e:	f000 f9f0 	bl	8015e12 <LoRaMacParserJoinAccept>
 8015a32:	4603      	mov	r3, r0
 8015a34:	2b00      	cmp	r3, #0
 8015a36:	d001      	beq.n	8015a3c <LoRaMacCryptoHandleJoinAccept+0x98>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8015a38:	230f      	movs	r3, #15
 8015a3a:	e096      	b.n	8015b6a <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    uint32_t currentJoinNonce;
    bool isJoinNonceOk = false;
 8015a3c:	2300      	movs	r3, #0
 8015a3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 8015a42:	687b      	ldr	r3, [r7, #4]
 8015a44:	799b      	ldrb	r3, [r3, #6]
 8015a46:	63fb      	str	r3, [r7, #60]	; 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 8015a48:	687b      	ldr	r3, [r7, #4]
 8015a4a:	79db      	ldrb	r3, [r3, #7]
 8015a4c:	021b      	lsls	r3, r3, #8
 8015a4e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015a50:	4313      	orrs	r3, r2
 8015a52:	63fb      	str	r3, [r7, #60]	; 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 8015a54:	687b      	ldr	r3, [r7, #4]
 8015a56:	7a1b      	ldrb	r3, [r3, #8]
 8015a58:	041b      	lsls	r3, r3, #16
 8015a5a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015a5c:	4313      	orrs	r3, r2
 8015a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        isJoinNonceOk = IsJoinNonce11xOk( currentJoinNonce );
    }
    else
#endif /* LORAMAC_VERSION */
    {
        isJoinNonceOk = IsJoinNonce10xOk( currentJoinNonce );
 8015a60:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015a62:	f7ff fe4b 	bl	80156fc <IsJoinNonce10xOk>
 8015a66:	4603      	mov	r3, r0
 8015a68:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    }

    if( isJoinNonceOk == true )
 8015a6c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8015a70:	2b00      	cmp	r3, #0
 8015a72:	d010      	beq.n	8015a96 <LoRaMacCryptoHandleJoinAccept+0xf2>
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 8015a74:	4b3f      	ldr	r3, [pc, #252]	; (8015b74 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8015a76:	681b      	ldr	r3, [r3, #0]
 8015a78:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015a7a:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveLifeTimeKey( versionMinor, MC_ROOT_KEY );
 8015a7c:	7cfb      	ldrb	r3, [r7, #19]
 8015a7e:	210b      	movs	r1, #11
 8015a80:	4618      	mov	r0, r3
 8015a82:	f000 f98b 	bl	8015d9c <LoRaMacCryptoDeriveLifeTimeKey>
 8015a86:	4603      	mov	r3, r0
 8015a88:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015a8c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015a90:	2b00      	cmp	r3, #0
 8015a92:	d005      	beq.n	8015aa0 <LoRaMacCryptoHandleJoinAccept+0xfc>
 8015a94:	e001      	b.n	8015a9a <LoRaMacCryptoHandleJoinAccept+0xf6>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 8015a96:	2303      	movs	r3, #3
 8015a98:	e067      	b.n	8015b6a <LoRaMacCryptoHandleJoinAccept+0x1c6>
    {
        return retval;
 8015a9a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015a9e:	e064      	b.n	8015b6a <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY );
 8015aa0:	210c      	movs	r1, #12
 8015aa2:	2000      	movs	r0, #0
 8015aa4:	f000 f97a 	bl	8015d9c <LoRaMacCryptoDeriveLifeTimeKey>
 8015aa8:	4603      	mov	r3, r0
 8015aaa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015aae:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015ab2:	2b00      	cmp	r3, #0
 8015ab4:	d002      	beq.n	8015abc <LoRaMacCryptoHandleJoinAccept+0x118>
    {
        return retval;
 8015ab6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015aba:	e056      	b.n	8015b6a <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY );
 8015abc:	210a      	movs	r1, #10
 8015abe:	2000      	movs	r0, #0
 8015ac0:	f000 f96c 	bl	8015d9c <LoRaMacCryptoDeriveLifeTimeKey>
 8015ac4:	4603      	mov	r3, r0
 8015ac6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015aca:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015ace:	2b00      	cmp	r3, #0
 8015ad0:	d002      	beq.n	8015ad8 <LoRaMacCryptoHandleJoinAccept+0x134>
    {
        return retval;
 8015ad2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015ad6:	e048      	b.n	8015b6a <LoRaMacCryptoHandleJoinAccept+0x1c6>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 8015ad8:	687b      	ldr	r3, [r7, #4]
 8015ada:	7a5b      	ldrb	r3, [r3, #9]
 8015adc:	63bb      	str	r3, [r7, #56]	; 0x38
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 8015ade:	687b      	ldr	r3, [r7, #4]
 8015ae0:	7a9b      	ldrb	r3, [r3, #10]
 8015ae2:	021b      	lsls	r3, r3, #8
 8015ae4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015ae6:	4313      	orrs	r3, r2
 8015ae8:	63bb      	str	r3, [r7, #56]	; 0x38
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 8015aea:	687b      	ldr	r3, [r7, #4]
 8015aec:	7adb      	ldrb	r3, [r3, #11]
 8015aee:	041b      	lsls	r3, r3, #16
 8015af0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015af2:	4313      	orrs	r3, r2
 8015af4:	63bb      	str	r3, [r7, #56]	; 0x38

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 8015af6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015afa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015afc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015afe:	2009      	movs	r0, #9
 8015b00:	f7ff fcd8 	bl	80154b4 <DeriveSessionKey10x>
 8015b04:	4603      	mov	r3, r0
 8015b06:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015b0a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015b0e:	2b00      	cmp	r3, #0
 8015b10:	d002      	beq.n	8015b18 <LoRaMacCryptoHandleJoinAccept+0x174>
        {
            return retval;
 8015b12:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015b16:	e028      	b.n	8015b6a <LoRaMacCryptoHandleJoinAccept+0x1c6>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 8015b18:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015b1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015b1e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015b20:	2008      	movs	r0, #8
 8015b22:	f7ff fcc7 	bl	80154b4 <DeriveSessionKey10x>
 8015b26:	4603      	mov	r3, r0
 8015b28:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#endif /* LORAMAC_VERSION */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015b2c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015b30:	2b00      	cmp	r3, #0
 8015b32:	d002      	beq.n	8015b3a <LoRaMacCryptoHandleJoinAccept+0x196>
        {
            return retval;
 8015b34:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015b38:	e017      	b.n	8015b6a <LoRaMacCryptoHandleJoinAccept+0x1c6>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 8015b3a:	4b0e      	ldr	r3, [pc, #56]	; (8015b74 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8015b3c:	681b      	ldr	r3, [r3, #0]
 8015b3e:	7cfa      	ldrb	r2, [r7, #19]
 8015b40:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    RJcount0 = 0;
#endif /* LORAMAC_VERSION */
    CryptoNvm->FCntList.FCntUp = 0;
 8015b42:	4b0c      	ldr	r3, [pc, #48]	; (8015b74 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8015b44:	681b      	ldr	r3, [r3, #0]
 8015b46:	2200      	movs	r2, #0
 8015b48:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 8015b4a:	4b0a      	ldr	r3, [pc, #40]	; (8015b74 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8015b4c:	681b      	ldr	r3, [r3, #0]
 8015b4e:	f04f 32ff 	mov.w	r2, #4294967295
 8015b52:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8015b54:	4b07      	ldr	r3, [pc, #28]	; (8015b74 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8015b56:	681b      	ldr	r3, [r3, #0]
 8015b58:	f04f 32ff 	mov.w	r2, #4294967295
 8015b5c:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8015b5e:	4b05      	ldr	r3, [pc, #20]	; (8015b74 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8015b60:	681b      	ldr	r3, [r3, #0]
 8015b62:	f04f 32ff 	mov.w	r2, #4294967295
 8015b66:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 8015b68:	2300      	movs	r3, #0
}
 8015b6a:	4618      	mov	r0, r3
 8015b6c:	374c      	adds	r7, #76	; 0x4c
 8015b6e:	46bd      	mov	sp, r7
 8015b70:	bd90      	pop	{r4, r7, pc}
 8015b72:	bf00      	nop
 8015b74:	20001a6c 	.word	0x20001a6c

08015b78 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 8015b78:	b590      	push	{r4, r7, lr}
 8015b7a:	b08b      	sub	sp, #44	; 0x2c
 8015b7c:	af04      	add	r7, sp, #16
 8015b7e:	60f8      	str	r0, [r7, #12]
 8015b80:	607b      	str	r3, [r7, #4]
 8015b82:	460b      	mov	r3, r1
 8015b84:	72fb      	strb	r3, [r7, #11]
 8015b86:	4613      	mov	r3, r2
 8015b88:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8015b8a:	2312      	movs	r3, #18
 8015b8c:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8015b8e:	2309      	movs	r3, #9
 8015b90:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 8015b92:	687b      	ldr	r3, [r7, #4]
 8015b94:	2b00      	cmp	r3, #0
 8015b96:	d101      	bne.n	8015b9c <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015b98:	2309      	movs	r3, #9
 8015b9a:	e05f      	b.n	8015c5c <LoRaMacCryptoSecureMessage+0xe4>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 8015b9c:	4b31      	ldr	r3, [pc, #196]	; (8015c64 <LoRaMacCryptoSecureMessage+0xec>)
 8015b9e:	681b      	ldr	r3, [r3, #0]
 8015ba0:	68db      	ldr	r3, [r3, #12]
 8015ba2:	68fa      	ldr	r2, [r7, #12]
 8015ba4:	429a      	cmp	r2, r3
 8015ba6:	d201      	bcs.n	8015bac <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8015ba8:	2306      	movs	r3, #6
 8015baa:	e057      	b.n	8015c5c <LoRaMacCryptoSecureMessage+0xe4>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8015bac:	687b      	ldr	r3, [r7, #4]
 8015bae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015bb2:	2b00      	cmp	r3, #0
 8015bb4:	d101      	bne.n	8015bba <LoRaMacCryptoSecureMessage+0x42>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8015bb6:	2308      	movs	r3, #8
 8015bb8:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 8015bba:	4b2a      	ldr	r3, [pc, #168]	; (8015c64 <LoRaMacCryptoSecureMessage+0xec>)
 8015bbc:	681b      	ldr	r3, [r3, #0]
 8015bbe:	68db      	ldr	r3, [r3, #12]
 8015bc0:	68fa      	ldr	r2, [r7, #12]
 8015bc2:	429a      	cmp	r2, r3
 8015bc4:	d916      	bls.n	8015bf4 <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 8015bc6:	687b      	ldr	r3, [r7, #4]
 8015bc8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8015bca:	687b      	ldr	r3, [r7, #4]
 8015bcc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015bd0:	b219      	sxth	r1, r3
 8015bd2:	687b      	ldr	r3, [r7, #4]
 8015bd4:	689c      	ldr	r4, [r3, #8]
 8015bd6:	7dfa      	ldrb	r2, [r7, #23]
 8015bd8:	68fb      	ldr	r3, [r7, #12]
 8015bda:	9301      	str	r3, [sp, #4]
 8015bdc:	2300      	movs	r3, #0
 8015bde:	9300      	str	r3, [sp, #0]
 8015be0:	4623      	mov	r3, r4
 8015be2:	f7ff fa73 	bl	80150cc <PayloadEncrypt>
 8015be6:	4603      	mov	r3, r0
 8015be8:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015bea:	7dbb      	ldrb	r3, [r7, #22]
 8015bec:	2b00      	cmp	r3, #0
 8015bee:	d001      	beq.n	8015bf4 <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 8015bf0:	7dbb      	ldrb	r3, [r7, #22]
 8015bf2:	e033      	b.n	8015c5c <LoRaMacCryptoSecureMessage+0xe4>
        }
#endif /* LORAMAC_VERSION */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8015bf4:	6878      	ldr	r0, [r7, #4]
 8015bf6:	f000 fb4d 	bl	8016294 <LoRaMacSerializerData>
 8015bfa:	4603      	mov	r3, r0
 8015bfc:	2b00      	cmp	r3, #0
 8015bfe:	d001      	beq.n	8015c04 <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8015c00:	2310      	movs	r3, #16
 8015c02:	e02b      	b.n	8015c5c <LoRaMacCryptoSecureMessage+0xe4>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8015c04:	2308      	movs	r3, #8
 8015c06:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8015c08:	687b      	ldr	r3, [r7, #4]
 8015c0a:	6818      	ldr	r0, [r3, #0]
 8015c0c:	687b      	ldr	r3, [r7, #4]
 8015c0e:	791b      	ldrb	r3, [r3, #4]
 8015c10:	b29b      	uxth	r3, r3
 8015c12:	3b04      	subs	r3, #4
 8015c14:	b299      	uxth	r1, r3
 8015c16:	687b      	ldr	r3, [r7, #4]
 8015c18:	689b      	ldr	r3, [r3, #8]
 8015c1a:	687a      	ldr	r2, [r7, #4]
 8015c1c:	322c      	adds	r2, #44	; 0x2c
 8015c1e:	7dfc      	ldrb	r4, [r7, #23]
 8015c20:	9203      	str	r2, [sp, #12]
 8015c22:	68fa      	ldr	r2, [r7, #12]
 8015c24:	9202      	str	r2, [sp, #8]
 8015c26:	9301      	str	r3, [sp, #4]
 8015c28:	2300      	movs	r3, #0
 8015c2a:	9300      	str	r3, [sp, #0]
 8015c2c:	2300      	movs	r3, #0
 8015c2e:	4622      	mov	r2, r4
 8015c30:	f7ff fb4d 	bl	80152ce <ComputeCmacB0>
 8015c34:	4603      	mov	r3, r0
 8015c36:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015c38:	7dbb      	ldrb	r3, [r7, #22]
 8015c3a:	2b00      	cmp	r3, #0
 8015c3c:	d001      	beq.n	8015c42 <LoRaMacCryptoSecureMessage+0xca>
        {
            return retval;
 8015c3e:	7dbb      	ldrb	r3, [r7, #22]
 8015c40:	e00c      	b.n	8015c5c <LoRaMacCryptoSecureMessage+0xe4>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8015c42:	6878      	ldr	r0, [r7, #4]
 8015c44:	f000 fb26 	bl	8016294 <LoRaMacSerializerData>
 8015c48:	4603      	mov	r3, r0
 8015c4a:	2b00      	cmp	r3, #0
 8015c4c:	d001      	beq.n	8015c52 <LoRaMacCryptoSecureMessage+0xda>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8015c4e:	2310      	movs	r3, #16
 8015c50:	e004      	b.n	8015c5c <LoRaMacCryptoSecureMessage+0xe4>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 8015c52:	4b04      	ldr	r3, [pc, #16]	; (8015c64 <LoRaMacCryptoSecureMessage+0xec>)
 8015c54:	681b      	ldr	r3, [r3, #0]
 8015c56:	68fa      	ldr	r2, [r7, #12]
 8015c58:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 8015c5a:	2300      	movs	r3, #0
}
 8015c5c:	4618      	mov	r0, r3
 8015c5e:	371c      	adds	r7, #28
 8015c60:	46bd      	mov	sp, r7
 8015c62:	bd90      	pop	{r4, r7, pc}
 8015c64:	20001a6c 	.word	0x20001a6c

08015c68 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8015c68:	b590      	push	{r4, r7, lr}
 8015c6a:	b08b      	sub	sp, #44	; 0x2c
 8015c6c:	af04      	add	r7, sp, #16
 8015c6e:	60b9      	str	r1, [r7, #8]
 8015c70:	607b      	str	r3, [r7, #4]
 8015c72:	4603      	mov	r3, r0
 8015c74:	73fb      	strb	r3, [r7, #15]
 8015c76:	4613      	mov	r3, r2
 8015c78:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 8015c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c7c:	2b00      	cmp	r3, #0
 8015c7e:	d101      	bne.n	8015c84 <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015c80:	2309      	movs	r3, #9
 8015c82:	e084      	b.n	8015d8e <LoRaMacCryptoUnsecureMessage+0x126>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8015c84:	7bbb      	ldrb	r3, [r7, #14]
 8015c86:	6879      	ldr	r1, [r7, #4]
 8015c88:	4618      	mov	r0, r3
 8015c8a:	f7ff fc9f 	bl	80155cc <CheckFCntDown>
 8015c8e:	4603      	mov	r3, r0
 8015c90:	f083 0301 	eor.w	r3, r3, #1
 8015c94:	b2db      	uxtb	r3, r3
 8015c96:	2b00      	cmp	r3, #0
 8015c98:	d001      	beq.n	8015c9e <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8015c9a:	2306      	movs	r3, #6
 8015c9c:	e077      	b.n	8015d8e <LoRaMacCryptoUnsecureMessage+0x126>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8015c9e:	2312      	movs	r3, #18
 8015ca0:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8015ca2:	2309      	movs	r3, #9
 8015ca4:	75fb      	strb	r3, [r7, #23]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 8015ca6:	2308      	movs	r3, #8
 8015ca8:	753b      	strb	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8015caa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015cac:	f000 f97c 	bl	8015fa8 <LoRaMacParserData>
 8015cb0:	4603      	mov	r3, r0
 8015cb2:	2b00      	cmp	r3, #0
 8015cb4:	d001      	beq.n	8015cba <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8015cb6:	230f      	movs	r3, #15
 8015cb8:	e069      	b.n	8015d8e <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8015cba:	f107 0210 	add.w	r2, r7, #16
 8015cbe:	7bfb      	ldrb	r3, [r7, #15]
 8015cc0:	4611      	mov	r1, r2
 8015cc2:	4618      	mov	r0, r3
 8015cc4:	f7ff fbd0 	bl	8015468 <GetKeyAddrItem>
 8015cc8:	4603      	mov	r3, r0
 8015cca:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015ccc:	7d7b      	ldrb	r3, [r7, #21]
 8015cce:	2b00      	cmp	r3, #0
 8015cd0:	d001      	beq.n	8015cd6 <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 8015cd2:	7d7b      	ldrb	r3, [r7, #21]
 8015cd4:	e05b      	b.n	8015d8e <LoRaMacCryptoUnsecureMessage+0x126>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 8015cd6:	693b      	ldr	r3, [r7, #16]
 8015cd8:	785b      	ldrb	r3, [r3, #1]
 8015cda:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 8015cdc:	693b      	ldr	r3, [r7, #16]
 8015cde:	789b      	ldrb	r3, [r3, #2]
 8015ce0:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 8015ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ce4:	689b      	ldr	r3, [r3, #8]
 8015ce6:	68ba      	ldr	r2, [r7, #8]
 8015ce8:	429a      	cmp	r2, r3
 8015cea:	d001      	beq.n	8015cf0 <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8015cec:	2302      	movs	r3, #2
 8015cee:	e04e      	b.n	8015d8e <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8015cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cf2:	7b1b      	ldrb	r3, [r3, #12]
 8015cf4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8015cf8:	b2db      	uxtb	r3, r3
 8015cfa:	2b00      	cmp	r3, #0
 8015cfc:	bf14      	ite	ne
 8015cfe:	2301      	movne	r3, #1
 8015d00:	2300      	moveq	r3, #0
 8015d02:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8015d04:	4b24      	ldr	r3, [pc, #144]	; (8015d98 <LoRaMacCryptoUnsecureMessage+0x130>)
 8015d06:	681b      	ldr	r3, [r3, #0]
 8015d08:	789b      	ldrb	r3, [r3, #2]
 8015d0a:	2b00      	cmp	r3, #0
 8015d0c:	d101      	bne.n	8015d12 <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 8015d0e:	2300      	movs	r3, #0
 8015d10:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8015d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d14:	6818      	ldr	r0, [r3, #0]
 8015d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d18:	791b      	ldrb	r3, [r3, #4]
 8015d1a:	b29b      	uxth	r3, r3
 8015d1c:	3b04      	subs	r3, #4
 8015d1e:	b299      	uxth	r1, r3
 8015d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015d24:	7dbc      	ldrb	r4, [r7, #22]
 8015d26:	7d3a      	ldrb	r2, [r7, #20]
 8015d28:	9303      	str	r3, [sp, #12]
 8015d2a:	687b      	ldr	r3, [r7, #4]
 8015d2c:	9302      	str	r3, [sp, #8]
 8015d2e:	68bb      	ldr	r3, [r7, #8]
 8015d30:	9301      	str	r3, [sp, #4]
 8015d32:	2301      	movs	r3, #1
 8015d34:	9300      	str	r3, [sp, #0]
 8015d36:	4623      	mov	r3, r4
 8015d38:	f7ff fb07 	bl	801534a <VerifyCmacB0>
 8015d3c:	4603      	mov	r3, r0
 8015d3e:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015d40:	7d7b      	ldrb	r3, [r7, #21]
 8015d42:	2b00      	cmp	r3, #0
 8015d44:	d001      	beq.n	8015d4a <LoRaMacCryptoUnsecureMessage+0xe2>
    {
        return retval;
 8015d46:	7d7b      	ldrb	r3, [r7, #21]
 8015d48:	e021      	b.n	8015d8e <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 8015d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015d50:	2b00      	cmp	r3, #0
 8015d52:	d101      	bne.n	8015d58 <LoRaMacCryptoUnsecureMessage+0xf0>
    {
        // Use network session encryption key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8015d54:	2308      	movs	r3, #8
 8015d56:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8015d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d5a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8015d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015d62:	b219      	sxth	r1, r3
 8015d64:	7dfa      	ldrb	r2, [r7, #23]
 8015d66:	687b      	ldr	r3, [r7, #4]
 8015d68:	9301      	str	r3, [sp, #4]
 8015d6a:	2301      	movs	r3, #1
 8015d6c:	9300      	str	r3, [sp, #0]
 8015d6e:	68bb      	ldr	r3, [r7, #8]
 8015d70:	f7ff f9ac 	bl	80150cc <PayloadEncrypt>
 8015d74:	4603      	mov	r3, r0
 8015d76:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015d78:	7d7b      	ldrb	r3, [r7, #21]
 8015d7a:	2b00      	cmp	r3, #0
 8015d7c:	d001      	beq.n	8015d82 <LoRaMacCryptoUnsecureMessage+0x11a>
    {
        return retval;
 8015d7e:	7d7b      	ldrb	r3, [r7, #21]
 8015d80:	e005      	b.n	8015d8e <LoRaMacCryptoUnsecureMessage+0x126>
            }
        }
    }
#endif /* LORAMAC_VERSION */

    UpdateFCntDown( fCntID, fCntDown );
 8015d82:	7bbb      	ldrb	r3, [r7, #14]
 8015d84:	6879      	ldr	r1, [r7, #4]
 8015d86:	4618      	mov	r0, r3
 8015d88:	f7ff fc44 	bl	8015614 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 8015d8c:	2300      	movs	r3, #0
}
 8015d8e:	4618      	mov	r0, r3
 8015d90:	371c      	adds	r7, #28
 8015d92:	46bd      	mov	sp, r7
 8015d94:	bd90      	pop	{r4, r7, pc}
 8015d96:	bf00      	nop
 8015d98:	20001a6c 	.word	0x20001a6c

08015d9c <LoRaMacCryptoDeriveLifeTimeKey>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveLifeTimeKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 8015d9c:	b580      	push	{r7, lr}
 8015d9e:	b088      	sub	sp, #32
 8015da0:	af00      	add	r7, sp, #0
 8015da2:	4603      	mov	r3, r0
 8015da4:	460a      	mov	r2, r1
 8015da6:	71fb      	strb	r3, [r7, #7]
 8015da8:	4613      	mov	r3, r2
 8015daa:	71bb      	strb	r3, [r7, #6]
    uint8_t compBase[16] = { 0 };
 8015dac:	2300      	movs	r3, #0
 8015dae:	60fb      	str	r3, [r7, #12]
 8015db0:	f107 0310 	add.w	r3, r7, #16
 8015db4:	2200      	movs	r2, #0
 8015db6:	601a      	str	r2, [r3, #0]
 8015db8:	605a      	str	r2, [r3, #4]
 8015dba:	609a      	str	r2, [r3, #8]
    KeyIdentifier_t rootKeyId = APP_KEY;
 8015dbc:	2300      	movs	r3, #0
 8015dbe:	77fb      	strb	r3, [r7, #31]
    switch( keyID )
 8015dc0:	79bb      	ldrb	r3, [r7, #6]
 8015dc2:	2b0c      	cmp	r3, #12
 8015dc4:	d00b      	beq.n	8015dde <LoRaMacCryptoDeriveLifeTimeKey+0x42>
 8015dc6:	2b0c      	cmp	r3, #12
 8015dc8:	dc0f      	bgt.n	8015dea <LoRaMacCryptoDeriveLifeTimeKey+0x4e>
 8015dca:	2b0a      	cmp	r3, #10
 8015dcc:	d00a      	beq.n	8015de4 <LoRaMacCryptoDeriveLifeTimeKey+0x48>
 8015dce:	2b0b      	cmp	r3, #11
 8015dd0:	d10b      	bne.n	8015dea <LoRaMacCryptoDeriveLifeTimeKey+0x4e>
    {
        case MC_ROOT_KEY:
            if( versionMinor == 1 )
 8015dd2:	79fb      	ldrb	r3, [r7, #7]
 8015dd4:	2b01      	cmp	r3, #1
 8015dd6:	d10a      	bne.n	8015dee <LoRaMacCryptoDeriveLifeTimeKey+0x52>
            {
                compBase[0] = 0x20;
 8015dd8:	2320      	movs	r3, #32
 8015dda:	733b      	strb	r3, [r7, #12]
            }
            break;
 8015ddc:	e007      	b.n	8015dee <LoRaMacCryptoDeriveLifeTimeKey+0x52>
        case MC_KE_KEY:
            rootKeyId = MC_ROOT_KEY;
 8015dde:	230b      	movs	r3, #11
 8015de0:	77fb      	strb	r3, [r7, #31]
            break;
 8015de2:	e005      	b.n	8015df0 <LoRaMacCryptoDeriveLifeTimeKey+0x54>
        case DATABLOCK_INT_KEY:
            compBase[0] = 0x30;
 8015de4:	2330      	movs	r3, #48	; 0x30
 8015de6:	733b      	strb	r3, [r7, #12]
            break;
 8015de8:	e002      	b.n	8015df0 <LoRaMacCryptoDeriveLifeTimeKey+0x54>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8015dea:	230a      	movs	r3, #10
 8015dec:	e00d      	b.n	8015e0a <LoRaMacCryptoDeriveLifeTimeKey+0x6e>
            break;
 8015dee:	bf00      	nop
    }

    if( SecureElementDeriveAndStoreKey( compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
 8015df0:	79ba      	ldrb	r2, [r7, #6]
 8015df2:	7ff9      	ldrb	r1, [r7, #31]
 8015df4:	f107 030c 	add.w	r3, r7, #12
 8015df8:	4618      	mov	r0, r3
 8015dfa:	f7f7 fcb5 	bl	800d768 <SecureElementDeriveAndStoreKey>
 8015dfe:	4603      	mov	r3, r0
 8015e00:	2b00      	cmp	r3, #0
 8015e02:	d001      	beq.n	8015e08 <LoRaMacCryptoDeriveLifeTimeKey+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015e04:	230e      	movs	r3, #14
 8015e06:	e000      	b.n	8015e0a <LoRaMacCryptoDeriveLifeTimeKey+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8015e08:	2300      	movs	r3, #0
}
 8015e0a:	4618      	mov	r0, r3
 8015e0c:	3720      	adds	r7, #32
 8015e0e:	46bd      	mov	sp, r7
 8015e10:	bd80      	pop	{r7, pc}

08015e12 <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 8015e12:	b580      	push	{r7, lr}
 8015e14:	b084      	sub	sp, #16
 8015e16:	af00      	add	r7, sp, #0
 8015e18:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8015e1a:	687b      	ldr	r3, [r7, #4]
 8015e1c:	2b00      	cmp	r3, #0
 8015e1e:	d003      	beq.n	8015e28 <LoRaMacParserJoinAccept+0x16>
 8015e20:	687b      	ldr	r3, [r7, #4]
 8015e22:	681b      	ldr	r3, [r3, #0]
 8015e24:	2b00      	cmp	r3, #0
 8015e26:	d101      	bne.n	8015e2c <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8015e28:	2302      	movs	r3, #2
 8015e2a:	e0b9      	b.n	8015fa0 <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 8015e2c:	2300      	movs	r3, #0
 8015e2e:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8015e30:	687b      	ldr	r3, [r7, #4]
 8015e32:	681a      	ldr	r2, [r3, #0]
 8015e34:	89fb      	ldrh	r3, [r7, #14]
 8015e36:	1c59      	adds	r1, r3, #1
 8015e38:	81f9      	strh	r1, [r7, #14]
 8015e3a:	4413      	add	r3, r2
 8015e3c:	781a      	ldrb	r2, [r3, #0]
 8015e3e:	687b      	ldr	r3, [r7, #4]
 8015e40:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8015e42:	687b      	ldr	r3, [r7, #4]
 8015e44:	1d98      	adds	r0, r3, #6
 8015e46:	687b      	ldr	r3, [r7, #4]
 8015e48:	681a      	ldr	r2, [r3, #0]
 8015e4a:	89fb      	ldrh	r3, [r7, #14]
 8015e4c:	4413      	add	r3, r2
 8015e4e:	2203      	movs	r2, #3
 8015e50:	4619      	mov	r1, r3
 8015e52:	f004 f92c 	bl	801a0ae <memcpy1>
    bufItr = bufItr + 3;
 8015e56:	89fb      	ldrh	r3, [r7, #14]
 8015e58:	3303      	adds	r3, #3
 8015e5a:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 8015e5c:	687b      	ldr	r3, [r7, #4]
 8015e5e:	f103 0009 	add.w	r0, r3, #9
 8015e62:	687b      	ldr	r3, [r7, #4]
 8015e64:	681a      	ldr	r2, [r3, #0]
 8015e66:	89fb      	ldrh	r3, [r7, #14]
 8015e68:	4413      	add	r3, r2
 8015e6a:	2203      	movs	r2, #3
 8015e6c:	4619      	mov	r1, r3
 8015e6e:	f004 f91e 	bl	801a0ae <memcpy1>
    bufItr = bufItr + 3;
 8015e72:	89fb      	ldrh	r3, [r7, #14]
 8015e74:	3303      	adds	r3, #3
 8015e76:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8015e78:	687b      	ldr	r3, [r7, #4]
 8015e7a:	681a      	ldr	r2, [r3, #0]
 8015e7c:	89fb      	ldrh	r3, [r7, #14]
 8015e7e:	1c59      	adds	r1, r3, #1
 8015e80:	81f9      	strh	r1, [r7, #14]
 8015e82:	4413      	add	r3, r2
 8015e84:	781b      	ldrb	r3, [r3, #0]
 8015e86:	461a      	mov	r2, r3
 8015e88:	687b      	ldr	r3, [r7, #4]
 8015e8a:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8015e8c:	687b      	ldr	r3, [r7, #4]
 8015e8e:	681a      	ldr	r2, [r3, #0]
 8015e90:	89fb      	ldrh	r3, [r7, #14]
 8015e92:	1c59      	adds	r1, r3, #1
 8015e94:	81f9      	strh	r1, [r7, #14]
 8015e96:	4413      	add	r3, r2
 8015e98:	781b      	ldrb	r3, [r3, #0]
 8015e9a:	021a      	lsls	r2, r3, #8
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	68db      	ldr	r3, [r3, #12]
 8015ea0:	431a      	orrs	r2, r3
 8015ea2:	687b      	ldr	r3, [r7, #4]
 8015ea4:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8015ea6:	687b      	ldr	r3, [r7, #4]
 8015ea8:	681a      	ldr	r2, [r3, #0]
 8015eaa:	89fb      	ldrh	r3, [r7, #14]
 8015eac:	1c59      	adds	r1, r3, #1
 8015eae:	81f9      	strh	r1, [r7, #14]
 8015eb0:	4413      	add	r3, r2
 8015eb2:	781b      	ldrb	r3, [r3, #0]
 8015eb4:	041a      	lsls	r2, r3, #16
 8015eb6:	687b      	ldr	r3, [r7, #4]
 8015eb8:	68db      	ldr	r3, [r3, #12]
 8015eba:	431a      	orrs	r2, r3
 8015ebc:	687b      	ldr	r3, [r7, #4]
 8015ebe:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8015ec0:	687b      	ldr	r3, [r7, #4]
 8015ec2:	681a      	ldr	r2, [r3, #0]
 8015ec4:	89fb      	ldrh	r3, [r7, #14]
 8015ec6:	1c59      	adds	r1, r3, #1
 8015ec8:	81f9      	strh	r1, [r7, #14]
 8015eca:	4413      	add	r3, r2
 8015ecc:	781b      	ldrb	r3, [r3, #0]
 8015ece:	061a      	lsls	r2, r3, #24
 8015ed0:	687b      	ldr	r3, [r7, #4]
 8015ed2:	68db      	ldr	r3, [r3, #12]
 8015ed4:	431a      	orrs	r2, r3
 8015ed6:	687b      	ldr	r3, [r7, #4]
 8015ed8:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8015eda:	687b      	ldr	r3, [r7, #4]
 8015edc:	681a      	ldr	r2, [r3, #0]
 8015ede:	89fb      	ldrh	r3, [r7, #14]
 8015ee0:	1c59      	adds	r1, r3, #1
 8015ee2:	81f9      	strh	r1, [r7, #14]
 8015ee4:	4413      	add	r3, r2
 8015ee6:	781a      	ldrb	r2, [r3, #0]
 8015ee8:	687b      	ldr	r3, [r7, #4]
 8015eea:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8015eec:	687b      	ldr	r3, [r7, #4]
 8015eee:	681a      	ldr	r2, [r3, #0]
 8015ef0:	89fb      	ldrh	r3, [r7, #14]
 8015ef2:	1c59      	adds	r1, r3, #1
 8015ef4:	81f9      	strh	r1, [r7, #14]
 8015ef6:	4413      	add	r3, r2
 8015ef8:	781a      	ldrb	r2, [r3, #0]
 8015efa:	687b      	ldr	r3, [r7, #4]
 8015efc:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 8015efe:	687b      	ldr	r3, [r7, #4]
 8015f00:	791b      	ldrb	r3, [r3, #4]
 8015f02:	1f1a      	subs	r2, r3, #4
 8015f04:	89fb      	ldrh	r3, [r7, #14]
 8015f06:	1ad3      	subs	r3, r2, r3
 8015f08:	2b10      	cmp	r3, #16
 8015f0a:	d10e      	bne.n	8015f2a <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 8015f0c:	687b      	ldr	r3, [r7, #4]
 8015f0e:	f103 0012 	add.w	r0, r3, #18
 8015f12:	687b      	ldr	r3, [r7, #4]
 8015f14:	681a      	ldr	r2, [r3, #0]
 8015f16:	89fb      	ldrh	r3, [r7, #14]
 8015f18:	4413      	add	r3, r2
 8015f1a:	2210      	movs	r2, #16
 8015f1c:	4619      	mov	r1, r3
 8015f1e:	f004 f8c6 	bl	801a0ae <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 8015f22:	89fb      	ldrh	r3, [r7, #14]
 8015f24:	3310      	adds	r3, #16
 8015f26:	81fb      	strh	r3, [r7, #14]
 8015f28:	e008      	b.n	8015f3c <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8015f2a:	687b      	ldr	r3, [r7, #4]
 8015f2c:	791b      	ldrb	r3, [r3, #4]
 8015f2e:	1f1a      	subs	r2, r3, #4
 8015f30:	89fb      	ldrh	r3, [r7, #14]
 8015f32:	1ad3      	subs	r3, r2, r3
 8015f34:	2b00      	cmp	r3, #0
 8015f36:	dd01      	ble.n	8015f3c <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 8015f38:	2301      	movs	r3, #1
 8015f3a:	e031      	b.n	8015fa0 <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8015f3c:	687b      	ldr	r3, [r7, #4]
 8015f3e:	681a      	ldr	r2, [r3, #0]
 8015f40:	89fb      	ldrh	r3, [r7, #14]
 8015f42:	1c59      	adds	r1, r3, #1
 8015f44:	81f9      	strh	r1, [r7, #14]
 8015f46:	4413      	add	r3, r2
 8015f48:	781b      	ldrb	r3, [r3, #0]
 8015f4a:	461a      	mov	r2, r3
 8015f4c:	687b      	ldr	r3, [r7, #4]
 8015f4e:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8015f50:	687b      	ldr	r3, [r7, #4]
 8015f52:	681a      	ldr	r2, [r3, #0]
 8015f54:	89fb      	ldrh	r3, [r7, #14]
 8015f56:	1c59      	adds	r1, r3, #1
 8015f58:	81f9      	strh	r1, [r7, #14]
 8015f5a:	4413      	add	r3, r2
 8015f5c:	781b      	ldrb	r3, [r3, #0]
 8015f5e:	021a      	lsls	r2, r3, #8
 8015f60:	687b      	ldr	r3, [r7, #4]
 8015f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015f64:	431a      	orrs	r2, r3
 8015f66:	687b      	ldr	r3, [r7, #4]
 8015f68:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8015f6a:	687b      	ldr	r3, [r7, #4]
 8015f6c:	681a      	ldr	r2, [r3, #0]
 8015f6e:	89fb      	ldrh	r3, [r7, #14]
 8015f70:	1c59      	adds	r1, r3, #1
 8015f72:	81f9      	strh	r1, [r7, #14]
 8015f74:	4413      	add	r3, r2
 8015f76:	781b      	ldrb	r3, [r3, #0]
 8015f78:	041a      	lsls	r2, r3, #16
 8015f7a:	687b      	ldr	r3, [r7, #4]
 8015f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015f7e:	431a      	orrs	r2, r3
 8015f80:	687b      	ldr	r3, [r7, #4]
 8015f82:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8015f84:	687b      	ldr	r3, [r7, #4]
 8015f86:	681a      	ldr	r2, [r3, #0]
 8015f88:	89fb      	ldrh	r3, [r7, #14]
 8015f8a:	1c59      	adds	r1, r3, #1
 8015f8c:	81f9      	strh	r1, [r7, #14]
 8015f8e:	4413      	add	r3, r2
 8015f90:	781b      	ldrb	r3, [r3, #0]
 8015f92:	061a      	lsls	r2, r3, #24
 8015f94:	687b      	ldr	r3, [r7, #4]
 8015f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015f98:	431a      	orrs	r2, r3
 8015f9a:	687b      	ldr	r3, [r7, #4]
 8015f9c:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 8015f9e:	2300      	movs	r3, #0
}
 8015fa0:	4618      	mov	r0, r3
 8015fa2:	3710      	adds	r7, #16
 8015fa4:	46bd      	mov	sp, r7
 8015fa6:	bd80      	pop	{r7, pc}

08015fa8 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 8015fa8:	b580      	push	{r7, lr}
 8015faa:	b084      	sub	sp, #16
 8015fac:	af00      	add	r7, sp, #0
 8015fae:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8015fb0:	687b      	ldr	r3, [r7, #4]
 8015fb2:	2b00      	cmp	r3, #0
 8015fb4:	d003      	beq.n	8015fbe <LoRaMacParserData+0x16>
 8015fb6:	687b      	ldr	r3, [r7, #4]
 8015fb8:	681b      	ldr	r3, [r3, #0]
 8015fba:	2b00      	cmp	r3, #0
 8015fbc:	d101      	bne.n	8015fc2 <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8015fbe:	2302      	movs	r3, #2
 8015fc0:	e0e2      	b.n	8016188 <LoRaMacParserData+0x1e0>
    }

    uint16_t bufItr = 0;
 8015fc2:	2300      	movs	r3, #0
 8015fc4:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8015fc6:	687b      	ldr	r3, [r7, #4]
 8015fc8:	681a      	ldr	r2, [r3, #0]
 8015fca:	89fb      	ldrh	r3, [r7, #14]
 8015fcc:	1c59      	adds	r1, r3, #1
 8015fce:	81f9      	strh	r1, [r7, #14]
 8015fd0:	4413      	add	r3, r2
 8015fd2:	781a      	ldrb	r2, [r3, #0]
 8015fd4:	687b      	ldr	r3, [r7, #4]
 8015fd6:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8015fd8:	687b      	ldr	r3, [r7, #4]
 8015fda:	681a      	ldr	r2, [r3, #0]
 8015fdc:	89fb      	ldrh	r3, [r7, #14]
 8015fde:	1c59      	adds	r1, r3, #1
 8015fe0:	81f9      	strh	r1, [r7, #14]
 8015fe2:	4413      	add	r3, r2
 8015fe4:	781b      	ldrb	r3, [r3, #0]
 8015fe6:	461a      	mov	r2, r3
 8015fe8:	687b      	ldr	r3, [r7, #4]
 8015fea:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8015fec:	687b      	ldr	r3, [r7, #4]
 8015fee:	681a      	ldr	r2, [r3, #0]
 8015ff0:	89fb      	ldrh	r3, [r7, #14]
 8015ff2:	1c59      	adds	r1, r3, #1
 8015ff4:	81f9      	strh	r1, [r7, #14]
 8015ff6:	4413      	add	r3, r2
 8015ff8:	781b      	ldrb	r3, [r3, #0]
 8015ffa:	021a      	lsls	r2, r3, #8
 8015ffc:	687b      	ldr	r3, [r7, #4]
 8015ffe:	689b      	ldr	r3, [r3, #8]
 8016000:	431a      	orrs	r2, r3
 8016002:	687b      	ldr	r3, [r7, #4]
 8016004:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8016006:	687b      	ldr	r3, [r7, #4]
 8016008:	681a      	ldr	r2, [r3, #0]
 801600a:	89fb      	ldrh	r3, [r7, #14]
 801600c:	1c59      	adds	r1, r3, #1
 801600e:	81f9      	strh	r1, [r7, #14]
 8016010:	4413      	add	r3, r2
 8016012:	781b      	ldrb	r3, [r3, #0]
 8016014:	041a      	lsls	r2, r3, #16
 8016016:	687b      	ldr	r3, [r7, #4]
 8016018:	689b      	ldr	r3, [r3, #8]
 801601a:	431a      	orrs	r2, r3
 801601c:	687b      	ldr	r3, [r7, #4]
 801601e:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8016020:	687b      	ldr	r3, [r7, #4]
 8016022:	681a      	ldr	r2, [r3, #0]
 8016024:	89fb      	ldrh	r3, [r7, #14]
 8016026:	1c59      	adds	r1, r3, #1
 8016028:	81f9      	strh	r1, [r7, #14]
 801602a:	4413      	add	r3, r2
 801602c:	781b      	ldrb	r3, [r3, #0]
 801602e:	061a      	lsls	r2, r3, #24
 8016030:	687b      	ldr	r3, [r7, #4]
 8016032:	689b      	ldr	r3, [r3, #8]
 8016034:	431a      	orrs	r2, r3
 8016036:	687b      	ldr	r3, [r7, #4]
 8016038:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 801603a:	687b      	ldr	r3, [r7, #4]
 801603c:	681a      	ldr	r2, [r3, #0]
 801603e:	89fb      	ldrh	r3, [r7, #14]
 8016040:	1c59      	adds	r1, r3, #1
 8016042:	81f9      	strh	r1, [r7, #14]
 8016044:	4413      	add	r3, r2
 8016046:	781a      	ldrb	r2, [r3, #0]
 8016048:	687b      	ldr	r3, [r7, #4]
 801604a:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 801604c:	687b      	ldr	r3, [r7, #4]
 801604e:	681a      	ldr	r2, [r3, #0]
 8016050:	89fb      	ldrh	r3, [r7, #14]
 8016052:	1c59      	adds	r1, r3, #1
 8016054:	81f9      	strh	r1, [r7, #14]
 8016056:	4413      	add	r3, r2
 8016058:	781b      	ldrb	r3, [r3, #0]
 801605a:	b29a      	uxth	r2, r3
 801605c:	687b      	ldr	r3, [r7, #4]
 801605e:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8016060:	687b      	ldr	r3, [r7, #4]
 8016062:	681a      	ldr	r2, [r3, #0]
 8016064:	89fb      	ldrh	r3, [r7, #14]
 8016066:	1c59      	adds	r1, r3, #1
 8016068:	81f9      	strh	r1, [r7, #14]
 801606a:	4413      	add	r3, r2
 801606c:	781b      	ldrb	r3, [r3, #0]
 801606e:	0219      	lsls	r1, r3, #8
 8016070:	687b      	ldr	r3, [r7, #4]
 8016072:	89db      	ldrh	r3, [r3, #14]
 8016074:	b21a      	sxth	r2, r3
 8016076:	b20b      	sxth	r3, r1
 8016078:	4313      	orrs	r3, r2
 801607a:	b21b      	sxth	r3, r3
 801607c:	b29a      	uxth	r2, r3
 801607e:	687b      	ldr	r3, [r7, #4]
 8016080:	81da      	strh	r2, [r3, #14]

    memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8016082:	687b      	ldr	r3, [r7, #4]
 8016084:	f103 0010 	add.w	r0, r3, #16
 8016088:	687b      	ldr	r3, [r7, #4]
 801608a:	681a      	ldr	r2, [r3, #0]
 801608c:	89fb      	ldrh	r3, [r7, #14]
 801608e:	18d1      	adds	r1, r2, r3
 8016090:	687b      	ldr	r3, [r7, #4]
 8016092:	7b1b      	ldrb	r3, [r3, #12]
 8016094:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8016098:	b2db      	uxtb	r3, r3
 801609a:	b29b      	uxth	r3, r3
 801609c:	461a      	mov	r2, r3
 801609e:	f004 f806 	bl	801a0ae <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80160a2:	687b      	ldr	r3, [r7, #4]
 80160a4:	7b1b      	ldrb	r3, [r3, #12]
 80160a6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80160aa:	b2db      	uxtb	r3, r3
 80160ac:	b29a      	uxth	r2, r3
 80160ae:	89fb      	ldrh	r3, [r7, #14]
 80160b0:	4413      	add	r3, r2
 80160b2:	81fb      	strh	r3, [r7, #14]

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 80160b4:	687b      	ldr	r3, [r7, #4]
 80160b6:	2200      	movs	r2, #0
 80160b8:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 80160bc:	687b      	ldr	r3, [r7, #4]
 80160be:	2200      	movs	r2, #0
 80160c0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 80160c4:	687b      	ldr	r3, [r7, #4]
 80160c6:	791b      	ldrb	r3, [r3, #4]
 80160c8:	461a      	mov	r2, r3
 80160ca:	89fb      	ldrh	r3, [r7, #14]
 80160cc:	1ad3      	subs	r3, r2, r3
 80160ce:	2b04      	cmp	r3, #4
 80160d0:	dd28      	ble.n	8016124 <LoRaMacParserData+0x17c>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 80160d2:	687b      	ldr	r3, [r7, #4]
 80160d4:	681a      	ldr	r2, [r3, #0]
 80160d6:	89fb      	ldrh	r3, [r7, #14]
 80160d8:	1c59      	adds	r1, r3, #1
 80160da:	81f9      	strh	r1, [r7, #14]
 80160dc:	4413      	add	r3, r2
 80160de:	781a      	ldrb	r2, [r3, #0]
 80160e0:	687b      	ldr	r3, [r7, #4]
 80160e2:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 80160e6:	687b      	ldr	r3, [r7, #4]
 80160e8:	791a      	ldrb	r2, [r3, #4]
 80160ea:	89fb      	ldrh	r3, [r7, #14]
 80160ec:	b2db      	uxtb	r3, r3
 80160ee:	1ad3      	subs	r3, r2, r3
 80160f0:	b2db      	uxtb	r3, r3
 80160f2:	3b04      	subs	r3, #4
 80160f4:	b2da      	uxtb	r2, r3
 80160f6:	687b      	ldr	r3, [r7, #4]
 80160f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 80160fc:	687b      	ldr	r3, [r7, #4]
 80160fe:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8016100:	687b      	ldr	r3, [r7, #4]
 8016102:	681a      	ldr	r2, [r3, #0]
 8016104:	89fb      	ldrh	r3, [r7, #14]
 8016106:	18d1      	adds	r1, r2, r3
 8016108:	687b      	ldr	r3, [r7, #4]
 801610a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801610e:	b29b      	uxth	r3, r3
 8016110:	461a      	mov	r2, r3
 8016112:	f003 ffcc 	bl	801a0ae <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 8016116:	687b      	ldr	r3, [r7, #4]
 8016118:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801611c:	b29a      	uxth	r2, r3
 801611e:	89fb      	ldrh	r3, [r7, #14]
 8016120:	4413      	add	r3, r2
 8016122:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8016124:	687b      	ldr	r3, [r7, #4]
 8016126:	681a      	ldr	r2, [r3, #0]
 8016128:	687b      	ldr	r3, [r7, #4]
 801612a:	791b      	ldrb	r3, [r3, #4]
 801612c:	3b04      	subs	r3, #4
 801612e:	4413      	add	r3, r2
 8016130:	781b      	ldrb	r3, [r3, #0]
 8016132:	461a      	mov	r2, r3
 8016134:	687b      	ldr	r3, [r7, #4]
 8016136:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8016138:	687b      	ldr	r3, [r7, #4]
 801613a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801613c:	687b      	ldr	r3, [r7, #4]
 801613e:	6819      	ldr	r1, [r3, #0]
 8016140:	687b      	ldr	r3, [r7, #4]
 8016142:	791b      	ldrb	r3, [r3, #4]
 8016144:	3b03      	subs	r3, #3
 8016146:	440b      	add	r3, r1
 8016148:	781b      	ldrb	r3, [r3, #0]
 801614a:	021b      	lsls	r3, r3, #8
 801614c:	431a      	orrs	r2, r3
 801614e:	687b      	ldr	r3, [r7, #4]
 8016150:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8016152:	687b      	ldr	r3, [r7, #4]
 8016154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016156:	687b      	ldr	r3, [r7, #4]
 8016158:	6819      	ldr	r1, [r3, #0]
 801615a:	687b      	ldr	r3, [r7, #4]
 801615c:	791b      	ldrb	r3, [r3, #4]
 801615e:	3b02      	subs	r3, #2
 8016160:	440b      	add	r3, r1
 8016162:	781b      	ldrb	r3, [r3, #0]
 8016164:	041b      	lsls	r3, r3, #16
 8016166:	431a      	orrs	r2, r3
 8016168:	687b      	ldr	r3, [r7, #4]
 801616a:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 801616c:	687b      	ldr	r3, [r7, #4]
 801616e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016170:	687b      	ldr	r3, [r7, #4]
 8016172:	6819      	ldr	r1, [r3, #0]
 8016174:	687b      	ldr	r3, [r7, #4]
 8016176:	791b      	ldrb	r3, [r3, #4]
 8016178:	3b01      	subs	r3, #1
 801617a:	440b      	add	r3, r1
 801617c:	781b      	ldrb	r3, [r3, #0]
 801617e:	061b      	lsls	r3, r3, #24
 8016180:	431a      	orrs	r2, r3
 8016182:	687b      	ldr	r3, [r7, #4]
 8016184:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 8016186:	2300      	movs	r3, #0
}
 8016188:	4618      	mov	r0, r3
 801618a:	3710      	adds	r7, #16
 801618c:	46bd      	mov	sp, r7
 801618e:	bd80      	pop	{r7, pc}

08016190 <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8016190:	b580      	push	{r7, lr}
 8016192:	b084      	sub	sp, #16
 8016194:	af00      	add	r7, sp, #0
 8016196:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8016198:	687b      	ldr	r3, [r7, #4]
 801619a:	2b00      	cmp	r3, #0
 801619c:	d003      	beq.n	80161a6 <LoRaMacSerializerJoinRequest+0x16>
 801619e:	687b      	ldr	r3, [r7, #4]
 80161a0:	681b      	ldr	r3, [r3, #0]
 80161a2:	2b00      	cmp	r3, #0
 80161a4:	d101      	bne.n	80161aa <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 80161a6:	2301      	movs	r3, #1
 80161a8:	e070      	b.n	801628c <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 80161aa:	2300      	movs	r3, #0
 80161ac:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 80161ae:	687b      	ldr	r3, [r7, #4]
 80161b0:	791b      	ldrb	r3, [r3, #4]
 80161b2:	2b16      	cmp	r3, #22
 80161b4:	d801      	bhi.n	80161ba <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 80161b6:	2302      	movs	r3, #2
 80161b8:	e068      	b.n	801628c <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 80161ba:	687b      	ldr	r3, [r7, #4]
 80161bc:	681a      	ldr	r2, [r3, #0]
 80161be:	89fb      	ldrh	r3, [r7, #14]
 80161c0:	1c59      	adds	r1, r3, #1
 80161c2:	81f9      	strh	r1, [r7, #14]
 80161c4:	4413      	add	r3, r2
 80161c6:	687a      	ldr	r2, [r7, #4]
 80161c8:	7952      	ldrb	r2, [r2, #5]
 80161ca:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 80161cc:	687b      	ldr	r3, [r7, #4]
 80161ce:	681a      	ldr	r2, [r3, #0]
 80161d0:	89fb      	ldrh	r3, [r7, #14]
 80161d2:	18d0      	adds	r0, r2, r3
 80161d4:	687b      	ldr	r3, [r7, #4]
 80161d6:	3306      	adds	r3, #6
 80161d8:	2208      	movs	r2, #8
 80161da:	4619      	mov	r1, r3
 80161dc:	f003 ff82 	bl	801a0e4 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 80161e0:	89fb      	ldrh	r3, [r7, #14]
 80161e2:	3308      	adds	r3, #8
 80161e4:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 80161e6:	687b      	ldr	r3, [r7, #4]
 80161e8:	681a      	ldr	r2, [r3, #0]
 80161ea:	89fb      	ldrh	r3, [r7, #14]
 80161ec:	18d0      	adds	r0, r2, r3
 80161ee:	687b      	ldr	r3, [r7, #4]
 80161f0:	330e      	adds	r3, #14
 80161f2:	2208      	movs	r2, #8
 80161f4:	4619      	mov	r1, r3
 80161f6:	f003 ff75 	bl	801a0e4 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 80161fa:	89fb      	ldrh	r3, [r7, #14]
 80161fc:	3308      	adds	r3, #8
 80161fe:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 8016200:	687b      	ldr	r3, [r7, #4]
 8016202:	8ad9      	ldrh	r1, [r3, #22]
 8016204:	687b      	ldr	r3, [r7, #4]
 8016206:	681a      	ldr	r2, [r3, #0]
 8016208:	89fb      	ldrh	r3, [r7, #14]
 801620a:	1c58      	adds	r0, r3, #1
 801620c:	81f8      	strh	r0, [r7, #14]
 801620e:	4413      	add	r3, r2
 8016210:	b2ca      	uxtb	r2, r1
 8016212:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8016214:	687b      	ldr	r3, [r7, #4]
 8016216:	8adb      	ldrh	r3, [r3, #22]
 8016218:	0a1b      	lsrs	r3, r3, #8
 801621a:	b299      	uxth	r1, r3
 801621c:	687b      	ldr	r3, [r7, #4]
 801621e:	681a      	ldr	r2, [r3, #0]
 8016220:	89fb      	ldrh	r3, [r7, #14]
 8016222:	1c58      	adds	r0, r3, #1
 8016224:	81f8      	strh	r0, [r7, #14]
 8016226:	4413      	add	r3, r2
 8016228:	b2ca      	uxtb	r2, r1
 801622a:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 801622c:	687b      	ldr	r3, [r7, #4]
 801622e:	6999      	ldr	r1, [r3, #24]
 8016230:	687b      	ldr	r3, [r7, #4]
 8016232:	681a      	ldr	r2, [r3, #0]
 8016234:	89fb      	ldrh	r3, [r7, #14]
 8016236:	1c58      	adds	r0, r3, #1
 8016238:	81f8      	strh	r0, [r7, #14]
 801623a:	4413      	add	r3, r2
 801623c:	b2ca      	uxtb	r2, r1
 801623e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8016240:	687b      	ldr	r3, [r7, #4]
 8016242:	699b      	ldr	r3, [r3, #24]
 8016244:	0a19      	lsrs	r1, r3, #8
 8016246:	687b      	ldr	r3, [r7, #4]
 8016248:	681a      	ldr	r2, [r3, #0]
 801624a:	89fb      	ldrh	r3, [r7, #14]
 801624c:	1c58      	adds	r0, r3, #1
 801624e:	81f8      	strh	r0, [r7, #14]
 8016250:	4413      	add	r3, r2
 8016252:	b2ca      	uxtb	r2, r1
 8016254:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8016256:	687b      	ldr	r3, [r7, #4]
 8016258:	699b      	ldr	r3, [r3, #24]
 801625a:	0c19      	lsrs	r1, r3, #16
 801625c:	687b      	ldr	r3, [r7, #4]
 801625e:	681a      	ldr	r2, [r3, #0]
 8016260:	89fb      	ldrh	r3, [r7, #14]
 8016262:	1c58      	adds	r0, r3, #1
 8016264:	81f8      	strh	r0, [r7, #14]
 8016266:	4413      	add	r3, r2
 8016268:	b2ca      	uxtb	r2, r1
 801626a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 801626c:	687b      	ldr	r3, [r7, #4]
 801626e:	699b      	ldr	r3, [r3, #24]
 8016270:	0e19      	lsrs	r1, r3, #24
 8016272:	687b      	ldr	r3, [r7, #4]
 8016274:	681a      	ldr	r2, [r3, #0]
 8016276:	89fb      	ldrh	r3, [r7, #14]
 8016278:	1c58      	adds	r0, r3, #1
 801627a:	81f8      	strh	r0, [r7, #14]
 801627c:	4413      	add	r3, r2
 801627e:	b2ca      	uxtb	r2, r1
 8016280:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8016282:	89fb      	ldrh	r3, [r7, #14]
 8016284:	b2da      	uxtb	r2, r3
 8016286:	687b      	ldr	r3, [r7, #4]
 8016288:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 801628a:	2300      	movs	r3, #0
}
 801628c:	4618      	mov	r0, r3
 801628e:	3710      	adds	r7, #16
 8016290:	46bd      	mov	sp, r7
 8016292:	bd80      	pop	{r7, pc}

08016294 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 8016294:	b580      	push	{r7, lr}
 8016296:	b084      	sub	sp, #16
 8016298:	af00      	add	r7, sp, #0
 801629a:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 801629c:	687b      	ldr	r3, [r7, #4]
 801629e:	2b00      	cmp	r3, #0
 80162a0:	d003      	beq.n	80162aa <LoRaMacSerializerData+0x16>
 80162a2:	687b      	ldr	r3, [r7, #4]
 80162a4:	681b      	ldr	r3, [r3, #0]
 80162a6:	2b00      	cmp	r3, #0
 80162a8:	d101      	bne.n	80162ae <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 80162aa:	2301      	movs	r3, #1
 80162ac:	e0e5      	b.n	801647a <LoRaMacSerializerData+0x1e6>
    }

    uint16_t bufItr = 0;
 80162ae:	2300      	movs	r3, #0
 80162b0:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 80162b2:	2308      	movs	r3, #8
 80162b4:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80162b6:	687b      	ldr	r3, [r7, #4]
 80162b8:	7b1b      	ldrb	r3, [r3, #12]
 80162ba:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80162be:	b2db      	uxtb	r3, r3
 80162c0:	b29a      	uxth	r2, r3
 80162c2:	89bb      	ldrh	r3, [r7, #12]
 80162c4:	4413      	add	r3, r2
 80162c6:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 80162c8:	687b      	ldr	r3, [r7, #4]
 80162ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80162ce:	2b00      	cmp	r3, #0
 80162d0:	d002      	beq.n	80162d8 <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 80162d2:	89bb      	ldrh	r3, [r7, #12]
 80162d4:	3301      	adds	r3, #1
 80162d6:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 80162d8:	687b      	ldr	r3, [r7, #4]
 80162da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80162de:	b29a      	uxth	r2, r3
 80162e0:	89bb      	ldrh	r3, [r7, #12]
 80162e2:	4413      	add	r3, r2
 80162e4:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 80162e6:	89bb      	ldrh	r3, [r7, #12]
 80162e8:	3304      	adds	r3, #4
 80162ea:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 80162ec:	687b      	ldr	r3, [r7, #4]
 80162ee:	791b      	ldrb	r3, [r3, #4]
 80162f0:	b29b      	uxth	r3, r3
 80162f2:	89ba      	ldrh	r2, [r7, #12]
 80162f4:	429a      	cmp	r2, r3
 80162f6:	d901      	bls.n	80162fc <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 80162f8:	2302      	movs	r3, #2
 80162fa:	e0be      	b.n	801647a <LoRaMacSerializerData+0x1e6>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 80162fc:	687b      	ldr	r3, [r7, #4]
 80162fe:	681a      	ldr	r2, [r3, #0]
 8016300:	89fb      	ldrh	r3, [r7, #14]
 8016302:	1c59      	adds	r1, r3, #1
 8016304:	81f9      	strh	r1, [r7, #14]
 8016306:	4413      	add	r3, r2
 8016308:	687a      	ldr	r2, [r7, #4]
 801630a:	7952      	ldrb	r2, [r2, #5]
 801630c:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 801630e:	687b      	ldr	r3, [r7, #4]
 8016310:	6899      	ldr	r1, [r3, #8]
 8016312:	687b      	ldr	r3, [r7, #4]
 8016314:	681a      	ldr	r2, [r3, #0]
 8016316:	89fb      	ldrh	r3, [r7, #14]
 8016318:	1c58      	adds	r0, r3, #1
 801631a:	81f8      	strh	r0, [r7, #14]
 801631c:	4413      	add	r3, r2
 801631e:	b2ca      	uxtb	r2, r1
 8016320:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 8016322:	687b      	ldr	r3, [r7, #4]
 8016324:	689b      	ldr	r3, [r3, #8]
 8016326:	0a19      	lsrs	r1, r3, #8
 8016328:	687b      	ldr	r3, [r7, #4]
 801632a:	681a      	ldr	r2, [r3, #0]
 801632c:	89fb      	ldrh	r3, [r7, #14]
 801632e:	1c58      	adds	r0, r3, #1
 8016330:	81f8      	strh	r0, [r7, #14]
 8016332:	4413      	add	r3, r2
 8016334:	b2ca      	uxtb	r2, r1
 8016336:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8016338:	687b      	ldr	r3, [r7, #4]
 801633a:	689b      	ldr	r3, [r3, #8]
 801633c:	0c19      	lsrs	r1, r3, #16
 801633e:	687b      	ldr	r3, [r7, #4]
 8016340:	681a      	ldr	r2, [r3, #0]
 8016342:	89fb      	ldrh	r3, [r7, #14]
 8016344:	1c58      	adds	r0, r3, #1
 8016346:	81f8      	strh	r0, [r7, #14]
 8016348:	4413      	add	r3, r2
 801634a:	b2ca      	uxtb	r2, r1
 801634c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 801634e:	687b      	ldr	r3, [r7, #4]
 8016350:	689b      	ldr	r3, [r3, #8]
 8016352:	0e19      	lsrs	r1, r3, #24
 8016354:	687b      	ldr	r3, [r7, #4]
 8016356:	681a      	ldr	r2, [r3, #0]
 8016358:	89fb      	ldrh	r3, [r7, #14]
 801635a:	1c58      	adds	r0, r3, #1
 801635c:	81f8      	strh	r0, [r7, #14]
 801635e:	4413      	add	r3, r2
 8016360:	b2ca      	uxtb	r2, r1
 8016362:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8016364:	687b      	ldr	r3, [r7, #4]
 8016366:	681a      	ldr	r2, [r3, #0]
 8016368:	89fb      	ldrh	r3, [r7, #14]
 801636a:	1c59      	adds	r1, r3, #1
 801636c:	81f9      	strh	r1, [r7, #14]
 801636e:	4413      	add	r3, r2
 8016370:	687a      	ldr	r2, [r7, #4]
 8016372:	7b12      	ldrb	r2, [r2, #12]
 8016374:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8016376:	687b      	ldr	r3, [r7, #4]
 8016378:	89d9      	ldrh	r1, [r3, #14]
 801637a:	687b      	ldr	r3, [r7, #4]
 801637c:	681a      	ldr	r2, [r3, #0]
 801637e:	89fb      	ldrh	r3, [r7, #14]
 8016380:	1c58      	adds	r0, r3, #1
 8016382:	81f8      	strh	r0, [r7, #14]
 8016384:	4413      	add	r3, r2
 8016386:	b2ca      	uxtb	r2, r1
 8016388:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 801638a:	687b      	ldr	r3, [r7, #4]
 801638c:	89db      	ldrh	r3, [r3, #14]
 801638e:	0a1b      	lsrs	r3, r3, #8
 8016390:	b299      	uxth	r1, r3
 8016392:	687b      	ldr	r3, [r7, #4]
 8016394:	681a      	ldr	r2, [r3, #0]
 8016396:	89fb      	ldrh	r3, [r7, #14]
 8016398:	1c58      	adds	r0, r3, #1
 801639a:	81f8      	strh	r0, [r7, #14]
 801639c:	4413      	add	r3, r2
 801639e:	b2ca      	uxtb	r2, r1
 80163a0:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 80163a2:	687b      	ldr	r3, [r7, #4]
 80163a4:	681a      	ldr	r2, [r3, #0]
 80163a6:	89fb      	ldrh	r3, [r7, #14]
 80163a8:	18d0      	adds	r0, r2, r3
 80163aa:	687b      	ldr	r3, [r7, #4]
 80163ac:	f103 0110 	add.w	r1, r3, #16
 80163b0:	687b      	ldr	r3, [r7, #4]
 80163b2:	7b1b      	ldrb	r3, [r3, #12]
 80163b4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80163b8:	b2db      	uxtb	r3, r3
 80163ba:	b29b      	uxth	r3, r3
 80163bc:	461a      	mov	r2, r3
 80163be:	f003 fe76 	bl	801a0ae <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80163c2:	687b      	ldr	r3, [r7, #4]
 80163c4:	7b1b      	ldrb	r3, [r3, #12]
 80163c6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80163ca:	b2db      	uxtb	r3, r3
 80163cc:	b29a      	uxth	r2, r3
 80163ce:	89fb      	ldrh	r3, [r7, #14]
 80163d0:	4413      	add	r3, r2
 80163d2:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 80163d4:	687b      	ldr	r3, [r7, #4]
 80163d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80163da:	2b00      	cmp	r3, #0
 80163dc:	d009      	beq.n	80163f2 <LoRaMacSerializerData+0x15e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 80163de:	687b      	ldr	r3, [r7, #4]
 80163e0:	681a      	ldr	r2, [r3, #0]
 80163e2:	89fb      	ldrh	r3, [r7, #14]
 80163e4:	1c59      	adds	r1, r3, #1
 80163e6:	81f9      	strh	r1, [r7, #14]
 80163e8:	4413      	add	r3, r2
 80163ea:	687a      	ldr	r2, [r7, #4]
 80163ec:	f892 2020 	ldrb.w	r2, [r2, #32]
 80163f0:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 80163f2:	687b      	ldr	r3, [r7, #4]
 80163f4:	681a      	ldr	r2, [r3, #0]
 80163f6:	89fb      	ldrh	r3, [r7, #14]
 80163f8:	18d0      	adds	r0, r2, r3
 80163fa:	687b      	ldr	r3, [r7, #4]
 80163fc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80163fe:	687b      	ldr	r3, [r7, #4]
 8016400:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016404:	b29b      	uxth	r3, r3
 8016406:	461a      	mov	r2, r3
 8016408:	f003 fe51 	bl	801a0ae <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 801640c:	687b      	ldr	r3, [r7, #4]
 801640e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016412:	b29a      	uxth	r2, r3
 8016414:	89fb      	ldrh	r3, [r7, #14]
 8016416:	4413      	add	r3, r2
 8016418:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 801641a:	687b      	ldr	r3, [r7, #4]
 801641c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801641e:	687b      	ldr	r3, [r7, #4]
 8016420:	681a      	ldr	r2, [r3, #0]
 8016422:	89fb      	ldrh	r3, [r7, #14]
 8016424:	1c58      	adds	r0, r3, #1
 8016426:	81f8      	strh	r0, [r7, #14]
 8016428:	4413      	add	r3, r2
 801642a:	b2ca      	uxtb	r2, r1
 801642c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 801642e:	687b      	ldr	r3, [r7, #4]
 8016430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016432:	0a19      	lsrs	r1, r3, #8
 8016434:	687b      	ldr	r3, [r7, #4]
 8016436:	681a      	ldr	r2, [r3, #0]
 8016438:	89fb      	ldrh	r3, [r7, #14]
 801643a:	1c58      	adds	r0, r3, #1
 801643c:	81f8      	strh	r0, [r7, #14]
 801643e:	4413      	add	r3, r2
 8016440:	b2ca      	uxtb	r2, r1
 8016442:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8016444:	687b      	ldr	r3, [r7, #4]
 8016446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016448:	0c19      	lsrs	r1, r3, #16
 801644a:	687b      	ldr	r3, [r7, #4]
 801644c:	681a      	ldr	r2, [r3, #0]
 801644e:	89fb      	ldrh	r3, [r7, #14]
 8016450:	1c58      	adds	r0, r3, #1
 8016452:	81f8      	strh	r0, [r7, #14]
 8016454:	4413      	add	r3, r2
 8016456:	b2ca      	uxtb	r2, r1
 8016458:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 801645a:	687b      	ldr	r3, [r7, #4]
 801645c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801645e:	0e19      	lsrs	r1, r3, #24
 8016460:	687b      	ldr	r3, [r7, #4]
 8016462:	681a      	ldr	r2, [r3, #0]
 8016464:	89fb      	ldrh	r3, [r7, #14]
 8016466:	1c58      	adds	r0, r3, #1
 8016468:	81f8      	strh	r0, [r7, #14]
 801646a:	4413      	add	r3, r2
 801646c:	b2ca      	uxtb	r2, r1
 801646e:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8016470:	89fb      	ldrh	r3, [r7, #14]
 8016472:	b2da      	uxtb	r2, r3
 8016474:	687b      	ldr	r3, [r7, #4]
 8016476:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8016478:	2300      	movs	r3, #0
}
 801647a:	4618      	mov	r0, r3
 801647c:	3710      	adds	r7, #16
 801647e:	46bd      	mov	sp, r7
 8016480:	bd80      	pop	{r7, pc}

08016482 <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 8016482:	b480      	push	{r7}
 8016484:	b083      	sub	sp, #12
 8016486:	af00      	add	r7, sp, #0
 8016488:	4603      	mov	r3, r0
 801648a:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801648c:	79fb      	ldrb	r3, [r7, #7]
 801648e:	2b05      	cmp	r3, #5
 8016490:	d002      	beq.n	8016498 <RegionIsActive+0x16>
 8016492:	2b08      	cmp	r3, #8
 8016494:	d002      	beq.n	801649c <RegionIsActive+0x1a>
 8016496:	e003      	b.n	80164a0 <RegionIsActive+0x1e>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 8016498:	2301      	movs	r3, #1
 801649a:	e002      	b.n	80164a2 <RegionIsActive+0x20>
        KR920_IS_ACTIVE( );
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
 801649c:	2301      	movs	r3, #1
 801649e:	e000      	b.n	80164a2 <RegionIsActive+0x20>
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 80164a0:	2300      	movs	r3, #0
        }
    }
}
 80164a2:	4618      	mov	r0, r3
 80164a4:	370c      	adds	r7, #12
 80164a6:	46bd      	mov	sp, r7
 80164a8:	bc80      	pop	{r7}
 80164aa:	4770      	bx	lr

080164ac <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 80164ac:	b580      	push	{r7, lr}
 80164ae:	b084      	sub	sp, #16
 80164b0:	af00      	add	r7, sp, #0
 80164b2:	4603      	mov	r3, r0
 80164b4:	6039      	str	r1, [r7, #0]
 80164b6:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 80164b8:	2300      	movs	r3, #0
 80164ba:	60bb      	str	r3, [r7, #8]
    switch( region )
 80164bc:	79fb      	ldrb	r3, [r7, #7]
 80164be:	2b05      	cmp	r3, #5
 80164c0:	d002      	beq.n	80164c8 <RegionGetPhyParam+0x1c>
 80164c2:	2b08      	cmp	r3, #8
 80164c4:	d006      	beq.n	80164d4 <RegionGetPhyParam+0x28>
 80164c6:	e00b      	b.n	80164e0 <RegionGetPhyParam+0x34>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 80164c8:	6838      	ldr	r0, [r7, #0]
 80164ca:	f001 fad1 	bl	8017a70 <RegionEU868GetPhyParam>
 80164ce:	4603      	mov	r3, r0
 80164d0:	60fb      	str	r3, [r7, #12]
 80164d2:	e007      	b.n	80164e4 <RegionGetPhyParam+0x38>
        KR920_GET_PHY_PARAM( );
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
 80164d4:	6838      	ldr	r0, [r7, #0]
 80164d6:	f002 fc51 	bl	8018d7c <RegionUS915GetPhyParam>
 80164da:	4603      	mov	r3, r0
 80164dc:	60fb      	str	r3, [r7, #12]
 80164de:	e001      	b.n	80164e4 <RegionGetPhyParam+0x38>
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 80164e0:	68bb      	ldr	r3, [r7, #8]
 80164e2:	60fb      	str	r3, [r7, #12]
        }
    }
}
 80164e4:	68fb      	ldr	r3, [r7, #12]
 80164e6:	4618      	mov	r0, r3
 80164e8:	3710      	adds	r7, #16
 80164ea:	46bd      	mov	sp, r7
 80164ec:	bd80      	pop	{r7, pc}

080164ee <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 80164ee:	b580      	push	{r7, lr}
 80164f0:	b082      	sub	sp, #8
 80164f2:	af00      	add	r7, sp, #0
 80164f4:	4603      	mov	r3, r0
 80164f6:	6039      	str	r1, [r7, #0]
 80164f8:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80164fa:	79fb      	ldrb	r3, [r7, #7]
 80164fc:	2b05      	cmp	r3, #5
 80164fe:	d002      	beq.n	8016506 <RegionSetBandTxDone+0x18>
 8016500:	2b08      	cmp	r3, #8
 8016502:	d004      	beq.n	801650e <RegionSetBandTxDone+0x20>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 8016504:	e006      	b.n	8016514 <RegionSetBandTxDone+0x26>
        EU868_SET_BAND_TX_DONE( );
 8016506:	6838      	ldr	r0, [r7, #0]
 8016508:	f001 fbf8 	bl	8017cfc <RegionEU868SetBandTxDone>
 801650c:	e002      	b.n	8016514 <RegionSetBandTxDone+0x26>
        US915_SET_BAND_TX_DONE( );
 801650e:	6838      	ldr	r0, [r7, #0]
 8016510:	f002 fd90 	bl	8019034 <RegionUS915SetBandTxDone>
        }
    }
}
 8016514:	3708      	adds	r7, #8
 8016516:	46bd      	mov	sp, r7
 8016518:	bd80      	pop	{r7, pc}

0801651a <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 801651a:	b580      	push	{r7, lr}
 801651c:	b082      	sub	sp, #8
 801651e:	af00      	add	r7, sp, #0
 8016520:	4603      	mov	r3, r0
 8016522:	6039      	str	r1, [r7, #0]
 8016524:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8016526:	79fb      	ldrb	r3, [r7, #7]
 8016528:	2b05      	cmp	r3, #5
 801652a:	d002      	beq.n	8016532 <RegionInitDefaults+0x18>
 801652c:	2b08      	cmp	r3, #8
 801652e:	d004      	beq.n	801653a <RegionInitDefaults+0x20>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 8016530:	e006      	b.n	8016540 <RegionInitDefaults+0x26>
        EU868_INIT_DEFAULTS( );
 8016532:	6838      	ldr	r0, [r7, #0]
 8016534:	f001 fc0e 	bl	8017d54 <RegionEU868InitDefaults>
 8016538:	e002      	b.n	8016540 <RegionInitDefaults+0x26>
        US915_INIT_DEFAULTS( );
 801653a:	6838      	ldr	r0, [r7, #0]
 801653c:	f002 fda6 	bl	801908c <RegionUS915InitDefaults>
        }
    }
}
 8016540:	bf00      	nop
 8016542:	3708      	adds	r7, #8
 8016544:	46bd      	mov	sp, r7
 8016546:	bd80      	pop	{r7, pc}

08016548 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8016548:	b580      	push	{r7, lr}
 801654a:	b082      	sub	sp, #8
 801654c:	af00      	add	r7, sp, #0
 801654e:	4603      	mov	r3, r0
 8016550:	6039      	str	r1, [r7, #0]
 8016552:	71fb      	strb	r3, [r7, #7]
 8016554:	4613      	mov	r3, r2
 8016556:	71bb      	strb	r3, [r7, #6]
    switch( region )
 8016558:	79fb      	ldrb	r3, [r7, #7]
 801655a:	2b05      	cmp	r3, #5
 801655c:	d002      	beq.n	8016564 <RegionVerify+0x1c>
 801655e:	2b08      	cmp	r3, #8
 8016560:	d007      	beq.n	8016572 <RegionVerify+0x2a>
 8016562:	e00d      	b.n	8016580 <RegionVerify+0x38>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 8016564:	79bb      	ldrb	r3, [r7, #6]
 8016566:	4619      	mov	r1, r3
 8016568:	6838      	ldr	r0, [r7, #0]
 801656a:	f001 fc91 	bl	8017e90 <RegionEU868Verify>
 801656e:	4603      	mov	r3, r0
 8016570:	e007      	b.n	8016582 <RegionVerify+0x3a>
        KR920_VERIFY( );
        IN865_VERIFY( );
        US915_VERIFY( );
 8016572:	79bb      	ldrb	r3, [r7, #6]
 8016574:	4619      	mov	r1, r3
 8016576:	6838      	ldr	r0, [r7, #0]
 8016578:	f002 feba 	bl	80192f0 <RegionUS915Verify>
 801657c:	4603      	mov	r3, r0
 801657e:	e000      	b.n	8016582 <RegionVerify+0x3a>
        RU864_VERIFY( );
        default:
        {
            return false;
 8016580:	2300      	movs	r3, #0
        }
    }
}
 8016582:	4618      	mov	r0, r3
 8016584:	3708      	adds	r7, #8
 8016586:	46bd      	mov	sp, r7
 8016588:	bd80      	pop	{r7, pc}

0801658a <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 801658a:	b580      	push	{r7, lr}
 801658c:	b082      	sub	sp, #8
 801658e:	af00      	add	r7, sp, #0
 8016590:	4603      	mov	r3, r0
 8016592:	6039      	str	r1, [r7, #0]
 8016594:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8016596:	79fb      	ldrb	r3, [r7, #7]
 8016598:	2b05      	cmp	r3, #5
 801659a:	d002      	beq.n	80165a2 <RegionApplyCFList+0x18>
 801659c:	2b08      	cmp	r3, #8
 801659e:	d004      	beq.n	80165aa <RegionApplyCFList+0x20>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 80165a0:	e006      	b.n	80165b0 <RegionApplyCFList+0x26>
        EU868_APPLY_CF_LIST( );
 80165a2:	6838      	ldr	r0, [r7, #0]
 80165a4:	f001 fcf0 	bl	8017f88 <RegionEU868ApplyCFList>
 80165a8:	e002      	b.n	80165b0 <RegionApplyCFList+0x26>
        US915_APPLY_CF_LIST( );
 80165aa:	6838      	ldr	r0, [r7, #0]
 80165ac:	f002 ff16 	bl	80193dc <RegionUS915ApplyCFList>
        }
    }
}
 80165b0:	bf00      	nop
 80165b2:	3708      	adds	r7, #8
 80165b4:	46bd      	mov	sp, r7
 80165b6:	bd80      	pop	{r7, pc}

080165b8 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 80165b8:	b580      	push	{r7, lr}
 80165ba:	b082      	sub	sp, #8
 80165bc:	af00      	add	r7, sp, #0
 80165be:	4603      	mov	r3, r0
 80165c0:	6039      	str	r1, [r7, #0]
 80165c2:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80165c4:	79fb      	ldrb	r3, [r7, #7]
 80165c6:	2b05      	cmp	r3, #5
 80165c8:	d002      	beq.n	80165d0 <RegionChanMaskSet+0x18>
 80165ca:	2b08      	cmp	r3, #8
 80165cc:	d005      	beq.n	80165da <RegionChanMaskSet+0x22>
 80165ce:	e009      	b.n	80165e4 <RegionChanMaskSet+0x2c>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 80165d0:	6838      	ldr	r0, [r7, #0]
 80165d2:	f001 fd4d 	bl	8018070 <RegionEU868ChanMaskSet>
 80165d6:	4603      	mov	r3, r0
 80165d8:	e005      	b.n	80165e6 <RegionChanMaskSet+0x2e>
        KR920_CHAN_MASK_SET( );
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
 80165da:	6838      	ldr	r0, [r7, #0]
 80165dc:	f002 ff72 	bl	80194c4 <RegionUS915ChanMaskSet>
 80165e0:	4603      	mov	r3, r0
 80165e2:	e000      	b.n	80165e6 <RegionChanMaskSet+0x2e>
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 80165e4:	2300      	movs	r3, #0
        }
    }
}
 80165e6:	4618      	mov	r0, r3
 80165e8:	3708      	adds	r7, #8
 80165ea:	46bd      	mov	sp, r7
 80165ec:	bd80      	pop	{r7, pc}

080165ee <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80165ee:	b580      	push	{r7, lr}
 80165f0:	b082      	sub	sp, #8
 80165f2:	af00      	add	r7, sp, #0
 80165f4:	603b      	str	r3, [r7, #0]
 80165f6:	4603      	mov	r3, r0
 80165f8:	71fb      	strb	r3, [r7, #7]
 80165fa:	460b      	mov	r3, r1
 80165fc:	71bb      	strb	r3, [r7, #6]
 80165fe:	4613      	mov	r3, r2
 8016600:	717b      	strb	r3, [r7, #5]
    switch( region )
 8016602:	79fb      	ldrb	r3, [r7, #7]
 8016604:	2b05      	cmp	r3, #5
 8016606:	d002      	beq.n	801660e <RegionComputeRxWindowParameters+0x20>
 8016608:	2b08      	cmp	r3, #8
 801660a:	d008      	beq.n	801661e <RegionComputeRxWindowParameters+0x30>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 801660c:	e00e      	b.n	801662c <RegionComputeRxWindowParameters+0x3e>
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 801660e:	7979      	ldrb	r1, [r7, #5]
 8016610:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8016614:	693b      	ldr	r3, [r7, #16]
 8016616:	683a      	ldr	r2, [r7, #0]
 8016618:	f001 fd54 	bl	80180c4 <RegionEU868ComputeRxWindowParameters>
 801661c:	e006      	b.n	801662c <RegionComputeRxWindowParameters+0x3e>
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
 801661e:	7979      	ldrb	r1, [r7, #5]
 8016620:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8016624:	693b      	ldr	r3, [r7, #16]
 8016626:	683a      	ldr	r2, [r7, #0]
 8016628:	f002 ffb4 	bl	8019594 <RegionUS915ComputeRxWindowParameters>
        }
    }
}
 801662c:	bf00      	nop
 801662e:	3708      	adds	r7, #8
 8016630:	46bd      	mov	sp, r7
 8016632:	bd80      	pop	{r7, pc}

08016634 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8016634:	b580      	push	{r7, lr}
 8016636:	b084      	sub	sp, #16
 8016638:	af00      	add	r7, sp, #0
 801663a:	4603      	mov	r3, r0
 801663c:	60b9      	str	r1, [r7, #8]
 801663e:	607a      	str	r2, [r7, #4]
 8016640:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8016642:	7bfb      	ldrb	r3, [r7, #15]
 8016644:	2b05      	cmp	r3, #5
 8016646:	d002      	beq.n	801664e <RegionRxConfig+0x1a>
 8016648:	2b08      	cmp	r3, #8
 801664a:	d006      	beq.n	801665a <RegionRxConfig+0x26>
 801664c:	e00b      	b.n	8016666 <RegionRxConfig+0x32>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 801664e:	6879      	ldr	r1, [r7, #4]
 8016650:	68b8      	ldr	r0, [r7, #8]
 8016652:	f001 fd91 	bl	8018178 <RegionEU868RxConfig>
 8016656:	4603      	mov	r3, r0
 8016658:	e006      	b.n	8016668 <RegionRxConfig+0x34>
        KR920_RX_CONFIG( );
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
 801665a:	6879      	ldr	r1, [r7, #4]
 801665c:	68b8      	ldr	r0, [r7, #8]
 801665e:	f002 ffe3 	bl	8019628 <RegionUS915RxConfig>
 8016662:	4603      	mov	r3, r0
 8016664:	e000      	b.n	8016668 <RegionRxConfig+0x34>
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 8016666:	2300      	movs	r3, #0
        }
    }
}
 8016668:	4618      	mov	r0, r3
 801666a:	3710      	adds	r7, #16
 801666c:	46bd      	mov	sp, r7
 801666e:	bd80      	pop	{r7, pc}

08016670 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8016670:	b580      	push	{r7, lr}
 8016672:	b084      	sub	sp, #16
 8016674:	af00      	add	r7, sp, #0
 8016676:	60b9      	str	r1, [r7, #8]
 8016678:	607a      	str	r2, [r7, #4]
 801667a:	603b      	str	r3, [r7, #0]
 801667c:	4603      	mov	r3, r0
 801667e:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8016680:	7bfb      	ldrb	r3, [r7, #15]
 8016682:	2b05      	cmp	r3, #5
 8016684:	d002      	beq.n	801668c <RegionTxConfig+0x1c>
 8016686:	2b08      	cmp	r3, #8
 8016688:	d007      	beq.n	801669a <RegionTxConfig+0x2a>
 801668a:	e00d      	b.n	80166a8 <RegionTxConfig+0x38>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 801668c:	683a      	ldr	r2, [r7, #0]
 801668e:	6879      	ldr	r1, [r7, #4]
 8016690:	68b8      	ldr	r0, [r7, #8]
 8016692:	f001 fe41 	bl	8018318 <RegionEU868TxConfig>
 8016696:	4603      	mov	r3, r0
 8016698:	e007      	b.n	80166aa <RegionTxConfig+0x3a>
        KR920_TX_CONFIG( );
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
 801669a:	683a      	ldr	r2, [r7, #0]
 801669c:	6879      	ldr	r1, [r7, #4]
 801669e:	68b8      	ldr	r0, [r7, #8]
 80166a0:	f003 f846 	bl	8019730 <RegionUS915TxConfig>
 80166a4:	4603      	mov	r3, r0
 80166a6:	e000      	b.n	80166aa <RegionTxConfig+0x3a>
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 80166a8:	2300      	movs	r3, #0
        }
    }
}
 80166aa:	4618      	mov	r0, r3
 80166ac:	3710      	adds	r7, #16
 80166ae:	46bd      	mov	sp, r7
 80166b0:	bd80      	pop	{r7, pc}

080166b2 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 80166b2:	b580      	push	{r7, lr}
 80166b4:	b086      	sub	sp, #24
 80166b6:	af02      	add	r7, sp, #8
 80166b8:	60b9      	str	r1, [r7, #8]
 80166ba:	607a      	str	r2, [r7, #4]
 80166bc:	603b      	str	r3, [r7, #0]
 80166be:	4603      	mov	r3, r0
 80166c0:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80166c2:	7bfb      	ldrb	r3, [r7, #15]
 80166c4:	2b05      	cmp	r3, #5
 80166c6:	d002      	beq.n	80166ce <RegionLinkAdrReq+0x1c>
 80166c8:	2b08      	cmp	r3, #8
 80166ca:	d00a      	beq.n	80166e2 <RegionLinkAdrReq+0x30>
 80166cc:	e013      	b.n	80166f6 <RegionLinkAdrReq+0x44>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 80166ce:	69fb      	ldr	r3, [r7, #28]
 80166d0:	9300      	str	r3, [sp, #0]
 80166d2:	69bb      	ldr	r3, [r7, #24]
 80166d4:	683a      	ldr	r2, [r7, #0]
 80166d6:	6879      	ldr	r1, [r7, #4]
 80166d8:	68b8      	ldr	r0, [r7, #8]
 80166da:	f001 feed 	bl	80184b8 <RegionEU868LinkAdrReq>
 80166de:	4603      	mov	r3, r0
 80166e0:	e00a      	b.n	80166f8 <RegionLinkAdrReq+0x46>
        KR920_LINK_ADR_REQ( );
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
 80166e2:	69fb      	ldr	r3, [r7, #28]
 80166e4:	9300      	str	r3, [sp, #0]
 80166e6:	69bb      	ldr	r3, [r7, #24]
 80166e8:	683a      	ldr	r2, [r7, #0]
 80166ea:	6879      	ldr	r1, [r7, #4]
 80166ec:	68b8      	ldr	r0, [r7, #8]
 80166ee:	f003 f8c9 	bl	8019884 <RegionUS915LinkAdrReq>
 80166f2:	4603      	mov	r3, r0
 80166f4:	e000      	b.n	80166f8 <RegionLinkAdrReq+0x46>
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 80166f6:	2300      	movs	r3, #0
        }
    }
}
 80166f8:	4618      	mov	r0, r3
 80166fa:	3710      	adds	r7, #16
 80166fc:	46bd      	mov	sp, r7
 80166fe:	bd80      	pop	{r7, pc}

08016700 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 8016700:	b580      	push	{r7, lr}
 8016702:	b082      	sub	sp, #8
 8016704:	af00      	add	r7, sp, #0
 8016706:	4603      	mov	r3, r0
 8016708:	6039      	str	r1, [r7, #0]
 801670a:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801670c:	79fb      	ldrb	r3, [r7, #7]
 801670e:	2b05      	cmp	r3, #5
 8016710:	d002      	beq.n	8016718 <RegionRxParamSetupReq+0x18>
 8016712:	2b08      	cmp	r3, #8
 8016714:	d005      	beq.n	8016722 <RegionRxParamSetupReq+0x22>
 8016716:	e009      	b.n	801672c <RegionRxParamSetupReq+0x2c>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 8016718:	6838      	ldr	r0, [r7, #0]
 801671a:	f001 ffef 	bl	80186fc <RegionEU868RxParamSetupReq>
 801671e:	4603      	mov	r3, r0
 8016720:	e005      	b.n	801672e <RegionRxParamSetupReq+0x2e>
        KR920_RX_PARAM_SETUP_REQ( );
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
 8016722:	6838      	ldr	r0, [r7, #0]
 8016724:	f003 fac8 	bl	8019cb8 <RegionUS915RxParamSetupReq>
 8016728:	4603      	mov	r3, r0
 801672a:	e000      	b.n	801672e <RegionRxParamSetupReq+0x2e>
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 801672c:	2300      	movs	r3, #0
        }
    }
}
 801672e:	4618      	mov	r0, r3
 8016730:	3708      	adds	r7, #8
 8016732:	46bd      	mov	sp, r7
 8016734:	bd80      	pop	{r7, pc}

08016736 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 8016736:	b580      	push	{r7, lr}
 8016738:	b082      	sub	sp, #8
 801673a:	af00      	add	r7, sp, #0
 801673c:	4603      	mov	r3, r0
 801673e:	6039      	str	r1, [r7, #0]
 8016740:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8016742:	79fb      	ldrb	r3, [r7, #7]
 8016744:	2b05      	cmp	r3, #5
 8016746:	d002      	beq.n	801674e <RegionNewChannelReq+0x18>
 8016748:	2b08      	cmp	r3, #8
 801674a:	d005      	beq.n	8016758 <RegionNewChannelReq+0x22>
 801674c:	e009      	b.n	8016762 <RegionNewChannelReq+0x2c>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 801674e:	6838      	ldr	r0, [r7, #0]
 8016750:	f002 f812 	bl	8018778 <RegionEU868NewChannelReq>
 8016754:	4603      	mov	r3, r0
 8016756:	e005      	b.n	8016764 <RegionNewChannelReq+0x2e>
        KR920_NEW_CHANNEL_REQ( );
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
 8016758:	6838      	ldr	r0, [r7, #0]
 801675a:	f003 faf9 	bl	8019d50 <RegionUS915NewChannelReq>
 801675e:	4603      	mov	r3, r0
 8016760:	e000      	b.n	8016764 <RegionNewChannelReq+0x2e>
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 8016762:	2300      	movs	r3, #0
        }
    }
}
 8016764:	4618      	mov	r0, r3
 8016766:	3708      	adds	r7, #8
 8016768:	46bd      	mov	sp, r7
 801676a:	bd80      	pop	{r7, pc}

0801676c <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 801676c:	b580      	push	{r7, lr}
 801676e:	b082      	sub	sp, #8
 8016770:	af00      	add	r7, sp, #0
 8016772:	4603      	mov	r3, r0
 8016774:	6039      	str	r1, [r7, #0]
 8016776:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8016778:	79fb      	ldrb	r3, [r7, #7]
 801677a:	2b05      	cmp	r3, #5
 801677c:	d002      	beq.n	8016784 <RegionTxParamSetupReq+0x18>
 801677e:	2b08      	cmp	r3, #8
 8016780:	d005      	beq.n	801678e <RegionTxParamSetupReq+0x22>
 8016782:	e009      	b.n	8016798 <RegionTxParamSetupReq+0x2c>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 8016784:	6838      	ldr	r0, [r7, #0]
 8016786:	f002 f855 	bl	8018834 <RegionEU868TxParamSetupReq>
 801678a:	4603      	mov	r3, r0
 801678c:	e005      	b.n	801679a <RegionTxParamSetupReq+0x2e>
        KR920_TX_PARAM_SETUP_REQ( );
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
 801678e:	6838      	ldr	r0, [r7, #0]
 8016790:	f003 fae9 	bl	8019d66 <RegionUS915TxParamSetupReq>
 8016794:	4603      	mov	r3, r0
 8016796:	e000      	b.n	801679a <RegionTxParamSetupReq+0x2e>
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8016798:	2300      	movs	r3, #0
        }
    }
}
 801679a:	4618      	mov	r0, r3
 801679c:	3708      	adds	r7, #8
 801679e:	46bd      	mov	sp, r7
 80167a0:	bd80      	pop	{r7, pc}

080167a2 <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 80167a2:	b580      	push	{r7, lr}
 80167a4:	b082      	sub	sp, #8
 80167a6:	af00      	add	r7, sp, #0
 80167a8:	4603      	mov	r3, r0
 80167aa:	6039      	str	r1, [r7, #0]
 80167ac:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80167ae:	79fb      	ldrb	r3, [r7, #7]
 80167b0:	2b05      	cmp	r3, #5
 80167b2:	d002      	beq.n	80167ba <RegionDlChannelReq+0x18>
 80167b4:	2b08      	cmp	r3, #8
 80167b6:	d005      	beq.n	80167c4 <RegionDlChannelReq+0x22>
 80167b8:	e009      	b.n	80167ce <RegionDlChannelReq+0x2c>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 80167ba:	6838      	ldr	r0, [r7, #0]
 80167bc:	f002 f846 	bl	801884c <RegionEU868DlChannelReq>
 80167c0:	4603      	mov	r3, r0
 80167c2:	e005      	b.n	80167d0 <RegionDlChannelReq+0x2e>
        KR920_DL_CHANNEL_REQ( );
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
 80167c4:	6838      	ldr	r0, [r7, #0]
 80167c6:	f003 fad9 	bl	8019d7c <RegionUS915DlChannelReq>
 80167ca:	4603      	mov	r3, r0
 80167cc:	e000      	b.n	80167d0 <RegionDlChannelReq+0x2e>
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 80167ce:	2300      	movs	r3, #0
        }
    }
}
 80167d0:	4618      	mov	r0, r3
 80167d2:	3708      	adds	r7, #8
 80167d4:	46bd      	mov	sp, r7
 80167d6:	bd80      	pop	{r7, pc}

080167d8 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 80167d8:	b580      	push	{r7, lr}
 80167da:	b082      	sub	sp, #8
 80167dc:	af00      	add	r7, sp, #0
 80167de:	4603      	mov	r3, r0
 80167e0:	71fb      	strb	r3, [r7, #7]
 80167e2:	460b      	mov	r3, r1
 80167e4:	71bb      	strb	r3, [r7, #6]
 80167e6:	4613      	mov	r3, r2
 80167e8:	717b      	strb	r3, [r7, #5]
    switch( region )
 80167ea:	79fb      	ldrb	r3, [r7, #7]
 80167ec:	2b05      	cmp	r3, #5
 80167ee:	d002      	beq.n	80167f6 <RegionAlternateDr+0x1e>
 80167f0:	2b08      	cmp	r3, #8
 80167f2:	d009      	beq.n	8016808 <RegionAlternateDr+0x30>
 80167f4:	e011      	b.n	801681a <RegionAlternateDr+0x42>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 80167f6:	797a      	ldrb	r2, [r7, #5]
 80167f8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80167fc:	4611      	mov	r1, r2
 80167fe:	4618      	mov	r0, r3
 8016800:	f002 f86e 	bl	80188e0 <RegionEU868AlternateDr>
 8016804:	4603      	mov	r3, r0
 8016806:	e009      	b.n	801681c <RegionAlternateDr+0x44>
        KR920_ALTERNATE_DR( );
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
 8016808:	797a      	ldrb	r2, [r7, #5]
 801680a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801680e:	4611      	mov	r1, r2
 8016810:	4618      	mov	r0, r3
 8016812:	f003 fabf 	bl	8019d94 <RegionUS915AlternateDr>
 8016816:	4603      	mov	r3, r0
 8016818:	e000      	b.n	801681c <RegionAlternateDr+0x44>
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 801681a:	2300      	movs	r3, #0
        }
    }
}
 801681c:	4618      	mov	r0, r3
 801681e:	3708      	adds	r7, #8
 8016820:	46bd      	mov	sp, r7
 8016822:	bd80      	pop	{r7, pc}

08016824 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8016824:	b580      	push	{r7, lr}
 8016826:	b084      	sub	sp, #16
 8016828:	af00      	add	r7, sp, #0
 801682a:	60b9      	str	r1, [r7, #8]
 801682c:	607a      	str	r2, [r7, #4]
 801682e:	603b      	str	r3, [r7, #0]
 8016830:	4603      	mov	r3, r0
 8016832:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8016834:	7bfb      	ldrb	r3, [r7, #15]
 8016836:	2b05      	cmp	r3, #5
 8016838:	d002      	beq.n	8016840 <RegionNextChannel+0x1c>
 801683a:	2b08      	cmp	r3, #8
 801683c:	d008      	beq.n	8016850 <RegionNextChannel+0x2c>
 801683e:	e00f      	b.n	8016860 <RegionNextChannel+0x3c>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 8016840:	69bb      	ldr	r3, [r7, #24]
 8016842:	683a      	ldr	r2, [r7, #0]
 8016844:	6879      	ldr	r1, [r7, #4]
 8016846:	68b8      	ldr	r0, [r7, #8]
 8016848:	f002 f85a 	bl	8018900 <RegionEU868NextChannel>
 801684c:	4603      	mov	r3, r0
 801684e:	e008      	b.n	8016862 <RegionNextChannel+0x3e>
        KR920_NEXT_CHANNEL( );
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
 8016850:	69bb      	ldr	r3, [r7, #24]
 8016852:	683a      	ldr	r2, [r7, #0]
 8016854:	6879      	ldr	r1, [r7, #4]
 8016856:	68b8      	ldr	r0, [r7, #8]
 8016858:	f003 fad2 	bl	8019e00 <RegionUS915NextChannel>
 801685c:	4603      	mov	r3, r0
 801685e:	e000      	b.n	8016862 <RegionNextChannel+0x3e>
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8016860:	2309      	movs	r3, #9
        }
    }
}
 8016862:	4618      	mov	r0, r3
 8016864:	3710      	adds	r7, #16
 8016866:	46bd      	mov	sp, r7
 8016868:	bd80      	pop	{r7, pc}

0801686a <RegionApplyDrOffset>:
    }
}
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 801686a:	b590      	push	{r4, r7, lr}
 801686c:	b083      	sub	sp, #12
 801686e:	af00      	add	r7, sp, #0
 8016870:	4604      	mov	r4, r0
 8016872:	4608      	mov	r0, r1
 8016874:	4611      	mov	r1, r2
 8016876:	461a      	mov	r2, r3
 8016878:	4623      	mov	r3, r4
 801687a:	71fb      	strb	r3, [r7, #7]
 801687c:	4603      	mov	r3, r0
 801687e:	71bb      	strb	r3, [r7, #6]
 8016880:	460b      	mov	r3, r1
 8016882:	717b      	strb	r3, [r7, #5]
 8016884:	4613      	mov	r3, r2
 8016886:	713b      	strb	r3, [r7, #4]
    switch( region )
 8016888:	79fb      	ldrb	r3, [r7, #7]
 801688a:	2b05      	cmp	r3, #5
 801688c:	d002      	beq.n	8016894 <RegionApplyDrOffset+0x2a>
 801688e:	2b08      	cmp	r3, #8
 8016890:	d00a      	beq.n	80168a8 <RegionApplyDrOffset+0x3e>
 8016892:	e013      	b.n	80168bc <RegionApplyDrOffset+0x52>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 8016894:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8016898:	f997 1005 	ldrsb.w	r1, [r7, #5]
 801689c:	79bb      	ldrb	r3, [r7, #6]
 801689e:	4618      	mov	r0, r3
 80168a0:	f002 f9a8 	bl	8018bf4 <RegionEU868ApplyDrOffset>
 80168a4:	4603      	mov	r3, r0
 80168a6:	e00a      	b.n	80168be <RegionApplyDrOffset+0x54>
        KR920_APPLY_DR_OFFSET( );
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
 80168a8:	f997 2004 	ldrsb.w	r2, [r7, #4]
 80168ac:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80168b0:	79bb      	ldrb	r3, [r7, #6]
 80168b2:	4618      	mov	r0, r3
 80168b4:	f003 fb92 	bl	8019fdc <RegionUS915ApplyDrOffset>
 80168b8:	4603      	mov	r3, r0
 80168ba:	e000      	b.n	80168be <RegionApplyDrOffset+0x54>
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 80168bc:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 80168be:	4618      	mov	r0, r3
 80168c0:	370c      	adds	r7, #12
 80168c2:	46bd      	mov	sp, r7
 80168c4:	bd90      	pop	{r4, r7, pc}
	...

080168c8 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 80168c8:	b480      	push	{r7}
 80168ca:	b083      	sub	sp, #12
 80168cc:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 80168ce:	4b04      	ldr	r3, [pc, #16]	; (80168e0 <RegionGetVersion+0x18>)
 80168d0:	607b      	str	r3, [r7, #4]

    return version;
 80168d2:	687b      	ldr	r3, [r7, #4]
}
 80168d4:	4618      	mov	r0, r3
 80168d6:	370c      	adds	r7, #12
 80168d8:	46bd      	mov	sp, r7
 80168da:	bc80      	pop	{r7}
 80168dc:	4770      	bx	lr
 80168de:	bf00      	nop
 80168e0:	02010001 	.word	0x02010001

080168e4 <FindAvailable125kHzChannels>:
 *
 * \retval Status
 */
static LoRaMacStatus_t FindAvailable125kHzChannels( uint16_t currentChannelMaskLeft,
                                                    uint8_t* findAvailableChannelsIndex, uint8_t* availableChannels )
{
 80168e4:	b480      	push	{r7}
 80168e6:	b087      	sub	sp, #28
 80168e8:	af00      	add	r7, sp, #0
 80168ea:	4603      	mov	r3, r0
 80168ec:	60b9      	str	r1, [r7, #8]
 80168ee:	607a      	str	r2, [r7, #4]
 80168f0:	81fb      	strh	r3, [r7, #14]
    // Nullpointer check
    if( findAvailableChannelsIndex == NULL || availableChannels == NULL )
 80168f2:	68bb      	ldr	r3, [r7, #8]
 80168f4:	2b00      	cmp	r3, #0
 80168f6:	d002      	beq.n	80168fe <FindAvailable125kHzChannels+0x1a>
 80168f8:	687b      	ldr	r3, [r7, #4]
 80168fa:	2b00      	cmp	r3, #0
 80168fc:	d101      	bne.n	8016902 <FindAvailable125kHzChannels+0x1e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80168fe:	2303      	movs	r3, #3
 8016900:	e021      	b.n	8016946 <FindAvailable125kHzChannels+0x62>
    }

    // Initialize counter
    *availableChannels = 0;
 8016902:	687b      	ldr	r3, [r7, #4]
 8016904:	2200      	movs	r2, #0
 8016906:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 8016908:	2300      	movs	r3, #0
 801690a:	75fb      	strb	r3, [r7, #23]
 801690c:	e017      	b.n	801693e <FindAvailable125kHzChannels+0x5a>
    {
        // Find available channels
        if( ( currentChannelMaskLeft & ( 1 << i ) ) != 0 )
 801690e:	89fa      	ldrh	r2, [r7, #14]
 8016910:	7dfb      	ldrb	r3, [r7, #23]
 8016912:	fa42 f303 	asr.w	r3, r2, r3
 8016916:	f003 0301 	and.w	r3, r3, #1
 801691a:	2b00      	cmp	r3, #0
 801691c:	d00c      	beq.n	8016938 <FindAvailable125kHzChannels+0x54>
        {
            // Save available channel index
            findAvailableChannelsIndex[*availableChannels] = i;
 801691e:	687b      	ldr	r3, [r7, #4]
 8016920:	781b      	ldrb	r3, [r3, #0]
 8016922:	461a      	mov	r2, r3
 8016924:	68bb      	ldr	r3, [r7, #8]
 8016926:	4413      	add	r3, r2
 8016928:	7dfa      	ldrb	r2, [r7, #23]
 801692a:	701a      	strb	r2, [r3, #0]
            // Increment counter of available channels if the current channel is available
            ( *availableChannels )++;
 801692c:	687b      	ldr	r3, [r7, #4]
 801692e:	781b      	ldrb	r3, [r3, #0]
 8016930:	3301      	adds	r3, #1
 8016932:	b2da      	uxtb	r2, r3
 8016934:	687b      	ldr	r3, [r7, #4]
 8016936:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 8016938:	7dfb      	ldrb	r3, [r7, #23]
 801693a:	3301      	adds	r3, #1
 801693c:	75fb      	strb	r3, [r7, #23]
 801693e:	7dfb      	ldrb	r3, [r7, #23]
 8016940:	2b07      	cmp	r3, #7
 8016942:	d9e4      	bls.n	801690e <FindAvailable125kHzChannels+0x2a>
        }
    }

    return LORAMAC_STATUS_OK;
 8016944:	2300      	movs	r3, #0
}
 8016946:	4618      	mov	r0, r3
 8016948:	371c      	adds	r7, #28
 801694a:	46bd      	mov	sp, r7
 801694c:	bc80      	pop	{r7}
 801694e:	4770      	bx	lr

08016950 <RegionBaseUSComputeNext125kHzJoinChannel>:

LoRaMacStatus_t RegionBaseUSComputeNext125kHzJoinChannel( uint16_t* channelsMaskRemaining,
                                                          uint8_t* groupsCurrentIndex, uint8_t* newChannelIndex )
{
 8016950:	b590      	push	{r4, r7, lr}
 8016952:	b089      	sub	sp, #36	; 0x24
 8016954:	af00      	add	r7, sp, #0
 8016956:	60f8      	str	r0, [r7, #12]
 8016958:	60b9      	str	r1, [r7, #8]
 801695a:	607a      	str	r2, [r7, #4]
    uint8_t currentChannelMaskLeftIndex;
    uint16_t currentChannelMaskLeft;
    uint8_t findAvailableChannelsIndex[8] = { 0 };
 801695c:	2300      	movs	r3, #0
 801695e:	617b      	str	r3, [r7, #20]
 8016960:	2300      	movs	r3, #0
 8016962:	61bb      	str	r3, [r7, #24]
    uint8_t availableChannels = 0;
 8016964:	2300      	movs	r3, #0
 8016966:	74fb      	strb	r3, [r7, #19]
    uint8_t startIndex;

    // Null pointer check
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 8016968:	68fb      	ldr	r3, [r7, #12]
 801696a:	2b00      	cmp	r3, #0
 801696c:	d005      	beq.n	801697a <RegionBaseUSComputeNext125kHzJoinChannel+0x2a>
 801696e:	68bb      	ldr	r3, [r7, #8]
 8016970:	2b00      	cmp	r3, #0
 8016972:	d002      	beq.n	801697a <RegionBaseUSComputeNext125kHzJoinChannel+0x2a>
 8016974:	687b      	ldr	r3, [r7, #4]
 8016976:	2b00      	cmp	r3, #0
 8016978:	d101      	bne.n	801697e <RegionBaseUSComputeNext125kHzJoinChannel+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801697a:	2303      	movs	r3, #3
 801697c:	e055      	b.n	8016a2a <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
    }

    // copy the current index.
    startIndex = *groupsCurrentIndex;
 801697e:	68bb      	ldr	r3, [r7, #8]
 8016980:	781b      	ldrb	r3, [r3, #0]
 8016982:	777b      	strb	r3, [r7, #29]

    do
    {
        // Current ChannelMaskRemaining, two groups per channel mask. For example Group 0 and 1 (8 bit) are ChannelMaskRemaining 0 (16 bit), etc.
        currentChannelMaskLeftIndex = (uint8_t) startIndex / 2;
 8016984:	7f7b      	ldrb	r3, [r7, #29]
 8016986:	085b      	lsrs	r3, r3, #1
 8016988:	773b      	strb	r3, [r7, #28]

        // For even numbers we need the 8 LSBs and for uneven the 8 MSBs
        if( ( startIndex % 2 ) == 0 )
 801698a:	7f7b      	ldrb	r3, [r7, #29]
 801698c:	f003 0301 	and.w	r3, r3, #1
 8016990:	b2db      	uxtb	r3, r3
 8016992:	2b00      	cmp	r3, #0
 8016994:	d107      	bne.n	80169a6 <RegionBaseUSComputeNext125kHzJoinChannel+0x56>
        {
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 8016996:	7f3b      	ldrb	r3, [r7, #28]
 8016998:	005b      	lsls	r3, r3, #1
 801699a:	68fa      	ldr	r2, [r7, #12]
 801699c:	4413      	add	r3, r2
 801699e:	881b      	ldrh	r3, [r3, #0]
 80169a0:	b2db      	uxtb	r3, r3
 80169a2:	83fb      	strh	r3, [r7, #30]
 80169a4:	e006      	b.n	80169b4 <RegionBaseUSComputeNext125kHzJoinChannel+0x64>
        }
        else
        {
            currentChannelMaskLeft = ( ( channelsMaskRemaining[currentChannelMaskLeftIndex] >> 8 ) & 0x00FF );
 80169a6:	7f3b      	ldrb	r3, [r7, #28]
 80169a8:	005b      	lsls	r3, r3, #1
 80169aa:	68fa      	ldr	r2, [r7, #12]
 80169ac:	4413      	add	r3, r2
 80169ae:	881b      	ldrh	r3, [r3, #0]
 80169b0:	0a1b      	lsrs	r3, r3, #8
 80169b2:	83fb      	strh	r3, [r7, #30]
        }

        if( FindAvailable125kHzChannels( currentChannelMaskLeft, findAvailableChannelsIndex, &availableChannels ) == LORAMAC_STATUS_PARAMETER_INVALID )
 80169b4:	f107 0213 	add.w	r2, r7, #19
 80169b8:	f107 0114 	add.w	r1, r7, #20
 80169bc:	8bfb      	ldrh	r3, [r7, #30]
 80169be:	4618      	mov	r0, r3
 80169c0:	f7ff ff90 	bl	80168e4 <FindAvailable125kHzChannels>
 80169c4:	4603      	mov	r3, r0
 80169c6:	2b03      	cmp	r3, #3
 80169c8:	d101      	bne.n	80169ce <RegionBaseUSComputeNext125kHzJoinChannel+0x7e>
        {
            return LORAMAC_STATUS_PARAMETER_INVALID;
 80169ca:	2303      	movs	r3, #3
 80169cc:	e02d      	b.n	8016a2a <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
        }

        if ( availableChannels > 0 )
 80169ce:	7cfb      	ldrb	r3, [r7, #19]
 80169d0:	2b00      	cmp	r3, #0
 80169d2:	d011      	beq.n	80169f8 <RegionBaseUSComputeNext125kHzJoinChannel+0xa8>
        {
            // Choose randomly a free channel 125kHz
            *newChannelIndex = ( startIndex * 8 ) + findAvailableChannelsIndex[randr( 0, ( availableChannels - 1 ) )];
 80169d4:	7f7b      	ldrb	r3, [r7, #29]
 80169d6:	00db      	lsls	r3, r3, #3
 80169d8:	b2dc      	uxtb	r4, r3
 80169da:	7cfb      	ldrb	r3, [r7, #19]
 80169dc:	3b01      	subs	r3, #1
 80169de:	4619      	mov	r1, r3
 80169e0:	2000      	movs	r0, #0
 80169e2:	f003 fb4d 	bl	801a080 <randr>
 80169e6:	4603      	mov	r3, r0
 80169e8:	3320      	adds	r3, #32
 80169ea:	443b      	add	r3, r7
 80169ec:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80169f0:	4423      	add	r3, r4
 80169f2:	b2da      	uxtb	r2, r3
 80169f4:	687b      	ldr	r3, [r7, #4]
 80169f6:	701a      	strb	r2, [r3, #0]
        }

        // Increment start index
        startIndex++;
 80169f8:	7f7b      	ldrb	r3, [r7, #29]
 80169fa:	3301      	adds	r3, #1
 80169fc:	777b      	strb	r3, [r7, #29]
        if ( startIndex > 7 )
 80169fe:	7f7b      	ldrb	r3, [r7, #29]
 8016a00:	2b07      	cmp	r3, #7
 8016a02:	d901      	bls.n	8016a08 <RegionBaseUSComputeNext125kHzJoinChannel+0xb8>
        {
            startIndex = 0;
 8016a04:	2300      	movs	r3, #0
 8016a06:	777b      	strb	r3, [r7, #29]
        }
    } while( ( availableChannels == 0 ) && ( startIndex != *groupsCurrentIndex ) );
 8016a08:	7cfb      	ldrb	r3, [r7, #19]
 8016a0a:	2b00      	cmp	r3, #0
 8016a0c:	d104      	bne.n	8016a18 <RegionBaseUSComputeNext125kHzJoinChannel+0xc8>
 8016a0e:	68bb      	ldr	r3, [r7, #8]
 8016a10:	781b      	ldrb	r3, [r3, #0]
 8016a12:	7f7a      	ldrb	r2, [r7, #29]
 8016a14:	429a      	cmp	r2, r3
 8016a16:	d1b5      	bne.n	8016984 <RegionBaseUSComputeNext125kHzJoinChannel+0x34>

    if ( availableChannels > 0 )
 8016a18:	7cfb      	ldrb	r3, [r7, #19]
 8016a1a:	2b00      	cmp	r3, #0
 8016a1c:	d004      	beq.n	8016a28 <RegionBaseUSComputeNext125kHzJoinChannel+0xd8>
    {
        *groupsCurrentIndex = startIndex;
 8016a1e:	68bb      	ldr	r3, [r7, #8]
 8016a20:	7f7a      	ldrb	r2, [r7, #29]
 8016a22:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8016a24:	2300      	movs	r3, #0
 8016a26:	e000      	b.n	8016a2a <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
    }

    return LORAMAC_STATUS_PARAMETER_INVALID;
 8016a28:	2303      	movs	r3, #3
}
 8016a2a:	4618      	mov	r0, r3
 8016a2c:	3724      	adds	r7, #36	; 0x24
 8016a2e:	46bd      	mov	sp, r7
 8016a30:	bd90      	pop	{r4, r7, pc}

08016a32 <RegionBaseUSCalcDownlinkFrequency>:
    return true;
}

uint32_t RegionBaseUSCalcDownlinkFrequency( uint8_t channel, uint32_t frequency,
                                            uint32_t stepwidth )
{
 8016a32:	b480      	push	{r7}
 8016a34:	b085      	sub	sp, #20
 8016a36:	af00      	add	r7, sp, #0
 8016a38:	4603      	mov	r3, r0
 8016a3a:	60b9      	str	r1, [r7, #8]
 8016a3c:	607a      	str	r2, [r7, #4]
 8016a3e:	73fb      	strb	r3, [r7, #15]
    // Calculate the frequency
    return frequency + ( channel * stepwidth );
 8016a40:	7bfb      	ldrb	r3, [r7, #15]
 8016a42:	687a      	ldr	r2, [r7, #4]
 8016a44:	fb03 f202 	mul.w	r2, r3, r2
 8016a48:	68bb      	ldr	r3, [r7, #8]
 8016a4a:	4413      	add	r3, r2
}
 8016a4c:	4618      	mov	r0, r3
 8016a4e:	3714      	adds	r7, #20
 8016a50:	46bd      	mov	sp, r7
 8016a52:	bc80      	pop	{r7}
 8016a54:	4770      	bx	lr

08016a56 <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8016a56:	b480      	push	{r7}
 8016a58:	b087      	sub	sp, #28
 8016a5a:	af00      	add	r7, sp, #0
 8016a5c:	60f8      	str	r0, [r7, #12]
 8016a5e:	4608      	mov	r0, r1
 8016a60:	4639      	mov	r1, r7
 8016a62:	e881 000c 	stmia.w	r1, {r2, r3}
 8016a66:	4603      	mov	r3, r0
 8016a68:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8016a6a:	68fb      	ldr	r3, [r7, #12]
 8016a6c:	881b      	ldrh	r3, [r3, #0]
 8016a6e:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 8016a70:	7afb      	ldrb	r3, [r7, #11]
 8016a72:	f083 0301 	eor.w	r3, r3, #1
 8016a76:	b2db      	uxtb	r3, r3
 8016a78:	2b00      	cmp	r3, #0
 8016a7a:	d01b      	beq.n	8016ab4 <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 8016a7c:	f242 7310 	movw	r3, #10000	; 0x2710
 8016a80:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 8016a82:	683b      	ldr	r3, [r7, #0]
 8016a84:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8016a88:	d202      	bcs.n	8016a90 <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 8016a8a:	2364      	movs	r3, #100	; 0x64
 8016a8c:	82bb      	strh	r3, [r7, #20]
 8016a8e:	e00b      	b.n	8016aa8 <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 8016a90:	683b      	ldr	r3, [r7, #0]
 8016a92:	f649 22af 	movw	r2, #39599	; 0x9aaf
 8016a96:	4293      	cmp	r3, r2
 8016a98:	d803      	bhi.n	8016aa2 <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 8016a9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8016a9e:	82bb      	strh	r3, [r7, #20]
 8016aa0:	e002      	b.n	8016aa8 <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 8016aa2:	f242 7310 	movw	r3, #10000	; 0x2710
 8016aa6:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 8016aa8:	8aba      	ldrh	r2, [r7, #20]
 8016aaa:	8afb      	ldrh	r3, [r7, #22]
 8016aac:	4293      	cmp	r3, r2
 8016aae:	bf38      	it	cc
 8016ab0:	4613      	movcc	r3, r2
 8016ab2:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 8016ab4:	8afb      	ldrh	r3, [r7, #22]
 8016ab6:	2b00      	cmp	r3, #0
 8016ab8:	d101      	bne.n	8016abe <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 8016aba:	2301      	movs	r3, #1
 8016abc:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 8016abe:	8afb      	ldrh	r3, [r7, #22]
}
 8016ac0:	4618      	mov	r0, r3
 8016ac2:	371c      	adds	r7, #28
 8016ac4:	46bd      	mov	sp, r7
 8016ac6:	bc80      	pop	{r7}
 8016ac8:	4770      	bx	lr
	...

08016acc <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 8016acc:	b580      	push	{r7, lr}
 8016ace:	b08e      	sub	sp, #56	; 0x38
 8016ad0:	af02      	add	r7, sp, #8
 8016ad2:	60f8      	str	r0, [r7, #12]
 8016ad4:	4608      	mov	r0, r1
 8016ad6:	4639      	mov	r1, r7
 8016ad8:	e881 000c 	stmia.w	r1, {r2, r3}
 8016adc:	4603      	mov	r3, r0
 8016ade:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8016ae0:	68fb      	ldr	r3, [r7, #12]
 8016ae2:	881b      	ldrh	r3, [r3, #0]
 8016ae4:	857b      	strh	r3, [r7, #42]	; 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8016ae6:	4b4b      	ldr	r3, [pc, #300]	; (8016c14 <SetMaxTimeCredits+0x148>)
 8016ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 8016aea:	463b      	mov	r3, r7
 8016aec:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016af0:	f006 ff68 	bl	801d9c4 <SysTimeToMs>
 8016af4:	6278      	str	r0, [r7, #36]	; 0x24
    SysTime_t timeDiff = { 0 };
 8016af6:	f107 0314 	add.w	r3, r7, #20
 8016afa:	2200      	movs	r2, #0
 8016afc:	601a      	str	r2, [r3, #0]
 8016afe:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8016b00:	7af9      	ldrb	r1, [r7, #11]
 8016b02:	463b      	mov	r3, r7
 8016b04:	cb0c      	ldmia	r3, {r2, r3}
 8016b06:	68f8      	ldr	r0, [r7, #12]
 8016b08:	f7ff ffa5 	bl	8016a56 <GetDutyCycle>
 8016b0c:	4603      	mov	r3, r0
 8016b0e:	857b      	strh	r3, [r7, #42]	; 0x2a

    if( joined == false )
 8016b10:	7afb      	ldrb	r3, [r7, #11]
 8016b12:	f083 0301 	eor.w	r3, r3, #1
 8016b16:	b2db      	uxtb	r3, r3
 8016b18:	2b00      	cmp	r3, #0
 8016b1a:	d062      	beq.n	8016be2 <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 8016b1c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016b1e:	2b64      	cmp	r3, #100	; 0x64
 8016b20:	d105      	bne.n	8016b2e <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8016b22:	4b3c      	ldr	r3, [pc, #240]	; (8016c14 <SetMaxTimeCredits+0x148>)
 8016b24:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8016b26:	68fb      	ldr	r3, [r7, #12]
 8016b28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016b2a:	609a      	str	r2, [r3, #8]
 8016b2c:	e00b      	b.n	8016b46 <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8016b2e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016b30:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8016b34:	d105      	bne.n	8016b42 <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 8016b36:	4b38      	ldr	r3, [pc, #224]	; (8016c18 <SetMaxTimeCredits+0x14c>)
 8016b38:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8016b3a:	68fb      	ldr	r3, [r7, #12]
 8016b3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016b3e:	609a      	str	r2, [r3, #8]
 8016b40:	e001      	b.n	8016b46 <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 8016b42:	4b36      	ldr	r3, [pc, #216]	; (8016c1c <SetMaxTimeCredits+0x150>)
 8016b44:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 8016b46:	68fb      	ldr	r3, [r7, #12]
 8016b48:	689a      	ldr	r2, [r3, #8]
 8016b4a:	f107 031c 	add.w	r3, r7, #28
 8016b4e:	4611      	mov	r1, r2
 8016b50:	4618      	mov	r0, r3
 8016b52:	f006 ff5f 	bl	801da14 <SysTimeFromMs>
 8016b56:	f107 0014 	add.w	r0, r7, #20
 8016b5a:	6a3b      	ldr	r3, [r7, #32]
 8016b5c:	9300      	str	r3, [sp, #0]
 8016b5e:	69fb      	ldr	r3, [r7, #28]
 8016b60:	463a      	mov	r2, r7
 8016b62:	ca06      	ldmia	r2, {r1, r2}
 8016b64:	f006 fe6f 	bl	801d846 <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8016b68:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8016b6c:	f083 0301 	eor.w	r3, r3, #1
 8016b70:	b2db      	uxtb	r3, r3
 8016b72:	2b00      	cmp	r3, #0
 8016b74:	d006      	beq.n	8016b84 <SetMaxTimeCredits+0xb8>
 8016b76:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8016b7a:	f083 0301 	eor.w	r3, r3, #1
 8016b7e:	b2db      	uxtb	r3, r3
 8016b80:	2b00      	cmp	r3, #0
 8016b82:	d108      	bne.n	8016b96 <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 8016b84:	68fb      	ldr	r3, [r7, #12]
 8016b86:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8016b88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016b8a:	429a      	cmp	r2, r3
 8016b8c:	d103      	bne.n	8016b96 <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 8016b8e:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 8016b90:	4a23      	ldr	r2, [pc, #140]	; (8016c20 <SetMaxTimeCredits+0x154>)
 8016b92:	4293      	cmp	r3, r2
 8016b94:	d92f      	bls.n	8016bf6 <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 8016b96:	68fb      	ldr	r3, [r7, #12]
 8016b98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016b9a:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8016b9c:	683b      	ldr	r3, [r7, #0]
 8016b9e:	4a21      	ldr	r2, [pc, #132]	; (8016c24 <SetMaxTimeCredits+0x158>)
 8016ba0:	4293      	cmp	r3, r2
 8016ba2:	d928      	bls.n	8016bf6 <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 8016ba4:	683b      	ldr	r3, [r7, #0]
 8016ba6:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 8016baa:	3b30      	subs	r3, #48	; 0x30
 8016bac:	4a1e      	ldr	r2, [pc, #120]	; (8016c28 <SetMaxTimeCredits+0x15c>)
 8016bae:	fba2 2303 	umull	r2, r3, r2, r3
 8016bb2:	0c1b      	lsrs	r3, r3, #16
 8016bb4:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 8016bb6:	697b      	ldr	r3, [r7, #20]
 8016bb8:	4a1c      	ldr	r2, [pc, #112]	; (8016c2c <SetMaxTimeCredits+0x160>)
 8016bba:	fb02 f303 	mul.w	r3, r2, r3
 8016bbe:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8016bc0:	697b      	ldr	r3, [r7, #20]
 8016bc2:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8016bc6:	3330      	adds	r3, #48	; 0x30
 8016bc8:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 8016bca:	2300      	movs	r3, #0
 8016bcc:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 8016bce:	f107 0314 	add.w	r3, r7, #20
 8016bd2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016bd6:	f006 fef5 	bl	801d9c4 <SysTimeToMs>
 8016bda:	4602      	mov	r2, r0
 8016bdc:	68fb      	ldr	r3, [r7, #12]
 8016bde:	609a      	str	r2, [r3, #8]
 8016be0:	e009      	b.n	8016bf6 <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 8016be2:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8016be6:	f083 0301 	eor.w	r3, r3, #1
 8016bea:	b2db      	uxtb	r3, r3
 8016bec:	2b00      	cmp	r3, #0
 8016bee:	d002      	beq.n	8016bf6 <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 8016bf0:	68fb      	ldr	r3, [r7, #12]
 8016bf2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016bf4:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 8016bf6:	68fb      	ldr	r3, [r7, #12]
 8016bf8:	685b      	ldr	r3, [r3, #4]
 8016bfa:	2b00      	cmp	r3, #0
 8016bfc:	d102      	bne.n	8016c04 <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 8016bfe:	68fb      	ldr	r3, [r7, #12]
 8016c00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016c02:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 8016c04:	68fb      	ldr	r3, [r7, #12]
 8016c06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016c08:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 8016c0a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
}
 8016c0c:	4618      	mov	r0, r3
 8016c0e:	3730      	adds	r7, #48	; 0x30
 8016c10:	46bd      	mov	sp, r7
 8016c12:	bd80      	pop	{r7, pc}
 8016c14:	001b7740 	.word	0x001b7740
 8016c18:	0112a880 	.word	0x0112a880
 8016c1c:	02932e00 	.word	0x02932e00
 8016c20:	0001517f 	.word	0x0001517f
 8016c24:	0001ec2f 	.word	0x0001ec2f
 8016c28:	c22e4507 	.word	0xc22e4507
 8016c2c:	00015180 	.word	0x00015180

08016c30 <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 8016c30:	b580      	push	{r7, lr}
 8016c32:	b086      	sub	sp, #24
 8016c34:	af02      	add	r7, sp, #8
 8016c36:	6078      	str	r0, [r7, #4]
 8016c38:	4608      	mov	r0, r1
 8016c3a:	4611      	mov	r1, r2
 8016c3c:	461a      	mov	r2, r3
 8016c3e:	4603      	mov	r3, r0
 8016c40:	70fb      	strb	r3, [r7, #3]
 8016c42:	460b      	mov	r3, r1
 8016c44:	70bb      	strb	r3, [r7, #2]
 8016c46:	4613      	mov	r3, r2
 8016c48:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 8016c4a:	78f9      	ldrb	r1, [r7, #3]
 8016c4c:	787b      	ldrb	r3, [r7, #1]
 8016c4e:	9301      	str	r3, [sp, #4]
 8016c50:	78bb      	ldrb	r3, [r7, #2]
 8016c52:	9300      	str	r3, [sp, #0]
 8016c54:	f107 0318 	add.w	r3, r7, #24
 8016c58:	cb0c      	ldmia	r3, {r2, r3}
 8016c5a:	6878      	ldr	r0, [r7, #4]
 8016c5c:	f7ff ff36 	bl	8016acc <SetMaxTimeCredits>
 8016c60:	4603      	mov	r3, r0
 8016c62:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 8016c64:	78fb      	ldrb	r3, [r7, #3]
 8016c66:	2b00      	cmp	r3, #0
 8016c68:	d00a      	beq.n	8016c80 <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 8016c6a:	687b      	ldr	r3, [r7, #4]
 8016c6c:	685b      	ldr	r3, [r3, #4]
 8016c6e:	4618      	mov	r0, r3
 8016c70:	f007 fce4 	bl	801e63c <UTIL_TIMER_GetElapsedTime>
 8016c74:	4602      	mov	r2, r0
 8016c76:	687b      	ldr	r3, [r7, #4]
 8016c78:	68db      	ldr	r3, [r3, #12]
 8016c7a:	441a      	add	r2, r3
 8016c7c:	687b      	ldr	r3, [r7, #4]
 8016c7e:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 8016c80:	687b      	ldr	r3, [r7, #4]
 8016c82:	68da      	ldr	r2, [r3, #12]
 8016c84:	687b      	ldr	r3, [r7, #4]
 8016c86:	691b      	ldr	r3, [r3, #16]
 8016c88:	429a      	cmp	r2, r3
 8016c8a:	d903      	bls.n	8016c94 <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 8016c8c:	687b      	ldr	r3, [r7, #4]
 8016c8e:	691a      	ldr	r2, [r3, #16]
 8016c90:	687b      	ldr	r3, [r7, #4]
 8016c92:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 8016c94:	687b      	ldr	r3, [r7, #4]
 8016c96:	6a3a      	ldr	r2, [r7, #32]
 8016c98:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 8016c9a:	89fb      	ldrh	r3, [r7, #14]
}
 8016c9c:	4618      	mov	r0, r3
 8016c9e:	3710      	adds	r7, #16
 8016ca0:	46bd      	mov	sp, r7
 8016ca2:	bd80      	pop	{r7, pc}

08016ca4 <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8016ca4:	b480      	push	{r7}
 8016ca6:	b085      	sub	sp, #20
 8016ca8:	af00      	add	r7, sp, #0
 8016caa:	4603      	mov	r3, r0
 8016cac:	460a      	mov	r2, r1
 8016cae:	80fb      	strh	r3, [r7, #6]
 8016cb0:	4613      	mov	r3, r2
 8016cb2:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 8016cb4:	2300      	movs	r3, #0
 8016cb6:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 8016cb8:	2300      	movs	r3, #0
 8016cba:	73bb      	strb	r3, [r7, #14]
 8016cbc:	e011      	b.n	8016ce2 <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8016cbe:	88fa      	ldrh	r2, [r7, #6]
 8016cc0:	7bbb      	ldrb	r3, [r7, #14]
 8016cc2:	2101      	movs	r1, #1
 8016cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8016cc8:	401a      	ands	r2, r3
 8016cca:	7bbb      	ldrb	r3, [r7, #14]
 8016ccc:	2101      	movs	r1, #1
 8016cce:	fa01 f303 	lsl.w	r3, r1, r3
 8016cd2:	429a      	cmp	r2, r3
 8016cd4:	d102      	bne.n	8016cdc <CountChannels+0x38>
        {
            nbActiveBits++;
 8016cd6:	7bfb      	ldrb	r3, [r7, #15]
 8016cd8:	3301      	adds	r3, #1
 8016cda:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 8016cdc:	7bbb      	ldrb	r3, [r7, #14]
 8016cde:	3301      	adds	r3, #1
 8016ce0:	73bb      	strb	r3, [r7, #14]
 8016ce2:	7bba      	ldrb	r2, [r7, #14]
 8016ce4:	797b      	ldrb	r3, [r7, #5]
 8016ce6:	429a      	cmp	r2, r3
 8016ce8:	d3e9      	bcc.n	8016cbe <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 8016cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8016cec:	4618      	mov	r0, r3
 8016cee:	3714      	adds	r7, #20
 8016cf0:	46bd      	mov	sp, r7
 8016cf2:	bc80      	pop	{r7}
 8016cf4:	4770      	bx	lr

08016cf6 <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 8016cf6:	b580      	push	{r7, lr}
 8016cf8:	b084      	sub	sp, #16
 8016cfa:	af00      	add	r7, sp, #0
 8016cfc:	6039      	str	r1, [r7, #0]
 8016cfe:	4611      	mov	r1, r2
 8016d00:	461a      	mov	r2, r3
 8016d02:	4603      	mov	r3, r0
 8016d04:	71fb      	strb	r3, [r7, #7]
 8016d06:	460b      	mov	r3, r1
 8016d08:	71bb      	strb	r3, [r7, #6]
 8016d0a:	4613      	mov	r3, r2
 8016d0c:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 8016d0e:	f997 2018 	ldrsb.w	r2, [r7, #24]
 8016d12:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8016d16:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8016d1a:	4618      	mov	r0, r3
 8016d1c:	f000 f85d 	bl	8016dda <RegionCommonValueInRange>
 8016d20:	4603      	mov	r3, r0
 8016d22:	2b00      	cmp	r3, #0
 8016d24:	d101      	bne.n	8016d2a <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 8016d26:	2300      	movs	r3, #0
 8016d28:	e053      	b.n	8016dd2 <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8016d2a:	2300      	movs	r3, #0
 8016d2c:	73fb      	strb	r3, [r7, #15]
 8016d2e:	2300      	movs	r3, #0
 8016d30:	73bb      	strb	r3, [r7, #14]
 8016d32:	e049      	b.n	8016dc8 <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8016d34:	2300      	movs	r3, #0
 8016d36:	737b      	strb	r3, [r7, #13]
 8016d38:	e03d      	b.n	8016db6 <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 8016d3a:	7bbb      	ldrb	r3, [r7, #14]
 8016d3c:	005b      	lsls	r3, r3, #1
 8016d3e:	683a      	ldr	r2, [r7, #0]
 8016d40:	4413      	add	r3, r2
 8016d42:	881b      	ldrh	r3, [r3, #0]
 8016d44:	461a      	mov	r2, r3
 8016d46:	7b7b      	ldrb	r3, [r7, #13]
 8016d48:	fa42 f303 	asr.w	r3, r2, r3
 8016d4c:	f003 0301 	and.w	r3, r3, #1
 8016d50:	2b00      	cmp	r3, #0
 8016d52:	d02d      	beq.n	8016db0 <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8016d54:	7bfa      	ldrb	r2, [r7, #15]
 8016d56:	7b7b      	ldrb	r3, [r7, #13]
 8016d58:	4413      	add	r3, r2
 8016d5a:	461a      	mov	r2, r3
 8016d5c:	4613      	mov	r3, r2
 8016d5e:	005b      	lsls	r3, r3, #1
 8016d60:	4413      	add	r3, r2
 8016d62:	009b      	lsls	r3, r3, #2
 8016d64:	461a      	mov	r2, r3
 8016d66:	69fb      	ldr	r3, [r7, #28]
 8016d68:	4413      	add	r3, r2
 8016d6a:	7a1b      	ldrb	r3, [r3, #8]
 8016d6c:	f343 0303 	sbfx	r3, r3, #0, #4
 8016d70:	b25b      	sxtb	r3, r3
 8016d72:	f003 030f 	and.w	r3, r3, #15
 8016d76:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8016d78:	7bfa      	ldrb	r2, [r7, #15]
 8016d7a:	7b7b      	ldrb	r3, [r7, #13]
 8016d7c:	4413      	add	r3, r2
 8016d7e:	461a      	mov	r2, r3
 8016d80:	4613      	mov	r3, r2
 8016d82:	005b      	lsls	r3, r3, #1
 8016d84:	4413      	add	r3, r2
 8016d86:	009b      	lsls	r3, r3, #2
 8016d88:	461a      	mov	r2, r3
 8016d8a:	69fb      	ldr	r3, [r7, #28]
 8016d8c:	4413      	add	r3, r2
 8016d8e:	7a1b      	ldrb	r3, [r3, #8]
 8016d90:	f343 1303 	sbfx	r3, r3, #4, #4
 8016d94:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8016d96:	f003 030f 	and.w	r3, r3, #15
 8016d9a:	b25a      	sxtb	r2, r3
 8016d9c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8016da0:	4618      	mov	r0, r3
 8016da2:	f000 f81a 	bl	8016dda <RegionCommonValueInRange>
 8016da6:	4603      	mov	r3, r0
 8016da8:	2b01      	cmp	r3, #1
 8016daa:	d101      	bne.n	8016db0 <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8016dac:	2301      	movs	r3, #1
 8016dae:	e010      	b.n	8016dd2 <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 8016db0:	7b7b      	ldrb	r3, [r7, #13]
 8016db2:	3301      	adds	r3, #1
 8016db4:	737b      	strb	r3, [r7, #13]
 8016db6:	7b7b      	ldrb	r3, [r7, #13]
 8016db8:	2b0f      	cmp	r3, #15
 8016dba:	d9be      	bls.n	8016d3a <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8016dbc:	7bfb      	ldrb	r3, [r7, #15]
 8016dbe:	3310      	adds	r3, #16
 8016dc0:	73fb      	strb	r3, [r7, #15]
 8016dc2:	7bbb      	ldrb	r3, [r7, #14]
 8016dc4:	3301      	adds	r3, #1
 8016dc6:	73bb      	strb	r3, [r7, #14]
 8016dc8:	7bfa      	ldrb	r2, [r7, #15]
 8016dca:	79fb      	ldrb	r3, [r7, #7]
 8016dcc:	429a      	cmp	r2, r3
 8016dce:	d3b1      	bcc.n	8016d34 <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 8016dd0:	2300      	movs	r3, #0
}
 8016dd2:	4618      	mov	r0, r3
 8016dd4:	3710      	adds	r7, #16
 8016dd6:	46bd      	mov	sp, r7
 8016dd8:	bd80      	pop	{r7, pc}

08016dda <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 8016dda:	b480      	push	{r7}
 8016ddc:	b083      	sub	sp, #12
 8016dde:	af00      	add	r7, sp, #0
 8016de0:	4603      	mov	r3, r0
 8016de2:	71fb      	strb	r3, [r7, #7]
 8016de4:	460b      	mov	r3, r1
 8016de6:	71bb      	strb	r3, [r7, #6]
 8016de8:	4613      	mov	r3, r2
 8016dea:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 8016dec:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8016df0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8016df4:	429a      	cmp	r2, r3
 8016df6:	db07      	blt.n	8016e08 <RegionCommonValueInRange+0x2e>
 8016df8:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8016dfc:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8016e00:	429a      	cmp	r2, r3
 8016e02:	dc01      	bgt.n	8016e08 <RegionCommonValueInRange+0x2e>
    {
        return 1;
 8016e04:	2301      	movs	r3, #1
 8016e06:	e000      	b.n	8016e0a <RegionCommonValueInRange+0x30>
    }
    return 0;
 8016e08:	2300      	movs	r3, #0
}
 8016e0a:	4618      	mov	r0, r3
 8016e0c:	370c      	adds	r7, #12
 8016e0e:	46bd      	mov	sp, r7
 8016e10:	bc80      	pop	{r7}
 8016e12:	4770      	bx	lr

08016e14 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 8016e14:	b480      	push	{r7}
 8016e16:	b085      	sub	sp, #20
 8016e18:	af00      	add	r7, sp, #0
 8016e1a:	6078      	str	r0, [r7, #4]
 8016e1c:	460b      	mov	r3, r1
 8016e1e:	70fb      	strb	r3, [r7, #3]
 8016e20:	4613      	mov	r3, r2
 8016e22:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 8016e24:	78fb      	ldrb	r3, [r7, #3]
 8016e26:	091b      	lsrs	r3, r3, #4
 8016e28:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8016e2a:	78bb      	ldrb	r3, [r7, #2]
 8016e2c:	091b      	lsrs	r3, r3, #4
 8016e2e:	b2db      	uxtb	r3, r3
 8016e30:	7bfa      	ldrb	r2, [r7, #15]
 8016e32:	429a      	cmp	r2, r3
 8016e34:	d803      	bhi.n	8016e3e <RegionCommonChanDisable+0x2a>
 8016e36:	78fa      	ldrb	r2, [r7, #3]
 8016e38:	78bb      	ldrb	r3, [r7, #2]
 8016e3a:	429a      	cmp	r2, r3
 8016e3c:	d301      	bcc.n	8016e42 <RegionCommonChanDisable+0x2e>
    {
        return false;
 8016e3e:	2300      	movs	r3, #0
 8016e40:	e017      	b.n	8016e72 <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 8016e42:	7bfb      	ldrb	r3, [r7, #15]
 8016e44:	005b      	lsls	r3, r3, #1
 8016e46:	687a      	ldr	r2, [r7, #4]
 8016e48:	4413      	add	r3, r2
 8016e4a:	881b      	ldrh	r3, [r3, #0]
 8016e4c:	b21a      	sxth	r2, r3
 8016e4e:	78fb      	ldrb	r3, [r7, #3]
 8016e50:	f003 030f 	and.w	r3, r3, #15
 8016e54:	2101      	movs	r1, #1
 8016e56:	fa01 f303 	lsl.w	r3, r1, r3
 8016e5a:	b21b      	sxth	r3, r3
 8016e5c:	43db      	mvns	r3, r3
 8016e5e:	b21b      	sxth	r3, r3
 8016e60:	4013      	ands	r3, r2
 8016e62:	b219      	sxth	r1, r3
 8016e64:	7bfb      	ldrb	r3, [r7, #15]
 8016e66:	005b      	lsls	r3, r3, #1
 8016e68:	687a      	ldr	r2, [r7, #4]
 8016e6a:	4413      	add	r3, r2
 8016e6c:	b28a      	uxth	r2, r1
 8016e6e:	801a      	strh	r2, [r3, #0]

    return true;
 8016e70:	2301      	movs	r3, #1
}
 8016e72:	4618      	mov	r0, r3
 8016e74:	3714      	adds	r7, #20
 8016e76:	46bd      	mov	sp, r7
 8016e78:	bc80      	pop	{r7}
 8016e7a:	4770      	bx	lr

08016e7c <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8016e7c:	b580      	push	{r7, lr}
 8016e7e:	b084      	sub	sp, #16
 8016e80:	af00      	add	r7, sp, #0
 8016e82:	6078      	str	r0, [r7, #4]
 8016e84:	460b      	mov	r3, r1
 8016e86:	70fb      	strb	r3, [r7, #3]
 8016e88:	4613      	mov	r3, r2
 8016e8a:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 8016e8c:	2300      	movs	r3, #0
 8016e8e:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 8016e90:	687b      	ldr	r3, [r7, #4]
 8016e92:	2b00      	cmp	r3, #0
 8016e94:	d101      	bne.n	8016e9a <RegionCommonCountChannels+0x1e>
    {
        return 0;
 8016e96:	2300      	movs	r3, #0
 8016e98:	e018      	b.n	8016ecc <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8016e9a:	78fb      	ldrb	r3, [r7, #3]
 8016e9c:	73bb      	strb	r3, [r7, #14]
 8016e9e:	e010      	b.n	8016ec2 <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8016ea0:	7bbb      	ldrb	r3, [r7, #14]
 8016ea2:	005b      	lsls	r3, r3, #1
 8016ea4:	687a      	ldr	r2, [r7, #4]
 8016ea6:	4413      	add	r3, r2
 8016ea8:	881b      	ldrh	r3, [r3, #0]
 8016eaa:	2110      	movs	r1, #16
 8016eac:	4618      	mov	r0, r3
 8016eae:	f7ff fef9 	bl	8016ca4 <CountChannels>
 8016eb2:	4603      	mov	r3, r0
 8016eb4:	461a      	mov	r2, r3
 8016eb6:	7bfb      	ldrb	r3, [r7, #15]
 8016eb8:	4413      	add	r3, r2
 8016eba:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8016ebc:	7bbb      	ldrb	r3, [r7, #14]
 8016ebe:	3301      	adds	r3, #1
 8016ec0:	73bb      	strb	r3, [r7, #14]
 8016ec2:	7bba      	ldrb	r2, [r7, #14]
 8016ec4:	78bb      	ldrb	r3, [r7, #2]
 8016ec6:	429a      	cmp	r2, r3
 8016ec8:	d3ea      	bcc.n	8016ea0 <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 8016eca:	7bfb      	ldrb	r3, [r7, #15]
}
 8016ecc:	4618      	mov	r0, r3
 8016ece:	3710      	adds	r7, #16
 8016ed0:	46bd      	mov	sp, r7
 8016ed2:	bd80      	pop	{r7, pc}

08016ed4 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8016ed4:	b480      	push	{r7}
 8016ed6:	b087      	sub	sp, #28
 8016ed8:	af00      	add	r7, sp, #0
 8016eda:	60f8      	str	r0, [r7, #12]
 8016edc:	60b9      	str	r1, [r7, #8]
 8016ede:	4613      	mov	r3, r2
 8016ee0:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8016ee2:	68fb      	ldr	r3, [r7, #12]
 8016ee4:	2b00      	cmp	r3, #0
 8016ee6:	d016      	beq.n	8016f16 <RegionCommonChanMaskCopy+0x42>
 8016ee8:	68bb      	ldr	r3, [r7, #8]
 8016eea:	2b00      	cmp	r3, #0
 8016eec:	d013      	beq.n	8016f16 <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 8016eee:	2300      	movs	r3, #0
 8016ef0:	75fb      	strb	r3, [r7, #23]
 8016ef2:	e00c      	b.n	8016f0e <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8016ef4:	7dfb      	ldrb	r3, [r7, #23]
 8016ef6:	005b      	lsls	r3, r3, #1
 8016ef8:	68ba      	ldr	r2, [r7, #8]
 8016efa:	441a      	add	r2, r3
 8016efc:	7dfb      	ldrb	r3, [r7, #23]
 8016efe:	005b      	lsls	r3, r3, #1
 8016f00:	68f9      	ldr	r1, [r7, #12]
 8016f02:	440b      	add	r3, r1
 8016f04:	8812      	ldrh	r2, [r2, #0]
 8016f06:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 8016f08:	7dfb      	ldrb	r3, [r7, #23]
 8016f0a:	3301      	adds	r3, #1
 8016f0c:	75fb      	strb	r3, [r7, #23]
 8016f0e:	7dfa      	ldrb	r2, [r7, #23]
 8016f10:	79fb      	ldrb	r3, [r7, #7]
 8016f12:	429a      	cmp	r2, r3
 8016f14:	d3ee      	bcc.n	8016ef4 <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 8016f16:	bf00      	nop
 8016f18:	371c      	adds	r7, #28
 8016f1a:	46bd      	mov	sp, r7
 8016f1c:	bc80      	pop	{r7}
 8016f1e:	4770      	bx	lr

08016f20 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8016f20:	b082      	sub	sp, #8
 8016f22:	b580      	push	{r7, lr}
 8016f24:	b086      	sub	sp, #24
 8016f26:	af00      	add	r7, sp, #0
 8016f28:	60f8      	str	r0, [r7, #12]
 8016f2a:	60b9      	str	r1, [r7, #8]
 8016f2c:	627b      	str	r3, [r7, #36]	; 0x24
 8016f2e:	4613      	mov	r3, r2
 8016f30:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8016f32:	79f9      	ldrb	r1, [r7, #7]
 8016f34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016f38:	cb0c      	ldmia	r3, {r2, r3}
 8016f3a:	68f8      	ldr	r0, [r7, #12]
 8016f3c:	f7ff fd8b 	bl	8016a56 <GetDutyCycle>
 8016f40:	4603      	mov	r3, r0
 8016f42:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8016f44:	68fb      	ldr	r3, [r7, #12]
 8016f46:	68da      	ldr	r2, [r3, #12]
 8016f48:	8afb      	ldrh	r3, [r7, #22]
 8016f4a:	68b9      	ldr	r1, [r7, #8]
 8016f4c:	fb01 f303 	mul.w	r3, r1, r3
 8016f50:	429a      	cmp	r2, r3
 8016f52:	d909      	bls.n	8016f68 <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8016f54:	68fb      	ldr	r3, [r7, #12]
 8016f56:	68da      	ldr	r2, [r3, #12]
 8016f58:	8afb      	ldrh	r3, [r7, #22]
 8016f5a:	68b9      	ldr	r1, [r7, #8]
 8016f5c:	fb01 f303 	mul.w	r3, r1, r3
 8016f60:	1ad2      	subs	r2, r2, r3
 8016f62:	68fb      	ldr	r3, [r7, #12]
 8016f64:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 8016f66:	e002      	b.n	8016f6e <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 8016f68:	68fb      	ldr	r3, [r7, #12]
 8016f6a:	2200      	movs	r2, #0
 8016f6c:	60da      	str	r2, [r3, #12]
}
 8016f6e:	bf00      	nop
 8016f70:	3718      	adds	r7, #24
 8016f72:	46bd      	mov	sp, r7
 8016f74:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8016f78:	b002      	add	sp, #8
 8016f7a:	4770      	bx	lr

08016f7c <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8016f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016f7e:	b08f      	sub	sp, #60	; 0x3c
 8016f80:	af04      	add	r7, sp, #16
 8016f82:	6039      	str	r1, [r7, #0]
 8016f84:	4611      	mov	r1, r2
 8016f86:	461a      	mov	r2, r3
 8016f88:	4603      	mov	r3, r0
 8016f8a:	71fb      	strb	r3, [r7, #7]
 8016f8c:	460b      	mov	r3, r1
 8016f8e:	71bb      	strb	r3, [r7, #6]
 8016f90:	4613      	mov	r3, r2
 8016f92:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8016f94:	f04f 33ff 	mov.w	r3, #4294967295
 8016f98:	627b      	str	r3, [r7, #36]	; 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8016f9a:	f007 fb3d 	bl	801e618 <UTIL_TIMER_GetCurrentTime>
 8016f9e:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 8016fa0:	2300      	movs	r3, #0
 8016fa2:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 8016fa4:	2301      	movs	r3, #1
 8016fa6:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 8016fa8:	2300      	movs	r3, #0
 8016faa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 8016fae:	2300      	movs	r3, #0
 8016fb0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8016fb4:	e0ba      	b.n	801712c <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 8016fb6:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8016fba:	4613      	mov	r3, r2
 8016fbc:	005b      	lsls	r3, r3, #1
 8016fbe:	4413      	add	r3, r2
 8016fc0:	00db      	lsls	r3, r3, #3
 8016fc2:	461a      	mov	r2, r3
 8016fc4:	683b      	ldr	r3, [r7, #0]
 8016fc6:	189c      	adds	r4, r3, r2
 8016fc8:	f897 6040 	ldrb.w	r6, [r7, #64]	; 0x40
 8016fcc:	797a      	ldrb	r2, [r7, #5]
 8016fce:	79fd      	ldrb	r5, [r7, #7]
 8016fd0:	69fb      	ldr	r3, [r7, #28]
 8016fd2:	9302      	str	r3, [sp, #8]
 8016fd4:	46ec      	mov	ip, sp
 8016fd6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8016fda:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016fde:	e88c 0003 	stmia.w	ip, {r0, r1}
 8016fe2:	4633      	mov	r3, r6
 8016fe4:	4629      	mov	r1, r5
 8016fe6:	4620      	mov	r0, r4
 8016fe8:	f7ff fe22 	bl	8016c30 <UpdateTimeCredits>
 8016fec:	4603      	mov	r3, r0
 8016fee:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 8016ff0:	8afa      	ldrh	r2, [r7, #22]
 8016ff2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016ff4:	fb02 f303 	mul.w	r3, r2, r3
 8016ff8:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 8016ffa:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8016ffe:	4613      	mov	r3, r2
 8017000:	005b      	lsls	r3, r3, #1
 8017002:	4413      	add	r3, r2
 8017004:	00db      	lsls	r3, r3, #3
 8017006:	461a      	mov	r2, r3
 8017008:	683b      	ldr	r3, [r7, #0]
 801700a:	4413      	add	r3, r2
 801700c:	68db      	ldr	r3, [r3, #12]
 801700e:	69ba      	ldr	r2, [r7, #24]
 8017010:	429a      	cmp	r2, r3
 8017012:	d908      	bls.n	8017026 <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8017014:	797b      	ldrb	r3, [r7, #5]
 8017016:	f083 0301 	eor.w	r3, r3, #1
 801701a:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 801701c:	2b00      	cmp	r3, #0
 801701e:	d013      	beq.n	8017048 <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8017020:	79fb      	ldrb	r3, [r7, #7]
 8017022:	2b00      	cmp	r3, #0
 8017024:	d010      	beq.n	8017048 <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 8017026:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801702a:	4613      	mov	r3, r2
 801702c:	005b      	lsls	r3, r3, #1
 801702e:	4413      	add	r3, r2
 8017030:	00db      	lsls	r3, r3, #3
 8017032:	461a      	mov	r2, r3
 8017034:	683b      	ldr	r3, [r7, #0]
 8017036:	4413      	add	r3, r2
 8017038:	2201      	movs	r2, #1
 801703a:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 801703c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017040:	3301      	adds	r3, #1
 8017042:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8017046:	e06c      	b.n	8017122 <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 8017048:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801704c:	4613      	mov	r3, r2
 801704e:	005b      	lsls	r3, r3, #1
 8017050:	4413      	add	r3, r2
 8017052:	00db      	lsls	r3, r3, #3
 8017054:	461a      	mov	r2, r3
 8017056:	683b      	ldr	r3, [r7, #0]
 8017058:	4413      	add	r3, r2
 801705a:	2200      	movs	r2, #0
 801705c:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits >= creditCosts )
 801705e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8017062:	4613      	mov	r3, r2
 8017064:	005b      	lsls	r3, r3, #1
 8017066:	4413      	add	r3, r2
 8017068:	00db      	lsls	r3, r3, #3
 801706a:	461a      	mov	r2, r3
 801706c:	683b      	ldr	r3, [r7, #0]
 801706e:	4413      	add	r3, r2
 8017070:	691b      	ldr	r3, [r3, #16]
 8017072:	69ba      	ldr	r2, [r7, #24]
 8017074:	429a      	cmp	r2, r3
 8017076:	d815      	bhi.n	80170a4 <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 8017078:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801707c:	4613      	mov	r3, r2
 801707e:	005b      	lsls	r3, r3, #1
 8017080:	4413      	add	r3, r2
 8017082:	00db      	lsls	r3, r3, #3
 8017084:	461a      	mov	r2, r3
 8017086:	683b      	ldr	r3, [r7, #0]
 8017088:	4413      	add	r3, r2
 801708a:	68db      	ldr	r3, [r3, #12]
 801708c:	69ba      	ldr	r2, [r7, #24]
 801708e:	1ad3      	subs	r3, r2, r3
 8017090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017092:	4293      	cmp	r3, r2
 8017094:	bf28      	it	cs
 8017096:	4613      	movcs	r3, r2
 8017098:	627b      	str	r3, [r7, #36]	; 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 801709a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801709e:	3301      	adds	r3, #1
 80170a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 80170a4:	79fb      	ldrb	r3, [r7, #7]
 80170a6:	f083 0301 	eor.w	r3, r3, #1
 80170aa:	b2db      	uxtb	r3, r3
 80170ac:	2b00      	cmp	r3, #0
 80170ae:	d038      	beq.n	8017122 <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 80170b0:	2300      	movs	r3, #0
 80170b2:	60fb      	str	r3, [r7, #12]
 80170b4:	2300      	movs	r3, #0
 80170b6:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 80170b8:	8afb      	ldrh	r3, [r7, #22]
 80170ba:	2b64      	cmp	r3, #100	; 0x64
 80170bc:	d103      	bne.n	80170c6 <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 80170be:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80170c2:	60fb      	str	r3, [r7, #12]
 80170c4:	e009      	b.n	80170da <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 80170c6:	8afb      	ldrh	r3, [r7, #22]
 80170c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80170cc:	d103      	bne.n	80170d6 <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 80170ce:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 80170d2:	60fb      	str	r3, [r7, #12]
 80170d4:	e001      	b.n	80170da <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 80170d6:	4b1e      	ldr	r3, [pc, #120]	; (8017150 <RegionCommonUpdateBandTimeOff+0x1d4>)
 80170d8:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 80170da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80170dc:	4a1c      	ldr	r2, [pc, #112]	; (8017150 <RegionCommonUpdateBandTimeOff+0x1d4>)
 80170de:	4293      	cmp	r3, r2
 80170e0:	d90e      	bls.n	8017100 <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 80170e2:	68fa      	ldr	r2, [r7, #12]
 80170e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80170e6:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 80170ea:	3b30      	subs	r3, #48	; 0x30
 80170ec:	4919      	ldr	r1, [pc, #100]	; (8017154 <RegionCommonUpdateBandTimeOff+0x1d8>)
 80170ee:	fba1 1303 	umull	r1, r3, r1, r3
 80170f2:	0c1b      	lsrs	r3, r3, #16
 80170f4:	3301      	adds	r3, #1
 80170f6:	4918      	ldr	r1, [pc, #96]	; (8017158 <RegionCommonUpdateBandTimeOff+0x1dc>)
 80170f8:	fb01 f303 	mul.w	r3, r1, r3
 80170fc:	4413      	add	r3, r2
 80170fe:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 8017100:	f107 000c 	add.w	r0, r7, #12
 8017104:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017106:	9300      	str	r3, [sp, #0]
 8017108:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801710a:	f107 020c 	add.w	r2, r7, #12
 801710e:	ca06      	ldmia	r2, {r1, r2}
 8017110:	f006 fb99 	bl	801d846 <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 8017114:	f107 030c 	add.w	r3, r7, #12
 8017118:	e893 0003 	ldmia.w	r3, {r0, r1}
 801711c:	f006 fc52 	bl	801d9c4 <SysTimeToMs>
 8017120:	6278      	str	r0, [r7, #36]	; 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 8017122:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017126:	3301      	adds	r3, #1
 8017128:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 801712c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8017130:	79bb      	ldrb	r3, [r7, #6]
 8017132:	429a      	cmp	r2, r3
 8017134:	f4ff af3f 	bcc.w	8016fb6 <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }

    if( validBands == 0 )
 8017138:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801713c:	2b00      	cmp	r3, #0
 801713e:	d102      	bne.n	8017146 <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 8017140:	f04f 33ff 	mov.w	r3, #4294967295
 8017144:	e000      	b.n	8017148 <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 8017146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8017148:	4618      	mov	r0, r3
 801714a:	372c      	adds	r7, #44	; 0x2c
 801714c:	46bd      	mov	sp, r7
 801714e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017150:	0001ec30 	.word	0x0001ec30
 8017154:	c22e4507 	.word	0xc22e4507
 8017158:	00015180 	.word	0x00015180

0801715c <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 801715c:	b480      	push	{r7}
 801715e:	b085      	sub	sp, #20
 8017160:	af00      	add	r7, sp, #0
 8017162:	6078      	str	r0, [r7, #4]
 8017164:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 8017166:	2300      	movs	r3, #0
 8017168:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 801716a:	687b      	ldr	r3, [r7, #4]
 801716c:	781b      	ldrb	r3, [r3, #0]
 801716e:	2b03      	cmp	r3, #3
 8017170:	d13f      	bne.n	80171f2 <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 8017172:	687b      	ldr	r3, [r7, #4]
 8017174:	3301      	adds	r3, #1
 8017176:	781b      	ldrb	r3, [r3, #0]
 8017178:	b25a      	sxtb	r2, r3
 801717a:	683b      	ldr	r3, [r7, #0]
 801717c:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 801717e:	683b      	ldr	r3, [r7, #0]
 8017180:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017184:	f003 030f 	and.w	r3, r3, #15
 8017188:	b25a      	sxtb	r2, r3
 801718a:	683b      	ldr	r3, [r7, #0]
 801718c:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 801718e:	683b      	ldr	r3, [r7, #0]
 8017190:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017194:	b2db      	uxtb	r3, r3
 8017196:	091b      	lsrs	r3, r3, #4
 8017198:	b2db      	uxtb	r3, r3
 801719a:	b25a      	sxtb	r2, r3
 801719c:	683b      	ldr	r3, [r7, #0]
 801719e:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 80171a0:	687b      	ldr	r3, [r7, #4]
 80171a2:	3302      	adds	r3, #2
 80171a4:	781b      	ldrb	r3, [r3, #0]
 80171a6:	b29a      	uxth	r2, r3
 80171a8:	683b      	ldr	r3, [r7, #0]
 80171aa:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 80171ac:	683b      	ldr	r3, [r7, #0]
 80171ae:	889b      	ldrh	r3, [r3, #4]
 80171b0:	b21a      	sxth	r2, r3
 80171b2:	687b      	ldr	r3, [r7, #4]
 80171b4:	3303      	adds	r3, #3
 80171b6:	781b      	ldrb	r3, [r3, #0]
 80171b8:	021b      	lsls	r3, r3, #8
 80171ba:	b21b      	sxth	r3, r3
 80171bc:	4313      	orrs	r3, r2
 80171be:	b21b      	sxth	r3, r3
 80171c0:	b29a      	uxth	r2, r3
 80171c2:	683b      	ldr	r3, [r7, #0]
 80171c4:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 80171c6:	687b      	ldr	r3, [r7, #4]
 80171c8:	791a      	ldrb	r2, [r3, #4]
 80171ca:	683b      	ldr	r3, [r7, #0]
 80171cc:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 80171ce:	683b      	ldr	r3, [r7, #0]
 80171d0:	781b      	ldrb	r3, [r3, #0]
 80171d2:	091b      	lsrs	r3, r3, #4
 80171d4:	b2db      	uxtb	r3, r3
 80171d6:	f003 0307 	and.w	r3, r3, #7
 80171da:	b2da      	uxtb	r2, r3
 80171dc:	683b      	ldr	r3, [r7, #0]
 80171de:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 80171e0:	683b      	ldr	r3, [r7, #0]
 80171e2:	781b      	ldrb	r3, [r3, #0]
 80171e4:	f003 030f 	and.w	r3, r3, #15
 80171e8:	b2da      	uxtb	r2, r3
 80171ea:	683b      	ldr	r3, [r7, #0]
 80171ec:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 80171ee:	2305      	movs	r3, #5
 80171f0:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 80171f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80171f4:	4618      	mov	r0, r3
 80171f6:	3714      	adds	r7, #20
 80171f8:	46bd      	mov	sp, r7
 80171fa:	bc80      	pop	{r7}
 80171fc:	4770      	bx	lr

080171fe <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 80171fe:	b5b0      	push	{r4, r5, r7, lr}
 8017200:	b088      	sub	sp, #32
 8017202:	af02      	add	r7, sp, #8
 8017204:	60f8      	str	r0, [r7, #12]
 8017206:	60b9      	str	r1, [r7, #8]
 8017208:	607a      	str	r2, [r7, #4]
 801720a:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 801720c:	68fb      	ldr	r3, [r7, #12]
 801720e:	791b      	ldrb	r3, [r3, #4]
 8017210:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 8017212:	68fb      	ldr	r3, [r7, #12]
 8017214:	799b      	ldrb	r3, [r3, #6]
 8017216:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 8017218:	68fb      	ldr	r3, [r7, #12]
 801721a:	79db      	ldrb	r3, [r3, #7]
 801721c:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 801721e:	68fb      	ldr	r3, [r7, #12]
 8017220:	7a1b      	ldrb	r3, [r3, #8]
 8017222:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 8017224:	68fb      	ldr	r3, [r7, #12]
 8017226:	795b      	ldrb	r3, [r3, #5]
 8017228:	f083 0301 	eor.w	r3, r3, #1
 801722c:	b2db      	uxtb	r3, r3
 801722e:	2b00      	cmp	r3, #0
 8017230:	d008      	beq.n	8017244 <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 8017232:	68fb      	ldr	r3, [r7, #12]
 8017234:	7adb      	ldrb	r3, [r3, #11]
 8017236:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 8017238:	68fb      	ldr	r3, [r7, #12]
 801723a:	7a5b      	ldrb	r3, [r3, #9]
 801723c:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 801723e:	68fb      	ldr	r3, [r7, #12]
 8017240:	7a9b      	ldrb	r3, [r3, #10]
 8017242:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 8017244:	7dfb      	ldrb	r3, [r7, #23]
 8017246:	2b00      	cmp	r3, #0
 8017248:	d04a      	beq.n	80172e0 <RegionCommonLinkAdrReqVerifyParams+0xe2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 801724a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 801724e:	2b0f      	cmp	r3, #15
 8017250:	d103      	bne.n	801725a <RegionCommonLinkAdrReqVerifyParams+0x5c>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 8017252:	68fb      	ldr	r3, [r7, #12]
 8017254:	7a5b      	ldrb	r3, [r3, #9]
 8017256:	75bb      	strb	r3, [r7, #22]
 8017258:	e01d      	b.n	8017296 <RegionCommonLinkAdrReqVerifyParams+0x98>
        }
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 801725a:	68fb      	ldr	r3, [r7, #12]
 801725c:	7b18      	ldrb	r0, [r3, #12]
 801725e:	68fb      	ldr	r3, [r7, #12]
 8017260:	6919      	ldr	r1, [r3, #16]
 8017262:	68fb      	ldr	r3, [r7, #12]
 8017264:	f993 5014 	ldrsb.w	r5, [r3, #20]
 8017268:	68fb      	ldr	r3, [r7, #12]
 801726a:	f993 3015 	ldrsb.w	r3, [r3, #21]
 801726e:	68fa      	ldr	r2, [r7, #12]
 8017270:	6992      	ldr	r2, [r2, #24]
 8017272:	f997 4016 	ldrsb.w	r4, [r7, #22]
 8017276:	9201      	str	r2, [sp, #4]
 8017278:	9300      	str	r3, [sp, #0]
 801727a:	462b      	mov	r3, r5
 801727c:	4622      	mov	r2, r4
 801727e:	f7ff fd3a 	bl	8016cf6 <RegionCommonChanVerifyDr>
 8017282:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 8017284:	f083 0301 	eor.w	r3, r3, #1
 8017288:	b2db      	uxtb	r3, r3
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 801728a:	2b00      	cmp	r3, #0
 801728c:	d003      	beq.n	8017296 <RegionCommonLinkAdrReqVerifyParams+0x98>
        {
            status &= 0xFD; // Datarate KO
 801728e:	7dfb      	ldrb	r3, [r7, #23]
 8017290:	f023 0302 	bic.w	r3, r3, #2
 8017294:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( txPower == 0x0F )
 8017296:	f997 3015 	ldrsb.w	r3, [r7, #21]
 801729a:	2b0f      	cmp	r3, #15
 801729c:	d103      	bne.n	80172a6 <RegionCommonLinkAdrReqVerifyParams+0xa8>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
 801729e:	68fb      	ldr	r3, [r7, #12]
 80172a0:	7a9b      	ldrb	r3, [r3, #10]
 80172a2:	757b      	strb	r3, [r7, #21]
 80172a4:	e01c      	b.n	80172e0 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 80172a6:	68fb      	ldr	r3, [r7, #12]
 80172a8:	f993 101d 	ldrsb.w	r1, [r3, #29]
 80172ac:	68fb      	ldr	r3, [r7, #12]
 80172ae:	f993 201c 	ldrsb.w	r2, [r3, #28]
 80172b2:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80172b6:	4618      	mov	r0, r3
 80172b8:	f7ff fd8f 	bl	8016dda <RegionCommonValueInRange>
 80172bc:	4603      	mov	r3, r0
 80172be:	2b00      	cmp	r3, #0
 80172c0:	d10e      	bne.n	80172e0 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 80172c2:	68fb      	ldr	r3, [r7, #12]
 80172c4:	f993 301d 	ldrsb.w	r3, [r3, #29]
 80172c8:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80172cc:	429a      	cmp	r2, r3
 80172ce:	da03      	bge.n	80172d8 <RegionCommonLinkAdrReqVerifyParams+0xda>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 80172d0:	68fb      	ldr	r3, [r7, #12]
 80172d2:	7f5b      	ldrb	r3, [r3, #29]
 80172d4:	757b      	strb	r3, [r7, #21]
 80172d6:	e003      	b.n	80172e0 <RegionCommonLinkAdrReqVerifyParams+0xe2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 80172d8:	7dfb      	ldrb	r3, [r7, #23]
 80172da:	f023 0304 	bic.w	r3, r3, #4
 80172de:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 80172e0:	7dfb      	ldrb	r3, [r7, #23]
 80172e2:	2b07      	cmp	r3, #7
 80172e4:	d105      	bne.n	80172f2 <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        if( nbRepetitions == 0 )
 80172e6:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80172ea:	2b00      	cmp	r3, #0
 80172ec:	d101      	bne.n	80172f2 <RegionCommonLinkAdrReqVerifyParams+0xf4>
        { // Set nbRep to the default value of 1.
            nbRepetitions = 1;
 80172ee:	2301      	movs	r3, #1
 80172f0:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 80172f2:	68bb      	ldr	r3, [r7, #8]
 80172f4:	7dba      	ldrb	r2, [r7, #22]
 80172f6:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 80172f8:	687b      	ldr	r3, [r7, #4]
 80172fa:	7d7a      	ldrb	r2, [r7, #21]
 80172fc:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 80172fe:	7d3a      	ldrb	r2, [r7, #20]
 8017300:	683b      	ldr	r3, [r7, #0]
 8017302:	701a      	strb	r2, [r3, #0]

    return status;
 8017304:	7dfb      	ldrb	r3, [r7, #23]
}
 8017306:	4618      	mov	r0, r3
 8017308:	3718      	adds	r7, #24
 801730a:	46bd      	mov	sp, r7
 801730c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08017310 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 8017310:	b480      	push	{r7}
 8017312:	b083      	sub	sp, #12
 8017314:	af00      	add	r7, sp, #0
 8017316:	4603      	mov	r3, r0
 8017318:	6039      	str	r1, [r7, #0]
 801731a:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 801731c:	79fb      	ldrb	r3, [r7, #7]
 801731e:	4a06      	ldr	r2, [pc, #24]	; (8017338 <RegionCommonComputeSymbolTimeLoRa+0x28>)
 8017320:	fa02 f303 	lsl.w	r3, r2, r3
 8017324:	461a      	mov	r2, r3
 8017326:	683b      	ldr	r3, [r7, #0]
 8017328:	fbb2 f3f3 	udiv	r3, r2, r3
}
 801732c:	4618      	mov	r0, r3
 801732e:	370c      	adds	r7, #12
 8017330:	46bd      	mov	sp, r7
 8017332:	bc80      	pop	{r7}
 8017334:	4770      	bx	lr
 8017336:	bf00      	nop
 8017338:	000f4240 	.word	0x000f4240

0801733c <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 801733c:	b480      	push	{r7}
 801733e:	b083      	sub	sp, #12
 8017340:	af00      	add	r7, sp, #0
 8017342:	4603      	mov	r3, r0
 8017344:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 8017346:	79fb      	ldrb	r3, [r7, #7]
 8017348:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801734c:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8017350:	4618      	mov	r0, r3
 8017352:	370c      	adds	r7, #12
 8017354:	46bd      	mov	sp, r7
 8017356:	bc80      	pop	{r7}
 8017358:	4770      	bx	lr
	...

0801735c <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 801735c:	b480      	push	{r7}
 801735e:	b085      	sub	sp, #20
 8017360:	af00      	add	r7, sp, #0
 8017362:	60f8      	str	r0, [r7, #12]
 8017364:	607a      	str	r2, [r7, #4]
 8017366:	603b      	str	r3, [r7, #0]
 8017368:	460b      	mov	r3, r1
 801736a:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 801736c:	7afa      	ldrb	r2, [r7, #11]
 801736e:	7afb      	ldrb	r3, [r7, #11]
 8017370:	3b04      	subs	r3, #4
 8017372:	4619      	mov	r1, r3
 8017374:	68fb      	ldr	r3, [r7, #12]
 8017376:	fb03 f101 	mul.w	r1, r3, r1
 801737a:	687b      	ldr	r3, [r7, #4]
 801737c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8017380:	fb00 f303 	mul.w	r3, r0, r3
 8017384:	440b      	add	r3, r1
 8017386:	005b      	lsls	r3, r3, #1
 8017388:	2b00      	cmp	r3, #0
 801738a:	d013      	beq.n	80173b4 <RegionCommonComputeRxWindowParameters+0x58>
 801738c:	7afb      	ldrb	r3, [r7, #11]
 801738e:	3b04      	subs	r3, #4
 8017390:	4619      	mov	r1, r3
 8017392:	68fb      	ldr	r3, [r7, #12]
 8017394:	fb03 f101 	mul.w	r1, r3, r1
 8017398:	687b      	ldr	r3, [r7, #4]
 801739a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801739e:	fb00 f303 	mul.w	r3, r0, r3
 80173a2:	440b      	add	r3, r1
 80173a4:	0059      	lsls	r1, r3, #1
 80173a6:	68fb      	ldr	r3, [r7, #12]
 80173a8:	440b      	add	r3, r1
 80173aa:	1e59      	subs	r1, r3, #1
 80173ac:	68fb      	ldr	r3, [r7, #12]
 80173ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80173b2:	e00f      	b.n	80173d4 <RegionCommonComputeRxWindowParameters+0x78>
 80173b4:	7afb      	ldrb	r3, [r7, #11]
 80173b6:	3b04      	subs	r3, #4
 80173b8:	4619      	mov	r1, r3
 80173ba:	68fb      	ldr	r3, [r7, #12]
 80173bc:	fb03 f101 	mul.w	r1, r3, r1
 80173c0:	687b      	ldr	r3, [r7, #4]
 80173c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80173c6:	fb00 f303 	mul.w	r3, r0, r3
 80173ca:	440b      	add	r3, r1
 80173cc:	0059      	lsls	r1, r3, #1
 80173ce:	68fb      	ldr	r3, [r7, #12]
 80173d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80173d4:	429a      	cmp	r2, r3
 80173d6:	bf38      	it	cc
 80173d8:	461a      	movcc	r2, r3
 80173da:	69bb      	ldr	r3, [r7, #24]
 80173dc:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 80173de:	68fb      	ldr	r3, [r7, #12]
 80173e0:	009b      	lsls	r3, r3, #2
 80173e2:	4619      	mov	r1, r3
 80173e4:	69bb      	ldr	r3, [r7, #24]
 80173e6:	681b      	ldr	r3, [r3, #0]
 80173e8:	68fa      	ldr	r2, [r7, #12]
 80173ea:	fb02 f303 	mul.w	r3, r2, r3
 80173ee:	2b00      	cmp	r3, #0
 80173f0:	d007      	beq.n	8017402 <RegionCommonComputeRxWindowParameters+0xa6>
 80173f2:	69bb      	ldr	r3, [r7, #24]
 80173f4:	681b      	ldr	r3, [r3, #0]
 80173f6:	68fa      	ldr	r2, [r7, #12]
 80173f8:	fb02 f303 	mul.w	r3, r2, r3
 80173fc:	3301      	adds	r3, #1
 80173fe:	085b      	lsrs	r3, r3, #1
 8017400:	e005      	b.n	801740e <RegionCommonComputeRxWindowParameters+0xb2>
 8017402:	69bb      	ldr	r3, [r7, #24]
 8017404:	681b      	ldr	r3, [r3, #0]
 8017406:	68fa      	ldr	r2, [r7, #12]
 8017408:	fb02 f303 	mul.w	r3, r2, r3
 801740c:	085b      	lsrs	r3, r3, #1
 801740e:	1acb      	subs	r3, r1, r3
 8017410:	683a      	ldr	r2, [r7, #0]
 8017412:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8017416:	fb01 f202 	mul.w	r2, r1, r2
 801741a:	1a9b      	subs	r3, r3, r2
 801741c:	2b00      	cmp	r3, #0
 801741e:	dd27      	ble.n	8017470 <RegionCommonComputeRxWindowParameters+0x114>
 8017420:	68fb      	ldr	r3, [r7, #12]
 8017422:	009b      	lsls	r3, r3, #2
 8017424:	4619      	mov	r1, r3
 8017426:	69bb      	ldr	r3, [r7, #24]
 8017428:	681b      	ldr	r3, [r3, #0]
 801742a:	68fa      	ldr	r2, [r7, #12]
 801742c:	fb02 f303 	mul.w	r3, r2, r3
 8017430:	2b00      	cmp	r3, #0
 8017432:	d007      	beq.n	8017444 <RegionCommonComputeRxWindowParameters+0xe8>
 8017434:	69bb      	ldr	r3, [r7, #24]
 8017436:	681b      	ldr	r3, [r3, #0]
 8017438:	68fa      	ldr	r2, [r7, #12]
 801743a:	fb02 f303 	mul.w	r3, r2, r3
 801743e:	3301      	adds	r3, #1
 8017440:	085b      	lsrs	r3, r3, #1
 8017442:	e005      	b.n	8017450 <RegionCommonComputeRxWindowParameters+0xf4>
 8017444:	69bb      	ldr	r3, [r7, #24]
 8017446:	681b      	ldr	r3, [r3, #0]
 8017448:	68fa      	ldr	r2, [r7, #12]
 801744a:	fb02 f303 	mul.w	r3, r2, r3
 801744e:	085b      	lsrs	r3, r3, #1
 8017450:	1acb      	subs	r3, r1, r3
 8017452:	683a      	ldr	r2, [r7, #0]
 8017454:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8017458:	fb01 f202 	mul.w	r2, r1, r2
 801745c:	1a9b      	subs	r3, r3, r2
 801745e:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 8017462:	4a19      	ldr	r2, [pc, #100]	; (80174c8 <RegionCommonComputeRxWindowParameters+0x16c>)
 8017464:	fb82 1203 	smull	r1, r2, r2, r3
 8017468:	1192      	asrs	r2, r2, #6
 801746a:	17db      	asrs	r3, r3, #31
 801746c:	1ad3      	subs	r3, r2, r3
 801746e:	e024      	b.n	80174ba <RegionCommonComputeRxWindowParameters+0x15e>
 8017470:	68fb      	ldr	r3, [r7, #12]
 8017472:	009b      	lsls	r3, r3, #2
 8017474:	4619      	mov	r1, r3
 8017476:	69bb      	ldr	r3, [r7, #24]
 8017478:	681b      	ldr	r3, [r3, #0]
 801747a:	68fa      	ldr	r2, [r7, #12]
 801747c:	fb02 f303 	mul.w	r3, r2, r3
 8017480:	2b00      	cmp	r3, #0
 8017482:	d007      	beq.n	8017494 <RegionCommonComputeRxWindowParameters+0x138>
 8017484:	69bb      	ldr	r3, [r7, #24]
 8017486:	681b      	ldr	r3, [r3, #0]
 8017488:	68fa      	ldr	r2, [r7, #12]
 801748a:	fb02 f303 	mul.w	r3, r2, r3
 801748e:	3301      	adds	r3, #1
 8017490:	085b      	lsrs	r3, r3, #1
 8017492:	e005      	b.n	80174a0 <RegionCommonComputeRxWindowParameters+0x144>
 8017494:	69bb      	ldr	r3, [r7, #24]
 8017496:	681b      	ldr	r3, [r3, #0]
 8017498:	68fa      	ldr	r2, [r7, #12]
 801749a:	fb02 f303 	mul.w	r3, r2, r3
 801749e:	085b      	lsrs	r3, r3, #1
 80174a0:	1acb      	subs	r3, r1, r3
 80174a2:	683a      	ldr	r2, [r7, #0]
 80174a4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80174a8:	fb01 f202 	mul.w	r2, r1, r2
 80174ac:	1a9b      	subs	r3, r3, r2
 80174ae:	4a06      	ldr	r2, [pc, #24]	; (80174c8 <RegionCommonComputeRxWindowParameters+0x16c>)
 80174b0:	fb82 1203 	smull	r1, r2, r2, r3
 80174b4:	1192      	asrs	r2, r2, #6
 80174b6:	17db      	asrs	r3, r3, #31
 80174b8:	1ad3      	subs	r3, r2, r3
 80174ba:	69fa      	ldr	r2, [r7, #28]
 80174bc:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 80174be:	bf00      	nop
 80174c0:	3714      	adds	r7, #20
 80174c2:	46bd      	mov	sp, r7
 80174c4:	bc80      	pop	{r7}
 80174c6:	4770      	bx	lr
 80174c8:	10624dd3 	.word	0x10624dd3

080174cc <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 80174cc:	b580      	push	{r7, lr}
 80174ce:	b086      	sub	sp, #24
 80174d0:	af00      	add	r7, sp, #0
 80174d2:	4603      	mov	r3, r0
 80174d4:	60b9      	str	r1, [r7, #8]
 80174d6:	607a      	str	r2, [r7, #4]
 80174d8:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 80174da:	2300      	movs	r3, #0
 80174dc:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 80174de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80174e2:	005b      	lsls	r3, r3, #1
 80174e4:	4618      	mov	r0, r3
 80174e6:	f7e9 fbd3 	bl	8000c90 <__aeabi_ui2f>
 80174ea:	4603      	mov	r3, r0
 80174ec:	4619      	mov	r1, r3
 80174ee:	68b8      	ldr	r0, [r7, #8]
 80174f0:	f7e9 fb1c 	bl	8000b2c <__aeabi_fsub>
 80174f4:	4603      	mov	r3, r0
 80174f6:	6879      	ldr	r1, [r7, #4]
 80174f8:	4618      	mov	r0, r3
 80174fa:	f7e9 fb17 	bl	8000b2c <__aeabi_fsub>
 80174fe:	4603      	mov	r3, r0
 8017500:	4618      	mov	r0, r3
 8017502:	f7e8 ffa5 	bl	8000450 <__aeabi_f2d>
 8017506:	4602      	mov	r2, r0
 8017508:	460b      	mov	r3, r1
 801750a:	4610      	mov	r0, r2
 801750c:	4619      	mov	r1, r3
 801750e:	f007 fc17 	bl	801ed40 <floor>
 8017512:	4602      	mov	r2, r0
 8017514:	460b      	mov	r3, r1
 8017516:	4610      	mov	r0, r2
 8017518:	4619      	mov	r1, r3
 801751a:	f7e9 fa8b 	bl	8000a34 <__aeabi_d2iz>
 801751e:	4603      	mov	r3, r0
 8017520:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 8017522:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017526:	4618      	mov	r0, r3
 8017528:	3718      	adds	r7, #24
 801752a:	46bd      	mov	sp, r7
 801752c:	bd80      	pop	{r7, pc}

0801752e <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 801752e:	b590      	push	{r4, r7, lr}
 8017530:	b087      	sub	sp, #28
 8017532:	af00      	add	r7, sp, #0
 8017534:	60f8      	str	r0, [r7, #12]
 8017536:	60b9      	str	r1, [r7, #8]
 8017538:	607a      	str	r2, [r7, #4]
 801753a:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 801753c:	2300      	movs	r3, #0
 801753e:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 8017540:	2300      	movs	r3, #0
 8017542:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8017544:	2300      	movs	r3, #0
 8017546:	757b      	strb	r3, [r7, #21]
 8017548:	2300      	movs	r3, #0
 801754a:	753b      	strb	r3, [r7, #20]
 801754c:	e09c      	b.n	8017688 <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 801754e:	2300      	movs	r3, #0
 8017550:	74fb      	strb	r3, [r7, #19]
 8017552:	e08f      	b.n	8017674 <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 8017554:	68fb      	ldr	r3, [r7, #12]
 8017556:	685a      	ldr	r2, [r3, #4]
 8017558:	7d3b      	ldrb	r3, [r7, #20]
 801755a:	005b      	lsls	r3, r3, #1
 801755c:	4413      	add	r3, r2
 801755e:	881b      	ldrh	r3, [r3, #0]
 8017560:	461a      	mov	r2, r3
 8017562:	7cfb      	ldrb	r3, [r7, #19]
 8017564:	fa42 f303 	asr.w	r3, r2, r3
 8017568:	f003 0301 	and.w	r3, r3, #1
 801756c:	2b00      	cmp	r3, #0
 801756e:	d07e      	beq.n	801766e <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8017570:	68fb      	ldr	r3, [r7, #12]
 8017572:	689a      	ldr	r2, [r3, #8]
 8017574:	7d79      	ldrb	r1, [r7, #21]
 8017576:	7cfb      	ldrb	r3, [r7, #19]
 8017578:	440b      	add	r3, r1
 801757a:	4619      	mov	r1, r3
 801757c:	460b      	mov	r3, r1
 801757e:	005b      	lsls	r3, r3, #1
 8017580:	440b      	add	r3, r1
 8017582:	009b      	lsls	r3, r3, #2
 8017584:	4413      	add	r3, r2
 8017586:	681b      	ldr	r3, [r3, #0]
 8017588:	2b00      	cmp	r3, #0
 801758a:	d06b      	beq.n	8017664 <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 801758c:	68fb      	ldr	r3, [r7, #12]
 801758e:	781b      	ldrb	r3, [r3, #0]
 8017590:	f083 0301 	eor.w	r3, r3, #1
 8017594:	b2db      	uxtb	r3, r3
 8017596:	2b00      	cmp	r3, #0
 8017598:	d011      	beq.n	80175be <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 801759a:	68fb      	ldr	r3, [r7, #12]
 801759c:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 801759e:	2b00      	cmp	r3, #0
 80175a0:	d00d      	beq.n	80175be <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 80175a2:	68fb      	ldr	r3, [r7, #12]
 80175a4:	695a      	ldr	r2, [r3, #20]
 80175a6:	7d3b      	ldrb	r3, [r7, #20]
 80175a8:	005b      	lsls	r3, r3, #1
 80175aa:	4413      	add	r3, r2
 80175ac:	881b      	ldrh	r3, [r3, #0]
 80175ae:	461a      	mov	r2, r3
 80175b0:	7cfb      	ldrb	r3, [r7, #19]
 80175b2:	fa42 f303 	asr.w	r3, r2, r3
 80175b6:	f003 0301 	and.w	r3, r3, #1
 80175ba:	2b00      	cmp	r3, #0
 80175bc:	d054      	beq.n	8017668 <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 80175be:	68fb      	ldr	r3, [r7, #12]
 80175c0:	785b      	ldrb	r3, [r3, #1]
 80175c2:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 80175c4:	68fb      	ldr	r3, [r7, #12]
 80175c6:	689a      	ldr	r2, [r3, #8]
 80175c8:	7d79      	ldrb	r1, [r7, #21]
 80175ca:	7cfb      	ldrb	r3, [r7, #19]
 80175cc:	440b      	add	r3, r1
 80175ce:	4619      	mov	r1, r3
 80175d0:	460b      	mov	r3, r1
 80175d2:	005b      	lsls	r3, r3, #1
 80175d4:	440b      	add	r3, r1
 80175d6:	009b      	lsls	r3, r3, #2
 80175d8:	4413      	add	r3, r2
 80175da:	7a1b      	ldrb	r3, [r3, #8]
 80175dc:	f343 0303 	sbfx	r3, r3, #0, #4
 80175e0:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 80175e2:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 80175e4:	68fb      	ldr	r3, [r7, #12]
 80175e6:	689a      	ldr	r2, [r3, #8]
 80175e8:	7d79      	ldrb	r1, [r7, #21]
 80175ea:	7cfb      	ldrb	r3, [r7, #19]
 80175ec:	440b      	add	r3, r1
 80175ee:	4619      	mov	r1, r3
 80175f0:	460b      	mov	r3, r1
 80175f2:	005b      	lsls	r3, r3, #1
 80175f4:	440b      	add	r3, r1
 80175f6:	009b      	lsls	r3, r3, #2
 80175f8:	4413      	add	r3, r2
 80175fa:	7a1b      	ldrb	r3, [r3, #8]
 80175fc:	f343 1303 	sbfx	r3, r3, #4, #4
 8017600:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8017602:	461a      	mov	r2, r3
 8017604:	4621      	mov	r1, r4
 8017606:	f7ff fbe8 	bl	8016dda <RegionCommonValueInRange>
 801760a:	4603      	mov	r3, r0
 801760c:	2b00      	cmp	r3, #0
 801760e:	d02d      	beq.n	801766c <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 8017610:	68fb      	ldr	r3, [r7, #12]
 8017612:	68da      	ldr	r2, [r3, #12]
 8017614:	68fb      	ldr	r3, [r7, #12]
 8017616:	6899      	ldr	r1, [r3, #8]
 8017618:	7d78      	ldrb	r0, [r7, #21]
 801761a:	7cfb      	ldrb	r3, [r7, #19]
 801761c:	4403      	add	r3, r0
 801761e:	4618      	mov	r0, r3
 8017620:	4603      	mov	r3, r0
 8017622:	005b      	lsls	r3, r3, #1
 8017624:	4403      	add	r3, r0
 8017626:	009b      	lsls	r3, r3, #2
 8017628:	440b      	add	r3, r1
 801762a:	7a5b      	ldrb	r3, [r3, #9]
 801762c:	4619      	mov	r1, r3
 801762e:	460b      	mov	r3, r1
 8017630:	005b      	lsls	r3, r3, #1
 8017632:	440b      	add	r3, r1
 8017634:	00db      	lsls	r3, r3, #3
 8017636:	4413      	add	r3, r2
 8017638:	7d1b      	ldrb	r3, [r3, #20]
 801763a:	f083 0301 	eor.w	r3, r3, #1
 801763e:	b2db      	uxtb	r3, r3
 8017640:	2b00      	cmp	r3, #0
 8017642:	d003      	beq.n	801764c <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 8017644:	7dbb      	ldrb	r3, [r7, #22]
 8017646:	3301      	adds	r3, #1
 8017648:	75bb      	strb	r3, [r7, #22]
                    continue;
 801764a:	e010      	b.n	801766e <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 801764c:	7dfb      	ldrb	r3, [r7, #23]
 801764e:	1c5a      	adds	r2, r3, #1
 8017650:	75fa      	strb	r2, [r7, #23]
 8017652:	461a      	mov	r2, r3
 8017654:	68bb      	ldr	r3, [r7, #8]
 8017656:	4413      	add	r3, r2
 8017658:	7d79      	ldrb	r1, [r7, #21]
 801765a:	7cfa      	ldrb	r2, [r7, #19]
 801765c:	440a      	add	r2, r1
 801765e:	b2d2      	uxtb	r2, r2
 8017660:	701a      	strb	r2, [r3, #0]
 8017662:	e004      	b.n	801766e <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8017664:	bf00      	nop
 8017666:	e002      	b.n	801766e <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 8017668:	bf00      	nop
 801766a:	e000      	b.n	801766e <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 801766c:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 801766e:	7cfb      	ldrb	r3, [r7, #19]
 8017670:	3301      	adds	r3, #1
 8017672:	74fb      	strb	r3, [r7, #19]
 8017674:	7cfb      	ldrb	r3, [r7, #19]
 8017676:	2b0f      	cmp	r3, #15
 8017678:	f67f af6c 	bls.w	8017554 <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 801767c:	7d7b      	ldrb	r3, [r7, #21]
 801767e:	3310      	adds	r3, #16
 8017680:	757b      	strb	r3, [r7, #21]
 8017682:	7d3b      	ldrb	r3, [r7, #20]
 8017684:	3301      	adds	r3, #1
 8017686:	753b      	strb	r3, [r7, #20]
 8017688:	7d7b      	ldrb	r3, [r7, #21]
 801768a:	b29a      	uxth	r2, r3
 801768c:	68fb      	ldr	r3, [r7, #12]
 801768e:	8a1b      	ldrh	r3, [r3, #16]
 8017690:	429a      	cmp	r2, r3
 8017692:	f4ff af5c 	bcc.w	801754e <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 8017696:	687b      	ldr	r3, [r7, #4]
 8017698:	7dfa      	ldrb	r2, [r7, #23]
 801769a:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 801769c:	683b      	ldr	r3, [r7, #0]
 801769e:	7dba      	ldrb	r2, [r7, #22]
 80176a0:	701a      	strb	r2, [r3, #0]
}
 80176a2:	bf00      	nop
 80176a4:	371c      	adds	r7, #28
 80176a6:	46bd      	mov	sp, r7
 80176a8:	bd90      	pop	{r4, r7, pc}

080176aa <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 80176aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80176ac:	b08b      	sub	sp, #44	; 0x2c
 80176ae:	af04      	add	r7, sp, #16
 80176b0:	60f8      	str	r0, [r7, #12]
 80176b2:	60b9      	str	r1, [r7, #8]
 80176b4:	607a      	str	r2, [r7, #4]
 80176b6:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 80176b8:	68fb      	ldr	r3, [r7, #12]
 80176ba:	685b      	ldr	r3, [r3, #4]
 80176bc:	4618      	mov	r0, r3
 80176be:	f006 ffbd 	bl	801e63c <UTIL_TIMER_GetElapsedTime>
 80176c2:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 80176c4:	68fb      	ldr	r3, [r7, #12]
 80176c6:	681a      	ldr	r2, [r3, #0]
 80176c8:	697b      	ldr	r3, [r7, #20]
 80176ca:	1ad2      	subs	r2, r2, r3
 80176cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80176ce:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 80176d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176d2:	2201      	movs	r2, #1
 80176d4:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 80176d6:	683b      	ldr	r3, [r7, #0]
 80176d8:	2200      	movs	r2, #0
 80176da:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 80176dc:	68fb      	ldr	r3, [r7, #12]
 80176de:	685b      	ldr	r3, [r3, #4]
 80176e0:	2b00      	cmp	r3, #0
 80176e2:	d004      	beq.n	80176ee <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 80176e4:	68fb      	ldr	r3, [r7, #12]
 80176e6:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 80176e8:	697a      	ldr	r2, [r7, #20]
 80176ea:	429a      	cmp	r2, r3
 80176ec:	d32b      	bcc.n	8017746 <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 80176ee:	68bb      	ldr	r3, [r7, #8]
 80176f0:	2200      	movs	r2, #0
 80176f2:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 80176f4:	68fb      	ldr	r3, [r7, #12]
 80176f6:	69db      	ldr	r3, [r3, #28]
 80176f8:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 80176fa:	68fb      	ldr	r3, [r7, #12]
 80176fc:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 80176fe:	68dd      	ldr	r5, [r3, #12]
 8017700:	68fb      	ldr	r3, [r7, #12]
 8017702:	7a5e      	ldrb	r6, [r3, #9]
 8017704:	68fb      	ldr	r3, [r7, #12]
 8017706:	f893 c008 	ldrb.w	ip, [r3, #8]
 801770a:	68fb      	ldr	r3, [r7, #12]
 801770c:	7d1b      	ldrb	r3, [r3, #20]
 801770e:	68fa      	ldr	r2, [r7, #12]
 8017710:	6992      	ldr	r2, [r2, #24]
 8017712:	9203      	str	r2, [sp, #12]
 8017714:	68fa      	ldr	r2, [r7, #12]
 8017716:	f10d 0e04 	add.w	lr, sp, #4
 801771a:	320c      	adds	r2, #12
 801771c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017720:	e88e 0003 	stmia.w	lr, {r0, r1}
 8017724:	9300      	str	r3, [sp, #0]
 8017726:	4663      	mov	r3, ip
 8017728:	4632      	mov	r2, r6
 801772a:	4629      	mov	r1, r5
 801772c:	4620      	mov	r0, r4
 801772e:	f7ff fc25 	bl	8016f7c <RegionCommonUpdateBandTimeOff>
 8017732:	4602      	mov	r2, r0
 8017734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017736:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 8017738:	68fb      	ldr	r3, [r7, #12]
 801773a:	69d8      	ldr	r0, [r3, #28]
 801773c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801773e:	683a      	ldr	r2, [r7, #0]
 8017740:	6879      	ldr	r1, [r7, #4]
 8017742:	f7ff fef4 	bl	801752e <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 8017746:	683b      	ldr	r3, [r7, #0]
 8017748:	781b      	ldrb	r3, [r3, #0]
 801774a:	2b00      	cmp	r3, #0
 801774c:	d004      	beq.n	8017758 <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 801774e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017750:	2200      	movs	r2, #0
 8017752:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8017754:	2300      	movs	r3, #0
 8017756:	e006      	b.n	8017766 <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 8017758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801775a:	781b      	ldrb	r3, [r3, #0]
 801775c:	2b00      	cmp	r3, #0
 801775e:	d001      	beq.n	8017764 <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8017760:	230b      	movs	r3, #11
 8017762:	e000      	b.n	8017766 <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8017764:	230c      	movs	r3, #12
    }
}
 8017766:	4618      	mov	r0, r3
 8017768:	371c      	adds	r7, #28
 801776a:	46bd      	mov	sp, r7
 801776c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801776e <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 801776e:	b5b0      	push	{r4, r5, r7, lr}
 8017770:	b086      	sub	sp, #24
 8017772:	af02      	add	r7, sp, #8
 8017774:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 8017776:	687b      	ldr	r3, [r7, #4]
 8017778:	781b      	ldrb	r3, [r3, #0]
 801777a:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 801777c:	687b      	ldr	r3, [r7, #4]
 801777e:	f993 2000 	ldrsb.w	r2, [r3]
 8017782:	687b      	ldr	r3, [r7, #4]
 8017784:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8017788:	429a      	cmp	r2, r3
 801778a:	d103      	bne.n	8017794 <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 801778c:	687b      	ldr	r3, [r7, #4]
 801778e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8017792:	e026      	b.n	80177e2 <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 8017794:	7bfb      	ldrb	r3, [r7, #15]
 8017796:	3b01      	subs	r3, #1
 8017798:	b2db      	uxtb	r3, r3
 801779a:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 801779c:	687b      	ldr	r3, [r7, #4]
 801779e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80177a2:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80177a6:	429a      	cmp	r2, r3
 80177a8:	d019      	beq.n	80177de <RegionCommonGetNextLowerTxDr+0x70>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 80177aa:	687b      	ldr	r3, [r7, #4]
 80177ac:	78d8      	ldrb	r0, [r3, #3]
 80177ae:	687b      	ldr	r3, [r7, #4]
 80177b0:	6859      	ldr	r1, [r3, #4]
 80177b2:	687b      	ldr	r3, [r7, #4]
 80177b4:	f993 5002 	ldrsb.w	r5, [r3, #2]
 80177b8:	687b      	ldr	r3, [r7, #4]
 80177ba:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80177be:	687a      	ldr	r2, [r7, #4]
 80177c0:	6892      	ldr	r2, [r2, #8]
 80177c2:	f997 400f 	ldrsb.w	r4, [r7, #15]
 80177c6:	9201      	str	r2, [sp, #4]
 80177c8:	9300      	str	r3, [sp, #0]
 80177ca:	462b      	mov	r3, r5
 80177cc:	4622      	mov	r2, r4
 80177ce:	f7ff fa92 	bl	8016cf6 <RegionCommonChanVerifyDr>
 80177d2:	4603      	mov	r3, r0
 80177d4:	f083 0301 	eor.w	r3, r3, #1
 80177d8:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 80177da:	2b00      	cmp	r3, #0
 80177dc:	d1da      	bne.n	8017794 <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 80177de:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 80177e2:	4618      	mov	r0, r3
 80177e4:	3710      	adds	r7, #16
 80177e6:	46bd      	mov	sp, r7
 80177e8:	bdb0      	pop	{r4, r5, r7, pc}

080177ea <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 80177ea:	b480      	push	{r7}
 80177ec:	b083      	sub	sp, #12
 80177ee:	af00      	add	r7, sp, #0
 80177f0:	4603      	mov	r3, r0
 80177f2:	460a      	mov	r2, r1
 80177f4:	71fb      	strb	r3, [r7, #7]
 80177f6:	4613      	mov	r3, r2
 80177f8:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 80177fa:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80177fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017802:	4293      	cmp	r3, r2
 8017804:	bfb8      	it	lt
 8017806:	4613      	movlt	r3, r2
 8017808:	b25b      	sxtb	r3, r3
}
 801780a:	4618      	mov	r0, r3
 801780c:	370c      	adds	r7, #12
 801780e:	46bd      	mov	sp, r7
 8017810:	bc80      	pop	{r7}
 8017812:	4770      	bx	lr

08017814 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 8017814:	b480      	push	{r7}
 8017816:	b083      	sub	sp, #12
 8017818:	af00      	add	r7, sp, #0
 801781a:	6078      	str	r0, [r7, #4]
 801781c:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 801781e:	687b      	ldr	r3, [r7, #4]
 8017820:	009b      	lsls	r3, r3, #2
 8017822:	683a      	ldr	r2, [r7, #0]
 8017824:	4413      	add	r3, r2
 8017826:	681b      	ldr	r3, [r3, #0]
 8017828:	4a07      	ldr	r2, [pc, #28]	; (8017848 <RegionCommonGetBandwidth+0x34>)
 801782a:	4293      	cmp	r3, r2
 801782c:	d004      	beq.n	8017838 <RegionCommonGetBandwidth+0x24>
 801782e:	4a07      	ldr	r2, [pc, #28]	; (801784c <RegionCommonGetBandwidth+0x38>)
 8017830:	4293      	cmp	r3, r2
 8017832:	d003      	beq.n	801783c <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 8017834:	2300      	movs	r3, #0
 8017836:	e002      	b.n	801783e <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 8017838:	2301      	movs	r3, #1
 801783a:	e000      	b.n	801783e <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 801783c:	2302      	movs	r3, #2
    }
}
 801783e:	4618      	mov	r0, r3
 8017840:	370c      	adds	r7, #12
 8017842:	46bd      	mov	sp, r7
 8017844:	bc80      	pop	{r7}
 8017846:	4770      	bx	lr
 8017848:	0003d090 	.word	0x0003d090
 801784c:	0007a120 	.word	0x0007a120

08017850 <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 8017850:	b580      	push	{r7, lr}
 8017852:	b086      	sub	sp, #24
 8017854:	af04      	add	r7, sp, #16
 8017856:	4603      	mov	r3, r0
 8017858:	6039      	str	r1, [r7, #0]
 801785a:	71fb      	strb	r3, [r7, #7]
 801785c:	4613      	mov	r3, r2
 801785e:	71bb      	strb	r3, [r7, #6]
    if ( rxSlot < RX_SLOT_NONE )
 8017860:	79fb      	ldrb	r3, [r7, #7]
 8017862:	2b05      	cmp	r3, #5
 8017864:	d810      	bhi.n	8017888 <RegionCommonRxConfigPrint+0x38>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 8017866:	79fb      	ldrb	r3, [r7, #7]
 8017868:	4a0f      	ldr	r2, [pc, #60]	; (80178a8 <RegionCommonRxConfigPrint+0x58>)
 801786a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801786e:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8017872:	9202      	str	r2, [sp, #8]
 8017874:	683a      	ldr	r2, [r7, #0]
 8017876:	9201      	str	r2, [sp, #4]
 8017878:	9300      	str	r3, [sp, #0]
 801787a:	4b0c      	ldr	r3, [pc, #48]	; (80178ac <RegionCommonRxConfigPrint+0x5c>)
 801787c:	2201      	movs	r2, #1
 801787e:	2100      	movs	r1, #0
 8017880:	2002      	movs	r0, #2
 8017882:	f006 ffb9 	bl	801e7f8 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 8017886:	e00a      	b.n	801789e <RegionCommonRxConfigPrint+0x4e>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 8017888:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801788c:	9301      	str	r3, [sp, #4]
 801788e:	683b      	ldr	r3, [r7, #0]
 8017890:	9300      	str	r3, [sp, #0]
 8017892:	4b07      	ldr	r3, [pc, #28]	; (80178b0 <RegionCommonRxConfigPrint+0x60>)
 8017894:	2201      	movs	r2, #1
 8017896:	2100      	movs	r1, #0
 8017898:	2002      	movs	r0, #2
 801789a:	f006 ffad 	bl	801e7f8 <UTIL_ADV_TRACE_COND_FSend>
}
 801789e:	bf00      	nop
 80178a0:	3708      	adds	r7, #8
 80178a2:	46bd      	mov	sp, r7
 80178a4:	bd80      	pop	{r7, pc}
 80178a6:	bf00      	nop
 80178a8:	2000011c 	.word	0x2000011c
 80178ac:	0801f5e8 	.word	0x0801f5e8
 80178b0:	0801f608 	.word	0x0801f608

080178b4 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 80178b4:	b580      	push	{r7, lr}
 80178b6:	b084      	sub	sp, #16
 80178b8:	af02      	add	r7, sp, #8
 80178ba:	6078      	str	r0, [r7, #4]
 80178bc:	460b      	mov	r3, r1
 80178be:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 80178c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80178c4:	9301      	str	r3, [sp, #4]
 80178c6:	687b      	ldr	r3, [r7, #4]
 80178c8:	9300      	str	r3, [sp, #0]
 80178ca:	4b05      	ldr	r3, [pc, #20]	; (80178e0 <RegionCommonTxConfigPrint+0x2c>)
 80178cc:	2201      	movs	r2, #1
 80178ce:	2100      	movs	r1, #0
 80178d0:	2002      	movs	r0, #2
 80178d2:	f006 ff91 	bl	801e7f8 <UTIL_ADV_TRACE_COND_FSend>
}
 80178d6:	bf00      	nop
 80178d8:	3708      	adds	r7, #8
 80178da:	46bd      	mov	sp, r7
 80178dc:	bd80      	pop	{r7, pc}
 80178de:	bf00      	nop
 80178e0:	0801f624 	.word	0x0801f624

080178e4 <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 80178e4:	b580      	push	{r7, lr}
 80178e6:	b082      	sub	sp, #8
 80178e8:	af00      	add	r7, sp, #0
 80178ea:	6078      	str	r0, [r7, #4]
 80178ec:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 80178ee:	4b2d      	ldr	r3, [pc, #180]	; (80179a4 <VerifyRfFreq+0xc0>)
 80178f0:	6a1b      	ldr	r3, [r3, #32]
 80178f2:	6878      	ldr	r0, [r7, #4]
 80178f4:	4798      	blx	r3
 80178f6:	4603      	mov	r3, r0
 80178f8:	f083 0301 	eor.w	r3, r3, #1
 80178fc:	b2db      	uxtb	r3, r3
 80178fe:	2b00      	cmp	r3, #0
 8017900:	d001      	beq.n	8017906 <VerifyRfFreq+0x22>
    {
        return false;
 8017902:	2300      	movs	r3, #0
 8017904:	e04a      	b.n	801799c <VerifyRfFreq+0xb8>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 8017906:	687b      	ldr	r3, [r7, #4]
 8017908:	4a27      	ldr	r2, [pc, #156]	; (80179a8 <VerifyRfFreq+0xc4>)
 801790a:	4293      	cmp	r3, r2
 801790c:	d307      	bcc.n	801791e <VerifyRfFreq+0x3a>
 801790e:	687b      	ldr	r3, [r7, #4]
 8017910:	4a26      	ldr	r2, [pc, #152]	; (80179ac <VerifyRfFreq+0xc8>)
 8017912:	4293      	cmp	r3, r2
 8017914:	d803      	bhi.n	801791e <VerifyRfFreq+0x3a>
    {
        *band = 2;
 8017916:	683b      	ldr	r3, [r7, #0]
 8017918:	2202      	movs	r2, #2
 801791a:	701a      	strb	r2, [r3, #0]
 801791c:	e03d      	b.n	801799a <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 801791e:	687b      	ldr	r3, [r7, #4]
 8017920:	4a22      	ldr	r2, [pc, #136]	; (80179ac <VerifyRfFreq+0xc8>)
 8017922:	4293      	cmp	r3, r2
 8017924:	d907      	bls.n	8017936 <VerifyRfFreq+0x52>
 8017926:	687b      	ldr	r3, [r7, #4]
 8017928:	4a21      	ldr	r2, [pc, #132]	; (80179b0 <VerifyRfFreq+0xcc>)
 801792a:	4293      	cmp	r3, r2
 801792c:	d803      	bhi.n	8017936 <VerifyRfFreq+0x52>
    {
        *band = 0;
 801792e:	683b      	ldr	r3, [r7, #0]
 8017930:	2200      	movs	r2, #0
 8017932:	701a      	strb	r2, [r3, #0]
 8017934:	e031      	b.n	801799a <VerifyRfFreq+0xb6>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 8017936:	687b      	ldr	r3, [r7, #4]
 8017938:	4a1d      	ldr	r2, [pc, #116]	; (80179b0 <VerifyRfFreq+0xcc>)
 801793a:	4293      	cmp	r3, r2
 801793c:	d907      	bls.n	801794e <VerifyRfFreq+0x6a>
 801793e:	687b      	ldr	r3, [r7, #4]
 8017940:	4a1c      	ldr	r2, [pc, #112]	; (80179b4 <VerifyRfFreq+0xd0>)
 8017942:	4293      	cmp	r3, r2
 8017944:	d803      	bhi.n	801794e <VerifyRfFreq+0x6a>
    {
        *band = 1;
 8017946:	683b      	ldr	r3, [r7, #0]
 8017948:	2201      	movs	r2, #1
 801794a:	701a      	strb	r2, [r3, #0]
 801794c:	e025      	b.n	801799a <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 801794e:	687b      	ldr	r3, [r7, #4]
 8017950:	4a19      	ldr	r2, [pc, #100]	; (80179b8 <VerifyRfFreq+0xd4>)
 8017952:	4293      	cmp	r3, r2
 8017954:	d907      	bls.n	8017966 <VerifyRfFreq+0x82>
 8017956:	687b      	ldr	r3, [r7, #4]
 8017958:	4a18      	ldr	r2, [pc, #96]	; (80179bc <VerifyRfFreq+0xd8>)
 801795a:	4293      	cmp	r3, r2
 801795c:	d803      	bhi.n	8017966 <VerifyRfFreq+0x82>
    {
        *band = 5;
 801795e:	683b      	ldr	r3, [r7, #0]
 8017960:	2205      	movs	r2, #5
 8017962:	701a      	strb	r2, [r3, #0]
 8017964:	e019      	b.n	801799a <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 8017966:	687b      	ldr	r3, [r7, #4]
 8017968:	4a15      	ldr	r2, [pc, #84]	; (80179c0 <VerifyRfFreq+0xdc>)
 801796a:	4293      	cmp	r3, r2
 801796c:	d907      	bls.n	801797e <VerifyRfFreq+0x9a>
 801796e:	687b      	ldr	r3, [r7, #4]
 8017970:	4a14      	ldr	r2, [pc, #80]	; (80179c4 <VerifyRfFreq+0xe0>)
 8017972:	4293      	cmp	r3, r2
 8017974:	d803      	bhi.n	801797e <VerifyRfFreq+0x9a>
    {
        *band = 3;
 8017976:	683b      	ldr	r3, [r7, #0]
 8017978:	2203      	movs	r2, #3
 801797a:	701a      	strb	r2, [r3, #0]
 801797c:	e00d      	b.n	801799a <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 801797e:	687b      	ldr	r3, [r7, #4]
 8017980:	4a11      	ldr	r2, [pc, #68]	; (80179c8 <VerifyRfFreq+0xe4>)
 8017982:	4293      	cmp	r3, r2
 8017984:	d307      	bcc.n	8017996 <VerifyRfFreq+0xb2>
 8017986:	687b      	ldr	r3, [r7, #4]
 8017988:	4a10      	ldr	r2, [pc, #64]	; (80179cc <VerifyRfFreq+0xe8>)
 801798a:	4293      	cmp	r3, r2
 801798c:	d803      	bhi.n	8017996 <VerifyRfFreq+0xb2>
    {
        *band = 4;
 801798e:	683b      	ldr	r3, [r7, #0]
 8017990:	2204      	movs	r2, #4
 8017992:	701a      	strb	r2, [r3, #0]
 8017994:	e001      	b.n	801799a <VerifyRfFreq+0xb6>
    }
    else
    {
        return false;
 8017996:	2300      	movs	r3, #0
 8017998:	e000      	b.n	801799c <VerifyRfFreq+0xb8>
    }
    return true;
 801799a:	2301      	movs	r3, #1
}
 801799c:	4618      	mov	r0, r3
 801799e:	3708      	adds	r7, #8
 80179a0:	46bd      	mov	sp, r7
 80179a2:	bd80      	pop	{r7, pc}
 80179a4:	0801fccc 	.word	0x0801fccc
 80179a8:	337055c0 	.word	0x337055c0
 80179ac:	338eda3f 	.word	0x338eda3f
 80179b0:	33bca100 	.word	0x33bca100
 80179b4:	33c5c8c0 	.word	0x33c5c8c0
 80179b8:	33c74f5f 	.word	0x33c74f5f
 80179bc:	33cef080 	.word	0x33cef080
 80179c0:	33d1fdbf 	.word	0x33d1fdbf
 80179c4:	33d5ce50 	.word	0x33d5ce50
 80179c8:	33d691a0 	.word	0x33d691a0
 80179cc:	33db2580 	.word	0x33db2580

080179d0 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 80179d0:	b590      	push	{r4, r7, lr}
 80179d2:	b08b      	sub	sp, #44	; 0x2c
 80179d4:	af04      	add	r7, sp, #16
 80179d6:	4603      	mov	r3, r0
 80179d8:	460a      	mov	r2, r1
 80179da:	71fb      	strb	r3, [r7, #7]
 80179dc:	4613      	mov	r3, r2
 80179de:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesEU868[datarate];
 80179e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80179e4:	4a1f      	ldr	r2, [pc, #124]	; (8017a64 <GetTimeOnAir+0x94>)
 80179e6:	5cd3      	ldrb	r3, [r2, r3]
 80179e8:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 80179ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80179ee:	491e      	ldr	r1, [pc, #120]	; (8017a68 <GetTimeOnAir+0x98>)
 80179f0:	4618      	mov	r0, r3
 80179f2:	f7ff ff0f 	bl	8017814 <RegionCommonGetBandwidth>
 80179f6:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 80179f8:	2300      	movs	r3, #0
 80179fa:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 80179fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017a00:	2b07      	cmp	r3, #7
 8017a02:	d118      	bne.n	8017a36 <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 8017a04:	4b19      	ldr	r3, [pc, #100]	; (8017a6c <GetTimeOnAir+0x9c>)
 8017a06:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8017a08:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017a0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8017a10:	fb02 f303 	mul.w	r3, r2, r3
 8017a14:	4619      	mov	r1, r3
 8017a16:	88bb      	ldrh	r3, [r7, #4]
 8017a18:	b2db      	uxtb	r3, r3
 8017a1a:	2201      	movs	r2, #1
 8017a1c:	9203      	str	r2, [sp, #12]
 8017a1e:	9302      	str	r3, [sp, #8]
 8017a20:	2300      	movs	r3, #0
 8017a22:	9301      	str	r3, [sp, #4]
 8017a24:	2305      	movs	r3, #5
 8017a26:	9300      	str	r3, [sp, #0]
 8017a28:	2300      	movs	r3, #0
 8017a2a:	460a      	mov	r2, r1
 8017a2c:	68f9      	ldr	r1, [r7, #12]
 8017a2e:	2000      	movs	r0, #0
 8017a30:	47a0      	blx	r4
 8017a32:	6178      	str	r0, [r7, #20]
 8017a34:	e011      	b.n	8017a5a <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8017a36:	4b0d      	ldr	r3, [pc, #52]	; (8017a6c <GetTimeOnAir+0x9c>)
 8017a38:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8017a3a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8017a3e:	88bb      	ldrh	r3, [r7, #4]
 8017a40:	b2db      	uxtb	r3, r3
 8017a42:	2101      	movs	r1, #1
 8017a44:	9103      	str	r1, [sp, #12]
 8017a46:	9302      	str	r3, [sp, #8]
 8017a48:	2300      	movs	r3, #0
 8017a4a:	9301      	str	r3, [sp, #4]
 8017a4c:	2308      	movs	r3, #8
 8017a4e:	9300      	str	r3, [sp, #0]
 8017a50:	2301      	movs	r3, #1
 8017a52:	68f9      	ldr	r1, [r7, #12]
 8017a54:	2001      	movs	r0, #1
 8017a56:	47a0      	blx	r4
 8017a58:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 8017a5a:	697b      	ldr	r3, [r7, #20]
}
 8017a5c:	4618      	mov	r0, r3
 8017a5e:	371c      	adds	r7, #28
 8017a60:	46bd      	mov	sp, r7
 8017a62:	bd90      	pop	{r4, r7, pc}
 8017a64:	0801fc10 	.word	0x0801fc10
 8017a68:	0801fc18 	.word	0x0801fc18
 8017a6c:	0801fccc 	.word	0x0801fccc

08017a70 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 8017a70:	b580      	push	{r7, lr}
 8017a72:	b088      	sub	sp, #32
 8017a74:	af00      	add	r7, sp, #0
 8017a76:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8017a78:	2300      	movs	r3, #0
 8017a7a:	61bb      	str	r3, [r7, #24]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 8017a7c:	687b      	ldr	r3, [r7, #4]
 8017a7e:	781b      	ldrb	r3, [r3, #0]
 8017a80:	3b01      	subs	r3, #1
 8017a82:	2b37      	cmp	r3, #55	; 0x37
 8017a84:	f200 8122 	bhi.w	8017ccc <RegionEU868GetPhyParam+0x25c>
 8017a88:	a201      	add	r2, pc, #4	; (adr r2, 8017a90 <RegionEU868GetPhyParam+0x20>)
 8017a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017a8e:	bf00      	nop
 8017a90:	08017b71 	.word	0x08017b71
 8017a94:	08017b77 	.word	0x08017b77
 8017a98:	08017ccd 	.word	0x08017ccd
 8017a9c:	08017ccd 	.word	0x08017ccd
 8017aa0:	08017ccd 	.word	0x08017ccd
 8017aa4:	08017b7d 	.word	0x08017b7d
 8017aa8:	08017ccd 	.word	0x08017ccd
 8017aac:	08017bb7 	.word	0x08017bb7
 8017ab0:	08017ccd 	.word	0x08017ccd
 8017ab4:	08017bbd 	.word	0x08017bbd
 8017ab8:	08017bc3 	.word	0x08017bc3
 8017abc:	08017bc9 	.word	0x08017bc9
 8017ac0:	08017bcf 	.word	0x08017bcf
 8017ac4:	08017bdf 	.word	0x08017bdf
 8017ac8:	08017bef 	.word	0x08017bef
 8017acc:	08017bf5 	.word	0x08017bf5
 8017ad0:	08017bfd 	.word	0x08017bfd
 8017ad4:	08017c05 	.word	0x08017c05
 8017ad8:	08017c0d 	.word	0x08017c0d
 8017adc:	08017c15 	.word	0x08017c15
 8017ae0:	08017c1d 	.word	0x08017c1d
 8017ae4:	08017c31 	.word	0x08017c31
 8017ae8:	08017c37 	.word	0x08017c37
 8017aec:	08017c3d 	.word	0x08017c3d
 8017af0:	08017c43 	.word	0x08017c43
 8017af4:	08017c4f 	.word	0x08017c4f
 8017af8:	08017c5b 	.word	0x08017c5b
 8017afc:	08017c61 	.word	0x08017c61
 8017b00:	08017c69 	.word	0x08017c69
 8017b04:	08017c6f 	.word	0x08017c6f
 8017b08:	08017c75 	.word	0x08017c75
 8017b0c:	08017c7d 	.word	0x08017c7d
 8017b10:	08017b83 	.word	0x08017b83
 8017b14:	08017ccd 	.word	0x08017ccd
 8017b18:	08017ccd 	.word	0x08017ccd
 8017b1c:	08017ccd 	.word	0x08017ccd
 8017b20:	08017ccd 	.word	0x08017ccd
 8017b24:	08017ccd 	.word	0x08017ccd
 8017b28:	08017ccd 	.word	0x08017ccd
 8017b2c:	08017ccd 	.word	0x08017ccd
 8017b30:	08017ccd 	.word	0x08017ccd
 8017b34:	08017ccd 	.word	0x08017ccd
 8017b38:	08017ccd 	.word	0x08017ccd
 8017b3c:	08017ccd 	.word	0x08017ccd
 8017b40:	08017ccd 	.word	0x08017ccd
 8017b44:	08017ccd 	.word	0x08017ccd
 8017b48:	08017c83 	.word	0x08017c83
 8017b4c:	08017c89 	.word	0x08017c89
 8017b50:	08017c97 	.word	0x08017c97
 8017b54:	08017ccd 	.word	0x08017ccd
 8017b58:	08017ccd 	.word	0x08017ccd
 8017b5c:	08017c9d 	.word	0x08017c9d
 8017b60:	08017ca3 	.word	0x08017ca3
 8017b64:	08017ccd 	.word	0x08017ccd
 8017b68:	08017ca9 	.word	0x08017ca9
 8017b6c:	08017cb9 	.word	0x08017cb9
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 8017b70:	2300      	movs	r3, #0
 8017b72:	61bb      	str	r3, [r7, #24]
            break;
 8017b74:	e0ab      	b.n	8017cce <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 8017b76:	2300      	movs	r3, #0
 8017b78:	61bb      	str	r3, [r7, #24]
            break;
 8017b7a:	e0a8      	b.n	8017cce <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 8017b7c:	2300      	movs	r3, #0
 8017b7e:	61bb      	str	r3, [r7, #24]
            break;
 8017b80:	e0a5      	b.n	8017cce <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 8017b82:	687b      	ldr	r3, [r7, #4]
 8017b84:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8017b88:	733b      	strb	r3, [r7, #12]
 8017b8a:	2307      	movs	r3, #7
 8017b8c:	737b      	strb	r3, [r7, #13]
 8017b8e:	2300      	movs	r3, #0
 8017b90:	73bb      	strb	r3, [r7, #14]
 8017b92:	2310      	movs	r3, #16
 8017b94:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8017b96:	4b51      	ldr	r3, [pc, #324]	; (8017cdc <RegionEU868GetPhyParam+0x26c>)
 8017b98:	681b      	ldr	r3, [r3, #0]
 8017b9a:	f503 7358 	add.w	r3, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8017b9e:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 8017ba0:	4b4e      	ldr	r3, [pc, #312]	; (8017cdc <RegionEU868GetPhyParam+0x26c>)
 8017ba2:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8017ba4:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8017ba6:	f107 030c 	add.w	r3, r7, #12
 8017baa:	4618      	mov	r0, r3
 8017bac:	f7ff fddf 	bl	801776e <RegionCommonGetNextLowerTxDr>
 8017bb0:	4603      	mov	r3, r0
 8017bb2:	61bb      	str	r3, [r7, #24]
            break;
 8017bb4:	e08b      	b.n	8017cce <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 8017bb6:	2300      	movs	r3, #0
 8017bb8:	61bb      	str	r3, [r7, #24]
            break;
 8017bba:	e088      	b.n	8017cce <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 8017bbc:	2300      	movs	r3, #0
 8017bbe:	61bb      	str	r3, [r7, #24]
            break;
 8017bc0:	e085      	b.n	8017cce <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8017bc2:	2340      	movs	r3, #64	; 0x40
 8017bc4:	61bb      	str	r3, [r7, #24]
            break;
 8017bc6:	e082      	b.n	8017cce <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8017bc8:	2320      	movs	r3, #32
 8017bca:	61bb      	str	r3, [r7, #24]
            break;
 8017bcc:	e07f      	b.n	8017cce <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 8017bce:	687b      	ldr	r3, [r7, #4]
 8017bd0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017bd4:	461a      	mov	r2, r3
 8017bd6:	4b42      	ldr	r3, [pc, #264]	; (8017ce0 <RegionEU868GetPhyParam+0x270>)
 8017bd8:	5c9b      	ldrb	r3, [r3, r2]
 8017bda:	61bb      	str	r3, [r7, #24]
            break;
 8017bdc:	e077      	b.n	8017cce <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 8017bde:	687b      	ldr	r3, [r7, #4]
 8017be0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017be4:	461a      	mov	r2, r3
 8017be6:	4b3f      	ldr	r3, [pc, #252]	; (8017ce4 <RegionEU868GetPhyParam+0x274>)
 8017be8:	5c9b      	ldrb	r3, [r3, r2]
 8017bea:	61bb      	str	r3, [r7, #24]
            break;
 8017bec:	e06f      	b.n	8017cce <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 8017bee:	2301      	movs	r3, #1
 8017bf0:	61bb      	str	r3, [r7, #24]
            break;
 8017bf2:	e06c      	b.n	8017cce <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 8017bf4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8017bf8:	61bb      	str	r3, [r7, #24]
            break;
 8017bfa:	e068      	b.n	8017cce <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8017bfc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017c00:	61bb      	str	r3, [r7, #24]
            break;
 8017c02:	e064      	b.n	8017cce <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8017c04:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8017c08:	61bb      	str	r3, [r7, #24]
            break;
 8017c0a:	e060      	b.n	8017cce <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8017c0c:	f241 3388 	movw	r3, #5000	; 0x1388
 8017c10:	61bb      	str	r3, [r7, #24]
            break;
 8017c12:	e05c      	b.n	8017cce <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8017c14:	f241 7370 	movw	r3, #6000	; 0x1770
 8017c18:	61bb      	str	r3, [r7, #24]
            break;
 8017c1a:	e058      	b.n	8017cce <RegionEU868GetPhyParam+0x25e>
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))

        case PHY_RETRANSMIT_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 8017c1c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8017c20:	4831      	ldr	r0, [pc, #196]	; (8017ce8 <RegionEU868GetPhyParam+0x278>)
 8017c22:	f002 fa2d 	bl	801a080 <randr>
 8017c26:	4603      	mov	r3, r0
 8017c28:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8017c2c:	61bb      	str	r3, [r7, #24]
            break;
 8017c2e:	e04e      	b.n	8017cce <RegionEU868GetPhyParam+0x25e>
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 8017c30:	2300      	movs	r3, #0
 8017c32:	61bb      	str	r3, [r7, #24]
            break;
 8017c34:	e04b      	b.n	8017cce <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 8017c36:	4b2d      	ldr	r3, [pc, #180]	; (8017cec <RegionEU868GetPhyParam+0x27c>)
 8017c38:	61bb      	str	r3, [r7, #24]
            break;
 8017c3a:	e048      	b.n	8017cce <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 8017c3c:	2300      	movs	r3, #0
 8017c3e:	61bb      	str	r3, [r7, #24]
            break;
 8017c40:	e045      	b.n	8017cce <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8017c42:	4b26      	ldr	r3, [pc, #152]	; (8017cdc <RegionEU868GetPhyParam+0x26c>)
 8017c44:	681b      	ldr	r3, [r3, #0]
 8017c46:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8017c4a:	61bb      	str	r3, [r7, #24]
            break;
 8017c4c:	e03f      	b.n	8017cce <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8017c4e:	4b23      	ldr	r3, [pc, #140]	; (8017cdc <RegionEU868GetPhyParam+0x26c>)
 8017c50:	681b      	ldr	r3, [r3, #0]
 8017c52:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8017c56:	61bb      	str	r3, [r7, #24]
            break;
 8017c58:	e039      	b.n	8017cce <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 8017c5a:	2310      	movs	r3, #16
 8017c5c:	61bb      	str	r3, [r7, #24]
            break;
 8017c5e:	e036      	b.n	8017cce <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8017c60:	4b1e      	ldr	r3, [pc, #120]	; (8017cdc <RegionEU868GetPhyParam+0x26c>)
 8017c62:	681b      	ldr	r3, [r3, #0]
 8017c64:	61bb      	str	r3, [r7, #24]
            break;
 8017c66:	e032      	b.n	8017cce <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = EU868_DEFAULT_UPLINK_DWELL_TIME;
 8017c68:	2300      	movs	r3, #0
 8017c6a:	61bb      	str	r3, [r7, #24]
            break;
 8017c6c:	e02f      	b.n	8017cce <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 8017c6e:	2300      	movs	r3, #0
 8017c70:	61bb      	str	r3, [r7, #24]
            break;
 8017c72:	e02c      	b.n	8017cce <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 8017c74:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8017c78:	61bb      	str	r3, [r7, #24]
            break;
 8017c7a:	e028      	b.n	8017cce <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 8017c7c:	4b1c      	ldr	r3, [pc, #112]	; (8017cf0 <RegionEU868GetPhyParam+0x280>)
 8017c7e:	61bb      	str	r3, [r7, #24]
            break;
 8017c80:	e025      	b.n	8017cce <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 8017c82:	4b1a      	ldr	r3, [pc, #104]	; (8017cec <RegionEU868GetPhyParam+0x27c>)
 8017c84:	61bb      	str	r3, [r7, #24]
            break;
 8017c86:	e022      	b.n	8017cce <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 8017c88:	2311      	movs	r3, #17
 8017c8a:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 8017c8c:	2301      	movs	r3, #1
 8017c8e:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 8017c90:	2300      	movs	r3, #0
 8017c92:	76bb      	strb	r3, [r7, #26]
            break;
 8017c94:	e01b      	b.n	8017cce <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 8017c96:	2303      	movs	r3, #3
 8017c98:	61bb      	str	r3, [r7, #24]
            break;
 8017c9a:	e018      	b.n	8017cce <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 8017c9c:	4b13      	ldr	r3, [pc, #76]	; (8017cec <RegionEU868GetPhyParam+0x27c>)
 8017c9e:	61bb      	str	r3, [r7, #24]
            break;
 8017ca0:	e015      	b.n	8017cce <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 8017ca2:	2303      	movs	r3, #3
 8017ca4:	61bb      	str	r3, [r7, #24]
            break;
 8017ca6:	e012      	b.n	8017cce <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 8017ca8:	687b      	ldr	r3, [r7, #4]
 8017caa:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017cae:	461a      	mov	r2, r3
 8017cb0:	4b10      	ldr	r3, [pc, #64]	; (8017cf4 <RegionEU868GetPhyParam+0x284>)
 8017cb2:	5c9b      	ldrb	r3, [r3, r2]
 8017cb4:	61bb      	str	r3, [r7, #24]
            break;
 8017cb6:	e00a      	b.n	8017cce <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 8017cb8:	687b      	ldr	r3, [r7, #4]
 8017cba:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017cbe:	490e      	ldr	r1, [pc, #56]	; (8017cf8 <RegionEU868GetPhyParam+0x288>)
 8017cc0:	4618      	mov	r0, r3
 8017cc2:	f7ff fda7 	bl	8017814 <RegionCommonGetBandwidth>
 8017cc6:	4603      	mov	r3, r0
 8017cc8:	61bb      	str	r3, [r7, #24]
            break;
 8017cca:	e000      	b.n	8017cce <RegionEU868GetPhyParam+0x25e>
        }
        default:
        {
            break;
 8017ccc:	bf00      	nop
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 8017cce:	69bb      	ldr	r3, [r7, #24]
 8017cd0:	61fb      	str	r3, [r7, #28]
 8017cd2:	69fb      	ldr	r3, [r7, #28]
}
 8017cd4:	4618      	mov	r0, r3
 8017cd6:	3720      	adds	r7, #32
 8017cd8:	46bd      	mov	sp, r7
 8017cda:	bd80      	pop	{r7, pc}
 8017cdc:	20001a70 	.word	0x20001a70
 8017ce0:	0801fc38 	.word	0x0801fc38
 8017ce4:	0801fc40 	.word	0x0801fc40
 8017ce8:	fffffc18 	.word	0xfffffc18
 8017cec:	33d3e608 	.word	0x33d3e608
 8017cf0:	4009999a 	.word	0x4009999a
 8017cf4:	0801fc10 	.word	0x0801fc10
 8017cf8:	0801fc18 	.word	0x0801fc18

08017cfc <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8017cfc:	b590      	push	{r4, r7, lr}
 8017cfe:	b085      	sub	sp, #20
 8017d00:	af02      	add	r7, sp, #8
 8017d02:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8017d04:	4b11      	ldr	r3, [pc, #68]	; (8017d4c <RegionEU868SetBandTxDone+0x50>)
 8017d06:	681a      	ldr	r2, [r3, #0]
 8017d08:	4b11      	ldr	r3, [pc, #68]	; (8017d50 <RegionEU868SetBandTxDone+0x54>)
 8017d0a:	6819      	ldr	r1, [r3, #0]
 8017d0c:	687b      	ldr	r3, [r7, #4]
 8017d0e:	781b      	ldrb	r3, [r3, #0]
 8017d10:	4618      	mov	r0, r3
 8017d12:	4603      	mov	r3, r0
 8017d14:	005b      	lsls	r3, r3, #1
 8017d16:	4403      	add	r3, r0
 8017d18:	009b      	lsls	r3, r3, #2
 8017d1a:	440b      	add	r3, r1
 8017d1c:	3309      	adds	r3, #9
 8017d1e:	781b      	ldrb	r3, [r3, #0]
 8017d20:	4619      	mov	r1, r3
 8017d22:	460b      	mov	r3, r1
 8017d24:	005b      	lsls	r3, r3, #1
 8017d26:	440b      	add	r3, r1
 8017d28:	00db      	lsls	r3, r3, #3
 8017d2a:	18d0      	adds	r0, r2, r3
 8017d2c:	687b      	ldr	r3, [r7, #4]
 8017d2e:	6899      	ldr	r1, [r3, #8]
 8017d30:	687b      	ldr	r3, [r7, #4]
 8017d32:	785c      	ldrb	r4, [r3, #1]
 8017d34:	687b      	ldr	r3, [r7, #4]
 8017d36:	691a      	ldr	r2, [r3, #16]
 8017d38:	9200      	str	r2, [sp, #0]
 8017d3a:	68db      	ldr	r3, [r3, #12]
 8017d3c:	4622      	mov	r2, r4
 8017d3e:	f7ff f8ef 	bl	8016f20 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU868 */
}
 8017d42:	bf00      	nop
 8017d44:	370c      	adds	r7, #12
 8017d46:	46bd      	mov	sp, r7
 8017d48:	bd90      	pop	{r4, r7, pc}
 8017d4a:	bf00      	nop
 8017d4c:	20001a74 	.word	0x20001a74
 8017d50:	20001a70 	.word	0x20001a70

08017d54 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 8017d54:	b580      	push	{r7, lr}
 8017d56:	b0b0      	sub	sp, #192	; 0xc0
 8017d58:	af00      	add	r7, sp, #0
 8017d5a:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 8017d5c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8017d60:	2290      	movs	r2, #144	; 0x90
 8017d62:	2100      	movs	r1, #0
 8017d64:	4618      	mov	r0, r3
 8017d66:	f006 ffbf 	bl	801ece8 <memset>
 8017d6a:	2364      	movs	r3, #100	; 0x64
 8017d6c:	863b      	strh	r3, [r7, #48]	; 0x30
 8017d6e:	2364      	movs	r3, #100	; 0x64
 8017d70:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8017d74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017d78:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 8017d7c:	230a      	movs	r3, #10
 8017d7e:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8017d82:	2364      	movs	r3, #100	; 0x64
 8017d84:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8017d88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017d8c:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 8017d90:	687b      	ldr	r3, [r7, #4]
 8017d92:	7b1b      	ldrb	r3, [r3, #12]
 8017d94:	2b02      	cmp	r3, #2
 8017d96:	d05d      	beq.n	8017e54 <RegionEU868InitDefaults+0x100>
 8017d98:	2b02      	cmp	r3, #2
 8017d9a:	dc6a      	bgt.n	8017e72 <RegionEU868InitDefaults+0x11e>
 8017d9c:	2b00      	cmp	r3, #0
 8017d9e:	d002      	beq.n	8017da6 <RegionEU868InitDefaults+0x52>
 8017da0:	2b01      	cmp	r3, #1
 8017da2:	d03e      	beq.n	8017e22 <RegionEU868InitDefaults+0xce>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 8017da4:	e065      	b.n	8017e72 <RegionEU868InitDefaults+0x11e>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8017da6:	687b      	ldr	r3, [r7, #4]
 8017da8:	681b      	ldr	r3, [r3, #0]
 8017daa:	2b00      	cmp	r3, #0
 8017dac:	d062      	beq.n	8017e74 <RegionEU868InitDefaults+0x120>
 8017dae:	687b      	ldr	r3, [r7, #4]
 8017db0:	685b      	ldr	r3, [r3, #4]
 8017db2:	2b00      	cmp	r3, #0
 8017db4:	d05e      	beq.n	8017e74 <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8017db6:	687b      	ldr	r3, [r7, #4]
 8017db8:	685b      	ldr	r3, [r3, #4]
 8017dba:	4a30      	ldr	r2, [pc, #192]	; (8017e7c <RegionEU868InitDefaults+0x128>)
 8017dbc:	6013      	str	r3, [r2, #0]
            RegionBands = (Band_t*) params->Bands;
 8017dbe:	687b      	ldr	r3, [r7, #4]
 8017dc0:	689b      	ldr	r3, [r3, #8]
 8017dc2:	4a2f      	ldr	r2, [pc, #188]	; (8017e80 <RegionEU868InitDefaults+0x12c>)
 8017dc4:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 8017dc6:	4b2e      	ldr	r3, [pc, #184]	; (8017e80 <RegionEU868InitDefaults+0x12c>)
 8017dc8:	681b      	ldr	r3, [r3, #0]
 8017dca:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8017dce:	2290      	movs	r2, #144	; 0x90
 8017dd0:	4618      	mov	r0, r3
 8017dd2:	f002 f96c 	bl	801a0ae <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 8017dd6:	4b29      	ldr	r3, [pc, #164]	; (8017e7c <RegionEU868InitDefaults+0x128>)
 8017dd8:	681b      	ldr	r3, [r3, #0]
 8017dda:	4a2a      	ldr	r2, [pc, #168]	; (8017e84 <RegionEU868InitDefaults+0x130>)
 8017ddc:	ca07      	ldmia	r2, {r0, r1, r2}
 8017dde:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 8017de2:	4b26      	ldr	r3, [pc, #152]	; (8017e7c <RegionEU868InitDefaults+0x128>)
 8017de4:	681b      	ldr	r3, [r3, #0]
 8017de6:	4a28      	ldr	r2, [pc, #160]	; (8017e88 <RegionEU868InitDefaults+0x134>)
 8017de8:	330c      	adds	r3, #12
 8017dea:	ca07      	ldmia	r2, {r0, r1, r2}
 8017dec:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 8017df0:	4b22      	ldr	r3, [pc, #136]	; (8017e7c <RegionEU868InitDefaults+0x128>)
 8017df2:	681b      	ldr	r3, [r3, #0]
 8017df4:	4a25      	ldr	r2, [pc, #148]	; (8017e8c <RegionEU868InitDefaults+0x138>)
 8017df6:	3318      	adds	r3, #24
 8017df8:	ca07      	ldmia	r2, {r0, r1, r2}
 8017dfa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8017dfe:	4b1f      	ldr	r3, [pc, #124]	; (8017e7c <RegionEU868InitDefaults+0x128>)
 8017e00:	681b      	ldr	r3, [r3, #0]
 8017e02:	2207      	movs	r2, #7
 8017e04:	f8a3 236c 	strh.w	r2, [r3, #876]	; 0x36c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8017e08:	4b1c      	ldr	r3, [pc, #112]	; (8017e7c <RegionEU868InitDefaults+0x128>)
 8017e0a:	681b      	ldr	r3, [r3, #0]
 8017e0c:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8017e10:	4b1a      	ldr	r3, [pc, #104]	; (8017e7c <RegionEU868InitDefaults+0x128>)
 8017e12:	681b      	ldr	r3, [r3, #0]
 8017e14:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8017e18:	2201      	movs	r2, #1
 8017e1a:	4619      	mov	r1, r3
 8017e1c:	f7ff f85a 	bl	8016ed4 <RegionCommonChanMaskCopy>
 8017e20:	e028      	b.n	8017e74 <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 8017e22:	4b16      	ldr	r3, [pc, #88]	; (8017e7c <RegionEU868InitDefaults+0x128>)
 8017e24:	681b      	ldr	r3, [r3, #0]
 8017e26:	2200      	movs	r2, #0
 8017e28:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 8017e2a:	4b14      	ldr	r3, [pc, #80]	; (8017e7c <RegionEU868InitDefaults+0x128>)
 8017e2c:	681b      	ldr	r3, [r3, #0]
 8017e2e:	2200      	movs	r2, #0
 8017e30:	611a      	str	r2, [r3, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 8017e32:	4b12      	ldr	r3, [pc, #72]	; (8017e7c <RegionEU868InitDefaults+0x128>)
 8017e34:	681b      	ldr	r3, [r3, #0]
 8017e36:	2200      	movs	r2, #0
 8017e38:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8017e3a:	4b10      	ldr	r3, [pc, #64]	; (8017e7c <RegionEU868InitDefaults+0x128>)
 8017e3c:	681b      	ldr	r3, [r3, #0]
 8017e3e:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8017e42:	4b0e      	ldr	r3, [pc, #56]	; (8017e7c <RegionEU868InitDefaults+0x128>)
 8017e44:	681b      	ldr	r3, [r3, #0]
 8017e46:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8017e4a:	2201      	movs	r2, #1
 8017e4c:	4619      	mov	r1, r3
 8017e4e:	f7ff f841 	bl	8016ed4 <RegionCommonChanMaskCopy>
            break;
 8017e52:	e00f      	b.n	8017e74 <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 8017e54:	4b09      	ldr	r3, [pc, #36]	; (8017e7c <RegionEU868InitDefaults+0x128>)
 8017e56:	681b      	ldr	r3, [r3, #0]
 8017e58:	f8b3 1360 	ldrh.w	r1, [r3, #864]	; 0x360
 8017e5c:	4b07      	ldr	r3, [pc, #28]	; (8017e7c <RegionEU868InitDefaults+0x128>)
 8017e5e:	681b      	ldr	r3, [r3, #0]
 8017e60:	f8b3 236c 	ldrh.w	r2, [r3, #876]	; 0x36c
 8017e64:	4b05      	ldr	r3, [pc, #20]	; (8017e7c <RegionEU868InitDefaults+0x128>)
 8017e66:	681b      	ldr	r3, [r3, #0]
 8017e68:	430a      	orrs	r2, r1
 8017e6a:	b292      	uxth	r2, r2
 8017e6c:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
            break;
 8017e70:	e000      	b.n	8017e74 <RegionEU868InitDefaults+0x120>
            break;
 8017e72:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8017e74:	37c0      	adds	r7, #192	; 0xc0
 8017e76:	46bd      	mov	sp, r7
 8017e78:	bd80      	pop	{r7, pc}
 8017e7a:	bf00      	nop
 8017e7c:	20001a70 	.word	0x20001a70
 8017e80:	20001a74 	.word	0x20001a74
 8017e84:	0801f640 	.word	0x0801f640
 8017e88:	0801f64c 	.word	0x0801f64c
 8017e8c:	0801f658 	.word	0x0801f658

08017e90 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8017e90:	b580      	push	{r7, lr}
 8017e92:	b084      	sub	sp, #16
 8017e94:	af00      	add	r7, sp, #0
 8017e96:	6078      	str	r0, [r7, #4]
 8017e98:	460b      	mov	r3, r1
 8017e9a:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_EU868 )
    switch( phyAttribute )
 8017e9c:	78fb      	ldrb	r3, [r7, #3]
 8017e9e:	2b0f      	cmp	r3, #15
 8017ea0:	d86c      	bhi.n	8017f7c <RegionEU868Verify+0xec>
 8017ea2:	a201      	add	r2, pc, #4	; (adr r2, 8017ea8 <RegionEU868Verify+0x18>)
 8017ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017ea8:	08017ee9 	.word	0x08017ee9
 8017eac:	08017f7d 	.word	0x08017f7d
 8017eb0:	08017f7d 	.word	0x08017f7d
 8017eb4:	08017f7d 	.word	0x08017f7d
 8017eb8:	08017f7d 	.word	0x08017f7d
 8017ebc:	08017f01 	.word	0x08017f01
 8017ec0:	08017f1f 	.word	0x08017f1f
 8017ec4:	08017f3d 	.word	0x08017f3d
 8017ec8:	08017f7d 	.word	0x08017f7d
 8017ecc:	08017f5b 	.word	0x08017f5b
 8017ed0:	08017f5b 	.word	0x08017f5b
 8017ed4:	08017f7d 	.word	0x08017f7d
 8017ed8:	08017f7d 	.word	0x08017f7d
 8017edc:	08017f7d 	.word	0x08017f7d
 8017ee0:	08017f7d 	.word	0x08017f7d
 8017ee4:	08017f79 	.word	0x08017f79
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 8017ee8:	2300      	movs	r3, #0
 8017eea:	73fb      	strb	r3, [r7, #15]
            return VerifyRfFreq( verify->Frequency, &band );
 8017eec:	687b      	ldr	r3, [r7, #4]
 8017eee:	681b      	ldr	r3, [r3, #0]
 8017ef0:	f107 020f 	add.w	r2, r7, #15
 8017ef4:	4611      	mov	r1, r2
 8017ef6:	4618      	mov	r0, r3
 8017ef8:	f7ff fcf4 	bl	80178e4 <VerifyRfFreq>
 8017efc:	4603      	mov	r3, r0
 8017efe:	e03e      	b.n	8017f7e <RegionEU868Verify+0xee>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 8017f00:	687b      	ldr	r3, [r7, #4]
 8017f02:	f993 3000 	ldrsb.w	r3, [r3]
 8017f06:	2207      	movs	r2, #7
 8017f08:	2100      	movs	r1, #0
 8017f0a:	4618      	mov	r0, r3
 8017f0c:	f7fe ff65 	bl	8016dda <RegionCommonValueInRange>
 8017f10:	4603      	mov	r3, r0
 8017f12:	2b00      	cmp	r3, #0
 8017f14:	bf14      	ite	ne
 8017f16:	2301      	movne	r3, #1
 8017f18:	2300      	moveq	r3, #0
 8017f1a:	b2db      	uxtb	r3, r3
 8017f1c:	e02f      	b.n	8017f7e <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8017f1e:	687b      	ldr	r3, [r7, #4]
 8017f20:	f993 3000 	ldrsb.w	r3, [r3]
 8017f24:	2205      	movs	r2, #5
 8017f26:	2100      	movs	r1, #0
 8017f28:	4618      	mov	r0, r3
 8017f2a:	f7fe ff56 	bl	8016dda <RegionCommonValueInRange>
 8017f2e:	4603      	mov	r3, r0
 8017f30:	2b00      	cmp	r3, #0
 8017f32:	bf14      	ite	ne
 8017f34:	2301      	movne	r3, #1
 8017f36:	2300      	moveq	r3, #0
 8017f38:	b2db      	uxtb	r3, r3
 8017f3a:	e020      	b.n	8017f7e <RegionEU868Verify+0xee>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 8017f3c:	687b      	ldr	r3, [r7, #4]
 8017f3e:	f993 3000 	ldrsb.w	r3, [r3]
 8017f42:	2207      	movs	r2, #7
 8017f44:	2100      	movs	r1, #0
 8017f46:	4618      	mov	r0, r3
 8017f48:	f7fe ff47 	bl	8016dda <RegionCommonValueInRange>
 8017f4c:	4603      	mov	r3, r0
 8017f4e:	2b00      	cmp	r3, #0
 8017f50:	bf14      	ite	ne
 8017f52:	2301      	movne	r3, #1
 8017f54:	2300      	moveq	r3, #0
 8017f56:	b2db      	uxtb	r3, r3
 8017f58:	e011      	b.n	8017f7e <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 8017f5a:	687b      	ldr	r3, [r7, #4]
 8017f5c:	f993 3000 	ldrsb.w	r3, [r3]
 8017f60:	2207      	movs	r2, #7
 8017f62:	2100      	movs	r1, #0
 8017f64:	4618      	mov	r0, r3
 8017f66:	f7fe ff38 	bl	8016dda <RegionCommonValueInRange>
 8017f6a:	4603      	mov	r3, r0
 8017f6c:	2b00      	cmp	r3, #0
 8017f6e:	bf14      	ite	ne
 8017f70:	2301      	movne	r3, #1
 8017f72:	2300      	moveq	r3, #0
 8017f74:	b2db      	uxtb	r3, r3
 8017f76:	e002      	b.n	8017f7e <RegionEU868Verify+0xee>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 8017f78:	2301      	movs	r3, #1
 8017f7a:	e000      	b.n	8017f7e <RegionEU868Verify+0xee>
        }
        default:
            return false;
 8017f7c:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 8017f7e:	4618      	mov	r0, r3
 8017f80:	3710      	adds	r7, #16
 8017f82:	46bd      	mov	sp, r7
 8017f84:	bd80      	pop	{r7, pc}
 8017f86:	bf00      	nop

08017f88 <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8017f88:	b580      	push	{r7, lr}
 8017f8a:	b08a      	sub	sp, #40	; 0x28
 8017f8c:	af00      	add	r7, sp, #0
 8017f8e:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8017f90:	2350      	movs	r3, #80	; 0x50
 8017f92:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 8017f96:	687b      	ldr	r3, [r7, #4]
 8017f98:	7a1b      	ldrb	r3, [r3, #8]
 8017f9a:	2b10      	cmp	r3, #16
 8017f9c:	d162      	bne.n	8018064 <RegionEU868ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 8017f9e:	687b      	ldr	r3, [r7, #4]
 8017fa0:	685b      	ldr	r3, [r3, #4]
 8017fa2:	330f      	adds	r3, #15
 8017fa4:	781b      	ldrb	r3, [r3, #0]
 8017fa6:	2b00      	cmp	r3, #0
 8017fa8:	d15e      	bne.n	8018068 <RegionEU868ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8017faa:	2300      	movs	r3, #0
 8017fac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017fb0:	2303      	movs	r3, #3
 8017fb2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8017fb6:	e050      	b.n	801805a <RegionEU868ApplyCFList+0xd2>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 8017fb8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017fbc:	2b07      	cmp	r3, #7
 8017fbe:	d824      	bhi.n	801800a <RegionEU868ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8017fc0:	687b      	ldr	r3, [r7, #4]
 8017fc2:	685a      	ldr	r2, [r3, #4]
 8017fc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017fc8:	4413      	add	r3, r2
 8017fca:	781b      	ldrb	r3, [r3, #0]
 8017fcc:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8017fce:	69ba      	ldr	r2, [r7, #24]
 8017fd0:	687b      	ldr	r3, [r7, #4]
 8017fd2:	6859      	ldr	r1, [r3, #4]
 8017fd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017fd8:	3301      	adds	r3, #1
 8017fda:	440b      	add	r3, r1
 8017fdc:	781b      	ldrb	r3, [r3, #0]
 8017fde:	021b      	lsls	r3, r3, #8
 8017fe0:	4313      	orrs	r3, r2
 8017fe2:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8017fe4:	69ba      	ldr	r2, [r7, #24]
 8017fe6:	687b      	ldr	r3, [r7, #4]
 8017fe8:	6859      	ldr	r1, [r3, #4]
 8017fea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017fee:	3302      	adds	r3, #2
 8017ff0:	440b      	add	r3, r1
 8017ff2:	781b      	ldrb	r3, [r3, #0]
 8017ff4:	041b      	lsls	r3, r3, #16
 8017ff6:	4313      	orrs	r3, r2
 8017ff8:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 8017ffa:	69bb      	ldr	r3, [r7, #24]
 8017ffc:	2264      	movs	r2, #100	; 0x64
 8017ffe:	fb02 f303 	mul.w	r3, r2, r3
 8018002:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 8018004:	2300      	movs	r3, #0
 8018006:	61fb      	str	r3, [r7, #28]
 8018008:	e006      	b.n	8018018 <RegionEU868ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 801800a:	2300      	movs	r3, #0
 801800c:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 801800e:	2300      	movs	r3, #0
 8018010:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 8018014:	2300      	movs	r3, #0
 8018016:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 8018018:	69bb      	ldr	r3, [r7, #24]
 801801a:	2b00      	cmp	r3, #0
 801801c:	d00b      	beq.n	8018036 <RegionEU868ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 801801e:	f107 0318 	add.w	r3, r7, #24
 8018022:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 8018024:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018028:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 801802a:	f107 0310 	add.w	r3, r7, #16
 801802e:	4618      	mov	r0, r3
 8018030:	f000 fd14 	bl	8018a5c <RegionEU868ChannelAdd>
 8018034:	e007      	b.n	8018046 <RegionEU868ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 8018036:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801803a:	733b      	strb	r3, [r7, #12]

            RegionEU868ChannelsRemove( &channelRemove );
 801803c:	f107 030c 	add.w	r3, r7, #12
 8018040:	4618      	mov	r0, r3
 8018042:	f000 fdad 	bl	8018ba0 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8018046:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801804a:	3303      	adds	r3, #3
 801804c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018050:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018054:	3301      	adds	r3, #1
 8018056:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801805a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801805e:	2b0f      	cmp	r3, #15
 8018060:	d9aa      	bls.n	8017fb8 <RegionEU868ApplyCFList+0x30>
 8018062:	e002      	b.n	801806a <RegionEU868ApplyCFList+0xe2>
        return;
 8018064:	bf00      	nop
 8018066:	e000      	b.n	801806a <RegionEU868ApplyCFList+0xe2>
        return;
 8018068:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 801806a:	3728      	adds	r7, #40	; 0x28
 801806c:	46bd      	mov	sp, r7
 801806e:	bd80      	pop	{r7, pc}

08018070 <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8018070:	b580      	push	{r7, lr}
 8018072:	b082      	sub	sp, #8
 8018074:	af00      	add	r7, sp, #0
 8018076:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 8018078:	687b      	ldr	r3, [r7, #4]
 801807a:	791b      	ldrb	r3, [r3, #4]
 801807c:	2b00      	cmp	r3, #0
 801807e:	d002      	beq.n	8018086 <RegionEU868ChanMaskSet+0x16>
 8018080:	2b01      	cmp	r3, #1
 8018082:	d00b      	beq.n	801809c <RegionEU868ChanMaskSet+0x2c>
 8018084:	e015      	b.n	80180b2 <RegionEU868ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8018086:	4b0e      	ldr	r3, [pc, #56]	; (80180c0 <RegionEU868ChanMaskSet+0x50>)
 8018088:	681b      	ldr	r3, [r3, #0]
 801808a:	f503 7058 	add.w	r0, r3, #864	; 0x360
 801808e:	687b      	ldr	r3, [r7, #4]
 8018090:	681b      	ldr	r3, [r3, #0]
 8018092:	2201      	movs	r2, #1
 8018094:	4619      	mov	r1, r3
 8018096:	f7fe ff1d 	bl	8016ed4 <RegionCommonChanMaskCopy>
            break;
 801809a:	e00c      	b.n	80180b6 <RegionEU868ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 801809c:	4b08      	ldr	r3, [pc, #32]	; (80180c0 <RegionEU868ChanMaskSet+0x50>)
 801809e:	681b      	ldr	r3, [r3, #0]
 80180a0:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 80180a4:	687b      	ldr	r3, [r7, #4]
 80180a6:	681b      	ldr	r3, [r3, #0]
 80180a8:	2201      	movs	r2, #1
 80180aa:	4619      	mov	r1, r3
 80180ac:	f7fe ff12 	bl	8016ed4 <RegionCommonChanMaskCopy>
            break;
 80180b0:	e001      	b.n	80180b6 <RegionEU868ChanMaskSet+0x46>
        }
        default:
            return false;
 80180b2:	2300      	movs	r3, #0
 80180b4:	e000      	b.n	80180b8 <RegionEU868ChanMaskSet+0x48>
    }
    return true;
 80180b6:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 80180b8:	4618      	mov	r0, r3
 80180ba:	3708      	adds	r7, #8
 80180bc:	46bd      	mov	sp, r7
 80180be:	bd80      	pop	{r7, pc}
 80180c0:	20001a70 	.word	0x20001a70

080180c4 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80180c4:	b580      	push	{r7, lr}
 80180c6:	b088      	sub	sp, #32
 80180c8:	af02      	add	r7, sp, #8
 80180ca:	60ba      	str	r2, [r7, #8]
 80180cc:	607b      	str	r3, [r7, #4]
 80180ce:	4603      	mov	r3, r0
 80180d0:	73fb      	strb	r3, [r7, #15]
 80180d2:	460b      	mov	r3, r1
 80180d4:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;
 80180d6:	2300      	movs	r3, #0
 80180d8:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 80180da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80180de:	2b07      	cmp	r3, #7
 80180e0:	bfa8      	it	ge
 80180e2:	2307      	movge	r3, #7
 80180e4:	b25a      	sxtb	r2, r3
 80180e6:	687b      	ldr	r3, [r7, #4]
 80180e8:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 80180ea:	687b      	ldr	r3, [r7, #4]
 80180ec:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80180f0:	491e      	ldr	r1, [pc, #120]	; (801816c <RegionEU868ComputeRxWindowParameters+0xa8>)
 80180f2:	4618      	mov	r0, r3
 80180f4:	f7ff fb8e 	bl	8017814 <RegionCommonGetBandwidth>
 80180f8:	4603      	mov	r3, r0
 80180fa:	b2da      	uxtb	r2, r3
 80180fc:	687b      	ldr	r3, [r7, #4]
 80180fe:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8018100:	687b      	ldr	r3, [r7, #4]
 8018102:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018106:	2b07      	cmp	r3, #7
 8018108:	d10a      	bne.n	8018120 <RegionEU868ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 801810a:	687b      	ldr	r3, [r7, #4]
 801810c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018110:	461a      	mov	r2, r3
 8018112:	4b17      	ldr	r3, [pc, #92]	; (8018170 <RegionEU868ComputeRxWindowParameters+0xac>)
 8018114:	5c9b      	ldrb	r3, [r3, r2]
 8018116:	4618      	mov	r0, r3
 8018118:	f7ff f910 	bl	801733c <RegionCommonComputeSymbolTimeFsk>
 801811c:	6178      	str	r0, [r7, #20]
 801811e:	e011      	b.n	8018144 <RegionEU868ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 8018120:	687b      	ldr	r3, [r7, #4]
 8018122:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018126:	461a      	mov	r2, r3
 8018128:	4b11      	ldr	r3, [pc, #68]	; (8018170 <RegionEU868ComputeRxWindowParameters+0xac>)
 801812a:	5c9a      	ldrb	r2, [r3, r2]
 801812c:	687b      	ldr	r3, [r7, #4]
 801812e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018132:	4619      	mov	r1, r3
 8018134:	4b0d      	ldr	r3, [pc, #52]	; (801816c <RegionEU868ComputeRxWindowParameters+0xa8>)
 8018136:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801813a:	4619      	mov	r1, r3
 801813c:	4610      	mov	r0, r2
 801813e:	f7ff f8e7 	bl	8017310 <RegionCommonComputeSymbolTimeLoRa>
 8018142:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8018144:	4b0b      	ldr	r3, [pc, #44]	; (8018174 <RegionEU868ComputeRxWindowParameters+0xb0>)
 8018146:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018148:	4798      	blx	r3
 801814a:	687b      	ldr	r3, [r7, #4]
 801814c:	3308      	adds	r3, #8
 801814e:	687a      	ldr	r2, [r7, #4]
 8018150:	320c      	adds	r2, #12
 8018152:	7bb9      	ldrb	r1, [r7, #14]
 8018154:	9201      	str	r2, [sp, #4]
 8018156:	9300      	str	r3, [sp, #0]
 8018158:	4603      	mov	r3, r0
 801815a:	68ba      	ldr	r2, [r7, #8]
 801815c:	6978      	ldr	r0, [r7, #20]
 801815e:	f7ff f8fd 	bl	801735c <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 8018162:	bf00      	nop
 8018164:	3718      	adds	r7, #24
 8018166:	46bd      	mov	sp, r7
 8018168:	bd80      	pop	{r7, pc}
 801816a:	bf00      	nop
 801816c:	0801fc18 	.word	0x0801fc18
 8018170:	0801fc10 	.word	0x0801fc10
 8018174:	0801fccc 	.word	0x0801fccc

08018178 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8018178:	b5b0      	push	{r4, r5, r7, lr}
 801817a:	b090      	sub	sp, #64	; 0x40
 801817c:	af0a      	add	r7, sp, #40	; 0x28
 801817e:	6078      	str	r0, [r7, #4]
 8018180:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8018182:	687b      	ldr	r3, [r7, #4]
 8018184:	785b      	ldrb	r3, [r3, #1]
 8018186:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 8018188:	2300      	movs	r3, #0
 801818a:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 801818c:	2300      	movs	r3, #0
 801818e:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 8018190:	687b      	ldr	r3, [r7, #4]
 8018192:	685b      	ldr	r3, [r3, #4]
 8018194:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 8018196:	4b5a      	ldr	r3, [pc, #360]	; (8018300 <RegionEU868RxConfig+0x188>)
 8018198:	685b      	ldr	r3, [r3, #4]
 801819a:	4798      	blx	r3
 801819c:	4603      	mov	r3, r0
 801819e:	2b00      	cmp	r3, #0
 80181a0:	d001      	beq.n	80181a6 <RegionEU868RxConfig+0x2e>
    {
        return false;
 80181a2:	2300      	movs	r3, #0
 80181a4:	e0a8      	b.n	80182f8 <RegionEU868RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 80181a6:	687b      	ldr	r3, [r7, #4]
 80181a8:	7cdb      	ldrb	r3, [r3, #19]
 80181aa:	2b00      	cmp	r3, #0
 80181ac:	d126      	bne.n	80181fc <RegionEU868RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 80181ae:	4b55      	ldr	r3, [pc, #340]	; (8018304 <RegionEU868RxConfig+0x18c>)
 80181b0:	681a      	ldr	r2, [r3, #0]
 80181b2:	687b      	ldr	r3, [r7, #4]
 80181b4:	781b      	ldrb	r3, [r3, #0]
 80181b6:	4619      	mov	r1, r3
 80181b8:	460b      	mov	r3, r1
 80181ba:	005b      	lsls	r3, r3, #1
 80181bc:	440b      	add	r3, r1
 80181be:	009b      	lsls	r3, r3, #2
 80181c0:	4413      	add	r3, r2
 80181c2:	681b      	ldr	r3, [r3, #0]
 80181c4:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 80181c6:	4b4f      	ldr	r3, [pc, #316]	; (8018304 <RegionEU868RxConfig+0x18c>)
 80181c8:	681a      	ldr	r2, [r3, #0]
 80181ca:	687b      	ldr	r3, [r7, #4]
 80181cc:	781b      	ldrb	r3, [r3, #0]
 80181ce:	4619      	mov	r1, r3
 80181d0:	460b      	mov	r3, r1
 80181d2:	005b      	lsls	r3, r3, #1
 80181d4:	440b      	add	r3, r1
 80181d6:	009b      	lsls	r3, r3, #2
 80181d8:	4413      	add	r3, r2
 80181da:	3304      	adds	r3, #4
 80181dc:	681b      	ldr	r3, [r3, #0]
 80181de:	2b00      	cmp	r3, #0
 80181e0:	d00c      	beq.n	80181fc <RegionEU868RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 80181e2:	4b48      	ldr	r3, [pc, #288]	; (8018304 <RegionEU868RxConfig+0x18c>)
 80181e4:	681a      	ldr	r2, [r3, #0]
 80181e6:	687b      	ldr	r3, [r7, #4]
 80181e8:	781b      	ldrb	r3, [r3, #0]
 80181ea:	4619      	mov	r1, r3
 80181ec:	460b      	mov	r3, r1
 80181ee:	005b      	lsls	r3, r3, #1
 80181f0:	440b      	add	r3, r1
 80181f2:	009b      	lsls	r3, r3, #2
 80181f4:	4413      	add	r3, r2
 80181f6:	3304      	adds	r3, #4
 80181f8:	681b      	ldr	r3, [r3, #0]
 80181fa:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 80181fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018200:	4a41      	ldr	r2, [pc, #260]	; (8018308 <RegionEU868RxConfig+0x190>)
 8018202:	5cd3      	ldrb	r3, [r2, r3]
 8018204:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 8018206:	4b3e      	ldr	r3, [pc, #248]	; (8018300 <RegionEU868RxConfig+0x188>)
 8018208:	68db      	ldr	r3, [r3, #12]
 801820a:	6938      	ldr	r0, [r7, #16]
 801820c:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 801820e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018212:	2b07      	cmp	r3, #7
 8018214:	d128      	bne.n	8018268 <RegionEU868RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 8018216:	2300      	movs	r3, #0
 8018218:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 801821a:	4b39      	ldr	r3, [pc, #228]	; (8018300 <RegionEU868RxConfig+0x188>)
 801821c:	699c      	ldr	r4, [r3, #24]
 801821e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8018222:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8018226:	fb02 f303 	mul.w	r3, r2, r3
 801822a:	4619      	mov	r1, r3
 801822c:	687b      	ldr	r3, [r7, #4]
 801822e:	689b      	ldr	r3, [r3, #8]
 8018230:	b29b      	uxth	r3, r3
 8018232:	687a      	ldr	r2, [r7, #4]
 8018234:	7c92      	ldrb	r2, [r2, #18]
 8018236:	7df8      	ldrb	r0, [r7, #23]
 8018238:	9209      	str	r2, [sp, #36]	; 0x24
 801823a:	2200      	movs	r2, #0
 801823c:	9208      	str	r2, [sp, #32]
 801823e:	2200      	movs	r2, #0
 8018240:	9207      	str	r2, [sp, #28]
 8018242:	2200      	movs	r2, #0
 8018244:	9206      	str	r2, [sp, #24]
 8018246:	2201      	movs	r2, #1
 8018248:	9205      	str	r2, [sp, #20]
 801824a:	2200      	movs	r2, #0
 801824c:	9204      	str	r2, [sp, #16]
 801824e:	2200      	movs	r2, #0
 8018250:	9203      	str	r2, [sp, #12]
 8018252:	9302      	str	r3, [sp, #8]
 8018254:	2305      	movs	r3, #5
 8018256:	9301      	str	r3, [sp, #4]
 8018258:	4b2c      	ldr	r3, [pc, #176]	; (801830c <RegionEU868RxConfig+0x194>)
 801825a:	9300      	str	r3, [sp, #0]
 801825c:	2300      	movs	r3, #0
 801825e:	460a      	mov	r2, r1
 8018260:	f24c 3150 	movw	r1, #50000	; 0xc350
 8018264:	47a0      	blx	r4
 8018266:	e024      	b.n	80182b2 <RegionEU868RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 8018268:	2301      	movs	r3, #1
 801826a:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 801826c:	4b24      	ldr	r3, [pc, #144]	; (8018300 <RegionEU868RxConfig+0x188>)
 801826e:	699c      	ldr	r4, [r3, #24]
 8018270:	687b      	ldr	r3, [r7, #4]
 8018272:	789b      	ldrb	r3, [r3, #2]
 8018274:	461d      	mov	r5, r3
 8018276:	f997 100e 	ldrsb.w	r1, [r7, #14]
 801827a:	687b      	ldr	r3, [r7, #4]
 801827c:	689b      	ldr	r3, [r3, #8]
 801827e:	b29b      	uxth	r3, r3
 8018280:	687a      	ldr	r2, [r7, #4]
 8018282:	7c92      	ldrb	r2, [r2, #18]
 8018284:	7df8      	ldrb	r0, [r7, #23]
 8018286:	9209      	str	r2, [sp, #36]	; 0x24
 8018288:	2201      	movs	r2, #1
 801828a:	9208      	str	r2, [sp, #32]
 801828c:	2200      	movs	r2, #0
 801828e:	9207      	str	r2, [sp, #28]
 8018290:	2200      	movs	r2, #0
 8018292:	9206      	str	r2, [sp, #24]
 8018294:	2200      	movs	r2, #0
 8018296:	9205      	str	r2, [sp, #20]
 8018298:	2200      	movs	r2, #0
 801829a:	9204      	str	r2, [sp, #16]
 801829c:	2200      	movs	r2, #0
 801829e:	9203      	str	r2, [sp, #12]
 80182a0:	9302      	str	r3, [sp, #8]
 80182a2:	2308      	movs	r3, #8
 80182a4:	9301      	str	r3, [sp, #4]
 80182a6:	2300      	movs	r3, #0
 80182a8:	9300      	str	r3, [sp, #0]
 80182aa:	2301      	movs	r3, #1
 80182ac:	460a      	mov	r2, r1
 80182ae:	4629      	mov	r1, r5
 80182b0:	47a0      	blx	r4
    }

    if( rxConfig->RepeaterSupport == true )
 80182b2:	687b      	ldr	r3, [r7, #4]
 80182b4:	7c5b      	ldrb	r3, [r3, #17]
 80182b6:	2b00      	cmp	r3, #0
 80182b8:	d005      	beq.n	80182c6 <RegionEU868RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 80182ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80182be:	4a14      	ldr	r2, [pc, #80]	; (8018310 <RegionEU868RxConfig+0x198>)
 80182c0:	5cd3      	ldrb	r3, [r2, r3]
 80182c2:	75bb      	strb	r3, [r7, #22]
 80182c4:	e004      	b.n	80182d0 <RegionEU868RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 80182c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80182ca:	4a12      	ldr	r2, [pc, #72]	; (8018314 <RegionEU868RxConfig+0x19c>)
 80182cc:	5cd3      	ldrb	r3, [r2, r3]
 80182ce:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 80182d0:	4b0b      	ldr	r3, [pc, #44]	; (8018300 <RegionEU868RxConfig+0x188>)
 80182d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80182d4:	7dba      	ldrb	r2, [r7, #22]
 80182d6:	320d      	adds	r2, #13
 80182d8:	b2d1      	uxtb	r1, r2
 80182da:	7dfa      	ldrb	r2, [r7, #23]
 80182dc:	4610      	mov	r0, r2
 80182de:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 80182e0:	687b      	ldr	r3, [r7, #4]
 80182e2:	7cdb      	ldrb	r3, [r3, #19]
 80182e4:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80182e8:	6939      	ldr	r1, [r7, #16]
 80182ea:	4618      	mov	r0, r3
 80182ec:	f7ff fab0 	bl	8017850 <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 80182f0:	683b      	ldr	r3, [r7, #0]
 80182f2:	7bfa      	ldrb	r2, [r7, #15]
 80182f4:	701a      	strb	r2, [r3, #0]
    return true;
 80182f6:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 80182f8:	4618      	mov	r0, r3
 80182fa:	3718      	adds	r7, #24
 80182fc:	46bd      	mov	sp, r7
 80182fe:	bdb0      	pop	{r4, r5, r7, pc}
 8018300:	0801fccc 	.word	0x0801fccc
 8018304:	20001a70 	.word	0x20001a70
 8018308:	0801fc10 	.word	0x0801fc10
 801830c:	00014585 	.word	0x00014585
 8018310:	0801fc40 	.word	0x0801fc40
 8018314:	0801fc38 	.word	0x0801fc38

08018318 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8018318:	b590      	push	{r4, r7, lr}
 801831a:	b093      	sub	sp, #76	; 0x4c
 801831c:	af0a      	add	r7, sp, #40	; 0x28
 801831e:	60f8      	str	r0, [r7, #12]
 8018320:	60b9      	str	r1, [r7, #8]
 8018322:	607a      	str	r2, [r7, #4]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 8018324:	68fb      	ldr	r3, [r7, #12]
 8018326:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801832a:	461a      	mov	r2, r3
 801832c:	4b5d      	ldr	r3, [pc, #372]	; (80184a4 <RegionEU868TxConfig+0x18c>)
 801832e:	5c9b      	ldrb	r3, [r3, r2]
 8018330:	77bb      	strb	r3, [r7, #30]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 8018332:	68fb      	ldr	r3, [r7, #12]
 8018334:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8018338:	4b5b      	ldr	r3, [pc, #364]	; (80184a8 <RegionEU868TxConfig+0x190>)
 801833a:	681a      	ldr	r2, [r3, #0]
 801833c:	4b5b      	ldr	r3, [pc, #364]	; (80184ac <RegionEU868TxConfig+0x194>)
 801833e:	6819      	ldr	r1, [r3, #0]
 8018340:	68fb      	ldr	r3, [r7, #12]
 8018342:	781b      	ldrb	r3, [r3, #0]
 8018344:	461c      	mov	r4, r3
 8018346:	4623      	mov	r3, r4
 8018348:	005b      	lsls	r3, r3, #1
 801834a:	4423      	add	r3, r4
 801834c:	009b      	lsls	r3, r3, #2
 801834e:	440b      	add	r3, r1
 8018350:	3309      	adds	r3, #9
 8018352:	781b      	ldrb	r3, [r3, #0]
 8018354:	4619      	mov	r1, r3
 8018356:	460b      	mov	r3, r1
 8018358:	005b      	lsls	r3, r3, #1
 801835a:	440b      	add	r3, r1
 801835c:	00db      	lsls	r3, r3, #3
 801835e:	4413      	add	r3, r2
 8018360:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8018364:	4619      	mov	r1, r3
 8018366:	f7ff fa40 	bl	80177ea <RegionCommonLimitTxPower>
 801836a:	4603      	mov	r3, r0
 801836c:	777b      	strb	r3, [r7, #29]
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 801836e:	68fb      	ldr	r3, [r7, #12]
 8018370:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018374:	494e      	ldr	r1, [pc, #312]	; (80184b0 <RegionEU868TxConfig+0x198>)
 8018376:	4618      	mov	r0, r3
 8018378:	f7ff fa4c 	bl	8017814 <RegionCommonGetBandwidth>
 801837c:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 801837e:	2300      	movs	r3, #0
 8018380:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8018382:	68fb      	ldr	r3, [r7, #12]
 8018384:	6859      	ldr	r1, [r3, #4]
 8018386:	68fb      	ldr	r3, [r7, #12]
 8018388:	689a      	ldr	r2, [r3, #8]
 801838a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801838e:	4618      	mov	r0, r3
 8018390:	f7ff f89c 	bl	80174cc <RegionCommonComputeTxPower>
 8018394:	4603      	mov	r3, r0
 8018396:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8018398:	4b46      	ldr	r3, [pc, #280]	; (80184b4 <RegionEU868TxConfig+0x19c>)
 801839a:	68da      	ldr	r2, [r3, #12]
 801839c:	4b43      	ldr	r3, [pc, #268]	; (80184ac <RegionEU868TxConfig+0x194>)
 801839e:	6819      	ldr	r1, [r3, #0]
 80183a0:	68fb      	ldr	r3, [r7, #12]
 80183a2:	781b      	ldrb	r3, [r3, #0]
 80183a4:	4618      	mov	r0, r3
 80183a6:	4603      	mov	r3, r0
 80183a8:	005b      	lsls	r3, r3, #1
 80183aa:	4403      	add	r3, r0
 80183ac:	009b      	lsls	r3, r3, #2
 80183ae:	440b      	add	r3, r1
 80183b0:	681b      	ldr	r3, [r3, #0]
 80183b2:	4618      	mov	r0, r3
 80183b4:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 80183b6:	68fb      	ldr	r3, [r7, #12]
 80183b8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80183bc:	2b07      	cmp	r3, #7
 80183be:	d124      	bne.n	801840a <RegionEU868TxConfig+0xf2>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 80183c0:	2300      	movs	r3, #0
 80183c2:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 80183c4:	4b3b      	ldr	r3, [pc, #236]	; (80184b4 <RegionEU868TxConfig+0x19c>)
 80183c6:	69dc      	ldr	r4, [r3, #28]
 80183c8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80183cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80183d0:	fb02 f303 	mul.w	r3, r2, r3
 80183d4:	461a      	mov	r2, r3
 80183d6:	f997 1017 	ldrsb.w	r1, [r7, #23]
 80183da:	7ff8      	ldrb	r0, [r7, #31]
 80183dc:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80183e0:	9308      	str	r3, [sp, #32]
 80183e2:	2300      	movs	r3, #0
 80183e4:	9307      	str	r3, [sp, #28]
 80183e6:	2300      	movs	r3, #0
 80183e8:	9306      	str	r3, [sp, #24]
 80183ea:	2300      	movs	r3, #0
 80183ec:	9305      	str	r3, [sp, #20]
 80183ee:	2301      	movs	r3, #1
 80183f0:	9304      	str	r3, [sp, #16]
 80183f2:	2300      	movs	r3, #0
 80183f4:	9303      	str	r3, [sp, #12]
 80183f6:	2305      	movs	r3, #5
 80183f8:	9302      	str	r3, [sp, #8]
 80183fa:	2300      	movs	r3, #0
 80183fc:	9301      	str	r3, [sp, #4]
 80183fe:	9200      	str	r2, [sp, #0]
 8018400:	69bb      	ldr	r3, [r7, #24]
 8018402:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8018406:	47a0      	blx	r4
 8018408:	e01d      	b.n	8018446 <RegionEU868TxConfig+0x12e>
    }
    else
    {
        modem = MODEM_LORA;
 801840a:	2301      	movs	r3, #1
 801840c:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 801840e:	4b29      	ldr	r3, [pc, #164]	; (80184b4 <RegionEU868TxConfig+0x19c>)
 8018410:	69dc      	ldr	r4, [r3, #28]
 8018412:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8018416:	f997 1017 	ldrsb.w	r1, [r7, #23]
 801841a:	7ff8      	ldrb	r0, [r7, #31]
 801841c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8018420:	9208      	str	r2, [sp, #32]
 8018422:	2200      	movs	r2, #0
 8018424:	9207      	str	r2, [sp, #28]
 8018426:	2200      	movs	r2, #0
 8018428:	9206      	str	r2, [sp, #24]
 801842a:	2200      	movs	r2, #0
 801842c:	9205      	str	r2, [sp, #20]
 801842e:	2201      	movs	r2, #1
 8018430:	9204      	str	r2, [sp, #16]
 8018432:	2200      	movs	r2, #0
 8018434:	9203      	str	r2, [sp, #12]
 8018436:	2208      	movs	r2, #8
 8018438:	9202      	str	r2, [sp, #8]
 801843a:	2201      	movs	r2, #1
 801843c:	9201      	str	r2, [sp, #4]
 801843e:	9300      	str	r3, [sp, #0]
 8018440:	69bb      	ldr	r3, [r7, #24]
 8018442:	2200      	movs	r2, #0
 8018444:	47a0      	blx	r4
    }
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8018446:	4b19      	ldr	r3, [pc, #100]	; (80184ac <RegionEU868TxConfig+0x194>)
 8018448:	681a      	ldr	r2, [r3, #0]
 801844a:	68fb      	ldr	r3, [r7, #12]
 801844c:	781b      	ldrb	r3, [r3, #0]
 801844e:	4619      	mov	r1, r3
 8018450:	460b      	mov	r3, r1
 8018452:	005b      	lsls	r3, r3, #1
 8018454:	440b      	add	r3, r1
 8018456:	009b      	lsls	r3, r3, #2
 8018458:	4413      	add	r3, r2
 801845a:	681a      	ldr	r2, [r3, #0]
 801845c:	68fb      	ldr	r3, [r7, #12]
 801845e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018462:	4619      	mov	r1, r3
 8018464:	4610      	mov	r0, r2
 8018466:	f7ff fa25 	bl	80178b4 <RegionCommonTxConfigPrint>

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 801846a:	68fb      	ldr	r3, [r7, #12]
 801846c:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8018470:	68fb      	ldr	r3, [r7, #12]
 8018472:	899b      	ldrh	r3, [r3, #12]
 8018474:	4619      	mov	r1, r3
 8018476:	4610      	mov	r0, r2
 8018478:	f7ff faaa 	bl	80179d0 <GetTimeOnAir>
 801847c:	4602      	mov	r2, r0
 801847e:	687b      	ldr	r3, [r7, #4]
 8018480:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8018482:	4b0c      	ldr	r3, [pc, #48]	; (80184b4 <RegionEU868TxConfig+0x19c>)
 8018484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018486:	68fa      	ldr	r2, [r7, #12]
 8018488:	8992      	ldrh	r2, [r2, #12]
 801848a:	b2d1      	uxtb	r1, r2
 801848c:	7ffa      	ldrb	r2, [r7, #31]
 801848e:	4610      	mov	r0, r2
 8018490:	4798      	blx	r3

    *txPower = txPowerLimited;
 8018492:	68bb      	ldr	r3, [r7, #8]
 8018494:	7f7a      	ldrb	r2, [r7, #29]
 8018496:	701a      	strb	r2, [r3, #0]
    return true;
 8018498:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 801849a:	4618      	mov	r0, r3
 801849c:	3724      	adds	r7, #36	; 0x24
 801849e:	46bd      	mov	sp, r7
 80184a0:	bd90      	pop	{r4, r7, pc}
 80184a2:	bf00      	nop
 80184a4:	0801fc10 	.word	0x0801fc10
 80184a8:	20001a74 	.word	0x20001a74
 80184ac:	20001a70 	.word	0x20001a70
 80184b0:	0801fc18 	.word	0x0801fc18
 80184b4:	0801fccc 	.word	0x0801fccc

080184b8 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 80184b8:	b590      	push	{r4, r7, lr}
 80184ba:	b093      	sub	sp, #76	; 0x4c
 80184bc:	af00      	add	r7, sp, #0
 80184be:	60f8      	str	r0, [r7, #12]
 80184c0:	60b9      	str	r1, [r7, #8]
 80184c2:	607a      	str	r2, [r7, #4]
 80184c4:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 80184c6:	2307      	movs	r3, #7
 80184c8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 80184cc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80184d0:	2200      	movs	r2, #0
 80184d2:	601a      	str	r2, [r3, #0]
 80184d4:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 80184d6:	2300      	movs	r3, #0
 80184d8:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    uint8_t bytesProcessed = 0;
 80184dc:	2300      	movs	r3, #0
 80184de:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    uint16_t chMask = 0;
 80184e2:	2300      	movs	r3, #0
 80184e4:	877b      	strh	r3, [r7, #58]	; 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 80184e6:	e085      	b.n	80185f4 <RegionEU868LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 80184e8:	68fb      	ldr	r3, [r7, #12]
 80184ea:	685a      	ldr	r2, [r3, #4]
 80184ec:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80184f0:	4413      	add	r3, r2
 80184f2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80184f6:	4611      	mov	r1, r2
 80184f8:	4618      	mov	r0, r3
 80184fa:	f7fe fe2f 	bl	801715c <RegionCommonParseLinkAdrReq>
 80184fe:	4603      	mov	r3, r0
 8018500:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

        if( nextIndex == 0 )
 8018504:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8018508:	2b00      	cmp	r3, #0
 801850a:	d07b      	beq.n	8018604 <RegionEU868LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 801850c:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8018510:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8018514:	4413      	add	r3, r2
 8018516:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 801851a:	2307      	movs	r3, #7
 801851c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 8018520:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8018524:	877b      	strh	r3, [r7, #58]	; 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8018526:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801852a:	2b00      	cmp	r3, #0
 801852c:	d109      	bne.n	8018542 <RegionEU868LinkAdrReq+0x8a>
 801852e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018530:	2b00      	cmp	r3, #0
 8018532:	d106      	bne.n	8018542 <RegionEU868LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 8018534:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8018538:	f023 0301 	bic.w	r3, r3, #1
 801853c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8018540:	e058      	b.n	80185f4 <RegionEU868LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8018542:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8018546:	2b00      	cmp	r3, #0
 8018548:	d003      	beq.n	8018552 <RegionEU868LinkAdrReq+0x9a>
 801854a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801854e:	2b05      	cmp	r3, #5
 8018550:	d903      	bls.n	801855a <RegionEU868LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 8018552:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8018556:	2b06      	cmp	r3, #6
 8018558:	d906      	bls.n	8018568 <RegionEU868LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 801855a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801855e:	f023 0301 	bic.w	r3, r3, #1
 8018562:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8018566:	e045      	b.n	80185f4 <RegionEU868LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8018568:	2300      	movs	r3, #0
 801856a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 801856e:	e03d      	b.n	80185ec <RegionEU868LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 8018570:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8018574:	2b06      	cmp	r3, #6
 8018576:	d118      	bne.n	80185aa <RegionEU868LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 8018578:	4b5f      	ldr	r3, [pc, #380]	; (80186f8 <RegionEU868LinkAdrReq+0x240>)
 801857a:	6819      	ldr	r1, [r3, #0]
 801857c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8018580:	4613      	mov	r3, r2
 8018582:	005b      	lsls	r3, r3, #1
 8018584:	4413      	add	r3, r2
 8018586:	009b      	lsls	r3, r3, #2
 8018588:	440b      	add	r3, r1
 801858a:	681b      	ldr	r3, [r3, #0]
 801858c:	2b00      	cmp	r3, #0
 801858e:	d028      	beq.n	80185e2 <RegionEU868LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 8018590:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8018594:	2201      	movs	r2, #1
 8018596:	fa02 f303 	lsl.w	r3, r2, r3
 801859a:	b21a      	sxth	r2, r3
 801859c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801859e:	b21b      	sxth	r3, r3
 80185a0:	4313      	orrs	r3, r2
 80185a2:	b21b      	sxth	r3, r3
 80185a4:	b29b      	uxth	r3, r3
 80185a6:	877b      	strh	r3, [r7, #58]	; 0x3a
 80185a8:	e01b      	b.n	80185e2 <RegionEU868LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 80185aa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80185ac:	461a      	mov	r2, r3
 80185ae:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80185b2:	fa42 f303 	asr.w	r3, r2, r3
 80185b6:	f003 0301 	and.w	r3, r3, #1
 80185ba:	2b00      	cmp	r3, #0
 80185bc:	d011      	beq.n	80185e2 <RegionEU868LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 80185be:	4b4e      	ldr	r3, [pc, #312]	; (80186f8 <RegionEU868LinkAdrReq+0x240>)
 80185c0:	6819      	ldr	r1, [r3, #0]
 80185c2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80185c6:	4613      	mov	r3, r2
 80185c8:	005b      	lsls	r3, r3, #1
 80185ca:	4413      	add	r3, r2
 80185cc:	009b      	lsls	r3, r3, #2
 80185ce:	440b      	add	r3, r1
 80185d0:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 80185d2:	2b00      	cmp	r3, #0
 80185d4:	d105      	bne.n	80185e2 <RegionEU868LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 80185d6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80185da:	f023 0301 	bic.w	r3, r3, #1
 80185de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 80185e2:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80185e6:	3301      	adds	r3, #1
 80185e8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 80185ec:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80185f0:	2b0f      	cmp	r3, #15
 80185f2:	d9bd      	bls.n	8018570 <RegionEU868LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 80185f4:	68fb      	ldr	r3, [r7, #12]
 80185f6:	7a1b      	ldrb	r3, [r3, #8]
 80185f8:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80185fc:	429a      	cmp	r2, r3
 80185fe:	f4ff af73 	bcc.w	80184e8 <RegionEU868LinkAdrReq+0x30>
 8018602:	e000      	b.n	8018606 <RegionEU868LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 8018604:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8018606:	2302      	movs	r3, #2
 8018608:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 801860c:	68fb      	ldr	r3, [r7, #12]
 801860e:	7a5b      	ldrb	r3, [r3, #9]
 8018610:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    phyParam = RegionEU868GetPhyParam( &getPhy );
 8018614:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8018618:	4618      	mov	r0, r3
 801861a:	f7ff fa29 	bl	8017a70 <RegionEU868GetPhyParam>
 801861e:	4603      	mov	r3, r0
 8018620:	633b      	str	r3, [r7, #48]	; 0x30

    linkAdrVerifyParams.Status = status;
 8018622:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8018626:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8018628:	68fb      	ldr	r3, [r7, #12]
 801862a:	7a9b      	ldrb	r3, [r3, #10]
 801862c:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 801862e:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d
 8018632:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8018634:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8018638:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 801863a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801863e:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8018640:	68fb      	ldr	r3, [r7, #12]
 8018642:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8018646:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8018648:	68fb      	ldr	r3, [r7, #12]
 801864a:	f993 300c 	ldrsb.w	r3, [r3, #12]
 801864e:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8018650:	68fb      	ldr	r3, [r7, #12]
 8018652:	7b5b      	ldrb	r3, [r3, #13]
 8018654:	b25b      	sxtb	r3, r3
 8018656:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 8018658:	2310      	movs	r3, #16
 801865a:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 801865c:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 8018660:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8018662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018664:	b25b      	sxtb	r3, r3
 8018666:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 801866a:	2307      	movs	r3, #7
 801866c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8018670:	4b21      	ldr	r3, [pc, #132]	; (80186f8 <RegionEU868LinkAdrReq+0x240>)
 8018672:	681b      	ldr	r3, [r3, #0]
 8018674:	62bb      	str	r3, [r7, #40]	; 0x28
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 8018676:	2307      	movs	r3, #7
 8018678:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 801867c:	2300      	movs	r3, #0
 801867e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8018682:	68fb      	ldr	r3, [r7, #12]
 8018684:	681b      	ldr	r3, [r3, #0]
 8018686:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8018688:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 801868c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8018690:	1c9a      	adds	r2, r3, #2
 8018692:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8018696:	1c59      	adds	r1, r3, #1
 8018698:	f107 0010 	add.w	r0, r7, #16
 801869c:	4623      	mov	r3, r4
 801869e:	f7fe fdae 	bl	80171fe <RegionCommonLinkAdrReqVerifyParams>
 80186a2:	4603      	mov	r3, r0
 80186a4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 80186a8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80186ac:	2b07      	cmp	r3, #7
 80186ae:	d10d      	bne.n	80186cc <RegionEU868LinkAdrReq+0x214>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 80186b0:	4b11      	ldr	r3, [pc, #68]	; (80186f8 <RegionEU868LinkAdrReq+0x240>)
 80186b2:	681b      	ldr	r3, [r3, #0]
 80186b4:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80186b8:	220c      	movs	r2, #12
 80186ba:	2100      	movs	r1, #0
 80186bc:	4618      	mov	r0, r3
 80186be:	f001 fd31 	bl	801a124 <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 80186c2:	4b0d      	ldr	r3, [pc, #52]	; (80186f8 <RegionEU868LinkAdrReq+0x240>)
 80186c4:	681b      	ldr	r3, [r3, #0]
 80186c6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80186c8:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 80186cc:	f997 203d 	ldrsb.w	r2, [r7, #61]	; 0x3d
 80186d0:	68bb      	ldr	r3, [r7, #8]
 80186d2:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 80186d4:	f997 203e 	ldrsb.w	r2, [r7, #62]	; 0x3e
 80186d8:	687b      	ldr	r3, [r7, #4]
 80186da:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 80186dc:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80186e0:	683b      	ldr	r3, [r7, #0]
 80186e2:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 80186e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80186e6:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80186ea:	701a      	strb	r2, [r3, #0]

#endif /* REGION_EU868 */
    return status;
 80186ec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80186f0:	4618      	mov	r0, r3
 80186f2:	374c      	adds	r7, #76	; 0x4c
 80186f4:	46bd      	mov	sp, r7
 80186f6:	bd90      	pop	{r4, r7, pc}
 80186f8:	20001a70 	.word	0x20001a70

080186fc <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 80186fc:	b580      	push	{r7, lr}
 80186fe:	b084      	sub	sp, #16
 8018700:	af00      	add	r7, sp, #0
 8018702:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8018704:	2307      	movs	r3, #7
 8018706:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8018708:	2300      	movs	r3, #0
 801870a:	73bb      	strb	r3, [r7, #14]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 801870c:	687b      	ldr	r3, [r7, #4]
 801870e:	685b      	ldr	r3, [r3, #4]
 8018710:	f107 020e 	add.w	r2, r7, #14
 8018714:	4611      	mov	r1, r2
 8018716:	4618      	mov	r0, r3
 8018718:	f7ff f8e4 	bl	80178e4 <VerifyRfFreq>
 801871c:	4603      	mov	r3, r0
 801871e:	f083 0301 	eor.w	r3, r3, #1
 8018722:	b2db      	uxtb	r3, r3
 8018724:	2b00      	cmp	r3, #0
 8018726:	d003      	beq.n	8018730 <RegionEU868RxParamSetupReq+0x34>
    {
        status &= 0xFE; // Channel frequency KO
 8018728:	7bfb      	ldrb	r3, [r7, #15]
 801872a:	f023 0301 	bic.w	r3, r3, #1
 801872e:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 8018730:	687b      	ldr	r3, [r7, #4]
 8018732:	f993 3000 	ldrsb.w	r3, [r3]
 8018736:	2207      	movs	r2, #7
 8018738:	2100      	movs	r1, #0
 801873a:	4618      	mov	r0, r3
 801873c:	f7fe fb4d 	bl	8016dda <RegionCommonValueInRange>
 8018740:	4603      	mov	r3, r0
 8018742:	2b00      	cmp	r3, #0
 8018744:	d103      	bne.n	801874e <RegionEU868RxParamSetupReq+0x52>
    {
        status &= 0xFD; // Datarate KO
 8018746:	7bfb      	ldrb	r3, [r7, #15]
 8018748:	f023 0302 	bic.w	r3, r3, #2
 801874c:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 801874e:	687b      	ldr	r3, [r7, #4]
 8018750:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018754:	2205      	movs	r2, #5
 8018756:	2100      	movs	r1, #0
 8018758:	4618      	mov	r0, r3
 801875a:	f7fe fb3e 	bl	8016dda <RegionCommonValueInRange>
 801875e:	4603      	mov	r3, r0
 8018760:	2b00      	cmp	r3, #0
 8018762:	d103      	bne.n	801876c <RegionEU868RxParamSetupReq+0x70>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8018764:	7bfb      	ldrb	r3, [r7, #15]
 8018766:	f023 0304 	bic.w	r3, r3, #4
 801876a:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_EU868 */
    return status;
 801876c:	7bfb      	ldrb	r3, [r7, #15]
}
 801876e:	4618      	mov	r0, r3
 8018770:	3710      	adds	r7, #16
 8018772:	46bd      	mov	sp, r7
 8018774:	bd80      	pop	{r7, pc}
	...

08018778 <RegionEU868NewChannelReq>:

int8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8018778:	b580      	push	{r7, lr}
 801877a:	b086      	sub	sp, #24
 801877c:	af00      	add	r7, sp, #0
 801877e:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8018780:	2303      	movs	r3, #3
 8018782:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8018784:	687b      	ldr	r3, [r7, #4]
 8018786:	681b      	ldr	r3, [r3, #0]
 8018788:	681b      	ldr	r3, [r3, #0]
 801878a:	2b00      	cmp	r3, #0
 801878c:	d114      	bne.n	80187b8 <RegionEU868NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 801878e:	687b      	ldr	r3, [r7, #4]
 8018790:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8018794:	b2db      	uxtb	r3, r3
 8018796:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 8018798:	f107 0308 	add.w	r3, r7, #8
 801879c:	4618      	mov	r0, r3
 801879e:	f000 f9ff 	bl	8018ba0 <RegionEU868ChannelsRemove>
 80187a2:	4603      	mov	r3, r0
 80187a4:	f083 0301 	eor.w	r3, r3, #1
 80187a8:	b2db      	uxtb	r3, r3
 80187aa:	2b00      	cmp	r3, #0
 80187ac:	d03b      	beq.n	8018826 <RegionEU868NewChannelReq+0xae>
        {
            status &= 0xFC;
 80187ae:	7dfb      	ldrb	r3, [r7, #23]
 80187b0:	f023 0303 	bic.w	r3, r3, #3
 80187b4:	75fb      	strb	r3, [r7, #23]
 80187b6:	e036      	b.n	8018826 <RegionEU868NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 80187b8:	687b      	ldr	r3, [r7, #4]
 80187ba:	681b      	ldr	r3, [r3, #0]
 80187bc:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 80187be:	687b      	ldr	r3, [r7, #4]
 80187c0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80187c4:	b2db      	uxtb	r3, r3
 80187c6:	743b      	strb	r3, [r7, #16]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 80187c8:	f107 030c 	add.w	r3, r7, #12
 80187cc:	4618      	mov	r0, r3
 80187ce:	f000 f945 	bl	8018a5c <RegionEU868ChannelAdd>
 80187d2:	4603      	mov	r3, r0
 80187d4:	2b06      	cmp	r3, #6
 80187d6:	d820      	bhi.n	801881a <RegionEU868NewChannelReq+0xa2>
 80187d8:	a201      	add	r2, pc, #4	; (adr r2, 80187e0 <RegionEU868NewChannelReq+0x68>)
 80187da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80187de:	bf00      	nop
 80187e0:	08018825 	.word	0x08018825
 80187e4:	0801881b 	.word	0x0801881b
 80187e8:	0801881b 	.word	0x0801881b
 80187ec:	0801881b 	.word	0x0801881b
 80187f0:	080187fd 	.word	0x080187fd
 80187f4:	08018807 	.word	0x08018807
 80187f8:	08018811 	.word	0x08018811
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 80187fc:	7dfb      	ldrb	r3, [r7, #23]
 80187fe:	f023 0301 	bic.w	r3, r3, #1
 8018802:	75fb      	strb	r3, [r7, #23]
                break;
 8018804:	e00f      	b.n	8018826 <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 8018806:	7dfb      	ldrb	r3, [r7, #23]
 8018808:	f023 0302 	bic.w	r3, r3, #2
 801880c:	75fb      	strb	r3, [r7, #23]
                break;
 801880e:	e00a      	b.n	8018826 <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 8018810:	7dfb      	ldrb	r3, [r7, #23]
 8018812:	f023 0303 	bic.w	r3, r3, #3
 8018816:	75fb      	strb	r3, [r7, #23]
                break;
 8018818:	e005      	b.n	8018826 <RegionEU868NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 801881a:	7dfb      	ldrb	r3, [r7, #23]
 801881c:	f023 0303 	bic.w	r3, r3, #3
 8018820:	75fb      	strb	r3, [r7, #23]
                break;
 8018822:	e000      	b.n	8018826 <RegionEU868NewChannelReq+0xae>
                break;
 8018824:	bf00      	nop
            }
        }
    }

    return status;
 8018826:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801882a:	4618      	mov	r0, r3
 801882c:	3718      	adds	r7, #24
 801882e:	46bd      	mov	sp, r7
 8018830:	bd80      	pop	{r7, pc}
 8018832:	bf00      	nop

08018834 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8018834:	b480      	push	{r7}
 8018836:	b083      	sub	sp, #12
 8018838:	af00      	add	r7, sp, #0
 801883a:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 801883c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018840:	4618      	mov	r0, r3
 8018842:	370c      	adds	r7, #12
 8018844:	46bd      	mov	sp, r7
 8018846:	bc80      	pop	{r7}
 8018848:	4770      	bx	lr
	...

0801884c <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 801884c:	b580      	push	{r7, lr}
 801884e:	b084      	sub	sp, #16
 8018850:	af00      	add	r7, sp, #0
 8018852:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8018854:	2303      	movs	r3, #3
 8018856:	73fb      	strb	r3, [r7, #15]

#if defined( REGION_EU868 )
    uint8_t band = 0;
 8018858:	2300      	movs	r3, #0
 801885a:	73bb      	strb	r3, [r7, #14]

    if( dlChannelReq->ChannelId >= ( CHANNELS_MASK_SIZE * 16 ) )
 801885c:	687b      	ldr	r3, [r7, #4]
 801885e:	781b      	ldrb	r3, [r3, #0]
 8018860:	2b0f      	cmp	r3, #15
 8018862:	d901      	bls.n	8018868 <RegionEU868DlChannelReq+0x1c>
    {
        return 0;
 8018864:	2300      	movs	r3, #0
 8018866:	e035      	b.n	80188d4 <RegionEU868DlChannelReq+0x88>
    }

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 8018868:	687b      	ldr	r3, [r7, #4]
 801886a:	685b      	ldr	r3, [r3, #4]
 801886c:	f107 020e 	add.w	r2, r7, #14
 8018870:	4611      	mov	r1, r2
 8018872:	4618      	mov	r0, r3
 8018874:	f7ff f836 	bl	80178e4 <VerifyRfFreq>
 8018878:	4603      	mov	r3, r0
 801887a:	f083 0301 	eor.w	r3, r3, #1
 801887e:	b2db      	uxtb	r3, r3
 8018880:	2b00      	cmp	r3, #0
 8018882:	d003      	beq.n	801888c <RegionEU868DlChannelReq+0x40>
    {
        status &= 0xFE;
 8018884:	7bfb      	ldrb	r3, [r7, #15]
 8018886:	f023 0301 	bic.w	r3, r3, #1
 801888a:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 801888c:	4b13      	ldr	r3, [pc, #76]	; (80188dc <RegionEU868DlChannelReq+0x90>)
 801888e:	681a      	ldr	r2, [r3, #0]
 8018890:	687b      	ldr	r3, [r7, #4]
 8018892:	781b      	ldrb	r3, [r3, #0]
 8018894:	4619      	mov	r1, r3
 8018896:	460b      	mov	r3, r1
 8018898:	005b      	lsls	r3, r3, #1
 801889a:	440b      	add	r3, r1
 801889c:	009b      	lsls	r3, r3, #2
 801889e:	4413      	add	r3, r2
 80188a0:	681b      	ldr	r3, [r3, #0]
 80188a2:	2b00      	cmp	r3, #0
 80188a4:	d103      	bne.n	80188ae <RegionEU868DlChannelReq+0x62>
    {
        status &= 0xFD;
 80188a6:	7bfb      	ldrb	r3, [r7, #15]
 80188a8:	f023 0302 	bic.w	r3, r3, #2
 80188ac:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 80188ae:	7bfb      	ldrb	r3, [r7, #15]
 80188b0:	2b03      	cmp	r3, #3
 80188b2:	d10d      	bne.n	80188d0 <RegionEU868DlChannelReq+0x84>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 80188b4:	4b09      	ldr	r3, [pc, #36]	; (80188dc <RegionEU868DlChannelReq+0x90>)
 80188b6:	6819      	ldr	r1, [r3, #0]
 80188b8:	687b      	ldr	r3, [r7, #4]
 80188ba:	781b      	ldrb	r3, [r3, #0]
 80188bc:	4618      	mov	r0, r3
 80188be:	687b      	ldr	r3, [r7, #4]
 80188c0:	685a      	ldr	r2, [r3, #4]
 80188c2:	4603      	mov	r3, r0
 80188c4:	005b      	lsls	r3, r3, #1
 80188c6:	4403      	add	r3, r0
 80188c8:	009b      	lsls	r3, r3, #2
 80188ca:	440b      	add	r3, r1
 80188cc:	3304      	adds	r3, #4
 80188ce:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_EU868 */
    return status;
 80188d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80188d4:	4618      	mov	r0, r3
 80188d6:	3710      	adds	r7, #16
 80188d8:	46bd      	mov	sp, r7
 80188da:	bd80      	pop	{r7, pc}
 80188dc:	20001a70 	.word	0x20001a70

080188e0 <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 80188e0:	b480      	push	{r7}
 80188e2:	b083      	sub	sp, #12
 80188e4:	af00      	add	r7, sp, #0
 80188e6:	4603      	mov	r3, r0
 80188e8:	460a      	mov	r2, r1
 80188ea:	71fb      	strb	r3, [r7, #7]
 80188ec:	4613      	mov	r3, r2
 80188ee:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_EU868 )
    return currentDr;
 80188f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_EU868 */
}
 80188f4:	4618      	mov	r0, r3
 80188f6:	370c      	adds	r7, #12
 80188f8:	46bd      	mov	sp, r7
 80188fa:	bc80      	pop	{r7}
 80188fc:	4770      	bx	lr
	...

08018900 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8018900:	b580      	push	{r7, lr}
 8018902:	b09a      	sub	sp, #104	; 0x68
 8018904:	af02      	add	r7, sp, #8
 8018906:	60f8      	str	r0, [r7, #12]
 8018908:	60b9      	str	r1, [r7, #8]
 801890a:	607a      	str	r2, [r7, #4]
 801890c:	603b      	str	r3, [r7, #0]
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 801890e:	2300      	movs	r3, #0
 8018910:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    uint8_t nbRestrictedChannels = 0;
 8018914:	2300      	movs	r3, #0
 8018916:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 801891a:	2300      	movs	r3, #0
 801891c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801891e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8018922:	2200      	movs	r2, #0
 8018924:	601a      	str	r2, [r3, #0]
 8018926:	605a      	str	r2, [r3, #4]
 8018928:	609a      	str	r2, [r3, #8]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 801892a:	230c      	movs	r3, #12
 801892c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 8018930:	2307      	movs	r3, #7
 8018932:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 8018934:	4b47      	ldr	r3, [pc, #284]	; (8018a54 <RegionEU868NextChannel+0x154>)
 8018936:	681b      	ldr	r3, [r3, #0]
 8018938:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801893c:	2201      	movs	r2, #1
 801893e:	2100      	movs	r1, #0
 8018940:	4618      	mov	r0, r3
 8018942:	f7fe fa9b 	bl	8016e7c <RegionCommonCountChannels>
 8018946:	4603      	mov	r3, r0
 8018948:	2b00      	cmp	r3, #0
 801894a:	d10a      	bne.n	8018962 <RegionEU868NextChannel+0x62>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 801894c:	4b41      	ldr	r3, [pc, #260]	; (8018a54 <RegionEU868NextChannel+0x154>)
 801894e:	681b      	ldr	r3, [r3, #0]
 8018950:	f8b3 2360 	ldrh.w	r2, [r3, #864]	; 0x360
 8018954:	4b3f      	ldr	r3, [pc, #252]	; (8018a54 <RegionEU868NextChannel+0x154>)
 8018956:	681b      	ldr	r3, [r3, #0]
 8018958:	f042 0207 	orr.w	r2, r2, #7
 801895c:	b292      	uxth	r2, r2
 801895e:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8018962:	68fb      	ldr	r3, [r7, #12]
 8018964:	7a5b      	ldrb	r3, [r3, #9]
 8018966:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8018968:	68fb      	ldr	r3, [r7, #12]
 801896a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801896e:	b2db      	uxtb	r3, r3
 8018970:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8018972:	4b38      	ldr	r3, [pc, #224]	; (8018a54 <RegionEU868NextChannel+0x154>)
 8018974:	681b      	ldr	r3, [r3, #0]
 8018976:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801897a:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 801897c:	4b35      	ldr	r3, [pc, #212]	; (8018a54 <RegionEU868NextChannel+0x154>)
 801897e:	681b      	ldr	r3, [r3, #0]
 8018980:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 8018982:	4b35      	ldr	r3, [pc, #212]	; (8018a58 <RegionEU868NextChannel+0x158>)
 8018984:	681b      	ldr	r3, [r3, #0]
 8018986:	623b      	str	r3, [r7, #32]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 8018988:	2310      	movs	r3, #16
 801898a:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 801898c:	f107 0312 	add.w	r3, r7, #18
 8018990:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8018992:	68fb      	ldr	r3, [r7, #12]
 8018994:	681b      	ldr	r3, [r3, #0]
 8018996:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8018998:	68fb      	ldr	r3, [r7, #12]
 801899a:	685b      	ldr	r3, [r3, #4]
 801899c:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 801899e:	68fb      	ldr	r3, [r7, #12]
 80189a0:	7a9b      	ldrb	r3, [r3, #10]
 80189a2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 80189a6:	2306      	movs	r3, #6
 80189a8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 80189ac:	68fa      	ldr	r2, [r7, #12]
 80189ae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80189b2:	320c      	adds	r2, #12
 80189b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80189b8:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 80189bc:	68fb      	ldr	r3, [r7, #12]
 80189be:	7d1b      	ldrb	r3, [r3, #20]
 80189c0:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 80189c4:	68fb      	ldr	r3, [r7, #12]
 80189c6:	f993 2008 	ldrsb.w	r2, [r3, #8]
 80189ca:	68fb      	ldr	r3, [r7, #12]
 80189cc:	8adb      	ldrh	r3, [r3, #22]
 80189ce:	4619      	mov	r1, r3
 80189d0:	4610      	mov	r0, r2
 80189d2:	f7fe fffd 	bl	80179d0 <GetTimeOnAir>
 80189d6:	4603      	mov	r3, r0
 80189d8:	647b      	str	r3, [r7, #68]	; 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 80189da:	f107 0314 	add.w	r3, r7, #20
 80189de:	64bb      	str	r3, [r7, #72]	; 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 80189e0:	f107 015e 	add.w	r1, r7, #94	; 0x5e
 80189e4:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80189e8:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80189ec:	687b      	ldr	r3, [r7, #4]
 80189ee:	9301      	str	r3, [sp, #4]
 80189f0:	f107 035d 	add.w	r3, r7, #93	; 0x5d
 80189f4:	9300      	str	r3, [sp, #0]
 80189f6:	460b      	mov	r3, r1
 80189f8:	6839      	ldr	r1, [r7, #0]
 80189fa:	f7fe fe56 	bl	80176aa <RegionCommonIdentifyChannels>
 80189fe:	4603      	mov	r3, r0
 8018a00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8018a04:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8018a08:	2b00      	cmp	r3, #0
 8018a0a:	d10e      	bne.n	8018a2a <RegionEU868NextChannel+0x12a>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8018a0c:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8018a10:	3b01      	subs	r3, #1
 8018a12:	4619      	mov	r1, r3
 8018a14:	2000      	movs	r0, #0
 8018a16:	f001 fb33 	bl	801a080 <randr>
 8018a1a:	4603      	mov	r3, r0
 8018a1c:	3360      	adds	r3, #96	; 0x60
 8018a1e:	443b      	add	r3, r7
 8018a20:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8018a24:	68bb      	ldr	r3, [r7, #8]
 8018a26:	701a      	strb	r2, [r3, #0]
 8018a28:	e00e      	b.n	8018a48 <RegionEU868NextChannel+0x148>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 8018a2a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8018a2e:	2b0c      	cmp	r3, #12
 8018a30:	d10a      	bne.n	8018a48 <RegionEU868NextChannel+0x148>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8018a32:	4b08      	ldr	r3, [pc, #32]	; (8018a54 <RegionEU868NextChannel+0x154>)
 8018a34:	681b      	ldr	r3, [r3, #0]
 8018a36:	f8b3 2360 	ldrh.w	r2, [r3, #864]	; 0x360
 8018a3a:	4b06      	ldr	r3, [pc, #24]	; (8018a54 <RegionEU868NextChannel+0x154>)
 8018a3c:	681b      	ldr	r3, [r3, #0]
 8018a3e:	f042 0207 	orr.w	r2, r2, #7
 8018a42:	b292      	uxth	r2, r2
 8018a44:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    }
    return status;
 8018a48:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8018a4c:	4618      	mov	r0, r3
 8018a4e:	3760      	adds	r7, #96	; 0x60
 8018a50:	46bd      	mov	sp, r7
 8018a52:	bd80      	pop	{r7, pc}
 8018a54:	20001a70 	.word	0x20001a70
 8018a58:	20001a74 	.word	0x20001a74

08018a5c <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8018a5c:	b580      	push	{r7, lr}
 8018a5e:	b084      	sub	sp, #16
 8018a60:	af00      	add	r7, sp, #0
 8018a62:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8018a64:	2300      	movs	r3, #0
 8018a66:	733b      	strb	r3, [r7, #12]
    bool drInvalid = false;
 8018a68:	2300      	movs	r3, #0
 8018a6a:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 8018a6c:	2300      	movs	r3, #0
 8018a6e:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 8018a70:	687b      	ldr	r3, [r7, #4]
 8018a72:	791b      	ldrb	r3, [r3, #4]
 8018a74:	737b      	strb	r3, [r7, #13]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8018a76:	7b7b      	ldrb	r3, [r7, #13]
 8018a78:	2b02      	cmp	r3, #2
 8018a7a:	d801      	bhi.n	8018a80 <RegionEU868ChannelAdd+0x24>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8018a7c:	2306      	movs	r3, #6
 8018a7e:	e089      	b.n	8018b94 <RegionEU868ChannelAdd+0x138>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 8018a80:	7b7b      	ldrb	r3, [r7, #13]
 8018a82:	2b0f      	cmp	r3, #15
 8018a84:	d901      	bls.n	8018a8a <RegionEU868ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8018a86:	2303      	movs	r3, #3
 8018a88:	e084      	b.n	8018b94 <RegionEU868ChannelAdd+0x138>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8018a8a:	687b      	ldr	r3, [r7, #4]
 8018a8c:	681b      	ldr	r3, [r3, #0]
 8018a8e:	7a1b      	ldrb	r3, [r3, #8]
 8018a90:	f343 0303 	sbfx	r3, r3, #0, #4
 8018a94:	b25b      	sxtb	r3, r3
 8018a96:	2207      	movs	r2, #7
 8018a98:	2100      	movs	r1, #0
 8018a9a:	4618      	mov	r0, r3
 8018a9c:	f7fe f99d 	bl	8016dda <RegionCommonValueInRange>
 8018aa0:	4603      	mov	r3, r0
 8018aa2:	2b00      	cmp	r3, #0
 8018aa4:	d101      	bne.n	8018aaa <RegionEU868ChannelAdd+0x4e>
    {
        drInvalid = true;
 8018aa6:	2301      	movs	r3, #1
 8018aa8:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8018aaa:	687b      	ldr	r3, [r7, #4]
 8018aac:	681b      	ldr	r3, [r3, #0]
 8018aae:	7a1b      	ldrb	r3, [r3, #8]
 8018ab0:	f343 1303 	sbfx	r3, r3, #4, #4
 8018ab4:	b25b      	sxtb	r3, r3
 8018ab6:	2207      	movs	r2, #7
 8018ab8:	2100      	movs	r1, #0
 8018aba:	4618      	mov	r0, r3
 8018abc:	f7fe f98d 	bl	8016dda <RegionCommonValueInRange>
 8018ac0:	4603      	mov	r3, r0
 8018ac2:	2b00      	cmp	r3, #0
 8018ac4:	d101      	bne.n	8018aca <RegionEU868ChannelAdd+0x6e>
    {
        drInvalid = true;
 8018ac6:	2301      	movs	r3, #1
 8018ac8:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8018aca:	687b      	ldr	r3, [r7, #4]
 8018acc:	681b      	ldr	r3, [r3, #0]
 8018ace:	7a1b      	ldrb	r3, [r3, #8]
 8018ad0:	f343 0303 	sbfx	r3, r3, #0, #4
 8018ad4:	b25a      	sxtb	r2, r3
 8018ad6:	687b      	ldr	r3, [r7, #4]
 8018ad8:	681b      	ldr	r3, [r3, #0]
 8018ada:	7a1b      	ldrb	r3, [r3, #8]
 8018adc:	f343 1303 	sbfx	r3, r3, #4, #4
 8018ae0:	b25b      	sxtb	r3, r3
 8018ae2:	429a      	cmp	r2, r3
 8018ae4:	dd01      	ble.n	8018aea <RegionEU868ChannelAdd+0x8e>
    {
        drInvalid = true;
 8018ae6:	2301      	movs	r3, #1
 8018ae8:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 8018aea:	7bbb      	ldrb	r3, [r7, #14]
 8018aec:	f083 0301 	eor.w	r3, r3, #1
 8018af0:	b2db      	uxtb	r3, r3
 8018af2:	2b00      	cmp	r3, #0
 8018af4:	d010      	beq.n	8018b18 <RegionEU868ChannelAdd+0xbc>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 8018af6:	687b      	ldr	r3, [r7, #4]
 8018af8:	681b      	ldr	r3, [r3, #0]
 8018afa:	681b      	ldr	r3, [r3, #0]
 8018afc:	f107 020c 	add.w	r2, r7, #12
 8018b00:	4611      	mov	r1, r2
 8018b02:	4618      	mov	r0, r3
 8018b04:	f7fe feee 	bl	80178e4 <VerifyRfFreq>
 8018b08:	4603      	mov	r3, r0
 8018b0a:	f083 0301 	eor.w	r3, r3, #1
 8018b0e:	b2db      	uxtb	r3, r3
 8018b10:	2b00      	cmp	r3, #0
 8018b12:	d001      	beq.n	8018b18 <RegionEU868ChannelAdd+0xbc>
        {
            freqInvalid = true;
 8018b14:	2301      	movs	r3, #1
 8018b16:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8018b18:	7bfb      	ldrb	r3, [r7, #15]
 8018b1a:	2b00      	cmp	r3, #0
 8018b1c:	d004      	beq.n	8018b28 <RegionEU868ChannelAdd+0xcc>
 8018b1e:	7bbb      	ldrb	r3, [r7, #14]
 8018b20:	2b00      	cmp	r3, #0
 8018b22:	d001      	beq.n	8018b28 <RegionEU868ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8018b24:	2306      	movs	r3, #6
 8018b26:	e035      	b.n	8018b94 <RegionEU868ChannelAdd+0x138>
    }
    if( drInvalid == true )
 8018b28:	7bfb      	ldrb	r3, [r7, #15]
 8018b2a:	2b00      	cmp	r3, #0
 8018b2c:	d001      	beq.n	8018b32 <RegionEU868ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 8018b2e:	2305      	movs	r3, #5
 8018b30:	e030      	b.n	8018b94 <RegionEU868ChannelAdd+0x138>
    }
    if( freqInvalid == true )
 8018b32:	7bbb      	ldrb	r3, [r7, #14]
 8018b34:	2b00      	cmp	r3, #0
 8018b36:	d001      	beq.n	8018b3c <RegionEU868ChannelAdd+0xe0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8018b38:	2304      	movs	r3, #4
 8018b3a:	e02b      	b.n	8018b94 <RegionEU868ChannelAdd+0x138>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 8018b3c:	4b17      	ldr	r3, [pc, #92]	; (8018b9c <RegionEU868ChannelAdd+0x140>)
 8018b3e:	6819      	ldr	r1, [r3, #0]
 8018b40:	7b7a      	ldrb	r2, [r7, #13]
 8018b42:	4613      	mov	r3, r2
 8018b44:	005b      	lsls	r3, r3, #1
 8018b46:	4413      	add	r3, r2
 8018b48:	009b      	lsls	r3, r3, #2
 8018b4a:	18c8      	adds	r0, r1, r3
 8018b4c:	687b      	ldr	r3, [r7, #4]
 8018b4e:	681b      	ldr	r3, [r3, #0]
 8018b50:	220c      	movs	r2, #12
 8018b52:	4619      	mov	r1, r3
 8018b54:	f001 faab 	bl	801a0ae <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 8018b58:	4b10      	ldr	r3, [pc, #64]	; (8018b9c <RegionEU868ChannelAdd+0x140>)
 8018b5a:	6819      	ldr	r1, [r3, #0]
 8018b5c:	7b7a      	ldrb	r2, [r7, #13]
 8018b5e:	7b38      	ldrb	r0, [r7, #12]
 8018b60:	4613      	mov	r3, r2
 8018b62:	005b      	lsls	r3, r3, #1
 8018b64:	4413      	add	r3, r2
 8018b66:	009b      	lsls	r3, r3, #2
 8018b68:	440b      	add	r3, r1
 8018b6a:	3309      	adds	r3, #9
 8018b6c:	4602      	mov	r2, r0
 8018b6e:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 8018b70:	4b0a      	ldr	r3, [pc, #40]	; (8018b9c <RegionEU868ChannelAdd+0x140>)
 8018b72:	681b      	ldr	r3, [r3, #0]
 8018b74:	f8b3 3360 	ldrh.w	r3, [r3, #864]	; 0x360
 8018b78:	b21a      	sxth	r2, r3
 8018b7a:	7b7b      	ldrb	r3, [r7, #13]
 8018b7c:	2101      	movs	r1, #1
 8018b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8018b82:	b21b      	sxth	r3, r3
 8018b84:	4313      	orrs	r3, r2
 8018b86:	b21a      	sxth	r2, r3
 8018b88:	4b04      	ldr	r3, [pc, #16]	; (8018b9c <RegionEU868ChannelAdd+0x140>)
 8018b8a:	681b      	ldr	r3, [r3, #0]
 8018b8c:	b292      	uxth	r2, r2
 8018b8e:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    return LORAMAC_STATUS_OK;
 8018b92:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8018b94:	4618      	mov	r0, r3
 8018b96:	3710      	adds	r7, #16
 8018b98:	46bd      	mov	sp, r7
 8018b9a:	bd80      	pop	{r7, pc}
 8018b9c:	20001a70 	.word	0x20001a70

08018ba0 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 8018ba0:	b580      	push	{r7, lr}
 8018ba2:	b086      	sub	sp, #24
 8018ba4:	af00      	add	r7, sp, #0
 8018ba6:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 8018ba8:	687b      	ldr	r3, [r7, #4]
 8018baa:	781b      	ldrb	r3, [r3, #0]
 8018bac:	75fb      	strb	r3, [r7, #23]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8018bae:	7dfb      	ldrb	r3, [r7, #23]
 8018bb0:	2b02      	cmp	r3, #2
 8018bb2:	d801      	bhi.n	8018bb8 <RegionEU868ChannelsRemove+0x18>
    {
        return false;
 8018bb4:	2300      	movs	r3, #0
 8018bb6:	e016      	b.n	8018be6 <RegionEU868ChannelsRemove+0x46>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8018bb8:	4b0d      	ldr	r3, [pc, #52]	; (8018bf0 <RegionEU868ChannelsRemove+0x50>)
 8018bba:	6819      	ldr	r1, [r3, #0]
 8018bbc:	7dfa      	ldrb	r2, [r7, #23]
 8018bbe:	4613      	mov	r3, r2
 8018bc0:	005b      	lsls	r3, r3, #1
 8018bc2:	4413      	add	r3, r2
 8018bc4:	009b      	lsls	r3, r3, #2
 8018bc6:	440b      	add	r3, r1
 8018bc8:	461a      	mov	r2, r3
 8018bca:	2300      	movs	r3, #0
 8018bcc:	6013      	str	r3, [r2, #0]
 8018bce:	6053      	str	r3, [r2, #4]
 8018bd0:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 8018bd2:	4b07      	ldr	r3, [pc, #28]	; (8018bf0 <RegionEU868ChannelsRemove+0x50>)
 8018bd4:	681b      	ldr	r3, [r3, #0]
 8018bd6:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8018bda:	7df9      	ldrb	r1, [r7, #23]
 8018bdc:	2210      	movs	r2, #16
 8018bde:	4618      	mov	r0, r3
 8018be0:	f7fe f918 	bl	8016e14 <RegionCommonChanDisable>
 8018be4:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_EU868 */
}
 8018be6:	4618      	mov	r0, r3
 8018be8:	3718      	adds	r7, #24
 8018bea:	46bd      	mov	sp, r7
 8018bec:	bd80      	pop	{r7, pc}
 8018bee:	bf00      	nop
 8018bf0:	20001a70 	.word	0x20001a70

08018bf4 <RegionEU868ApplyDrOffset>:
#endif /* REGION_EU868 */
}
#endif /* REGION_VERSION */

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8018bf4:	b480      	push	{r7}
 8018bf6:	b085      	sub	sp, #20
 8018bf8:	af00      	add	r7, sp, #0
 8018bfa:	4603      	mov	r3, r0
 8018bfc:	71fb      	strb	r3, [r7, #7]
 8018bfe:	460b      	mov	r3, r1
 8018c00:	71bb      	strb	r3, [r7, #6]
 8018c02:	4613      	mov	r3, r2
 8018c04:	717b      	strb	r3, [r7, #5]
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 8018c06:	79ba      	ldrb	r2, [r7, #6]
 8018c08:	797b      	ldrb	r3, [r7, #5]
 8018c0a:	1ad3      	subs	r3, r2, r3
 8018c0c:	b2db      	uxtb	r3, r3
 8018c0e:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 8018c10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018c14:	2b00      	cmp	r3, #0
 8018c16:	da01      	bge.n	8018c1c <RegionEU868ApplyDrOffset+0x28>
    {
        datarate = DR_0;
 8018c18:	2300      	movs	r3, #0
 8018c1a:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 8018c1c:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_EU868 */
}
 8018c1e:	4618      	mov	r0, r3
 8018c20:	3714      	adds	r7, #20
 8018c22:	46bd      	mov	sp, r7
 8018c24:	bc80      	pop	{r7}
 8018c26:	4770      	bx	lr

08018c28 <LimitTxPower>:
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
static Band_t* RegionBands;
#endif /* REGION_VERSION */

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
 8018c28:	b580      	push	{r7, lr}
 8018c2a:	b084      	sub	sp, #16
 8018c2c:	af00      	add	r7, sp, #0
 8018c2e:	603b      	str	r3, [r7, #0]
 8018c30:	4603      	mov	r3, r0
 8018c32:	71fb      	strb	r3, [r7, #7]
 8018c34:	460b      	mov	r3, r1
 8018c36:	71bb      	strb	r3, [r7, #6]
 8018c38:	4613      	mov	r3, r2
 8018c3a:	717b      	strb	r3, [r7, #5]
    int8_t txPowerResult = txPower;
 8018c3c:	79fb      	ldrb	r3, [r7, #7]
 8018c3e:	73fb      	strb	r3, [r7, #15]

    // Limit tx power to the band max
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 8018c40:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8018c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018c48:	4611      	mov	r1, r2
 8018c4a:	4618      	mov	r0, r3
 8018c4c:	f7fe fdcd 	bl	80177ea <RegionCommonLimitTxPower>
 8018c50:	4603      	mov	r3, r0
 8018c52:	73fb      	strb	r3, [r7, #15]

    if( datarate == DR_4 )
 8018c54:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8018c58:	2b04      	cmp	r3, #4
 8018c5a:	d106      	bne.n	8018c6a <LimitTxPower+0x42>
    {// Limit tx power to max 26dBm
        txPowerResult = MAX( txPower, TX_POWER_2 );
 8018c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018c60:	2b02      	cmp	r3, #2
 8018c62:	bfb8      	it	lt
 8018c64:	2302      	movlt	r3, #2
 8018c66:	73fb      	strb	r3, [r7, #15]
 8018c68:	e00d      	b.n	8018c86 <LimitTxPower+0x5e>
    }
    else
    {
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 8018c6a:	2204      	movs	r2, #4
 8018c6c:	2100      	movs	r1, #0
 8018c6e:	6838      	ldr	r0, [r7, #0]
 8018c70:	f7fe f904 	bl	8016e7c <RegionCommonCountChannels>
 8018c74:	4603      	mov	r3, r0
 8018c76:	2b31      	cmp	r3, #49	; 0x31
 8018c78:	d805      	bhi.n	8018c86 <LimitTxPower+0x5e>
        {// Limit tx power to max 21dBm
            txPowerResult = MAX( txPower, TX_POWER_5 );
 8018c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018c7e:	2b05      	cmp	r3, #5
 8018c80:	bfb8      	it	lt
 8018c82:	2305      	movlt	r3, #5
 8018c84:	73fb      	strb	r3, [r7, #15]
        }
    }
    return txPowerResult;
 8018c86:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018c8a:	4618      	mov	r0, r3
 8018c8c:	3710      	adds	r7, #16
 8018c8e:	46bd      	mov	sp, r7
 8018c90:	bd80      	pop	{r7, pc}
	...

08018c94 <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq )
{
 8018c94:	b580      	push	{r7, lr}
 8018c96:	b082      	sub	sp, #8
 8018c98:	af00      	add	r7, sp, #0
 8018c9a:	6078      	str	r0, [r7, #4]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8018c9c:	4b18      	ldr	r3, [pc, #96]	; (8018d00 <VerifyRfFreq+0x6c>)
 8018c9e:	6a1b      	ldr	r3, [r3, #32]
 8018ca0:	6878      	ldr	r0, [r7, #4]
 8018ca2:	4798      	blx	r3
 8018ca4:	4603      	mov	r3, r0
 8018ca6:	f083 0301 	eor.w	r3, r3, #1
 8018caa:	b2db      	uxtb	r3, r3
 8018cac:	2b00      	cmp	r3, #0
 8018cae:	d001      	beq.n	8018cb4 <VerifyRfFreq+0x20>
    {
        return false;
 8018cb0:	2300      	movs	r3, #0
 8018cb2:	e021      	b.n	8018cf8 <VerifyRfFreq+0x64>
    }

    // Rx frequencies
    if( ( freq < US915_FIRST_RX1_CHANNEL ) ||
 8018cb4:	687b      	ldr	r3, [r7, #4]
 8018cb6:	4a13      	ldr	r2, [pc, #76]	; (8018d04 <VerifyRfFreq+0x70>)
 8018cb8:	4293      	cmp	r3, r2
 8018cba:	d910      	bls.n	8018cde <VerifyRfFreq+0x4a>
 8018cbc:	687b      	ldr	r3, [r7, #4]
 8018cbe:	4a12      	ldr	r2, [pc, #72]	; (8018d08 <VerifyRfFreq+0x74>)
 8018cc0:	4293      	cmp	r3, r2
 8018cc2:	d80c      	bhi.n	8018cde <VerifyRfFreq+0x4a>
        ( freq > US915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) US915_FIRST_RX1_CHANNEL ) % ( uint32_t ) US915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 8018cc4:	687a      	ldr	r2, [r7, #4]
 8018cc6:	4b11      	ldr	r3, [pc, #68]	; (8018d0c <VerifyRfFreq+0x78>)
 8018cc8:	4413      	add	r3, r2
 8018cca:	4a11      	ldr	r2, [pc, #68]	; (8018d10 <VerifyRfFreq+0x7c>)
 8018ccc:	fba2 1203 	umull	r1, r2, r2, r3
 8018cd0:	0c92      	lsrs	r2, r2, #18
 8018cd2:	4910      	ldr	r1, [pc, #64]	; (8018d14 <VerifyRfFreq+0x80>)
 8018cd4:	fb01 f202 	mul.w	r2, r1, r2
 8018cd8:	1a9a      	subs	r2, r3, r2
        ( freq > US915_LAST_RX1_CHANNEL ) ||
 8018cda:	2a00      	cmp	r2, #0
 8018cdc:	d001      	beq.n	8018ce2 <VerifyRfFreq+0x4e>
    {
        return false;
 8018cde:	2300      	movs	r3, #0
 8018ce0:	e00a      	b.n	8018cf8 <VerifyRfFreq+0x64>
    }

    // Test for frequency range - take RX and TX frequencies into account
    if( ( freq < 902300000 ) ||  ( freq > 927500000 ) )
 8018ce2:	687b      	ldr	r3, [r7, #4]
 8018ce4:	4a0c      	ldr	r2, [pc, #48]	; (8018d18 <VerifyRfFreq+0x84>)
 8018ce6:	4293      	cmp	r3, r2
 8018ce8:	d903      	bls.n	8018cf2 <VerifyRfFreq+0x5e>
 8018cea:	687b      	ldr	r3, [r7, #4]
 8018cec:	4a06      	ldr	r2, [pc, #24]	; (8018d08 <VerifyRfFreq+0x74>)
 8018cee:	4293      	cmp	r3, r2
 8018cf0:	d901      	bls.n	8018cf6 <VerifyRfFreq+0x62>
    {
        return false;
 8018cf2:	2300      	movs	r3, #0
 8018cf4:	e000      	b.n	8018cf8 <VerifyRfFreq+0x64>
    }
    return true;
 8018cf6:	2301      	movs	r3, #1
}
 8018cf8:	4618      	mov	r0, r3
 8018cfa:	3708      	adds	r7, #8
 8018cfc:	46bd      	mov	sp, r7
 8018cfe:	bd80      	pop	{r7, pc}
 8018d00:	0801fccc 	.word	0x0801fccc
 8018d04:	3708709f 	.word	0x3708709f
 8018d08:	374886e0 	.word	0x374886e0
 8018d0c:	c8f78f60 	.word	0xc8f78f60
 8018d10:	6fd91d85 	.word	0x6fd91d85
 8018d14:	000927c0 	.word	0x000927c0
 8018d18:	35c8015f 	.word	0x35c8015f

08018d1c <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8018d1c:	b590      	push	{r4, r7, lr}
 8018d1e:	b089      	sub	sp, #36	; 0x24
 8018d20:	af04      	add	r7, sp, #16
 8018d22:	4603      	mov	r3, r0
 8018d24:	460a      	mov	r2, r1
 8018d26:	71fb      	strb	r3, [r7, #7]
 8018d28:	4613      	mov	r3, r2
 8018d2a:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesUS915[datarate];
 8018d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018d30:	4a0f      	ldr	r2, [pc, #60]	; (8018d70 <GetTimeOnAir+0x54>)
 8018d32:	5cd3      	ldrb	r3, [r2, r3]
 8018d34:	73fb      	strb	r3, [r7, #15]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 8018d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018d3a:	490e      	ldr	r1, [pc, #56]	; (8018d74 <GetTimeOnAir+0x58>)
 8018d3c:	4618      	mov	r0, r3
 8018d3e:	f7fe fd69 	bl	8017814 <RegionCommonGetBandwidth>
 8018d42:	60b8      	str	r0, [r7, #8]

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8018d44:	4b0c      	ldr	r3, [pc, #48]	; (8018d78 <GetTimeOnAir+0x5c>)
 8018d46:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8018d48:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8018d4c:	88bb      	ldrh	r3, [r7, #4]
 8018d4e:	b2db      	uxtb	r3, r3
 8018d50:	2101      	movs	r1, #1
 8018d52:	9103      	str	r1, [sp, #12]
 8018d54:	9302      	str	r3, [sp, #8]
 8018d56:	2300      	movs	r3, #0
 8018d58:	9301      	str	r3, [sp, #4]
 8018d5a:	2308      	movs	r3, #8
 8018d5c:	9300      	str	r3, [sp, #0]
 8018d5e:	2301      	movs	r3, #1
 8018d60:	68b9      	ldr	r1, [r7, #8]
 8018d62:	2001      	movs	r0, #1
 8018d64:	47a0      	blx	r4
 8018d66:	4603      	mov	r3, r0
}
 8018d68:	4618      	mov	r0, r3
 8018d6a:	3714      	adds	r7, #20
 8018d6c:	46bd      	mov	sp, r7
 8018d6e:	bd90      	pop	{r4, r7, pc}
 8018d70:	0801fc48 	.word	0x0801fc48
 8018d74:	0801fc58 	.word	0x0801fc58
 8018d78:	0801fccc 	.word	0x0801fccc

08018d7c <RegionUS915GetPhyParam>:
#endif /* REGION_US915 */

PhyParam_t RegionUS915GetPhyParam( GetPhyParams_t* getPhy )
{
 8018d7c:	b580      	push	{r7, lr}
 8018d7e:	b088      	sub	sp, #32
 8018d80:	af00      	add	r7, sp, #0
 8018d82:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8018d84:	2300      	movs	r3, #0
 8018d86:	61bb      	str	r3, [r7, #24]

#if defined( REGION_US915 )
    switch( getPhy->Attribute )
 8018d88:	687b      	ldr	r3, [r7, #4]
 8018d8a:	781b      	ldrb	r3, [r3, #0]
 8018d8c:	3b01      	subs	r3, #1
 8018d8e:	2b37      	cmp	r3, #55	; 0x37
 8018d90:	f200 8136 	bhi.w	8019000 <RegionUS915GetPhyParam+0x284>
 8018d94:	a201      	add	r2, pc, #4	; (adr r2, 8018d9c <RegionUS915GetPhyParam+0x20>)
 8018d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018d9a:	bf00      	nop
 8018d9c:	08018e7d 	.word	0x08018e7d
 8018da0:	08018e83 	.word	0x08018e83
 8018da4:	08019001 	.word	0x08019001
 8018da8:	08019001 	.word	0x08019001
 8018dac:	08019001 	.word	0x08019001
 8018db0:	08018e89 	.word	0x08018e89
 8018db4:	08019001 	.word	0x08019001
 8018db8:	08018ec3 	.word	0x08018ec3
 8018dbc:	08019001 	.word	0x08019001
 8018dc0:	08018ec9 	.word	0x08018ec9
 8018dc4:	08018ecf 	.word	0x08018ecf
 8018dc8:	08018ed5 	.word	0x08018ed5
 8018dcc:	08018edb 	.word	0x08018edb
 8018dd0:	08018eeb 	.word	0x08018eeb
 8018dd4:	08018efb 	.word	0x08018efb
 8018dd8:	08018f01 	.word	0x08018f01
 8018ddc:	08018f09 	.word	0x08018f09
 8018de0:	08018f11 	.word	0x08018f11
 8018de4:	08018f19 	.word	0x08018f19
 8018de8:	08018f21 	.word	0x08018f21
 8018dec:	08018f29 	.word	0x08018f29
 8018df0:	08018f3d 	.word	0x08018f3d
 8018df4:	08018f43 	.word	0x08018f43
 8018df8:	08018f49 	.word	0x08018f49
 8018dfc:	08018f4f 	.word	0x08018f4f
 8018e00:	08018f5b 	.word	0x08018f5b
 8018e04:	08018f67 	.word	0x08018f67
 8018e08:	08018f6d 	.word	0x08018f6d
 8018e0c:	08018f75 	.word	0x08018f75
 8018e10:	08018f7b 	.word	0x08018f7b
 8018e14:	08018f81 	.word	0x08018f81
 8018e18:	08018f87 	.word	0x08018f87
 8018e1c:	08018e8f 	.word	0x08018e8f
 8018e20:	08019001 	.word	0x08019001
 8018e24:	08019001 	.word	0x08019001
 8018e28:	08019001 	.word	0x08019001
 8018e2c:	08019001 	.word	0x08019001
 8018e30:	08019001 	.word	0x08019001
 8018e34:	08019001 	.word	0x08019001
 8018e38:	08019001 	.word	0x08019001
 8018e3c:	08019001 	.word	0x08019001
 8018e40:	08019001 	.word	0x08019001
 8018e44:	08019001 	.word	0x08019001
 8018e48:	08019001 	.word	0x08019001
 8018e4c:	08019001 	.word	0x08019001
 8018e50:	08019001 	.word	0x08019001
 8018e54:	08018f8f 	.word	0x08018f8f
 8018e58:	08018fa3 	.word	0x08018fa3
 8018e5c:	08018fb1 	.word	0x08018fb1
 8018e60:	08018fb7 	.word	0x08018fb7
 8018e64:	08019001 	.word	0x08019001
 8018e68:	08018fbd 	.word	0x08018fbd
 8018e6c:	08018fd1 	.word	0x08018fd1
 8018e70:	08018fd7 	.word	0x08018fd7
 8018e74:	08018fdd 	.word	0x08018fdd
 8018e78:	08018fed 	.word	0x08018fed
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = US915_RX_MIN_DATARATE;
 8018e7c:	2308      	movs	r3, #8
 8018e7e:	61bb      	str	r3, [r7, #24]
            break;
 8018e80:	e0bf      	b.n	8019002 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = US915_TX_MIN_DATARATE;
 8018e82:	2300      	movs	r3, #0
 8018e84:	61bb      	str	r3, [r7, #24]
            break;
 8018e86:	e0bc      	b.n	8019002 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = US915_DEFAULT_DATARATE;
 8018e88:	2300      	movs	r3, #0
 8018e8a:	61bb      	str	r3, [r7, #24]
            break;
 8018e8c:	e0b9      	b.n	8019002 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 8018e8e:	687b      	ldr	r3, [r7, #4]
 8018e90:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8018e94:	733b      	strb	r3, [r7, #12]
 8018e96:	2304      	movs	r3, #4
 8018e98:	737b      	strb	r3, [r7, #13]
 8018e9a:	2300      	movs	r3, #0
 8018e9c:	73bb      	strb	r3, [r7, #14]
 8018e9e:	2348      	movs	r3, #72	; 0x48
 8018ea0:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )US915_TX_MAX_DATARATE,
                .MinDr = ( int8_t )US915_TX_MIN_DATARATE,
                .NbChannels = US915_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8018ea2:	4b5b      	ldr	r3, [pc, #364]	; (8019010 <RegionUS915GetPhyParam+0x294>)
 8018ea4:	681b      	ldr	r3, [r3, #0]
 8018ea6:	f503 7358 	add.w	r3, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8018eaa:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 8018eac:	4b58      	ldr	r3, [pc, #352]	; (8019010 <RegionUS915GetPhyParam+0x294>)
 8018eae:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8018eb0:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8018eb2:	f107 030c 	add.w	r3, r7, #12
 8018eb6:	4618      	mov	r0, r3
 8018eb8:	f7fe fc59 	bl	801776e <RegionCommonGetNextLowerTxDr>
 8018ebc:	4603      	mov	r3, r0
 8018ebe:	61bb      	str	r3, [r7, #24]
            break;
 8018ec0:	e09f      	b.n	8019002 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = US915_MAX_TX_POWER;
 8018ec2:	2300      	movs	r3, #0
 8018ec4:	61bb      	str	r3, [r7, #24]
            break;
 8018ec6:	e09c      	b.n	8019002 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = US915_DEFAULT_TX_POWER;
 8018ec8:	2300      	movs	r3, #0
 8018eca:	61bb      	str	r3, [r7, #24]
            break;
 8018ecc:	e099      	b.n	8019002 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8018ece:	2340      	movs	r3, #64	; 0x40
 8018ed0:	61bb      	str	r3, [r7, #24]
            break;
 8018ed2:	e096      	b.n	8019002 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8018ed4:	2320      	movs	r3, #32
 8018ed6:	61bb      	str	r3, [r7, #24]
            break;
 8018ed8:	e093      	b.n	8019002 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateUS915[getPhy->Datarate];
 8018eda:	687b      	ldr	r3, [r7, #4]
 8018edc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018ee0:	461a      	mov	r2, r3
 8018ee2:	4b4c      	ldr	r3, [pc, #304]	; (8019014 <RegionUS915GetPhyParam+0x298>)
 8018ee4:	5c9b      	ldrb	r3, [r3, r2]
 8018ee6:	61bb      	str	r3, [r7, #24]
            break;
 8018ee8:	e08b      	b.n	8019002 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterUS915[getPhy->Datarate];
 8018eea:	687b      	ldr	r3, [r7, #4]
 8018eec:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018ef0:	461a      	mov	r2, r3
 8018ef2:	4b49      	ldr	r3, [pc, #292]	; (8019018 <RegionUS915GetPhyParam+0x29c>)
 8018ef4:	5c9b      	ldrb	r3, [r3, r2]
 8018ef6:	61bb      	str	r3, [r7, #24]
            break;
 8018ef8:	e083      	b.n	8019002 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = US915_DUTY_CYCLE_ENABLED;
 8018efa:	2300      	movs	r3, #0
 8018efc:	61bb      	str	r3, [r7, #24]
            break;
 8018efe:	e080      	b.n	8019002 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = US915_MAX_RX_WINDOW;
 8018f00:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8018f04:	61bb      	str	r3, [r7, #24]
            break;
 8018f06:	e07c      	b.n	8019002 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8018f08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8018f0c:	61bb      	str	r3, [r7, #24]
            break;
 8018f0e:	e078      	b.n	8019002 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8018f10:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8018f14:	61bb      	str	r3, [r7, #24]
            break;
 8018f16:	e074      	b.n	8019002 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8018f18:	f241 3388 	movw	r3, #5000	; 0x1388
 8018f1c:	61bb      	str	r3, [r7, #24]
            break;
 8018f1e:	e070      	b.n	8019002 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8018f20:	f241 7370 	movw	r3, #6000	; 0x1770
 8018f24:	61bb      	str	r3, [r7, #24]
            break;
 8018f26:	e06c      	b.n	8019002 <RegionUS915GetPhyParam+0x286>
            break;
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
        case PHY_RETRANSMIT_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 8018f28:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8018f2c:	483b      	ldr	r0, [pc, #236]	; (801901c <RegionUS915GetPhyParam+0x2a0>)
 8018f2e:	f001 f8a7 	bl	801a080 <randr>
 8018f32:	4603      	mov	r3, r0
 8018f34:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8018f38:	61bb      	str	r3, [r7, #24]
            break;
 8018f3a:	e062      	b.n	8019002 <RegionUS915GetPhyParam+0x286>
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 8018f3c:	2300      	movs	r3, #0
 8018f3e:	61bb      	str	r3, [r7, #24]
            break;
 8018f40:	e05f      	b.n	8019002 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = US915_RX_WND_2_FREQ;
 8018f42:	4b37      	ldr	r3, [pc, #220]	; (8019020 <RegionUS915GetPhyParam+0x2a4>)
 8018f44:	61bb      	str	r3, [r7, #24]
            break;
 8018f46:	e05c      	b.n	8019002 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = US915_RX_WND_2_DR;
 8018f48:	2308      	movs	r3, #8
 8018f4a:	61bb      	str	r3, [r7, #24]
            break;
 8018f4c:	e059      	b.n	8019002 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8018f4e:	4b30      	ldr	r3, [pc, #192]	; (8019010 <RegionUS915GetPhyParam+0x294>)
 8018f50:	681b      	ldr	r3, [r3, #0]
 8018f52:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8018f56:	61bb      	str	r3, [r7, #24]
            break;
 8018f58:	e053      	b.n	8019002 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8018f5a:	4b2d      	ldr	r3, [pc, #180]	; (8019010 <RegionUS915GetPhyParam+0x294>)
 8018f5c:	681b      	ldr	r3, [r3, #0]
 8018f5e:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8018f62:	61bb      	str	r3, [r7, #24]
            break;
 8018f64:	e04d      	b.n	8019002 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = US915_MAX_NB_CHANNELS;
 8018f66:	2348      	movs	r3, #72	; 0x48
 8018f68:	61bb      	str	r3, [r7, #24]
            break;
 8018f6a:	e04a      	b.n	8019002 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8018f6c:	4b28      	ldr	r3, [pc, #160]	; (8019010 <RegionUS915GetPhyParam+0x294>)
 8018f6e:	681b      	ldr	r3, [r3, #0]
 8018f70:	61bb      	str	r3, [r7, #24]
            break;
 8018f72:	e046      	b.n	8019002 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = US915_DEFAULT_UPLINK_DWELL_TIME;
 8018f74:	2300      	movs	r3, #0
 8018f76:	61bb      	str	r3, [r7, #24]
            break;
 8018f78:	e043      	b.n	8019002 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 8018f7a:	2300      	movs	r3, #0
 8018f7c:	61bb      	str	r3, [r7, #24]
            break;
 8018f7e:	e040      	b.n	8019002 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = US915_DEFAULT_MAX_ERP + 2.15f;
 8018f80:	4b28      	ldr	r3, [pc, #160]	; (8019024 <RegionUS915GetPhyParam+0x2a8>)
 8018f82:	61bb      	str	r3, [r7, #24]
            break;
 8018f84:	e03d      	b.n	8019002 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = 0;
 8018f86:	f04f 0300 	mov.w	r3, #0
 8018f8a:	61bb      	str	r3, [r7, #24]
            break;
 8018f8c:	e039      	b.n	8019002 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 8018f8e:	687b      	ldr	r3, [r7, #4]
 8018f90:	791b      	ldrb	r3, [r3, #4]
 8018f92:	4a25      	ldr	r2, [pc, #148]	; (8019028 <RegionUS915GetPhyParam+0x2ac>)
 8018f94:	4922      	ldr	r1, [pc, #136]	; (8019020 <RegionUS915GetPhyParam+0x2a4>)
 8018f96:	4618      	mov	r0, r3
 8018f98:	f7fd fd4b 	bl	8016a32 <RegionBaseUSCalcDownlinkFrequency>
 8018f9c:	4603      	mov	r3, r0
 8018f9e:	61bb      	str	r3, [r7, #24]
                                                                US915_BEACON_CHANNEL_FREQ,
                                                                US915_BEACON_CHANNEL_STEPWIDTH );
            break;
 8018fa0:	e02f      	b.n	8019002 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = US915_BEACON_SIZE;
 8018fa2:	2317      	movs	r3, #23
 8018fa4:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = US915_RFU1_SIZE;
 8018fa6:	2304      	movs	r3, #4
 8018fa8:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = US915_RFU2_SIZE;
 8018faa:	2303      	movs	r3, #3
 8018fac:	76bb      	strb	r3, [r7, #26]
            break;
 8018fae:	e028      	b.n	8019002 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = US915_BEACON_CHANNEL_DR;
 8018fb0:	2308      	movs	r3, #8
 8018fb2:	61bb      	str	r3, [r7, #24]
            break;
 8018fb4:	e025      	b.n	8019002 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_NB_CHANNELS:
        {
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 8018fb6:	2308      	movs	r3, #8
 8018fb8:	61bb      	str	r3, [r7, #24]
            break;
 8018fba:	e022      	b.n	8019002 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 8018fbc:	687b      	ldr	r3, [r7, #4]
 8018fbe:	791b      	ldrb	r3, [r3, #4]
 8018fc0:	4a19      	ldr	r2, [pc, #100]	; (8019028 <RegionUS915GetPhyParam+0x2ac>)
 8018fc2:	4917      	ldr	r1, [pc, #92]	; (8019020 <RegionUS915GetPhyParam+0x2a4>)
 8018fc4:	4618      	mov	r0, r3
 8018fc6:	f7fd fd34 	bl	8016a32 <RegionBaseUSCalcDownlinkFrequency>
 8018fca:	4603      	mov	r3, r0
 8018fcc:	61bb      	str	r3, [r7, #24]
                                                                US915_PING_SLOT_CHANNEL_FREQ,
                                                                US915_BEACON_CHANNEL_STEPWIDTH );
            break;
 8018fce:	e018      	b.n	8019002 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = US915_PING_SLOT_CHANNEL_DR;
 8018fd0:	2308      	movs	r3, #8
 8018fd2:	61bb      	str	r3, [r7, #24]
            break;
 8018fd4:	e015      	b.n	8019002 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_PING_SLOT_NB_CHANNELS:
        {
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 8018fd6:	2308      	movs	r3, #8
 8018fd8:	61bb      	str	r3, [r7, #24]
            break;
 8018fda:	e012      	b.n	8019002 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesUS915[getPhy->Datarate];
 8018fdc:	687b      	ldr	r3, [r7, #4]
 8018fde:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018fe2:	461a      	mov	r2, r3
 8018fe4:	4b11      	ldr	r3, [pc, #68]	; (801902c <RegionUS915GetPhyParam+0x2b0>)
 8018fe6:	5c9b      	ldrb	r3, [r3, r2]
 8018fe8:	61bb      	str	r3, [r7, #24]
            break;
 8018fea:	e00a      	b.n	8019002 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsUS915 );
 8018fec:	687b      	ldr	r3, [r7, #4]
 8018fee:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018ff2:	490f      	ldr	r1, [pc, #60]	; (8019030 <RegionUS915GetPhyParam+0x2b4>)
 8018ff4:	4618      	mov	r0, r3
 8018ff6:	f7fe fc0d 	bl	8017814 <RegionCommonGetBandwidth>
 8018ffa:	4603      	mov	r3, r0
 8018ffc:	61bb      	str	r3, [r7, #24]
            break;
 8018ffe:	e000      	b.n	8019002 <RegionUS915GetPhyParam+0x286>
        }
        default:
        {
            break;
 8019000:	bf00      	nop
        }
    }

#endif /* REGION_US915 */
    return phyParam;
 8019002:	69bb      	ldr	r3, [r7, #24]
 8019004:	61fb      	str	r3, [r7, #28]
 8019006:	69fb      	ldr	r3, [r7, #28]
}
 8019008:	4618      	mov	r0, r3
 801900a:	3720      	adds	r7, #32
 801900c:	46bd      	mov	sp, r7
 801900e:	bd80      	pop	{r7, pc}
 8019010:	20001a7c 	.word	0x20001a7c
 8019014:	0801fcac 	.word	0x0801fcac
 8019018:	0801fcbc 	.word	0x0801fcbc
 801901c:	fffffc18 	.word	0xfffffc18
 8019020:	370870a0 	.word	0x370870a0
 8019024:	4200999a 	.word	0x4200999a
 8019028:	000927c0 	.word	0x000927c0
 801902c:	0801fc48 	.word	0x0801fc48
 8019030:	0801fc58 	.word	0x0801fc58

08019034 <RegionUS915SetBandTxDone>:

void RegionUS915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8019034:	b590      	push	{r4, r7, lr}
 8019036:	b085      	sub	sp, #20
 8019038:	af02      	add	r7, sp, #8
 801903a:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 801903c:	4b11      	ldr	r3, [pc, #68]	; (8019084 <RegionUS915SetBandTxDone+0x50>)
 801903e:	681a      	ldr	r2, [r3, #0]
 8019040:	4b11      	ldr	r3, [pc, #68]	; (8019088 <RegionUS915SetBandTxDone+0x54>)
 8019042:	6819      	ldr	r1, [r3, #0]
 8019044:	687b      	ldr	r3, [r7, #4]
 8019046:	781b      	ldrb	r3, [r3, #0]
 8019048:	4618      	mov	r0, r3
 801904a:	4603      	mov	r3, r0
 801904c:	005b      	lsls	r3, r3, #1
 801904e:	4403      	add	r3, r0
 8019050:	009b      	lsls	r3, r3, #2
 8019052:	440b      	add	r3, r1
 8019054:	3309      	adds	r3, #9
 8019056:	781b      	ldrb	r3, [r3, #0]
 8019058:	4619      	mov	r1, r3
 801905a:	460b      	mov	r3, r1
 801905c:	005b      	lsls	r3, r3, #1
 801905e:	440b      	add	r3, r1
 8019060:	00db      	lsls	r3, r3, #3
 8019062:	18d0      	adds	r0, r2, r3
 8019064:	687b      	ldr	r3, [r7, #4]
 8019066:	6899      	ldr	r1, [r3, #8]
 8019068:	687b      	ldr	r3, [r7, #4]
 801906a:	785c      	ldrb	r4, [r3, #1]
 801906c:	687b      	ldr	r3, [r7, #4]
 801906e:	691a      	ldr	r2, [r3, #16]
 8019070:	9200      	str	r2, [sp, #0]
 8019072:	68db      	ldr	r3, [r3, #12]
 8019074:	4622      	mov	r2, r4
 8019076:	f7fd ff53 	bl	8016f20 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_US915 */
}
 801907a:	bf00      	nop
 801907c:	370c      	adds	r7, #12
 801907e:	46bd      	mov	sp, r7
 8019080:	bd90      	pop	{r4, r7, pc}
 8019082:	bf00      	nop
 8019084:	20001a80 	.word	0x20001a80
 8019088:	20001a7c 	.word	0x20001a7c

0801908c <RegionUS915InitDefaults>:

void RegionUS915InitDefaults( InitDefaultsParams_t* params )
{
 801908c:	b580      	push	{r7, lr}
 801908e:	b08a      	sub	sp, #40	; 0x28
 8019090:	af00      	add	r7, sp, #0
 8019092:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    Band_t bands[US915_MAX_NB_BANDS] =
 8019094:	2301      	movs	r3, #1
 8019096:	81bb      	strh	r3, [r7, #12]
 8019098:	2300      	movs	r3, #0
 801909a:	73bb      	strb	r3, [r7, #14]
 801909c:	2300      	movs	r3, #0
 801909e:	613b      	str	r3, [r7, #16]
 80190a0:	2300      	movs	r3, #0
 80190a2:	617b      	str	r3, [r7, #20]
 80190a4:	2300      	movs	r3, #0
 80190a6:	61bb      	str	r3, [r7, #24]
 80190a8:	2300      	movs	r3, #0
 80190aa:	61fb      	str	r3, [r7, #28]
 80190ac:	2300      	movs	r3, #0
 80190ae:	f887 3020 	strb.w	r3, [r7, #32]
    {
       US915_BAND0
    };

    switch( params->Type )
 80190b2:	687b      	ldr	r3, [r7, #4]
 80190b4:	7b1b      	ldrb	r3, [r3, #12]
 80190b6:	2b00      	cmp	r3, #0
 80190b8:	d007      	beq.n	80190ca <RegionUS915InitDefaults+0x3e>
 80190ba:	2b00      	cmp	r3, #0
 80190bc:	f2c0 8104 	blt.w	80192c8 <RegionUS915InitDefaults+0x23c>
 80190c0:	3b01      	subs	r3, #1
 80190c2:	2b01      	cmp	r3, #1
 80190c4:	f200 8100 	bhi.w	80192c8 <RegionUS915InitDefaults+0x23c>
 80190c8:	e0ce      	b.n	8019268 <RegionUS915InitDefaults+0x1dc>
    {
        case INIT_TYPE_DEFAULTS:
        {
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 80190ca:	687b      	ldr	r3, [r7, #4]
 80190cc:	681b      	ldr	r3, [r3, #0]
 80190ce:	2b00      	cmp	r3, #0
 80190d0:	f000 80fc 	beq.w	80192cc <RegionUS915InitDefaults+0x240>
 80190d4:	687b      	ldr	r3, [r7, #4]
 80190d6:	685b      	ldr	r3, [r3, #4]
 80190d8:	2b00      	cmp	r3, #0
 80190da:	f000 80f7 	beq.w	80192cc <RegionUS915InitDefaults+0x240>
            {
                return;
            }

            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 80190de:	687b      	ldr	r3, [r7, #4]
 80190e0:	681b      	ldr	r3, [r3, #0]
 80190e2:	4a7c      	ldr	r2, [pc, #496]	; (80192d4 <RegionUS915InitDefaults+0x248>)
 80190e4:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 80190e6:	687b      	ldr	r3, [r7, #4]
 80190e8:	685b      	ldr	r3, [r3, #4]
 80190ea:	4a7b      	ldr	r2, [pc, #492]	; (80192d8 <RegionUS915InitDefaults+0x24c>)
 80190ec:	6013      	str	r3, [r2, #0]
            RegionNvmGroup1->JoinTrialsCounter = 0;

            // Default bands
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            RegionBands = (Band_t*) params->Bands;
 80190ee:	687b      	ldr	r3, [r7, #4]
 80190f0:	689b      	ldr	r3, [r3, #8]
 80190f2:	4a7a      	ldr	r2, [pc, #488]	; (80192dc <RegionUS915InitDefaults+0x250>)
 80190f4:	6013      	str	r3, [r2, #0]

            // Initialize 8 bit channel groups index
            RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 80190f6:	4b77      	ldr	r3, [pc, #476]	; (80192d4 <RegionUS915InitDefaults+0x248>)
 80190f8:	681b      	ldr	r3, [r3, #0]
 80190fa:	2200      	movs	r2, #0
 80190fc:	731a      	strb	r2, [r3, #12]

            // Initialize the join trials counter
            RegionNvmGroup1->JoinTrialsCounter = 0;
 80190fe:	4b75      	ldr	r3, [pc, #468]	; (80192d4 <RegionUS915InitDefaults+0x248>)
 8019100:	681b      	ldr	r3, [r3, #0]
 8019102:	2200      	movs	r2, #0
 8019104:	735a      	strb	r2, [r3, #13]

            // Default bands
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 8019106:	4b75      	ldr	r3, [pc, #468]	; (80192dc <RegionUS915InitDefaults+0x250>)
 8019108:	681b      	ldr	r3, [r3, #0]
 801910a:	f107 010c 	add.w	r1, r7, #12
 801910e:	2218      	movs	r2, #24
 8019110:	4618      	mov	r0, r3
 8019112:	f000 ffcc 	bl	801a0ae <memcpy1>
#endif /* REGION_VERSION */

            // Default channels
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 8019116:	2300      	movs	r3, #0
 8019118:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801911c:	e02e      	b.n	801917c <RegionUS915InitDefaults+0xf0>
            {
                // 125 kHz channels
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 801911e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019122:	4a6f      	ldr	r2, [pc, #444]	; (80192e0 <RegionUS915InitDefaults+0x254>)
 8019124:	fb03 f202 	mul.w	r2, r3, r2
 8019128:	4b6e      	ldr	r3, [pc, #440]	; (80192e4 <RegionUS915InitDefaults+0x258>)
 801912a:	4413      	add	r3, r2
 801912c:	4a6a      	ldr	r2, [pc, #424]	; (80192d8 <RegionUS915InitDefaults+0x24c>)
 801912e:	6811      	ldr	r1, [r2, #0]
 8019130:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8019134:	4618      	mov	r0, r3
 8019136:	4613      	mov	r3, r2
 8019138:	005b      	lsls	r3, r3, #1
 801913a:	4413      	add	r3, r2
 801913c:	009b      	lsls	r3, r3, #2
 801913e:	440b      	add	r3, r1
 8019140:	6018      	str	r0, [r3, #0]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 8019142:	4b65      	ldr	r3, [pc, #404]	; (80192d8 <RegionUS915InitDefaults+0x24c>)
 8019144:	6819      	ldr	r1, [r3, #0]
 8019146:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801914a:	4613      	mov	r3, r2
 801914c:	005b      	lsls	r3, r3, #1
 801914e:	4413      	add	r3, r2
 8019150:	009b      	lsls	r3, r3, #2
 8019152:	440b      	add	r3, r1
 8019154:	3308      	adds	r3, #8
 8019156:	2230      	movs	r2, #48	; 0x30
 8019158:	701a      	strb	r2, [r3, #0]
                RegionNvmGroup2->Channels[i].Band = 0;
 801915a:	4b5f      	ldr	r3, [pc, #380]	; (80192d8 <RegionUS915InitDefaults+0x24c>)
 801915c:	6819      	ldr	r1, [r3, #0]
 801915e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8019162:	4613      	mov	r3, r2
 8019164:	005b      	lsls	r3, r3, #1
 8019166:	4413      	add	r3, r2
 8019168:	009b      	lsls	r3, r3, #2
 801916a:	440b      	add	r3, r1
 801916c:	3309      	adds	r3, #9
 801916e:	2200      	movs	r2, #0
 8019170:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 8019172:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019176:	3301      	adds	r3, #1
 8019178:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801917c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019180:	2b3f      	cmp	r3, #63	; 0x3f
 8019182:	d9cc      	bls.n	801911e <RegionUS915InitDefaults+0x92>
            }
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 8019184:	2340      	movs	r3, #64	; 0x40
 8019186:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801918a:	e02f      	b.n	80191ec <RegionUS915InitDefaults+0x160>
            {
                // 500 kHz channels
                RegionNvmGroup2->Channels[i].Frequency = 903000000 + ( i - ( US915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 801918c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019190:	3b40      	subs	r3, #64	; 0x40
 8019192:	4a55      	ldr	r2, [pc, #340]	; (80192e8 <RegionUS915InitDefaults+0x25c>)
 8019194:	fb03 f202 	mul.w	r2, r3, r2
 8019198:	4b54      	ldr	r3, [pc, #336]	; (80192ec <RegionUS915InitDefaults+0x260>)
 801919a:	4413      	add	r3, r2
 801919c:	4a4e      	ldr	r2, [pc, #312]	; (80192d8 <RegionUS915InitDefaults+0x24c>)
 801919e:	6811      	ldr	r1, [r2, #0]
 80191a0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80191a4:	4618      	mov	r0, r3
 80191a6:	4613      	mov	r3, r2
 80191a8:	005b      	lsls	r3, r3, #1
 80191aa:	4413      	add	r3, r2
 80191ac:	009b      	lsls	r3, r3, #2
 80191ae:	440b      	add	r3, r1
 80191b0:	6018      	str	r0, [r3, #0]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 80191b2:	4b49      	ldr	r3, [pc, #292]	; (80192d8 <RegionUS915InitDefaults+0x24c>)
 80191b4:	6819      	ldr	r1, [r3, #0]
 80191b6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80191ba:	4613      	mov	r3, r2
 80191bc:	005b      	lsls	r3, r3, #1
 80191be:	4413      	add	r3, r2
 80191c0:	009b      	lsls	r3, r3, #2
 80191c2:	440b      	add	r3, r1
 80191c4:	3308      	adds	r3, #8
 80191c6:	2244      	movs	r2, #68	; 0x44
 80191c8:	701a      	strb	r2, [r3, #0]
                RegionNvmGroup2->Channels[i].Band = 0;
 80191ca:	4b43      	ldr	r3, [pc, #268]	; (80192d8 <RegionUS915InitDefaults+0x24c>)
 80191cc:	6819      	ldr	r1, [r3, #0]
 80191ce:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80191d2:	4613      	mov	r3, r2
 80191d4:	005b      	lsls	r3, r3, #1
 80191d6:	4413      	add	r3, r2
 80191d8:	009b      	lsls	r3, r3, #2
 80191da:	440b      	add	r3, r1
 80191dc:	3309      	adds	r3, #9
 80191de:	2200      	movs	r2, #0
 80191e0:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 80191e2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80191e6:	3301      	adds	r3, #1
 80191e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80191ec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80191f0:	2b47      	cmp	r3, #71	; 0x47
 80191f2:	d9cb      	bls.n	801918c <RegionUS915InitDefaults+0x100>
            RegionNvmGroup2->ChannelsDefaultMask[2] = HYBRID_DEFAULT_MASK2;
            RegionNvmGroup2->ChannelsDefaultMask[3] = HYBRID_DEFAULT_MASK3;
            RegionNvmGroup2->ChannelsDefaultMask[4] = HYBRID_DEFAULT_MASK4;
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
#else
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0xFFFF;
 80191f4:	4b38      	ldr	r3, [pc, #224]	; (80192d8 <RegionUS915InitDefaults+0x24c>)
 80191f6:	681b      	ldr	r3, [r3, #0]
 80191f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80191fc:	f8a3 236c 	strh.w	r2, [r3, #876]	; 0x36c
            RegionNvmGroup2->ChannelsDefaultMask[1] = 0xFFFF;
 8019200:	4b35      	ldr	r3, [pc, #212]	; (80192d8 <RegionUS915InitDefaults+0x24c>)
 8019202:	681b      	ldr	r3, [r3, #0]
 8019204:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019208:	f8a3 236e 	strh.w	r2, [r3, #878]	; 0x36e
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0xFFFF;
 801920c:	4b32      	ldr	r3, [pc, #200]	; (80192d8 <RegionUS915InitDefaults+0x24c>)
 801920e:	681b      	ldr	r3, [r3, #0]
 8019210:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019214:	f8a3 2370 	strh.w	r2, [r3, #880]	; 0x370
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0xFFFF;
 8019218:	4b2f      	ldr	r3, [pc, #188]	; (80192d8 <RegionUS915InitDefaults+0x24c>)
 801921a:	681b      	ldr	r3, [r3, #0]
 801921c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019220:	f8a3 2372 	strh.w	r2, [r3, #882]	; 0x372
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;
 8019224:	4b2c      	ldr	r3, [pc, #176]	; (80192d8 <RegionUS915InitDefaults+0x24c>)
 8019226:	681b      	ldr	r3, [r3, #0]
 8019228:	22ff      	movs	r2, #255	; 0xff
 801922a:	f8a3 2374 	strh.w	r2, [r3, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 801922e:	4b2a      	ldr	r3, [pc, #168]	; (80192d8 <RegionUS915InitDefaults+0x24c>)
 8019230:	681b      	ldr	r3, [r3, #0]
 8019232:	2200      	movs	r2, #0
 8019234:	f8a3 2376 	strh.w	r2, [r3, #886]	; 0x376
#endif /* HYBRID_ENABLED == 1 */

            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8019238:	4b27      	ldr	r3, [pc, #156]	; (80192d8 <RegionUS915InitDefaults+0x24c>)
 801923a:	681b      	ldr	r3, [r3, #0]
 801923c:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8019240:	4b25      	ldr	r3, [pc, #148]	; (80192d8 <RegionUS915InitDefaults+0x24c>)
 8019242:	681b      	ldr	r3, [r3, #0]
 8019244:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8019248:	2206      	movs	r2, #6
 801924a:	4619      	mov	r1, r3
 801924c:	f7fd fe42 	bl	8016ed4 <RegionCommonChanMaskCopy>

            // Copy into channels mask remaining
            RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 8019250:	4b20      	ldr	r3, [pc, #128]	; (80192d4 <RegionUS915InitDefaults+0x248>)
 8019252:	681b      	ldr	r3, [r3, #0]
 8019254:	4618      	mov	r0, r3
 8019256:	4b20      	ldr	r3, [pc, #128]	; (80192d8 <RegionUS915InitDefaults+0x24c>)
 8019258:	681b      	ldr	r3, [r3, #0]
 801925a:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801925e:	2206      	movs	r2, #6
 8019260:	4619      	mov	r1, r3
 8019262:	f7fd fe37 	bl	8016ed4 <RegionCommonChanMaskCopy>
            break;
 8019266:	e032      	b.n	80192ce <RegionUS915InitDefaults+0x242>
            // Intentional fallthrough
        }
        case INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS:
        {
            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8019268:	4b1b      	ldr	r3, [pc, #108]	; (80192d8 <RegionUS915InitDefaults+0x24c>)
 801926a:	681b      	ldr	r3, [r3, #0]
 801926c:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8019270:	4b19      	ldr	r3, [pc, #100]	; (80192d8 <RegionUS915InitDefaults+0x24c>)
 8019272:	681b      	ldr	r3, [r3, #0]
 8019274:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8019278:	2206      	movs	r2, #6
 801927a:	4619      	mov	r1, r3
 801927c:	f7fd fe2a 	bl	8016ed4 <RegionCommonChanMaskCopy>

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            for( uint8_t i = 0; i < 6; i++ )
 8019280:	2300      	movs	r3, #0
 8019282:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8019286:	e01a      	b.n	80192be <RegionUS915InitDefaults+0x232>
#endif /* REGION_VERSION */
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 8019288:	4b12      	ldr	r3, [pc, #72]	; (80192d4 <RegionUS915InitDefaults+0x248>)
 801928a:	681b      	ldr	r3, [r3, #0]
 801928c:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8019290:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8019294:	4b10      	ldr	r3, [pc, #64]	; (80192d8 <RegionUS915InitDefaults+0x24c>)
 8019296:	681b      	ldr	r3, [r3, #0]
 8019298:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 801929c:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 80192a0:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 80192a4:	4b0b      	ldr	r3, [pc, #44]	; (80192d4 <RegionUS915InitDefaults+0x248>)
 80192a6:	681b      	ldr	r3, [r3, #0]
 80192a8:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80192ac:	4001      	ands	r1, r0
 80192ae:	b289      	uxth	r1, r1
 80192b0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for( uint8_t i = 0; i < 6; i++ )
 80192b4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80192b8:	3301      	adds	r3, #1
 80192ba:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80192be:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80192c2:	2b05      	cmp	r3, #5
 80192c4:	d9e0      	bls.n	8019288 <RegionUS915InitDefaults+0x1fc>
            }
            break;
 80192c6:	e002      	b.n	80192ce <RegionUS915InitDefaults+0x242>
        }
        default:
        {
            break;
 80192c8:	bf00      	nop
 80192ca:	e000      	b.n	80192ce <RegionUS915InitDefaults+0x242>
                return;
 80192cc:	bf00      	nop
        }
    }
#endif /* REGION_US915 */
}
 80192ce:	3728      	adds	r7, #40	; 0x28
 80192d0:	46bd      	mov	sp, r7
 80192d2:	bd80      	pop	{r7, pc}
 80192d4:	20001a78 	.word	0x20001a78
 80192d8:	20001a7c 	.word	0x20001a7c
 80192dc:	20001a80 	.word	0x20001a80
 80192e0:	00030d40 	.word	0x00030d40
 80192e4:	35c80160 	.word	0x35c80160
 80192e8:	00186a00 	.word	0x00186a00
 80192ec:	35d2afc0 	.word	0x35d2afc0

080192f0 <RegionUS915Verify>:

bool RegionUS915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 80192f0:	b580      	push	{r7, lr}
 80192f2:	b082      	sub	sp, #8
 80192f4:	af00      	add	r7, sp, #0
 80192f6:	6078      	str	r0, [r7, #4]
 80192f8:	460b      	mov	r3, r1
 80192fa:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_US915 )
    switch( phyAttribute )
 80192fc:	78fb      	ldrb	r3, [r7, #3]
 80192fe:	2b0f      	cmp	r3, #15
 8019300:	d867      	bhi.n	80193d2 <RegionUS915Verify+0xe2>
 8019302:	a201      	add	r2, pc, #4	; (adr r2, 8019308 <RegionUS915Verify+0x18>)
 8019304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019308:	08019349 	.word	0x08019349
 801930c:	080193d3 	.word	0x080193d3
 8019310:	080193d3 	.word	0x080193d3
 8019314:	080193d3 	.word	0x080193d3
 8019318:	080193d3 	.word	0x080193d3
 801931c:	08019357 	.word	0x08019357
 8019320:	08019375 	.word	0x08019375
 8019324:	08019393 	.word	0x08019393
 8019328:	080193d3 	.word	0x080193d3
 801932c:	080193b1 	.word	0x080193b1
 8019330:	080193b1 	.word	0x080193b1
 8019334:	080193d3 	.word	0x080193d3
 8019338:	080193d3 	.word	0x080193d3
 801933c:	080193d3 	.word	0x080193d3
 8019340:	080193d3 	.word	0x080193d3
 8019344:	080193cf 	.word	0x080193cf
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 8019348:	687b      	ldr	r3, [r7, #4]
 801934a:	681b      	ldr	r3, [r3, #0]
 801934c:	4618      	mov	r0, r3
 801934e:	f7ff fca1 	bl	8018c94 <VerifyRfFreq>
 8019352:	4603      	mov	r3, r0
 8019354:	e03e      	b.n	80193d4 <RegionUS915Verify+0xe4>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
 8019356:	687b      	ldr	r3, [r7, #4]
 8019358:	f993 3000 	ldrsb.w	r3, [r3]
 801935c:	2204      	movs	r2, #4
 801935e:	2100      	movs	r1, #0
 8019360:	4618      	mov	r0, r3
 8019362:	f7fd fd3a 	bl	8016dda <RegionCommonValueInRange>
 8019366:	4603      	mov	r3, r0
 8019368:	2b00      	cmp	r3, #0
 801936a:	bf14      	ite	ne
 801936c:	2301      	movne	r3, #1
 801936e:	2300      	moveq	r3, #0
 8019370:	b2db      	uxtb	r3, r3
 8019372:	e02f      	b.n	80193d4 <RegionUS915Verify+0xe4>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8019374:	687b      	ldr	r3, [r7, #4]
 8019376:	f993 3000 	ldrsb.w	r3, [r3]
 801937a:	2205      	movs	r2, #5
 801937c:	2100      	movs	r1, #0
 801937e:	4618      	mov	r0, r3
 8019380:	f7fd fd2b 	bl	8016dda <RegionCommonValueInRange>
 8019384:	4603      	mov	r3, r0
 8019386:	2b00      	cmp	r3, #0
 8019388:	bf14      	ite	ne
 801938a:	2301      	movne	r3, #1
 801938c:	2300      	moveq	r3, #0
 801938e:	b2db      	uxtb	r3, r3
 8019390:	e020      	b.n	80193d4 <RegionUS915Verify+0xe4>
        }
#endif /* REGION_VERSION */
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE );
 8019392:	687b      	ldr	r3, [r7, #4]
 8019394:	f993 3000 	ldrsb.w	r3, [r3]
 8019398:	220d      	movs	r2, #13
 801939a:	2108      	movs	r1, #8
 801939c:	4618      	mov	r0, r3
 801939e:	f7fd fd1c 	bl	8016dda <RegionCommonValueInRange>
 80193a2:	4603      	mov	r3, r0
 80193a4:	2b00      	cmp	r3, #0
 80193a6:	bf14      	ite	ne
 80193a8:	2301      	movne	r3, #1
 80193aa:	2300      	moveq	r3, #0
 80193ac:	b2db      	uxtb	r3, r3
 80193ae:	e011      	b.n	80193d4 <RegionUS915Verify+0xe4>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 80193b0:	687b      	ldr	r3, [r7, #4]
 80193b2:	f993 3000 	ldrsb.w	r3, [r3]
 80193b6:	220e      	movs	r2, #14
 80193b8:	2100      	movs	r1, #0
 80193ba:	4618      	mov	r0, r3
 80193bc:	f7fd fd0d 	bl	8016dda <RegionCommonValueInRange>
 80193c0:	4603      	mov	r3, r0
 80193c2:	2b00      	cmp	r3, #0
 80193c4:	bf14      	ite	ne
 80193c6:	2301      	movne	r3, #1
 80193c8:	2300      	moveq	r3, #0
 80193ca:	b2db      	uxtb	r3, r3
 80193cc:	e002      	b.n	80193d4 <RegionUS915Verify+0xe4>
        }
        case PHY_DUTY_CYCLE:
        {
            return US915_DUTY_CYCLE_ENABLED;
 80193ce:	2300      	movs	r3, #0
 80193d0:	e000      	b.n	80193d4 <RegionUS915Verify+0xe4>
        }
        default:
            return false;
 80193d2:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_US915 */
}
 80193d4:	4618      	mov	r0, r3
 80193d6:	3708      	adds	r7, #8
 80193d8:	46bd      	mov	sp, r7
 80193da:	bd80      	pop	{r7, pc}

080193dc <RegionUS915ApplyCFList>:

void RegionUS915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 80193dc:	b480      	push	{r7}
 80193de:	b085      	sub	sp, #20
 80193e0:	af00      	add	r7, sp, #0
 80193e2:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 80193e4:	687b      	ldr	r3, [r7, #4]
 80193e6:	7a1b      	ldrb	r3, [r3, #8]
 80193e8:	2b10      	cmp	r3, #16
 80193ea:	d160      	bne.n	80194ae <RegionUS915ApplyCFList+0xd2>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 80193ec:	687b      	ldr	r3, [r7, #4]
 80193ee:	685b      	ldr	r3, [r3, #4]
 80193f0:	330f      	adds	r3, #15
 80193f2:	781b      	ldrb	r3, [r3, #0]
 80193f4:	2b01      	cmp	r3, #1
 80193f6:	d15c      	bne.n	80194b2 <RegionUS915ApplyCFList+0xd6>
    {
        return;
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 80193f8:	2300      	movs	r3, #0
 80193fa:	73fb      	strb	r3, [r7, #15]
 80193fc:	2300      	movs	r3, #0
 80193fe:	73bb      	strb	r3, [r7, #14]
 8019400:	e051      	b.n	80194a6 <RegionUS915ApplyCFList+0xca>
    {
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 8019402:	687b      	ldr	r3, [r7, #4]
 8019404:	685a      	ldr	r2, [r3, #4]
 8019406:	7bbb      	ldrb	r3, [r7, #14]
 8019408:	4413      	add	r3, r2
 801940a:	7819      	ldrb	r1, [r3, #0]
 801940c:	4b2b      	ldr	r3, [pc, #172]	; (80194bc <RegionUS915ApplyCFList+0xe0>)
 801940e:	681b      	ldr	r3, [r3, #0]
 8019410:	7bfa      	ldrb	r2, [r7, #15]
 8019412:	b289      	uxth	r1, r1
 8019414:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 8019418:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 801941c:	4b27      	ldr	r3, [pc, #156]	; (80194bc <RegionUS915ApplyCFList+0xe0>)
 801941e:	681b      	ldr	r3, [r3, #0]
 8019420:	7bfa      	ldrb	r2, [r7, #15]
 8019422:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 8019426:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801942a:	687b      	ldr	r3, [r7, #4]
 801942c:	685a      	ldr	r2, [r3, #4]
 801942e:	7bbb      	ldrb	r3, [r7, #14]
 8019430:	3301      	adds	r3, #1
 8019432:	4413      	add	r3, r2
 8019434:	781b      	ldrb	r3, [r3, #0]
 8019436:	b29b      	uxth	r3, r3
 8019438:	021b      	lsls	r3, r3, #8
 801943a:	b299      	uxth	r1, r3
 801943c:	4b1f      	ldr	r3, [pc, #124]	; (80194bc <RegionUS915ApplyCFList+0xe0>)
 801943e:	681b      	ldr	r3, [r3, #0]
 8019440:	7bfa      	ldrb	r2, [r7, #15]
 8019442:	4301      	orrs	r1, r0
 8019444:	b289      	uxth	r1, r1
 8019446:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801944a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        if( chMaskItr == 4 )
 801944e:	7bfb      	ldrb	r3, [r7, #15]
 8019450:	2b04      	cmp	r3, #4
 8019452:	d10f      	bne.n	8019474 <RegionUS915ApplyCFList+0x98>
        {
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 8019454:	4b19      	ldr	r3, [pc, #100]	; (80194bc <RegionUS915ApplyCFList+0xe0>)
 8019456:	681b      	ldr	r3, [r3, #0]
 8019458:	7bfa      	ldrb	r2, [r7, #15]
 801945a:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801945e:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8019462:	4b16      	ldr	r3, [pc, #88]	; (80194bc <RegionUS915ApplyCFList+0xe0>)
 8019464:	681b      	ldr	r3, [r3, #0]
 8019466:	7bfa      	ldrb	r2, [r7, #15]
 8019468:	b2c9      	uxtb	r1, r1
 801946a:	b289      	uxth	r1, r1
 801946c:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 8019470:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }
        // Set the channel mask to the remaining
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 8019474:	4b12      	ldr	r3, [pc, #72]	; (80194c0 <RegionUS915ApplyCFList+0xe4>)
 8019476:	681b      	ldr	r3, [r3, #0]
 8019478:	7bfa      	ldrb	r2, [r7, #15]
 801947a:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801947e:	4b0f      	ldr	r3, [pc, #60]	; (80194bc <RegionUS915ApplyCFList+0xe0>)
 8019480:	681b      	ldr	r3, [r3, #0]
 8019482:	7bfa      	ldrb	r2, [r7, #15]
 8019484:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 8019488:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 801948c:	4b0c      	ldr	r3, [pc, #48]	; (80194c0 <RegionUS915ApplyCFList+0xe4>)
 801948e:	681b      	ldr	r3, [r3, #0]
 8019490:	7bfa      	ldrb	r2, [r7, #15]
 8019492:	4001      	ands	r1, r0
 8019494:	b289      	uxth	r1, r1
 8019496:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 801949a:	7bfb      	ldrb	r3, [r7, #15]
 801949c:	3301      	adds	r3, #1
 801949e:	73fb      	strb	r3, [r7, #15]
 80194a0:	7bbb      	ldrb	r3, [r7, #14]
 80194a2:	3302      	adds	r3, #2
 80194a4:	73bb      	strb	r3, [r7, #14]
 80194a6:	7bfb      	ldrb	r3, [r7, #15]
 80194a8:	2b04      	cmp	r3, #4
 80194aa:	d9aa      	bls.n	8019402 <RegionUS915ApplyCFList+0x26>
 80194ac:	e002      	b.n	80194b4 <RegionUS915ApplyCFList+0xd8>
        return;
 80194ae:	bf00      	nop
 80194b0:	e000      	b.n	80194b4 <RegionUS915ApplyCFList+0xd8>
        return;
 80194b2:	bf00      	nop
    }
#endif /* REGION_US915 */
}
 80194b4:	3714      	adds	r7, #20
 80194b6:	46bd      	mov	sp, r7
 80194b8:	bc80      	pop	{r7}
 80194ba:	4770      	bx	lr
 80194bc:	20001a7c 	.word	0x20001a7c
 80194c0:	20001a78 	.word	0x20001a78

080194c4 <RegionUS915ChanMaskSet>:

bool RegionUS915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 80194c4:	b580      	push	{r7, lr}
 80194c6:	b084      	sub	sp, #16
 80194c8:	af00      	add	r7, sp, #0
 80194ca:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    uint8_t nbChannels = RegionCommonCountChannels( chanMaskSet->ChannelsMaskIn, 0, 4 );
 80194cc:	687b      	ldr	r3, [r7, #4]
 80194ce:	681b      	ldr	r3, [r3, #0]
 80194d0:	2204      	movs	r2, #4
 80194d2:	2100      	movs	r1, #0
 80194d4:	4618      	mov	r0, r3
 80194d6:	f7fd fcd1 	bl	8016e7c <RegionCommonCountChannels>
 80194da:	4603      	mov	r3, r0
 80194dc:	73bb      	strb	r3, [r7, #14]

    // Check the number of active channels
    if( ( nbChannels < 2 ) &&
 80194de:	7bbb      	ldrb	r3, [r7, #14]
 80194e0:	2b01      	cmp	r3, #1
 80194e2:	d804      	bhi.n	80194ee <RegionUS915ChanMaskSet+0x2a>
 80194e4:	7bbb      	ldrb	r3, [r7, #14]
 80194e6:	2b00      	cmp	r3, #0
 80194e8:	d001      	beq.n	80194ee <RegionUS915ChanMaskSet+0x2a>
        ( nbChannels > 0 ) )
    {
        return false;
 80194ea:	2300      	movs	r3, #0
 80194ec:	e04a      	b.n	8019584 <RegionUS915ChanMaskSet+0xc0>
    }

    switch( chanMaskSet->ChannelsMaskType )
 80194ee:	687b      	ldr	r3, [r7, #4]
 80194f0:	791b      	ldrb	r3, [r3, #4]
 80194f2:	2b00      	cmp	r3, #0
 80194f4:	d002      	beq.n	80194fc <RegionUS915ChanMaskSet+0x38>
 80194f6:	2b01      	cmp	r3, #1
 80194f8:	d036      	beq.n	8019568 <RegionUS915ChanMaskSet+0xa4>
 80194fa:	e040      	b.n	801957e <RegionUS915ChanMaskSet+0xba>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 80194fc:	4b23      	ldr	r3, [pc, #140]	; (801958c <RegionUS915ChanMaskSet+0xc8>)
 80194fe:	681b      	ldr	r3, [r3, #0]
 8019500:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8019504:	687b      	ldr	r3, [r7, #4]
 8019506:	681b      	ldr	r3, [r3, #0]
 8019508:	2206      	movs	r2, #6
 801950a:	4619      	mov	r1, r3
 801950c:	f7fd fce2 	bl	8016ed4 <RegionCommonChanMaskCopy>

            RegionNvmGroup2->ChannelsDefaultMask[4] = RegionNvmGroup2->ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 8019510:	4b1e      	ldr	r3, [pc, #120]	; (801958c <RegionUS915ChanMaskSet+0xc8>)
 8019512:	681b      	ldr	r3, [r3, #0]
 8019514:	f8b3 2374 	ldrh.w	r2, [r3, #884]	; 0x374
 8019518:	4b1c      	ldr	r3, [pc, #112]	; (801958c <RegionUS915ChanMaskSet+0xc8>)
 801951a:	681b      	ldr	r3, [r3, #0]
 801951c:	b2d2      	uxtb	r2, r2
 801951e:	b292      	uxth	r2, r2
 8019520:	f8a3 2374 	strh.w	r2, [r3, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 8019524:	4b19      	ldr	r3, [pc, #100]	; (801958c <RegionUS915ChanMaskSet+0xc8>)
 8019526:	681b      	ldr	r3, [r3, #0]
 8019528:	2200      	movs	r2, #0
 801952a:	f8a3 2376 	strh.w	r2, [r3, #886]	; 0x376

            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 801952e:	2300      	movs	r3, #0
 8019530:	73fb      	strb	r3, [r7, #15]
 8019532:	e015      	b.n	8019560 <RegionUS915ChanMaskSet+0x9c>
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 8019534:	4b16      	ldr	r3, [pc, #88]	; (8019590 <RegionUS915ChanMaskSet+0xcc>)
 8019536:	681b      	ldr	r3, [r3, #0]
 8019538:	7bfa      	ldrb	r2, [r7, #15]
 801953a:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801953e:	4b13      	ldr	r3, [pc, #76]	; (801958c <RegionUS915ChanMaskSet+0xc8>)
 8019540:	681b      	ldr	r3, [r3, #0]
 8019542:	7bfa      	ldrb	r2, [r7, #15]
 8019544:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 8019548:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 801954c:	4b10      	ldr	r3, [pc, #64]	; (8019590 <RegionUS915ChanMaskSet+0xcc>)
 801954e:	681b      	ldr	r3, [r3, #0]
 8019550:	7bfa      	ldrb	r2, [r7, #15]
 8019552:	4001      	ands	r1, r0
 8019554:	b289      	uxth	r1, r1
 8019556:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 801955a:	7bfb      	ldrb	r3, [r7, #15]
 801955c:	3301      	adds	r3, #1
 801955e:	73fb      	strb	r3, [r7, #15]
 8019560:	7bfb      	ldrb	r3, [r7, #15]
 8019562:	2b05      	cmp	r3, #5
 8019564:	d9e6      	bls.n	8019534 <RegionUS915ChanMaskSet+0x70>
            }
            break;
 8019566:	e00c      	b.n	8019582 <RegionUS915ChanMaskSet+0xbe>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8019568:	4b08      	ldr	r3, [pc, #32]	; (801958c <RegionUS915ChanMaskSet+0xc8>)
 801956a:	681b      	ldr	r3, [r3, #0]
 801956c:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 8019570:	687b      	ldr	r3, [r7, #4]
 8019572:	681b      	ldr	r3, [r3, #0]
 8019574:	2206      	movs	r2, #6
 8019576:	4619      	mov	r1, r3
 8019578:	f7fd fcac 	bl	8016ed4 <RegionCommonChanMaskCopy>
            break;
 801957c:	e001      	b.n	8019582 <RegionUS915ChanMaskSet+0xbe>
        }
        default:
            return false;
 801957e:	2300      	movs	r3, #0
 8019580:	e000      	b.n	8019584 <RegionUS915ChanMaskSet+0xc0>
    }
    return true;
 8019582:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 8019584:	4618      	mov	r0, r3
 8019586:	3710      	adds	r7, #16
 8019588:	46bd      	mov	sp, r7
 801958a:	bd80      	pop	{r7, pc}
 801958c:	20001a7c 	.word	0x20001a7c
 8019590:	20001a78 	.word	0x20001a78

08019594 <RegionUS915ComputeRxWindowParameters>:

void RegionUS915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8019594:	b580      	push	{r7, lr}
 8019596:	b088      	sub	sp, #32
 8019598:	af02      	add	r7, sp, #8
 801959a:	60ba      	str	r2, [r7, #8]
 801959c:	607b      	str	r3, [r7, #4]
 801959e:	4603      	mov	r3, r0
 80195a0:	73fb      	strb	r3, [r7, #15]
 80195a2:	460b      	mov	r3, r1
 80195a4:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_US915 )
    uint32_t tSymbolInUs = 0;
 80195a6:	2300      	movs	r3, #0
 80195a8:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 80195aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80195ae:	2b0d      	cmp	r3, #13
 80195b0:	bfa8      	it	ge
 80195b2:	230d      	movge	r3, #13
 80195b4:	b25a      	sxtb	r2, r3
 80195b6:	687b      	ldr	r3, [r7, #4]
 80195b8:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 80195ba:	687b      	ldr	r3, [r7, #4]
 80195bc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80195c0:	4916      	ldr	r1, [pc, #88]	; (801961c <RegionUS915ComputeRxWindowParameters+0x88>)
 80195c2:	4618      	mov	r0, r3
 80195c4:	f7fe f926 	bl	8017814 <RegionCommonGetBandwidth>
 80195c8:	4603      	mov	r3, r0
 80195ca:	b2da      	uxtb	r2, r3
 80195cc:	687b      	ldr	r3, [r7, #4]
 80195ce:	709a      	strb	r2, [r3, #2]

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 80195d0:	687b      	ldr	r3, [r7, #4]
 80195d2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80195d6:	461a      	mov	r2, r3
 80195d8:	4b11      	ldr	r3, [pc, #68]	; (8019620 <RegionUS915ComputeRxWindowParameters+0x8c>)
 80195da:	5c9a      	ldrb	r2, [r3, r2]
 80195dc:	687b      	ldr	r3, [r7, #4]
 80195de:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80195e2:	4619      	mov	r1, r3
 80195e4:	4b0d      	ldr	r3, [pc, #52]	; (801961c <RegionUS915ComputeRxWindowParameters+0x88>)
 80195e6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80195ea:	4619      	mov	r1, r3
 80195ec:	4610      	mov	r0, r2
 80195ee:	f7fd fe8f 	bl	8017310 <RegionCommonComputeSymbolTimeLoRa>
 80195f2:	6178      	str	r0, [r7, #20]

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 80195f4:	4b0b      	ldr	r3, [pc, #44]	; (8019624 <RegionUS915ComputeRxWindowParameters+0x90>)
 80195f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80195f8:	4798      	blx	r3
 80195fa:	687b      	ldr	r3, [r7, #4]
 80195fc:	3308      	adds	r3, #8
 80195fe:	687a      	ldr	r2, [r7, #4]
 8019600:	320c      	adds	r2, #12
 8019602:	7bb9      	ldrb	r1, [r7, #14]
 8019604:	9201      	str	r2, [sp, #4]
 8019606:	9300      	str	r3, [sp, #0]
 8019608:	4603      	mov	r3, r0
 801960a:	68ba      	ldr	r2, [r7, #8]
 801960c:	6978      	ldr	r0, [r7, #20]
 801960e:	f7fd fea5 	bl	801735c <RegionCommonComputeRxWindowParameters>
#endif /* REGION_US915 */
}
 8019612:	bf00      	nop
 8019614:	3718      	adds	r7, #24
 8019616:	46bd      	mov	sp, r7
 8019618:	bd80      	pop	{r7, pc}
 801961a:	bf00      	nop
 801961c:	0801fc58 	.word	0x0801fc58
 8019620:	0801fc48 	.word	0x0801fc48
 8019624:	0801fccc 	.word	0x0801fccc

08019628 <RegionUS915RxConfig>:

bool RegionUS915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8019628:	b590      	push	{r4, r7, lr}
 801962a:	b091      	sub	sp, #68	; 0x44
 801962c:	af0a      	add	r7, sp, #40	; 0x28
 801962e:	6078      	str	r0, [r7, #4]
 8019630:	6039      	str	r1, [r7, #0]
#if defined( REGION_US915 )
    int8_t dr = rxConfig->Datarate;
 8019632:	687b      	ldr	r3, [r7, #4]
 8019634:	785b      	ldrb	r3, [r3, #1]
 8019636:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 8019638:	2300      	movs	r3, #0
 801963a:	75fb      	strb	r3, [r7, #23]
    int8_t phyDr = 0;
 801963c:	2300      	movs	r3, #0
 801963e:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 8019640:	687b      	ldr	r3, [r7, #4]
 8019642:	685b      	ldr	r3, [r3, #4]
 8019644:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 8019646:	4b34      	ldr	r3, [pc, #208]	; (8019718 <RegionUS915RxConfig+0xf0>)
 8019648:	685b      	ldr	r3, [r3, #4]
 801964a:	4798      	blx	r3
 801964c:	4603      	mov	r3, r0
 801964e:	2b00      	cmp	r3, #0
 8019650:	d001      	beq.n	8019656 <RegionUS915RxConfig+0x2e>
    {
        return false;
 8019652:	2300      	movs	r3, #0
 8019654:	e05c      	b.n	8019710 <RegionUS915RxConfig+0xe8>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8019656:	687b      	ldr	r3, [r7, #4]
 8019658:	7cdb      	ldrb	r3, [r3, #19]
 801965a:	2b00      	cmp	r3, #0
 801965c:	d109      	bne.n	8019672 <RegionUS915RxConfig+0x4a>
    {
        // Apply window 1 frequency
        frequency = US915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * US915_STEPWIDTH_RX1_CHANNEL;
 801965e:	687b      	ldr	r3, [r7, #4]
 8019660:	781b      	ldrb	r3, [r3, #0]
 8019662:	f003 0307 	and.w	r3, r3, #7
 8019666:	4a2d      	ldr	r2, [pc, #180]	; (801971c <RegionUS915RxConfig+0xf4>)
 8019668:	fb03 f202 	mul.w	r2, r3, r2
 801966c:	4b2c      	ldr	r3, [pc, #176]	; (8019720 <RegionUS915RxConfig+0xf8>)
 801966e:	4413      	add	r3, r2
 8019670:	613b      	str	r3, [r7, #16]
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesUS915[dr];
 8019672:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019676:	4a2b      	ldr	r2, [pc, #172]	; (8019724 <RegionUS915RxConfig+0xfc>)
 8019678:	5cd3      	ldrb	r3, [r2, r3]
 801967a:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 801967c:	4b26      	ldr	r3, [pc, #152]	; (8019718 <RegionUS915RxConfig+0xf0>)
 801967e:	68db      	ldr	r3, [r3, #12]
 8019680:	6938      	ldr	r0, [r7, #16]
 8019682:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8019684:	4b24      	ldr	r3, [pc, #144]	; (8019718 <RegionUS915RxConfig+0xf0>)
 8019686:	699c      	ldr	r4, [r3, #24]
 8019688:	687b      	ldr	r3, [r7, #4]
 801968a:	789b      	ldrb	r3, [r3, #2]
 801968c:	4618      	mov	r0, r3
 801968e:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8019692:	687b      	ldr	r3, [r7, #4]
 8019694:	689b      	ldr	r3, [r3, #8]
 8019696:	b29b      	uxth	r3, r3
 8019698:	687a      	ldr	r2, [r7, #4]
 801969a:	7c92      	ldrb	r2, [r2, #18]
 801969c:	9209      	str	r2, [sp, #36]	; 0x24
 801969e:	2201      	movs	r2, #1
 80196a0:	9208      	str	r2, [sp, #32]
 80196a2:	2200      	movs	r2, #0
 80196a4:	9207      	str	r2, [sp, #28]
 80196a6:	2200      	movs	r2, #0
 80196a8:	9206      	str	r2, [sp, #24]
 80196aa:	2200      	movs	r2, #0
 80196ac:	9205      	str	r2, [sp, #20]
 80196ae:	2200      	movs	r2, #0
 80196b0:	9204      	str	r2, [sp, #16]
 80196b2:	2200      	movs	r2, #0
 80196b4:	9203      	str	r2, [sp, #12]
 80196b6:	9302      	str	r3, [sp, #8]
 80196b8:	2308      	movs	r3, #8
 80196ba:	9301      	str	r3, [sp, #4]
 80196bc:	2300      	movs	r3, #0
 80196be:	9300      	str	r3, [sp, #0]
 80196c0:	2301      	movs	r3, #1
 80196c2:	460a      	mov	r2, r1
 80196c4:	4601      	mov	r1, r0
 80196c6:	2001      	movs	r0, #1
 80196c8:	47a0      	blx	r4

    if( rxConfig->RepeaterSupport == true )
 80196ca:	687b      	ldr	r3, [r7, #4]
 80196cc:	7c5b      	ldrb	r3, [r3, #17]
 80196ce:	2b00      	cmp	r3, #0
 80196d0:	d005      	beq.n	80196de <RegionUS915RxConfig+0xb6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterUS915[dr];
 80196d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80196d6:	4a14      	ldr	r2, [pc, #80]	; (8019728 <RegionUS915RxConfig+0x100>)
 80196d8:	5cd3      	ldrb	r3, [r2, r3]
 80196da:	75fb      	strb	r3, [r7, #23]
 80196dc:	e004      	b.n	80196e8 <RegionUS915RxConfig+0xc0>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateUS915[dr];
 80196de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80196e2:	4a12      	ldr	r2, [pc, #72]	; (801972c <RegionUS915RxConfig+0x104>)
 80196e4:	5cd3      	ldrb	r3, [r2, r3]
 80196e6:	75fb      	strb	r3, [r7, #23]
    }

    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 80196e8:	4b0b      	ldr	r3, [pc, #44]	; (8019718 <RegionUS915RxConfig+0xf0>)
 80196ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80196ec:	7dfa      	ldrb	r2, [r7, #23]
 80196ee:	320d      	adds	r2, #13
 80196f0:	b2d2      	uxtb	r2, r2
 80196f2:	4611      	mov	r1, r2
 80196f4:	2001      	movs	r0, #1
 80196f6:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 80196f8:	687b      	ldr	r3, [r7, #4]
 80196fa:	7cdb      	ldrb	r3, [r3, #19]
 80196fc:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8019700:	6939      	ldr	r1, [r7, #16]
 8019702:	4618      	mov	r0, r3
 8019704:	f7fe f8a4 	bl	8017850 <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 8019708:	683b      	ldr	r3, [r7, #0]
 801970a:	7bfa      	ldrb	r2, [r7, #15]
 801970c:	701a      	strb	r2, [r3, #0]
    return true;
 801970e:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 8019710:	4618      	mov	r0, r3
 8019712:	371c      	adds	r7, #28
 8019714:	46bd      	mov	sp, r7
 8019716:	bd90      	pop	{r4, r7, pc}
 8019718:	0801fccc 	.word	0x0801fccc
 801971c:	000927c0 	.word	0x000927c0
 8019720:	370870a0 	.word	0x370870a0
 8019724:	0801fc48 	.word	0x0801fc48
 8019728:	0801fcbc 	.word	0x0801fcbc
 801972c:	0801fcac 	.word	0x0801fcac

08019730 <RegionUS915TxConfig>:

bool RegionUS915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8019730:	b590      	push	{r4, r7, lr}
 8019732:	b093      	sub	sp, #76	; 0x4c
 8019734:	af0a      	add	r7, sp, #40	; 0x28
 8019736:	60f8      	str	r0, [r7, #12]
 8019738:	60b9      	str	r1, [r7, #8]
 801973a:	607a      	str	r2, [r7, #4]
#if defined( REGION_US915 )
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 801973c:	68fb      	ldr	r3, [r7, #12]
 801973e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019742:	461a      	mov	r2, r3
 8019744:	4b49      	ldr	r3, [pc, #292]	; (801986c <RegionUS915TxConfig+0x13c>)
 8019746:	5c9b      	ldrb	r3, [r3, r2]
 8019748:	77fb      	strb	r3, [r7, #31]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 801974a:	68fb      	ldr	r3, [r7, #12]
 801974c:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8019750:	4b47      	ldr	r3, [pc, #284]	; (8019870 <RegionUS915TxConfig+0x140>)
 8019752:	681a      	ldr	r2, [r3, #0]
 8019754:	4b47      	ldr	r3, [pc, #284]	; (8019874 <RegionUS915TxConfig+0x144>)
 8019756:	6819      	ldr	r1, [r3, #0]
 8019758:	68fb      	ldr	r3, [r7, #12]
 801975a:	781b      	ldrb	r3, [r3, #0]
 801975c:	461c      	mov	r4, r3
 801975e:	4623      	mov	r3, r4
 8019760:	005b      	lsls	r3, r3, #1
 8019762:	4423      	add	r3, r4
 8019764:	009b      	lsls	r3, r3, #2
 8019766:	440b      	add	r3, r1
 8019768:	3309      	adds	r3, #9
 801976a:	781b      	ldrb	r3, [r3, #0]
 801976c:	4619      	mov	r1, r3
 801976e:	460b      	mov	r3, r1
 8019770:	005b      	lsls	r3, r3, #1
 8019772:	440b      	add	r3, r1
 8019774:	00db      	lsls	r3, r3, #3
 8019776:	4413      	add	r3, r2
 8019778:	f993 1002 	ldrsb.w	r1, [r3, #2]
 801977c:	68fb      	ldr	r3, [r7, #12]
 801977e:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8019782:	4b3c      	ldr	r3, [pc, #240]	; (8019874 <RegionUS915TxConfig+0x144>)
 8019784:	681b      	ldr	r3, [r3, #0]
 8019786:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801978a:	f7ff fa4d 	bl	8018c28 <LimitTxPower>
 801978e:	4603      	mov	r3, r0
 8019790:	77bb      	strb	r3, [r7, #30]
#endif /* REGION_VERSION */

    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 8019792:	68fb      	ldr	r3, [r7, #12]
 8019794:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019798:	4937      	ldr	r1, [pc, #220]	; (8019878 <RegionUS915TxConfig+0x148>)
 801979a:	4618      	mov	r0, r3
 801979c:	f7fe f83a 	bl	8017814 <RegionCommonGetBandwidth>
 80197a0:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 80197a2:	2300      	movs	r3, #0
 80197a4:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 80197a6:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80197aa:	f04f 0200 	mov.w	r2, #0
 80197ae:	4933      	ldr	r1, [pc, #204]	; (801987c <RegionUS915TxConfig+0x14c>)
 80197b0:	4618      	mov	r0, r3
 80197b2:	f7fd fe8b 	bl	80174cc <RegionCommonComputeTxPower>
 80197b6:	4603      	mov	r3, r0
 80197b8:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 80197ba:	4b31      	ldr	r3, [pc, #196]	; (8019880 <RegionUS915TxConfig+0x150>)
 80197bc:	68da      	ldr	r2, [r3, #12]
 80197be:	4b2d      	ldr	r3, [pc, #180]	; (8019874 <RegionUS915TxConfig+0x144>)
 80197c0:	6819      	ldr	r1, [r3, #0]
 80197c2:	68fb      	ldr	r3, [r7, #12]
 80197c4:	781b      	ldrb	r3, [r3, #0]
 80197c6:	4618      	mov	r0, r3
 80197c8:	4603      	mov	r3, r0
 80197ca:	005b      	lsls	r3, r3, #1
 80197cc:	4403      	add	r3, r0
 80197ce:	009b      	lsls	r3, r3, #2
 80197d0:	440b      	add	r3, r1
 80197d2:	681b      	ldr	r3, [r3, #0]
 80197d4:	4618      	mov	r0, r3
 80197d6:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 80197d8:	4b29      	ldr	r3, [pc, #164]	; (8019880 <RegionUS915TxConfig+0x150>)
 80197da:	69dc      	ldr	r4, [r3, #28]
 80197dc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80197e0:	f997 1017 	ldrsb.w	r1, [r7, #23]
 80197e4:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80197e8:	9208      	str	r2, [sp, #32]
 80197ea:	2200      	movs	r2, #0
 80197ec:	9207      	str	r2, [sp, #28]
 80197ee:	2200      	movs	r2, #0
 80197f0:	9206      	str	r2, [sp, #24]
 80197f2:	2200      	movs	r2, #0
 80197f4:	9205      	str	r2, [sp, #20]
 80197f6:	2201      	movs	r2, #1
 80197f8:	9204      	str	r2, [sp, #16]
 80197fa:	2200      	movs	r2, #0
 80197fc:	9203      	str	r2, [sp, #12]
 80197fe:	2208      	movs	r2, #8
 8019800:	9202      	str	r2, [sp, #8]
 8019802:	2201      	movs	r2, #1
 8019804:	9201      	str	r2, [sp, #4]
 8019806:	9300      	str	r3, [sp, #0]
 8019808:	69bb      	ldr	r3, [r7, #24]
 801980a:	2200      	movs	r2, #0
 801980c:	2001      	movs	r0, #1
 801980e:	47a0      	blx	r4
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8019810:	4b18      	ldr	r3, [pc, #96]	; (8019874 <RegionUS915TxConfig+0x144>)
 8019812:	681a      	ldr	r2, [r3, #0]
 8019814:	68fb      	ldr	r3, [r7, #12]
 8019816:	781b      	ldrb	r3, [r3, #0]
 8019818:	4619      	mov	r1, r3
 801981a:	460b      	mov	r3, r1
 801981c:	005b      	lsls	r3, r3, #1
 801981e:	440b      	add	r3, r1
 8019820:	009b      	lsls	r3, r3, #2
 8019822:	4413      	add	r3, r2
 8019824:	681a      	ldr	r2, [r3, #0]
 8019826:	68fb      	ldr	r3, [r7, #12]
 8019828:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801982c:	4619      	mov	r1, r3
 801982e:	4610      	mov	r0, r2
 8019830:	f7fe f840 	bl	80178b4 <RegionCommonTxConfigPrint>

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 8019834:	4b12      	ldr	r3, [pc, #72]	; (8019880 <RegionUS915TxConfig+0x150>)
 8019836:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019838:	68fa      	ldr	r2, [r7, #12]
 801983a:	8992      	ldrh	r2, [r2, #12]
 801983c:	b2d2      	uxtb	r2, r2
 801983e:	4611      	mov	r1, r2
 8019840:	2001      	movs	r0, #1
 8019842:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8019844:	68fb      	ldr	r3, [r7, #12]
 8019846:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801984a:	68fb      	ldr	r3, [r7, #12]
 801984c:	899b      	ldrh	r3, [r3, #12]
 801984e:	4619      	mov	r1, r3
 8019850:	4610      	mov	r0, r2
 8019852:	f7ff fa63 	bl	8018d1c <GetTimeOnAir>
 8019856:	4602      	mov	r2, r0
 8019858:	687b      	ldr	r3, [r7, #4]
 801985a:	601a      	str	r2, [r3, #0]

    *txPower = txPowerLimited;
 801985c:	68bb      	ldr	r3, [r7, #8]
 801985e:	7fba      	ldrb	r2, [r7, #30]
 8019860:	701a      	strb	r2, [r3, #0]
    return true;
 8019862:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 8019864:	4618      	mov	r0, r3
 8019866:	3724      	adds	r7, #36	; 0x24
 8019868:	46bd      	mov	sp, r7
 801986a:	bd90      	pop	{r4, r7, pc}
 801986c:	0801fc48 	.word	0x0801fc48
 8019870:	20001a80 	.word	0x20001a80
 8019874:	20001a7c 	.word	0x20001a7c
 8019878:	0801fc58 	.word	0x0801fc58
 801987c:	41f00000 	.word	0x41f00000
 8019880:	0801fccc 	.word	0x0801fccc

08019884 <RegionUS915LinkAdrReq>:

uint8_t RegionUS915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8019884:	b590      	push	{r4, r7, lr}
 8019886:	b097      	sub	sp, #92	; 0x5c
 8019888:	af00      	add	r7, sp, #0
 801988a:	60f8      	str	r0, [r7, #12]
 801988c:	60b9      	str	r1, [r7, #8]
 801988e:	607a      	str	r2, [r7, #4]
 8019890:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8019892:	2307      	movs	r3, #7
 8019894:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#if defined( REGION_US915 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8019898:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801989c:	2200      	movs	r2, #0
 801989e:	601a      	str	r2, [r3, #0]
 80198a0:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 80198a2:	2300      	movs	r3, #0
 80198a4:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    uint8_t bytesProcessed = 0;
 80198a8:	2300      	movs	r3, #0
 80198aa:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    uint16_t channelsMask[CHANNELS_MASK_SIZE] = { 0, 0, 0, 0, 0, 0 };
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 80198ae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80198b2:	2200      	movs	r2, #0
 80198b4:	601a      	str	r2, [r3, #0]
 80198b6:	605a      	str	r2, [r3, #4]
 80198b8:	609a      	str	r2, [r3, #8]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 80198ba:	4b97      	ldr	r3, [pc, #604]	; (8019b18 <RegionUS915LinkAdrReq+0x294>)
 80198bc:	681b      	ldr	r3, [r3, #0]
 80198be:	f503 7158 	add.w	r1, r3, #864	; 0x360
 80198c2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80198c6:	2206      	movs	r2, #6
 80198c8:	4618      	mov	r0, r3
 80198ca:	f7fd fb03 	bl	8016ed4 <RegionCommonChanMaskCopy>

    while( bytesProcessed < linkAdrReq->PayloadSize )
 80198ce:	e11b      	b.n	8019b08 <RegionUS915LinkAdrReq+0x284>
    {
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 80198d0:	68fb      	ldr	r3, [r7, #12]
 80198d2:	685a      	ldr	r2, [r3, #4]
 80198d4:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80198d8:	4413      	add	r3, r2
 80198da:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80198de:	4611      	mov	r1, r2
 80198e0:	4618      	mov	r0, r3
 80198e2:	f7fd fc3b 	bl	801715c <RegionCommonParseLinkAdrReq>
 80198e6:	4603      	mov	r3, r0
 80198e8:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

        if( nextIndex == 0 )
 80198ec:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80198f0:	2b00      	cmp	r3, #0
 80198f2:	f000 8113 	beq.w	8019b1c <RegionUS915LinkAdrReq+0x298>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 80198f6:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 80198fa:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80198fe:	4413      	add	r3, r2
 8019900:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8019904:	2307      	movs	r3, #7
 8019906:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

        if( linkAdrParams.ChMaskCtrl == 6 )
 801990a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801990e:	2b06      	cmp	r3, #6
 8019910:	d116      	bne.n	8019940 <RegionUS915LinkAdrReq+0xbc>
        {
            // Enable all 125 kHz channels
            channelsMask[0] = 0xFFFF;
 8019912:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019916:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            channelsMask[1] = 0xFFFF;
 801991a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801991e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            channelsMask[2] = 0xFFFF;
 8019922:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019926:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            channelsMask[3] = 0xFFFF;
 801992a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801992e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 8019932:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8019936:	b2db      	uxtb	r3, r3
 8019938:	b29b      	uxth	r3, r3
 801993a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 801993e:	e0e3      	b.n	8019b08 <RegionUS915LinkAdrReq+0x284>
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
 8019940:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8019944:	2b07      	cmp	r3, #7
 8019946:	d112      	bne.n	801996e <RegionUS915LinkAdrReq+0xea>
        {
            // Disable all 125 kHz channels
            channelsMask[0] = 0x0000;
 8019948:	2300      	movs	r3, #0
 801994a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            channelsMask[1] = 0x0000;
 801994e:	2300      	movs	r3, #0
 8019950:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            channelsMask[2] = 0x0000;
 8019954:	2300      	movs	r3, #0
 8019956:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            channelsMask[3] = 0x0000;
 801995a:	2300      	movs	r3, #0
 801995c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 8019960:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8019964:	b2db      	uxtb	r3, r3
 8019966:	b29b      	uxth	r3, r3
 8019968:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 801996c:	e0cc      	b.n	8019b08 <RegionUS915LinkAdrReq+0x284>
        }
        else if( linkAdrParams.ChMaskCtrl == 5 )
 801996e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8019972:	2b05      	cmp	r3, #5
 8019974:	f040 80bf 	bne.w	8019af6 <RegionUS915LinkAdrReq+0x272>
        {
            // Start value for comparison
            uint8_t bitMask = 1;
 8019978:	2301      	movs	r3, #1
 801997a:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52

            // cntChannelMask for channelsMask[0] until channelsMask[3]
            uint8_t cntChannelMask = 0;
 801997e:	2300      	movs	r3, #0
 8019980:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

            // i will be 1, 2, 3, ..., 7
            for( uint8_t i = 0; i <= 7; i++ )
 8019984:	2300      	movs	r3, #0
 8019986:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 801998a:	e0ae      	b.n	8019aea <RegionUS915LinkAdrReq+0x266>
            {
                // 8 MSBs of ChMask are RFU
                // Checking if the ChMask is set, then true
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 801998c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8019990:	b2da      	uxtb	r2, r3
 8019992:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 8019996:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801999a:	fa01 f303 	lsl.w	r3, r1, r3
 801999e:	4013      	ands	r3, r2
 80199a0:	2b00      	cmp	r3, #0
 80199a2:	d04d      	beq.n	8019a40 <RegionUS915LinkAdrReq+0x1bc>
                {
                    if( ( i % 2 ) == 0 )
 80199a4:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80199a8:	f003 0301 	and.w	r3, r3, #1
 80199ac:	b2db      	uxtb	r3, r3
 80199ae:	2b00      	cmp	r3, #0
 80199b0:	d120      	bne.n	80199f4 <RegionUS915LinkAdrReq+0x170>
                    {
                        // Enable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] |= 0x00FF;
 80199b2:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80199b6:	005b      	lsls	r3, r3, #1
 80199b8:	3358      	adds	r3, #88	; 0x58
 80199ba:	443b      	add	r3, r7
 80199bc:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 80199c0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80199c4:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 80199c8:	b292      	uxth	r2, r2
 80199ca:	005b      	lsls	r3, r3, #1
 80199cc:	3358      	adds	r3, #88	; 0x58
 80199ce:	443b      	add	r3, r7
 80199d0:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 80199d4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80199d8:	b21a      	sxth	r2, r3
 80199da:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 80199de:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80199e2:	fa01 f303 	lsl.w	r3, r1, r3
 80199e6:	b21b      	sxth	r3, r3
 80199e8:	4313      	orrs	r3, r2
 80199ea:	b21b      	sxth	r3, r3
 80199ec:	b29b      	uxth	r3, r3
 80199ee:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80199f2:	e075      	b.n	8019ae0 <RegionUS915LinkAdrReq+0x25c>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] |= 0xFF00;
 80199f4:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80199f8:	005b      	lsls	r3, r3, #1
 80199fa:	3358      	adds	r3, #88	; 0x58
 80199fc:	443b      	add	r3, r7
 80199fe:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8019a02:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8019a06:	f062 02ff 	orn	r2, r2, #255	; 0xff
 8019a0a:	b292      	uxth	r2, r2
 8019a0c:	005b      	lsls	r3, r3, #1
 8019a0e:	3358      	adds	r3, #88	; 0x58
 8019a10:	443b      	add	r3, r7
 8019a12:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 8019a16:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8019a1a:	b21a      	sxth	r2, r3
 8019a1c:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 8019a20:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8019a24:	fa01 f303 	lsl.w	r3, r1, r3
 8019a28:	b21b      	sxth	r3, r3
 8019a2a:	4313      	orrs	r3, r2
 8019a2c:	b21b      	sxth	r3, r3
 8019a2e:	b29b      	uxth	r3, r3
 8019a30:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 8019a34:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8019a38:	3301      	adds	r3, #1
 8019a3a:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 8019a3e:	e04f      	b.n	8019ae0 <RegionUS915LinkAdrReq+0x25c>
                    }
                }
                // ChMask is not set
                else
                {
                    if( ( i % 2 ) == 0 )
 8019a40:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8019a44:	f003 0301 	and.w	r3, r3, #1
 8019a48:	b2db      	uxtb	r3, r3
 8019a4a:	2b00      	cmp	r3, #0
 8019a4c:	d122      	bne.n	8019a94 <RegionUS915LinkAdrReq+0x210>
                    {
                        // Disable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] &= 0xFF00;
 8019a4e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8019a52:	005b      	lsls	r3, r3, #1
 8019a54:	3358      	adds	r3, #88	; 0x58
 8019a56:	443b      	add	r3, r7
 8019a58:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8019a5c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8019a60:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8019a64:	b292      	uxth	r2, r2
 8019a66:	005b      	lsls	r3, r3, #1
 8019a68:	3358      	adds	r3, #88	; 0x58
 8019a6a:	443b      	add	r3, r7
 8019a6c:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 8019a70:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8019a74:	b21a      	sxth	r2, r3
 8019a76:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 8019a7a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8019a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8019a82:	b21b      	sxth	r3, r3
 8019a84:	43db      	mvns	r3, r3
 8019a86:	b21b      	sxth	r3, r3
 8019a88:	4013      	ands	r3, r2
 8019a8a:	b21b      	sxth	r3, r3
 8019a8c:	b29b      	uxth	r3, r3
 8019a8e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8019a92:	e025      	b.n	8019ae0 <RegionUS915LinkAdrReq+0x25c>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] &= 0x00FF;
 8019a94:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8019a98:	005b      	lsls	r3, r3, #1
 8019a9a:	3358      	adds	r3, #88	; 0x58
 8019a9c:	443b      	add	r3, r7
 8019a9e:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8019aa2:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8019aa6:	b2d2      	uxtb	r2, r2
 8019aa8:	b292      	uxth	r2, r2
 8019aaa:	005b      	lsls	r3, r3, #1
 8019aac:	3358      	adds	r3, #88	; 0x58
 8019aae:	443b      	add	r3, r7
 8019ab0:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 8019ab4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8019ab8:	b21a      	sxth	r2, r3
 8019aba:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 8019abe:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8019ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8019ac6:	b21b      	sxth	r3, r3
 8019ac8:	43db      	mvns	r3, r3
 8019aca:	b21b      	sxth	r3, r3
 8019acc:	4013      	ands	r3, r2
 8019ace:	b21b      	sxth	r3, r3
 8019ad0:	b29b      	uxth	r3, r3
 8019ad2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 8019ad6:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8019ada:	3301      	adds	r3, #1
 8019adc:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
            for( uint8_t i = 0; i <= 7; i++ )
 8019ae0:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8019ae4:	3301      	adds	r3, #1
 8019ae6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 8019aea:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8019aee:	2b07      	cmp	r3, #7
 8019af0:	f67f af4c 	bls.w	801998c <RegionUS915LinkAdrReq+0x108>
 8019af4:	e008      	b.n	8019b08 <RegionUS915LinkAdrReq+0x284>
                }
            }
        }
        else
        {
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 8019af6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8019afa:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8019afe:	005b      	lsls	r3, r3, #1
 8019b00:	3358      	adds	r3, #88	; 0x58
 8019b02:	443b      	add	r3, r7
 8019b04:	f823 2c18 	strh.w	r2, [r3, #-24]
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8019b08:	68fb      	ldr	r3, [r7, #12]
 8019b0a:	7a1b      	ldrb	r3, [r3, #8]
 8019b0c:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8019b10:	429a      	cmp	r2, r3
 8019b12:	f4ff aedd 	bcc.w	80198d0 <RegionUS915LinkAdrReq+0x4c>
 8019b16:	e002      	b.n	8019b1e <RegionUS915LinkAdrReq+0x29a>
 8019b18:	20001a7c 	.word	0x20001a7c
            break; // break loop, since no more request has been found
 8019b1c:	bf00      	nop
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 8019b1e:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 8019b22:	2b03      	cmp	r3, #3
 8019b24:	dc0f      	bgt.n	8019b46 <RegionUS915LinkAdrReq+0x2c2>
 8019b26:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8019b2a:	2204      	movs	r2, #4
 8019b2c:	2100      	movs	r1, #0
 8019b2e:	4618      	mov	r0, r3
 8019b30:	f7fd f9a4 	bl	8016e7c <RegionCommonCountChannels>
 8019b34:	4603      	mov	r3, r0
 8019b36:	2b01      	cmp	r3, #1
 8019b38:	d805      	bhi.n	8019b46 <RegionUS915LinkAdrReq+0x2c2>
    {
        status &= 0xFE; // Channel mask KO
 8019b3a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8019b3e:	f023 0301 	bic.w	r3, r3, #1
 8019b42:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8019b46:	2302      	movs	r3, #2
 8019b48:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8019b4c:	68fb      	ldr	r3, [r7, #12]
 8019b4e:	7a5b      	ldrb	r3, [r3, #9]
 8019b50:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
    phyParam = RegionUS915GetPhyParam( &getPhy );
 8019b54:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8019b58:	4618      	mov	r0, r3
 8019b5a:	f7ff f90f 	bl	8018d7c <RegionUS915GetPhyParam>
 8019b5e:	4603      	mov	r3, r0
 8019b60:	637b      	str	r3, [r7, #52]	; 0x34

    linkAdrVerifyParams.Status = status;
 8019b62:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8019b66:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8019b68:	68fb      	ldr	r3, [r7, #12]
 8019b6a:	7a9b      	ldrb	r3, [r3, #10]
 8019b6c:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8019b6e:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 8019b72:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8019b74:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8019b78:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8019b7a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8019b7e:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8019b80:	68fb      	ldr	r3, [r7, #12]
 8019b82:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8019b86:	777b      	strb	r3, [r7, #29]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8019b88:	68fb      	ldr	r3, [r7, #12]
 8019b8a:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8019b8e:	77bb      	strb	r3, [r7, #30]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8019b90:	68fb      	ldr	r3, [r7, #12]
 8019b92:	7b5b      	ldrb	r3, [r3, #13]
 8019b94:	b25b      	sxtb	r3, r3
 8019b96:	77fb      	strb	r3, [r7, #31]
    linkAdrVerifyParams.NbChannels = US915_MAX_NB_CHANNELS;
 8019b98:	2348      	movs	r3, #72	; 0x48
 8019b9a:	f887 3020 	strb.w	r3, [r7, #32]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 8019b9e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8019ba2:	627b      	str	r3, [r7, #36]	; 0x24
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8019ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019ba6:	b25b      	sxtb	r3, r3
 8019ba8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    linkAdrVerifyParams.MaxDatarate = US915_TX_MAX_DATARATE;
 8019bac:	2304      	movs	r3, #4
 8019bae:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8019bb2:	4b3f      	ldr	r3, [pc, #252]	; (8019cb0 <RegionUS915LinkAdrReq+0x42c>)
 8019bb4:	681b      	ldr	r3, [r3, #0]
 8019bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    linkAdrVerifyParams.MinTxPower = US915_MIN_TX_POWER;
 8019bb8:	230e      	movs	r3, #14
 8019bba:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    linkAdrVerifyParams.MaxTxPower = US915_MAX_TX_POWER;
 8019bbe:	2300      	movs	r3, #0
 8019bc0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8019bc4:	68fb      	ldr	r3, [r7, #12]
 8019bc6:	681b      	ldr	r3, [r3, #0]
 8019bc8:	617b      	str	r3, [r7, #20]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8019bca:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8019bce:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8019bd2:	1c9a      	adds	r2, r3, #2
 8019bd4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8019bd8:	1c59      	adds	r1, r3, #1
 8019bda:	f107 0014 	add.w	r0, r7, #20
 8019bde:	4623      	mov	r3, r4
 8019be0:	f7fd fb0d 	bl	80171fe <RegionCommonLinkAdrReqVerifyParams>
 8019be4:	4603      	mov	r3, r0
 8019be6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8019bea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8019bee:	2b07      	cmp	r3, #7
 8019bf0:	d147      	bne.n	8019c82 <RegionUS915LinkAdrReq+0x3fe>
    {
        // Copy Mask
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
 8019bf2:	4b2f      	ldr	r3, [pc, #188]	; (8019cb0 <RegionUS915LinkAdrReq+0x42c>)
 8019bf4:	681b      	ldr	r3, [r3, #0]
 8019bf6:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8019bfa:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8019bfe:	2206      	movs	r2, #6
 8019c00:	4618      	mov	r0, r3
 8019c02:	f7fd f967 	bl	8016ed4 <RegionCommonChanMaskCopy>

        RegionNvmGroup1->ChannelsMaskRemaining[0] &= RegionNvmGroup2->ChannelsMask[0];
 8019c06:	4b2b      	ldr	r3, [pc, #172]	; (8019cb4 <RegionUS915LinkAdrReq+0x430>)
 8019c08:	681b      	ldr	r3, [r3, #0]
 8019c0a:	8819      	ldrh	r1, [r3, #0]
 8019c0c:	4b28      	ldr	r3, [pc, #160]	; (8019cb0 <RegionUS915LinkAdrReq+0x42c>)
 8019c0e:	681b      	ldr	r3, [r3, #0]
 8019c10:	f8b3 2360 	ldrh.w	r2, [r3, #864]	; 0x360
 8019c14:	4b27      	ldr	r3, [pc, #156]	; (8019cb4 <RegionUS915LinkAdrReq+0x430>)
 8019c16:	681b      	ldr	r3, [r3, #0]
 8019c18:	400a      	ands	r2, r1
 8019c1a:	b292      	uxth	r2, r2
 8019c1c:	801a      	strh	r2, [r3, #0]
        RegionNvmGroup1->ChannelsMaskRemaining[1] &= RegionNvmGroup2->ChannelsMask[1];
 8019c1e:	4b25      	ldr	r3, [pc, #148]	; (8019cb4 <RegionUS915LinkAdrReq+0x430>)
 8019c20:	681b      	ldr	r3, [r3, #0]
 8019c22:	8859      	ldrh	r1, [r3, #2]
 8019c24:	4b22      	ldr	r3, [pc, #136]	; (8019cb0 <RegionUS915LinkAdrReq+0x42c>)
 8019c26:	681b      	ldr	r3, [r3, #0]
 8019c28:	f8b3 2362 	ldrh.w	r2, [r3, #866]	; 0x362
 8019c2c:	4b21      	ldr	r3, [pc, #132]	; (8019cb4 <RegionUS915LinkAdrReq+0x430>)
 8019c2e:	681b      	ldr	r3, [r3, #0]
 8019c30:	400a      	ands	r2, r1
 8019c32:	b292      	uxth	r2, r2
 8019c34:	805a      	strh	r2, [r3, #2]
        RegionNvmGroup1->ChannelsMaskRemaining[2] &= RegionNvmGroup2->ChannelsMask[2];
 8019c36:	4b1f      	ldr	r3, [pc, #124]	; (8019cb4 <RegionUS915LinkAdrReq+0x430>)
 8019c38:	681b      	ldr	r3, [r3, #0]
 8019c3a:	8899      	ldrh	r1, [r3, #4]
 8019c3c:	4b1c      	ldr	r3, [pc, #112]	; (8019cb0 <RegionUS915LinkAdrReq+0x42c>)
 8019c3e:	681b      	ldr	r3, [r3, #0]
 8019c40:	f8b3 2364 	ldrh.w	r2, [r3, #868]	; 0x364
 8019c44:	4b1b      	ldr	r3, [pc, #108]	; (8019cb4 <RegionUS915LinkAdrReq+0x430>)
 8019c46:	681b      	ldr	r3, [r3, #0]
 8019c48:	400a      	ands	r2, r1
 8019c4a:	b292      	uxth	r2, r2
 8019c4c:	809a      	strh	r2, [r3, #4]
        RegionNvmGroup1->ChannelsMaskRemaining[3] &= RegionNvmGroup2->ChannelsMask[3];
 8019c4e:	4b19      	ldr	r3, [pc, #100]	; (8019cb4 <RegionUS915LinkAdrReq+0x430>)
 8019c50:	681b      	ldr	r3, [r3, #0]
 8019c52:	88d9      	ldrh	r1, [r3, #6]
 8019c54:	4b16      	ldr	r3, [pc, #88]	; (8019cb0 <RegionUS915LinkAdrReq+0x42c>)
 8019c56:	681b      	ldr	r3, [r3, #0]
 8019c58:	f8b3 2366 	ldrh.w	r2, [r3, #870]	; 0x366
 8019c5c:	4b15      	ldr	r3, [pc, #84]	; (8019cb4 <RegionUS915LinkAdrReq+0x430>)
 8019c5e:	681b      	ldr	r3, [r3, #0]
 8019c60:	400a      	ands	r2, r1
 8019c62:	b292      	uxth	r2, r2
 8019c64:	80da      	strh	r2, [r3, #6]
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 8019c66:	4b12      	ldr	r3, [pc, #72]	; (8019cb0 <RegionUS915LinkAdrReq+0x42c>)
 8019c68:	681a      	ldr	r2, [r3, #0]
 8019c6a:	4b12      	ldr	r3, [pc, #72]	; (8019cb4 <RegionUS915LinkAdrReq+0x430>)
 8019c6c:	681b      	ldr	r3, [r3, #0]
 8019c6e:	f8b2 2368 	ldrh.w	r2, [r2, #872]	; 0x368
 8019c72:	811a      	strh	r2, [r3, #8]
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 8019c74:	4b0e      	ldr	r3, [pc, #56]	; (8019cb0 <RegionUS915LinkAdrReq+0x42c>)
 8019c76:	681a      	ldr	r2, [r3, #0]
 8019c78:	4b0e      	ldr	r3, [pc, #56]	; (8019cb4 <RegionUS915LinkAdrReq+0x430>)
 8019c7a:	681b      	ldr	r3, [r3, #0]
 8019c7c:	f8b2 236a 	ldrh.w	r2, [r2, #874]	; 0x36a
 8019c80:	815a      	strh	r2, [r3, #10]
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8019c82:	f997 204d 	ldrsb.w	r2, [r7, #77]	; 0x4d
 8019c86:	68bb      	ldr	r3, [r7, #8]
 8019c88:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8019c8a:	f997 204e 	ldrsb.w	r2, [r7, #78]	; 0x4e
 8019c8e:	687b      	ldr	r3, [r7, #4]
 8019c90:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8019c92:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8019c96:	683b      	ldr	r3, [r7, #0]
 8019c98:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8019c9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8019c9c:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8019ca0:	701a      	strb	r2, [r3, #0]

#endif /* REGION_US915 */
    return status;
 8019ca2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8019ca6:	4618      	mov	r0, r3
 8019ca8:	375c      	adds	r7, #92	; 0x5c
 8019caa:	46bd      	mov	sp, r7
 8019cac:	bd90      	pop	{r4, r7, pc}
 8019cae:	bf00      	nop
 8019cb0:	20001a7c 	.word	0x20001a7c
 8019cb4:	20001a78 	.word	0x20001a78

08019cb8 <RegionUS915RxParamSetupReq>:

uint8_t RegionUS915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8019cb8:	b580      	push	{r7, lr}
 8019cba:	b084      	sub	sp, #16
 8019cbc:	af00      	add	r7, sp, #0
 8019cbe:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8019cc0:	2307      	movs	r3, #7
 8019cc2:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_US915 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 8019cc4:	687b      	ldr	r3, [r7, #4]
 8019cc6:	685b      	ldr	r3, [r3, #4]
 8019cc8:	4618      	mov	r0, r3
 8019cca:	f7fe ffe3 	bl	8018c94 <VerifyRfFreq>
 8019cce:	4603      	mov	r3, r0
 8019cd0:	f083 0301 	eor.w	r3, r3, #1
 8019cd4:	b2db      	uxtb	r3, r3
 8019cd6:	2b00      	cmp	r3, #0
 8019cd8:	d003      	beq.n	8019ce2 <RegionUS915RxParamSetupReq+0x2a>
    {
        status &= 0xFE; // Channel frequency KO
 8019cda:	7bfb      	ldrb	r3, [r7, #15]
 8019cdc:	f023 0301 	bic.w	r3, r3, #1
 8019ce0:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 8019ce2:	687b      	ldr	r3, [r7, #4]
 8019ce4:	f993 3000 	ldrsb.w	r3, [r3]
 8019ce8:	220d      	movs	r2, #13
 8019cea:	2108      	movs	r1, #8
 8019cec:	4618      	mov	r0, r3
 8019cee:	f7fd f874 	bl	8016dda <RegionCommonValueInRange>
 8019cf2:	4603      	mov	r3, r0
 8019cf4:	2b00      	cmp	r3, #0
 8019cf6:	d103      	bne.n	8019d00 <RegionUS915RxParamSetupReq+0x48>
    {
        status &= 0xFD; // Datarate KO
 8019cf8:	7bfb      	ldrb	r3, [r7, #15]
 8019cfa:	f023 0302 	bic.w	r3, r3, #2
 8019cfe:	73fb      	strb	r3, [r7, #15]
    }
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 8019d00:	687b      	ldr	r3, [r7, #4]
 8019d02:	f993 3000 	ldrsb.w	r3, [r3]
 8019d06:	2207      	movs	r2, #7
 8019d08:	2105      	movs	r1, #5
 8019d0a:	4618      	mov	r0, r3
 8019d0c:	f7fd f865 	bl	8016dda <RegionCommonValueInRange>
 8019d10:	4603      	mov	r3, r0
 8019d12:	2b01      	cmp	r3, #1
 8019d14:	d004      	beq.n	8019d20 <RegionUS915RxParamSetupReq+0x68>
        ( rxParamSetupReq->Datarate > DR_13 ) )
 8019d16:	687b      	ldr	r3, [r7, #4]
 8019d18:	f993 3000 	ldrsb.w	r3, [r3]
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 8019d1c:	2b0d      	cmp	r3, #13
 8019d1e:	dd03      	ble.n	8019d28 <RegionUS915RxParamSetupReq+0x70>
    {
        status &= 0xFD; // Datarate KO
 8019d20:	7bfb      	ldrb	r3, [r7, #15]
 8019d22:	f023 0302 	bic.w	r3, r3, #2
 8019d26:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, US915_MIN_RX1_DR_OFFSET, US915_MAX_RX1_DR_OFFSET ) == false )
 8019d28:	687b      	ldr	r3, [r7, #4]
 8019d2a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019d2e:	2203      	movs	r2, #3
 8019d30:	2100      	movs	r1, #0
 8019d32:	4618      	mov	r0, r3
 8019d34:	f7fd f851 	bl	8016dda <RegionCommonValueInRange>
 8019d38:	4603      	mov	r3, r0
 8019d3a:	2b00      	cmp	r3, #0
 8019d3c:	d103      	bne.n	8019d46 <RegionUS915RxParamSetupReq+0x8e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8019d3e:	7bfb      	ldrb	r3, [r7, #15]
 8019d40:	f023 0304 	bic.w	r3, r3, #4
 8019d44:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_US915 */
    return status;
 8019d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8019d48:	4618      	mov	r0, r3
 8019d4a:	3710      	adds	r7, #16
 8019d4c:	46bd      	mov	sp, r7
 8019d4e:	bd80      	pop	{r7, pc}

08019d50 <RegionUS915NewChannelReq>:

int8_t RegionUS915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8019d50:	b480      	push	{r7}
 8019d52:	b083      	sub	sp, #12
 8019d54:	af00      	add	r7, sp, #0
 8019d56:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8019d58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8019d5c:	4618      	mov	r0, r3
 8019d5e:	370c      	adds	r7, #12
 8019d60:	46bd      	mov	sp, r7
 8019d62:	bc80      	pop	{r7}
 8019d64:	4770      	bx	lr

08019d66 <RegionUS915TxParamSetupReq>:

int8_t RegionUS915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8019d66:	b480      	push	{r7}
 8019d68:	b083      	sub	sp, #12
 8019d6a:	af00      	add	r7, sp, #0
 8019d6c:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8019d6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8019d72:	4618      	mov	r0, r3
 8019d74:	370c      	adds	r7, #12
 8019d76:	46bd      	mov	sp, r7
 8019d78:	bc80      	pop	{r7}
 8019d7a:	4770      	bx	lr

08019d7c <RegionUS915DlChannelReq>:

int8_t RegionUS915DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8019d7c:	b480      	push	{r7}
 8019d7e:	b083      	sub	sp, #12
 8019d80:	af00      	add	r7, sp, #0
 8019d82:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8019d84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8019d88:	4618      	mov	r0, r3
 8019d8a:	370c      	adds	r7, #12
 8019d8c:	46bd      	mov	sp, r7
 8019d8e:	bc80      	pop	{r7}
 8019d90:	4770      	bx	lr
	...

08019d94 <RegionUS915AlternateDr>:

int8_t RegionUS915AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8019d94:	b480      	push	{r7}
 8019d96:	b083      	sub	sp, #12
 8019d98:	af00      	add	r7, sp, #0
 8019d9a:	4603      	mov	r3, r0
 8019d9c:	460a      	mov	r2, r1
 8019d9e:	71fb      	strb	r3, [r7, #7]
 8019da0:	4613      	mov	r3, r2
 8019da2:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_US915 )
    // Alternates the data rate according to the channel sequence:
    // Eight times a 125kHz DR_0 and then one 500kHz DR_4 channel
    if( type == ALTERNATE_DR )
 8019da4:	79bb      	ldrb	r3, [r7, #6]
 8019da6:	2b00      	cmp	r3, #0
 8019da8:	d106      	bne.n	8019db8 <RegionUS915AlternateDr+0x24>
    {
        RegionNvmGroup1->JoinTrialsCounter++;
 8019daa:	4b13      	ldr	r3, [pc, #76]	; (8019df8 <RegionUS915AlternateDr+0x64>)
 8019dac:	681b      	ldr	r3, [r3, #0]
 8019dae:	7b5a      	ldrb	r2, [r3, #13]
 8019db0:	3201      	adds	r2, #1
 8019db2:	b2d2      	uxtb	r2, r2
 8019db4:	735a      	strb	r2, [r3, #13]
 8019db6:	e005      	b.n	8019dc4 <RegionUS915AlternateDr+0x30>
    }
    else
    {
        RegionNvmGroup1->JoinTrialsCounter--;
 8019db8:	4b0f      	ldr	r3, [pc, #60]	; (8019df8 <RegionUS915AlternateDr+0x64>)
 8019dba:	681b      	ldr	r3, [r3, #0]
 8019dbc:	7b5a      	ldrb	r2, [r3, #13]
 8019dbe:	3a01      	subs	r2, #1
 8019dc0:	b2d2      	uxtb	r2, r2
 8019dc2:	735a      	strb	r2, [r3, #13]
    }

    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
 8019dc4:	4b0c      	ldr	r3, [pc, #48]	; (8019df8 <RegionUS915AlternateDr+0x64>)
 8019dc6:	681b      	ldr	r3, [r3, #0]
 8019dc8:	7b5a      	ldrb	r2, [r3, #13]
 8019dca:	4b0c      	ldr	r3, [pc, #48]	; (8019dfc <RegionUS915AlternateDr+0x68>)
 8019dcc:	fba3 1302 	umull	r1, r3, r3, r2
 8019dd0:	0859      	lsrs	r1, r3, #1
 8019dd2:	460b      	mov	r3, r1
 8019dd4:	00db      	lsls	r3, r3, #3
 8019dd6:	440b      	add	r3, r1
 8019dd8:	1ad3      	subs	r3, r2, r3
 8019dda:	b2db      	uxtb	r3, r3
 8019ddc:	2b00      	cmp	r3, #0
 8019dde:	d102      	bne.n	8019de6 <RegionUS915AlternateDr+0x52>
    {
        // Use DR_4 every 9th times.
        currentDr = DR_4;
 8019de0:	2304      	movs	r3, #4
 8019de2:	71fb      	strb	r3, [r7, #7]
 8019de4:	e001      	b.n	8019dea <RegionUS915AlternateDr+0x56>
    }
    else
    {
        currentDr = DR_0;
 8019de6:	2300      	movs	r3, #0
 8019de8:	71fb      	strb	r3, [r7, #7]
    }
    return currentDr;
 8019dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_US915 */
}
 8019dee:	4618      	mov	r0, r3
 8019df0:	370c      	adds	r7, #12
 8019df2:	46bd      	mov	sp, r7
 8019df4:	bc80      	pop	{r7}
 8019df6:	4770      	bx	lr
 8019df8:	20001a78 	.word	0x20001a78
 8019dfc:	38e38e39 	.word	0x38e38e39

08019e00 <RegionUS915NextChannel>:

LoRaMacStatus_t RegionUS915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8019e00:	b580      	push	{r7, lr}
 8019e02:	b0a8      	sub	sp, #160	; 0xa0
 8019e04:	af02      	add	r7, sp, #8
 8019e06:	60f8      	str	r0, [r7, #12]
 8019e08:	60b9      	str	r1, [r7, #8]
 8019e0a:	607a      	str	r2, [r7, #4]
 8019e0c:	603b      	str	r3, [r7, #0]
#if defined( REGION_US915 )
    uint8_t nbEnabledChannels = 0;
 8019e0e:	2300      	movs	r3, #0
 8019e10:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
    uint8_t nbRestrictedChannels = 0;
 8019e14:	2300      	movs	r3, #0
 8019e16:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 8019e1a:	2300      	movs	r3, #0
 8019e1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8019e1e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8019e22:	2244      	movs	r2, #68	; 0x44
 8019e24:	2100      	movs	r1, #0
 8019e26:	4618      	mov	r0, r3
 8019e28:	f004 ff5e 	bl	801ece8 <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8019e2c:	230c      	movs	r3, #12
 8019e2e:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 8019e32:	4b67      	ldr	r3, [pc, #412]	; (8019fd0 <RegionUS915NextChannel+0x1d0>)
 8019e34:	681b      	ldr	r3, [r3, #0]
 8019e36:	2204      	movs	r2, #4
 8019e38:	2100      	movs	r1, #0
 8019e3a:	4618      	mov	r0, r3
 8019e3c:	f7fd f81e 	bl	8016e7c <RegionCommonCountChannels>
 8019e40:	4603      	mov	r3, r0
 8019e42:	2b00      	cmp	r3, #0
 8019e44:	d10e      	bne.n	8019e64 <RegionUS915NextChannel+0x64>
    { // Reactivate default channels
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );
 8019e46:	4b62      	ldr	r3, [pc, #392]	; (8019fd0 <RegionUS915NextChannel+0x1d0>)
 8019e48:	681b      	ldr	r3, [r3, #0]
 8019e4a:	4618      	mov	r0, r3
 8019e4c:	4b61      	ldr	r3, [pc, #388]	; (8019fd4 <RegionUS915NextChannel+0x1d4>)
 8019e4e:	681b      	ldr	r3, [r3, #0]
 8019e50:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8019e54:	2204      	movs	r2, #4
 8019e56:	4619      	mov	r1, r3
 8019e58:	f7fd f83c 	bl	8016ed4 <RegionCommonChanMaskCopy>

        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 8019e5c:	4b5c      	ldr	r3, [pc, #368]	; (8019fd0 <RegionUS915NextChannel+0x1d0>)
 8019e5e:	681b      	ldr	r3, [r3, #0]
 8019e60:	2200      	movs	r2, #0
 8019e62:	731a      	strb	r2, [r3, #12]
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_4 )
 8019e64:	68fb      	ldr	r3, [r7, #12]
 8019e66:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8019e6a:	2b03      	cmp	r3, #3
 8019e6c:	dd0c      	ble.n	8019e88 <RegionUS915NextChannel+0x88>
    {
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 8019e6e:	4b58      	ldr	r3, [pc, #352]	; (8019fd0 <RegionUS915NextChannel+0x1d0>)
 8019e70:	681b      	ldr	r3, [r3, #0]
 8019e72:	891b      	ldrh	r3, [r3, #8]
 8019e74:	b2db      	uxtb	r3, r3
 8019e76:	2b00      	cmp	r3, #0
 8019e78:	d106      	bne.n	8019e88 <RegionUS915NextChannel+0x88>
        {
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 8019e7a:	4b56      	ldr	r3, [pc, #344]	; (8019fd4 <RegionUS915NextChannel+0x1d4>)
 8019e7c:	681a      	ldr	r2, [r3, #0]
 8019e7e:	4b54      	ldr	r3, [pc, #336]	; (8019fd0 <RegionUS915NextChannel+0x1d0>)
 8019e80:	681b      	ldr	r3, [r3, #0]
 8019e82:	f8b2 2368 	ldrh.w	r2, [r2, #872]	; 0x368
 8019e86:	811a      	strh	r2, [r3, #8]
        }
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8019e88:	68fb      	ldr	r3, [r7, #12]
 8019e8a:	7a5b      	ldrb	r3, [r3, #9]
 8019e8c:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8019e8e:	68fb      	ldr	r3, [r7, #12]
 8019e90:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8019e94:	b2db      	uxtb	r3, r3
 8019e96:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
 8019e98:	4b4d      	ldr	r3, [pc, #308]	; (8019fd0 <RegionUS915NextChannel+0x1d0>)
 8019e9a:	681b      	ldr	r3, [r3, #0]
 8019e9c:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8019e9e:	4b4d      	ldr	r3, [pc, #308]	; (8019fd4 <RegionUS915NextChannel+0x1d4>)
 8019ea0:	681b      	ldr	r3, [r3, #0]
 8019ea2:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 8019ea4:	4b4c      	ldr	r3, [pc, #304]	; (8019fd8 <RegionUS915NextChannel+0x1d8>)
 8019ea6:	681b      	ldr	r3, [r3, #0]
 8019ea8:	623b      	str	r3, [r7, #32]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = US915_MAX_NB_CHANNELS;
 8019eaa:	2348      	movs	r3, #72	; 0x48
 8019eac:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = NULL;
 8019eae:	2300      	movs	r3, #0
 8019eb0:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8019eb2:	68fb      	ldr	r3, [r7, #12]
 8019eb4:	681b      	ldr	r3, [r3, #0]
 8019eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8019eb8:	68fb      	ldr	r3, [r7, #12]
 8019eba:	685b      	ldr	r3, [r3, #4]
 8019ebc:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8019ebe:	68fb      	ldr	r3, [r7, #12]
 8019ec0:	7a9b      	ldrb	r3, [r3, #10]
 8019ec2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = US915_MAX_NB_BANDS;
 8019ec6:	2301      	movs	r3, #1
 8019ec8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8019ecc:	f107 0314 	add.w	r3, r7, #20
 8019ed0:	64bb      	str	r3, [r7, #72]	; 0x48

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8019ed2:	68fa      	ldr	r2, [r7, #12]
 8019ed4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8019ed8:	320c      	adds	r2, #12
 8019eda:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019ede:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8019ee2:	68fb      	ldr	r3, [r7, #12]
 8019ee4:	7d1b      	ldrb	r3, [r3, #20]
 8019ee6:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8019eea:	68fb      	ldr	r3, [r7, #12]
 8019eec:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8019ef0:	68fb      	ldr	r3, [r7, #12]
 8019ef2:	8adb      	ldrh	r3, [r3, #22]
 8019ef4:	4619      	mov	r1, r3
 8019ef6:	4610      	mov	r0, r2
 8019ef8:	f7fe ff10 	bl	8018d1c <GetTimeOnAir>
 8019efc:	4603      	mov	r3, r0
 8019efe:	647b      	str	r3, [r7, #68]	; 0x44
#endif /* REGION_VERSION */

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8019f00:	f107 0195 	add.w	r1, r7, #149	; 0x95
 8019f04:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8019f08:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8019f0c:	687b      	ldr	r3, [r7, #4]
 8019f0e:	9301      	str	r3, [sp, #4]
 8019f10:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8019f14:	9300      	str	r3, [sp, #0]
 8019f16:	460b      	mov	r3, r1
 8019f18:	6839      	ldr	r1, [r7, #0]
 8019f1a:	f7fd fbc6 	bl	80176aa <RegionCommonIdentifyChannels>
 8019f1e:	4603      	mov	r3, r0
 8019f20:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8019f24:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8019f28:	2b00      	cmp	r3, #0
 8019f2a:	d14a      	bne.n	8019fc2 <RegionUS915NextChannel+0x1c2>
    {
        if( nextChanParams->Joined == true )
 8019f2c:	68fb      	ldr	r3, [r7, #12]
 8019f2e:	7a5b      	ldrb	r3, [r3, #9]
 8019f30:	2b00      	cmp	r3, #0
 8019f32:	d00e      	beq.n	8019f52 <RegionUS915NextChannel+0x152>
        {
            // Choose randomly on of the remaining channels
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8019f34:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8019f38:	3b01      	subs	r3, #1
 8019f3a:	4619      	mov	r1, r3
 8019f3c:	2000      	movs	r0, #0
 8019f3e:	f000 f89f 	bl	801a080 <randr>
 8019f42:	4603      	mov	r3, r0
 8019f44:	3398      	adds	r3, #152	; 0x98
 8019f46:	443b      	add	r3, r7
 8019f48:	f813 2c4c 	ldrb.w	r2, [r3, #-76]
 8019f4c:	68bb      	ldr	r3, [r7, #8]
 8019f4e:	701a      	strb	r2, [r3, #0]
 8019f50:	e02e      	b.n	8019fb0 <RegionUS915NextChannel+0x1b0>
            // follow a random channel selection sequence. It probes alternating one out of a
            // group of eight 125 kHz channels followed by probing one 500 kHz channel each pass.
            // Each time a 125 kHz channel will be selected from another group.

            // 125kHz Channels (0 - 63) DR0
            if( nextChanParams->Datarate == DR_0 )
 8019f52:	68fb      	ldr	r3, [r7, #12]
 8019f54:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8019f58:	2b00      	cmp	r3, #0
 8019f5a:	d10e      	bne.n	8019f7a <RegionUS915NextChannel+0x17a>
            {
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 8019f5c:	4b1c      	ldr	r3, [pc, #112]	; (8019fd0 <RegionUS915NextChannel+0x1d0>)
 8019f5e:	681b      	ldr	r3, [r3, #0]
 8019f60:	4618      	mov	r0, r3
                    &RegionNvmGroup1->JoinChannelGroupsCurrentIndex, channel ) == LORAMAC_STATUS_PARAMETER_INVALID )
 8019f62:	4b1b      	ldr	r3, [pc, #108]	; (8019fd0 <RegionUS915NextChannel+0x1d0>)
 8019f64:	681b      	ldr	r3, [r3, #0]
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 8019f66:	330c      	adds	r3, #12
 8019f68:	68ba      	ldr	r2, [r7, #8]
 8019f6a:	4619      	mov	r1, r3
 8019f6c:	f7fc fcf0 	bl	8016950 <RegionBaseUSComputeNext125kHzJoinChannel>
 8019f70:	4603      	mov	r3, r0
 8019f72:	2b03      	cmp	r3, #3
 8019f74:	d11c      	bne.n	8019fb0 <RegionUS915NextChannel+0x1b0>
                {
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 8019f76:	2303      	movs	r3, #3
 8019f78:	e025      	b.n	8019fc6 <RegionUS915NextChannel+0x1c6>
            }
            // 500kHz Channels (64 - 71) DR4
            else
            {
                // Choose the next available channel
                uint8_t i = 0;
 8019f7a:	2300      	movs	r3, #0
 8019f7c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 8019f80:	e004      	b.n	8019f8c <RegionUS915NextChannel+0x18c>
                {
                    i++;
 8019f82:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8019f86:	3301      	adds	r3, #1
 8019f88:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 8019f8c:	4b10      	ldr	r3, [pc, #64]	; (8019fd0 <RegionUS915NextChannel+0x1d0>)
 8019f8e:	681b      	ldr	r3, [r3, #0]
 8019f90:	891b      	ldrh	r3, [r3, #8]
 8019f92:	b2da      	uxtb	r2, r3
 8019f94:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8019f98:	fa42 f303 	asr.w	r3, r2, r3
 8019f9c:	f003 0301 	and.w	r3, r3, #1
 8019fa0:	2b00      	cmp	r3, #0
 8019fa2:	d0ee      	beq.n	8019f82 <RegionUS915NextChannel+0x182>
                }
                *channel = 64 + i;
 8019fa4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8019fa8:	3340      	adds	r3, #64	; 0x40
 8019faa:	b2da      	uxtb	r2, r3
 8019fac:	68bb      	ldr	r3, [r7, #8]
 8019fae:	701a      	strb	r2, [r3, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( RegionNvmGroup1->ChannelsMaskRemaining, *channel, US915_MAX_NB_CHANNELS );
 8019fb0:	4b07      	ldr	r3, [pc, #28]	; (8019fd0 <RegionUS915NextChannel+0x1d0>)
 8019fb2:	681b      	ldr	r3, [r3, #0]
 8019fb4:	4618      	mov	r0, r3
 8019fb6:	68bb      	ldr	r3, [r7, #8]
 8019fb8:	781b      	ldrb	r3, [r3, #0]
 8019fba:	2248      	movs	r2, #72	; 0x48
 8019fbc:	4619      	mov	r1, r3
 8019fbe:	f7fc ff29 	bl	8016e14 <RegionCommonChanDisable>
    }
    return status;
 8019fc2:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_US915 */
}
 8019fc6:	4618      	mov	r0, r3
 8019fc8:	3798      	adds	r7, #152	; 0x98
 8019fca:	46bd      	mov	sp, r7
 8019fcc:	bd80      	pop	{r7, pc}
 8019fce:	bf00      	nop
 8019fd0:	20001a78 	.word	0x20001a78
 8019fd4:	20001a7c 	.word	0x20001a7c
 8019fd8:	20001a80 	.word	0x20001a80

08019fdc <RegionUS915ApplyDrOffset>:
#endif /* REGION_US915 */
}
#endif /* REGION_VERSION */

uint8_t RegionUS915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8019fdc:	b480      	push	{r7}
 8019fde:	b085      	sub	sp, #20
 8019fe0:	af00      	add	r7, sp, #0
 8019fe2:	4603      	mov	r3, r0
 8019fe4:	71fb      	strb	r3, [r7, #7]
 8019fe6:	460b      	mov	r3, r1
 8019fe8:	71bb      	strb	r3, [r7, #6]
 8019fea:	4613      	mov	r3, r2
 8019fec:	717b      	strb	r3, [r7, #5]
#if defined( REGION_US915 )
    int8_t datarate = DatarateOffsetsUS915[dr][drOffset];
 8019fee:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8019ff2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8019ff6:	4909      	ldr	r1, [pc, #36]	; (801a01c <RegionUS915ApplyDrOffset+0x40>)
 8019ff8:	0092      	lsls	r2, r2, #2
 8019ffa:	440a      	add	r2, r1
 8019ffc:	4413      	add	r3, r2
 8019ffe:	781b      	ldrb	r3, [r3, #0]
 801a000:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 801a002:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a006:	2b00      	cmp	r3, #0
 801a008:	da01      	bge.n	801a00e <RegionUS915ApplyDrOffset+0x32>
    {
        datarate = DR_0;
 801a00a:	2300      	movs	r3, #0
 801a00c:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 801a00e:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_US915 */
}
 801a010:	4618      	mov	r0, r3
 801a012:	3714      	adds	r7, #20
 801a014:	46bd      	mov	sp, r7
 801a016:	bc80      	pop	{r7}
 801a018:	4770      	bx	lr
 801a01a:	bf00      	nop
 801a01c:	0801fc98 	.word	0x0801fc98

0801a020 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 801a020:	b480      	push	{r7}
 801a022:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 801a024:	4b0d      	ldr	r3, [pc, #52]	; (801a05c <rand1+0x3c>)
 801a026:	681b      	ldr	r3, [r3, #0]
 801a028:	4a0d      	ldr	r2, [pc, #52]	; (801a060 <rand1+0x40>)
 801a02a:	fb02 f303 	mul.w	r3, r2, r3
 801a02e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801a032:	3339      	adds	r3, #57	; 0x39
 801a034:	4a09      	ldr	r2, [pc, #36]	; (801a05c <rand1+0x3c>)
 801a036:	6013      	str	r3, [r2, #0]
 801a038:	4b08      	ldr	r3, [pc, #32]	; (801a05c <rand1+0x3c>)
 801a03a:	681a      	ldr	r2, [r3, #0]
 801a03c:	2303      	movs	r3, #3
 801a03e:	fba3 1302 	umull	r1, r3, r3, r2
 801a042:	1ad1      	subs	r1, r2, r3
 801a044:	0849      	lsrs	r1, r1, #1
 801a046:	440b      	add	r3, r1
 801a048:	0f99      	lsrs	r1, r3, #30
 801a04a:	460b      	mov	r3, r1
 801a04c:	07db      	lsls	r3, r3, #31
 801a04e:	1a5b      	subs	r3, r3, r1
 801a050:	1ad1      	subs	r1, r2, r3
 801a052:	460b      	mov	r3, r1
}
 801a054:	4618      	mov	r0, r3
 801a056:	46bd      	mov	sp, r7
 801a058:	bc80      	pop	{r7}
 801a05a:	4770      	bx	lr
 801a05c:	20000134 	.word	0x20000134
 801a060:	41c64e6d 	.word	0x41c64e6d

0801a064 <srand1>:

void srand1( uint32_t seed )
{
 801a064:	b480      	push	{r7}
 801a066:	b083      	sub	sp, #12
 801a068:	af00      	add	r7, sp, #0
 801a06a:	6078      	str	r0, [r7, #4]
    next = seed;
 801a06c:	4a03      	ldr	r2, [pc, #12]	; (801a07c <srand1+0x18>)
 801a06e:	687b      	ldr	r3, [r7, #4]
 801a070:	6013      	str	r3, [r2, #0]
}
 801a072:	bf00      	nop
 801a074:	370c      	adds	r7, #12
 801a076:	46bd      	mov	sp, r7
 801a078:	bc80      	pop	{r7}
 801a07a:	4770      	bx	lr
 801a07c:	20000134 	.word	0x20000134

0801a080 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 801a080:	b580      	push	{r7, lr}
 801a082:	b082      	sub	sp, #8
 801a084:	af00      	add	r7, sp, #0
 801a086:	6078      	str	r0, [r7, #4]
 801a088:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 801a08a:	f7ff ffc9 	bl	801a020 <rand1>
 801a08e:	4602      	mov	r2, r0
 801a090:	6839      	ldr	r1, [r7, #0]
 801a092:	687b      	ldr	r3, [r7, #4]
 801a094:	1acb      	subs	r3, r1, r3
 801a096:	3301      	adds	r3, #1
 801a098:	fb92 f1f3 	sdiv	r1, r2, r3
 801a09c:	fb01 f303 	mul.w	r3, r1, r3
 801a0a0:	1ad2      	subs	r2, r2, r3
 801a0a2:	687b      	ldr	r3, [r7, #4]
 801a0a4:	4413      	add	r3, r2
}
 801a0a6:	4618      	mov	r0, r3
 801a0a8:	3708      	adds	r7, #8
 801a0aa:	46bd      	mov	sp, r7
 801a0ac:	bd80      	pop	{r7, pc}

0801a0ae <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 801a0ae:	b480      	push	{r7}
 801a0b0:	b085      	sub	sp, #20
 801a0b2:	af00      	add	r7, sp, #0
 801a0b4:	60f8      	str	r0, [r7, #12]
 801a0b6:	60b9      	str	r1, [r7, #8]
 801a0b8:	4613      	mov	r3, r2
 801a0ba:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 801a0bc:	e007      	b.n	801a0ce <memcpy1+0x20>
    {
        *dst++ = *src++;
 801a0be:	68ba      	ldr	r2, [r7, #8]
 801a0c0:	1c53      	adds	r3, r2, #1
 801a0c2:	60bb      	str	r3, [r7, #8]
 801a0c4:	68fb      	ldr	r3, [r7, #12]
 801a0c6:	1c59      	adds	r1, r3, #1
 801a0c8:	60f9      	str	r1, [r7, #12]
 801a0ca:	7812      	ldrb	r2, [r2, #0]
 801a0cc:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801a0ce:	88fb      	ldrh	r3, [r7, #6]
 801a0d0:	1e5a      	subs	r2, r3, #1
 801a0d2:	80fa      	strh	r2, [r7, #6]
 801a0d4:	2b00      	cmp	r3, #0
 801a0d6:	d1f2      	bne.n	801a0be <memcpy1+0x10>
    }
}
 801a0d8:	bf00      	nop
 801a0da:	bf00      	nop
 801a0dc:	3714      	adds	r7, #20
 801a0de:	46bd      	mov	sp, r7
 801a0e0:	bc80      	pop	{r7}
 801a0e2:	4770      	bx	lr

0801a0e4 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 801a0e4:	b480      	push	{r7}
 801a0e6:	b085      	sub	sp, #20
 801a0e8:	af00      	add	r7, sp, #0
 801a0ea:	60f8      	str	r0, [r7, #12]
 801a0ec:	60b9      	str	r1, [r7, #8]
 801a0ee:	4613      	mov	r3, r2
 801a0f0:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 801a0f2:	88fb      	ldrh	r3, [r7, #6]
 801a0f4:	3b01      	subs	r3, #1
 801a0f6:	68fa      	ldr	r2, [r7, #12]
 801a0f8:	4413      	add	r3, r2
 801a0fa:	60fb      	str	r3, [r7, #12]
    while( size-- )
 801a0fc:	e007      	b.n	801a10e <memcpyr+0x2a>
    {
        *dst-- = *src++;
 801a0fe:	68ba      	ldr	r2, [r7, #8]
 801a100:	1c53      	adds	r3, r2, #1
 801a102:	60bb      	str	r3, [r7, #8]
 801a104:	68fb      	ldr	r3, [r7, #12]
 801a106:	1e59      	subs	r1, r3, #1
 801a108:	60f9      	str	r1, [r7, #12]
 801a10a:	7812      	ldrb	r2, [r2, #0]
 801a10c:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801a10e:	88fb      	ldrh	r3, [r7, #6]
 801a110:	1e5a      	subs	r2, r3, #1
 801a112:	80fa      	strh	r2, [r7, #6]
 801a114:	2b00      	cmp	r3, #0
 801a116:	d1f2      	bne.n	801a0fe <memcpyr+0x1a>
    }
}
 801a118:	bf00      	nop
 801a11a:	bf00      	nop
 801a11c:	3714      	adds	r7, #20
 801a11e:	46bd      	mov	sp, r7
 801a120:	bc80      	pop	{r7}
 801a122:	4770      	bx	lr

0801a124 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 801a124:	b480      	push	{r7}
 801a126:	b083      	sub	sp, #12
 801a128:	af00      	add	r7, sp, #0
 801a12a:	6078      	str	r0, [r7, #4]
 801a12c:	460b      	mov	r3, r1
 801a12e:	70fb      	strb	r3, [r7, #3]
 801a130:	4613      	mov	r3, r2
 801a132:	803b      	strh	r3, [r7, #0]
    while( size-- )
 801a134:	e004      	b.n	801a140 <memset1+0x1c>
    {
        *dst++ = value;
 801a136:	687b      	ldr	r3, [r7, #4]
 801a138:	1c5a      	adds	r2, r3, #1
 801a13a:	607a      	str	r2, [r7, #4]
 801a13c:	78fa      	ldrb	r2, [r7, #3]
 801a13e:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801a140:	883b      	ldrh	r3, [r7, #0]
 801a142:	1e5a      	subs	r2, r3, #1
 801a144:	803a      	strh	r2, [r7, #0]
 801a146:	2b00      	cmp	r3, #0
 801a148:	d1f5      	bne.n	801a136 <memset1+0x12>
    }
}
 801a14a:	bf00      	nop
 801a14c:	bf00      	nop
 801a14e:	370c      	adds	r7, #12
 801a150:	46bd      	mov	sp, r7
 801a152:	bc80      	pop	{r7}
 801a154:	4770      	bx	lr
	...

0801a158 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 801a158:	b480      	push	{r7}
 801a15a:	b085      	sub	sp, #20
 801a15c:	af00      	add	r7, sp, #0
 801a15e:	6078      	str	r0, [r7, #4]
 801a160:	460b      	mov	r3, r1
 801a162:	807b      	strh	r3, [r7, #2]
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 801a164:	f04f 33ff 	mov.w	r3, #4294967295
 801a168:	60fb      	str	r3, [r7, #12]

    if( buffer == NULL )
 801a16a:	687b      	ldr	r3, [r7, #4]
 801a16c:	2b00      	cmp	r3, #0
 801a16e:	d101      	bne.n	801a174 <Crc32+0x1c>
    {
        return 0;
 801a170:	2300      	movs	r3, #0
 801a172:	e026      	b.n	801a1c2 <Crc32+0x6a>
    }

    for( uint16_t i = 0; i < length; ++i )
 801a174:	2300      	movs	r3, #0
 801a176:	817b      	strh	r3, [r7, #10]
 801a178:	e01d      	b.n	801a1b6 <Crc32+0x5e>
    {
        crc ^= ( uint32_t )buffer[i];
 801a17a:	897b      	ldrh	r3, [r7, #10]
 801a17c:	687a      	ldr	r2, [r7, #4]
 801a17e:	4413      	add	r3, r2
 801a180:	781b      	ldrb	r3, [r3, #0]
 801a182:	461a      	mov	r2, r3
 801a184:	68fb      	ldr	r3, [r7, #12]
 801a186:	4053      	eors	r3, r2
 801a188:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 801a18a:	2300      	movs	r3, #0
 801a18c:	813b      	strh	r3, [r7, #8]
 801a18e:	e00c      	b.n	801a1aa <Crc32+0x52>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 801a190:	68fb      	ldr	r3, [r7, #12]
 801a192:	085a      	lsrs	r2, r3, #1
 801a194:	68fb      	ldr	r3, [r7, #12]
 801a196:	f003 0301 	and.w	r3, r3, #1
 801a19a:	425b      	negs	r3, r3
 801a19c:	490b      	ldr	r1, [pc, #44]	; (801a1cc <Crc32+0x74>)
 801a19e:	400b      	ands	r3, r1
 801a1a0:	4053      	eors	r3, r2
 801a1a2:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 801a1a4:	893b      	ldrh	r3, [r7, #8]
 801a1a6:	3301      	adds	r3, #1
 801a1a8:	813b      	strh	r3, [r7, #8]
 801a1aa:	893b      	ldrh	r3, [r7, #8]
 801a1ac:	2b07      	cmp	r3, #7
 801a1ae:	d9ef      	bls.n	801a190 <Crc32+0x38>
    for( uint16_t i = 0; i < length; ++i )
 801a1b0:	897b      	ldrh	r3, [r7, #10]
 801a1b2:	3301      	adds	r3, #1
 801a1b4:	817b      	strh	r3, [r7, #10]
 801a1b6:	897a      	ldrh	r2, [r7, #10]
 801a1b8:	887b      	ldrh	r3, [r7, #2]
 801a1ba:	429a      	cmp	r2, r3
 801a1bc:	d3dd      	bcc.n	801a17a <Crc32+0x22>
        }
    }

    return ~crc;
 801a1be:	68fb      	ldr	r3, [r7, #12]
 801a1c0:	43db      	mvns	r3, r3
}
 801a1c2:	4618      	mov	r0, r3
 801a1c4:	3714      	adds	r7, #20
 801a1c6:	46bd      	mov	sp, r7
 801a1c8:	bc80      	pop	{r7}
 801a1ca:	4770      	bx	lr
 801a1cc:	edb88320 	.word	0xedb88320

0801a1d0 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 801a1d0:	b580      	push	{r7, lr}
 801a1d2:	b084      	sub	sp, #16
 801a1d4:	af02      	add	r7, sp, #8
 801a1d6:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 801a1d8:	4a24      	ldr	r2, [pc, #144]	; (801a26c <RadioInit+0x9c>)
 801a1da:	687b      	ldr	r3, [r7, #4]
 801a1dc:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 801a1de:	4b24      	ldr	r3, [pc, #144]	; (801a270 <RadioInit+0xa0>)
 801a1e0:	2200      	movs	r2, #0
 801a1e2:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 801a1e4:	4b22      	ldr	r3, [pc, #136]	; (801a270 <RadioInit+0xa0>)
 801a1e6:	2200      	movs	r2, #0
 801a1e8:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 801a1ea:	4b21      	ldr	r3, [pc, #132]	; (801a270 <RadioInit+0xa0>)
 801a1ec:	2200      	movs	r2, #0
 801a1ee:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801a1f0:	4b1f      	ldr	r3, [pc, #124]	; (801a270 <RadioInit+0xa0>)
 801a1f2:	2200      	movs	r2, #0
 801a1f4:	659a      	str	r2, [r3, #88]	; 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 801a1f6:	481f      	ldr	r0, [pc, #124]	; (801a274 <RadioInit+0xa4>)
 801a1f8:	f001 ffc2 	bl	801c180 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 801a1fc:	4b1c      	ldr	r3, [pc, #112]	; (801a270 <RadioInit+0xa0>)
 801a1fe:	2200      	movs	r2, #0
 801a200:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 801a202:	4b1b      	ldr	r3, [pc, #108]	; (801a270 <RadioInit+0xa0>)
 801a204:	2200      	movs	r2, #0
 801a206:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 801a208:	f002 fa56 	bl	801c6b8 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 801a20c:	2100      	movs	r1, #0
 801a20e:	2000      	movs	r0, #0
 801a210:	f002 fe22 	bl	801ce58 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 801a214:	2204      	movs	r2, #4
 801a216:	2100      	movs	r1, #0
 801a218:	2001      	movs	r0, #1
 801a21a:	f002 fbdf 	bl	801c9dc <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801a21e:	2300      	movs	r3, #0
 801a220:	2200      	movs	r2, #0
 801a222:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801a226:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801a22a:	f002 fb0f 	bl	801c84c <SUBGRF_SetDioIrqParams>

    RadioSleep();
 801a22e:	f000 fe99 	bl	801af64 <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 801a232:	2300      	movs	r3, #0
 801a234:	9300      	str	r3, [sp, #0]
 801a236:	4b10      	ldr	r3, [pc, #64]	; (801a278 <RadioInit+0xa8>)
 801a238:	2200      	movs	r2, #0
 801a23a:	f04f 31ff 	mov.w	r1, #4294967295
 801a23e:	480f      	ldr	r0, [pc, #60]	; (801a27c <RadioInit+0xac>)
 801a240:	f004 f82c 	bl	801e29c <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 801a244:	2300      	movs	r3, #0
 801a246:	9300      	str	r3, [sp, #0]
 801a248:	4b0d      	ldr	r3, [pc, #52]	; (801a280 <RadioInit+0xb0>)
 801a24a:	2200      	movs	r2, #0
 801a24c:	f04f 31ff 	mov.w	r1, #4294967295
 801a250:	480c      	ldr	r0, [pc, #48]	; (801a284 <RadioInit+0xb4>)
 801a252:	f004 f823 	bl	801e29c <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 801a256:	4809      	ldr	r0, [pc, #36]	; (801a27c <RadioInit+0xac>)
 801a258:	f004 f8c4 	bl	801e3e4 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 801a25c:	4809      	ldr	r0, [pc, #36]	; (801a284 <RadioInit+0xb4>)
 801a25e:	f004 f8c1 	bl	801e3e4 <UTIL_TIMER_Stop>
}
 801a262:	bf00      	nop
 801a264:	3708      	adds	r7, #8
 801a266:	46bd      	mov	sp, r7
 801a268:	bd80      	pop	{r7, pc}
 801a26a:	bf00      	nop
 801a26c:	20001b84 	.word	0x20001b84
 801a270:	20001b88 	.word	0x20001b88
 801a274:	0801b35d 	.word	0x0801b35d
 801a278:	0801b2e5 	.word	0x0801b2e5
 801a27c:	20001be4 	.word	0x20001be4
 801a280:	0801b2f9 	.word	0x0801b2f9
 801a284:	20001bfc 	.word	0x20001bfc

0801a288 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 801a288:	b580      	push	{r7, lr}
 801a28a:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 801a28c:	f001 ffc0 	bl	801c210 <SUBGRF_GetOperatingMode>
 801a290:	4603      	mov	r3, r0
 801a292:	2b07      	cmp	r3, #7
 801a294:	d00a      	beq.n	801a2ac <RadioGetStatus+0x24>
 801a296:	2b07      	cmp	r3, #7
 801a298:	dc0a      	bgt.n	801a2b0 <RadioGetStatus+0x28>
 801a29a:	2b04      	cmp	r3, #4
 801a29c:	d002      	beq.n	801a2a4 <RadioGetStatus+0x1c>
 801a29e:	2b05      	cmp	r3, #5
 801a2a0:	d002      	beq.n	801a2a8 <RadioGetStatus+0x20>
 801a2a2:	e005      	b.n	801a2b0 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 801a2a4:	2302      	movs	r3, #2
 801a2a6:	e004      	b.n	801a2b2 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 801a2a8:	2301      	movs	r3, #1
 801a2aa:	e002      	b.n	801a2b2 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 801a2ac:	2303      	movs	r3, #3
 801a2ae:	e000      	b.n	801a2b2 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 801a2b0:	2300      	movs	r3, #0
    }
}
 801a2b2:	4618      	mov	r0, r3
 801a2b4:	bd80      	pop	{r7, pc}
	...

0801a2b8 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 801a2b8:	b580      	push	{r7, lr}
 801a2ba:	b082      	sub	sp, #8
 801a2bc:	af00      	add	r7, sp, #0
 801a2be:	4603      	mov	r3, r0
 801a2c0:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 801a2c2:	4a2a      	ldr	r2, [pc, #168]	; (801a36c <RadioSetModem+0xb4>)
 801a2c4:	79fb      	ldrb	r3, [r7, #7]
 801a2c6:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 801a2c8:	79fb      	ldrb	r3, [r7, #7]
 801a2ca:	4618      	mov	r0, r3
 801a2cc:	f003 f997 	bl	801d5fe <RFW_SetRadioModem>
    switch( modem )
 801a2d0:	79fb      	ldrb	r3, [r7, #7]
 801a2d2:	2b05      	cmp	r3, #5
 801a2d4:	d80e      	bhi.n	801a2f4 <RadioSetModem+0x3c>
 801a2d6:	a201      	add	r2, pc, #4	; (adr r2, 801a2dc <RadioSetModem+0x24>)
 801a2d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a2dc:	0801a303 	.word	0x0801a303
 801a2e0:	0801a311 	.word	0x0801a311
 801a2e4:	0801a2f5 	.word	0x0801a2f5
 801a2e8:	0801a337 	.word	0x0801a337
 801a2ec:	0801a345 	.word	0x0801a345
 801a2f0:	0801a353 	.word	0x0801a353
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 801a2f4:	2003      	movs	r0, #3
 801a2f6:	f002 fb4b 	bl	801c990 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801a2fa:	4b1c      	ldr	r3, [pc, #112]	; (801a36c <RadioSetModem+0xb4>)
 801a2fc:	2200      	movs	r2, #0
 801a2fe:	735a      	strb	r2, [r3, #13]
        break;
 801a300:	e02f      	b.n	801a362 <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 801a302:	2000      	movs	r0, #0
 801a304:	f002 fb44 	bl	801c990 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801a308:	4b18      	ldr	r3, [pc, #96]	; (801a36c <RadioSetModem+0xb4>)
 801a30a:	2200      	movs	r2, #0
 801a30c:	735a      	strb	r2, [r3, #13]
        break;
 801a30e:	e028      	b.n	801a362 <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 801a310:	2001      	movs	r0, #1
 801a312:	f002 fb3d 	bl	801c990 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 801a316:	4b15      	ldr	r3, [pc, #84]	; (801a36c <RadioSetModem+0xb4>)
 801a318:	7b5a      	ldrb	r2, [r3, #13]
 801a31a:	4b14      	ldr	r3, [pc, #80]	; (801a36c <RadioSetModem+0xb4>)
 801a31c:	7b1b      	ldrb	r3, [r3, #12]
 801a31e:	429a      	cmp	r2, r3
 801a320:	d01e      	beq.n	801a360 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 801a322:	4b12      	ldr	r3, [pc, #72]	; (801a36c <RadioSetModem+0xb4>)
 801a324:	7b1a      	ldrb	r2, [r3, #12]
 801a326:	4b11      	ldr	r3, [pc, #68]	; (801a36c <RadioSetModem+0xb4>)
 801a328:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 801a32a:	4b10      	ldr	r3, [pc, #64]	; (801a36c <RadioSetModem+0xb4>)
 801a32c:	7b5b      	ldrb	r3, [r3, #13]
 801a32e:	4618      	mov	r0, r3
 801a330:	f000 ffa2 	bl	801b278 <RadioSetPublicNetwork>
        }
        break;
 801a334:	e014      	b.n	801a360 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 801a336:	2002      	movs	r0, #2
 801a338:	f002 fb2a 	bl	801c990 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801a33c:	4b0b      	ldr	r3, [pc, #44]	; (801a36c <RadioSetModem+0xb4>)
 801a33e:	2200      	movs	r2, #0
 801a340:	735a      	strb	r2, [r3, #13]
        break;
 801a342:	e00e      	b.n	801a362 <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 801a344:	2002      	movs	r0, #2
 801a346:	f002 fb23 	bl	801c990 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801a34a:	4b08      	ldr	r3, [pc, #32]	; (801a36c <RadioSetModem+0xb4>)
 801a34c:	2200      	movs	r2, #0
 801a34e:	735a      	strb	r2, [r3, #13]
        break;
 801a350:	e007      	b.n	801a362 <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 801a352:	2000      	movs	r0, #0
 801a354:	f002 fb1c 	bl	801c990 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801a358:	4b04      	ldr	r3, [pc, #16]	; (801a36c <RadioSetModem+0xb4>)
 801a35a:	2200      	movs	r2, #0
 801a35c:	735a      	strb	r2, [r3, #13]
        break;
 801a35e:	e000      	b.n	801a362 <RadioSetModem+0xaa>
        break;
 801a360:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 801a362:	bf00      	nop
 801a364:	3708      	adds	r7, #8
 801a366:	46bd      	mov	sp, r7
 801a368:	bd80      	pop	{r7, pc}
 801a36a:	bf00      	nop
 801a36c:	20001b88 	.word	0x20001b88

0801a370 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 801a370:	b580      	push	{r7, lr}
 801a372:	b082      	sub	sp, #8
 801a374:	af00      	add	r7, sp, #0
 801a376:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 801a378:	6878      	ldr	r0, [r7, #4]
 801a37a:	f002 fac3 	bl	801c904 <SUBGRF_SetRfFrequency>
}
 801a37e:	bf00      	nop
 801a380:	3708      	adds	r7, #8
 801a382:	46bd      	mov	sp, r7
 801a384:	bd80      	pop	{r7, pc}

0801a386 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 801a386:	b580      	push	{r7, lr}
 801a388:	b090      	sub	sp, #64	; 0x40
 801a38a:	af0a      	add	r7, sp, #40	; 0x28
 801a38c:	60f8      	str	r0, [r7, #12]
 801a38e:	60b9      	str	r1, [r7, #8]
 801a390:	603b      	str	r3, [r7, #0]
 801a392:	4613      	mov	r3, r2
 801a394:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 801a396:	2301      	movs	r3, #1
 801a398:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 801a39a:	2300      	movs	r3, #0
 801a39c:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 801a39e:	2300      	movs	r3, #0
 801a3a0:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 801a3a2:	f000 fdf2 	bl	801af8a <RadioStandby>

    RadioSetModem( MODEM_FSK );
 801a3a6:	2000      	movs	r0, #0
 801a3a8:	f7ff ff86 	bl	801a2b8 <RadioSetModem>

    RadioSetChannel( freq );
 801a3ac:	68f8      	ldr	r0, [r7, #12]
 801a3ae:	f7ff ffdf 	bl	801a370 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 801a3b2:	2301      	movs	r3, #1
 801a3b4:	9309      	str	r3, [sp, #36]	; 0x24
 801a3b6:	2300      	movs	r3, #0
 801a3b8:	9308      	str	r3, [sp, #32]
 801a3ba:	2300      	movs	r3, #0
 801a3bc:	9307      	str	r3, [sp, #28]
 801a3be:	2300      	movs	r3, #0
 801a3c0:	9306      	str	r3, [sp, #24]
 801a3c2:	2300      	movs	r3, #0
 801a3c4:	9305      	str	r3, [sp, #20]
 801a3c6:	2300      	movs	r3, #0
 801a3c8:	9304      	str	r3, [sp, #16]
 801a3ca:	2300      	movs	r3, #0
 801a3cc:	9303      	str	r3, [sp, #12]
 801a3ce:	2300      	movs	r3, #0
 801a3d0:	9302      	str	r3, [sp, #8]
 801a3d2:	2303      	movs	r3, #3
 801a3d4:	9301      	str	r3, [sp, #4]
 801a3d6:	68bb      	ldr	r3, [r7, #8]
 801a3d8:	9300      	str	r3, [sp, #0]
 801a3da:	2300      	movs	r3, #0
 801a3dc:	f44f 7216 	mov.w	r2, #600	; 0x258
 801a3e0:	68b9      	ldr	r1, [r7, #8]
 801a3e2:	2000      	movs	r0, #0
 801a3e4:	f000 f83c 	bl	801a460 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 801a3e8:	2000      	movs	r0, #0
 801a3ea:	f000 fdd5 	bl	801af98 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 801a3ee:	f000 ff71 	bl	801b2d4 <RadioGetWakeupTime>
 801a3f2:	4603      	mov	r3, r0
 801a3f4:	4618      	mov	r0, r3
 801a3f6:	f7e8 fa8b 	bl	8002910 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 801a3fa:	f004 f90d 	bl	801e618 <UTIL_TIMER_GetCurrentTime>
 801a3fe:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 801a400:	e00d      	b.n	801a41e <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 801a402:	2000      	movs	r0, #0
 801a404:	f000 feb6 	bl	801b174 <RadioRssi>
 801a408:	4603      	mov	r3, r0
 801a40a:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 801a40c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801a410:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801a414:	429a      	cmp	r2, r3
 801a416:	dd02      	ble.n	801a41e <RadioIsChannelFree+0x98>
        {
            status = false;
 801a418:	2300      	movs	r3, #0
 801a41a:	75fb      	strb	r3, [r7, #23]
            break;
 801a41c:	e006      	b.n	801a42c <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 801a41e:	6938      	ldr	r0, [r7, #16]
 801a420:	f004 f90c 	bl	801e63c <UTIL_TIMER_GetElapsedTime>
 801a424:	4602      	mov	r2, r0
 801a426:	683b      	ldr	r3, [r7, #0]
 801a428:	4293      	cmp	r3, r2
 801a42a:	d8ea      	bhi.n	801a402 <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 801a42c:	f000 fdad 	bl	801af8a <RadioStandby>

    return status;
 801a430:	7dfb      	ldrb	r3, [r7, #23]
}
 801a432:	4618      	mov	r0, r3
 801a434:	3718      	adds	r7, #24
 801a436:	46bd      	mov	sp, r7
 801a438:	bd80      	pop	{r7, pc}

0801a43a <RadioRandom>:

static uint32_t RadioRandom( void )
{
 801a43a:	b580      	push	{r7, lr}
 801a43c:	b082      	sub	sp, #8
 801a43e:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 801a440:	2300      	movs	r3, #0
 801a442:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801a444:	2300      	movs	r3, #0
 801a446:	2200      	movs	r2, #0
 801a448:	2100      	movs	r1, #0
 801a44a:	2000      	movs	r0, #0
 801a44c:	f002 f9fe 	bl	801c84c <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 801a450:	f001 ffaf 	bl	801c3b2 <SUBGRF_GetRandom>
 801a454:	6078      	str	r0, [r7, #4]

    return rnd;
 801a456:	687b      	ldr	r3, [r7, #4]
}
 801a458:	4618      	mov	r0, r3
 801a45a:	3708      	adds	r7, #8
 801a45c:	46bd      	mov	sp, r7
 801a45e:	bd80      	pop	{r7, pc}

0801a460 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 801a460:	b580      	push	{r7, lr}
 801a462:	b08a      	sub	sp, #40	; 0x28
 801a464:	af00      	add	r7, sp, #0
 801a466:	60b9      	str	r1, [r7, #8]
 801a468:	607a      	str	r2, [r7, #4]
 801a46a:	461a      	mov	r2, r3
 801a46c:	4603      	mov	r3, r0
 801a46e:	73fb      	strb	r3, [r7, #15]
 801a470:	4613      	mov	r3, r2
 801a472:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 801a474:	4ab9      	ldr	r2, [pc, #740]	; (801a75c <RadioSetRxConfig+0x2fc>)
 801a476:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801a47a:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 801a47c:	f003 f87d 	bl	801d57a <RFW_DeInit>
    if( rxContinuous == true )
 801a480:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801a484:	2b00      	cmp	r3, #0
 801a486:	d001      	beq.n	801a48c <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 801a488:	2300      	movs	r3, #0
 801a48a:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 801a48c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801a490:	2b00      	cmp	r3, #0
 801a492:	d004      	beq.n	801a49e <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 801a494:	4ab2      	ldr	r2, [pc, #712]	; (801a760 <RadioSetRxConfig+0x300>)
 801a496:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 801a49a:	7013      	strb	r3, [r2, #0]
 801a49c:	e002      	b.n	801a4a4 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 801a49e:	4bb0      	ldr	r3, [pc, #704]	; (801a760 <RadioSetRxConfig+0x300>)
 801a4a0:	22ff      	movs	r2, #255	; 0xff
 801a4a2:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 801a4a4:	7bfb      	ldrb	r3, [r7, #15]
 801a4a6:	2b05      	cmp	r3, #5
 801a4a8:	d009      	beq.n	801a4be <RadioSetRxConfig+0x5e>
 801a4aa:	2b05      	cmp	r3, #5
 801a4ac:	f300 81d7 	bgt.w	801a85e <RadioSetRxConfig+0x3fe>
 801a4b0:	2b00      	cmp	r3, #0
 801a4b2:	f000 80bf 	beq.w	801a634 <RadioSetRxConfig+0x1d4>
 801a4b6:	2b01      	cmp	r3, #1
 801a4b8:	f000 8124 	beq.w	801a704 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 801a4bc:	e1cf      	b.n	801a85e <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 801a4be:	2001      	movs	r0, #1
 801a4c0:	f002 f8bc 	bl	801c63c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801a4c4:	4ba5      	ldr	r3, [pc, #660]	; (801a75c <RadioSetRxConfig+0x2fc>)
 801a4c6:	2200      	movs	r2, #0
 801a4c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801a4cc:	4aa3      	ldr	r2, [pc, #652]	; (801a75c <RadioSetRxConfig+0x2fc>)
 801a4ce:	687b      	ldr	r3, [r7, #4]
 801a4d0:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 801a4d2:	4ba2      	ldr	r3, [pc, #648]	; (801a75c <RadioSetRxConfig+0x2fc>)
 801a4d4:	2209      	movs	r2, #9
 801a4d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 801a4da:	4ba0      	ldr	r3, [pc, #640]	; (801a75c <RadioSetRxConfig+0x2fc>)
 801a4dc:	f44f 7248 	mov.w	r2, #800	; 0x320
 801a4e0:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801a4e2:	68b8      	ldr	r0, [r7, #8]
 801a4e4:	f002 ff7c 	bl	801d3e0 <SUBGRF_GetFskBandwidthRegValue>
 801a4e8:	4603      	mov	r3, r0
 801a4ea:	461a      	mov	r2, r3
 801a4ec:	4b9b      	ldr	r3, [pc, #620]	; (801a75c <RadioSetRxConfig+0x2fc>)
 801a4ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801a4f2:	4b9a      	ldr	r3, [pc, #616]	; (801a75c <RadioSetRxConfig+0x2fc>)
 801a4f4:	2200      	movs	r2, #0
 801a4f6:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801a4f8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801a4fa:	00db      	lsls	r3, r3, #3
 801a4fc:	b29a      	uxth	r2, r3
 801a4fe:	4b97      	ldr	r3, [pc, #604]	; (801a75c <RadioSetRxConfig+0x2fc>)
 801a500:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 801a502:	4b96      	ldr	r3, [pc, #600]	; (801a75c <RadioSetRxConfig+0x2fc>)
 801a504:	2200      	movs	r2, #0
 801a506:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 801a508:	4b94      	ldr	r3, [pc, #592]	; (801a75c <RadioSetRxConfig+0x2fc>)
 801a50a:	2210      	movs	r2, #16
 801a50c:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801a50e:	4b93      	ldr	r3, [pc, #588]	; (801a75c <RadioSetRxConfig+0x2fc>)
 801a510:	2200      	movs	r2, #0
 801a512:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 801a514:	4b91      	ldr	r3, [pc, #580]	; (801a75c <RadioSetRxConfig+0x2fc>)
 801a516:	2200      	movs	r2, #0
 801a518:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 801a51a:	4b91      	ldr	r3, [pc, #580]	; (801a760 <RadioSetRxConfig+0x300>)
 801a51c:	781a      	ldrb	r2, [r3, #0]
 801a51e:	4b8f      	ldr	r3, [pc, #572]	; (801a75c <RadioSetRxConfig+0x2fc>)
 801a520:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801a522:	4b8e      	ldr	r3, [pc, #568]	; (801a75c <RadioSetRxConfig+0x2fc>)
 801a524:	2201      	movs	r2, #1
 801a526:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 801a528:	4b8c      	ldr	r3, [pc, #560]	; (801a75c <RadioSetRxConfig+0x2fc>)
 801a52a:	2200      	movs	r2, #0
 801a52c:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 801a52e:	2005      	movs	r0, #5
 801a530:	f7ff fec2 	bl	801a2b8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a534:	488b      	ldr	r0, [pc, #556]	; (801a764 <RadioSetRxConfig+0x304>)
 801a536:	f002 fb1f 	bl	801cb78 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a53a:	488b      	ldr	r0, [pc, #556]	; (801a768 <RadioSetRxConfig+0x308>)
 801a53c:	f002 fbee 	bl	801cd1c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801a540:	4a8a      	ldr	r2, [pc, #552]	; (801a76c <RadioSetRxConfig+0x30c>)
 801a542:	f107 031c 	add.w	r3, r7, #28
 801a546:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a54a:	e883 0003 	stmia.w	r3, {r0, r1}
 801a54e:	f107 031c 	add.w	r3, r7, #28
 801a552:	4618      	mov	r0, r3
 801a554:	f001 feab 	bl	801c2ae <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801a558:	f240 10ff 	movw	r0, #511	; 0x1ff
 801a55c:	f001 fef6 	bl	801c34c <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 801a560:	f640 00b8 	movw	r0, #2232	; 0x8b8
 801a564:	f000 fe25 	bl	801b1b2 <RadioRead>
 801a568:	4603      	mov	r3, r0
 801a56a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 801a56e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a572:	f023 0310 	bic.w	r3, r3, #16
 801a576:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 801a57a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a57e:	4619      	mov	r1, r3
 801a580:	f640 00b8 	movw	r0, #2232	; 0x8b8
 801a584:	f000 fe03 	bl	801b18e <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 801a588:	2104      	movs	r1, #4
 801a58a:	f640 00b9 	movw	r0, #2233	; 0x8b9
 801a58e:	f000 fdfe 	bl	801b18e <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 801a592:	f640 009b 	movw	r0, #2203	; 0x89b
 801a596:	f000 fe0c 	bl	801b1b2 <RadioRead>
 801a59a:	4603      	mov	r3, r0
 801a59c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 801a5a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a5a4:	f023 031c 	bic.w	r3, r3, #28
 801a5a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 801a5ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a5b0:	f043 0308 	orr.w	r3, r3, #8
 801a5b4:	b2db      	uxtb	r3, r3
 801a5b6:	4619      	mov	r1, r3
 801a5b8:	f640 009b 	movw	r0, #2203	; 0x89b
 801a5bc:	f000 fde7 	bl	801b18e <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 801a5c0:	f240 60d1 	movw	r0, #1745	; 0x6d1
 801a5c4:	f000 fdf5 	bl	801b1b2 <RadioRead>
 801a5c8:	4603      	mov	r3, r0
 801a5ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 801a5ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a5d2:	f023 0318 	bic.w	r3, r3, #24
 801a5d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 801a5da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a5de:	f043 0318 	orr.w	r3, r3, #24
 801a5e2:	b2db      	uxtb	r3, r3
 801a5e4:	4619      	mov	r1, r3
 801a5e6:	f240 60d1 	movw	r0, #1745	; 0x6d1
 801a5ea:	f000 fdd0 	bl	801b18e <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 801a5ee:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801a5f2:	f000 fdde 	bl	801b1b2 <RadioRead>
 801a5f6:	4603      	mov	r3, r0
 801a5f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 801a5fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a600:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801a604:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 801a608:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a60c:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 801a610:	b2db      	uxtb	r3, r3
 801a612:	4619      	mov	r1, r3
 801a614:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801a618:	f000 fdb9 	bl	801b18e <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 801a61c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801a61e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801a622:	fb02 f303 	mul.w	r3, r2, r3
 801a626:	461a      	mov	r2, r3
 801a628:	687b      	ldr	r3, [r7, #4]
 801a62a:	fbb2 f3f3 	udiv	r3, r2, r3
 801a62e:	4a4b      	ldr	r2, [pc, #300]	; (801a75c <RadioSetRxConfig+0x2fc>)
 801a630:	6093      	str	r3, [r2, #8]
            break;
 801a632:	e115      	b.n	801a860 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 801a634:	2000      	movs	r0, #0
 801a636:	f002 f801 	bl	801c63c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801a63a:	4b48      	ldr	r3, [pc, #288]	; (801a75c <RadioSetRxConfig+0x2fc>)
 801a63c:	2200      	movs	r2, #0
 801a63e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801a642:	4a46      	ldr	r2, [pc, #280]	; (801a75c <RadioSetRxConfig+0x2fc>)
 801a644:	687b      	ldr	r3, [r7, #4]
 801a646:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 801a648:	4b44      	ldr	r3, [pc, #272]	; (801a75c <RadioSetRxConfig+0x2fc>)
 801a64a:	220b      	movs	r2, #11
 801a64c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801a650:	68b8      	ldr	r0, [r7, #8]
 801a652:	f002 fec5 	bl	801d3e0 <SUBGRF_GetFskBandwidthRegValue>
 801a656:	4603      	mov	r3, r0
 801a658:	461a      	mov	r2, r3
 801a65a:	4b40      	ldr	r3, [pc, #256]	; (801a75c <RadioSetRxConfig+0x2fc>)
 801a65c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801a660:	4b3e      	ldr	r3, [pc, #248]	; (801a75c <RadioSetRxConfig+0x2fc>)
 801a662:	2200      	movs	r2, #0
 801a664:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801a666:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801a668:	00db      	lsls	r3, r3, #3
 801a66a:	b29a      	uxth	r2, r3
 801a66c:	4b3b      	ldr	r3, [pc, #236]	; (801a75c <RadioSetRxConfig+0x2fc>)
 801a66e:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801a670:	4b3a      	ldr	r3, [pc, #232]	; (801a75c <RadioSetRxConfig+0x2fc>)
 801a672:	2204      	movs	r2, #4
 801a674:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 801a676:	4b39      	ldr	r3, [pc, #228]	; (801a75c <RadioSetRxConfig+0x2fc>)
 801a678:	2218      	movs	r2, #24
 801a67a:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801a67c:	4b37      	ldr	r3, [pc, #220]	; (801a75c <RadioSetRxConfig+0x2fc>)
 801a67e:	2200      	movs	r2, #0
 801a680:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 801a682:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801a686:	f083 0301 	eor.w	r3, r3, #1
 801a68a:	b2db      	uxtb	r3, r3
 801a68c:	461a      	mov	r2, r3
 801a68e:	4b33      	ldr	r3, [pc, #204]	; (801a75c <RadioSetRxConfig+0x2fc>)
 801a690:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 801a692:	4b33      	ldr	r3, [pc, #204]	; (801a760 <RadioSetRxConfig+0x300>)
 801a694:	781a      	ldrb	r2, [r3, #0]
 801a696:	4b31      	ldr	r3, [pc, #196]	; (801a75c <RadioSetRxConfig+0x2fc>)
 801a698:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 801a69a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801a69e:	2b00      	cmp	r3, #0
 801a6a0:	d003      	beq.n	801a6aa <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 801a6a2:	4b2e      	ldr	r3, [pc, #184]	; (801a75c <RadioSetRxConfig+0x2fc>)
 801a6a4:	22f2      	movs	r2, #242	; 0xf2
 801a6a6:	75da      	strb	r2, [r3, #23]
 801a6a8:	e002      	b.n	801a6b0 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801a6aa:	4b2c      	ldr	r3, [pc, #176]	; (801a75c <RadioSetRxConfig+0x2fc>)
 801a6ac:	2201      	movs	r2, #1
 801a6ae:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 801a6b0:	4b2a      	ldr	r3, [pc, #168]	; (801a75c <RadioSetRxConfig+0x2fc>)
 801a6b2:	2201      	movs	r2, #1
 801a6b4:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 801a6b6:	f000 fc68 	bl	801af8a <RadioStandby>
            RadioSetModem( MODEM_FSK );
 801a6ba:	2000      	movs	r0, #0
 801a6bc:	f7ff fdfc 	bl	801a2b8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a6c0:	4828      	ldr	r0, [pc, #160]	; (801a764 <RadioSetRxConfig+0x304>)
 801a6c2:	f002 fa59 	bl	801cb78 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a6c6:	4828      	ldr	r0, [pc, #160]	; (801a768 <RadioSetRxConfig+0x308>)
 801a6c8:	f002 fb28 	bl	801cd1c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801a6cc:	4a28      	ldr	r2, [pc, #160]	; (801a770 <RadioSetRxConfig+0x310>)
 801a6ce:	f107 0314 	add.w	r3, r7, #20
 801a6d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a6d6:	e883 0003 	stmia.w	r3, {r0, r1}
 801a6da:	f107 0314 	add.w	r3, r7, #20
 801a6de:	4618      	mov	r0, r3
 801a6e0:	f001 fde5 	bl	801c2ae <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801a6e4:	f240 10ff 	movw	r0, #511	; 0x1ff
 801a6e8:	f001 fe30 	bl	801c34c <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 801a6ec:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801a6ee:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801a6f2:	fb02 f303 	mul.w	r3, r2, r3
 801a6f6:	461a      	mov	r2, r3
 801a6f8:	687b      	ldr	r3, [r7, #4]
 801a6fa:	fbb2 f3f3 	udiv	r3, r2, r3
 801a6fe:	4a17      	ldr	r2, [pc, #92]	; (801a75c <RadioSetRxConfig+0x2fc>)
 801a700:	6093      	str	r3, [r2, #8]
            break;
 801a702:	e0ad      	b.n	801a860 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 801a704:	2000      	movs	r0, #0
 801a706:	f001 ff99 	bl	801c63c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801a70a:	4b14      	ldr	r3, [pc, #80]	; (801a75c <RadioSetRxConfig+0x2fc>)
 801a70c:	2201      	movs	r2, #1
 801a70e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 801a712:	687b      	ldr	r3, [r7, #4]
 801a714:	b2da      	uxtb	r2, r3
 801a716:	4b11      	ldr	r3, [pc, #68]	; (801a75c <RadioSetRxConfig+0x2fc>)
 801a718:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 801a71c:	4a15      	ldr	r2, [pc, #84]	; (801a774 <RadioSetRxConfig+0x314>)
 801a71e:	68bb      	ldr	r3, [r7, #8]
 801a720:	4413      	add	r3, r2
 801a722:	781a      	ldrb	r2, [r3, #0]
 801a724:	4b0d      	ldr	r3, [pc, #52]	; (801a75c <RadioSetRxConfig+0x2fc>)
 801a726:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 801a72a:	4a0c      	ldr	r2, [pc, #48]	; (801a75c <RadioSetRxConfig+0x2fc>)
 801a72c:	7bbb      	ldrb	r3, [r7, #14]
 801a72e:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801a732:	68bb      	ldr	r3, [r7, #8]
 801a734:	2b00      	cmp	r3, #0
 801a736:	d105      	bne.n	801a744 <RadioSetRxConfig+0x2e4>
 801a738:	687b      	ldr	r3, [r7, #4]
 801a73a:	2b0b      	cmp	r3, #11
 801a73c:	d008      	beq.n	801a750 <RadioSetRxConfig+0x2f0>
 801a73e:	687b      	ldr	r3, [r7, #4]
 801a740:	2b0c      	cmp	r3, #12
 801a742:	d005      	beq.n	801a750 <RadioSetRxConfig+0x2f0>
 801a744:	68bb      	ldr	r3, [r7, #8]
 801a746:	2b01      	cmp	r3, #1
 801a748:	d116      	bne.n	801a778 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801a74a:	687b      	ldr	r3, [r7, #4]
 801a74c:	2b0c      	cmp	r3, #12
 801a74e:	d113      	bne.n	801a778 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 801a750:	4b02      	ldr	r3, [pc, #8]	; (801a75c <RadioSetRxConfig+0x2fc>)
 801a752:	2201      	movs	r2, #1
 801a754:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 801a758:	e012      	b.n	801a780 <RadioSetRxConfig+0x320>
 801a75a:	bf00      	nop
 801a75c:	20001b88 	.word	0x20001b88
 801a760:	20000138 	.word	0x20000138
 801a764:	20001bc0 	.word	0x20001bc0
 801a768:	20001b96 	.word	0x20001b96
 801a76c:	0801f664 	.word	0x0801f664
 801a770:	0801f66c 	.word	0x0801f66c
 801a774:	0801fd58 	.word	0x0801fd58
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 801a778:	4b3b      	ldr	r3, [pc, #236]	; (801a868 <RadioSetRxConfig+0x408>)
 801a77a:	2200      	movs	r2, #0
 801a77c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801a780:	4b39      	ldr	r3, [pc, #228]	; (801a868 <RadioSetRxConfig+0x408>)
 801a782:	2201      	movs	r2, #1
 801a784:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801a786:	4b38      	ldr	r3, [pc, #224]	; (801a868 <RadioSetRxConfig+0x408>)
 801a788:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801a78c:	2b05      	cmp	r3, #5
 801a78e:	d004      	beq.n	801a79a <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 801a790:	4b35      	ldr	r3, [pc, #212]	; (801a868 <RadioSetRxConfig+0x408>)
 801a792:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801a796:	2b06      	cmp	r3, #6
 801a798:	d10a      	bne.n	801a7b0 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 801a79a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801a79c:	2b0b      	cmp	r3, #11
 801a79e:	d803      	bhi.n	801a7a8 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801a7a0:	4b31      	ldr	r3, [pc, #196]	; (801a868 <RadioSetRxConfig+0x408>)
 801a7a2:	220c      	movs	r2, #12
 801a7a4:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 801a7a6:	e006      	b.n	801a7b6 <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801a7a8:	4a2f      	ldr	r2, [pc, #188]	; (801a868 <RadioSetRxConfig+0x408>)
 801a7aa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801a7ac:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 801a7ae:	e002      	b.n	801a7b6 <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801a7b0:	4a2d      	ldr	r2, [pc, #180]	; (801a868 <RadioSetRxConfig+0x408>)
 801a7b2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801a7b4:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 801a7b6:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 801a7ba:	4b2b      	ldr	r3, [pc, #172]	; (801a868 <RadioSetRxConfig+0x408>)
 801a7bc:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801a7be:	4b2b      	ldr	r3, [pc, #172]	; (801a86c <RadioSetRxConfig+0x40c>)
 801a7c0:	781a      	ldrb	r2, [r3, #0]
 801a7c2:	4b29      	ldr	r3, [pc, #164]	; (801a868 <RadioSetRxConfig+0x408>)
 801a7c4:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 801a7c6:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 801a7ca:	4b27      	ldr	r3, [pc, #156]	; (801a868 <RadioSetRxConfig+0x408>)
 801a7cc:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801a7d0:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 801a7d4:	4b24      	ldr	r3, [pc, #144]	; (801a868 <RadioSetRxConfig+0x408>)
 801a7d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 801a7da:	f000 fbd6 	bl	801af8a <RadioStandby>
            RadioSetModem( MODEM_LORA );
 801a7de:	2001      	movs	r0, #1
 801a7e0:	f7ff fd6a 	bl	801a2b8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a7e4:	4822      	ldr	r0, [pc, #136]	; (801a870 <RadioSetRxConfig+0x410>)
 801a7e6:	f002 f9c7 	bl	801cb78 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a7ea:	4822      	ldr	r0, [pc, #136]	; (801a874 <RadioSetRxConfig+0x414>)
 801a7ec:	f002 fa96 	bl	801cd1c <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801a7f0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801a7f2:	b2db      	uxtb	r3, r3
 801a7f4:	4618      	mov	r0, r3
 801a7f6:	f001 ff30 	bl	801c65a <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 801a7fa:	f640 00a3 	movw	r0, #2211	; 0x8a3
 801a7fe:	f002 fbe9 	bl	801cfd4 <SUBGRF_ReadRegister>
 801a802:	4603      	mov	r3, r0
 801a804:	f003 0301 	and.w	r3, r3, #1
 801a808:	b2db      	uxtb	r3, r3
 801a80a:	4619      	mov	r1, r3
 801a80c:	f640 00a3 	movw	r0, #2211	; 0x8a3
 801a810:	f002 fbcc 	bl	801cfac <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801a814:	4b14      	ldr	r3, [pc, #80]	; (801a868 <RadioSetRxConfig+0x408>)
 801a816:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801a81a:	2b01      	cmp	r3, #1
 801a81c:	d10d      	bne.n	801a83a <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 801a81e:	f240 7036 	movw	r0, #1846	; 0x736
 801a822:	f002 fbd7 	bl	801cfd4 <SUBGRF_ReadRegister>
 801a826:	4603      	mov	r3, r0
 801a828:	f023 0304 	bic.w	r3, r3, #4
 801a82c:	b2db      	uxtb	r3, r3
 801a82e:	4619      	mov	r1, r3
 801a830:	f240 7036 	movw	r0, #1846	; 0x736
 801a834:	f002 fbba 	bl	801cfac <SUBGRF_WriteRegister>
 801a838:	e00c      	b.n	801a854 <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 801a83a:	f240 7036 	movw	r0, #1846	; 0x736
 801a83e:	f002 fbc9 	bl	801cfd4 <SUBGRF_ReadRegister>
 801a842:	4603      	mov	r3, r0
 801a844:	f043 0304 	orr.w	r3, r3, #4
 801a848:	b2db      	uxtb	r3, r3
 801a84a:	4619      	mov	r1, r3
 801a84c:	f240 7036 	movw	r0, #1846	; 0x736
 801a850:	f002 fbac 	bl	801cfac <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 801a854:	4b04      	ldr	r3, [pc, #16]	; (801a868 <RadioSetRxConfig+0x408>)
 801a856:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a85a:	609a      	str	r2, [r3, #8]
            break;
 801a85c:	e000      	b.n	801a860 <RadioSetRxConfig+0x400>
            break;
 801a85e:	bf00      	nop
    }
}
 801a860:	bf00      	nop
 801a862:	3728      	adds	r7, #40	; 0x28
 801a864:	46bd      	mov	sp, r7
 801a866:	bd80      	pop	{r7, pc}
 801a868:	20001b88 	.word	0x20001b88
 801a86c:	20000138 	.word	0x20000138
 801a870:	20001bc0 	.word	0x20001bc0
 801a874:	20001b96 	.word	0x20001b96

0801a878 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 801a878:	b580      	push	{r7, lr}
 801a87a:	b086      	sub	sp, #24
 801a87c:	af00      	add	r7, sp, #0
 801a87e:	60ba      	str	r2, [r7, #8]
 801a880:	607b      	str	r3, [r7, #4]
 801a882:	4603      	mov	r3, r0
 801a884:	73fb      	strb	r3, [r7, #15]
 801a886:	460b      	mov	r3, r1
 801a888:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 801a88a:	f002 fe76 	bl	801d57a <RFW_DeInit>
    switch( modem )
 801a88e:	7bfb      	ldrb	r3, [r7, #15]
 801a890:	2b04      	cmp	r3, #4
 801a892:	f000 80c7 	beq.w	801aa24 <RadioSetTxConfig+0x1ac>
 801a896:	2b04      	cmp	r3, #4
 801a898:	f300 80d6 	bgt.w	801aa48 <RadioSetTxConfig+0x1d0>
 801a89c:	2b00      	cmp	r3, #0
 801a89e:	d002      	beq.n	801a8a6 <RadioSetTxConfig+0x2e>
 801a8a0:	2b01      	cmp	r3, #1
 801a8a2:	d059      	beq.n	801a958 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 801a8a4:	e0d0      	b.n	801aa48 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801a8a6:	4b77      	ldr	r3, [pc, #476]	; (801aa84 <RadioSetTxConfig+0x20c>)
 801a8a8:	2200      	movs	r2, #0
 801a8aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801a8ae:	4a75      	ldr	r2, [pc, #468]	; (801aa84 <RadioSetTxConfig+0x20c>)
 801a8b0:	6a3b      	ldr	r3, [r7, #32]
 801a8b2:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 801a8b4:	4b73      	ldr	r3, [pc, #460]	; (801aa84 <RadioSetTxConfig+0x20c>)
 801a8b6:	220b      	movs	r2, #11
 801a8b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801a8bc:	6878      	ldr	r0, [r7, #4]
 801a8be:	f002 fd8f 	bl	801d3e0 <SUBGRF_GetFskBandwidthRegValue>
 801a8c2:	4603      	mov	r3, r0
 801a8c4:	461a      	mov	r2, r3
 801a8c6:	4b6f      	ldr	r3, [pc, #444]	; (801aa84 <RadioSetTxConfig+0x20c>)
 801a8c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 801a8cc:	4a6d      	ldr	r2, [pc, #436]	; (801aa84 <RadioSetTxConfig+0x20c>)
 801a8ce:	68bb      	ldr	r3, [r7, #8]
 801a8d0:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801a8d2:	4b6c      	ldr	r3, [pc, #432]	; (801aa84 <RadioSetTxConfig+0x20c>)
 801a8d4:	2200      	movs	r2, #0
 801a8d6:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801a8d8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801a8da:	00db      	lsls	r3, r3, #3
 801a8dc:	b29a      	uxth	r2, r3
 801a8de:	4b69      	ldr	r3, [pc, #420]	; (801aa84 <RadioSetTxConfig+0x20c>)
 801a8e0:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801a8e2:	4b68      	ldr	r3, [pc, #416]	; (801aa84 <RadioSetTxConfig+0x20c>)
 801a8e4:	2204      	movs	r2, #4
 801a8e6:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 801a8e8:	4b66      	ldr	r3, [pc, #408]	; (801aa84 <RadioSetTxConfig+0x20c>)
 801a8ea:	2218      	movs	r2, #24
 801a8ec:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801a8ee:	4b65      	ldr	r3, [pc, #404]	; (801aa84 <RadioSetTxConfig+0x20c>)
 801a8f0:	2200      	movs	r2, #0
 801a8f2:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 801a8f4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801a8f8:	f083 0301 	eor.w	r3, r3, #1
 801a8fc:	b2db      	uxtb	r3, r3
 801a8fe:	461a      	mov	r2, r3
 801a900:	4b60      	ldr	r3, [pc, #384]	; (801aa84 <RadioSetTxConfig+0x20c>)
 801a902:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 801a904:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801a908:	2b00      	cmp	r3, #0
 801a90a:	d003      	beq.n	801a914 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 801a90c:	4b5d      	ldr	r3, [pc, #372]	; (801aa84 <RadioSetTxConfig+0x20c>)
 801a90e:	22f2      	movs	r2, #242	; 0xf2
 801a910:	75da      	strb	r2, [r3, #23]
 801a912:	e002      	b.n	801a91a <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801a914:	4b5b      	ldr	r3, [pc, #364]	; (801aa84 <RadioSetTxConfig+0x20c>)
 801a916:	2201      	movs	r2, #1
 801a918:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 801a91a:	4b5a      	ldr	r3, [pc, #360]	; (801aa84 <RadioSetTxConfig+0x20c>)
 801a91c:	2201      	movs	r2, #1
 801a91e:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 801a920:	f000 fb33 	bl	801af8a <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 801a924:	2000      	movs	r0, #0
 801a926:	f7ff fcc7 	bl	801a2b8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a92a:	4857      	ldr	r0, [pc, #348]	; (801aa88 <RadioSetTxConfig+0x210>)
 801a92c:	f002 f924 	bl	801cb78 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a930:	4856      	ldr	r0, [pc, #344]	; (801aa8c <RadioSetTxConfig+0x214>)
 801a932:	f002 f9f3 	bl	801cd1c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801a936:	4a56      	ldr	r2, [pc, #344]	; (801aa90 <RadioSetTxConfig+0x218>)
 801a938:	f107 0310 	add.w	r3, r7, #16
 801a93c:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a940:	e883 0003 	stmia.w	r3, {r0, r1}
 801a944:	f107 0310 	add.w	r3, r7, #16
 801a948:	4618      	mov	r0, r3
 801a94a:	f001 fcb0 	bl	801c2ae <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801a94e:	f240 10ff 	movw	r0, #511	; 0x1ff
 801a952:	f001 fcfb 	bl	801c34c <SUBGRF_SetWhiteningSeed>
            break;
 801a956:	e078      	b.n	801aa4a <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801a958:	4b4a      	ldr	r3, [pc, #296]	; (801aa84 <RadioSetTxConfig+0x20c>)
 801a95a:	2201      	movs	r2, #1
 801a95c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 801a960:	6a3b      	ldr	r3, [r7, #32]
 801a962:	b2da      	uxtb	r2, r3
 801a964:	4b47      	ldr	r3, [pc, #284]	; (801aa84 <RadioSetTxConfig+0x20c>)
 801a966:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 801a96a:	4a4a      	ldr	r2, [pc, #296]	; (801aa94 <RadioSetTxConfig+0x21c>)
 801a96c:	687b      	ldr	r3, [r7, #4]
 801a96e:	4413      	add	r3, r2
 801a970:	781a      	ldrb	r2, [r3, #0]
 801a972:	4b44      	ldr	r3, [pc, #272]	; (801aa84 <RadioSetTxConfig+0x20c>)
 801a974:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 801a978:	4a42      	ldr	r2, [pc, #264]	; (801aa84 <RadioSetTxConfig+0x20c>)
 801a97a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801a97e:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801a982:	687b      	ldr	r3, [r7, #4]
 801a984:	2b00      	cmp	r3, #0
 801a986:	d105      	bne.n	801a994 <RadioSetTxConfig+0x11c>
 801a988:	6a3b      	ldr	r3, [r7, #32]
 801a98a:	2b0b      	cmp	r3, #11
 801a98c:	d008      	beq.n	801a9a0 <RadioSetTxConfig+0x128>
 801a98e:	6a3b      	ldr	r3, [r7, #32]
 801a990:	2b0c      	cmp	r3, #12
 801a992:	d005      	beq.n	801a9a0 <RadioSetTxConfig+0x128>
 801a994:	687b      	ldr	r3, [r7, #4]
 801a996:	2b01      	cmp	r3, #1
 801a998:	d107      	bne.n	801a9aa <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801a99a:	6a3b      	ldr	r3, [r7, #32]
 801a99c:	2b0c      	cmp	r3, #12
 801a99e:	d104      	bne.n	801a9aa <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 801a9a0:	4b38      	ldr	r3, [pc, #224]	; (801aa84 <RadioSetTxConfig+0x20c>)
 801a9a2:	2201      	movs	r2, #1
 801a9a4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 801a9a8:	e003      	b.n	801a9b2 <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 801a9aa:	4b36      	ldr	r3, [pc, #216]	; (801aa84 <RadioSetTxConfig+0x20c>)
 801a9ac:	2200      	movs	r2, #0
 801a9ae:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801a9b2:	4b34      	ldr	r3, [pc, #208]	; (801aa84 <RadioSetTxConfig+0x20c>)
 801a9b4:	2201      	movs	r2, #1
 801a9b6:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801a9b8:	4b32      	ldr	r3, [pc, #200]	; (801aa84 <RadioSetTxConfig+0x20c>)
 801a9ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801a9be:	2b05      	cmp	r3, #5
 801a9c0:	d004      	beq.n	801a9cc <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 801a9c2:	4b30      	ldr	r3, [pc, #192]	; (801aa84 <RadioSetTxConfig+0x20c>)
 801a9c4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801a9c8:	2b06      	cmp	r3, #6
 801a9ca:	d10a      	bne.n	801a9e2 <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 801a9cc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801a9ce:	2b0b      	cmp	r3, #11
 801a9d0:	d803      	bhi.n	801a9da <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801a9d2:	4b2c      	ldr	r3, [pc, #176]	; (801aa84 <RadioSetTxConfig+0x20c>)
 801a9d4:	220c      	movs	r2, #12
 801a9d6:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 801a9d8:	e006      	b.n	801a9e8 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801a9da:	4a2a      	ldr	r2, [pc, #168]	; (801aa84 <RadioSetTxConfig+0x20c>)
 801a9dc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801a9de:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 801a9e0:	e002      	b.n	801a9e8 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801a9e2:	4a28      	ldr	r2, [pc, #160]	; (801aa84 <RadioSetTxConfig+0x20c>)
 801a9e4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801a9e6:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 801a9e8:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801a9ec:	4b25      	ldr	r3, [pc, #148]	; (801aa84 <RadioSetTxConfig+0x20c>)
 801a9ee:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801a9f0:	4b29      	ldr	r3, [pc, #164]	; (801aa98 <RadioSetTxConfig+0x220>)
 801a9f2:	781a      	ldrb	r2, [r3, #0]
 801a9f4:	4b23      	ldr	r3, [pc, #140]	; (801aa84 <RadioSetTxConfig+0x20c>)
 801a9f6:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 801a9f8:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 801a9fc:	4b21      	ldr	r3, [pc, #132]	; (801aa84 <RadioSetTxConfig+0x20c>)
 801a9fe:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801aa02:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 801aa06:	4b1f      	ldr	r3, [pc, #124]	; (801aa84 <RadioSetTxConfig+0x20c>)
 801aa08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 801aa0c:	f000 fabd 	bl	801af8a <RadioStandby>
            RadioSetModem( MODEM_LORA );
 801aa10:	2001      	movs	r0, #1
 801aa12:	f7ff fc51 	bl	801a2b8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801aa16:	481c      	ldr	r0, [pc, #112]	; (801aa88 <RadioSetTxConfig+0x210>)
 801aa18:	f002 f8ae 	bl	801cb78 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801aa1c:	481b      	ldr	r0, [pc, #108]	; (801aa8c <RadioSetTxConfig+0x214>)
 801aa1e:	f002 f97d 	bl	801cd1c <SUBGRF_SetPacketParams>
            break;
 801aa22:	e012      	b.n	801aa4a <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 801aa24:	2004      	movs	r0, #4
 801aa26:	f7ff fc47 	bl	801a2b8 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801aa2a:	4b16      	ldr	r3, [pc, #88]	; (801aa84 <RadioSetTxConfig+0x20c>)
 801aa2c:	2202      	movs	r2, #2
 801aa2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 801aa32:	4a14      	ldr	r2, [pc, #80]	; (801aa84 <RadioSetTxConfig+0x20c>)
 801aa34:	6a3b      	ldr	r3, [r7, #32]
 801aa36:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801aa38:	4b12      	ldr	r3, [pc, #72]	; (801aa84 <RadioSetTxConfig+0x20c>)
 801aa3a:	2216      	movs	r2, #22
 801aa3c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801aa40:	4811      	ldr	r0, [pc, #68]	; (801aa88 <RadioSetTxConfig+0x210>)
 801aa42:	f002 f899 	bl	801cb78 <SUBGRF_SetModulationParams>
            break;
 801aa46:	e000      	b.n	801aa4a <RadioSetTxConfig+0x1d2>
            break;
 801aa48:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801aa4a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801aa4e:	4618      	mov	r0, r3
 801aa50:	f002 fbc8 	bl	801d1e4 <SUBGRF_SetRfTxPower>
 801aa54:	4603      	mov	r3, r0
 801aa56:	461a      	mov	r2, r3
 801aa58:	4b0a      	ldr	r3, [pc, #40]	; (801aa84 <RadioSetTxConfig+0x20c>)
 801aa5a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801aa5e:	210e      	movs	r1, #14
 801aa60:	f640 101f 	movw	r0, #2335	; 0x91f
 801aa64:	f002 faa2 	bl	801cfac <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 801aa68:	4b06      	ldr	r3, [pc, #24]	; (801aa84 <RadioSetTxConfig+0x20c>)
 801aa6a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801aa6e:	4618      	mov	r0, r3
 801aa70:	f002 fd97 	bl	801d5a2 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801aa74:	4a03      	ldr	r2, [pc, #12]	; (801aa84 <RadioSetTxConfig+0x20c>)
 801aa76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801aa78:	6053      	str	r3, [r2, #4]
}
 801aa7a:	bf00      	nop
 801aa7c:	3718      	adds	r7, #24
 801aa7e:	46bd      	mov	sp, r7
 801aa80:	bd80      	pop	{r7, pc}
 801aa82:	bf00      	nop
 801aa84:	20001b88 	.word	0x20001b88
 801aa88:	20001bc0 	.word	0x20001bc0
 801aa8c:	20001b96 	.word	0x20001b96
 801aa90:	0801f66c 	.word	0x0801f66c
 801aa94:	0801fd58 	.word	0x0801fd58
 801aa98:	20000138 	.word	0x20000138

0801aa9c <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 801aa9c:	b480      	push	{r7}
 801aa9e:	b083      	sub	sp, #12
 801aaa0:	af00      	add	r7, sp, #0
 801aaa2:	6078      	str	r0, [r7, #4]
    return true;
 801aaa4:	2301      	movs	r3, #1
}
 801aaa6:	4618      	mov	r0, r3
 801aaa8:	370c      	adds	r7, #12
 801aaaa:	46bd      	mov	sp, r7
 801aaac:	bc80      	pop	{r7}
 801aaae:	4770      	bx	lr

0801aab0 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 801aab0:	b480      	push	{r7}
 801aab2:	b085      	sub	sp, #20
 801aab4:	af00      	add	r7, sp, #0
 801aab6:	4603      	mov	r3, r0
 801aab8:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 801aaba:	2300      	movs	r3, #0
 801aabc:	60fb      	str	r3, [r7, #12]

    switch( bw )
 801aabe:	79fb      	ldrb	r3, [r7, #7]
 801aac0:	2b0a      	cmp	r3, #10
 801aac2:	d83e      	bhi.n	801ab42 <RadioGetLoRaBandwidthInHz+0x92>
 801aac4:	a201      	add	r2, pc, #4	; (adr r2, 801aacc <RadioGetLoRaBandwidthInHz+0x1c>)
 801aac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801aaca:	bf00      	nop
 801aacc:	0801aaf9 	.word	0x0801aaf9
 801aad0:	0801ab09 	.word	0x0801ab09
 801aad4:	0801ab19 	.word	0x0801ab19
 801aad8:	0801ab29 	.word	0x0801ab29
 801aadc:	0801ab31 	.word	0x0801ab31
 801aae0:	0801ab37 	.word	0x0801ab37
 801aae4:	0801ab3d 	.word	0x0801ab3d
 801aae8:	0801ab43 	.word	0x0801ab43
 801aaec:	0801ab01 	.word	0x0801ab01
 801aaf0:	0801ab11 	.word	0x0801ab11
 801aaf4:	0801ab21 	.word	0x0801ab21
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 801aaf8:	f641 6384 	movw	r3, #7812	; 0x1e84
 801aafc:	60fb      	str	r3, [r7, #12]
        break;
 801aafe:	e020      	b.n	801ab42 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 801ab00:	f642 03b1 	movw	r3, #10417	; 0x28b1
 801ab04:	60fb      	str	r3, [r7, #12]
        break;
 801ab06:	e01c      	b.n	801ab42 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 801ab08:	f643 5309 	movw	r3, #15625	; 0x3d09
 801ab0c:	60fb      	str	r3, [r7, #12]
        break;
 801ab0e:	e018      	b.n	801ab42 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 801ab10:	f245 1361 	movw	r3, #20833	; 0x5161
 801ab14:	60fb      	str	r3, [r7, #12]
        break;
 801ab16:	e014      	b.n	801ab42 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 801ab18:	f647 2312 	movw	r3, #31250	; 0x7a12
 801ab1c:	60fb      	str	r3, [r7, #12]
        break;
 801ab1e:	e010      	b.n	801ab42 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 801ab20:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 801ab24:	60fb      	str	r3, [r7, #12]
        break;
 801ab26:	e00c      	b.n	801ab42 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 801ab28:	f24f 4324 	movw	r3, #62500	; 0xf424
 801ab2c:	60fb      	str	r3, [r7, #12]
        break;
 801ab2e:	e008      	b.n	801ab42 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 801ab30:	4b07      	ldr	r3, [pc, #28]	; (801ab50 <RadioGetLoRaBandwidthInHz+0xa0>)
 801ab32:	60fb      	str	r3, [r7, #12]
        break;
 801ab34:	e005      	b.n	801ab42 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 801ab36:	4b07      	ldr	r3, [pc, #28]	; (801ab54 <RadioGetLoRaBandwidthInHz+0xa4>)
 801ab38:	60fb      	str	r3, [r7, #12]
        break;
 801ab3a:	e002      	b.n	801ab42 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 801ab3c:	4b06      	ldr	r3, [pc, #24]	; (801ab58 <RadioGetLoRaBandwidthInHz+0xa8>)
 801ab3e:	60fb      	str	r3, [r7, #12]
        break;
 801ab40:	bf00      	nop
    }

    return bandwidthInHz;
 801ab42:	68fb      	ldr	r3, [r7, #12]
}
 801ab44:	4618      	mov	r0, r3
 801ab46:	3714      	adds	r7, #20
 801ab48:	46bd      	mov	sp, r7
 801ab4a:	bc80      	pop	{r7}
 801ab4c:	4770      	bx	lr
 801ab4e:	bf00      	nop
 801ab50:	0001e848 	.word	0x0001e848
 801ab54:	0003d090 	.word	0x0003d090
 801ab58:	0007a120 	.word	0x0007a120

0801ab5c <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 801ab5c:	b480      	push	{r7}
 801ab5e:	b083      	sub	sp, #12
 801ab60:	af00      	add	r7, sp, #0
 801ab62:	6078      	str	r0, [r7, #4]
 801ab64:	4608      	mov	r0, r1
 801ab66:	4611      	mov	r1, r2
 801ab68:	461a      	mov	r2, r3
 801ab6a:	4603      	mov	r3, r0
 801ab6c:	70fb      	strb	r3, [r7, #3]
 801ab6e:	460b      	mov	r3, r1
 801ab70:	803b      	strh	r3, [r7, #0]
 801ab72:	4613      	mov	r3, r2
 801ab74:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 801ab76:	883b      	ldrh	r3, [r7, #0]
 801ab78:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801ab7a:	78ba      	ldrb	r2, [r7, #2]
 801ab7c:	f082 0201 	eor.w	r2, r2, #1
 801ab80:	b2d2      	uxtb	r2, r2
 801ab82:	2a00      	cmp	r2, #0
 801ab84:	d001      	beq.n	801ab8a <RadioGetGfskTimeOnAirNumerator+0x2e>
 801ab86:	2208      	movs	r2, #8
 801ab88:	e000      	b.n	801ab8c <RadioGetGfskTimeOnAirNumerator+0x30>
 801ab8a:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 801ab8c:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801ab8e:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 801ab92:	7c3b      	ldrb	r3, [r7, #16]
 801ab94:	7d39      	ldrb	r1, [r7, #20]
 801ab96:	2900      	cmp	r1, #0
 801ab98:	d001      	beq.n	801ab9e <RadioGetGfskTimeOnAirNumerator+0x42>
 801ab9a:	2102      	movs	r1, #2
 801ab9c:	e000      	b.n	801aba0 <RadioGetGfskTimeOnAirNumerator+0x44>
 801ab9e:	2100      	movs	r1, #0
 801aba0:	440b      	add	r3, r1
 801aba2:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801aba4:	4413      	add	r3, r2
}
 801aba6:	4618      	mov	r0, r3
 801aba8:	370c      	adds	r7, #12
 801abaa:	46bd      	mov	sp, r7
 801abac:	bc80      	pop	{r7}
 801abae:	4770      	bx	lr

0801abb0 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 801abb0:	b480      	push	{r7}
 801abb2:	b08b      	sub	sp, #44	; 0x2c
 801abb4:	af00      	add	r7, sp, #0
 801abb6:	60f8      	str	r0, [r7, #12]
 801abb8:	60b9      	str	r1, [r7, #8]
 801abba:	4611      	mov	r1, r2
 801abbc:	461a      	mov	r2, r3
 801abbe:	460b      	mov	r3, r1
 801abc0:	71fb      	strb	r3, [r7, #7]
 801abc2:	4613      	mov	r3, r2
 801abc4:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 801abc6:	79fb      	ldrb	r3, [r7, #7]
 801abc8:	3304      	adds	r3, #4
 801abca:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 801abcc:	2300      	movs	r3, #0
 801abce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 801abd2:	68bb      	ldr	r3, [r7, #8]
 801abd4:	2b05      	cmp	r3, #5
 801abd6:	d002      	beq.n	801abde <RadioGetLoRaTimeOnAirNumerator+0x2e>
 801abd8:	68bb      	ldr	r3, [r7, #8]
 801abda:	2b06      	cmp	r3, #6
 801abdc:	d104      	bne.n	801abe8 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 801abde:	88bb      	ldrh	r3, [r7, #4]
 801abe0:	2b0b      	cmp	r3, #11
 801abe2:	d801      	bhi.n	801abe8 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 801abe4:	230c      	movs	r3, #12
 801abe6:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801abe8:	68fb      	ldr	r3, [r7, #12]
 801abea:	2b00      	cmp	r3, #0
 801abec:	d105      	bne.n	801abfa <RadioGetLoRaTimeOnAirNumerator+0x4a>
 801abee:	68bb      	ldr	r3, [r7, #8]
 801abf0:	2b0b      	cmp	r3, #11
 801abf2:	d008      	beq.n	801ac06 <RadioGetLoRaTimeOnAirNumerator+0x56>
 801abf4:	68bb      	ldr	r3, [r7, #8]
 801abf6:	2b0c      	cmp	r3, #12
 801abf8:	d005      	beq.n	801ac06 <RadioGetLoRaTimeOnAirNumerator+0x56>
 801abfa:	68fb      	ldr	r3, [r7, #12]
 801abfc:	2b01      	cmp	r3, #1
 801abfe:	d105      	bne.n	801ac0c <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801ac00:	68bb      	ldr	r3, [r7, #8]
 801ac02:	2b0c      	cmp	r3, #12
 801ac04:	d102      	bne.n	801ac0c <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 801ac06:	2301      	movs	r3, #1
 801ac08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801ac0c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 801ac10:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 801ac12:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801ac16:	2a00      	cmp	r2, #0
 801ac18:	d001      	beq.n	801ac1e <RadioGetLoRaTimeOnAirNumerator+0x6e>
 801ac1a:	2210      	movs	r2, #16
 801ac1c:	e000      	b.n	801ac20 <RadioGetLoRaTimeOnAirNumerator+0x70>
 801ac1e:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801ac20:	4413      	add	r3, r2
 801ac22:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 801ac24:	68bb      	ldr	r3, [r7, #8]
 801ac26:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 801ac28:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 801ac2a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 801ac2e:	2a00      	cmp	r2, #0
 801ac30:	d001      	beq.n	801ac36 <RadioGetLoRaTimeOnAirNumerator+0x86>
 801ac32:	2200      	movs	r2, #0
 801ac34:	e000      	b.n	801ac38 <RadioGetLoRaTimeOnAirNumerator+0x88>
 801ac36:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 801ac38:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801ac3a:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 801ac3c:	68bb      	ldr	r3, [r7, #8]
 801ac3e:	2b06      	cmp	r3, #6
 801ac40:	d803      	bhi.n	801ac4a <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 801ac42:	68bb      	ldr	r3, [r7, #8]
 801ac44:	009b      	lsls	r3, r3, #2
 801ac46:	623b      	str	r3, [r7, #32]
 801ac48:	e00e      	b.n	801ac68 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 801ac4a:	69fb      	ldr	r3, [r7, #28]
 801ac4c:	3308      	adds	r3, #8
 801ac4e:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 801ac50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ac54:	2b00      	cmp	r3, #0
 801ac56:	d004      	beq.n	801ac62 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 801ac58:	68bb      	ldr	r3, [r7, #8]
 801ac5a:	3b02      	subs	r3, #2
 801ac5c:	009b      	lsls	r3, r3, #2
 801ac5e:	623b      	str	r3, [r7, #32]
 801ac60:	e002      	b.n	801ac68 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 801ac62:	68bb      	ldr	r3, [r7, #8]
 801ac64:	009b      	lsls	r3, r3, #2
 801ac66:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 801ac68:	69fb      	ldr	r3, [r7, #28]
 801ac6a:	2b00      	cmp	r3, #0
 801ac6c:	da01      	bge.n	801ac72 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 801ac6e:	2300      	movs	r3, #0
 801ac70:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 801ac72:	69fa      	ldr	r2, [r7, #28]
 801ac74:	6a3b      	ldr	r3, [r7, #32]
 801ac76:	4413      	add	r3, r2
 801ac78:	1e5a      	subs	r2, r3, #1
 801ac7a:	6a3b      	ldr	r3, [r7, #32]
 801ac7c:	fb92 f3f3 	sdiv	r3, r2, r3
 801ac80:	697a      	ldr	r2, [r7, #20]
 801ac82:	fb03 f202 	mul.w	r2, r3, r2
 801ac86:	88bb      	ldrh	r3, [r7, #4]
 801ac88:	4413      	add	r3, r2
    int32_t intermediate =
 801ac8a:	330c      	adds	r3, #12
 801ac8c:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 801ac8e:	68bb      	ldr	r3, [r7, #8]
 801ac90:	2b06      	cmp	r3, #6
 801ac92:	d802      	bhi.n	801ac9a <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 801ac94:	69bb      	ldr	r3, [r7, #24]
 801ac96:	3302      	adds	r3, #2
 801ac98:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 801ac9a:	69bb      	ldr	r3, [r7, #24]
 801ac9c:	009b      	lsls	r3, r3, #2
 801ac9e:	1c5a      	adds	r2, r3, #1
 801aca0:	68bb      	ldr	r3, [r7, #8]
 801aca2:	3b02      	subs	r3, #2
 801aca4:	fa02 f303 	lsl.w	r3, r2, r3
}
 801aca8:	4618      	mov	r0, r3
 801acaa:	372c      	adds	r7, #44	; 0x2c
 801acac:	46bd      	mov	sp, r7
 801acae:	bc80      	pop	{r7}
 801acb0:	4770      	bx	lr
	...

0801acb4 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 801acb4:	b580      	push	{r7, lr}
 801acb6:	b08a      	sub	sp, #40	; 0x28
 801acb8:	af04      	add	r7, sp, #16
 801acba:	60b9      	str	r1, [r7, #8]
 801acbc:	607a      	str	r2, [r7, #4]
 801acbe:	461a      	mov	r2, r3
 801acc0:	4603      	mov	r3, r0
 801acc2:	73fb      	strb	r3, [r7, #15]
 801acc4:	4613      	mov	r3, r2
 801acc6:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 801acc8:	2300      	movs	r3, #0
 801acca:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 801accc:	2301      	movs	r3, #1
 801acce:	613b      	str	r3, [r7, #16]

    switch( modem )
 801acd0:	7bfb      	ldrb	r3, [r7, #15]
 801acd2:	2b00      	cmp	r3, #0
 801acd4:	d002      	beq.n	801acdc <RadioTimeOnAir+0x28>
 801acd6:	2b01      	cmp	r3, #1
 801acd8:	d017      	beq.n	801ad0a <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 801acda:	e035      	b.n	801ad48 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 801acdc:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 801ace0:	8c3a      	ldrh	r2, [r7, #32]
 801ace2:	7bb9      	ldrb	r1, [r7, #14]
 801ace4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801ace8:	9301      	str	r3, [sp, #4]
 801acea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801acee:	9300      	str	r3, [sp, #0]
 801acf0:	4603      	mov	r3, r0
 801acf2:	6878      	ldr	r0, [r7, #4]
 801acf4:	f7ff ff32 	bl	801ab5c <RadioGetGfskTimeOnAirNumerator>
 801acf8:	4603      	mov	r3, r0
 801acfa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801acfe:	fb02 f303 	mul.w	r3, r2, r3
 801ad02:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 801ad04:	687b      	ldr	r3, [r7, #4]
 801ad06:	613b      	str	r3, [r7, #16]
        break;
 801ad08:	e01e      	b.n	801ad48 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 801ad0a:	8c39      	ldrh	r1, [r7, #32]
 801ad0c:	7bba      	ldrb	r2, [r7, #14]
 801ad0e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801ad12:	9302      	str	r3, [sp, #8]
 801ad14:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801ad18:	9301      	str	r3, [sp, #4]
 801ad1a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801ad1e:	9300      	str	r3, [sp, #0]
 801ad20:	460b      	mov	r3, r1
 801ad22:	6879      	ldr	r1, [r7, #4]
 801ad24:	68b8      	ldr	r0, [r7, #8]
 801ad26:	f7ff ff43 	bl	801abb0 <RadioGetLoRaTimeOnAirNumerator>
 801ad2a:	4603      	mov	r3, r0
 801ad2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801ad30:	fb02 f303 	mul.w	r3, r2, r3
 801ad34:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 801ad36:	4a0a      	ldr	r2, [pc, #40]	; (801ad60 <RadioTimeOnAir+0xac>)
 801ad38:	68bb      	ldr	r3, [r7, #8]
 801ad3a:	4413      	add	r3, r2
 801ad3c:	781b      	ldrb	r3, [r3, #0]
 801ad3e:	4618      	mov	r0, r3
 801ad40:	f7ff feb6 	bl	801aab0 <RadioGetLoRaBandwidthInHz>
 801ad44:	6138      	str	r0, [r7, #16]
        break;
 801ad46:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 801ad48:	697a      	ldr	r2, [r7, #20]
 801ad4a:	693b      	ldr	r3, [r7, #16]
 801ad4c:	4413      	add	r3, r2
 801ad4e:	1e5a      	subs	r2, r3, #1
 801ad50:	693b      	ldr	r3, [r7, #16]
 801ad52:	fbb2 f3f3 	udiv	r3, r2, r3
}
 801ad56:	4618      	mov	r0, r3
 801ad58:	3718      	adds	r7, #24
 801ad5a:	46bd      	mov	sp, r7
 801ad5c:	bd80      	pop	{r7, pc}
 801ad5e:	bf00      	nop
 801ad60:	0801fd58 	.word	0x0801fd58

0801ad64 <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 801ad64:	b580      	push	{r7, lr}
 801ad66:	b084      	sub	sp, #16
 801ad68:	af00      	add	r7, sp, #0
 801ad6a:	6078      	str	r0, [r7, #4]
 801ad6c:	460b      	mov	r3, r1
 801ad6e:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 801ad70:	2300      	movs	r3, #0
 801ad72:	2200      	movs	r2, #0
 801ad74:	f240 2101 	movw	r1, #513	; 0x201
 801ad78:	f240 2001 	movw	r0, #513	; 0x201
 801ad7c:	f001 fd66 	bl	801c84c <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801ad80:	4b73      	ldr	r3, [pc, #460]	; (801af50 <RadioSend+0x1ec>)
 801ad82:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801ad86:	2101      	movs	r1, #1
 801ad88:	4618      	mov	r0, r3
 801ad8a:	f002 fa03 	bl	801d194 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 801ad8e:	4b70      	ldr	r3, [pc, #448]	; (801af50 <RadioSend+0x1ec>)
 801ad90:	781b      	ldrb	r3, [r3, #0]
 801ad92:	2b01      	cmp	r3, #1
 801ad94:	d112      	bne.n	801adbc <RadioSend+0x58>
 801ad96:	4b6e      	ldr	r3, [pc, #440]	; (801af50 <RadioSend+0x1ec>)
 801ad98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801ad9c:	2b06      	cmp	r3, #6
 801ad9e:	d10d      	bne.n	801adbc <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801ada0:	f640 0089 	movw	r0, #2185	; 0x889
 801ada4:	f002 f916 	bl	801cfd4 <SUBGRF_ReadRegister>
 801ada8:	4603      	mov	r3, r0
 801adaa:	f023 0304 	bic.w	r3, r3, #4
 801adae:	b2db      	uxtb	r3, r3
 801adb0:	4619      	mov	r1, r3
 801adb2:	f640 0089 	movw	r0, #2185	; 0x889
 801adb6:	f002 f8f9 	bl	801cfac <SUBGRF_WriteRegister>
 801adba:	e00c      	b.n	801add6 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 801adbc:	f640 0089 	movw	r0, #2185	; 0x889
 801adc0:	f002 f908 	bl	801cfd4 <SUBGRF_ReadRegister>
 801adc4:	4603      	mov	r3, r0
 801adc6:	f043 0304 	orr.w	r3, r3, #4
 801adca:	b2db      	uxtb	r3, r3
 801adcc:	4619      	mov	r1, r3
 801adce:	f640 0089 	movw	r0, #2185	; 0x889
 801add2:	f002 f8eb 	bl	801cfac <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 801add6:	4b5e      	ldr	r3, [pc, #376]	; (801af50 <RadioSend+0x1ec>)
 801add8:	781b      	ldrb	r3, [r3, #0]
 801adda:	2b04      	cmp	r3, #4
 801addc:	f200 80a8 	bhi.w	801af30 <RadioSend+0x1cc>
 801ade0:	a201      	add	r2, pc, #4	; (adr r2, 801ade8 <RadioSend+0x84>)
 801ade2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ade6:	bf00      	nop
 801ade8:	0801ae17 	.word	0x0801ae17
 801adec:	0801adfd 	.word	0x0801adfd
 801adf0:	0801ae17 	.word	0x0801ae17
 801adf4:	0801ae79 	.word	0x0801ae79
 801adf8:	0801ae99 	.word	0x0801ae99
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 801adfc:	4a54      	ldr	r2, [pc, #336]	; (801af50 <RadioSend+0x1ec>)
 801adfe:	78fb      	ldrb	r3, [r7, #3]
 801ae00:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801ae02:	4854      	ldr	r0, [pc, #336]	; (801af54 <RadioSend+0x1f0>)
 801ae04:	f001 ff8a 	bl	801cd1c <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 801ae08:	78fb      	ldrb	r3, [r7, #3]
 801ae0a:	2200      	movs	r2, #0
 801ae0c:	4619      	mov	r1, r3
 801ae0e:	6878      	ldr	r0, [r7, #4]
 801ae10:	f001 fa3a 	bl	801c288 <SUBGRF_SendPayload>
            break;
 801ae14:	e08d      	b.n	801af32 <RadioSend+0x1ce>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 801ae16:	f002 fbb6 	bl	801d586 <RFW_Is_Init>
 801ae1a:	4603      	mov	r3, r0
 801ae1c:	2b01      	cmp	r3, #1
 801ae1e:	d11e      	bne.n	801ae5e <RadioSend+0xfa>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 801ae20:	f107 020d 	add.w	r2, r7, #13
 801ae24:	78fb      	ldrb	r3, [r7, #3]
 801ae26:	4619      	mov	r1, r3
 801ae28:	6878      	ldr	r0, [r7, #4]
 801ae2a:	f002 fbc4 	bl	801d5b6 <RFW_TransmitInit>
 801ae2e:	4603      	mov	r3, r0
 801ae30:	2b00      	cmp	r3, #0
 801ae32:	d10c      	bne.n	801ae4e <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 801ae34:	7b7a      	ldrb	r2, [r7, #13]
 801ae36:	4b46      	ldr	r3, [pc, #280]	; (801af50 <RadioSend+0x1ec>)
 801ae38:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801ae3a:	4846      	ldr	r0, [pc, #280]	; (801af54 <RadioSend+0x1f0>)
 801ae3c:	f001 ff6e 	bl	801cd1c <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 801ae40:	7b7b      	ldrb	r3, [r7, #13]
 801ae42:	2200      	movs	r2, #0
 801ae44:	4619      	mov	r1, r3
 801ae46:	6878      	ldr	r0, [r7, #4]
 801ae48:	f001 fa1e 	bl	801c288 <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 801ae4c:	e071      	b.n	801af32 <RadioSend+0x1ce>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 801ae4e:	4b42      	ldr	r3, [pc, #264]	; (801af58 <RadioSend+0x1f4>)
 801ae50:	2201      	movs	r2, #1
 801ae52:	2100      	movs	r1, #0
 801ae54:	2002      	movs	r0, #2
 801ae56:	f003 fccf 	bl	801e7f8 <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 801ae5a:	2303      	movs	r3, #3
 801ae5c:	e073      	b.n	801af46 <RadioSend+0x1e2>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 801ae5e:	4a3c      	ldr	r2, [pc, #240]	; (801af50 <RadioSend+0x1ec>)
 801ae60:	78fb      	ldrb	r3, [r7, #3]
 801ae62:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801ae64:	483b      	ldr	r0, [pc, #236]	; (801af54 <RadioSend+0x1f0>)
 801ae66:	f001 ff59 	bl	801cd1c <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 801ae6a:	78fb      	ldrb	r3, [r7, #3]
 801ae6c:	2200      	movs	r2, #0
 801ae6e:	4619      	mov	r1, r3
 801ae70:	6878      	ldr	r0, [r7, #4]
 801ae72:	f001 fa09 	bl	801c288 <SUBGRF_SendPayload>
            break;
 801ae76:	e05c      	b.n	801af32 <RadioSend+0x1ce>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 801ae78:	4b35      	ldr	r3, [pc, #212]	; (801af50 <RadioSend+0x1ec>)
 801ae7a:	2202      	movs	r2, #2
 801ae7c:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 801ae7e:	4a34      	ldr	r2, [pc, #208]	; (801af50 <RadioSend+0x1ec>)
 801ae80:	78fb      	ldrb	r3, [r7, #3]
 801ae82:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801ae84:	4833      	ldr	r0, [pc, #204]	; (801af54 <RadioSend+0x1f0>)
 801ae86:	f001 ff49 	bl	801cd1c <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 801ae8a:	78fb      	ldrb	r3, [r7, #3]
 801ae8c:	2200      	movs	r2, #0
 801ae8e:	4619      	mov	r1, r3
 801ae90:	6878      	ldr	r0, [r7, #4]
 801ae92:	f001 f9f9 	bl	801c288 <SUBGRF_SendPayload>
            break;
 801ae96:	e04c      	b.n	801af32 <RadioSend+0x1ce>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 801ae98:	78fb      	ldrb	r3, [r7, #3]
 801ae9a:	461a      	mov	r2, r3
 801ae9c:	6879      	ldr	r1, [r7, #4]
 801ae9e:	482f      	ldr	r0, [pc, #188]	; (801af5c <RadioSend+0x1f8>)
 801aea0:	f000 fccc 	bl	801b83c <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 801aea4:	4b2a      	ldr	r3, [pc, #168]	; (801af50 <RadioSend+0x1ec>)
 801aea6:	2202      	movs	r2, #2
 801aea8:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 801aeaa:	78fb      	ldrb	r3, [r7, #3]
 801aeac:	3301      	adds	r3, #1
 801aeae:	b2da      	uxtb	r2, r3
 801aeb0:	4b27      	ldr	r3, [pc, #156]	; (801af50 <RadioSend+0x1ec>)
 801aeb2:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801aeb4:	4827      	ldr	r0, [pc, #156]	; (801af54 <RadioSend+0x1f0>)
 801aeb6:	f001 ff31 	bl	801cd1c <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 801aeba:	2100      	movs	r1, #0
 801aebc:	20f1      	movs	r0, #241	; 0xf1
 801aebe:	f000 f966 	bl	801b18e <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 801aec2:	2100      	movs	r1, #0
 801aec4:	20f0      	movs	r0, #240	; 0xf0
 801aec6:	f000 f962 	bl	801b18e <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 801aeca:	4b21      	ldr	r3, [pc, #132]	; (801af50 <RadioSend+0x1ec>)
 801aecc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801aece:	2b64      	cmp	r3, #100	; 0x64
 801aed0:	d108      	bne.n	801aee4 <RadioSend+0x180>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 801aed2:	2170      	movs	r1, #112	; 0x70
 801aed4:	20f3      	movs	r0, #243	; 0xf3
 801aed6:	f000 f95a 	bl	801b18e <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 801aeda:	211d      	movs	r1, #29
 801aedc:	20f2      	movs	r0, #242	; 0xf2
 801aede:	f000 f956 	bl	801b18e <RadioWrite>
 801aee2:	e007      	b.n	801aef4 <RadioSend+0x190>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 801aee4:	21e1      	movs	r1, #225	; 0xe1
 801aee6:	20f3      	movs	r0, #243	; 0xf3
 801aee8:	f000 f951 	bl	801b18e <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 801aeec:	2104      	movs	r1, #4
 801aeee:	20f2      	movs	r0, #242	; 0xf2
 801aef0:	f000 f94d 	bl	801b18e <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 801aef4:	78fb      	ldrb	r3, [r7, #3]
 801aef6:	b29b      	uxth	r3, r3
 801aef8:	00db      	lsls	r3, r3, #3
 801aefa:	b29b      	uxth	r3, r3
 801aefc:	3302      	adds	r3, #2
 801aefe:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 801af00:	89fb      	ldrh	r3, [r7, #14]
 801af02:	0a1b      	lsrs	r3, r3, #8
 801af04:	b29b      	uxth	r3, r3
 801af06:	b2db      	uxtb	r3, r3
 801af08:	4619      	mov	r1, r3
 801af0a:	20f4      	movs	r0, #244	; 0xf4
 801af0c:	f000 f93f 	bl	801b18e <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 801af10:	89fb      	ldrh	r3, [r7, #14]
 801af12:	b2db      	uxtb	r3, r3
 801af14:	4619      	mov	r1, r3
 801af16:	20f5      	movs	r0, #245	; 0xf5
 801af18:	f000 f939 	bl	801b18e <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 801af1c:	78fb      	ldrb	r3, [r7, #3]
 801af1e:	3301      	adds	r3, #1
 801af20:	b2db      	uxtb	r3, r3
 801af22:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 801af26:	4619      	mov	r1, r3
 801af28:	480c      	ldr	r0, [pc, #48]	; (801af5c <RadioSend+0x1f8>)
 801af2a:	f001 f9ad 	bl	801c288 <SUBGRF_SendPayload>
            break;
 801af2e:	e000      	b.n	801af32 <RadioSend+0x1ce>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 801af30:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 801af32:	4b07      	ldr	r3, [pc, #28]	; (801af50 <RadioSend+0x1ec>)
 801af34:	685b      	ldr	r3, [r3, #4]
 801af36:	4619      	mov	r1, r3
 801af38:	4809      	ldr	r0, [pc, #36]	; (801af60 <RadioSend+0x1fc>)
 801af3a:	f003 fac3 	bl	801e4c4 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 801af3e:	4808      	ldr	r0, [pc, #32]	; (801af60 <RadioSend+0x1fc>)
 801af40:	f003 f9e2 	bl	801e308 <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 801af44:	2300      	movs	r3, #0
}
 801af46:	4618      	mov	r0, r3
 801af48:	3710      	adds	r7, #16
 801af4a:	46bd      	mov	sp, r7
 801af4c:	bd80      	pop	{r7, pc}
 801af4e:	bf00      	nop
 801af50:	20001b88 	.word	0x20001b88
 801af54:	20001b96 	.word	0x20001b96
 801af58:	0801f674 	.word	0x0801f674
 801af5c:	20001a84 	.word	0x20001a84
 801af60:	20001be4 	.word	0x20001be4

0801af64 <RadioSleep>:

static void RadioSleep( void )
{
 801af64:	b580      	push	{r7, lr}
 801af66:	b082      	sub	sp, #8
 801af68:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 801af6a:	2300      	movs	r3, #0
 801af6c:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 801af6e:	793b      	ldrb	r3, [r7, #4]
 801af70:	f043 0304 	orr.w	r3, r3, #4
 801af74:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 801af76:	7938      	ldrb	r0, [r7, #4]
 801af78:	f001 fa62 	bl	801c440 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 801af7c:	2002      	movs	r0, #2
 801af7e:	f7e7 fcc7 	bl	8002910 <HAL_Delay>
}
 801af82:	bf00      	nop
 801af84:	3708      	adds	r7, #8
 801af86:	46bd      	mov	sp, r7
 801af88:	bd80      	pop	{r7, pc}

0801af8a <RadioStandby>:

static void RadioStandby( void )
{
 801af8a:	b580      	push	{r7, lr}
 801af8c:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 801af8e:	2000      	movs	r0, #0
 801af90:	f001 fa88 	bl	801c4a4 <SUBGRF_SetStandby>
}
 801af94:	bf00      	nop
 801af96:	bd80      	pop	{r7, pc}

0801af98 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 801af98:	b580      	push	{r7, lr}
 801af9a:	b082      	sub	sp, #8
 801af9c:	af00      	add	r7, sp, #0
 801af9e:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 801afa0:	f002 faf1 	bl	801d586 <RFW_Is_Init>
 801afa4:	4603      	mov	r3, r0
 801afa6:	2b01      	cmp	r3, #1
 801afa8:	d102      	bne.n	801afb0 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 801afaa:	f002 fb14 	bl	801d5d6 <RFW_ReceiveInit>
 801afae:	e007      	b.n	801afc0 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801afb0:	2300      	movs	r3, #0
 801afb2:	2200      	movs	r2, #0
 801afb4:	f240 2162 	movw	r1, #610	; 0x262
 801afb8:	f240 2062 	movw	r0, #610	; 0x262
 801afbc:	f001 fc46 	bl	801c84c <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 801afc0:	687b      	ldr	r3, [r7, #4]
 801afc2:	2b00      	cmp	r3, #0
 801afc4:	d006      	beq.n	801afd4 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801afc6:	6879      	ldr	r1, [r7, #4]
 801afc8:	4811      	ldr	r0, [pc, #68]	; (801b010 <RadioRx+0x78>)
 801afca:	f003 fa7b 	bl	801e4c4 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801afce:	4810      	ldr	r0, [pc, #64]	; (801b010 <RadioRx+0x78>)
 801afd0:	f003 f99a 	bl	801e308 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801afd4:	4b0f      	ldr	r3, [pc, #60]	; (801b014 <RadioRx+0x7c>)
 801afd6:	2200      	movs	r2, #0
 801afd8:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801afda:	4b0e      	ldr	r3, [pc, #56]	; (801b014 <RadioRx+0x7c>)
 801afdc:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801afe0:	2100      	movs	r1, #0
 801afe2:	4618      	mov	r0, r3
 801afe4:	f002 f8d6 	bl	801d194 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 801afe8:	4b0a      	ldr	r3, [pc, #40]	; (801b014 <RadioRx+0x7c>)
 801afea:	785b      	ldrb	r3, [r3, #1]
 801afec:	2b00      	cmp	r3, #0
 801afee:	d004      	beq.n	801affa <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801aff0:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801aff4:	f001 fa92 	bl	801c51c <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 801aff8:	e005      	b.n	801b006 <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 801affa:	4b06      	ldr	r3, [pc, #24]	; (801b014 <RadioRx+0x7c>)
 801affc:	689b      	ldr	r3, [r3, #8]
 801affe:	019b      	lsls	r3, r3, #6
 801b000:	4618      	mov	r0, r3
 801b002:	f001 fa8b 	bl	801c51c <SUBGRF_SetRx>
}
 801b006:	bf00      	nop
 801b008:	3708      	adds	r7, #8
 801b00a:	46bd      	mov	sp, r7
 801b00c:	bd80      	pop	{r7, pc}
 801b00e:	bf00      	nop
 801b010:	20001bfc 	.word	0x20001bfc
 801b014:	20001b88 	.word	0x20001b88

0801b018 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 801b018:	b580      	push	{r7, lr}
 801b01a:	b082      	sub	sp, #8
 801b01c:	af00      	add	r7, sp, #0
 801b01e:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 801b020:	f002 fab1 	bl	801d586 <RFW_Is_Init>
 801b024:	4603      	mov	r3, r0
 801b026:	2b01      	cmp	r3, #1
 801b028:	d102      	bne.n	801b030 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 801b02a:	f002 fad4 	bl	801d5d6 <RFW_ReceiveInit>
 801b02e:	e007      	b.n	801b040 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801b030:	2300      	movs	r3, #0
 801b032:	2200      	movs	r2, #0
 801b034:	f240 2162 	movw	r1, #610	; 0x262
 801b038:	f240 2062 	movw	r0, #610	; 0x262
 801b03c:	f001 fc06 	bl	801c84c <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 801b040:	687b      	ldr	r3, [r7, #4]
 801b042:	2b00      	cmp	r3, #0
 801b044:	d006      	beq.n	801b054 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801b046:	6879      	ldr	r1, [r7, #4]
 801b048:	4811      	ldr	r0, [pc, #68]	; (801b090 <RadioRxBoosted+0x78>)
 801b04a:	f003 fa3b 	bl	801e4c4 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801b04e:	4810      	ldr	r0, [pc, #64]	; (801b090 <RadioRxBoosted+0x78>)
 801b050:	f003 f95a 	bl	801e308 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801b054:	4b0f      	ldr	r3, [pc, #60]	; (801b094 <RadioRxBoosted+0x7c>)
 801b056:	2200      	movs	r2, #0
 801b058:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801b05a:	4b0e      	ldr	r3, [pc, #56]	; (801b094 <RadioRxBoosted+0x7c>)
 801b05c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801b060:	2100      	movs	r1, #0
 801b062:	4618      	mov	r0, r3
 801b064:	f002 f896 	bl	801d194 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 801b068:	4b0a      	ldr	r3, [pc, #40]	; (801b094 <RadioRxBoosted+0x7c>)
 801b06a:	785b      	ldrb	r3, [r3, #1]
 801b06c:	2b00      	cmp	r3, #0
 801b06e:	d004      	beq.n	801b07a <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 801b070:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801b074:	f001 fa72 	bl	801c55c <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 801b078:	e005      	b.n	801b086 <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 801b07a:	4b06      	ldr	r3, [pc, #24]	; (801b094 <RadioRxBoosted+0x7c>)
 801b07c:	689b      	ldr	r3, [r3, #8]
 801b07e:	019b      	lsls	r3, r3, #6
 801b080:	4618      	mov	r0, r3
 801b082:	f001 fa6b 	bl	801c55c <SUBGRF_SetRxBoosted>
}
 801b086:	bf00      	nop
 801b088:	3708      	adds	r7, #8
 801b08a:	46bd      	mov	sp, r7
 801b08c:	bd80      	pop	{r7, pc}
 801b08e:	bf00      	nop
 801b090:	20001bfc 	.word	0x20001bfc
 801b094:	20001b88 	.word	0x20001b88

0801b098 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801b098:	b580      	push	{r7, lr}
 801b09a:	b082      	sub	sp, #8
 801b09c:	af00      	add	r7, sp, #0
 801b09e:	6078      	str	r0, [r7, #4]
 801b0a0:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 801b0a2:	687b      	ldr	r3, [r7, #4]
 801b0a4:	005a      	lsls	r2, r3, #1
 801b0a6:	683b      	ldr	r3, [r7, #0]
 801b0a8:	4413      	add	r3, r2
 801b0aa:	4a0c      	ldr	r2, [pc, #48]	; (801b0dc <RadioSetRxDutyCycle+0x44>)
 801b0ac:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801b0ae:	2300      	movs	r3, #0
 801b0b0:	2200      	movs	r2, #0
 801b0b2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801b0b6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801b0ba:	f001 fbc7 	bl	801c84c <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801b0be:	4b07      	ldr	r3, [pc, #28]	; (801b0dc <RadioSetRxDutyCycle+0x44>)
 801b0c0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801b0c4:	2100      	movs	r1, #0
 801b0c6:	4618      	mov	r0, r3
 801b0c8:	f002 f864 	bl	801d194 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 801b0cc:	6839      	ldr	r1, [r7, #0]
 801b0ce:	6878      	ldr	r0, [r7, #4]
 801b0d0:	f001 fa68 	bl	801c5a4 <SUBGRF_SetRxDutyCycle>
}
 801b0d4:	bf00      	nop
 801b0d6:	3708      	adds	r7, #8
 801b0d8:	46bd      	mov	sp, r7
 801b0da:	bd80      	pop	{r7, pc}
 801b0dc:	20001b88 	.word	0x20001b88

0801b0e0 <RadioStartCad>:

static void RadioStartCad( void )
{
 801b0e0:	b580      	push	{r7, lr}
 801b0e2:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801b0e4:	4b09      	ldr	r3, [pc, #36]	; (801b10c <RadioStartCad+0x2c>)
 801b0e6:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801b0ea:	2100      	movs	r1, #0
 801b0ec:	4618      	mov	r0, r3
 801b0ee:	f002 f851 	bl	801d194 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 801b0f2:	2300      	movs	r3, #0
 801b0f4:	2200      	movs	r2, #0
 801b0f6:	f44f 71c0 	mov.w	r1, #384	; 0x180
 801b0fa:	f44f 70c0 	mov.w	r0, #384	; 0x180
 801b0fe:	f001 fba5 	bl	801c84c <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 801b102:	f001 fa7b 	bl	801c5fc <SUBGRF_SetCad>
}
 801b106:	bf00      	nop
 801b108:	bd80      	pop	{r7, pc}
 801b10a:	bf00      	nop
 801b10c:	20001b88 	.word	0x20001b88

0801b110 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 801b110:	b580      	push	{r7, lr}
 801b112:	b084      	sub	sp, #16
 801b114:	af00      	add	r7, sp, #0
 801b116:	6078      	str	r0, [r7, #4]
 801b118:	460b      	mov	r3, r1
 801b11a:	70fb      	strb	r3, [r7, #3]
 801b11c:	4613      	mov	r3, r2
 801b11e:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 801b120:	883b      	ldrh	r3, [r7, #0]
 801b122:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801b126:	fb02 f303 	mul.w	r3, r2, r3
 801b12a:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 801b12c:	6878      	ldr	r0, [r7, #4]
 801b12e:	f001 fbe9 	bl	801c904 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 801b132:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801b136:	4618      	mov	r0, r3
 801b138:	f002 f854 	bl	801d1e4 <SUBGRF_SetRfTxPower>
 801b13c:	4603      	mov	r3, r0
 801b13e:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801b140:	210e      	movs	r1, #14
 801b142:	f640 101f 	movw	r0, #2335	; 0x91f
 801b146:	f001 ff31 	bl	801cfac <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 801b14a:	7afb      	ldrb	r3, [r7, #11]
 801b14c:	2101      	movs	r1, #1
 801b14e:	4618      	mov	r0, r3
 801b150:	f002 f820 	bl	801d194 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 801b154:	f001 fa60 	bl	801c618 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 801b158:	68f9      	ldr	r1, [r7, #12]
 801b15a:	4805      	ldr	r0, [pc, #20]	; (801b170 <RadioSetTxContinuousWave+0x60>)
 801b15c:	f003 f9b2 	bl	801e4c4 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 801b160:	4803      	ldr	r0, [pc, #12]	; (801b170 <RadioSetTxContinuousWave+0x60>)
 801b162:	f003 f8d1 	bl	801e308 <UTIL_TIMER_Start>
}
 801b166:	bf00      	nop
 801b168:	3710      	adds	r7, #16
 801b16a:	46bd      	mov	sp, r7
 801b16c:	bd80      	pop	{r7, pc}
 801b16e:	bf00      	nop
 801b170:	20001be4 	.word	0x20001be4

0801b174 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 801b174:	b580      	push	{r7, lr}
 801b176:	b082      	sub	sp, #8
 801b178:	af00      	add	r7, sp, #0
 801b17a:	4603      	mov	r3, r0
 801b17c:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 801b17e:	f001 fe82 	bl	801ce86 <SUBGRF_GetRssiInst>
 801b182:	4603      	mov	r3, r0
 801b184:	b21b      	sxth	r3, r3
}
 801b186:	4618      	mov	r0, r3
 801b188:	3708      	adds	r7, #8
 801b18a:	46bd      	mov	sp, r7
 801b18c:	bd80      	pop	{r7, pc}

0801b18e <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 801b18e:	b580      	push	{r7, lr}
 801b190:	b082      	sub	sp, #8
 801b192:	af00      	add	r7, sp, #0
 801b194:	4603      	mov	r3, r0
 801b196:	460a      	mov	r2, r1
 801b198:	80fb      	strh	r3, [r7, #6]
 801b19a:	4613      	mov	r3, r2
 801b19c:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 801b19e:	797a      	ldrb	r2, [r7, #5]
 801b1a0:	88fb      	ldrh	r3, [r7, #6]
 801b1a2:	4611      	mov	r1, r2
 801b1a4:	4618      	mov	r0, r3
 801b1a6:	f001 ff01 	bl	801cfac <SUBGRF_WriteRegister>
}
 801b1aa:	bf00      	nop
 801b1ac:	3708      	adds	r7, #8
 801b1ae:	46bd      	mov	sp, r7
 801b1b0:	bd80      	pop	{r7, pc}

0801b1b2 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 801b1b2:	b580      	push	{r7, lr}
 801b1b4:	b082      	sub	sp, #8
 801b1b6:	af00      	add	r7, sp, #0
 801b1b8:	4603      	mov	r3, r0
 801b1ba:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 801b1bc:	88fb      	ldrh	r3, [r7, #6]
 801b1be:	4618      	mov	r0, r3
 801b1c0:	f001 ff08 	bl	801cfd4 <SUBGRF_ReadRegister>
 801b1c4:	4603      	mov	r3, r0
}
 801b1c6:	4618      	mov	r0, r3
 801b1c8:	3708      	adds	r7, #8
 801b1ca:	46bd      	mov	sp, r7
 801b1cc:	bd80      	pop	{r7, pc}

0801b1ce <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801b1ce:	b580      	push	{r7, lr}
 801b1d0:	b082      	sub	sp, #8
 801b1d2:	af00      	add	r7, sp, #0
 801b1d4:	4603      	mov	r3, r0
 801b1d6:	6039      	str	r1, [r7, #0]
 801b1d8:	80fb      	strh	r3, [r7, #6]
 801b1da:	4613      	mov	r3, r2
 801b1dc:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 801b1de:	797b      	ldrb	r3, [r7, #5]
 801b1e0:	b29a      	uxth	r2, r3
 801b1e2:	88fb      	ldrh	r3, [r7, #6]
 801b1e4:	6839      	ldr	r1, [r7, #0]
 801b1e6:	4618      	mov	r0, r3
 801b1e8:	f001 ff08 	bl	801cffc <SUBGRF_WriteRegisters>
}
 801b1ec:	bf00      	nop
 801b1ee:	3708      	adds	r7, #8
 801b1f0:	46bd      	mov	sp, r7
 801b1f2:	bd80      	pop	{r7, pc}

0801b1f4 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801b1f4:	b580      	push	{r7, lr}
 801b1f6:	b082      	sub	sp, #8
 801b1f8:	af00      	add	r7, sp, #0
 801b1fa:	4603      	mov	r3, r0
 801b1fc:	6039      	str	r1, [r7, #0]
 801b1fe:	80fb      	strh	r3, [r7, #6]
 801b200:	4613      	mov	r3, r2
 801b202:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 801b204:	797b      	ldrb	r3, [r7, #5]
 801b206:	b29a      	uxth	r2, r3
 801b208:	88fb      	ldrh	r3, [r7, #6]
 801b20a:	6839      	ldr	r1, [r7, #0]
 801b20c:	4618      	mov	r0, r3
 801b20e:	f001 ff17 	bl	801d040 <SUBGRF_ReadRegisters>
}
 801b212:	bf00      	nop
 801b214:	3708      	adds	r7, #8
 801b216:	46bd      	mov	sp, r7
 801b218:	bd80      	pop	{r7, pc}
	...

0801b21c <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 801b21c:	b580      	push	{r7, lr}
 801b21e:	b082      	sub	sp, #8
 801b220:	af00      	add	r7, sp, #0
 801b222:	4603      	mov	r3, r0
 801b224:	460a      	mov	r2, r1
 801b226:	71fb      	strb	r3, [r7, #7]
 801b228:	4613      	mov	r3, r2
 801b22a:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 801b22c:	79fb      	ldrb	r3, [r7, #7]
 801b22e:	2b01      	cmp	r3, #1
 801b230:	d10a      	bne.n	801b248 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 801b232:	4a0e      	ldr	r2, [pc, #56]	; (801b26c <RadioSetMaxPayloadLength+0x50>)
 801b234:	79bb      	ldrb	r3, [r7, #6]
 801b236:	7013      	strb	r3, [r2, #0]
 801b238:	4b0c      	ldr	r3, [pc, #48]	; (801b26c <RadioSetMaxPayloadLength+0x50>)
 801b23a:	781a      	ldrb	r2, [r3, #0]
 801b23c:	4b0c      	ldr	r3, [pc, #48]	; (801b270 <RadioSetMaxPayloadLength+0x54>)
 801b23e:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801b240:	480c      	ldr	r0, [pc, #48]	; (801b274 <RadioSetMaxPayloadLength+0x58>)
 801b242:	f001 fd6b 	bl	801cd1c <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 801b246:	e00d      	b.n	801b264 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 801b248:	4b09      	ldr	r3, [pc, #36]	; (801b270 <RadioSetMaxPayloadLength+0x54>)
 801b24a:	7d5b      	ldrb	r3, [r3, #21]
 801b24c:	2b01      	cmp	r3, #1
 801b24e:	d109      	bne.n	801b264 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 801b250:	4a06      	ldr	r2, [pc, #24]	; (801b26c <RadioSetMaxPayloadLength+0x50>)
 801b252:	79bb      	ldrb	r3, [r7, #6]
 801b254:	7013      	strb	r3, [r2, #0]
 801b256:	4b05      	ldr	r3, [pc, #20]	; (801b26c <RadioSetMaxPayloadLength+0x50>)
 801b258:	781a      	ldrb	r2, [r3, #0]
 801b25a:	4b05      	ldr	r3, [pc, #20]	; (801b270 <RadioSetMaxPayloadLength+0x54>)
 801b25c:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801b25e:	4805      	ldr	r0, [pc, #20]	; (801b274 <RadioSetMaxPayloadLength+0x58>)
 801b260:	f001 fd5c 	bl	801cd1c <SUBGRF_SetPacketParams>
}
 801b264:	bf00      	nop
 801b266:	3708      	adds	r7, #8
 801b268:	46bd      	mov	sp, r7
 801b26a:	bd80      	pop	{r7, pc}
 801b26c:	20000138 	.word	0x20000138
 801b270:	20001b88 	.word	0x20001b88
 801b274:	20001b96 	.word	0x20001b96

0801b278 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 801b278:	b580      	push	{r7, lr}
 801b27a:	b082      	sub	sp, #8
 801b27c:	af00      	add	r7, sp, #0
 801b27e:	4603      	mov	r3, r0
 801b280:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 801b282:	4a13      	ldr	r2, [pc, #76]	; (801b2d0 <RadioSetPublicNetwork+0x58>)
 801b284:	79fb      	ldrb	r3, [r7, #7]
 801b286:	7313      	strb	r3, [r2, #12]
 801b288:	4b11      	ldr	r3, [pc, #68]	; (801b2d0 <RadioSetPublicNetwork+0x58>)
 801b28a:	7b1a      	ldrb	r2, [r3, #12]
 801b28c:	4b10      	ldr	r3, [pc, #64]	; (801b2d0 <RadioSetPublicNetwork+0x58>)
 801b28e:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 801b290:	2001      	movs	r0, #1
 801b292:	f7ff f811 	bl	801a2b8 <RadioSetModem>
    if( enable == true )
 801b296:	79fb      	ldrb	r3, [r7, #7]
 801b298:	2b00      	cmp	r3, #0
 801b29a:	d00a      	beq.n	801b2b2 <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 801b29c:	2134      	movs	r1, #52	; 0x34
 801b29e:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 801b2a2:	f001 fe83 	bl	801cfac <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 801b2a6:	2144      	movs	r1, #68	; 0x44
 801b2a8:	f240 7041 	movw	r0, #1857	; 0x741
 801b2ac:	f001 fe7e 	bl	801cfac <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 801b2b0:	e009      	b.n	801b2c6 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 801b2b2:	2114      	movs	r1, #20
 801b2b4:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 801b2b8:	f001 fe78 	bl	801cfac <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 801b2bc:	2124      	movs	r1, #36	; 0x24
 801b2be:	f240 7041 	movw	r0, #1857	; 0x741
 801b2c2:	f001 fe73 	bl	801cfac <SUBGRF_WriteRegister>
}
 801b2c6:	bf00      	nop
 801b2c8:	3708      	adds	r7, #8
 801b2ca:	46bd      	mov	sp, r7
 801b2cc:	bd80      	pop	{r7, pc}
 801b2ce:	bf00      	nop
 801b2d0:	20001b88 	.word	0x20001b88

0801b2d4 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 801b2d4:	b580      	push	{r7, lr}
 801b2d6:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 801b2d8:	f001 ffb8 	bl	801d24c <SUBGRF_GetRadioWakeUpTime>
 801b2dc:	4603      	mov	r3, r0
 801b2de:	3303      	adds	r3, #3
}
 801b2e0:	4618      	mov	r0, r3
 801b2e2:	bd80      	pop	{r7, pc}

0801b2e4 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 801b2e4:	b580      	push	{r7, lr}
 801b2e6:	b082      	sub	sp, #8
 801b2e8:	af00      	add	r7, sp, #0
 801b2ea:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 801b2ec:	f000 f80e 	bl	801b30c <RadioOnTxTimeoutProcess>
}
 801b2f0:	bf00      	nop
 801b2f2:	3708      	adds	r7, #8
 801b2f4:	46bd      	mov	sp, r7
 801b2f6:	bd80      	pop	{r7, pc}

0801b2f8 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 801b2f8:	b580      	push	{r7, lr}
 801b2fa:	b082      	sub	sp, #8
 801b2fc:	af00      	add	r7, sp, #0
 801b2fe:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 801b300:	f000 f818 	bl	801b334 <RadioOnRxTimeoutProcess>
}
 801b304:	bf00      	nop
 801b306:	3708      	adds	r7, #8
 801b308:	46bd      	mov	sp, r7
 801b30a:	bd80      	pop	{r7, pc}

0801b30c <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 801b30c:	b580      	push	{r7, lr}
 801b30e:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801b310:	4b07      	ldr	r3, [pc, #28]	; (801b330 <RadioOnTxTimeoutProcess+0x24>)
 801b312:	681b      	ldr	r3, [r3, #0]
 801b314:	2b00      	cmp	r3, #0
 801b316:	d008      	beq.n	801b32a <RadioOnTxTimeoutProcess+0x1e>
 801b318:	4b05      	ldr	r3, [pc, #20]	; (801b330 <RadioOnTxTimeoutProcess+0x24>)
 801b31a:	681b      	ldr	r3, [r3, #0]
 801b31c:	685b      	ldr	r3, [r3, #4]
 801b31e:	2b00      	cmp	r3, #0
 801b320:	d003      	beq.n	801b32a <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 801b322:	4b03      	ldr	r3, [pc, #12]	; (801b330 <RadioOnTxTimeoutProcess+0x24>)
 801b324:	681b      	ldr	r3, [r3, #0]
 801b326:	685b      	ldr	r3, [r3, #4]
 801b328:	4798      	blx	r3
    }
}
 801b32a:	bf00      	nop
 801b32c:	bd80      	pop	{r7, pc}
 801b32e:	bf00      	nop
 801b330:	20001b84 	.word	0x20001b84

0801b334 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 801b334:	b580      	push	{r7, lr}
 801b336:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801b338:	4b07      	ldr	r3, [pc, #28]	; (801b358 <RadioOnRxTimeoutProcess+0x24>)
 801b33a:	681b      	ldr	r3, [r3, #0]
 801b33c:	2b00      	cmp	r3, #0
 801b33e:	d008      	beq.n	801b352 <RadioOnRxTimeoutProcess+0x1e>
 801b340:	4b05      	ldr	r3, [pc, #20]	; (801b358 <RadioOnRxTimeoutProcess+0x24>)
 801b342:	681b      	ldr	r3, [r3, #0]
 801b344:	68db      	ldr	r3, [r3, #12]
 801b346:	2b00      	cmp	r3, #0
 801b348:	d003      	beq.n	801b352 <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 801b34a:	4b03      	ldr	r3, [pc, #12]	; (801b358 <RadioOnRxTimeoutProcess+0x24>)
 801b34c:	681b      	ldr	r3, [r3, #0]
 801b34e:	68db      	ldr	r3, [r3, #12]
 801b350:	4798      	blx	r3
    }
}
 801b352:	bf00      	nop
 801b354:	bd80      	pop	{r7, pc}
 801b356:	bf00      	nop
 801b358:	20001b84 	.word	0x20001b84

0801b35c <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 801b35c:	b580      	push	{r7, lr}
 801b35e:	b082      	sub	sp, #8
 801b360:	af00      	add	r7, sp, #0
 801b362:	4603      	mov	r3, r0
 801b364:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 801b366:	4a05      	ldr	r2, [pc, #20]	; (801b37c <RadioOnDioIrq+0x20>)
 801b368:	88fb      	ldrh	r3, [r7, #6]
 801b36a:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 801b36e:	f000 f807 	bl	801b380 <RadioIrqProcess>
}
 801b372:	bf00      	nop
 801b374:	3708      	adds	r7, #8
 801b376:	46bd      	mov	sp, r7
 801b378:	bd80      	pop	{r7, pc}
 801b37a:	bf00      	nop
 801b37c:	20001b88 	.word	0x20001b88

0801b380 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 801b380:	b5b0      	push	{r4, r5, r7, lr}
 801b382:	b082      	sub	sp, #8
 801b384:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 801b386:	2300      	movs	r3, #0
 801b388:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 801b38a:	2300      	movs	r3, #0
 801b38c:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 801b38e:	4ba8      	ldr	r3, [pc, #672]	; (801b630 <RadioIrqProcess+0x2b0>)
 801b390:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 801b394:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b398:	f000 810d 	beq.w	801b5b6 <RadioIrqProcess+0x236>
 801b39c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b3a0:	f300 81e8 	bgt.w	801b774 <RadioIrqProcess+0x3f4>
 801b3a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801b3a8:	f000 80f1 	beq.w	801b58e <RadioIrqProcess+0x20e>
 801b3ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801b3b0:	f300 81e0 	bgt.w	801b774 <RadioIrqProcess+0x3f4>
 801b3b4:	2b80      	cmp	r3, #128	; 0x80
 801b3b6:	f000 80d6 	beq.w	801b566 <RadioIrqProcess+0x1e6>
 801b3ba:	2b80      	cmp	r3, #128	; 0x80
 801b3bc:	f300 81da 	bgt.w	801b774 <RadioIrqProcess+0x3f4>
 801b3c0:	2b20      	cmp	r3, #32
 801b3c2:	dc49      	bgt.n	801b458 <RadioIrqProcess+0xd8>
 801b3c4:	2b00      	cmp	r3, #0
 801b3c6:	f340 81d5 	ble.w	801b774 <RadioIrqProcess+0x3f4>
 801b3ca:	3b01      	subs	r3, #1
 801b3cc:	2b1f      	cmp	r3, #31
 801b3ce:	f200 81d1 	bhi.w	801b774 <RadioIrqProcess+0x3f4>
 801b3d2:	a201      	add	r2, pc, #4	; (adr r2, 801b3d8 <RadioIrqProcess+0x58>)
 801b3d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b3d8:	0801b461 	.word	0x0801b461
 801b3dc:	0801b49b 	.word	0x0801b49b
 801b3e0:	0801b775 	.word	0x0801b775
 801b3e4:	0801b651 	.word	0x0801b651
 801b3e8:	0801b775 	.word	0x0801b775
 801b3ec:	0801b775 	.word	0x0801b775
 801b3f0:	0801b775 	.word	0x0801b775
 801b3f4:	0801b6cd 	.word	0x0801b6cd
 801b3f8:	0801b775 	.word	0x0801b775
 801b3fc:	0801b775 	.word	0x0801b775
 801b400:	0801b775 	.word	0x0801b775
 801b404:	0801b775 	.word	0x0801b775
 801b408:	0801b775 	.word	0x0801b775
 801b40c:	0801b775 	.word	0x0801b775
 801b410:	0801b775 	.word	0x0801b775
 801b414:	0801b6e9 	.word	0x0801b6e9
 801b418:	0801b775 	.word	0x0801b775
 801b41c:	0801b775 	.word	0x0801b775
 801b420:	0801b775 	.word	0x0801b775
 801b424:	0801b775 	.word	0x0801b775
 801b428:	0801b775 	.word	0x0801b775
 801b42c:	0801b775 	.word	0x0801b775
 801b430:	0801b775 	.word	0x0801b775
 801b434:	0801b775 	.word	0x0801b775
 801b438:	0801b775 	.word	0x0801b775
 801b43c:	0801b775 	.word	0x0801b775
 801b440:	0801b775 	.word	0x0801b775
 801b444:	0801b775 	.word	0x0801b775
 801b448:	0801b775 	.word	0x0801b775
 801b44c:	0801b775 	.word	0x0801b775
 801b450:	0801b775 	.word	0x0801b775
 801b454:	0801b6f7 	.word	0x0801b6f7
 801b458:	2b40      	cmp	r3, #64	; 0x40
 801b45a:	f000 816d 	beq.w	801b738 <RadioIrqProcess+0x3b8>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 801b45e:	e189      	b.n	801b774 <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 801b460:	4874      	ldr	r0, [pc, #464]	; (801b634 <RadioIrqProcess+0x2b4>)
 801b462:	f002 ffbf 	bl	801e3e4 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 801b466:	2000      	movs	r0, #0
 801b468:	f001 f81c 	bl	801c4a4 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 801b46c:	f002 f892 	bl	801d594 <RFW_Is_LongPacketModeEnabled>
 801b470:	4603      	mov	r3, r0
 801b472:	2b01      	cmp	r3, #1
 801b474:	d101      	bne.n	801b47a <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 801b476:	f002 f8b6 	bl	801d5e6 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 801b47a:	4b6f      	ldr	r3, [pc, #444]	; (801b638 <RadioIrqProcess+0x2b8>)
 801b47c:	681b      	ldr	r3, [r3, #0]
 801b47e:	2b00      	cmp	r3, #0
 801b480:	f000 817a 	beq.w	801b778 <RadioIrqProcess+0x3f8>
 801b484:	4b6c      	ldr	r3, [pc, #432]	; (801b638 <RadioIrqProcess+0x2b8>)
 801b486:	681b      	ldr	r3, [r3, #0]
 801b488:	681b      	ldr	r3, [r3, #0]
 801b48a:	2b00      	cmp	r3, #0
 801b48c:	f000 8174 	beq.w	801b778 <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 801b490:	4b69      	ldr	r3, [pc, #420]	; (801b638 <RadioIrqProcess+0x2b8>)
 801b492:	681b      	ldr	r3, [r3, #0]
 801b494:	681b      	ldr	r3, [r3, #0]
 801b496:	4798      	blx	r3
        break;
 801b498:	e16e      	b.n	801b778 <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 801b49a:	4868      	ldr	r0, [pc, #416]	; (801b63c <RadioIrqProcess+0x2bc>)
 801b49c:	f002 ffa2 	bl	801e3e4 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801b4a0:	4b63      	ldr	r3, [pc, #396]	; (801b630 <RadioIrqProcess+0x2b0>)
 801b4a2:	785b      	ldrb	r3, [r3, #1]
 801b4a4:	f083 0301 	eor.w	r3, r3, #1
 801b4a8:	b2db      	uxtb	r3, r3
 801b4aa:	2b00      	cmp	r3, #0
 801b4ac:	d014      	beq.n	801b4d8 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 801b4ae:	2000      	movs	r0, #0
 801b4b0:	f000 fff8 	bl	801c4a4 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 801b4b4:	2100      	movs	r1, #0
 801b4b6:	f640 1002 	movw	r0, #2306	; 0x902
 801b4ba:	f001 fd77 	bl	801cfac <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 801b4be:	f640 1044 	movw	r0, #2372	; 0x944
 801b4c2:	f001 fd87 	bl	801cfd4 <SUBGRF_ReadRegister>
 801b4c6:	4603      	mov	r3, r0
 801b4c8:	f043 0302 	orr.w	r3, r3, #2
 801b4cc:	b2db      	uxtb	r3, r3
 801b4ce:	4619      	mov	r1, r3
 801b4d0:	f640 1044 	movw	r0, #2372	; 0x944
 801b4d4:	f001 fd6a 	bl	801cfac <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 801b4d8:	1dfb      	adds	r3, r7, #7
 801b4da:	22ff      	movs	r2, #255	; 0xff
 801b4dc:	4619      	mov	r1, r3
 801b4de:	4858      	ldr	r0, [pc, #352]	; (801b640 <RadioIrqProcess+0x2c0>)
 801b4e0:	f000 feb0 	bl	801c244 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 801b4e4:	4857      	ldr	r0, [pc, #348]	; (801b644 <RadioIrqProcess+0x2c4>)
 801b4e6:	f001 fd0f 	bl	801cf08 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 801b4ea:	4b53      	ldr	r3, [pc, #332]	; (801b638 <RadioIrqProcess+0x2b8>)
 801b4ec:	681b      	ldr	r3, [r3, #0]
 801b4ee:	2b00      	cmp	r3, #0
 801b4f0:	f000 8144 	beq.w	801b77c <RadioIrqProcess+0x3fc>
 801b4f4:	4b50      	ldr	r3, [pc, #320]	; (801b638 <RadioIrqProcess+0x2b8>)
 801b4f6:	681b      	ldr	r3, [r3, #0]
 801b4f8:	689b      	ldr	r3, [r3, #8]
 801b4fa:	2b00      	cmp	r3, #0
 801b4fc:	f000 813e 	beq.w	801b77c <RadioIrqProcess+0x3fc>
            switch( SubgRf.PacketStatus.packetType )
 801b500:	4b4b      	ldr	r3, [pc, #300]	; (801b630 <RadioIrqProcess+0x2b0>)
 801b502:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801b506:	2b01      	cmp	r3, #1
 801b508:	d10e      	bne.n	801b528 <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 801b50a:	4b4b      	ldr	r3, [pc, #300]	; (801b638 <RadioIrqProcess+0x2b8>)
 801b50c:	681b      	ldr	r3, [r3, #0]
 801b50e:	689c      	ldr	r4, [r3, #8]
 801b510:	79fb      	ldrb	r3, [r7, #7]
 801b512:	b299      	uxth	r1, r3
 801b514:	4b46      	ldr	r3, [pc, #280]	; (801b630 <RadioIrqProcess+0x2b0>)
 801b516:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 801b51a:	b21a      	sxth	r2, r3
 801b51c:	4b44      	ldr	r3, [pc, #272]	; (801b630 <RadioIrqProcess+0x2b0>)
 801b51e:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 801b522:	4847      	ldr	r0, [pc, #284]	; (801b640 <RadioIrqProcess+0x2c0>)
 801b524:	47a0      	blx	r4
                break;
 801b526:	e01d      	b.n	801b564 <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 801b528:	4b41      	ldr	r3, [pc, #260]	; (801b630 <RadioIrqProcess+0x2b0>)
 801b52a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b52c:	463a      	mov	r2, r7
 801b52e:	4611      	mov	r1, r2
 801b530:	4618      	mov	r0, r3
 801b532:	f001 ff7d 	bl	801d430 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 801b536:	4b40      	ldr	r3, [pc, #256]	; (801b638 <RadioIrqProcess+0x2b8>)
 801b538:	681b      	ldr	r3, [r3, #0]
 801b53a:	689c      	ldr	r4, [r3, #8]
 801b53c:	79fb      	ldrb	r3, [r7, #7]
 801b53e:	b299      	uxth	r1, r3
 801b540:	4b3b      	ldr	r3, [pc, #236]	; (801b630 <RadioIrqProcess+0x2b0>)
 801b542:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 801b546:	b218      	sxth	r0, r3
 801b548:	683b      	ldr	r3, [r7, #0]
 801b54a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 801b54e:	4a3e      	ldr	r2, [pc, #248]	; (801b648 <RadioIrqProcess+0x2c8>)
 801b550:	fb82 5203 	smull	r5, r2, r2, r3
 801b554:	1192      	asrs	r2, r2, #6
 801b556:	17db      	asrs	r3, r3, #31
 801b558:	1ad3      	subs	r3, r2, r3
 801b55a:	b25b      	sxtb	r3, r3
 801b55c:	4602      	mov	r2, r0
 801b55e:	4838      	ldr	r0, [pc, #224]	; (801b640 <RadioIrqProcess+0x2c0>)
 801b560:	47a0      	blx	r4
                break;
 801b562:	bf00      	nop
        break;
 801b564:	e10a      	b.n	801b77c <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 801b566:	2000      	movs	r0, #0
 801b568:	f000 ff9c 	bl	801c4a4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801b56c:	4b32      	ldr	r3, [pc, #200]	; (801b638 <RadioIrqProcess+0x2b8>)
 801b56e:	681b      	ldr	r3, [r3, #0]
 801b570:	2b00      	cmp	r3, #0
 801b572:	f000 8105 	beq.w	801b780 <RadioIrqProcess+0x400>
 801b576:	4b30      	ldr	r3, [pc, #192]	; (801b638 <RadioIrqProcess+0x2b8>)
 801b578:	681b      	ldr	r3, [r3, #0]
 801b57a:	699b      	ldr	r3, [r3, #24]
 801b57c:	2b00      	cmp	r3, #0
 801b57e:	f000 80ff 	beq.w	801b780 <RadioIrqProcess+0x400>
            RadioEvents->CadDone( false );
 801b582:	4b2d      	ldr	r3, [pc, #180]	; (801b638 <RadioIrqProcess+0x2b8>)
 801b584:	681b      	ldr	r3, [r3, #0]
 801b586:	699b      	ldr	r3, [r3, #24]
 801b588:	2000      	movs	r0, #0
 801b58a:	4798      	blx	r3
        break;
 801b58c:	e0f8      	b.n	801b780 <RadioIrqProcess+0x400>
        SUBGRF_SetStandby( STDBY_RC );
 801b58e:	2000      	movs	r0, #0
 801b590:	f000 ff88 	bl	801c4a4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801b594:	4b28      	ldr	r3, [pc, #160]	; (801b638 <RadioIrqProcess+0x2b8>)
 801b596:	681b      	ldr	r3, [r3, #0]
 801b598:	2b00      	cmp	r3, #0
 801b59a:	f000 80f3 	beq.w	801b784 <RadioIrqProcess+0x404>
 801b59e:	4b26      	ldr	r3, [pc, #152]	; (801b638 <RadioIrqProcess+0x2b8>)
 801b5a0:	681b      	ldr	r3, [r3, #0]
 801b5a2:	699b      	ldr	r3, [r3, #24]
 801b5a4:	2b00      	cmp	r3, #0
 801b5a6:	f000 80ed 	beq.w	801b784 <RadioIrqProcess+0x404>
            RadioEvents->CadDone( true );
 801b5aa:	4b23      	ldr	r3, [pc, #140]	; (801b638 <RadioIrqProcess+0x2b8>)
 801b5ac:	681b      	ldr	r3, [r3, #0]
 801b5ae:	699b      	ldr	r3, [r3, #24]
 801b5b0:	2001      	movs	r0, #1
 801b5b2:	4798      	blx	r3
        break;
 801b5b4:	e0e6      	b.n	801b784 <RadioIrqProcess+0x404>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 801b5b6:	4b25      	ldr	r3, [pc, #148]	; (801b64c <RadioIrqProcess+0x2cc>)
 801b5b8:	2201      	movs	r2, #1
 801b5ba:	2100      	movs	r1, #0
 801b5bc:	2002      	movs	r0, #2
 801b5be:	f003 f91b 	bl	801e7f8 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 801b5c2:	f000 fe25 	bl	801c210 <SUBGRF_GetOperatingMode>
 801b5c6:	4603      	mov	r3, r0
 801b5c8:	2b04      	cmp	r3, #4
 801b5ca:	d115      	bne.n	801b5f8 <RadioIrqProcess+0x278>
            TimerStop( &TxTimeoutTimer );
 801b5cc:	4819      	ldr	r0, [pc, #100]	; (801b634 <RadioIrqProcess+0x2b4>)
 801b5ce:	f002 ff09 	bl	801e3e4 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801b5d2:	2000      	movs	r0, #0
 801b5d4:	f000 ff66 	bl	801c4a4 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801b5d8:	4b17      	ldr	r3, [pc, #92]	; (801b638 <RadioIrqProcess+0x2b8>)
 801b5da:	681b      	ldr	r3, [r3, #0]
 801b5dc:	2b00      	cmp	r3, #0
 801b5de:	f000 80d3 	beq.w	801b788 <RadioIrqProcess+0x408>
 801b5e2:	4b15      	ldr	r3, [pc, #84]	; (801b638 <RadioIrqProcess+0x2b8>)
 801b5e4:	681b      	ldr	r3, [r3, #0]
 801b5e6:	685b      	ldr	r3, [r3, #4]
 801b5e8:	2b00      	cmp	r3, #0
 801b5ea:	f000 80cd 	beq.w	801b788 <RadioIrqProcess+0x408>
                RadioEvents->TxTimeout( );
 801b5ee:	4b12      	ldr	r3, [pc, #72]	; (801b638 <RadioIrqProcess+0x2b8>)
 801b5f0:	681b      	ldr	r3, [r3, #0]
 801b5f2:	685b      	ldr	r3, [r3, #4]
 801b5f4:	4798      	blx	r3
        break;
 801b5f6:	e0c7      	b.n	801b788 <RadioIrqProcess+0x408>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 801b5f8:	f000 fe0a 	bl	801c210 <SUBGRF_GetOperatingMode>
 801b5fc:	4603      	mov	r3, r0
 801b5fe:	2b05      	cmp	r3, #5
 801b600:	f040 80c2 	bne.w	801b788 <RadioIrqProcess+0x408>
            TimerStop( &RxTimeoutTimer );
 801b604:	480d      	ldr	r0, [pc, #52]	; (801b63c <RadioIrqProcess+0x2bc>)
 801b606:	f002 feed 	bl	801e3e4 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801b60a:	2000      	movs	r0, #0
 801b60c:	f000 ff4a 	bl	801c4a4 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801b610:	4b09      	ldr	r3, [pc, #36]	; (801b638 <RadioIrqProcess+0x2b8>)
 801b612:	681b      	ldr	r3, [r3, #0]
 801b614:	2b00      	cmp	r3, #0
 801b616:	f000 80b7 	beq.w	801b788 <RadioIrqProcess+0x408>
 801b61a:	4b07      	ldr	r3, [pc, #28]	; (801b638 <RadioIrqProcess+0x2b8>)
 801b61c:	681b      	ldr	r3, [r3, #0]
 801b61e:	68db      	ldr	r3, [r3, #12]
 801b620:	2b00      	cmp	r3, #0
 801b622:	f000 80b1 	beq.w	801b788 <RadioIrqProcess+0x408>
                RadioEvents->RxTimeout( );
 801b626:	4b04      	ldr	r3, [pc, #16]	; (801b638 <RadioIrqProcess+0x2b8>)
 801b628:	681b      	ldr	r3, [r3, #0]
 801b62a:	68db      	ldr	r3, [r3, #12]
 801b62c:	4798      	blx	r3
        break;
 801b62e:	e0ab      	b.n	801b788 <RadioIrqProcess+0x408>
 801b630:	20001b88 	.word	0x20001b88
 801b634:	20001be4 	.word	0x20001be4
 801b638:	20001b84 	.word	0x20001b84
 801b63c:	20001bfc 	.word	0x20001bfc
 801b640:	20001a84 	.word	0x20001a84
 801b644:	20001bac 	.word	0x20001bac
 801b648:	10624dd3 	.word	0x10624dd3
 801b64c:	0801f68c 	.word	0x0801f68c
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 801b650:	4b54      	ldr	r3, [pc, #336]	; (801b7a4 <RadioIrqProcess+0x424>)
 801b652:	2201      	movs	r2, #1
 801b654:	2100      	movs	r1, #0
 801b656:	2002      	movs	r0, #2
 801b658:	f003 f8ce 	bl	801e7f8 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 801b65c:	4b52      	ldr	r3, [pc, #328]	; (801b7a8 <RadioIrqProcess+0x428>)
 801b65e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b660:	2b00      	cmp	r3, #0
 801b662:	f000 8093 	beq.w	801b78c <RadioIrqProcess+0x40c>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 801b666:	4a51      	ldr	r2, [pc, #324]	; (801b7ac <RadioIrqProcess+0x42c>)
 801b668:	4b4f      	ldr	r3, [pc, #316]	; (801b7a8 <RadioIrqProcess+0x428>)
 801b66a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b66c:	0c1b      	lsrs	r3, r3, #16
 801b66e:	b2db      	uxtb	r3, r3
 801b670:	4619      	mov	r1, r3
 801b672:	f640 1003 	movw	r0, #2307	; 0x903
 801b676:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 801b678:	4a4c      	ldr	r2, [pc, #304]	; (801b7ac <RadioIrqProcess+0x42c>)
 801b67a:	4b4b      	ldr	r3, [pc, #300]	; (801b7a8 <RadioIrqProcess+0x428>)
 801b67c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b67e:	0a1b      	lsrs	r3, r3, #8
 801b680:	b2db      	uxtb	r3, r3
 801b682:	4619      	mov	r1, r3
 801b684:	f640 1004 	movw	r0, #2308	; 0x904
 801b688:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 801b68a:	4a48      	ldr	r2, [pc, #288]	; (801b7ac <RadioIrqProcess+0x42c>)
 801b68c:	4b46      	ldr	r3, [pc, #280]	; (801b7a8 <RadioIrqProcess+0x428>)
 801b68e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b690:	b2db      	uxtb	r3, r3
 801b692:	4619      	mov	r1, r3
 801b694:	f640 1005 	movw	r0, #2309	; 0x905
 801b698:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 801b69a:	4c44      	ldr	r4, [pc, #272]	; (801b7ac <RadioIrqProcess+0x42c>)
 801b69c:	4b44      	ldr	r3, [pc, #272]	; (801b7b0 <RadioIrqProcess+0x430>)
 801b69e:	f640 1002 	movw	r0, #2306	; 0x902
 801b6a2:	4798      	blx	r3
 801b6a4:	4603      	mov	r3, r0
 801b6a6:	f043 0301 	orr.w	r3, r3, #1
 801b6aa:	b2db      	uxtb	r3, r3
 801b6ac:	4619      	mov	r1, r3
 801b6ae:	f640 1002 	movw	r0, #2306	; 0x902
 801b6b2:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 801b6b4:	4b3c      	ldr	r3, [pc, #240]	; (801b7a8 <RadioIrqProcess+0x428>)
 801b6b6:	2200      	movs	r2, #0
 801b6b8:	659a      	str	r2, [r3, #88]	; 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801b6ba:	2300      	movs	r3, #0
 801b6bc:	2200      	movs	r2, #0
 801b6be:	f240 2162 	movw	r1, #610	; 0x262
 801b6c2:	f240 2062 	movw	r0, #610	; 0x262
 801b6c6:	f001 f8c1 	bl	801c84c <SUBGRF_SetDioIrqParams>
        break;
 801b6ca:	e05f      	b.n	801b78c <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 801b6cc:	4b39      	ldr	r3, [pc, #228]	; (801b7b4 <RadioIrqProcess+0x434>)
 801b6ce:	2201      	movs	r2, #1
 801b6d0:	2100      	movs	r1, #0
 801b6d2:	2002      	movs	r0, #2
 801b6d4:	f003 f890 	bl	801e7f8 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 801b6d8:	f001 ff55 	bl	801d586 <RFW_Is_Init>
 801b6dc:	4603      	mov	r3, r0
 801b6de:	2b01      	cmp	r3, #1
 801b6e0:	d156      	bne.n	801b790 <RadioIrqProcess+0x410>
            RFW_ReceivePayload( );
 801b6e2:	f001 ff86 	bl	801d5f2 <RFW_ReceivePayload>
        break;
 801b6e6:	e053      	b.n	801b790 <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 801b6e8:	4b33      	ldr	r3, [pc, #204]	; (801b7b8 <RadioIrqProcess+0x438>)
 801b6ea:	2201      	movs	r2, #1
 801b6ec:	2100      	movs	r1, #0
 801b6ee:	2002      	movs	r0, #2
 801b6f0:	f003 f882 	bl	801e7f8 <UTIL_ADV_TRACE_COND_FSend>
        break;
 801b6f4:	e051      	b.n	801b79a <RadioIrqProcess+0x41a>
        TimerStop( &RxTimeoutTimer );
 801b6f6:	4831      	ldr	r0, [pc, #196]	; (801b7bc <RadioIrqProcess+0x43c>)
 801b6f8:	f002 fe74 	bl	801e3e4 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801b6fc:	4b2a      	ldr	r3, [pc, #168]	; (801b7a8 <RadioIrqProcess+0x428>)
 801b6fe:	785b      	ldrb	r3, [r3, #1]
 801b700:	f083 0301 	eor.w	r3, r3, #1
 801b704:	b2db      	uxtb	r3, r3
 801b706:	2b00      	cmp	r3, #0
 801b708:	d002      	beq.n	801b710 <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 801b70a:	2000      	movs	r0, #0
 801b70c:	f000 feca 	bl	801c4a4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801b710:	4b2b      	ldr	r3, [pc, #172]	; (801b7c0 <RadioIrqProcess+0x440>)
 801b712:	681b      	ldr	r3, [r3, #0]
 801b714:	2b00      	cmp	r3, #0
 801b716:	d03d      	beq.n	801b794 <RadioIrqProcess+0x414>
 801b718:	4b29      	ldr	r3, [pc, #164]	; (801b7c0 <RadioIrqProcess+0x440>)
 801b71a:	681b      	ldr	r3, [r3, #0]
 801b71c:	68db      	ldr	r3, [r3, #12]
 801b71e:	2b00      	cmp	r3, #0
 801b720:	d038      	beq.n	801b794 <RadioIrqProcess+0x414>
            RadioEvents->RxTimeout( );
 801b722:	4b27      	ldr	r3, [pc, #156]	; (801b7c0 <RadioIrqProcess+0x440>)
 801b724:	681b      	ldr	r3, [r3, #0]
 801b726:	68db      	ldr	r3, [r3, #12]
 801b728:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 801b72a:	4b26      	ldr	r3, [pc, #152]	; (801b7c4 <RadioIrqProcess+0x444>)
 801b72c:	2201      	movs	r2, #1
 801b72e:	2100      	movs	r1, #0
 801b730:	2002      	movs	r0, #2
 801b732:	f003 f861 	bl	801e7f8 <UTIL_ADV_TRACE_COND_FSend>
        break;
 801b736:	e02d      	b.n	801b794 <RadioIrqProcess+0x414>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 801b738:	4b23      	ldr	r3, [pc, #140]	; (801b7c8 <RadioIrqProcess+0x448>)
 801b73a:	2201      	movs	r2, #1
 801b73c:	2100      	movs	r1, #0
 801b73e:	2002      	movs	r0, #2
 801b740:	f003 f85a 	bl	801e7f8 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 801b744:	4b18      	ldr	r3, [pc, #96]	; (801b7a8 <RadioIrqProcess+0x428>)
 801b746:	785b      	ldrb	r3, [r3, #1]
 801b748:	f083 0301 	eor.w	r3, r3, #1
 801b74c:	b2db      	uxtb	r3, r3
 801b74e:	2b00      	cmp	r3, #0
 801b750:	d002      	beq.n	801b758 <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 801b752:	2000      	movs	r0, #0
 801b754:	f000 fea6 	bl	801c4a4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 801b758:	4b19      	ldr	r3, [pc, #100]	; (801b7c0 <RadioIrqProcess+0x440>)
 801b75a:	681b      	ldr	r3, [r3, #0]
 801b75c:	2b00      	cmp	r3, #0
 801b75e:	d01b      	beq.n	801b798 <RadioIrqProcess+0x418>
 801b760:	4b17      	ldr	r3, [pc, #92]	; (801b7c0 <RadioIrqProcess+0x440>)
 801b762:	681b      	ldr	r3, [r3, #0]
 801b764:	691b      	ldr	r3, [r3, #16]
 801b766:	2b00      	cmp	r3, #0
 801b768:	d016      	beq.n	801b798 <RadioIrqProcess+0x418>
            RadioEvents->RxError( );
 801b76a:	4b15      	ldr	r3, [pc, #84]	; (801b7c0 <RadioIrqProcess+0x440>)
 801b76c:	681b      	ldr	r3, [r3, #0]
 801b76e:	691b      	ldr	r3, [r3, #16]
 801b770:	4798      	blx	r3
        break;
 801b772:	e011      	b.n	801b798 <RadioIrqProcess+0x418>
        break;
 801b774:	bf00      	nop
 801b776:	e010      	b.n	801b79a <RadioIrqProcess+0x41a>
        break;
 801b778:	bf00      	nop
 801b77a:	e00e      	b.n	801b79a <RadioIrqProcess+0x41a>
        break;
 801b77c:	bf00      	nop
 801b77e:	e00c      	b.n	801b79a <RadioIrqProcess+0x41a>
        break;
 801b780:	bf00      	nop
 801b782:	e00a      	b.n	801b79a <RadioIrqProcess+0x41a>
        break;
 801b784:	bf00      	nop
 801b786:	e008      	b.n	801b79a <RadioIrqProcess+0x41a>
        break;
 801b788:	bf00      	nop
 801b78a:	e006      	b.n	801b79a <RadioIrqProcess+0x41a>
        break;
 801b78c:	bf00      	nop
 801b78e:	e004      	b.n	801b79a <RadioIrqProcess+0x41a>
        break;
 801b790:	bf00      	nop
 801b792:	e002      	b.n	801b79a <RadioIrqProcess+0x41a>
        break;
 801b794:	bf00      	nop
 801b796:	e000      	b.n	801b79a <RadioIrqProcess+0x41a>
        break;
 801b798:	bf00      	nop
    }
}
 801b79a:	bf00      	nop
 801b79c:	3708      	adds	r7, #8
 801b79e:	46bd      	mov	sp, r7
 801b7a0:	bdb0      	pop	{r4, r5, r7, pc}
 801b7a2:	bf00      	nop
 801b7a4:	0801f6a0 	.word	0x0801f6a0
 801b7a8:	20001b88 	.word	0x20001b88
 801b7ac:	0801b18f 	.word	0x0801b18f
 801b7b0:	0801b1b3 	.word	0x0801b1b3
 801b7b4:	0801f6ac 	.word	0x0801f6ac
 801b7b8:	0801f6b8 	.word	0x0801f6b8
 801b7bc:	20001bfc 	.word	0x20001bfc
 801b7c0:	20001b84 	.word	0x20001b84
 801b7c4:	0801f6c4 	.word	0x0801f6c4
 801b7c8:	0801f6d0 	.word	0x0801f6d0

0801b7cc <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 801b7cc:	b580      	push	{r7, lr}
 801b7ce:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801b7d0:	4b09      	ldr	r3, [pc, #36]	; (801b7f8 <RadioTxPrbs+0x2c>)
 801b7d2:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801b7d6:	2101      	movs	r1, #1
 801b7d8:	4618      	mov	r0, r3
 801b7da:	f001 fcdb 	bl	801d194 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 801b7de:	4b07      	ldr	r3, [pc, #28]	; (801b7fc <RadioTxPrbs+0x30>)
 801b7e0:	212d      	movs	r1, #45	; 0x2d
 801b7e2:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801b7e6:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 801b7e8:	f000 ff1f 	bl	801c62a <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 801b7ec:	4804      	ldr	r0, [pc, #16]	; (801b800 <RadioTxPrbs+0x34>)
 801b7ee:	f000 fe75 	bl	801c4dc <SUBGRF_SetTx>
}
 801b7f2:	bf00      	nop
 801b7f4:	bd80      	pop	{r7, pc}
 801b7f6:	bf00      	nop
 801b7f8:	20001b88 	.word	0x20001b88
 801b7fc:	0801b18f 	.word	0x0801b18f
 801b800:	000fffff 	.word	0x000fffff

0801b804 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 801b804:	b580      	push	{r7, lr}
 801b806:	b084      	sub	sp, #16
 801b808:	af00      	add	r7, sp, #0
 801b80a:	4603      	mov	r3, r0
 801b80c:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 801b80e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b812:	4618      	mov	r0, r3
 801b814:	f001 fce6 	bl	801d1e4 <SUBGRF_SetRfTxPower>
 801b818:	4603      	mov	r3, r0
 801b81a:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801b81c:	210e      	movs	r1, #14
 801b81e:	f640 101f 	movw	r0, #2335	; 0x91f
 801b822:	f001 fbc3 	bl	801cfac <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 801b826:	7bfb      	ldrb	r3, [r7, #15]
 801b828:	2101      	movs	r1, #1
 801b82a:	4618      	mov	r0, r3
 801b82c:	f001 fcb2 	bl	801d194 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 801b830:	f000 fef2 	bl	801c618 <SUBGRF_SetTxContinuousWave>
}
 801b834:	bf00      	nop
 801b836:	3710      	adds	r7, #16
 801b838:	46bd      	mov	sp, r7
 801b83a:	bd80      	pop	{r7, pc}

0801b83c <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 801b83c:	b480      	push	{r7}
 801b83e:	b089      	sub	sp, #36	; 0x24
 801b840:	af00      	add	r7, sp, #0
 801b842:	60f8      	str	r0, [r7, #12]
 801b844:	60b9      	str	r1, [r7, #8]
 801b846:	4613      	mov	r3, r2
 801b848:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 801b84a:	2300      	movs	r3, #0
 801b84c:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 801b84e:	2300      	movs	r3, #0
 801b850:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 801b852:	2300      	movs	r3, #0
 801b854:	61bb      	str	r3, [r7, #24]
 801b856:	e011      	b.n	801b87c <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 801b858:	69bb      	ldr	r3, [r7, #24]
 801b85a:	68ba      	ldr	r2, [r7, #8]
 801b85c:	4413      	add	r3, r2
 801b85e:	781a      	ldrb	r2, [r3, #0]
 801b860:	69bb      	ldr	r3, [r7, #24]
 801b862:	68b9      	ldr	r1, [r7, #8]
 801b864:	440b      	add	r3, r1
 801b866:	43d2      	mvns	r2, r2
 801b868:	b2d2      	uxtb	r2, r2
 801b86a:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 801b86c:	69bb      	ldr	r3, [r7, #24]
 801b86e:	68fa      	ldr	r2, [r7, #12]
 801b870:	4413      	add	r3, r2
 801b872:	2200      	movs	r2, #0
 801b874:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 801b876:	69bb      	ldr	r3, [r7, #24]
 801b878:	3301      	adds	r3, #1
 801b87a:	61bb      	str	r3, [r7, #24]
 801b87c:	79fb      	ldrb	r3, [r7, #7]
 801b87e:	69ba      	ldr	r2, [r7, #24]
 801b880:	429a      	cmp	r2, r3
 801b882:	dbe9      	blt.n	801b858 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 801b884:	2300      	movs	r3, #0
 801b886:	61bb      	str	r3, [r7, #24]
 801b888:	e049      	b.n	801b91e <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 801b88a:	69bb      	ldr	r3, [r7, #24]
 801b88c:	425a      	negs	r2, r3
 801b88e:	f003 0307 	and.w	r3, r3, #7
 801b892:	f002 0207 	and.w	r2, r2, #7
 801b896:	bf58      	it	pl
 801b898:	4253      	negpl	r3, r2
 801b89a:	b2db      	uxtb	r3, r3
 801b89c:	f1c3 0307 	rsb	r3, r3, #7
 801b8a0:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 801b8a2:	69bb      	ldr	r3, [r7, #24]
 801b8a4:	2b00      	cmp	r3, #0
 801b8a6:	da00      	bge.n	801b8aa <payload_integration+0x6e>
 801b8a8:	3307      	adds	r3, #7
 801b8aa:	10db      	asrs	r3, r3, #3
 801b8ac:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 801b8ae:	69bb      	ldr	r3, [r7, #24]
 801b8b0:	3301      	adds	r3, #1
 801b8b2:	425a      	negs	r2, r3
 801b8b4:	f003 0307 	and.w	r3, r3, #7
 801b8b8:	f002 0207 	and.w	r2, r2, #7
 801b8bc:	bf58      	it	pl
 801b8be:	4253      	negpl	r3, r2
 801b8c0:	b2db      	uxtb	r3, r3
 801b8c2:	f1c3 0307 	rsb	r3, r3, #7
 801b8c6:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 801b8c8:	69bb      	ldr	r3, [r7, #24]
 801b8ca:	3301      	adds	r3, #1
 801b8cc:	2b00      	cmp	r3, #0
 801b8ce:	da00      	bge.n	801b8d2 <payload_integration+0x96>
 801b8d0:	3307      	adds	r3, #7
 801b8d2:	10db      	asrs	r3, r3, #3
 801b8d4:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 801b8d6:	7dbb      	ldrb	r3, [r7, #22]
 801b8d8:	68ba      	ldr	r2, [r7, #8]
 801b8da:	4413      	add	r3, r2
 801b8dc:	781b      	ldrb	r3, [r3, #0]
 801b8de:	461a      	mov	r2, r3
 801b8e0:	7dfb      	ldrb	r3, [r7, #23]
 801b8e2:	fa42 f303 	asr.w	r3, r2, r3
 801b8e6:	b2db      	uxtb	r3, r3
 801b8e8:	f003 0301 	and.w	r3, r3, #1
 801b8ec:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 801b8ee:	7ffa      	ldrb	r2, [r7, #31]
 801b8f0:	7cfb      	ldrb	r3, [r7, #19]
 801b8f2:	4053      	eors	r3, r2
 801b8f4:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 801b8f6:	7d3b      	ldrb	r3, [r7, #20]
 801b8f8:	68fa      	ldr	r2, [r7, #12]
 801b8fa:	4413      	add	r3, r2
 801b8fc:	781b      	ldrb	r3, [r3, #0]
 801b8fe:	b25a      	sxtb	r2, r3
 801b900:	7ff9      	ldrb	r1, [r7, #31]
 801b902:	7d7b      	ldrb	r3, [r7, #21]
 801b904:	fa01 f303 	lsl.w	r3, r1, r3
 801b908:	b25b      	sxtb	r3, r3
 801b90a:	4313      	orrs	r3, r2
 801b90c:	b259      	sxtb	r1, r3
 801b90e:	7d3b      	ldrb	r3, [r7, #20]
 801b910:	68fa      	ldr	r2, [r7, #12]
 801b912:	4413      	add	r3, r2
 801b914:	b2ca      	uxtb	r2, r1
 801b916:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 801b918:	69bb      	ldr	r3, [r7, #24]
 801b91a:	3301      	adds	r3, #1
 801b91c:	61bb      	str	r3, [r7, #24]
 801b91e:	79fb      	ldrb	r3, [r7, #7]
 801b920:	00db      	lsls	r3, r3, #3
 801b922:	69ba      	ldr	r2, [r7, #24]
 801b924:	429a      	cmp	r2, r3
 801b926:	dbb0      	blt.n	801b88a <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 801b928:	7ffb      	ldrb	r3, [r7, #31]
 801b92a:	01db      	lsls	r3, r3, #7
 801b92c:	b25a      	sxtb	r2, r3
 801b92e:	7ffb      	ldrb	r3, [r7, #31]
 801b930:	019b      	lsls	r3, r3, #6
 801b932:	b25b      	sxtb	r3, r3
 801b934:	4313      	orrs	r3, r2
 801b936:	b25b      	sxtb	r3, r3
 801b938:	7ffa      	ldrb	r2, [r7, #31]
 801b93a:	2a00      	cmp	r2, #0
 801b93c:	d101      	bne.n	801b942 <payload_integration+0x106>
 801b93e:	2220      	movs	r2, #32
 801b940:	e000      	b.n	801b944 <payload_integration+0x108>
 801b942:	2200      	movs	r2, #0
 801b944:	4313      	orrs	r3, r2
 801b946:	b259      	sxtb	r1, r3
 801b948:	79fb      	ldrb	r3, [r7, #7]
 801b94a:	68fa      	ldr	r2, [r7, #12]
 801b94c:	4413      	add	r3, r2
 801b94e:	b2ca      	uxtb	r2, r1
 801b950:	701a      	strb	r2, [r3, #0]
}
 801b952:	bf00      	nop
 801b954:	3724      	adds	r7, #36	; 0x24
 801b956:	46bd      	mov	sp, r7
 801b958:	bc80      	pop	{r7}
 801b95a:	4770      	bx	lr

0801b95c <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 801b95c:	b580      	push	{r7, lr}
 801b95e:	b08c      	sub	sp, #48	; 0x30
 801b960:	af00      	add	r7, sp, #0
 801b962:	60b9      	str	r1, [r7, #8]
 801b964:	607a      	str	r2, [r7, #4]
 801b966:	603b      	str	r3, [r7, #0]
 801b968:	4603      	mov	r3, r0
 801b96a:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 801b96c:	2300      	movs	r3, #0
 801b96e:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t syncword[8] = {0};
 801b970:	2300      	movs	r3, #0
 801b972:	623b      	str	r3, [r7, #32]
 801b974:	2300      	movs	r3, #0
 801b976:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801b978:	f001 fdff 	bl	801d57a <RFW_DeInit>

    if( rxContinuous != 0 )
 801b97c:	687b      	ldr	r3, [r7, #4]
 801b97e:	2b00      	cmp	r3, #0
 801b980:	d001      	beq.n	801b986 <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 801b982:	2300      	movs	r3, #0
 801b984:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 801b986:	687b      	ldr	r3, [r7, #4]
 801b988:	2b00      	cmp	r3, #0
 801b98a:	bf14      	ite	ne
 801b98c:	2301      	movne	r3, #1
 801b98e:	2300      	moveq	r3, #0
 801b990:	b2da      	uxtb	r2, r3
 801b992:	4ba3      	ldr	r3, [pc, #652]	; (801bc20 <RadioSetRxGenericConfig+0x2c4>)
 801b994:	705a      	strb	r2, [r3, #1]

    switch( modem )
 801b996:	7bfb      	ldrb	r3, [r7, #15]
 801b998:	2b00      	cmp	r3, #0
 801b99a:	d003      	beq.n	801b9a4 <RadioSetRxGenericConfig+0x48>
 801b99c:	2b01      	cmp	r3, #1
 801b99e:	f000 80dc 	beq.w	801bb5a <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 801b9a2:	e194      	b.n	801bcce <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 801b9a4:	68bb      	ldr	r3, [r7, #8]
 801b9a6:	689b      	ldr	r3, [r3, #8]
 801b9a8:	2b00      	cmp	r3, #0
 801b9aa:	d003      	beq.n	801b9b4 <RadioSetRxGenericConfig+0x58>
 801b9ac:	68bb      	ldr	r3, [r7, #8]
 801b9ae:	68db      	ldr	r3, [r3, #12]
 801b9b0:	2b00      	cmp	r3, #0
 801b9b2:	d102      	bne.n	801b9ba <RadioSetRxGenericConfig+0x5e>
            return -1;
 801b9b4:	f04f 33ff 	mov.w	r3, #4294967295
 801b9b8:	e18a      	b.n	801bcd0 <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 801b9ba:	68bb      	ldr	r3, [r7, #8]
 801b9bc:	7f9b      	ldrb	r3, [r3, #30]
 801b9be:	2b08      	cmp	r3, #8
 801b9c0:	d902      	bls.n	801b9c8 <RadioSetRxGenericConfig+0x6c>
            return -1;
 801b9c2:	f04f 33ff 	mov.w	r3, #4294967295
 801b9c6:	e183      	b.n	801bcd0 <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 801b9c8:	68bb      	ldr	r3, [r7, #8]
 801b9ca:	6919      	ldr	r1, [r3, #16]
 801b9cc:	68bb      	ldr	r3, [r7, #8]
 801b9ce:	7f9b      	ldrb	r3, [r3, #30]
 801b9d0:	b29a      	uxth	r2, r3
 801b9d2:	f107 0320 	add.w	r3, r7, #32
 801b9d6:	4618      	mov	r0, r3
 801b9d8:	f001 fec2 	bl	801d760 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801b9dc:	68bb      	ldr	r3, [r7, #8]
 801b9de:	681b      	ldr	r3, [r3, #0]
 801b9e0:	2b00      	cmp	r3, #0
 801b9e2:	bf14      	ite	ne
 801b9e4:	2301      	movne	r3, #1
 801b9e6:	2300      	moveq	r3, #0
 801b9e8:	b2db      	uxtb	r3, r3
 801b9ea:	4618      	mov	r0, r3
 801b9ec:	f000 fe26 	bl	801c63c <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801b9f0:	4b8b      	ldr	r3, [pc, #556]	; (801bc20 <RadioSetRxGenericConfig+0x2c4>)
 801b9f2:	2200      	movs	r2, #0
 801b9f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801b9f8:	68bb      	ldr	r3, [r7, #8]
 801b9fa:	689b      	ldr	r3, [r3, #8]
 801b9fc:	4a88      	ldr	r2, [pc, #544]	; (801bc20 <RadioSetRxGenericConfig+0x2c4>)
 801b9fe:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801ba00:	68bb      	ldr	r3, [r7, #8]
 801ba02:	f893 2020 	ldrb.w	r2, [r3, #32]
 801ba06:	4b86      	ldr	r3, [pc, #536]	; (801bc20 <RadioSetRxGenericConfig+0x2c4>)
 801ba08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 801ba0c:	68bb      	ldr	r3, [r7, #8]
 801ba0e:	685b      	ldr	r3, [r3, #4]
 801ba10:	4618      	mov	r0, r3
 801ba12:	f001 fce5 	bl	801d3e0 <SUBGRF_GetFskBandwidthRegValue>
 801ba16:	4603      	mov	r3, r0
 801ba18:	461a      	mov	r2, r3
 801ba1a:	4b81      	ldr	r3, [pc, #516]	; (801bc20 <RadioSetRxGenericConfig+0x2c4>)
 801ba1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801ba20:	4b7f      	ldr	r3, [pc, #508]	; (801bc20 <RadioSetRxGenericConfig+0x2c4>)
 801ba22:	2200      	movs	r2, #0
 801ba24:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 801ba26:	68bb      	ldr	r3, [r7, #8]
 801ba28:	68db      	ldr	r3, [r3, #12]
 801ba2a:	b29b      	uxth	r3, r3
 801ba2c:	00db      	lsls	r3, r3, #3
 801ba2e:	b29a      	uxth	r2, r3
 801ba30:	4b7b      	ldr	r3, [pc, #492]	; (801bc20 <RadioSetRxGenericConfig+0x2c4>)
 801ba32:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 801ba34:	68bb      	ldr	r3, [r7, #8]
 801ba36:	7fda      	ldrb	r2, [r3, #31]
 801ba38:	4b79      	ldr	r3, [pc, #484]	; (801bc20 <RadioSetRxGenericConfig+0x2c4>)
 801ba3a:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801ba3c:	68bb      	ldr	r3, [r7, #8]
 801ba3e:	7f9b      	ldrb	r3, [r3, #30]
 801ba40:	00db      	lsls	r3, r3, #3
 801ba42:	b2da      	uxtb	r2, r3
 801ba44:	4b76      	ldr	r3, [pc, #472]	; (801bc20 <RadioSetRxGenericConfig+0x2c4>)
 801ba46:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 801ba48:	68bb      	ldr	r3, [r7, #8]
 801ba4a:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 801ba4e:	4b74      	ldr	r3, [pc, #464]	; (801bc20 <RadioSetRxGenericConfig+0x2c4>)
 801ba50:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 801ba52:	68bb      	ldr	r3, [r7, #8]
 801ba54:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801ba58:	2b00      	cmp	r3, #0
 801ba5a:	d105      	bne.n	801ba68 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 801ba5c:	68bb      	ldr	r3, [r7, #8]
 801ba5e:	695b      	ldr	r3, [r3, #20]
 801ba60:	b2da      	uxtb	r2, r3
 801ba62:	4b6f      	ldr	r3, [pc, #444]	; (801bc20 <RadioSetRxGenericConfig+0x2c4>)
 801ba64:	759a      	strb	r2, [r3, #22]
 801ba66:	e00b      	b.n	801ba80 <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 801ba68:	68bb      	ldr	r3, [r7, #8]
 801ba6a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801ba6e:	2b02      	cmp	r3, #2
 801ba70:	d103      	bne.n	801ba7a <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801ba72:	4b6b      	ldr	r3, [pc, #428]	; (801bc20 <RadioSetRxGenericConfig+0x2c4>)
 801ba74:	22ff      	movs	r2, #255	; 0xff
 801ba76:	759a      	strb	r2, [r3, #22]
 801ba78:	e002      	b.n	801ba80 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801ba7a:	4b69      	ldr	r3, [pc, #420]	; (801bc20 <RadioSetRxGenericConfig+0x2c4>)
 801ba7c:	22ff      	movs	r2, #255	; 0xff
 801ba7e:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801ba80:	68bb      	ldr	r3, [r7, #8]
 801ba82:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801ba86:	2b02      	cmp	r3, #2
 801ba88:	d004      	beq.n	801ba94 <RadioSetRxGenericConfig+0x138>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801ba8a:	68bb      	ldr	r3, [r7, #8]
 801ba8c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801ba90:	2b02      	cmp	r3, #2
 801ba92:	d12d      	bne.n	801baf0 <RadioSetRxGenericConfig+0x194>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801ba94:	68bb      	ldr	r3, [r7, #8]
 801ba96:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801ba9a:	2bf1      	cmp	r3, #241	; 0xf1
 801ba9c:	d00c      	beq.n	801bab8 <RadioSetRxGenericConfig+0x15c>
 801ba9e:	68bb      	ldr	r3, [r7, #8]
 801baa0:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801baa4:	2bf2      	cmp	r3, #242	; 0xf2
 801baa6:	d007      	beq.n	801bab8 <RadioSetRxGenericConfig+0x15c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801baa8:	68bb      	ldr	r3, [r7, #8]
 801baaa:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801baae:	2b01      	cmp	r3, #1
 801bab0:	d002      	beq.n	801bab8 <RadioSetRxGenericConfig+0x15c>
                return -1;
 801bab2:	f04f 33ff 	mov.w	r3, #4294967295
 801bab6:	e10b      	b.n	801bcd0 <RadioSetRxGenericConfig+0x374>
            ConfigGeneric.rtx = CONFIG_RX;
 801bab8:	2300      	movs	r3, #0
 801baba:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 801babc:	68bb      	ldr	r3, [r7, #8]
 801babe:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 801bac0:	4b58      	ldr	r3, [pc, #352]	; (801bc24 <RadioSetRxGenericConfig+0x2c8>)
 801bac2:	6819      	ldr	r1, [r3, #0]
 801bac4:	f107 0314 	add.w	r3, r7, #20
 801bac8:	4a57      	ldr	r2, [pc, #348]	; (801bc28 <RadioSetRxGenericConfig+0x2cc>)
 801baca:	4618      	mov	r0, r3
 801bacc:	f001 fd48 	bl	801d560 <RFW_Init>
 801bad0:	4603      	mov	r3, r0
 801bad2:	2b00      	cmp	r3, #0
 801bad4:	d002      	beq.n	801badc <RadioSetRxGenericConfig+0x180>
                return -1;
 801bad6:	f04f 33ff 	mov.w	r3, #4294967295
 801bada:	e0f9      	b.n	801bcd0 <RadioSetRxGenericConfig+0x374>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801badc:	4b50      	ldr	r3, [pc, #320]	; (801bc20 <RadioSetRxGenericConfig+0x2c4>)
 801bade:	2200      	movs	r2, #0
 801bae0:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801bae2:	4b4f      	ldr	r3, [pc, #316]	; (801bc20 <RadioSetRxGenericConfig+0x2c4>)
 801bae4:	2201      	movs	r2, #1
 801bae6:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801bae8:	4b4d      	ldr	r3, [pc, #308]	; (801bc20 <RadioSetRxGenericConfig+0x2c4>)
 801baea:	2200      	movs	r2, #0
 801baec:	755a      	strb	r2, [r3, #21]
        {
 801baee:	e00e      	b.n	801bb0e <RadioSetRxGenericConfig+0x1b2>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801baf0:	68bb      	ldr	r3, [r7, #8]
 801baf2:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 801baf6:	4b4a      	ldr	r3, [pc, #296]	; (801bc20 <RadioSetRxGenericConfig+0x2c4>)
 801baf8:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801bafa:	68bb      	ldr	r3, [r7, #8]
 801bafc:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 801bb00:	4b47      	ldr	r3, [pc, #284]	; (801bc20 <RadioSetRxGenericConfig+0x2c4>)
 801bb02:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 801bb04:	68bb      	ldr	r3, [r7, #8]
 801bb06:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 801bb0a:	4b45      	ldr	r3, [pc, #276]	; (801bc20 <RadioSetRxGenericConfig+0x2c4>)
 801bb0c:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 801bb0e:	f7ff fa3c 	bl	801af8a <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801bb12:	2000      	movs	r0, #0
 801bb14:	f7fe fbd0 	bl	801a2b8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801bb18:	4844      	ldr	r0, [pc, #272]	; (801bc2c <RadioSetRxGenericConfig+0x2d0>)
 801bb1a:	f001 f82d 	bl	801cb78 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801bb1e:	4844      	ldr	r0, [pc, #272]	; (801bc30 <RadioSetRxGenericConfig+0x2d4>)
 801bb20:	f001 f8fc 	bl	801cd1c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801bb24:	f107 0320 	add.w	r3, r7, #32
 801bb28:	4618      	mov	r0, r3
 801bb2a:	f000 fbc0 	bl	801c2ae <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801bb2e:	68bb      	ldr	r3, [r7, #8]
 801bb30:	8b9b      	ldrh	r3, [r3, #28]
 801bb32:	4618      	mov	r0, r3
 801bb34:	f000 fc0a 	bl	801c34c <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 801bb38:	68bb      	ldr	r3, [r7, #8]
 801bb3a:	8b1b      	ldrh	r3, [r3, #24]
 801bb3c:	4618      	mov	r0, r3
 801bb3e:	f000 fbe5 	bl	801c30c <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 801bb42:	683b      	ldr	r3, [r7, #0]
 801bb44:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801bb48:	fb03 f202 	mul.w	r2, r3, r2
 801bb4c:	68bb      	ldr	r3, [r7, #8]
 801bb4e:	689b      	ldr	r3, [r3, #8]
 801bb50:	fbb2 f3f3 	udiv	r3, r2, r3
 801bb54:	4a32      	ldr	r2, [pc, #200]	; (801bc20 <RadioSetRxGenericConfig+0x2c4>)
 801bb56:	6093      	str	r3, [r2, #8]
        break;
 801bb58:	e0b9      	b.n	801bcce <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 801bb5a:	68bb      	ldr	r3, [r7, #8]
 801bb5c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 801bb5e:	2b00      	cmp	r3, #0
 801bb60:	d102      	bne.n	801bb68 <RadioSetRxGenericConfig+0x20c>
            return -1;
 801bb62:	f04f 33ff 	mov.w	r3, #4294967295
 801bb66:	e0b3      	b.n	801bcd0 <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 801bb68:	68bb      	ldr	r3, [r7, #8]
 801bb6a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 801bb6e:	2b01      	cmp	r3, #1
 801bb70:	d104      	bne.n	801bb7c <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 801bb72:	68bb      	ldr	r3, [r7, #8]
 801bb74:	695b      	ldr	r3, [r3, #20]
 801bb76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801bb7a:	e002      	b.n	801bb82 <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 801bb7c:	23ff      	movs	r3, #255	; 0xff
 801bb7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801bb82:	68bb      	ldr	r3, [r7, #8]
 801bb84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bb86:	2b00      	cmp	r3, #0
 801bb88:	bf14      	ite	ne
 801bb8a:	2301      	movne	r3, #1
 801bb8c:	2300      	moveq	r3, #0
 801bb8e:	b2db      	uxtb	r3, r3
 801bb90:	4618      	mov	r0, r3
 801bb92:	f000 fd53 	bl	801c63c <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801bb96:	683b      	ldr	r3, [r7, #0]
 801bb98:	b2db      	uxtb	r3, r3
 801bb9a:	4618      	mov	r0, r3
 801bb9c:	f000 fd5d 	bl	801c65a <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801bba0:	4b1f      	ldr	r3, [pc, #124]	; (801bc20 <RadioSetRxGenericConfig+0x2c4>)
 801bba2:	2201      	movs	r2, #1
 801bba4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801bba8:	68bb      	ldr	r3, [r7, #8]
 801bbaa:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 801bbae:	4b1c      	ldr	r3, [pc, #112]	; (801bc20 <RadioSetRxGenericConfig+0x2c4>)
 801bbb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801bbb4:	68bb      	ldr	r3, [r7, #8]
 801bbb6:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 801bbba:	4b19      	ldr	r3, [pc, #100]	; (801bc20 <RadioSetRxGenericConfig+0x2c4>)
 801bbbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801bbc0:	68bb      	ldr	r3, [r7, #8]
 801bbc2:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 801bbc6:	4b16      	ldr	r3, [pc, #88]	; (801bc20 <RadioSetRxGenericConfig+0x2c4>)
 801bbc8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801bbcc:	68bb      	ldr	r3, [r7, #8]
 801bbce:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801bbd2:	2b02      	cmp	r3, #2
 801bbd4:	d010      	beq.n	801bbf8 <RadioSetRxGenericConfig+0x29c>
 801bbd6:	2b02      	cmp	r3, #2
 801bbd8:	dc2c      	bgt.n	801bc34 <RadioSetRxGenericConfig+0x2d8>
 801bbda:	2b00      	cmp	r3, #0
 801bbdc:	d002      	beq.n	801bbe4 <RadioSetRxGenericConfig+0x288>
 801bbde:	2b01      	cmp	r3, #1
 801bbe0:	d005      	beq.n	801bbee <RadioSetRxGenericConfig+0x292>
            break;
 801bbe2:	e027      	b.n	801bc34 <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801bbe4:	4b0e      	ldr	r3, [pc, #56]	; (801bc20 <RadioSetRxGenericConfig+0x2c4>)
 801bbe6:	2200      	movs	r2, #0
 801bbe8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801bbec:	e023      	b.n	801bc36 <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801bbee:	4b0c      	ldr	r3, [pc, #48]	; (801bc20 <RadioSetRxGenericConfig+0x2c4>)
 801bbf0:	2201      	movs	r2, #1
 801bbf2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801bbf6:	e01e      	b.n	801bc36 <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801bbf8:	68bb      	ldr	r3, [r7, #8]
 801bbfa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801bbfe:	2b0b      	cmp	r3, #11
 801bc00:	d004      	beq.n	801bc0c <RadioSetRxGenericConfig+0x2b0>
 801bc02:	68bb      	ldr	r3, [r7, #8]
 801bc04:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801bc08:	2b0c      	cmp	r3, #12
 801bc0a:	d104      	bne.n	801bc16 <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801bc0c:	4b04      	ldr	r3, [pc, #16]	; (801bc20 <RadioSetRxGenericConfig+0x2c4>)
 801bc0e:	2201      	movs	r2, #1
 801bc10:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801bc14:	e00f      	b.n	801bc36 <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801bc16:	4b02      	ldr	r3, [pc, #8]	; (801bc20 <RadioSetRxGenericConfig+0x2c4>)
 801bc18:	2200      	movs	r2, #0
 801bc1a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801bc1e:	e00a      	b.n	801bc36 <RadioSetRxGenericConfig+0x2da>
 801bc20:	20001b88 	.word	0x20001b88
 801bc24:	20001b84 	.word	0x20001b84
 801bc28:	20001bfc 	.word	0x20001bfc
 801bc2c:	20001bc0 	.word	0x20001bc0
 801bc30:	20001b96 	.word	0x20001b96
            break;
 801bc34:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801bc36:	4b28      	ldr	r3, [pc, #160]	; (801bcd8 <RadioSetRxGenericConfig+0x37c>)
 801bc38:	2201      	movs	r2, #1
 801bc3a:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801bc3c:	68bb      	ldr	r3, [r7, #8]
 801bc3e:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 801bc40:	4b25      	ldr	r3, [pc, #148]	; (801bcd8 <RadioSetRxGenericConfig+0x37c>)
 801bc42:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801bc44:	68bb      	ldr	r3, [r7, #8]
 801bc46:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 801bc4a:	4b23      	ldr	r3, [pc, #140]	; (801bcd8 <RadioSetRxGenericConfig+0x37c>)
 801bc4c:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801bc4e:	4a22      	ldr	r2, [pc, #136]	; (801bcd8 <RadioSetRxGenericConfig+0x37c>)
 801bc50:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801bc54:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801bc56:	68bb      	ldr	r3, [r7, #8]
 801bc58:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 801bc5c:	4b1e      	ldr	r3, [pc, #120]	; (801bcd8 <RadioSetRxGenericConfig+0x37c>)
 801bc5e:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801bc62:	68bb      	ldr	r3, [r7, #8]
 801bc64:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 801bc68:	4b1b      	ldr	r3, [pc, #108]	; (801bcd8 <RadioSetRxGenericConfig+0x37c>)
 801bc6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 801bc6e:	f7ff f98c 	bl	801af8a <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801bc72:	2001      	movs	r0, #1
 801bc74:	f7fe fb20 	bl	801a2b8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801bc78:	4818      	ldr	r0, [pc, #96]	; (801bcdc <RadioSetRxGenericConfig+0x380>)
 801bc7a:	f000 ff7d 	bl	801cb78 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801bc7e:	4818      	ldr	r0, [pc, #96]	; (801bce0 <RadioSetRxGenericConfig+0x384>)
 801bc80:	f001 f84c 	bl	801cd1c <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801bc84:	4b14      	ldr	r3, [pc, #80]	; (801bcd8 <RadioSetRxGenericConfig+0x37c>)
 801bc86:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801bc8a:	2b01      	cmp	r3, #1
 801bc8c:	d10d      	bne.n	801bcaa <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 801bc8e:	f240 7036 	movw	r0, #1846	; 0x736
 801bc92:	f001 f99f 	bl	801cfd4 <SUBGRF_ReadRegister>
 801bc96:	4603      	mov	r3, r0
 801bc98:	f023 0304 	bic.w	r3, r3, #4
 801bc9c:	b2db      	uxtb	r3, r3
 801bc9e:	4619      	mov	r1, r3
 801bca0:	f240 7036 	movw	r0, #1846	; 0x736
 801bca4:	f001 f982 	bl	801cfac <SUBGRF_WriteRegister>
 801bca8:	e00c      	b.n	801bcc4 <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 801bcaa:	f240 7036 	movw	r0, #1846	; 0x736
 801bcae:	f001 f991 	bl	801cfd4 <SUBGRF_ReadRegister>
 801bcb2:	4603      	mov	r3, r0
 801bcb4:	f043 0304 	orr.w	r3, r3, #4
 801bcb8:	b2db      	uxtb	r3, r3
 801bcba:	4619      	mov	r1, r3
 801bcbc:	f240 7036 	movw	r0, #1846	; 0x736
 801bcc0:	f001 f974 	bl	801cfac <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 801bcc4:	4b04      	ldr	r3, [pc, #16]	; (801bcd8 <RadioSetRxGenericConfig+0x37c>)
 801bcc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bcca:	609a      	str	r2, [r3, #8]
        break;
 801bccc:	bf00      	nop
    }
    return status;
 801bcce:	6abb      	ldr	r3, [r7, #40]	; 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801bcd0:	4618      	mov	r0, r3
 801bcd2:	3730      	adds	r7, #48	; 0x30
 801bcd4:	46bd      	mov	sp, r7
 801bcd6:	bd80      	pop	{r7, pc}
 801bcd8:	20001b88 	.word	0x20001b88
 801bcdc:	20001bc0 	.word	0x20001bc0
 801bce0:	20001b96 	.word	0x20001b96

0801bce4 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 801bce4:	b580      	push	{r7, lr}
 801bce6:	b08e      	sub	sp, #56	; 0x38
 801bce8:	af00      	add	r7, sp, #0
 801bcea:	60b9      	str	r1, [r7, #8]
 801bcec:	607b      	str	r3, [r7, #4]
 801bcee:	4603      	mov	r3, r0
 801bcf0:	73fb      	strb	r3, [r7, #15]
 801bcf2:	4613      	mov	r3, r2
 801bcf4:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 801bcf6:	2300      	movs	r3, #0
 801bcf8:	62fb      	str	r3, [r7, #44]	; 0x2c
 801bcfa:	2300      	movs	r3, #0
 801bcfc:	633b      	str	r3, [r7, #48]	; 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801bcfe:	f001 fc3c 	bl	801d57a <RFW_DeInit>
    switch( modem )
 801bd02:	7bfb      	ldrb	r3, [r7, #15]
 801bd04:	2b03      	cmp	r3, #3
 801bd06:	f200 8204 	bhi.w	801c112 <RadioSetTxGenericConfig+0x42e>
 801bd0a:	a201      	add	r2, pc, #4	; (adr r2, 801bd10 <RadioSetTxGenericConfig+0x2c>)
 801bd0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bd10:	0801be95 	.word	0x0801be95
 801bd14:	0801bfdd 	.word	0x0801bfdd
 801bd18:	0801c0d5 	.word	0x0801c0d5
 801bd1c:	0801bd21 	.word	0x0801bd21
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 801bd20:	68bb      	ldr	r3, [r7, #8]
 801bd22:	7c9b      	ldrb	r3, [r3, #18]
 801bd24:	2b08      	cmp	r3, #8
 801bd26:	d902      	bls.n	801bd2e <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 801bd28:	f04f 33ff 	mov.w	r3, #4294967295
 801bd2c:	e206      	b.n	801c13c <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 801bd2e:	68bb      	ldr	r3, [r7, #8]
 801bd30:	6899      	ldr	r1, [r3, #8]
 801bd32:	68bb      	ldr	r3, [r7, #8]
 801bd34:	7c9b      	ldrb	r3, [r3, #18]
 801bd36:	b29a      	uxth	r2, r3
 801bd38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801bd3c:	4618      	mov	r0, r3
 801bd3e:	f001 fd0f 	bl	801d760 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 801bd42:	68bb      	ldr	r3, [r7, #8]
 801bd44:	681b      	ldr	r3, [r3, #0]
 801bd46:	2b00      	cmp	r3, #0
 801bd48:	d102      	bne.n	801bd50 <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 801bd4a:	f04f 33ff 	mov.w	r3, #4294967295
 801bd4e:	e1f5      	b.n	801c13c <RadioSetTxGenericConfig+0x458>
        }
        else if( config->msk.BitRate <= 10000 )
 801bd50:	68bb      	ldr	r3, [r7, #8]
 801bd52:	681b      	ldr	r3, [r3, #0]
 801bd54:	f242 7210 	movw	r2, #10000	; 0x2710
 801bd58:	4293      	cmp	r3, r2
 801bd5a:	d813      	bhi.n	801bd84 <RadioSetTxGenericConfig+0xa0>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 801bd5c:	2302      	movs	r3, #2
 801bd5e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 801bd62:	4b99      	ldr	r3, [pc, #612]	; (801bfc8 <RadioSetTxGenericConfig+0x2e4>)
 801bd64:	2203      	movs	r2, #3
 801bd66:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 801bd68:	4b97      	ldr	r3, [pc, #604]	; (801bfc8 <RadioSetTxGenericConfig+0x2e4>)
 801bd6a:	2203      	movs	r2, #3
 801bd6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801bd70:	68bb      	ldr	r3, [r7, #8]
 801bd72:	681b      	ldr	r3, [r3, #0]
 801bd74:	4a94      	ldr	r2, [pc, #592]	; (801bfc8 <RadioSetTxGenericConfig+0x2e4>)
 801bd76:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801bd78:	68bb      	ldr	r3, [r7, #8]
 801bd7a:	7cda      	ldrb	r2, [r3, #19]
 801bd7c:	4b92      	ldr	r3, [pc, #584]	; (801bfc8 <RadioSetTxGenericConfig+0x2e4>)
 801bd7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801bd82:	e017      	b.n	801bdb4 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
            radio_modem = MODEM_FSK;
 801bd84:	2300      	movs	r3, #0
 801bd86:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801bd8a:	4b8f      	ldr	r3, [pc, #572]	; (801bfc8 <RadioSetTxGenericConfig+0x2e4>)
 801bd8c:	2200      	movs	r2, #0
 801bd8e:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801bd90:	4b8d      	ldr	r3, [pc, #564]	; (801bfc8 <RadioSetTxGenericConfig+0x2e4>)
 801bd92:	2200      	movs	r2, #0
 801bd94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801bd98:	68bb      	ldr	r3, [r7, #8]
 801bd9a:	681b      	ldr	r3, [r3, #0]
 801bd9c:	4a8a      	ldr	r2, [pc, #552]	; (801bfc8 <RadioSetTxGenericConfig+0x2e4>)
 801bd9e:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801bda0:	68bb      	ldr	r3, [r7, #8]
 801bda2:	7cda      	ldrb	r2, [r3, #19]
 801bda4:	4b88      	ldr	r3, [pc, #544]	; (801bfc8 <RadioSetTxGenericConfig+0x2e4>)
 801bda6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 801bdaa:	68bb      	ldr	r3, [r7, #8]
 801bdac:	681b      	ldr	r3, [r3, #0]
 801bdae:	089b      	lsrs	r3, r3, #2
 801bdb0:	4a85      	ldr	r2, [pc, #532]	; (801bfc8 <RadioSetTxGenericConfig+0x2e4>)
 801bdb2:	6413      	str	r3, [r2, #64]	; 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 801bdb4:	68bb      	ldr	r3, [r7, #8]
 801bdb6:	685b      	ldr	r3, [r3, #4]
 801bdb8:	b29b      	uxth	r3, r3
 801bdba:	00db      	lsls	r3, r3, #3
 801bdbc:	b29a      	uxth	r2, r3
 801bdbe:	4b82      	ldr	r3, [pc, #520]	; (801bfc8 <RadioSetTxGenericConfig+0x2e4>)
 801bdc0:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801bdc2:	4b81      	ldr	r3, [pc, #516]	; (801bfc8 <RadioSetTxGenericConfig+0x2e4>)
 801bdc4:	2204      	movs	r2, #4
 801bdc6:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 801bdc8:	68bb      	ldr	r3, [r7, #8]
 801bdca:	7c9b      	ldrb	r3, [r3, #18]
 801bdcc:	00db      	lsls	r3, r3, #3
 801bdce:	b2da      	uxtb	r2, r3
 801bdd0:	4b7d      	ldr	r3, [pc, #500]	; (801bfc8 <RadioSetTxGenericConfig+0x2e4>)
 801bdd2:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801bdd4:	4b7c      	ldr	r3, [pc, #496]	; (801bfc8 <RadioSetTxGenericConfig+0x2e4>)
 801bdd6:	2200      	movs	r2, #0
 801bdd8:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801bdda:	68bb      	ldr	r3, [r7, #8]
 801bddc:	7d9b      	ldrb	r3, [r3, #22]
 801bdde:	2b02      	cmp	r3, #2
 801bde0:	d003      	beq.n	801bdea <RadioSetTxGenericConfig+0x106>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801bde2:	68bb      	ldr	r3, [r7, #8]
 801bde4:	7d1b      	ldrb	r3, [r3, #20]
 801bde6:	2b02      	cmp	r3, #2
 801bde8:	d12b      	bne.n	801be42 <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801bdea:	68bb      	ldr	r3, [r7, #8]
 801bdec:	7d5b      	ldrb	r3, [r3, #21]
 801bdee:	2bf1      	cmp	r3, #241	; 0xf1
 801bdf0:	d00a      	beq.n	801be08 <RadioSetTxGenericConfig+0x124>
 801bdf2:	68bb      	ldr	r3, [r7, #8]
 801bdf4:	7d5b      	ldrb	r3, [r3, #21]
 801bdf6:	2bf2      	cmp	r3, #242	; 0xf2
 801bdf8:	d006      	beq.n	801be08 <RadioSetTxGenericConfig+0x124>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801bdfa:	68bb      	ldr	r3, [r7, #8]
 801bdfc:	7d5b      	ldrb	r3, [r3, #21]
 801bdfe:	2b01      	cmp	r3, #1
 801be00:	d002      	beq.n	801be08 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 801be02:	f04f 33ff 	mov.w	r3, #4294967295
 801be06:	e199      	b.n	801c13c <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 801be08:	68bb      	ldr	r3, [r7, #8]
 801be0a:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 801be0c:	2301      	movs	r3, #1
 801be0e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801be12:	4b6e      	ldr	r3, [pc, #440]	; (801bfcc <RadioSetTxGenericConfig+0x2e8>)
 801be14:	6819      	ldr	r1, [r3, #0]
 801be16:	f107 0320 	add.w	r3, r7, #32
 801be1a:	4a6d      	ldr	r2, [pc, #436]	; (801bfd0 <RadioSetTxGenericConfig+0x2ec>)
 801be1c:	4618      	mov	r0, r3
 801be1e:	f001 fb9f 	bl	801d560 <RFW_Init>
 801be22:	4603      	mov	r3, r0
 801be24:	2b00      	cmp	r3, #0
 801be26:	d002      	beq.n	801be2e <RadioSetTxGenericConfig+0x14a>
            {
                return -1;
 801be28:	f04f 33ff 	mov.w	r3, #4294967295
 801be2c:	e186      	b.n	801c13c <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801be2e:	4b66      	ldr	r3, [pc, #408]	; (801bfc8 <RadioSetTxGenericConfig+0x2e4>)
 801be30:	2200      	movs	r2, #0
 801be32:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801be34:	4b64      	ldr	r3, [pc, #400]	; (801bfc8 <RadioSetTxGenericConfig+0x2e4>)
 801be36:	2201      	movs	r2, #1
 801be38:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801be3a:	4b63      	ldr	r3, [pc, #396]	; (801bfc8 <RadioSetTxGenericConfig+0x2e4>)
 801be3c:	2200      	movs	r2, #0
 801be3e:	755a      	strb	r2, [r3, #21]
        {
 801be40:	e00b      	b.n	801be5a <RadioSetTxGenericConfig+0x176>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 801be42:	68bb      	ldr	r3, [r7, #8]
 801be44:	7d5a      	ldrb	r2, [r3, #21]
 801be46:	4b60      	ldr	r3, [pc, #384]	; (801bfc8 <RadioSetTxGenericConfig+0x2e4>)
 801be48:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 801be4a:	68bb      	ldr	r3, [r7, #8]
 801be4c:	7d9a      	ldrb	r2, [r3, #22]
 801be4e:	4b5e      	ldr	r3, [pc, #376]	; (801bfc8 <RadioSetTxGenericConfig+0x2e4>)
 801be50:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 801be52:	68bb      	ldr	r3, [r7, #8]
 801be54:	7d1a      	ldrb	r2, [r3, #20]
 801be56:	4b5c      	ldr	r3, [pc, #368]	; (801bfc8 <RadioSetTxGenericConfig+0x2e4>)
 801be58:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801be5a:	f7ff f896 	bl	801af8a <RadioStandby>
        RadioSetModem( radio_modem );
 801be5e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801be62:	4618      	mov	r0, r3
 801be64:	f7fe fa28 	bl	801a2b8 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801be68:	485a      	ldr	r0, [pc, #360]	; (801bfd4 <RadioSetTxGenericConfig+0x2f0>)
 801be6a:	f000 fe85 	bl	801cb78 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801be6e:	485a      	ldr	r0, [pc, #360]	; (801bfd8 <RadioSetTxGenericConfig+0x2f4>)
 801be70:	f000 ff54 	bl	801cd1c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801be74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801be78:	4618      	mov	r0, r3
 801be7a:	f000 fa18 	bl	801c2ae <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 801be7e:	68bb      	ldr	r3, [r7, #8]
 801be80:	8a1b      	ldrh	r3, [r3, #16]
 801be82:	4618      	mov	r0, r3
 801be84:	f000 fa62 	bl	801c34c <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 801be88:	68bb      	ldr	r3, [r7, #8]
 801be8a:	899b      	ldrh	r3, [r3, #12]
 801be8c:	4618      	mov	r0, r3
 801be8e:	f000 fa3d 	bl	801c30c <SUBGRF_SetCrcPolynomial>
        break;
 801be92:	e13f      	b.n	801c114 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 801be94:	68bb      	ldr	r3, [r7, #8]
 801be96:	681b      	ldr	r3, [r3, #0]
 801be98:	2b00      	cmp	r3, #0
 801be9a:	d102      	bne.n	801bea2 <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 801be9c:	f04f 33ff 	mov.w	r3, #4294967295
 801bea0:	e14c      	b.n	801c13c <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 801bea2:	68bb      	ldr	r3, [r7, #8]
 801bea4:	7c9b      	ldrb	r3, [r3, #18]
 801bea6:	2b08      	cmp	r3, #8
 801bea8:	d902      	bls.n	801beb0 <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 801beaa:	f04f 33ff 	mov.w	r3, #4294967295
 801beae:	e145      	b.n	801c13c <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 801beb0:	68bb      	ldr	r3, [r7, #8]
 801beb2:	6899      	ldr	r1, [r3, #8]
 801beb4:	68bb      	ldr	r3, [r7, #8]
 801beb6:	7c9b      	ldrb	r3, [r3, #18]
 801beb8:	b29a      	uxth	r2, r3
 801beba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801bebe:	4618      	mov	r0, r3
 801bec0:	f001 fc4e 	bl	801d760 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801bec4:	4b40      	ldr	r3, [pc, #256]	; (801bfc8 <RadioSetTxGenericConfig+0x2e4>)
 801bec6:	2200      	movs	r2, #0
 801bec8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801becc:	68bb      	ldr	r3, [r7, #8]
 801bece:	681b      	ldr	r3, [r3, #0]
 801bed0:	4a3d      	ldr	r2, [pc, #244]	; (801bfc8 <RadioSetTxGenericConfig+0x2e4>)
 801bed2:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801bed4:	68bb      	ldr	r3, [r7, #8]
 801bed6:	7cda      	ldrb	r2, [r3, #19]
 801bed8:	4b3b      	ldr	r3, [pc, #236]	; (801bfc8 <RadioSetTxGenericConfig+0x2e4>)
 801beda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 801bede:	68bb      	ldr	r3, [r7, #8]
 801bee0:	699b      	ldr	r3, [r3, #24]
 801bee2:	4a39      	ldr	r2, [pc, #228]	; (801bfc8 <RadioSetTxGenericConfig+0x2e4>)
 801bee4:	6413      	str	r3, [r2, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801bee6:	4b38      	ldr	r3, [pc, #224]	; (801bfc8 <RadioSetTxGenericConfig+0x2e4>)
 801bee8:	2200      	movs	r2, #0
 801beea:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 801beec:	68bb      	ldr	r3, [r7, #8]
 801beee:	685b      	ldr	r3, [r3, #4]
 801bef0:	b29b      	uxth	r3, r3
 801bef2:	00db      	lsls	r3, r3, #3
 801bef4:	b29a      	uxth	r2, r3
 801bef6:	4b34      	ldr	r3, [pc, #208]	; (801bfc8 <RadioSetTxGenericConfig+0x2e4>)
 801bef8:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801befa:	4b33      	ldr	r3, [pc, #204]	; (801bfc8 <RadioSetTxGenericConfig+0x2e4>)
 801befc:	2204      	movs	r2, #4
 801befe:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801bf00:	68bb      	ldr	r3, [r7, #8]
 801bf02:	7c9b      	ldrb	r3, [r3, #18]
 801bf04:	00db      	lsls	r3, r3, #3
 801bf06:	b2da      	uxtb	r2, r3
 801bf08:	4b2f      	ldr	r3, [pc, #188]	; (801bfc8 <RadioSetTxGenericConfig+0x2e4>)
 801bf0a:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801bf0c:	4b2e      	ldr	r3, [pc, #184]	; (801bfc8 <RadioSetTxGenericConfig+0x2e4>)
 801bf0e:	2200      	movs	r2, #0
 801bf10:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801bf12:	68bb      	ldr	r3, [r7, #8]
 801bf14:	7d9b      	ldrb	r3, [r3, #22]
 801bf16:	2b02      	cmp	r3, #2
 801bf18:	d003      	beq.n	801bf22 <RadioSetTxGenericConfig+0x23e>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801bf1a:	68bb      	ldr	r3, [r7, #8]
 801bf1c:	7d1b      	ldrb	r3, [r3, #20]
 801bf1e:	2b02      	cmp	r3, #2
 801bf20:	d12a      	bne.n	801bf78 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801bf22:	68bb      	ldr	r3, [r7, #8]
 801bf24:	7d5b      	ldrb	r3, [r3, #21]
 801bf26:	2bf1      	cmp	r3, #241	; 0xf1
 801bf28:	d00a      	beq.n	801bf40 <RadioSetTxGenericConfig+0x25c>
 801bf2a:	68bb      	ldr	r3, [r7, #8]
 801bf2c:	7d5b      	ldrb	r3, [r3, #21]
 801bf2e:	2bf2      	cmp	r3, #242	; 0xf2
 801bf30:	d006      	beq.n	801bf40 <RadioSetTxGenericConfig+0x25c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801bf32:	68bb      	ldr	r3, [r7, #8]
 801bf34:	7d5b      	ldrb	r3, [r3, #21]
 801bf36:	2b01      	cmp	r3, #1
 801bf38:	d002      	beq.n	801bf40 <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 801bf3a:	f04f 33ff 	mov.w	r3, #4294967295
 801bf3e:	e0fd      	b.n	801c13c <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 801bf40:	2301      	movs	r3, #1
 801bf42:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 801bf44:	68bb      	ldr	r3, [r7, #8]
 801bf46:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801bf48:	4b20      	ldr	r3, [pc, #128]	; (801bfcc <RadioSetTxGenericConfig+0x2e8>)
 801bf4a:	6819      	ldr	r1, [r3, #0]
 801bf4c:	f107 0314 	add.w	r3, r7, #20
 801bf50:	4a1f      	ldr	r2, [pc, #124]	; (801bfd0 <RadioSetTxGenericConfig+0x2ec>)
 801bf52:	4618      	mov	r0, r3
 801bf54:	f001 fb04 	bl	801d560 <RFW_Init>
 801bf58:	4603      	mov	r3, r0
 801bf5a:	2b00      	cmp	r3, #0
 801bf5c:	d002      	beq.n	801bf64 <RadioSetTxGenericConfig+0x280>
            {
                return -1;
 801bf5e:	f04f 33ff 	mov.w	r3, #4294967295
 801bf62:	e0eb      	b.n	801c13c <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801bf64:	4b18      	ldr	r3, [pc, #96]	; (801bfc8 <RadioSetTxGenericConfig+0x2e4>)
 801bf66:	2200      	movs	r2, #0
 801bf68:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801bf6a:	4b17      	ldr	r3, [pc, #92]	; (801bfc8 <RadioSetTxGenericConfig+0x2e4>)
 801bf6c:	2201      	movs	r2, #1
 801bf6e:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801bf70:	4b15      	ldr	r3, [pc, #84]	; (801bfc8 <RadioSetTxGenericConfig+0x2e4>)
 801bf72:	2200      	movs	r2, #0
 801bf74:	755a      	strb	r2, [r3, #21]
        {
 801bf76:	e00b      	b.n	801bf90 <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801bf78:	68bb      	ldr	r3, [r7, #8]
 801bf7a:	7d5a      	ldrb	r2, [r3, #21]
 801bf7c:	4b12      	ldr	r3, [pc, #72]	; (801bfc8 <RadioSetTxGenericConfig+0x2e4>)
 801bf7e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801bf80:	68bb      	ldr	r3, [r7, #8]
 801bf82:	7d9a      	ldrb	r2, [r3, #22]
 801bf84:	4b10      	ldr	r3, [pc, #64]	; (801bfc8 <RadioSetTxGenericConfig+0x2e4>)
 801bf86:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 801bf88:	68bb      	ldr	r3, [r7, #8]
 801bf8a:	7d1a      	ldrb	r2, [r3, #20]
 801bf8c:	4b0e      	ldr	r3, [pc, #56]	; (801bfc8 <RadioSetTxGenericConfig+0x2e4>)
 801bf8e:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801bf90:	f7fe fffb 	bl	801af8a <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801bf94:	2000      	movs	r0, #0
 801bf96:	f7fe f98f 	bl	801a2b8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801bf9a:	480e      	ldr	r0, [pc, #56]	; (801bfd4 <RadioSetTxGenericConfig+0x2f0>)
 801bf9c:	f000 fdec 	bl	801cb78 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801bfa0:	480d      	ldr	r0, [pc, #52]	; (801bfd8 <RadioSetTxGenericConfig+0x2f4>)
 801bfa2:	f000 febb 	bl	801cd1c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801bfa6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801bfaa:	4618      	mov	r0, r3
 801bfac:	f000 f97f 	bl	801c2ae <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801bfb0:	68bb      	ldr	r3, [r7, #8]
 801bfb2:	8a1b      	ldrh	r3, [r3, #16]
 801bfb4:	4618      	mov	r0, r3
 801bfb6:	f000 f9c9 	bl	801c34c <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 801bfba:	68bb      	ldr	r3, [r7, #8]
 801bfbc:	899b      	ldrh	r3, [r3, #12]
 801bfbe:	4618      	mov	r0, r3
 801bfc0:	f000 f9a4 	bl	801c30c <SUBGRF_SetCrcPolynomial>
        break;
 801bfc4:	e0a6      	b.n	801c114 <RadioSetTxGenericConfig+0x430>
 801bfc6:	bf00      	nop
 801bfc8:	20001b88 	.word	0x20001b88
 801bfcc:	20001b84 	.word	0x20001b84
 801bfd0:	20001be4 	.word	0x20001be4
 801bfd4:	20001bc0 	.word	0x20001bc0
 801bfd8:	20001b96 	.word	0x20001b96
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801bfdc:	4b59      	ldr	r3, [pc, #356]	; (801c144 <RadioSetTxGenericConfig+0x460>)
 801bfde:	2201      	movs	r2, #1
 801bfe0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801bfe4:	68bb      	ldr	r3, [r7, #8]
 801bfe6:	781a      	ldrb	r2, [r3, #0]
 801bfe8:	4b56      	ldr	r3, [pc, #344]	; (801c144 <RadioSetTxGenericConfig+0x460>)
 801bfea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801bfee:	68bb      	ldr	r3, [r7, #8]
 801bff0:	785a      	ldrb	r2, [r3, #1]
 801bff2:	4b54      	ldr	r3, [pc, #336]	; (801c144 <RadioSetTxGenericConfig+0x460>)
 801bff4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801bff8:	68bb      	ldr	r3, [r7, #8]
 801bffa:	789a      	ldrb	r2, [r3, #2]
 801bffc:	4b51      	ldr	r3, [pc, #324]	; (801c144 <RadioSetTxGenericConfig+0x460>)
 801bffe:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801c002:	68bb      	ldr	r3, [r7, #8]
 801c004:	78db      	ldrb	r3, [r3, #3]
 801c006:	2b02      	cmp	r3, #2
 801c008:	d010      	beq.n	801c02c <RadioSetTxGenericConfig+0x348>
 801c00a:	2b02      	cmp	r3, #2
 801c00c:	dc20      	bgt.n	801c050 <RadioSetTxGenericConfig+0x36c>
 801c00e:	2b00      	cmp	r3, #0
 801c010:	d002      	beq.n	801c018 <RadioSetTxGenericConfig+0x334>
 801c012:	2b01      	cmp	r3, #1
 801c014:	d005      	beq.n	801c022 <RadioSetTxGenericConfig+0x33e>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 801c016:	e01b      	b.n	801c050 <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801c018:	4b4a      	ldr	r3, [pc, #296]	; (801c144 <RadioSetTxGenericConfig+0x460>)
 801c01a:	2200      	movs	r2, #0
 801c01c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801c020:	e017      	b.n	801c052 <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801c022:	4b48      	ldr	r3, [pc, #288]	; (801c144 <RadioSetTxGenericConfig+0x460>)
 801c024:	2201      	movs	r2, #1
 801c026:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801c02a:	e012      	b.n	801c052 <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801c02c:	68bb      	ldr	r3, [r7, #8]
 801c02e:	781b      	ldrb	r3, [r3, #0]
 801c030:	2b0b      	cmp	r3, #11
 801c032:	d003      	beq.n	801c03c <RadioSetTxGenericConfig+0x358>
 801c034:	68bb      	ldr	r3, [r7, #8]
 801c036:	781b      	ldrb	r3, [r3, #0]
 801c038:	2b0c      	cmp	r3, #12
 801c03a:	d104      	bne.n	801c046 <RadioSetTxGenericConfig+0x362>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801c03c:	4b41      	ldr	r3, [pc, #260]	; (801c144 <RadioSetTxGenericConfig+0x460>)
 801c03e:	2201      	movs	r2, #1
 801c040:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801c044:	e005      	b.n	801c052 <RadioSetTxGenericConfig+0x36e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801c046:	4b3f      	ldr	r3, [pc, #252]	; (801c144 <RadioSetTxGenericConfig+0x460>)
 801c048:	2200      	movs	r2, #0
 801c04a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801c04e:	e000      	b.n	801c052 <RadioSetTxGenericConfig+0x36e>
            break;
 801c050:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801c052:	4b3c      	ldr	r3, [pc, #240]	; (801c144 <RadioSetTxGenericConfig+0x460>)
 801c054:	2201      	movs	r2, #1
 801c056:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801c058:	68bb      	ldr	r3, [r7, #8]
 801c05a:	889a      	ldrh	r2, [r3, #4]
 801c05c:	4b39      	ldr	r3, [pc, #228]	; (801c144 <RadioSetTxGenericConfig+0x460>)
 801c05e:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801c060:	68bb      	ldr	r3, [r7, #8]
 801c062:	799a      	ldrb	r2, [r3, #6]
 801c064:	4b37      	ldr	r3, [pc, #220]	; (801c144 <RadioSetTxGenericConfig+0x460>)
 801c066:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801c068:	68bb      	ldr	r3, [r7, #8]
 801c06a:	79da      	ldrb	r2, [r3, #7]
 801c06c:	4b35      	ldr	r3, [pc, #212]	; (801c144 <RadioSetTxGenericConfig+0x460>)
 801c06e:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801c072:	68bb      	ldr	r3, [r7, #8]
 801c074:	7a1a      	ldrb	r2, [r3, #8]
 801c076:	4b33      	ldr	r3, [pc, #204]	; (801c144 <RadioSetTxGenericConfig+0x460>)
 801c078:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        RadioStandby( );
 801c07c:	f7fe ff85 	bl	801af8a <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801c080:	2001      	movs	r0, #1
 801c082:	f7fe f919 	bl	801a2b8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801c086:	4830      	ldr	r0, [pc, #192]	; (801c148 <RadioSetTxGenericConfig+0x464>)
 801c088:	f000 fd76 	bl	801cb78 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c08c:	482f      	ldr	r0, [pc, #188]	; (801c14c <RadioSetTxGenericConfig+0x468>)
 801c08e:	f000 fe45 	bl	801cd1c <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 801c092:	4b2c      	ldr	r3, [pc, #176]	; (801c144 <RadioSetTxGenericConfig+0x460>)
 801c094:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801c098:	2b06      	cmp	r3, #6
 801c09a:	d10d      	bne.n	801c0b8 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801c09c:	f640 0089 	movw	r0, #2185	; 0x889
 801c0a0:	f000 ff98 	bl	801cfd4 <SUBGRF_ReadRegister>
 801c0a4:	4603      	mov	r3, r0
 801c0a6:	f023 0304 	bic.w	r3, r3, #4
 801c0aa:	b2db      	uxtb	r3, r3
 801c0ac:	4619      	mov	r1, r3
 801c0ae:	f640 0089 	movw	r0, #2185	; 0x889
 801c0b2:	f000 ff7b 	bl	801cfac <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 801c0b6:	e02d      	b.n	801c114 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 801c0b8:	f640 0089 	movw	r0, #2185	; 0x889
 801c0bc:	f000 ff8a 	bl	801cfd4 <SUBGRF_ReadRegister>
 801c0c0:	4603      	mov	r3, r0
 801c0c2:	f043 0304 	orr.w	r3, r3, #4
 801c0c6:	b2db      	uxtb	r3, r3
 801c0c8:	4619      	mov	r1, r3
 801c0ca:	f640 0089 	movw	r0, #2185	; 0x889
 801c0ce:	f000 ff6d 	bl	801cfac <SUBGRF_WriteRegister>
        break;
 801c0d2:	e01f      	b.n	801c114 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 801c0d4:	68bb      	ldr	r3, [r7, #8]
 801c0d6:	681b      	ldr	r3, [r3, #0]
 801c0d8:	2b00      	cmp	r3, #0
 801c0da:	d004      	beq.n	801c0e6 <RadioSetTxGenericConfig+0x402>
 801c0dc:	68bb      	ldr	r3, [r7, #8]
 801c0de:	681b      	ldr	r3, [r3, #0]
 801c0e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801c0e4:	d902      	bls.n	801c0ec <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 801c0e6:	f04f 33ff 	mov.w	r3, #4294967295
 801c0ea:	e027      	b.n	801c13c <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 801c0ec:	2003      	movs	r0, #3
 801c0ee:	f7fe f8e3 	bl	801a2b8 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801c0f2:	4b14      	ldr	r3, [pc, #80]	; (801c144 <RadioSetTxGenericConfig+0x460>)
 801c0f4:	2202      	movs	r2, #2
 801c0f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 801c0fa:	68bb      	ldr	r3, [r7, #8]
 801c0fc:	681b      	ldr	r3, [r3, #0]
 801c0fe:	4a11      	ldr	r2, [pc, #68]	; (801c144 <RadioSetTxGenericConfig+0x460>)
 801c100:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801c102:	4b10      	ldr	r3, [pc, #64]	; (801c144 <RadioSetTxGenericConfig+0x460>)
 801c104:	2216      	movs	r2, #22
 801c106:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801c10a:	480f      	ldr	r0, [pc, #60]	; (801c148 <RadioSetTxGenericConfig+0x464>)
 801c10c:	f000 fd34 	bl	801cb78 <SUBGRF_SetModulationParams>
        break;
 801c110:	e000      	b.n	801c114 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 801c112:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801c114:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801c118:	4618      	mov	r0, r3
 801c11a:	f001 f863 	bl	801d1e4 <SUBGRF_SetRfTxPower>
 801c11e:	4603      	mov	r3, r0
 801c120:	461a      	mov	r2, r3
 801c122:	4b08      	ldr	r3, [pc, #32]	; (801c144 <RadioSetTxGenericConfig+0x460>)
 801c124:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 801c128:	4b06      	ldr	r3, [pc, #24]	; (801c144 <RadioSetTxGenericConfig+0x460>)
 801c12a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801c12e:	4618      	mov	r0, r3
 801c130:	f001 fa37 	bl	801d5a2 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801c134:	4a03      	ldr	r2, [pc, #12]	; (801c144 <RadioSetTxGenericConfig+0x460>)
 801c136:	687b      	ldr	r3, [r7, #4]
 801c138:	6053      	str	r3, [r2, #4]
    return 0;
 801c13a:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801c13c:	4618      	mov	r0, r3
 801c13e:	3738      	adds	r7, #56	; 0x38
 801c140:	46bd      	mov	sp, r7
 801c142:	bd80      	pop	{r7, pc}
 801c144:	20001b88 	.word	0x20001b88
 801c148:	20001bc0 	.word	0x20001bc0
 801c14c:	20001b96 	.word	0x20001b96

0801c150 <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 801c150:	b480      	push	{r7}
 801c152:	b085      	sub	sp, #20
 801c154:	af00      	add	r7, sp, #0
 801c156:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 801c158:	2301      	movs	r3, #1
 801c15a:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 801c15c:	7bfb      	ldrb	r3, [r7, #15]
}
 801c15e:	4618      	mov	r0, r3
 801c160:	3714      	adds	r7, #20
 801c162:	46bd      	mov	sp, r7
 801c164:	bc80      	pop	{r7}
 801c166:	4770      	bx	lr

0801c168 <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 801c168:	b480      	push	{r7}
 801c16a:	b083      	sub	sp, #12
 801c16c:	af00      	add	r7, sp, #0
 801c16e:	6078      	str	r0, [r7, #4]
 801c170:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 801c172:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 801c174:	4618      	mov	r0, r3
 801c176:	370c      	adds	r7, #12
 801c178:	46bd      	mov	sp, r7
 801c17a:	bc80      	pop	{r7}
 801c17c:	4770      	bx	lr
	...

0801c180 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 801c180:	b580      	push	{r7, lr}
 801c182:	b084      	sub	sp, #16
 801c184:	af00      	add	r7, sp, #0
 801c186:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 801c188:	687b      	ldr	r3, [r7, #4]
 801c18a:	2b00      	cmp	r3, #0
 801c18c:	d002      	beq.n	801c194 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 801c18e:	4a1d      	ldr	r2, [pc, #116]	; (801c204 <SUBGRF_Init+0x84>)
 801c190:	687b      	ldr	r3, [r7, #4]
 801c192:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 801c194:	f7e6 f9ee 	bl	8002574 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801c198:	2002      	movs	r0, #2
 801c19a:	f001 f8ff 	bl	801d39c <Radio_SMPS_Set>

    ImageCalibrated = false;
 801c19e:	4b1a      	ldr	r3, [pc, #104]	; (801c208 <SUBGRF_Init+0x88>)
 801c1a0:	2200      	movs	r2, #0
 801c1a2:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 801c1a4:	2000      	movs	r0, #0
 801c1a6:	f000 f97d 	bl	801c4a4 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 801c1aa:	f7ef ff73 	bl	800c094 <RBI_IsTCXO>
 801c1ae:	4603      	mov	r3, r0
 801c1b0:	2b01      	cmp	r3, #1
 801c1b2:	d10e      	bne.n	801c1d2 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 801c1b4:	2140      	movs	r1, #64	; 0x40
 801c1b6:	2001      	movs	r0, #1
 801c1b8:	f000 fb82 	bl	801c8c0 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 801c1bc:	2100      	movs	r1, #0
 801c1be:	f640 1011 	movw	r0, #2321	; 0x911
 801c1c2:	f000 fef3 	bl	801cfac <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 801c1c6:	237f      	movs	r3, #127	; 0x7f
 801c1c8:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 801c1ca:	7b38      	ldrb	r0, [r7, #12]
 801c1cc:	f000 fa8b 	bl	801c6e6 <SUBGRF_Calibrate>
 801c1d0:	e009      	b.n	801c1e6 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801c1d2:	2120      	movs	r1, #32
 801c1d4:	f640 1011 	movw	r0, #2321	; 0x911
 801c1d8:	f000 fee8 	bl	801cfac <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801c1dc:	2120      	movs	r1, #32
 801c1de:	f640 1012 	movw	r0, #2322	; 0x912
 801c1e2:	f000 fee3 	bl	801cfac <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801c1e6:	210e      	movs	r1, #14
 801c1e8:	f640 101f 	movw	r0, #2335	; 0x91f
 801c1ec:	f000 fede 	bl	801cfac <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 801c1f0:	f7ef ff34 	bl	800c05c <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 801c1f4:	4b05      	ldr	r3, [pc, #20]	; (801c20c <SUBGRF_Init+0x8c>)
 801c1f6:	2201      	movs	r2, #1
 801c1f8:	701a      	strb	r2, [r3, #0]
}
 801c1fa:	bf00      	nop
 801c1fc:	3710      	adds	r7, #16
 801c1fe:	46bd      	mov	sp, r7
 801c200:	bd80      	pop	{r7, pc}
 801c202:	bf00      	nop
 801c204:	20001c20 	.word	0x20001c20
 801c208:	20001c1c 	.word	0x20001c1c
 801c20c:	20001c14 	.word	0x20001c14

0801c210 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 801c210:	b480      	push	{r7}
 801c212:	af00      	add	r7, sp, #0
    return OperatingMode;
 801c214:	4b02      	ldr	r3, [pc, #8]	; (801c220 <SUBGRF_GetOperatingMode+0x10>)
 801c216:	781b      	ldrb	r3, [r3, #0]
}
 801c218:	4618      	mov	r0, r3
 801c21a:	46bd      	mov	sp, r7
 801c21c:	bc80      	pop	{r7}
 801c21e:	4770      	bx	lr
 801c220:	20001c14 	.word	0x20001c14

0801c224 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 801c224:	b580      	push	{r7, lr}
 801c226:	b082      	sub	sp, #8
 801c228:	af00      	add	r7, sp, #0
 801c22a:	6078      	str	r0, [r7, #4]
 801c22c:	460b      	mov	r3, r1
 801c22e:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 801c230:	78fb      	ldrb	r3, [r7, #3]
 801c232:	461a      	mov	r2, r3
 801c234:	6879      	ldr	r1, [r7, #4]
 801c236:	2000      	movs	r0, #0
 801c238:	f000 ff24 	bl	801d084 <SUBGRF_WriteBuffer>
}
 801c23c:	bf00      	nop
 801c23e:	3708      	adds	r7, #8
 801c240:	46bd      	mov	sp, r7
 801c242:	bd80      	pop	{r7, pc}

0801c244 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 801c244:	b580      	push	{r7, lr}
 801c246:	b086      	sub	sp, #24
 801c248:	af00      	add	r7, sp, #0
 801c24a:	60f8      	str	r0, [r7, #12]
 801c24c:	60b9      	str	r1, [r7, #8]
 801c24e:	4613      	mov	r3, r2
 801c250:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 801c252:	2300      	movs	r3, #0
 801c254:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 801c256:	f107 0317 	add.w	r3, r7, #23
 801c25a:	4619      	mov	r1, r3
 801c25c:	68b8      	ldr	r0, [r7, #8]
 801c25e:	f000 fe27 	bl	801ceb0 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 801c262:	68bb      	ldr	r3, [r7, #8]
 801c264:	781b      	ldrb	r3, [r3, #0]
 801c266:	79fa      	ldrb	r2, [r7, #7]
 801c268:	429a      	cmp	r2, r3
 801c26a:	d201      	bcs.n	801c270 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 801c26c:	2301      	movs	r3, #1
 801c26e:	e007      	b.n	801c280 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 801c270:	7df8      	ldrb	r0, [r7, #23]
 801c272:	68bb      	ldr	r3, [r7, #8]
 801c274:	781b      	ldrb	r3, [r3, #0]
 801c276:	461a      	mov	r2, r3
 801c278:	68f9      	ldr	r1, [r7, #12]
 801c27a:	f000 ff25 	bl	801d0c8 <SUBGRF_ReadBuffer>

    return 0;
 801c27e:	2300      	movs	r3, #0
}
 801c280:	4618      	mov	r0, r3
 801c282:	3718      	adds	r7, #24
 801c284:	46bd      	mov	sp, r7
 801c286:	bd80      	pop	{r7, pc}

0801c288 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 801c288:	b580      	push	{r7, lr}
 801c28a:	b084      	sub	sp, #16
 801c28c:	af00      	add	r7, sp, #0
 801c28e:	60f8      	str	r0, [r7, #12]
 801c290:	460b      	mov	r3, r1
 801c292:	607a      	str	r2, [r7, #4]
 801c294:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 801c296:	7afb      	ldrb	r3, [r7, #11]
 801c298:	4619      	mov	r1, r3
 801c29a:	68f8      	ldr	r0, [r7, #12]
 801c29c:	f7ff ffc2 	bl	801c224 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 801c2a0:	6878      	ldr	r0, [r7, #4]
 801c2a2:	f000 f91b 	bl	801c4dc <SUBGRF_SetTx>
}
 801c2a6:	bf00      	nop
 801c2a8:	3710      	adds	r7, #16
 801c2aa:	46bd      	mov	sp, r7
 801c2ac:	bd80      	pop	{r7, pc}

0801c2ae <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 801c2ae:	b580      	push	{r7, lr}
 801c2b0:	b082      	sub	sp, #8
 801c2b2:	af00      	add	r7, sp, #0
 801c2b4:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 801c2b6:	2208      	movs	r2, #8
 801c2b8:	6879      	ldr	r1, [r7, #4]
 801c2ba:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 801c2be:	f000 fe9d 	bl	801cffc <SUBGRF_WriteRegisters>
    return 0;
 801c2c2:	2300      	movs	r3, #0
}
 801c2c4:	4618      	mov	r0, r3
 801c2c6:	3708      	adds	r7, #8
 801c2c8:	46bd      	mov	sp, r7
 801c2ca:	bd80      	pop	{r7, pc}

0801c2cc <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 801c2cc:	b580      	push	{r7, lr}
 801c2ce:	b084      	sub	sp, #16
 801c2d0:	af00      	add	r7, sp, #0
 801c2d2:	4603      	mov	r3, r0
 801c2d4:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 801c2d6:	88fb      	ldrh	r3, [r7, #6]
 801c2d8:	0a1b      	lsrs	r3, r3, #8
 801c2da:	b29b      	uxth	r3, r3
 801c2dc:	b2db      	uxtb	r3, r3
 801c2de:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 801c2e0:	88fb      	ldrh	r3, [r7, #6]
 801c2e2:	b2db      	uxtb	r3, r3
 801c2e4:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801c2e6:	f000 fb6f 	bl	801c9c8 <SUBGRF_GetPacketType>
 801c2ea:	4603      	mov	r3, r0
 801c2ec:	2b00      	cmp	r3, #0
 801c2ee:	d108      	bne.n	801c302 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 801c2f0:	f107 030c 	add.w	r3, r7, #12
 801c2f4:	2202      	movs	r2, #2
 801c2f6:	4619      	mov	r1, r3
 801c2f8:	f240 60bc 	movw	r0, #1724	; 0x6bc
 801c2fc:	f000 fe7e 	bl	801cffc <SUBGRF_WriteRegisters>
            break;
 801c300:	e000      	b.n	801c304 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 801c302:	bf00      	nop
    }
}
 801c304:	bf00      	nop
 801c306:	3710      	adds	r7, #16
 801c308:	46bd      	mov	sp, r7
 801c30a:	bd80      	pop	{r7, pc}

0801c30c <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 801c30c:	b580      	push	{r7, lr}
 801c30e:	b084      	sub	sp, #16
 801c310:	af00      	add	r7, sp, #0
 801c312:	4603      	mov	r3, r0
 801c314:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 801c316:	88fb      	ldrh	r3, [r7, #6]
 801c318:	0a1b      	lsrs	r3, r3, #8
 801c31a:	b29b      	uxth	r3, r3
 801c31c:	b2db      	uxtb	r3, r3
 801c31e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 801c320:	88fb      	ldrh	r3, [r7, #6]
 801c322:	b2db      	uxtb	r3, r3
 801c324:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801c326:	f000 fb4f 	bl	801c9c8 <SUBGRF_GetPacketType>
 801c32a:	4603      	mov	r3, r0
 801c32c:	2b00      	cmp	r3, #0
 801c32e:	d108      	bne.n	801c342 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 801c330:	f107 030c 	add.w	r3, r7, #12
 801c334:	2202      	movs	r2, #2
 801c336:	4619      	mov	r1, r3
 801c338:	f240 60be 	movw	r0, #1726	; 0x6be
 801c33c:	f000 fe5e 	bl	801cffc <SUBGRF_WriteRegisters>
            break;
 801c340:	e000      	b.n	801c344 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 801c342:	bf00      	nop
    }
}
 801c344:	bf00      	nop
 801c346:	3710      	adds	r7, #16
 801c348:	46bd      	mov	sp, r7
 801c34a:	bd80      	pop	{r7, pc}

0801c34c <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 801c34c:	b580      	push	{r7, lr}
 801c34e:	b084      	sub	sp, #16
 801c350:	af00      	add	r7, sp, #0
 801c352:	4603      	mov	r3, r0
 801c354:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 801c356:	2300      	movs	r3, #0
 801c358:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 801c35a:	f000 fb35 	bl	801c9c8 <SUBGRF_GetPacketType>
 801c35e:	4603      	mov	r3, r0
 801c360:	2b00      	cmp	r3, #0
 801c362:	d121      	bne.n	801c3a8 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 801c364:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801c368:	f000 fe34 	bl	801cfd4 <SUBGRF_ReadRegister>
 801c36c:	4603      	mov	r3, r0
 801c36e:	f023 0301 	bic.w	r3, r3, #1
 801c372:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 801c374:	88fb      	ldrh	r3, [r7, #6]
 801c376:	0a1b      	lsrs	r3, r3, #8
 801c378:	b29b      	uxth	r3, r3
 801c37a:	b25b      	sxtb	r3, r3
 801c37c:	f003 0301 	and.w	r3, r3, #1
 801c380:	b25a      	sxtb	r2, r3
 801c382:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c386:	4313      	orrs	r3, r2
 801c388:	b25b      	sxtb	r3, r3
 801c38a:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 801c38c:	7bfb      	ldrb	r3, [r7, #15]
 801c38e:	4619      	mov	r1, r3
 801c390:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801c394:	f000 fe0a 	bl	801cfac <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 801c398:	88fb      	ldrh	r3, [r7, #6]
 801c39a:	b2db      	uxtb	r3, r3
 801c39c:	4619      	mov	r1, r3
 801c39e:	f240 60b9 	movw	r0, #1721	; 0x6b9
 801c3a2:	f000 fe03 	bl	801cfac <SUBGRF_WriteRegister>
            break;
 801c3a6:	e000      	b.n	801c3aa <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 801c3a8:	bf00      	nop
    }
}
 801c3aa:	bf00      	nop
 801c3ac:	3710      	adds	r7, #16
 801c3ae:	46bd      	mov	sp, r7
 801c3b0:	bd80      	pop	{r7, pc}

0801c3b2 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 801c3b2:	b580      	push	{r7, lr}
 801c3b4:	b082      	sub	sp, #8
 801c3b6:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 801c3b8:	2300      	movs	r3, #0
 801c3ba:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 801c3bc:	2300      	movs	r3, #0
 801c3be:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 801c3c0:	2300      	movs	r3, #0
 801c3c2:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 801c3c4:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801c3c8:	f000 fe04 	bl	801cfd4 <SUBGRF_ReadRegister>
 801c3cc:	4603      	mov	r3, r0
 801c3ce:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 801c3d0:	79fb      	ldrb	r3, [r7, #7]
 801c3d2:	f023 0301 	bic.w	r3, r3, #1
 801c3d6:	b2db      	uxtb	r3, r3
 801c3d8:	4619      	mov	r1, r3
 801c3da:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801c3de:	f000 fde5 	bl	801cfac <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 801c3e2:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801c3e6:	f000 fdf5 	bl	801cfd4 <SUBGRF_ReadRegister>
 801c3ea:	4603      	mov	r3, r0
 801c3ec:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 801c3ee:	79bb      	ldrb	r3, [r7, #6]
 801c3f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801c3f4:	b2db      	uxtb	r3, r3
 801c3f6:	4619      	mov	r1, r3
 801c3f8:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801c3fc:	f000 fdd6 	bl	801cfac <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801c400:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801c404:	f000 f88a 	bl	801c51c <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 801c408:	463b      	mov	r3, r7
 801c40a:	2204      	movs	r2, #4
 801c40c:	4619      	mov	r1, r3
 801c40e:	f640 0019 	movw	r0, #2073	; 0x819
 801c412:	f000 fe15 	bl	801d040 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 801c416:	2000      	movs	r0, #0
 801c418:	f000 f844 	bl	801c4a4 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 801c41c:	79fb      	ldrb	r3, [r7, #7]
 801c41e:	4619      	mov	r1, r3
 801c420:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801c424:	f000 fdc2 	bl	801cfac <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 801c428:	79bb      	ldrb	r3, [r7, #6]
 801c42a:	4619      	mov	r1, r3
 801c42c:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801c430:	f000 fdbc 	bl	801cfac <SUBGRF_WriteRegister>

    return number;
 801c434:	683b      	ldr	r3, [r7, #0]
}
 801c436:	4618      	mov	r0, r3
 801c438:	3708      	adds	r7, #8
 801c43a:	46bd      	mov	sp, r7
 801c43c:	bd80      	pop	{r7, pc}
	...

0801c440 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 801c440:	b580      	push	{r7, lr}
 801c442:	b084      	sub	sp, #16
 801c444:	af00      	add	r7, sp, #0
 801c446:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 801c448:	2000      	movs	r0, #0
 801c44a:	f7ef fe0e 	bl	800c06a <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801c44e:	2002      	movs	r0, #2
 801c450:	f000 ffa4 	bl	801d39c <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801c454:	793b      	ldrb	r3, [r7, #4]
 801c456:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801c45a:	b2db      	uxtb	r3, r3
 801c45c:	009b      	lsls	r3, r3, #2
 801c45e:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801c460:	793b      	ldrb	r3, [r7, #4]
 801c462:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801c466:	b2db      	uxtb	r3, r3
 801c468:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801c46a:	b25b      	sxtb	r3, r3
 801c46c:	4313      	orrs	r3, r2
 801c46e:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 801c470:	793b      	ldrb	r3, [r7, #4]
 801c472:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801c476:	b2db      	uxtb	r3, r3
 801c478:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801c47a:	4313      	orrs	r3, r2
 801c47c:	b25b      	sxtb	r3, r3
 801c47e:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801c480:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 801c482:	f107 030f 	add.w	r3, r7, #15
 801c486:	2201      	movs	r2, #1
 801c488:	4619      	mov	r1, r3
 801c48a:	2084      	movs	r0, #132	; 0x84
 801c48c:	f000 fe3e 	bl	801d10c <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 801c490:	4b03      	ldr	r3, [pc, #12]	; (801c4a0 <SUBGRF_SetSleep+0x60>)
 801c492:	2200      	movs	r2, #0
 801c494:	701a      	strb	r2, [r3, #0]
}
 801c496:	bf00      	nop
 801c498:	3710      	adds	r7, #16
 801c49a:	46bd      	mov	sp, r7
 801c49c:	bd80      	pop	{r7, pc}
 801c49e:	bf00      	nop
 801c4a0:	20001c14 	.word	0x20001c14

0801c4a4 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 801c4a4:	b580      	push	{r7, lr}
 801c4a6:	b082      	sub	sp, #8
 801c4a8:	af00      	add	r7, sp, #0
 801c4aa:	4603      	mov	r3, r0
 801c4ac:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 801c4ae:	1dfb      	adds	r3, r7, #7
 801c4b0:	2201      	movs	r2, #1
 801c4b2:	4619      	mov	r1, r3
 801c4b4:	2080      	movs	r0, #128	; 0x80
 801c4b6:	f000 fe29 	bl	801d10c <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 801c4ba:	79fb      	ldrb	r3, [r7, #7]
 801c4bc:	2b00      	cmp	r3, #0
 801c4be:	d103      	bne.n	801c4c8 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 801c4c0:	4b05      	ldr	r3, [pc, #20]	; (801c4d8 <SUBGRF_SetStandby+0x34>)
 801c4c2:	2201      	movs	r2, #1
 801c4c4:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 801c4c6:	e002      	b.n	801c4ce <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 801c4c8:	4b03      	ldr	r3, [pc, #12]	; (801c4d8 <SUBGRF_SetStandby+0x34>)
 801c4ca:	2202      	movs	r2, #2
 801c4cc:	701a      	strb	r2, [r3, #0]
}
 801c4ce:	bf00      	nop
 801c4d0:	3708      	adds	r7, #8
 801c4d2:	46bd      	mov	sp, r7
 801c4d4:	bd80      	pop	{r7, pc}
 801c4d6:	bf00      	nop
 801c4d8:	20001c14 	.word	0x20001c14

0801c4dc <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 801c4dc:	b580      	push	{r7, lr}
 801c4de:	b084      	sub	sp, #16
 801c4e0:	af00      	add	r7, sp, #0
 801c4e2:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 801c4e4:	4b0c      	ldr	r3, [pc, #48]	; (801c518 <SUBGRF_SetTx+0x3c>)
 801c4e6:	2204      	movs	r2, #4
 801c4e8:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801c4ea:	687b      	ldr	r3, [r7, #4]
 801c4ec:	0c1b      	lsrs	r3, r3, #16
 801c4ee:	b2db      	uxtb	r3, r3
 801c4f0:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801c4f2:	687b      	ldr	r3, [r7, #4]
 801c4f4:	0a1b      	lsrs	r3, r3, #8
 801c4f6:	b2db      	uxtb	r3, r3
 801c4f8:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801c4fa:	687b      	ldr	r3, [r7, #4]
 801c4fc:	b2db      	uxtb	r3, r3
 801c4fe:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 801c500:	f107 030c 	add.w	r3, r7, #12
 801c504:	2203      	movs	r2, #3
 801c506:	4619      	mov	r1, r3
 801c508:	2083      	movs	r0, #131	; 0x83
 801c50a:	f000 fdff 	bl	801d10c <SUBGRF_WriteCommand>
}
 801c50e:	bf00      	nop
 801c510:	3710      	adds	r7, #16
 801c512:	46bd      	mov	sp, r7
 801c514:	bd80      	pop	{r7, pc}
 801c516:	bf00      	nop
 801c518:	20001c14 	.word	0x20001c14

0801c51c <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 801c51c:	b580      	push	{r7, lr}
 801c51e:	b084      	sub	sp, #16
 801c520:	af00      	add	r7, sp, #0
 801c522:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801c524:	4b0c      	ldr	r3, [pc, #48]	; (801c558 <SUBGRF_SetRx+0x3c>)
 801c526:	2205      	movs	r2, #5
 801c528:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801c52a:	687b      	ldr	r3, [r7, #4]
 801c52c:	0c1b      	lsrs	r3, r3, #16
 801c52e:	b2db      	uxtb	r3, r3
 801c530:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801c532:	687b      	ldr	r3, [r7, #4]
 801c534:	0a1b      	lsrs	r3, r3, #8
 801c536:	b2db      	uxtb	r3, r3
 801c538:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801c53a:	687b      	ldr	r3, [r7, #4]
 801c53c:	b2db      	uxtb	r3, r3
 801c53e:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801c540:	f107 030c 	add.w	r3, r7, #12
 801c544:	2203      	movs	r2, #3
 801c546:	4619      	mov	r1, r3
 801c548:	2082      	movs	r0, #130	; 0x82
 801c54a:	f000 fddf 	bl	801d10c <SUBGRF_WriteCommand>
}
 801c54e:	bf00      	nop
 801c550:	3710      	adds	r7, #16
 801c552:	46bd      	mov	sp, r7
 801c554:	bd80      	pop	{r7, pc}
 801c556:	bf00      	nop
 801c558:	20001c14 	.word	0x20001c14

0801c55c <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 801c55c:	b580      	push	{r7, lr}
 801c55e:	b084      	sub	sp, #16
 801c560:	af00      	add	r7, sp, #0
 801c562:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801c564:	4b0e      	ldr	r3, [pc, #56]	; (801c5a0 <SUBGRF_SetRxBoosted+0x44>)
 801c566:	2205      	movs	r2, #5
 801c568:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 801c56a:	2197      	movs	r1, #151	; 0x97
 801c56c:	f640 00ac 	movw	r0, #2220	; 0x8ac
 801c570:	f000 fd1c 	bl	801cfac <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801c574:	687b      	ldr	r3, [r7, #4]
 801c576:	0c1b      	lsrs	r3, r3, #16
 801c578:	b2db      	uxtb	r3, r3
 801c57a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801c57c:	687b      	ldr	r3, [r7, #4]
 801c57e:	0a1b      	lsrs	r3, r3, #8
 801c580:	b2db      	uxtb	r3, r3
 801c582:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801c584:	687b      	ldr	r3, [r7, #4]
 801c586:	b2db      	uxtb	r3, r3
 801c588:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801c58a:	f107 030c 	add.w	r3, r7, #12
 801c58e:	2203      	movs	r2, #3
 801c590:	4619      	mov	r1, r3
 801c592:	2082      	movs	r0, #130	; 0x82
 801c594:	f000 fdba 	bl	801d10c <SUBGRF_WriteCommand>
}
 801c598:	bf00      	nop
 801c59a:	3710      	adds	r7, #16
 801c59c:	46bd      	mov	sp, r7
 801c59e:	bd80      	pop	{r7, pc}
 801c5a0:	20001c14 	.word	0x20001c14

0801c5a4 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801c5a4:	b580      	push	{r7, lr}
 801c5a6:	b084      	sub	sp, #16
 801c5a8:	af00      	add	r7, sp, #0
 801c5aa:	6078      	str	r0, [r7, #4]
 801c5ac:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 801c5ae:	687b      	ldr	r3, [r7, #4]
 801c5b0:	0c1b      	lsrs	r3, r3, #16
 801c5b2:	b2db      	uxtb	r3, r3
 801c5b4:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 801c5b6:	687b      	ldr	r3, [r7, #4]
 801c5b8:	0a1b      	lsrs	r3, r3, #8
 801c5ba:	b2db      	uxtb	r3, r3
 801c5bc:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 801c5be:	687b      	ldr	r3, [r7, #4]
 801c5c0:	b2db      	uxtb	r3, r3
 801c5c2:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 801c5c4:	683b      	ldr	r3, [r7, #0]
 801c5c6:	0c1b      	lsrs	r3, r3, #16
 801c5c8:	b2db      	uxtb	r3, r3
 801c5ca:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 801c5cc:	683b      	ldr	r3, [r7, #0]
 801c5ce:	0a1b      	lsrs	r3, r3, #8
 801c5d0:	b2db      	uxtb	r3, r3
 801c5d2:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 801c5d4:	683b      	ldr	r3, [r7, #0]
 801c5d6:	b2db      	uxtb	r3, r3
 801c5d8:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 801c5da:	f107 0308 	add.w	r3, r7, #8
 801c5de:	2206      	movs	r2, #6
 801c5e0:	4619      	mov	r1, r3
 801c5e2:	2094      	movs	r0, #148	; 0x94
 801c5e4:	f000 fd92 	bl	801d10c <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 801c5e8:	4b03      	ldr	r3, [pc, #12]	; (801c5f8 <SUBGRF_SetRxDutyCycle+0x54>)
 801c5ea:	2206      	movs	r2, #6
 801c5ec:	701a      	strb	r2, [r3, #0]
}
 801c5ee:	bf00      	nop
 801c5f0:	3710      	adds	r7, #16
 801c5f2:	46bd      	mov	sp, r7
 801c5f4:	bd80      	pop	{r7, pc}
 801c5f6:	bf00      	nop
 801c5f8:	20001c14 	.word	0x20001c14

0801c5fc <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 801c5fc:	b580      	push	{r7, lr}
 801c5fe:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 801c600:	2200      	movs	r2, #0
 801c602:	2100      	movs	r1, #0
 801c604:	20c5      	movs	r0, #197	; 0xc5
 801c606:	f000 fd81 	bl	801d10c <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 801c60a:	4b02      	ldr	r3, [pc, #8]	; (801c614 <SUBGRF_SetCad+0x18>)
 801c60c:	2207      	movs	r2, #7
 801c60e:	701a      	strb	r2, [r3, #0]
}
 801c610:	bf00      	nop
 801c612:	bd80      	pop	{r7, pc}
 801c614:	20001c14 	.word	0x20001c14

0801c618 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 801c618:	b580      	push	{r7, lr}
 801c61a:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 801c61c:	2200      	movs	r2, #0
 801c61e:	2100      	movs	r1, #0
 801c620:	20d1      	movs	r0, #209	; 0xd1
 801c622:	f000 fd73 	bl	801d10c <SUBGRF_WriteCommand>
}
 801c626:	bf00      	nop
 801c628:	bd80      	pop	{r7, pc}

0801c62a <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 801c62a:	b580      	push	{r7, lr}
 801c62c:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 801c62e:	2200      	movs	r2, #0
 801c630:	2100      	movs	r1, #0
 801c632:	20d2      	movs	r0, #210	; 0xd2
 801c634:	f000 fd6a 	bl	801d10c <SUBGRF_WriteCommand>
}
 801c638:	bf00      	nop
 801c63a:	bd80      	pop	{r7, pc}

0801c63c <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 801c63c:	b580      	push	{r7, lr}
 801c63e:	b082      	sub	sp, #8
 801c640:	af00      	add	r7, sp, #0
 801c642:	4603      	mov	r3, r0
 801c644:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 801c646:	1dfb      	adds	r3, r7, #7
 801c648:	2201      	movs	r2, #1
 801c64a:	4619      	mov	r1, r3
 801c64c:	209f      	movs	r0, #159	; 0x9f
 801c64e:	f000 fd5d 	bl	801d10c <SUBGRF_WriteCommand>
}
 801c652:	bf00      	nop
 801c654:	3708      	adds	r7, #8
 801c656:	46bd      	mov	sp, r7
 801c658:	bd80      	pop	{r7, pc}

0801c65a <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 801c65a:	b580      	push	{r7, lr}
 801c65c:	b084      	sub	sp, #16
 801c65e:	af00      	add	r7, sp, #0
 801c660:	4603      	mov	r3, r0
 801c662:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 801c664:	1dfb      	adds	r3, r7, #7
 801c666:	2201      	movs	r2, #1
 801c668:	4619      	mov	r1, r3
 801c66a:	20a0      	movs	r0, #160	; 0xa0
 801c66c:	f000 fd4e 	bl	801d10c <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 801c670:	79fb      	ldrb	r3, [r7, #7]
 801c672:	2b3f      	cmp	r3, #63	; 0x3f
 801c674:	d91c      	bls.n	801c6b0 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 801c676:	79fb      	ldrb	r3, [r7, #7]
 801c678:	085b      	lsrs	r3, r3, #1
 801c67a:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 801c67c:	2300      	movs	r3, #0
 801c67e:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 801c680:	2300      	movs	r3, #0
 801c682:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 801c684:	e005      	b.n	801c692 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 801c686:	7bfb      	ldrb	r3, [r7, #15]
 801c688:	089b      	lsrs	r3, r3, #2
 801c68a:	73fb      	strb	r3, [r7, #15]
            exp++;
 801c68c:	7bbb      	ldrb	r3, [r7, #14]
 801c68e:	3301      	adds	r3, #1
 801c690:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 801c692:	7bfb      	ldrb	r3, [r7, #15]
 801c694:	2b1f      	cmp	r3, #31
 801c696:	d8f6      	bhi.n	801c686 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 801c698:	7bfb      	ldrb	r3, [r7, #15]
 801c69a:	00db      	lsls	r3, r3, #3
 801c69c:	b2da      	uxtb	r2, r3
 801c69e:	7bbb      	ldrb	r3, [r7, #14]
 801c6a0:	4413      	add	r3, r2
 801c6a2:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 801c6a4:	7b7b      	ldrb	r3, [r7, #13]
 801c6a6:	4619      	mov	r1, r3
 801c6a8:	f240 7006 	movw	r0, #1798	; 0x706
 801c6ac:	f000 fc7e 	bl	801cfac <SUBGRF_WriteRegister>
    }
}
 801c6b0:	bf00      	nop
 801c6b2:	3710      	adds	r7, #16
 801c6b4:	46bd      	mov	sp, r7
 801c6b6:	bd80      	pop	{r7, pc}

0801c6b8 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 801c6b8:	b580      	push	{r7, lr}
 801c6ba:	b082      	sub	sp, #8
 801c6bc:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 801c6be:	f7ef fcf0 	bl	800c0a2 <RBI_IsDCDC>
 801c6c2:	4603      	mov	r3, r0
 801c6c4:	2b01      	cmp	r3, #1
 801c6c6:	d102      	bne.n	801c6ce <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 801c6c8:	2301      	movs	r3, #1
 801c6ca:	71fb      	strb	r3, [r7, #7]
 801c6cc:	e001      	b.n	801c6d2 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 801c6ce:	2300      	movs	r3, #0
 801c6d0:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 801c6d2:	1dfb      	adds	r3, r7, #7
 801c6d4:	2201      	movs	r2, #1
 801c6d6:	4619      	mov	r1, r3
 801c6d8:	2096      	movs	r0, #150	; 0x96
 801c6da:	f000 fd17 	bl	801d10c <SUBGRF_WriteCommand>
}
 801c6de:	bf00      	nop
 801c6e0:	3708      	adds	r7, #8
 801c6e2:	46bd      	mov	sp, r7
 801c6e4:	bd80      	pop	{r7, pc}

0801c6e6 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 801c6e6:	b580      	push	{r7, lr}
 801c6e8:	b084      	sub	sp, #16
 801c6ea:	af00      	add	r7, sp, #0
 801c6ec:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801c6ee:	793b      	ldrb	r3, [r7, #4]
 801c6f0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 801c6f4:	b2db      	uxtb	r3, r3
 801c6f6:	019b      	lsls	r3, r3, #6
 801c6f8:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801c6fa:	793b      	ldrb	r3, [r7, #4]
 801c6fc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801c700:	b2db      	uxtb	r3, r3
 801c702:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801c704:	b25b      	sxtb	r3, r3
 801c706:	4313      	orrs	r3, r2
 801c708:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801c70a:	793b      	ldrb	r3, [r7, #4]
 801c70c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801c710:	b2db      	uxtb	r3, r3
 801c712:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801c714:	b25b      	sxtb	r3, r3
 801c716:	4313      	orrs	r3, r2
 801c718:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801c71a:	793b      	ldrb	r3, [r7, #4]
 801c71c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801c720:	b2db      	uxtb	r3, r3
 801c722:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801c724:	b25b      	sxtb	r3, r3
 801c726:	4313      	orrs	r3, r2
 801c728:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801c72a:	793b      	ldrb	r3, [r7, #4]
 801c72c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801c730:	b2db      	uxtb	r3, r3
 801c732:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801c734:	b25b      	sxtb	r3, r3
 801c736:	4313      	orrs	r3, r2
 801c738:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801c73a:	793b      	ldrb	r3, [r7, #4]
 801c73c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801c740:	b2db      	uxtb	r3, r3
 801c742:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801c744:	b25b      	sxtb	r3, r3
 801c746:	4313      	orrs	r3, r2
 801c748:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 801c74a:	793b      	ldrb	r3, [r7, #4]
 801c74c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801c750:	b2db      	uxtb	r3, r3
 801c752:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801c754:	4313      	orrs	r3, r2
 801c756:	b25b      	sxtb	r3, r3
 801c758:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801c75a:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 801c75c:	f107 030f 	add.w	r3, r7, #15
 801c760:	2201      	movs	r2, #1
 801c762:	4619      	mov	r1, r3
 801c764:	2089      	movs	r0, #137	; 0x89
 801c766:	f000 fcd1 	bl	801d10c <SUBGRF_WriteCommand>
}
 801c76a:	bf00      	nop
 801c76c:	3710      	adds	r7, #16
 801c76e:	46bd      	mov	sp, r7
 801c770:	bd80      	pop	{r7, pc}
	...

0801c774 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 801c774:	b580      	push	{r7, lr}
 801c776:	b084      	sub	sp, #16
 801c778:	af00      	add	r7, sp, #0
 801c77a:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 801c77c:	687b      	ldr	r3, [r7, #4]
 801c77e:	4a1d      	ldr	r2, [pc, #116]	; (801c7f4 <SUBGRF_CalibrateImage+0x80>)
 801c780:	4293      	cmp	r3, r2
 801c782:	d904      	bls.n	801c78e <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 801c784:	23e1      	movs	r3, #225	; 0xe1
 801c786:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 801c788:	23e9      	movs	r3, #233	; 0xe9
 801c78a:	737b      	strb	r3, [r7, #13]
 801c78c:	e027      	b.n	801c7de <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 801c78e:	687b      	ldr	r3, [r7, #4]
 801c790:	4a19      	ldr	r2, [pc, #100]	; (801c7f8 <SUBGRF_CalibrateImage+0x84>)
 801c792:	4293      	cmp	r3, r2
 801c794:	d904      	bls.n	801c7a0 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 801c796:	23d7      	movs	r3, #215	; 0xd7
 801c798:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 801c79a:	23db      	movs	r3, #219	; 0xdb
 801c79c:	737b      	strb	r3, [r7, #13]
 801c79e:	e01e      	b.n	801c7de <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 801c7a0:	687b      	ldr	r3, [r7, #4]
 801c7a2:	4a16      	ldr	r2, [pc, #88]	; (801c7fc <SUBGRF_CalibrateImage+0x88>)
 801c7a4:	4293      	cmp	r3, r2
 801c7a6:	d904      	bls.n	801c7b2 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 801c7a8:	23c1      	movs	r3, #193	; 0xc1
 801c7aa:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 801c7ac:	23c5      	movs	r3, #197	; 0xc5
 801c7ae:	737b      	strb	r3, [r7, #13]
 801c7b0:	e015      	b.n	801c7de <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 801c7b2:	687b      	ldr	r3, [r7, #4]
 801c7b4:	4a12      	ldr	r2, [pc, #72]	; (801c800 <SUBGRF_CalibrateImage+0x8c>)
 801c7b6:	4293      	cmp	r3, r2
 801c7b8:	d904      	bls.n	801c7c4 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 801c7ba:	2375      	movs	r3, #117	; 0x75
 801c7bc:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 801c7be:	2381      	movs	r3, #129	; 0x81
 801c7c0:	737b      	strb	r3, [r7, #13]
 801c7c2:	e00c      	b.n	801c7de <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 801c7c4:	687b      	ldr	r3, [r7, #4]
 801c7c6:	4a0f      	ldr	r2, [pc, #60]	; (801c804 <SUBGRF_CalibrateImage+0x90>)
 801c7c8:	4293      	cmp	r3, r2
 801c7ca:	d904      	bls.n	801c7d6 <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 801c7cc:	236b      	movs	r3, #107	; 0x6b
 801c7ce:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 801c7d0:	236f      	movs	r3, #111	; 0x6f
 801c7d2:	737b      	strb	r3, [r7, #13]
 801c7d4:	e003      	b.n	801c7de <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 801c7d6:	2329      	movs	r3, #41	; 0x29
 801c7d8:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 801c7da:	232b      	movs	r3, #43	; 0x2b
 801c7dc:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 801c7de:	f107 030c 	add.w	r3, r7, #12
 801c7e2:	2202      	movs	r2, #2
 801c7e4:	4619      	mov	r1, r3
 801c7e6:	2098      	movs	r0, #152	; 0x98
 801c7e8:	f000 fc90 	bl	801d10c <SUBGRF_WriteCommand>
}
 801c7ec:	bf00      	nop
 801c7ee:	3710      	adds	r7, #16
 801c7f0:	46bd      	mov	sp, r7
 801c7f2:	bd80      	pop	{r7, pc}
 801c7f4:	35a4e900 	.word	0x35a4e900
 801c7f8:	32a9f880 	.word	0x32a9f880
 801c7fc:	2de54480 	.word	0x2de54480
 801c800:	1b6b0b00 	.word	0x1b6b0b00
 801c804:	1954fc40 	.word	0x1954fc40

0801c808 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 801c808:	b590      	push	{r4, r7, lr}
 801c80a:	b085      	sub	sp, #20
 801c80c:	af00      	add	r7, sp, #0
 801c80e:	4604      	mov	r4, r0
 801c810:	4608      	mov	r0, r1
 801c812:	4611      	mov	r1, r2
 801c814:	461a      	mov	r2, r3
 801c816:	4623      	mov	r3, r4
 801c818:	71fb      	strb	r3, [r7, #7]
 801c81a:	4603      	mov	r3, r0
 801c81c:	71bb      	strb	r3, [r7, #6]
 801c81e:	460b      	mov	r3, r1
 801c820:	717b      	strb	r3, [r7, #5]
 801c822:	4613      	mov	r3, r2
 801c824:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 801c826:	79fb      	ldrb	r3, [r7, #7]
 801c828:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 801c82a:	79bb      	ldrb	r3, [r7, #6]
 801c82c:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 801c82e:	797b      	ldrb	r3, [r7, #5]
 801c830:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 801c832:	793b      	ldrb	r3, [r7, #4]
 801c834:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 801c836:	f107 030c 	add.w	r3, r7, #12
 801c83a:	2204      	movs	r2, #4
 801c83c:	4619      	mov	r1, r3
 801c83e:	2095      	movs	r0, #149	; 0x95
 801c840:	f000 fc64 	bl	801d10c <SUBGRF_WriteCommand>
}
 801c844:	bf00      	nop
 801c846:	3714      	adds	r7, #20
 801c848:	46bd      	mov	sp, r7
 801c84a:	bd90      	pop	{r4, r7, pc}

0801c84c <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 801c84c:	b590      	push	{r4, r7, lr}
 801c84e:	b085      	sub	sp, #20
 801c850:	af00      	add	r7, sp, #0
 801c852:	4604      	mov	r4, r0
 801c854:	4608      	mov	r0, r1
 801c856:	4611      	mov	r1, r2
 801c858:	461a      	mov	r2, r3
 801c85a:	4623      	mov	r3, r4
 801c85c:	80fb      	strh	r3, [r7, #6]
 801c85e:	4603      	mov	r3, r0
 801c860:	80bb      	strh	r3, [r7, #4]
 801c862:	460b      	mov	r3, r1
 801c864:	807b      	strh	r3, [r7, #2]
 801c866:	4613      	mov	r3, r2
 801c868:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 801c86a:	88fb      	ldrh	r3, [r7, #6]
 801c86c:	0a1b      	lsrs	r3, r3, #8
 801c86e:	b29b      	uxth	r3, r3
 801c870:	b2db      	uxtb	r3, r3
 801c872:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 801c874:	88fb      	ldrh	r3, [r7, #6]
 801c876:	b2db      	uxtb	r3, r3
 801c878:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 801c87a:	88bb      	ldrh	r3, [r7, #4]
 801c87c:	0a1b      	lsrs	r3, r3, #8
 801c87e:	b29b      	uxth	r3, r3
 801c880:	b2db      	uxtb	r3, r3
 801c882:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 801c884:	88bb      	ldrh	r3, [r7, #4]
 801c886:	b2db      	uxtb	r3, r3
 801c888:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 801c88a:	887b      	ldrh	r3, [r7, #2]
 801c88c:	0a1b      	lsrs	r3, r3, #8
 801c88e:	b29b      	uxth	r3, r3
 801c890:	b2db      	uxtb	r3, r3
 801c892:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 801c894:	887b      	ldrh	r3, [r7, #2]
 801c896:	b2db      	uxtb	r3, r3
 801c898:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 801c89a:	883b      	ldrh	r3, [r7, #0]
 801c89c:	0a1b      	lsrs	r3, r3, #8
 801c89e:	b29b      	uxth	r3, r3
 801c8a0:	b2db      	uxtb	r3, r3
 801c8a2:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 801c8a4:	883b      	ldrh	r3, [r7, #0]
 801c8a6:	b2db      	uxtb	r3, r3
 801c8a8:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 801c8aa:	f107 0308 	add.w	r3, r7, #8
 801c8ae:	2208      	movs	r2, #8
 801c8b0:	4619      	mov	r1, r3
 801c8b2:	2008      	movs	r0, #8
 801c8b4:	f000 fc2a 	bl	801d10c <SUBGRF_WriteCommand>
}
 801c8b8:	bf00      	nop
 801c8ba:	3714      	adds	r7, #20
 801c8bc:	46bd      	mov	sp, r7
 801c8be:	bd90      	pop	{r4, r7, pc}

0801c8c0 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 801c8c0:	b580      	push	{r7, lr}
 801c8c2:	b084      	sub	sp, #16
 801c8c4:	af00      	add	r7, sp, #0
 801c8c6:	4603      	mov	r3, r0
 801c8c8:	6039      	str	r1, [r7, #0]
 801c8ca:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 801c8cc:	79fb      	ldrb	r3, [r7, #7]
 801c8ce:	f003 0307 	and.w	r3, r3, #7
 801c8d2:	b2db      	uxtb	r3, r3
 801c8d4:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801c8d6:	683b      	ldr	r3, [r7, #0]
 801c8d8:	0c1b      	lsrs	r3, r3, #16
 801c8da:	b2db      	uxtb	r3, r3
 801c8dc:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801c8de:	683b      	ldr	r3, [r7, #0]
 801c8e0:	0a1b      	lsrs	r3, r3, #8
 801c8e2:	b2db      	uxtb	r3, r3
 801c8e4:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 801c8e6:	683b      	ldr	r3, [r7, #0]
 801c8e8:	b2db      	uxtb	r3, r3
 801c8ea:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 801c8ec:	f107 030c 	add.w	r3, r7, #12
 801c8f0:	2204      	movs	r2, #4
 801c8f2:	4619      	mov	r1, r3
 801c8f4:	2097      	movs	r0, #151	; 0x97
 801c8f6:	f000 fc09 	bl	801d10c <SUBGRF_WriteCommand>
}
 801c8fa:	bf00      	nop
 801c8fc:	3710      	adds	r7, #16
 801c8fe:	46bd      	mov	sp, r7
 801c900:	bd80      	pop	{r7, pc}
	...

0801c904 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 801c904:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801c908:	b084      	sub	sp, #16
 801c90a:	af00      	add	r7, sp, #0
 801c90c:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 801c90e:	2300      	movs	r3, #0
 801c910:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 801c912:	4b1d      	ldr	r3, [pc, #116]	; (801c988 <SUBGRF_SetRfFrequency+0x84>)
 801c914:	781b      	ldrb	r3, [r3, #0]
 801c916:	f083 0301 	eor.w	r3, r3, #1
 801c91a:	b2db      	uxtb	r3, r3
 801c91c:	2b00      	cmp	r3, #0
 801c91e:	d005      	beq.n	801c92c <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 801c920:	6878      	ldr	r0, [r7, #4]
 801c922:	f7ff ff27 	bl	801c774 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 801c926:	4b18      	ldr	r3, [pc, #96]	; (801c988 <SUBGRF_SetRfFrequency+0x84>)
 801c928:	2201      	movs	r2, #1
 801c92a:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 801c92c:	687b      	ldr	r3, [r7, #4]
 801c92e:	2200      	movs	r2, #0
 801c930:	461c      	mov	r4, r3
 801c932:	4615      	mov	r5, r2
 801c934:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801c938:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801c93c:	4a13      	ldr	r2, [pc, #76]	; (801c98c <SUBGRF_SetRfFrequency+0x88>)
 801c93e:	f04f 0300 	mov.w	r3, #0
 801c942:	4640      	mov	r0, r8
 801c944:	4649      	mov	r1, r9
 801c946:	f7e4 fc07 	bl	8001158 <__aeabi_uldivmod>
 801c94a:	4602      	mov	r2, r0
 801c94c:	460b      	mov	r3, r1
 801c94e:	4613      	mov	r3, r2
 801c950:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 801c952:	68fb      	ldr	r3, [r7, #12]
 801c954:	0e1b      	lsrs	r3, r3, #24
 801c956:	b2db      	uxtb	r3, r3
 801c958:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 801c95a:	68fb      	ldr	r3, [r7, #12]
 801c95c:	0c1b      	lsrs	r3, r3, #16
 801c95e:	b2db      	uxtb	r3, r3
 801c960:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 801c962:	68fb      	ldr	r3, [r7, #12]
 801c964:	0a1b      	lsrs	r3, r3, #8
 801c966:	b2db      	uxtb	r3, r3
 801c968:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 801c96a:	68fb      	ldr	r3, [r7, #12]
 801c96c:	b2db      	uxtb	r3, r3
 801c96e:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 801c970:	f107 0308 	add.w	r3, r7, #8
 801c974:	2204      	movs	r2, #4
 801c976:	4619      	mov	r1, r3
 801c978:	2086      	movs	r0, #134	; 0x86
 801c97a:	f000 fbc7 	bl	801d10c <SUBGRF_WriteCommand>
}
 801c97e:	bf00      	nop
 801c980:	3710      	adds	r7, #16
 801c982:	46bd      	mov	sp, r7
 801c984:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801c988:	20001c1c 	.word	0x20001c1c
 801c98c:	01e84800 	.word	0x01e84800

0801c990 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 801c990:	b580      	push	{r7, lr}
 801c992:	b082      	sub	sp, #8
 801c994:	af00      	add	r7, sp, #0
 801c996:	4603      	mov	r3, r0
 801c998:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 801c99a:	79fa      	ldrb	r2, [r7, #7]
 801c99c:	4b09      	ldr	r3, [pc, #36]	; (801c9c4 <SUBGRF_SetPacketType+0x34>)
 801c99e:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 801c9a0:	79fb      	ldrb	r3, [r7, #7]
 801c9a2:	2b00      	cmp	r3, #0
 801c9a4:	d104      	bne.n	801c9b0 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 801c9a6:	2100      	movs	r1, #0
 801c9a8:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801c9ac:	f000 fafe 	bl	801cfac <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 801c9b0:	1dfb      	adds	r3, r7, #7
 801c9b2:	2201      	movs	r2, #1
 801c9b4:	4619      	mov	r1, r3
 801c9b6:	208a      	movs	r0, #138	; 0x8a
 801c9b8:	f000 fba8 	bl	801d10c <SUBGRF_WriteCommand>
}
 801c9bc:	bf00      	nop
 801c9be:	3708      	adds	r7, #8
 801c9c0:	46bd      	mov	sp, r7
 801c9c2:	bd80      	pop	{r7, pc}
 801c9c4:	20001c15 	.word	0x20001c15

0801c9c8 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 801c9c8:	b480      	push	{r7}
 801c9ca:	af00      	add	r7, sp, #0
    return PacketType;
 801c9cc:	4b02      	ldr	r3, [pc, #8]	; (801c9d8 <SUBGRF_GetPacketType+0x10>)
 801c9ce:	781b      	ldrb	r3, [r3, #0]
}
 801c9d0:	4618      	mov	r0, r3
 801c9d2:	46bd      	mov	sp, r7
 801c9d4:	bc80      	pop	{r7}
 801c9d6:	4770      	bx	lr
 801c9d8:	20001c15 	.word	0x20001c15

0801c9dc <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 801c9dc:	b580      	push	{r7, lr}
 801c9de:	b084      	sub	sp, #16
 801c9e0:	af00      	add	r7, sp, #0
 801c9e2:	4603      	mov	r3, r0
 801c9e4:	71fb      	strb	r3, [r7, #7]
 801c9e6:	460b      	mov	r3, r1
 801c9e8:	71bb      	strb	r3, [r7, #6]
 801c9ea:	4613      	mov	r3, r2
 801c9ec:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 801c9ee:	79fb      	ldrb	r3, [r7, #7]
 801c9f0:	2b01      	cmp	r3, #1
 801c9f2:	d149      	bne.n	801ca88 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 801c9f4:	2000      	movs	r0, #0
 801c9f6:	f7ef fb5b 	bl	800c0b0 <RBI_GetRFOMaxPowerConfig>
 801c9fa:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 801c9fc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801ca00:	68fa      	ldr	r2, [r7, #12]
 801ca02:	429a      	cmp	r2, r3
 801ca04:	da01      	bge.n	801ca0a <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 801ca06:	68fb      	ldr	r3, [r7, #12]
 801ca08:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 801ca0a:	68fb      	ldr	r3, [r7, #12]
 801ca0c:	2b0e      	cmp	r3, #14
 801ca0e:	d10e      	bne.n	801ca2e <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 801ca10:	2301      	movs	r3, #1
 801ca12:	2201      	movs	r2, #1
 801ca14:	2100      	movs	r1, #0
 801ca16:	2004      	movs	r0, #4
 801ca18:	f7ff fef6 	bl	801c808 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801ca1c:	79ba      	ldrb	r2, [r7, #6]
 801ca1e:	68fb      	ldr	r3, [r7, #12]
 801ca20:	b2db      	uxtb	r3, r3
 801ca22:	1ad3      	subs	r3, r2, r3
 801ca24:	b2db      	uxtb	r3, r3
 801ca26:	330e      	adds	r3, #14
 801ca28:	b2db      	uxtb	r3, r3
 801ca2a:	71bb      	strb	r3, [r7, #6]
 801ca2c:	e01f      	b.n	801ca6e <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 801ca2e:	68fb      	ldr	r3, [r7, #12]
 801ca30:	2b0a      	cmp	r3, #10
 801ca32:	d10e      	bne.n	801ca52 <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 801ca34:	2301      	movs	r3, #1
 801ca36:	2201      	movs	r2, #1
 801ca38:	2100      	movs	r1, #0
 801ca3a:	2001      	movs	r0, #1
 801ca3c:	f7ff fee4 	bl	801c808 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 801ca40:	79ba      	ldrb	r2, [r7, #6]
 801ca42:	68fb      	ldr	r3, [r7, #12]
 801ca44:	b2db      	uxtb	r3, r3
 801ca46:	1ad3      	subs	r3, r2, r3
 801ca48:	b2db      	uxtb	r3, r3
 801ca4a:	330d      	adds	r3, #13
 801ca4c:	b2db      	uxtb	r3, r3
 801ca4e:	71bb      	strb	r3, [r7, #6]
 801ca50:	e00d      	b.n	801ca6e <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 801ca52:	2301      	movs	r3, #1
 801ca54:	2201      	movs	r2, #1
 801ca56:	2100      	movs	r1, #0
 801ca58:	2007      	movs	r0, #7
 801ca5a:	f7ff fed5 	bl	801c808 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801ca5e:	79ba      	ldrb	r2, [r7, #6]
 801ca60:	68fb      	ldr	r3, [r7, #12]
 801ca62:	b2db      	uxtb	r3, r3
 801ca64:	1ad3      	subs	r3, r2, r3
 801ca66:	b2db      	uxtb	r3, r3
 801ca68:	330e      	adds	r3, #14
 801ca6a:	b2db      	uxtb	r3, r3
 801ca6c:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 801ca6e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801ca72:	f113 0f11 	cmn.w	r3, #17
 801ca76:	da01      	bge.n	801ca7c <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 801ca78:	23ef      	movs	r3, #239	; 0xef
 801ca7a:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 801ca7c:	2118      	movs	r1, #24
 801ca7e:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801ca82:	f000 fa93 	bl	801cfac <SUBGRF_WriteRegister>
 801ca86:	e067      	b.n	801cb58 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 801ca88:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801ca8c:	f000 faa2 	bl	801cfd4 <SUBGRF_ReadRegister>
 801ca90:	4603      	mov	r3, r0
 801ca92:	f043 031e 	orr.w	r3, r3, #30
 801ca96:	b2db      	uxtb	r3, r3
 801ca98:	4619      	mov	r1, r3
 801ca9a:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801ca9e:	f000 fa85 	bl	801cfac <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 801caa2:	2001      	movs	r0, #1
 801caa4:	f7ef fb04 	bl	800c0b0 <RBI_GetRFOMaxPowerConfig>
 801caa8:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 801caaa:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801caae:	68fa      	ldr	r2, [r7, #12]
 801cab0:	429a      	cmp	r2, r3
 801cab2:	da01      	bge.n	801cab8 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 801cab4:	68fb      	ldr	r3, [r7, #12]
 801cab6:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 801cab8:	68fb      	ldr	r3, [r7, #12]
 801caba:	2b14      	cmp	r3, #20
 801cabc:	d10e      	bne.n	801cadc <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 801cabe:	2301      	movs	r3, #1
 801cac0:	2200      	movs	r2, #0
 801cac2:	2105      	movs	r1, #5
 801cac4:	2003      	movs	r0, #3
 801cac6:	f7ff fe9f 	bl	801c808 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801caca:	79ba      	ldrb	r2, [r7, #6]
 801cacc:	68fb      	ldr	r3, [r7, #12]
 801cace:	b2db      	uxtb	r3, r3
 801cad0:	1ad3      	subs	r3, r2, r3
 801cad2:	b2db      	uxtb	r3, r3
 801cad4:	3316      	adds	r3, #22
 801cad6:	b2db      	uxtb	r3, r3
 801cad8:	71bb      	strb	r3, [r7, #6]
 801cada:	e031      	b.n	801cb40 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 801cadc:	68fb      	ldr	r3, [r7, #12]
 801cade:	2b11      	cmp	r3, #17
 801cae0:	d10e      	bne.n	801cb00 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 801cae2:	2301      	movs	r3, #1
 801cae4:	2200      	movs	r2, #0
 801cae6:	2103      	movs	r1, #3
 801cae8:	2002      	movs	r0, #2
 801caea:	f7ff fe8d 	bl	801c808 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801caee:	79ba      	ldrb	r2, [r7, #6]
 801caf0:	68fb      	ldr	r3, [r7, #12]
 801caf2:	b2db      	uxtb	r3, r3
 801caf4:	1ad3      	subs	r3, r2, r3
 801caf6:	b2db      	uxtb	r3, r3
 801caf8:	3316      	adds	r3, #22
 801cafa:	b2db      	uxtb	r3, r3
 801cafc:	71bb      	strb	r3, [r7, #6]
 801cafe:	e01f      	b.n	801cb40 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 801cb00:	68fb      	ldr	r3, [r7, #12]
 801cb02:	2b0e      	cmp	r3, #14
 801cb04:	d10e      	bne.n	801cb24 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 801cb06:	2301      	movs	r3, #1
 801cb08:	2200      	movs	r2, #0
 801cb0a:	2102      	movs	r1, #2
 801cb0c:	2002      	movs	r0, #2
 801cb0e:	f7ff fe7b 	bl	801c808 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801cb12:	79ba      	ldrb	r2, [r7, #6]
 801cb14:	68fb      	ldr	r3, [r7, #12]
 801cb16:	b2db      	uxtb	r3, r3
 801cb18:	1ad3      	subs	r3, r2, r3
 801cb1a:	b2db      	uxtb	r3, r3
 801cb1c:	330e      	adds	r3, #14
 801cb1e:	b2db      	uxtb	r3, r3
 801cb20:	71bb      	strb	r3, [r7, #6]
 801cb22:	e00d      	b.n	801cb40 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 801cb24:	2301      	movs	r3, #1
 801cb26:	2200      	movs	r2, #0
 801cb28:	2107      	movs	r1, #7
 801cb2a:	2004      	movs	r0, #4
 801cb2c:	f7ff fe6c 	bl	801c808 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801cb30:	79ba      	ldrb	r2, [r7, #6]
 801cb32:	68fb      	ldr	r3, [r7, #12]
 801cb34:	b2db      	uxtb	r3, r3
 801cb36:	1ad3      	subs	r3, r2, r3
 801cb38:	b2db      	uxtb	r3, r3
 801cb3a:	3316      	adds	r3, #22
 801cb3c:	b2db      	uxtb	r3, r3
 801cb3e:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 801cb40:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801cb44:	f113 0f09 	cmn.w	r3, #9
 801cb48:	da01      	bge.n	801cb4e <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 801cb4a:	23f7      	movs	r3, #247	; 0xf7
 801cb4c:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 801cb4e:	2138      	movs	r1, #56	; 0x38
 801cb50:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801cb54:	f000 fa2a 	bl	801cfac <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 801cb58:	79bb      	ldrb	r3, [r7, #6]
 801cb5a:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 801cb5c:	797b      	ldrb	r3, [r7, #5]
 801cb5e:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 801cb60:	f107 0308 	add.w	r3, r7, #8
 801cb64:	2202      	movs	r2, #2
 801cb66:	4619      	mov	r1, r3
 801cb68:	208e      	movs	r0, #142	; 0x8e
 801cb6a:	f000 facf 	bl	801d10c <SUBGRF_WriteCommand>
}
 801cb6e:	bf00      	nop
 801cb70:	3710      	adds	r7, #16
 801cb72:	46bd      	mov	sp, r7
 801cb74:	bd80      	pop	{r7, pc}
	...

0801cb78 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 801cb78:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801cb7c:	b086      	sub	sp, #24
 801cb7e:	af00      	add	r7, sp, #0
 801cb80:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 801cb82:	2300      	movs	r3, #0
 801cb84:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801cb86:	4a61      	ldr	r2, [pc, #388]	; (801cd0c <SUBGRF_SetModulationParams+0x194>)
 801cb88:	f107 0308 	add.w	r3, r7, #8
 801cb8c:	e892 0003 	ldmia.w	r2, {r0, r1}
 801cb90:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 801cb94:	687b      	ldr	r3, [r7, #4]
 801cb96:	781a      	ldrb	r2, [r3, #0]
 801cb98:	4b5d      	ldr	r3, [pc, #372]	; (801cd10 <SUBGRF_SetModulationParams+0x198>)
 801cb9a:	781b      	ldrb	r3, [r3, #0]
 801cb9c:	429a      	cmp	r2, r3
 801cb9e:	d004      	beq.n	801cbaa <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 801cba0:	687b      	ldr	r3, [r7, #4]
 801cba2:	781b      	ldrb	r3, [r3, #0]
 801cba4:	4618      	mov	r0, r3
 801cba6:	f7ff fef3 	bl	801c990 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 801cbaa:	687b      	ldr	r3, [r7, #4]
 801cbac:	781b      	ldrb	r3, [r3, #0]
 801cbae:	2b03      	cmp	r3, #3
 801cbb0:	f200 80a5 	bhi.w	801ccfe <SUBGRF_SetModulationParams+0x186>
 801cbb4:	a201      	add	r2, pc, #4	; (adr r2, 801cbbc <SUBGRF_SetModulationParams+0x44>)
 801cbb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cbba:	bf00      	nop
 801cbbc:	0801cbcd 	.word	0x0801cbcd
 801cbc0:	0801cc8d 	.word	0x0801cc8d
 801cbc4:	0801cc4f 	.word	0x0801cc4f
 801cbc8:	0801ccbb 	.word	0x0801ccbb
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 801cbcc:	2308      	movs	r3, #8
 801cbce:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 801cbd0:	687b      	ldr	r3, [r7, #4]
 801cbd2:	685b      	ldr	r3, [r3, #4]
 801cbd4:	4a4f      	ldr	r2, [pc, #316]	; (801cd14 <SUBGRF_SetModulationParams+0x19c>)
 801cbd6:	fbb2 f3f3 	udiv	r3, r2, r3
 801cbda:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801cbdc:	697b      	ldr	r3, [r7, #20]
 801cbde:	0c1b      	lsrs	r3, r3, #16
 801cbe0:	b2db      	uxtb	r3, r3
 801cbe2:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801cbe4:	697b      	ldr	r3, [r7, #20]
 801cbe6:	0a1b      	lsrs	r3, r3, #8
 801cbe8:	b2db      	uxtb	r3, r3
 801cbea:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801cbec:	697b      	ldr	r3, [r7, #20]
 801cbee:	b2db      	uxtb	r3, r3
 801cbf0:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801cbf2:	687b      	ldr	r3, [r7, #4]
 801cbf4:	7b1b      	ldrb	r3, [r3, #12]
 801cbf6:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801cbf8:	687b      	ldr	r3, [r7, #4]
 801cbfa:	7b5b      	ldrb	r3, [r3, #13]
 801cbfc:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 801cbfe:	687b      	ldr	r3, [r7, #4]
 801cc00:	689b      	ldr	r3, [r3, #8]
 801cc02:	2200      	movs	r2, #0
 801cc04:	461c      	mov	r4, r3
 801cc06:	4615      	mov	r5, r2
 801cc08:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801cc0c:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801cc10:	4a41      	ldr	r2, [pc, #260]	; (801cd18 <SUBGRF_SetModulationParams+0x1a0>)
 801cc12:	f04f 0300 	mov.w	r3, #0
 801cc16:	4640      	mov	r0, r8
 801cc18:	4649      	mov	r1, r9
 801cc1a:	f7e4 fa9d 	bl	8001158 <__aeabi_uldivmod>
 801cc1e:	4602      	mov	r2, r0
 801cc20:	460b      	mov	r3, r1
 801cc22:	4613      	mov	r3, r2
 801cc24:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 801cc26:	697b      	ldr	r3, [r7, #20]
 801cc28:	0c1b      	lsrs	r3, r3, #16
 801cc2a:	b2db      	uxtb	r3, r3
 801cc2c:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 801cc2e:	697b      	ldr	r3, [r7, #20]
 801cc30:	0a1b      	lsrs	r3, r3, #8
 801cc32:	b2db      	uxtb	r3, r3
 801cc34:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 801cc36:	697b      	ldr	r3, [r7, #20]
 801cc38:	b2db      	uxtb	r3, r3
 801cc3a:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801cc3c:	7cfb      	ldrb	r3, [r7, #19]
 801cc3e:	b29a      	uxth	r2, r3
 801cc40:	f107 0308 	add.w	r3, r7, #8
 801cc44:	4619      	mov	r1, r3
 801cc46:	208b      	movs	r0, #139	; 0x8b
 801cc48:	f000 fa60 	bl	801d10c <SUBGRF_WriteCommand>
        break;
 801cc4c:	e058      	b.n	801cd00 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 801cc4e:	2304      	movs	r3, #4
 801cc50:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 801cc52:	687b      	ldr	r3, [r7, #4]
 801cc54:	691b      	ldr	r3, [r3, #16]
 801cc56:	4a2f      	ldr	r2, [pc, #188]	; (801cd14 <SUBGRF_SetModulationParams+0x19c>)
 801cc58:	fbb2 f3f3 	udiv	r3, r2, r3
 801cc5c:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801cc5e:	697b      	ldr	r3, [r7, #20]
 801cc60:	0c1b      	lsrs	r3, r3, #16
 801cc62:	b2db      	uxtb	r3, r3
 801cc64:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801cc66:	697b      	ldr	r3, [r7, #20]
 801cc68:	0a1b      	lsrs	r3, r3, #8
 801cc6a:	b2db      	uxtb	r3, r3
 801cc6c:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801cc6e:	697b      	ldr	r3, [r7, #20]
 801cc70:	b2db      	uxtb	r3, r3
 801cc72:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 801cc74:	687b      	ldr	r3, [r7, #4]
 801cc76:	7d1b      	ldrb	r3, [r3, #20]
 801cc78:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801cc7a:	7cfb      	ldrb	r3, [r7, #19]
 801cc7c:	b29a      	uxth	r2, r3
 801cc7e:	f107 0308 	add.w	r3, r7, #8
 801cc82:	4619      	mov	r1, r3
 801cc84:	208b      	movs	r0, #139	; 0x8b
 801cc86:	f000 fa41 	bl	801d10c <SUBGRF_WriteCommand>
        break;
 801cc8a:	e039      	b.n	801cd00 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 801cc8c:	2304      	movs	r3, #4
 801cc8e:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 801cc90:	687b      	ldr	r3, [r7, #4]
 801cc92:	7e1b      	ldrb	r3, [r3, #24]
 801cc94:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 801cc96:	687b      	ldr	r3, [r7, #4]
 801cc98:	7e5b      	ldrb	r3, [r3, #25]
 801cc9a:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 801cc9c:	687b      	ldr	r3, [r7, #4]
 801cc9e:	7e9b      	ldrb	r3, [r3, #26]
 801cca0:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 801cca2:	687b      	ldr	r3, [r7, #4]
 801cca4:	7edb      	ldrb	r3, [r3, #27]
 801cca6:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801cca8:	7cfb      	ldrb	r3, [r7, #19]
 801ccaa:	b29a      	uxth	r2, r3
 801ccac:	f107 0308 	add.w	r3, r7, #8
 801ccb0:	4619      	mov	r1, r3
 801ccb2:	208b      	movs	r0, #139	; 0x8b
 801ccb4:	f000 fa2a 	bl	801d10c <SUBGRF_WriteCommand>

        break;
 801ccb8:	e022      	b.n	801cd00 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 801ccba:	2305      	movs	r3, #5
 801ccbc:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 801ccbe:	687b      	ldr	r3, [r7, #4]
 801ccc0:	685b      	ldr	r3, [r3, #4]
 801ccc2:	4a14      	ldr	r2, [pc, #80]	; (801cd14 <SUBGRF_SetModulationParams+0x19c>)
 801ccc4:	fbb2 f3f3 	udiv	r3, r2, r3
 801ccc8:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801ccca:	697b      	ldr	r3, [r7, #20]
 801cccc:	0c1b      	lsrs	r3, r3, #16
 801ccce:	b2db      	uxtb	r3, r3
 801ccd0:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801ccd2:	697b      	ldr	r3, [r7, #20]
 801ccd4:	0a1b      	lsrs	r3, r3, #8
 801ccd6:	b2db      	uxtb	r3, r3
 801ccd8:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801ccda:	697b      	ldr	r3, [r7, #20]
 801ccdc:	b2db      	uxtb	r3, r3
 801ccde:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801cce0:	687b      	ldr	r3, [r7, #4]
 801cce2:	7b1b      	ldrb	r3, [r3, #12]
 801cce4:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801cce6:	687b      	ldr	r3, [r7, #4]
 801cce8:	7b5b      	ldrb	r3, [r3, #13]
 801ccea:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801ccec:	7cfb      	ldrb	r3, [r7, #19]
 801ccee:	b29a      	uxth	r2, r3
 801ccf0:	f107 0308 	add.w	r3, r7, #8
 801ccf4:	4619      	mov	r1, r3
 801ccf6:	208b      	movs	r0, #139	; 0x8b
 801ccf8:	f000 fa08 	bl	801d10c <SUBGRF_WriteCommand>
        break;
 801ccfc:	e000      	b.n	801cd00 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 801ccfe:	bf00      	nop
    }
}
 801cd00:	bf00      	nop
 801cd02:	3718      	adds	r7, #24
 801cd04:	46bd      	mov	sp, r7
 801cd06:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801cd0a:	bf00      	nop
 801cd0c:	0801f6e0 	.word	0x0801f6e0
 801cd10:	20001c15 	.word	0x20001c15
 801cd14:	3d090000 	.word	0x3d090000
 801cd18:	01e84800 	.word	0x01e84800

0801cd1c <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 801cd1c:	b580      	push	{r7, lr}
 801cd1e:	b086      	sub	sp, #24
 801cd20:	af00      	add	r7, sp, #0
 801cd22:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 801cd24:	2300      	movs	r3, #0
 801cd26:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801cd28:	4a48      	ldr	r2, [pc, #288]	; (801ce4c <SUBGRF_SetPacketParams+0x130>)
 801cd2a:	f107 030c 	add.w	r3, r7, #12
 801cd2e:	ca07      	ldmia	r2, {r0, r1, r2}
 801cd30:	c303      	stmia	r3!, {r0, r1}
 801cd32:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 801cd34:	687b      	ldr	r3, [r7, #4]
 801cd36:	781a      	ldrb	r2, [r3, #0]
 801cd38:	4b45      	ldr	r3, [pc, #276]	; (801ce50 <SUBGRF_SetPacketParams+0x134>)
 801cd3a:	781b      	ldrb	r3, [r3, #0]
 801cd3c:	429a      	cmp	r2, r3
 801cd3e:	d004      	beq.n	801cd4a <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 801cd40:	687b      	ldr	r3, [r7, #4]
 801cd42:	781b      	ldrb	r3, [r3, #0]
 801cd44:	4618      	mov	r0, r3
 801cd46:	f7ff fe23 	bl	801c990 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 801cd4a:	687b      	ldr	r3, [r7, #4]
 801cd4c:	781b      	ldrb	r3, [r3, #0]
 801cd4e:	2b03      	cmp	r3, #3
 801cd50:	d878      	bhi.n	801ce44 <SUBGRF_SetPacketParams+0x128>
 801cd52:	a201      	add	r2, pc, #4	; (adr r2, 801cd58 <SUBGRF_SetPacketParams+0x3c>)
 801cd54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cd58:	0801cd69 	.word	0x0801cd69
 801cd5c:	0801cdf9 	.word	0x0801cdf9
 801cd60:	0801cded 	.word	0x0801cded
 801cd64:	0801cd69 	.word	0x0801cd69
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 801cd68:	687b      	ldr	r3, [r7, #4]
 801cd6a:	7a5b      	ldrb	r3, [r3, #9]
 801cd6c:	2bf1      	cmp	r3, #241	; 0xf1
 801cd6e:	d10a      	bne.n	801cd86 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 801cd70:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801cd74:	f7ff faaa 	bl	801c2cc <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 801cd78:	f248 0005 	movw	r0, #32773	; 0x8005
 801cd7c:	f7ff fac6 	bl	801c30c <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 801cd80:	2302      	movs	r3, #2
 801cd82:	75bb      	strb	r3, [r7, #22]
 801cd84:	e011      	b.n	801cdaa <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 801cd86:	687b      	ldr	r3, [r7, #4]
 801cd88:	7a5b      	ldrb	r3, [r3, #9]
 801cd8a:	2bf2      	cmp	r3, #242	; 0xf2
 801cd8c:	d10a      	bne.n	801cda4 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 801cd8e:	f641 500f 	movw	r0, #7439	; 0x1d0f
 801cd92:	f7ff fa9b 	bl	801c2cc <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 801cd96:	f241 0021 	movw	r0, #4129	; 0x1021
 801cd9a:	f7ff fab7 	bl	801c30c <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 801cd9e:	2306      	movs	r3, #6
 801cda0:	75bb      	strb	r3, [r7, #22]
 801cda2:	e002      	b.n	801cdaa <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 801cda4:	687b      	ldr	r3, [r7, #4]
 801cda6:	7a5b      	ldrb	r3, [r3, #9]
 801cda8:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 801cdaa:	2309      	movs	r3, #9
 801cdac:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 801cdae:	687b      	ldr	r3, [r7, #4]
 801cdb0:	885b      	ldrh	r3, [r3, #2]
 801cdb2:	0a1b      	lsrs	r3, r3, #8
 801cdb4:	b29b      	uxth	r3, r3
 801cdb6:	b2db      	uxtb	r3, r3
 801cdb8:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 801cdba:	687b      	ldr	r3, [r7, #4]
 801cdbc:	885b      	ldrh	r3, [r3, #2]
 801cdbe:	b2db      	uxtb	r3, r3
 801cdc0:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 801cdc2:	687b      	ldr	r3, [r7, #4]
 801cdc4:	791b      	ldrb	r3, [r3, #4]
 801cdc6:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 801cdc8:	687b      	ldr	r3, [r7, #4]
 801cdca:	795b      	ldrb	r3, [r3, #5]
 801cdcc:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 801cdce:	687b      	ldr	r3, [r7, #4]
 801cdd0:	799b      	ldrb	r3, [r3, #6]
 801cdd2:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 801cdd4:	687b      	ldr	r3, [r7, #4]
 801cdd6:	79db      	ldrb	r3, [r3, #7]
 801cdd8:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 801cdda:	687b      	ldr	r3, [r7, #4]
 801cddc:	7a1b      	ldrb	r3, [r3, #8]
 801cdde:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 801cde0:	7dbb      	ldrb	r3, [r7, #22]
 801cde2:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 801cde4:	687b      	ldr	r3, [r7, #4]
 801cde6:	7a9b      	ldrb	r3, [r3, #10]
 801cde8:	753b      	strb	r3, [r7, #20]
        break;
 801cdea:	e022      	b.n	801ce32 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 801cdec:	2301      	movs	r3, #1
 801cdee:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 801cdf0:	687b      	ldr	r3, [r7, #4]
 801cdf2:	7b1b      	ldrb	r3, [r3, #12]
 801cdf4:	733b      	strb	r3, [r7, #12]
        break;
 801cdf6:	e01c      	b.n	801ce32 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 801cdf8:	2306      	movs	r3, #6
 801cdfa:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 801cdfc:	687b      	ldr	r3, [r7, #4]
 801cdfe:	89db      	ldrh	r3, [r3, #14]
 801ce00:	0a1b      	lsrs	r3, r3, #8
 801ce02:	b29b      	uxth	r3, r3
 801ce04:	b2db      	uxtb	r3, r3
 801ce06:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 801ce08:	687b      	ldr	r3, [r7, #4]
 801ce0a:	89db      	ldrh	r3, [r3, #14]
 801ce0c:	b2db      	uxtb	r3, r3
 801ce0e:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 801ce10:	687b      	ldr	r3, [r7, #4]
 801ce12:	7c1a      	ldrb	r2, [r3, #16]
 801ce14:	4b0f      	ldr	r3, [pc, #60]	; (801ce54 <SUBGRF_SetPacketParams+0x138>)
 801ce16:	4611      	mov	r1, r2
 801ce18:	7019      	strb	r1, [r3, #0]
 801ce1a:	4613      	mov	r3, r2
 801ce1c:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 801ce1e:	687b      	ldr	r3, [r7, #4]
 801ce20:	7c5b      	ldrb	r3, [r3, #17]
 801ce22:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 801ce24:	687b      	ldr	r3, [r7, #4]
 801ce26:	7c9b      	ldrb	r3, [r3, #18]
 801ce28:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 801ce2a:	687b      	ldr	r3, [r7, #4]
 801ce2c:	7cdb      	ldrb	r3, [r3, #19]
 801ce2e:	747b      	strb	r3, [r7, #17]
        break;
 801ce30:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 801ce32:	7dfb      	ldrb	r3, [r7, #23]
 801ce34:	b29a      	uxth	r2, r3
 801ce36:	f107 030c 	add.w	r3, r7, #12
 801ce3a:	4619      	mov	r1, r3
 801ce3c:	208c      	movs	r0, #140	; 0x8c
 801ce3e:	f000 f965 	bl	801d10c <SUBGRF_WriteCommand>
 801ce42:	e000      	b.n	801ce46 <SUBGRF_SetPacketParams+0x12a>
        return;
 801ce44:	bf00      	nop
}
 801ce46:	3718      	adds	r7, #24
 801ce48:	46bd      	mov	sp, r7
 801ce4a:	bd80      	pop	{r7, pc}
 801ce4c:	0801f6e8 	.word	0x0801f6e8
 801ce50:	20001c15 	.word	0x20001c15
 801ce54:	20001c16 	.word	0x20001c16

0801ce58 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 801ce58:	b580      	push	{r7, lr}
 801ce5a:	b084      	sub	sp, #16
 801ce5c:	af00      	add	r7, sp, #0
 801ce5e:	4603      	mov	r3, r0
 801ce60:	460a      	mov	r2, r1
 801ce62:	71fb      	strb	r3, [r7, #7]
 801ce64:	4613      	mov	r3, r2
 801ce66:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 801ce68:	79fb      	ldrb	r3, [r7, #7]
 801ce6a:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 801ce6c:	79bb      	ldrb	r3, [r7, #6]
 801ce6e:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 801ce70:	f107 030c 	add.w	r3, r7, #12
 801ce74:	2202      	movs	r2, #2
 801ce76:	4619      	mov	r1, r3
 801ce78:	208f      	movs	r0, #143	; 0x8f
 801ce7a:	f000 f947 	bl	801d10c <SUBGRF_WriteCommand>
}
 801ce7e:	bf00      	nop
 801ce80:	3710      	adds	r7, #16
 801ce82:	46bd      	mov	sp, r7
 801ce84:	bd80      	pop	{r7, pc}

0801ce86 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 801ce86:	b580      	push	{r7, lr}
 801ce88:	b082      	sub	sp, #8
 801ce8a:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 801ce8c:	2300      	movs	r3, #0
 801ce8e:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 801ce90:	1d3b      	adds	r3, r7, #4
 801ce92:	2201      	movs	r2, #1
 801ce94:	4619      	mov	r1, r3
 801ce96:	2015      	movs	r0, #21
 801ce98:	f000 f95a 	bl	801d150 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 801ce9c:	793b      	ldrb	r3, [r7, #4]
 801ce9e:	425b      	negs	r3, r3
 801cea0:	105b      	asrs	r3, r3, #1
 801cea2:	71fb      	strb	r3, [r7, #7]
    return rssi;
 801cea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801cea8:	4618      	mov	r0, r3
 801ceaa:	3708      	adds	r7, #8
 801ceac:	46bd      	mov	sp, r7
 801ceae:	bd80      	pop	{r7, pc}

0801ceb0 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 801ceb0:	b580      	push	{r7, lr}
 801ceb2:	b084      	sub	sp, #16
 801ceb4:	af00      	add	r7, sp, #0
 801ceb6:	6078      	str	r0, [r7, #4]
 801ceb8:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 801ceba:	f107 030c 	add.w	r3, r7, #12
 801cebe:	2202      	movs	r2, #2
 801cec0:	4619      	mov	r1, r3
 801cec2:	2013      	movs	r0, #19
 801cec4:	f000 f944 	bl	801d150 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 801cec8:	f7ff fd7e 	bl	801c9c8 <SUBGRF_GetPacketType>
 801cecc:	4603      	mov	r3, r0
 801cece:	2b01      	cmp	r3, #1
 801ced0:	d10d      	bne.n	801ceee <SUBGRF_GetRxBufferStatus+0x3e>
 801ced2:	4b0c      	ldr	r3, [pc, #48]	; (801cf04 <SUBGRF_GetRxBufferStatus+0x54>)
 801ced4:	781b      	ldrb	r3, [r3, #0]
 801ced6:	b2db      	uxtb	r3, r3
 801ced8:	2b01      	cmp	r3, #1
 801ceda:	d108      	bne.n	801ceee <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 801cedc:	f240 7002 	movw	r0, #1794	; 0x702
 801cee0:	f000 f878 	bl	801cfd4 <SUBGRF_ReadRegister>
 801cee4:	4603      	mov	r3, r0
 801cee6:	461a      	mov	r2, r3
 801cee8:	687b      	ldr	r3, [r7, #4]
 801ceea:	701a      	strb	r2, [r3, #0]
 801ceec:	e002      	b.n	801cef4 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 801ceee:	7b3a      	ldrb	r2, [r7, #12]
 801cef0:	687b      	ldr	r3, [r7, #4]
 801cef2:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 801cef4:	7b7a      	ldrb	r2, [r7, #13]
 801cef6:	683b      	ldr	r3, [r7, #0]
 801cef8:	701a      	strb	r2, [r3, #0]
}
 801cefa:	bf00      	nop
 801cefc:	3710      	adds	r7, #16
 801cefe:	46bd      	mov	sp, r7
 801cf00:	bd80      	pop	{r7, pc}
 801cf02:	bf00      	nop
 801cf04:	20001c16 	.word	0x20001c16

0801cf08 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 801cf08:	b580      	push	{r7, lr}
 801cf0a:	b084      	sub	sp, #16
 801cf0c:	af00      	add	r7, sp, #0
 801cf0e:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 801cf10:	f107 030c 	add.w	r3, r7, #12
 801cf14:	2203      	movs	r2, #3
 801cf16:	4619      	mov	r1, r3
 801cf18:	2014      	movs	r0, #20
 801cf1a:	f000 f919 	bl	801d150 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 801cf1e:	f7ff fd53 	bl	801c9c8 <SUBGRF_GetPacketType>
 801cf22:	4603      	mov	r3, r0
 801cf24:	461a      	mov	r2, r3
 801cf26:	687b      	ldr	r3, [r7, #4]
 801cf28:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 801cf2a:	687b      	ldr	r3, [r7, #4]
 801cf2c:	781b      	ldrb	r3, [r3, #0]
 801cf2e:	2b00      	cmp	r3, #0
 801cf30:	d002      	beq.n	801cf38 <SUBGRF_GetPacketStatus+0x30>
 801cf32:	2b01      	cmp	r3, #1
 801cf34:	d013      	beq.n	801cf5e <SUBGRF_GetPacketStatus+0x56>
 801cf36:	e02a      	b.n	801cf8e <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 801cf38:	7b3a      	ldrb	r2, [r7, #12]
 801cf3a:	687b      	ldr	r3, [r7, #4]
 801cf3c:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 801cf3e:	7b7b      	ldrb	r3, [r7, #13]
 801cf40:	425b      	negs	r3, r3
 801cf42:	105b      	asrs	r3, r3, #1
 801cf44:	b25a      	sxtb	r2, r3
 801cf46:	687b      	ldr	r3, [r7, #4]
 801cf48:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 801cf4a:	7bbb      	ldrb	r3, [r7, #14]
 801cf4c:	425b      	negs	r3, r3
 801cf4e:	105b      	asrs	r3, r3, #1
 801cf50:	b25a      	sxtb	r2, r3
 801cf52:	687b      	ldr	r3, [r7, #4]
 801cf54:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 801cf56:	687b      	ldr	r3, [r7, #4]
 801cf58:	2200      	movs	r2, #0
 801cf5a:	609a      	str	r2, [r3, #8]
            break;
 801cf5c:	e020      	b.n	801cfa0 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 801cf5e:	7b3b      	ldrb	r3, [r7, #12]
 801cf60:	425b      	negs	r3, r3
 801cf62:	105b      	asrs	r3, r3, #1
 801cf64:	b25a      	sxtb	r2, r3
 801cf66:	687b      	ldr	r3, [r7, #4]
 801cf68:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 801cf6a:	7b7b      	ldrb	r3, [r7, #13]
 801cf6c:	b25b      	sxtb	r3, r3
 801cf6e:	3302      	adds	r3, #2
 801cf70:	109b      	asrs	r3, r3, #2
 801cf72:	b25a      	sxtb	r2, r3
 801cf74:	687b      	ldr	r3, [r7, #4]
 801cf76:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 801cf78:	7bbb      	ldrb	r3, [r7, #14]
 801cf7a:	425b      	negs	r3, r3
 801cf7c:	105b      	asrs	r3, r3, #1
 801cf7e:	b25a      	sxtb	r2, r3
 801cf80:	687b      	ldr	r3, [r7, #4]
 801cf82:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 801cf84:	4b08      	ldr	r3, [pc, #32]	; (801cfa8 <SUBGRF_GetPacketStatus+0xa0>)
 801cf86:	681a      	ldr	r2, [r3, #0]
 801cf88:	687b      	ldr	r3, [r7, #4]
 801cf8a:	611a      	str	r2, [r3, #16]
            break;
 801cf8c:	e008      	b.n	801cfa0 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 801cf8e:	2214      	movs	r2, #20
 801cf90:	2100      	movs	r1, #0
 801cf92:	6878      	ldr	r0, [r7, #4]
 801cf94:	f000 fc03 	bl	801d79e <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 801cf98:	687b      	ldr	r3, [r7, #4]
 801cf9a:	220f      	movs	r2, #15
 801cf9c:	701a      	strb	r2, [r3, #0]
            break;
 801cf9e:	bf00      	nop
    }
}
 801cfa0:	bf00      	nop
 801cfa2:	3710      	adds	r7, #16
 801cfa4:	46bd      	mov	sp, r7
 801cfa6:	bd80      	pop	{r7, pc}
 801cfa8:	20001c18 	.word	0x20001c18

0801cfac <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 801cfac:	b580      	push	{r7, lr}
 801cfae:	b082      	sub	sp, #8
 801cfb0:	af00      	add	r7, sp, #0
 801cfb2:	4603      	mov	r3, r0
 801cfb4:	460a      	mov	r2, r1
 801cfb6:	80fb      	strh	r3, [r7, #6]
 801cfb8:	4613      	mov	r3, r2
 801cfba:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 801cfbc:	1d7a      	adds	r2, r7, #5
 801cfbe:	88f9      	ldrh	r1, [r7, #6]
 801cfc0:	2301      	movs	r3, #1
 801cfc2:	4803      	ldr	r0, [pc, #12]	; (801cfd0 <SUBGRF_WriteRegister+0x24>)
 801cfc4:	f7eb fc24 	bl	8008810 <HAL_SUBGHZ_WriteRegisters>
}
 801cfc8:	bf00      	nop
 801cfca:	3708      	adds	r7, #8
 801cfcc:	46bd      	mov	sp, r7
 801cfce:	bd80      	pop	{r7, pc}
 801cfd0:	2000025c 	.word	0x2000025c

0801cfd4 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 801cfd4:	b580      	push	{r7, lr}
 801cfd6:	b084      	sub	sp, #16
 801cfd8:	af00      	add	r7, sp, #0
 801cfda:	4603      	mov	r3, r0
 801cfdc:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 801cfde:	f107 020f 	add.w	r2, r7, #15
 801cfe2:	88f9      	ldrh	r1, [r7, #6]
 801cfe4:	2301      	movs	r3, #1
 801cfe6:	4804      	ldr	r0, [pc, #16]	; (801cff8 <SUBGRF_ReadRegister+0x24>)
 801cfe8:	f7eb fc71 	bl	80088ce <HAL_SUBGHZ_ReadRegisters>
    return data;
 801cfec:	7bfb      	ldrb	r3, [r7, #15]
}
 801cfee:	4618      	mov	r0, r3
 801cff0:	3710      	adds	r7, #16
 801cff2:	46bd      	mov	sp, r7
 801cff4:	bd80      	pop	{r7, pc}
 801cff6:	bf00      	nop
 801cff8:	2000025c 	.word	0x2000025c

0801cffc <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801cffc:	b580      	push	{r7, lr}
 801cffe:	b086      	sub	sp, #24
 801d000:	af00      	add	r7, sp, #0
 801d002:	4603      	mov	r3, r0
 801d004:	6039      	str	r1, [r7, #0]
 801d006:	80fb      	strh	r3, [r7, #6]
 801d008:	4613      	mov	r3, r2
 801d00a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d00c:	f3ef 8310 	mrs	r3, PRIMASK
 801d010:	60fb      	str	r3, [r7, #12]
  return(result);
 801d012:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801d014:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801d016:	b672      	cpsid	i
}
 801d018:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 801d01a:	88bb      	ldrh	r3, [r7, #4]
 801d01c:	88f9      	ldrh	r1, [r7, #6]
 801d01e:	683a      	ldr	r2, [r7, #0]
 801d020:	4806      	ldr	r0, [pc, #24]	; (801d03c <SUBGRF_WriteRegisters+0x40>)
 801d022:	f7eb fbf5 	bl	8008810 <HAL_SUBGHZ_WriteRegisters>
 801d026:	697b      	ldr	r3, [r7, #20]
 801d028:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d02a:	693b      	ldr	r3, [r7, #16]
 801d02c:	f383 8810 	msr	PRIMASK, r3
}
 801d030:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801d032:	bf00      	nop
 801d034:	3718      	adds	r7, #24
 801d036:	46bd      	mov	sp, r7
 801d038:	bd80      	pop	{r7, pc}
 801d03a:	bf00      	nop
 801d03c:	2000025c 	.word	0x2000025c

0801d040 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801d040:	b580      	push	{r7, lr}
 801d042:	b086      	sub	sp, #24
 801d044:	af00      	add	r7, sp, #0
 801d046:	4603      	mov	r3, r0
 801d048:	6039      	str	r1, [r7, #0]
 801d04a:	80fb      	strh	r3, [r7, #6]
 801d04c:	4613      	mov	r3, r2
 801d04e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d050:	f3ef 8310 	mrs	r3, PRIMASK
 801d054:	60fb      	str	r3, [r7, #12]
  return(result);
 801d056:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801d058:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801d05a:	b672      	cpsid	i
}
 801d05c:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 801d05e:	88bb      	ldrh	r3, [r7, #4]
 801d060:	88f9      	ldrh	r1, [r7, #6]
 801d062:	683a      	ldr	r2, [r7, #0]
 801d064:	4806      	ldr	r0, [pc, #24]	; (801d080 <SUBGRF_ReadRegisters+0x40>)
 801d066:	f7eb fc32 	bl	80088ce <HAL_SUBGHZ_ReadRegisters>
 801d06a:	697b      	ldr	r3, [r7, #20]
 801d06c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d06e:	693b      	ldr	r3, [r7, #16]
 801d070:	f383 8810 	msr	PRIMASK, r3
}
 801d074:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801d076:	bf00      	nop
 801d078:	3718      	adds	r7, #24
 801d07a:	46bd      	mov	sp, r7
 801d07c:	bd80      	pop	{r7, pc}
 801d07e:	bf00      	nop
 801d080:	2000025c 	.word	0x2000025c

0801d084 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801d084:	b580      	push	{r7, lr}
 801d086:	b086      	sub	sp, #24
 801d088:	af00      	add	r7, sp, #0
 801d08a:	4603      	mov	r3, r0
 801d08c:	6039      	str	r1, [r7, #0]
 801d08e:	71fb      	strb	r3, [r7, #7]
 801d090:	4613      	mov	r3, r2
 801d092:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d094:	f3ef 8310 	mrs	r3, PRIMASK
 801d098:	60fb      	str	r3, [r7, #12]
  return(result);
 801d09a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801d09c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801d09e:	b672      	cpsid	i
}
 801d0a0:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 801d0a2:	79bb      	ldrb	r3, [r7, #6]
 801d0a4:	b29b      	uxth	r3, r3
 801d0a6:	79f9      	ldrb	r1, [r7, #7]
 801d0a8:	683a      	ldr	r2, [r7, #0]
 801d0aa:	4806      	ldr	r0, [pc, #24]	; (801d0c4 <SUBGRF_WriteBuffer+0x40>)
 801d0ac:	f7eb fd23 	bl	8008af6 <HAL_SUBGHZ_WriteBuffer>
 801d0b0:	697b      	ldr	r3, [r7, #20]
 801d0b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d0b4:	693b      	ldr	r3, [r7, #16]
 801d0b6:	f383 8810 	msr	PRIMASK, r3
}
 801d0ba:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801d0bc:	bf00      	nop
 801d0be:	3718      	adds	r7, #24
 801d0c0:	46bd      	mov	sp, r7
 801d0c2:	bd80      	pop	{r7, pc}
 801d0c4:	2000025c 	.word	0x2000025c

0801d0c8 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801d0c8:	b580      	push	{r7, lr}
 801d0ca:	b086      	sub	sp, #24
 801d0cc:	af00      	add	r7, sp, #0
 801d0ce:	4603      	mov	r3, r0
 801d0d0:	6039      	str	r1, [r7, #0]
 801d0d2:	71fb      	strb	r3, [r7, #7]
 801d0d4:	4613      	mov	r3, r2
 801d0d6:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d0d8:	f3ef 8310 	mrs	r3, PRIMASK
 801d0dc:	60fb      	str	r3, [r7, #12]
  return(result);
 801d0de:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801d0e0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801d0e2:	b672      	cpsid	i
}
 801d0e4:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 801d0e6:	79bb      	ldrb	r3, [r7, #6]
 801d0e8:	b29b      	uxth	r3, r3
 801d0ea:	79f9      	ldrb	r1, [r7, #7]
 801d0ec:	683a      	ldr	r2, [r7, #0]
 801d0ee:	4806      	ldr	r0, [pc, #24]	; (801d108 <SUBGRF_ReadBuffer+0x40>)
 801d0f0:	f7eb fd54 	bl	8008b9c <HAL_SUBGHZ_ReadBuffer>
 801d0f4:	697b      	ldr	r3, [r7, #20]
 801d0f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d0f8:	693b      	ldr	r3, [r7, #16]
 801d0fa:	f383 8810 	msr	PRIMASK, r3
}
 801d0fe:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801d100:	bf00      	nop
 801d102:	3718      	adds	r7, #24
 801d104:	46bd      	mov	sp, r7
 801d106:	bd80      	pop	{r7, pc}
 801d108:	2000025c 	.word	0x2000025c

0801d10c <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801d10c:	b580      	push	{r7, lr}
 801d10e:	b086      	sub	sp, #24
 801d110:	af00      	add	r7, sp, #0
 801d112:	4603      	mov	r3, r0
 801d114:	6039      	str	r1, [r7, #0]
 801d116:	71fb      	strb	r3, [r7, #7]
 801d118:	4613      	mov	r3, r2
 801d11a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d11c:	f3ef 8310 	mrs	r3, PRIMASK
 801d120:	60fb      	str	r3, [r7, #12]
  return(result);
 801d122:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801d124:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801d126:	b672      	cpsid	i
}
 801d128:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 801d12a:	88bb      	ldrh	r3, [r7, #4]
 801d12c:	79f9      	ldrb	r1, [r7, #7]
 801d12e:	683a      	ldr	r2, [r7, #0]
 801d130:	4806      	ldr	r0, [pc, #24]	; (801d14c <SUBGRF_WriteCommand+0x40>)
 801d132:	f7eb fc2d 	bl	8008990 <HAL_SUBGHZ_ExecSetCmd>
 801d136:	697b      	ldr	r3, [r7, #20]
 801d138:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d13a:	693b      	ldr	r3, [r7, #16]
 801d13c:	f383 8810 	msr	PRIMASK, r3
}
 801d140:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801d142:	bf00      	nop
 801d144:	3718      	adds	r7, #24
 801d146:	46bd      	mov	sp, r7
 801d148:	bd80      	pop	{r7, pc}
 801d14a:	bf00      	nop
 801d14c:	2000025c 	.word	0x2000025c

0801d150 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801d150:	b580      	push	{r7, lr}
 801d152:	b086      	sub	sp, #24
 801d154:	af00      	add	r7, sp, #0
 801d156:	4603      	mov	r3, r0
 801d158:	6039      	str	r1, [r7, #0]
 801d15a:	71fb      	strb	r3, [r7, #7]
 801d15c:	4613      	mov	r3, r2
 801d15e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d160:	f3ef 8310 	mrs	r3, PRIMASK
 801d164:	60fb      	str	r3, [r7, #12]
  return(result);
 801d166:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801d168:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801d16a:	b672      	cpsid	i
}
 801d16c:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 801d16e:	88bb      	ldrh	r3, [r7, #4]
 801d170:	79f9      	ldrb	r1, [r7, #7]
 801d172:	683a      	ldr	r2, [r7, #0]
 801d174:	4806      	ldr	r0, [pc, #24]	; (801d190 <SUBGRF_ReadCommand+0x40>)
 801d176:	f7eb fc6a 	bl	8008a4e <HAL_SUBGHZ_ExecGetCmd>
 801d17a:	697b      	ldr	r3, [r7, #20]
 801d17c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d17e:	693b      	ldr	r3, [r7, #16]
 801d180:	f383 8810 	msr	PRIMASK, r3
}
 801d184:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801d186:	bf00      	nop
 801d188:	3718      	adds	r7, #24
 801d18a:	46bd      	mov	sp, r7
 801d18c:	bd80      	pop	{r7, pc}
 801d18e:	bf00      	nop
 801d190:	2000025c 	.word	0x2000025c

0801d194 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 801d194:	b580      	push	{r7, lr}
 801d196:	b084      	sub	sp, #16
 801d198:	af00      	add	r7, sp, #0
 801d19a:	4603      	mov	r3, r0
 801d19c:	460a      	mov	r2, r1
 801d19e:	71fb      	strb	r3, [r7, #7]
 801d1a0:	4613      	mov	r3, r2
 801d1a2:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 801d1a4:	2301      	movs	r3, #1
 801d1a6:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 801d1a8:	79bb      	ldrb	r3, [r7, #6]
 801d1aa:	2b01      	cmp	r3, #1
 801d1ac:	d10d      	bne.n	801d1ca <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 801d1ae:	79fb      	ldrb	r3, [r7, #7]
 801d1b0:	2b01      	cmp	r3, #1
 801d1b2:	d104      	bne.n	801d1be <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 801d1b4:	2302      	movs	r3, #2
 801d1b6:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 801d1b8:	2004      	movs	r0, #4
 801d1ba:	f000 f8ef 	bl	801d39c <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 801d1be:	79fb      	ldrb	r3, [r7, #7]
 801d1c0:	2b02      	cmp	r3, #2
 801d1c2:	d107      	bne.n	801d1d4 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 801d1c4:	2303      	movs	r3, #3
 801d1c6:	73fb      	strb	r3, [r7, #15]
 801d1c8:	e004      	b.n	801d1d4 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 801d1ca:	79bb      	ldrb	r3, [r7, #6]
 801d1cc:	2b00      	cmp	r3, #0
 801d1ce:	d101      	bne.n	801d1d4 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 801d1d0:	2301      	movs	r3, #1
 801d1d2:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 801d1d4:	7bfb      	ldrb	r3, [r7, #15]
 801d1d6:	4618      	mov	r0, r3
 801d1d8:	f7ee ff47 	bl	800c06a <RBI_ConfigRFSwitch>
}
 801d1dc:	bf00      	nop
 801d1de:	3710      	adds	r7, #16
 801d1e0:	46bd      	mov	sp, r7
 801d1e2:	bd80      	pop	{r7, pc}

0801d1e4 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 801d1e4:	b580      	push	{r7, lr}
 801d1e6:	b084      	sub	sp, #16
 801d1e8:	af00      	add	r7, sp, #0
 801d1ea:	4603      	mov	r3, r0
 801d1ec:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 801d1ee:	2301      	movs	r3, #1
 801d1f0:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 801d1f2:	f7ee ff48 	bl	800c086 <RBI_GetTxConfig>
 801d1f6:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 801d1f8:	68bb      	ldr	r3, [r7, #8]
 801d1fa:	2b02      	cmp	r3, #2
 801d1fc:	d016      	beq.n	801d22c <SUBGRF_SetRfTxPower+0x48>
 801d1fe:	68bb      	ldr	r3, [r7, #8]
 801d200:	2b02      	cmp	r3, #2
 801d202:	dc16      	bgt.n	801d232 <SUBGRF_SetRfTxPower+0x4e>
 801d204:	68bb      	ldr	r3, [r7, #8]
 801d206:	2b00      	cmp	r3, #0
 801d208:	d003      	beq.n	801d212 <SUBGRF_SetRfTxPower+0x2e>
 801d20a:	68bb      	ldr	r3, [r7, #8]
 801d20c:	2b01      	cmp	r3, #1
 801d20e:	d00a      	beq.n	801d226 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 801d210:	e00f      	b.n	801d232 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 801d212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d216:	2b0f      	cmp	r3, #15
 801d218:	dd02      	ble.n	801d220 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 801d21a:	2302      	movs	r3, #2
 801d21c:	73fb      	strb	r3, [r7, #15]
            break;
 801d21e:	e009      	b.n	801d234 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 801d220:	2301      	movs	r3, #1
 801d222:	73fb      	strb	r3, [r7, #15]
            break;
 801d224:	e006      	b.n	801d234 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 801d226:	2301      	movs	r3, #1
 801d228:	73fb      	strb	r3, [r7, #15]
            break;
 801d22a:	e003      	b.n	801d234 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 801d22c:	2302      	movs	r3, #2
 801d22e:	73fb      	strb	r3, [r7, #15]
            break;
 801d230:	e000      	b.n	801d234 <SUBGRF_SetRfTxPower+0x50>
            break;
 801d232:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 801d234:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801d238:	7bfb      	ldrb	r3, [r7, #15]
 801d23a:	2202      	movs	r2, #2
 801d23c:	4618      	mov	r0, r3
 801d23e:	f7ff fbcd 	bl	801c9dc <SUBGRF_SetTxParams>

    return paSelect;
 801d242:	7bfb      	ldrb	r3, [r7, #15]
}
 801d244:	4618      	mov	r0, r3
 801d246:	3710      	adds	r7, #16
 801d248:	46bd      	mov	sp, r7
 801d24a:	bd80      	pop	{r7, pc}

0801d24c <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 801d24c:	b480      	push	{r7}
 801d24e:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 801d250:	2301      	movs	r3, #1
}
 801d252:	4618      	mov	r0, r3
 801d254:	46bd      	mov	sp, r7
 801d256:	bc80      	pop	{r7}
 801d258:	4770      	bx	lr
	...

0801d25c <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801d25c:	b580      	push	{r7, lr}
 801d25e:	b082      	sub	sp, #8
 801d260:	af00      	add	r7, sp, #0
 801d262:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 801d264:	4b03      	ldr	r3, [pc, #12]	; (801d274 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 801d266:	681b      	ldr	r3, [r3, #0]
 801d268:	2001      	movs	r0, #1
 801d26a:	4798      	blx	r3
}
 801d26c:	bf00      	nop
 801d26e:	3708      	adds	r7, #8
 801d270:	46bd      	mov	sp, r7
 801d272:	bd80      	pop	{r7, pc}
 801d274:	20001c20 	.word	0x20001c20

0801d278 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801d278:	b580      	push	{r7, lr}
 801d27a:	b082      	sub	sp, #8
 801d27c:	af00      	add	r7, sp, #0
 801d27e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 801d280:	4b03      	ldr	r3, [pc, #12]	; (801d290 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 801d282:	681b      	ldr	r3, [r3, #0]
 801d284:	2002      	movs	r0, #2
 801d286:	4798      	blx	r3
}
 801d288:	bf00      	nop
 801d28a:	3708      	adds	r7, #8
 801d28c:	46bd      	mov	sp, r7
 801d28e:	bd80      	pop	{r7, pc}
 801d290:	20001c20 	.word	0x20001c20

0801d294 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 801d294:	b580      	push	{r7, lr}
 801d296:	b082      	sub	sp, #8
 801d298:	af00      	add	r7, sp, #0
 801d29a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 801d29c:	4b03      	ldr	r3, [pc, #12]	; (801d2ac <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 801d29e:	681b      	ldr	r3, [r3, #0]
 801d2a0:	2040      	movs	r0, #64	; 0x40
 801d2a2:	4798      	blx	r3
}
 801d2a4:	bf00      	nop
 801d2a6:	3708      	adds	r7, #8
 801d2a8:	46bd      	mov	sp, r7
 801d2aa:	bd80      	pop	{r7, pc}
 801d2ac:	20001c20 	.word	0x20001c20

0801d2b0 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 801d2b0:	b580      	push	{r7, lr}
 801d2b2:	b082      	sub	sp, #8
 801d2b4:	af00      	add	r7, sp, #0
 801d2b6:	6078      	str	r0, [r7, #4]
 801d2b8:	460b      	mov	r3, r1
 801d2ba:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 801d2bc:	78fb      	ldrb	r3, [r7, #3]
 801d2be:	2b00      	cmp	r3, #0
 801d2c0:	d002      	beq.n	801d2c8 <HAL_SUBGHZ_CADStatusCallback+0x18>
 801d2c2:	2b01      	cmp	r3, #1
 801d2c4:	d005      	beq.n	801d2d2 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 801d2c6:	e00a      	b.n	801d2de <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 801d2c8:	4b07      	ldr	r3, [pc, #28]	; (801d2e8 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801d2ca:	681b      	ldr	r3, [r3, #0]
 801d2cc:	2080      	movs	r0, #128	; 0x80
 801d2ce:	4798      	blx	r3
            break;
 801d2d0:	e005      	b.n	801d2de <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 801d2d2:	4b05      	ldr	r3, [pc, #20]	; (801d2e8 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801d2d4:	681b      	ldr	r3, [r3, #0]
 801d2d6:	f44f 7080 	mov.w	r0, #256	; 0x100
 801d2da:	4798      	blx	r3
            break;
 801d2dc:	bf00      	nop
    }
}
 801d2de:	bf00      	nop
 801d2e0:	3708      	adds	r7, #8
 801d2e2:	46bd      	mov	sp, r7
 801d2e4:	bd80      	pop	{r7, pc}
 801d2e6:	bf00      	nop
 801d2e8:	20001c20 	.word	0x20001c20

0801d2ec <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801d2ec:	b580      	push	{r7, lr}
 801d2ee:	b082      	sub	sp, #8
 801d2f0:	af00      	add	r7, sp, #0
 801d2f2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 801d2f4:	4b04      	ldr	r3, [pc, #16]	; (801d308 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 801d2f6:	681b      	ldr	r3, [r3, #0]
 801d2f8:	f44f 7000 	mov.w	r0, #512	; 0x200
 801d2fc:	4798      	blx	r3
}
 801d2fe:	bf00      	nop
 801d300:	3708      	adds	r7, #8
 801d302:	46bd      	mov	sp, r7
 801d304:	bd80      	pop	{r7, pc}
 801d306:	bf00      	nop
 801d308:	20001c20 	.word	0x20001c20

0801d30c <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801d30c:	b580      	push	{r7, lr}
 801d30e:	b082      	sub	sp, #8
 801d310:	af00      	add	r7, sp, #0
 801d312:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801d314:	4b03      	ldr	r3, [pc, #12]	; (801d324 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 801d316:	681b      	ldr	r3, [r3, #0]
 801d318:	2020      	movs	r0, #32
 801d31a:	4798      	blx	r3
}
 801d31c:	bf00      	nop
 801d31e:	3708      	adds	r7, #8
 801d320:	46bd      	mov	sp, r7
 801d322:	bd80      	pop	{r7, pc}
 801d324:	20001c20 	.word	0x20001c20

0801d328 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801d328:	b580      	push	{r7, lr}
 801d32a:	b082      	sub	sp, #8
 801d32c:	af00      	add	r7, sp, #0
 801d32e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 801d330:	4b03      	ldr	r3, [pc, #12]	; (801d340 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 801d332:	681b      	ldr	r3, [r3, #0]
 801d334:	2004      	movs	r0, #4
 801d336:	4798      	blx	r3
}
 801d338:	bf00      	nop
 801d33a:	3708      	adds	r7, #8
 801d33c:	46bd      	mov	sp, r7
 801d33e:	bd80      	pop	{r7, pc}
 801d340:	20001c20 	.word	0x20001c20

0801d344 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801d344:	b580      	push	{r7, lr}
 801d346:	b082      	sub	sp, #8
 801d348:	af00      	add	r7, sp, #0
 801d34a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 801d34c:	4b03      	ldr	r3, [pc, #12]	; (801d35c <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 801d34e:	681b      	ldr	r3, [r3, #0]
 801d350:	2008      	movs	r0, #8
 801d352:	4798      	blx	r3
}
 801d354:	bf00      	nop
 801d356:	3708      	adds	r7, #8
 801d358:	46bd      	mov	sp, r7
 801d35a:	bd80      	pop	{r7, pc}
 801d35c:	20001c20 	.word	0x20001c20

0801d360 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801d360:	b580      	push	{r7, lr}
 801d362:	b082      	sub	sp, #8
 801d364:	af00      	add	r7, sp, #0
 801d366:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 801d368:	4b03      	ldr	r3, [pc, #12]	; (801d378 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 801d36a:	681b      	ldr	r3, [r3, #0]
 801d36c:	2010      	movs	r0, #16
 801d36e:	4798      	blx	r3
}
 801d370:	bf00      	nop
 801d372:	3708      	adds	r7, #8
 801d374:	46bd      	mov	sp, r7
 801d376:	bd80      	pop	{r7, pc}
 801d378:	20001c20 	.word	0x20001c20

0801d37c <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801d37c:	b580      	push	{r7, lr}
 801d37e:	b082      	sub	sp, #8
 801d380:	af00      	add	r7, sp, #0
 801d382:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 801d384:	4b04      	ldr	r3, [pc, #16]	; (801d398 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 801d386:	681b      	ldr	r3, [r3, #0]
 801d388:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 801d38c:	4798      	blx	r3
}
 801d38e:	bf00      	nop
 801d390:	3708      	adds	r7, #8
 801d392:	46bd      	mov	sp, r7
 801d394:	bd80      	pop	{r7, pc}
 801d396:	bf00      	nop
 801d398:	20001c20 	.word	0x20001c20

0801d39c <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 801d39c:	b580      	push	{r7, lr}
 801d39e:	b084      	sub	sp, #16
 801d3a0:	af00      	add	r7, sp, #0
 801d3a2:	4603      	mov	r3, r0
 801d3a4:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 801d3a6:	f7ee fe7c 	bl	800c0a2 <RBI_IsDCDC>
 801d3aa:	4603      	mov	r3, r0
 801d3ac:	2b01      	cmp	r3, #1
 801d3ae:	d112      	bne.n	801d3d6 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 801d3b0:	f640 1023 	movw	r0, #2339	; 0x923
 801d3b4:	f7ff fe0e 	bl	801cfd4 <SUBGRF_ReadRegister>
 801d3b8:	4603      	mov	r3, r0
 801d3ba:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 801d3bc:	7bfb      	ldrb	r3, [r7, #15]
 801d3be:	f023 0306 	bic.w	r3, r3, #6
 801d3c2:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 801d3c4:	7bfa      	ldrb	r2, [r7, #15]
 801d3c6:	79fb      	ldrb	r3, [r7, #7]
 801d3c8:	4313      	orrs	r3, r2
 801d3ca:	b2db      	uxtb	r3, r3
 801d3cc:	4619      	mov	r1, r3
 801d3ce:	f640 1023 	movw	r0, #2339	; 0x923
 801d3d2:	f7ff fdeb 	bl	801cfac <SUBGRF_WriteRegister>
  }
}
 801d3d6:	bf00      	nop
 801d3d8:	3710      	adds	r7, #16
 801d3da:	46bd      	mov	sp, r7
 801d3dc:	bd80      	pop	{r7, pc}
	...

0801d3e0 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 801d3e0:	b480      	push	{r7}
 801d3e2:	b085      	sub	sp, #20
 801d3e4:	af00      	add	r7, sp, #0
 801d3e6:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 801d3e8:	687b      	ldr	r3, [r7, #4]
 801d3ea:	2b00      	cmp	r3, #0
 801d3ec:	d101      	bne.n	801d3f2 <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 801d3ee:	231f      	movs	r3, #31
 801d3f0:	e016      	b.n	801d420 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801d3f2:	2300      	movs	r3, #0
 801d3f4:	73fb      	strb	r3, [r7, #15]
 801d3f6:	e00f      	b.n	801d418 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 801d3f8:	7bfb      	ldrb	r3, [r7, #15]
 801d3fa:	4a0c      	ldr	r2, [pc, #48]	; (801d42c <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801d3fc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801d400:	687a      	ldr	r2, [r7, #4]
 801d402:	429a      	cmp	r2, r3
 801d404:	d205      	bcs.n	801d412 <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 801d406:	7bfb      	ldrb	r3, [r7, #15]
 801d408:	4a08      	ldr	r2, [pc, #32]	; (801d42c <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801d40a:	00db      	lsls	r3, r3, #3
 801d40c:	4413      	add	r3, r2
 801d40e:	791b      	ldrb	r3, [r3, #4]
 801d410:	e006      	b.n	801d420 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801d412:	7bfb      	ldrb	r3, [r7, #15]
 801d414:	3301      	adds	r3, #1
 801d416:	73fb      	strb	r3, [r7, #15]
 801d418:	7bfb      	ldrb	r3, [r7, #15]
 801d41a:	2b15      	cmp	r3, #21
 801d41c:	d9ec      	bls.n	801d3f8 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 801d41e:	e7fe      	b.n	801d41e <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 801d420:	4618      	mov	r0, r3
 801d422:	3714      	adds	r7, #20
 801d424:	46bd      	mov	sp, r7
 801d426:	bc80      	pop	{r7}
 801d428:	4770      	bx	lr
 801d42a:	bf00      	nop
 801d42c:	0801fd5c 	.word	0x0801fd5c

0801d430 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 801d430:	b580      	push	{r7, lr}
 801d432:	b08a      	sub	sp, #40	; 0x28
 801d434:	af00      	add	r7, sp, #0
 801d436:	6078      	str	r0, [r7, #4]
 801d438:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 801d43a:	4b35      	ldr	r3, [pc, #212]	; (801d510 <SUBGRF_GetCFO+0xe0>)
 801d43c:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 801d43e:	f640 0007 	movw	r0, #2055	; 0x807
 801d442:	f7ff fdc7 	bl	801cfd4 <SUBGRF_ReadRegister>
 801d446:	4603      	mov	r3, r0
 801d448:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 801d44a:	7ffb      	ldrb	r3, [r7, #31]
 801d44c:	08db      	lsrs	r3, r3, #3
 801d44e:	b2db      	uxtb	r3, r3
 801d450:	f003 0303 	and.w	r3, r3, #3
 801d454:	3328      	adds	r3, #40	; 0x28
 801d456:	443b      	add	r3, r7
 801d458:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 801d45c:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 801d45e:	7ffb      	ldrb	r3, [r7, #31]
 801d460:	f003 0307 	and.w	r3, r3, #7
 801d464:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 801d466:	7fba      	ldrb	r2, [r7, #30]
 801d468:	7f7b      	ldrb	r3, [r7, #29]
 801d46a:	3301      	adds	r3, #1
 801d46c:	fa02 f303 	lsl.w	r3, r2, r3
 801d470:	461a      	mov	r2, r3
 801d472:	4b28      	ldr	r3, [pc, #160]	; (801d514 <SUBGRF_GetCFO+0xe4>)
 801d474:	fbb3 f3f2 	udiv	r3, r3, r2
 801d478:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 801d47a:	69ba      	ldr	r2, [r7, #24]
 801d47c:	687b      	ldr	r3, [r7, #4]
 801d47e:	fbb2 f3f3 	udiv	r3, r2, r3
 801d482:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 801d484:	2301      	movs	r3, #1
 801d486:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 801d48a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801d48e:	697a      	ldr	r2, [r7, #20]
 801d490:	fb02 f303 	mul.w	r3, r2, r3
 801d494:	2b07      	cmp	r3, #7
 801d496:	d802      	bhi.n	801d49e <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 801d498:	2302      	movs	r3, #2
 801d49a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 801d49e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801d4a2:	697a      	ldr	r2, [r7, #20]
 801d4a4:	fb02 f303 	mul.w	r3, r2, r3
 801d4a8:	2b03      	cmp	r3, #3
 801d4aa:	d802      	bhi.n	801d4b2 <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 801d4ac:	2304      	movs	r3, #4
 801d4ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 801d4b2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801d4b6:	69bb      	ldr	r3, [r7, #24]
 801d4b8:	fb02 f303 	mul.w	r3, r2, r3
 801d4bc:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 801d4be:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 801d4c2:	f7ff fd87 	bl	801cfd4 <SUBGRF_ReadRegister>
 801d4c6:	4603      	mov	r3, r0
 801d4c8:	021b      	lsls	r3, r3, #8
 801d4ca:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801d4ce:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 801d4d0:	f240 60b1 	movw	r0, #1713	; 0x6b1
 801d4d4:	f7ff fd7e 	bl	801cfd4 <SUBGRF_ReadRegister>
 801d4d8:	4603      	mov	r3, r0
 801d4da:	461a      	mov	r2, r3
 801d4dc:	6a3b      	ldr	r3, [r7, #32]
 801d4de:	4313      	orrs	r3, r2
 801d4e0:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 801d4e2:	6a3b      	ldr	r3, [r7, #32]
 801d4e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801d4e8:	2b00      	cmp	r3, #0
 801d4ea:	d005      	beq.n	801d4f8 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 801d4ec:	6a3b      	ldr	r3, [r7, #32]
 801d4ee:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 801d4f2:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 801d4f6:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 801d4f8:	693b      	ldr	r3, [r7, #16]
 801d4fa:	095b      	lsrs	r3, r3, #5
 801d4fc:	6a3a      	ldr	r2, [r7, #32]
 801d4fe:	fb02 f303 	mul.w	r3, r2, r3
 801d502:	11da      	asrs	r2, r3, #7
 801d504:	683b      	ldr	r3, [r7, #0]
 801d506:	601a      	str	r2, [r3, #0]
}
 801d508:	bf00      	nop
 801d50a:	3728      	adds	r7, #40	; 0x28
 801d50c:	46bd      	mov	sp, r7
 801d50e:	bd80      	pop	{r7, pc}
 801d510:	0c0a0804 	.word	0x0c0a0804
 801d514:	01e84800 	.word	0x01e84800

0801d518 <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 801d518:	b480      	push	{r7}
 801d51a:	b087      	sub	sp, #28
 801d51c:	af00      	add	r7, sp, #0
 801d51e:	4603      	mov	r3, r0
 801d520:	60b9      	str	r1, [r7, #8]
 801d522:	607a      	str	r2, [r7, #4]
 801d524:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 801d526:	2300      	movs	r3, #0
 801d528:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 801d52a:	f04f 33ff 	mov.w	r3, #4294967295
 801d52e:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 801d530:	697b      	ldr	r3, [r7, #20]
}
 801d532:	4618      	mov	r0, r3
 801d534:	371c      	adds	r7, #28
 801d536:	46bd      	mov	sp, r7
 801d538:	bc80      	pop	{r7}
 801d53a:	4770      	bx	lr

0801d53c <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 801d53c:	b480      	push	{r7}
 801d53e:	b087      	sub	sp, #28
 801d540:	af00      	add	r7, sp, #0
 801d542:	4603      	mov	r3, r0
 801d544:	60b9      	str	r1, [r7, #8]
 801d546:	607a      	str	r2, [r7, #4]
 801d548:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 801d54a:	2300      	movs	r3, #0
 801d54c:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 801d54e:	f04f 33ff 	mov.w	r3, #4294967295
 801d552:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 801d554:	697b      	ldr	r3, [r7, #20]
}
 801d556:	4618      	mov	r0, r3
 801d558:	371c      	adds	r7, #28
 801d55a:	46bd      	mov	sp, r7
 801d55c:	bc80      	pop	{r7}
 801d55e:	4770      	bx	lr

0801d560 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 801d560:	b480      	push	{r7}
 801d562:	b085      	sub	sp, #20
 801d564:	af00      	add	r7, sp, #0
 801d566:	60f8      	str	r0, [r7, #12]
 801d568:	60b9      	str	r1, [r7, #8]
 801d56a:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 801d56c:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 801d570:	4618      	mov	r0, r3
 801d572:	3714      	adds	r7, #20
 801d574:	46bd      	mov	sp, r7
 801d576:	bc80      	pop	{r7}
 801d578:	4770      	bx	lr

0801d57a <RFW_DeInit>:

void RFW_DeInit( void )
{
 801d57a:	b480      	push	{r7}
 801d57c:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 801d57e:	bf00      	nop
 801d580:	46bd      	mov	sp, r7
 801d582:	bc80      	pop	{r7}
 801d584:	4770      	bx	lr

0801d586 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 801d586:	b480      	push	{r7}
 801d588:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 801d58a:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 801d58c:	4618      	mov	r0, r3
 801d58e:	46bd      	mov	sp, r7
 801d590:	bc80      	pop	{r7}
 801d592:	4770      	bx	lr

0801d594 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 801d594:	b480      	push	{r7}
 801d596:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 801d598:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 801d59a:	4618      	mov	r0, r3
 801d59c:	46bd      	mov	sp, r7
 801d59e:	bc80      	pop	{r7}
 801d5a0:	4770      	bx	lr

0801d5a2 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 801d5a2:	b480      	push	{r7}
 801d5a4:	b083      	sub	sp, #12
 801d5a6:	af00      	add	r7, sp, #0
 801d5a8:	4603      	mov	r3, r0
 801d5aa:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 801d5ac:	bf00      	nop
 801d5ae:	370c      	adds	r7, #12
 801d5b0:	46bd      	mov	sp, r7
 801d5b2:	bc80      	pop	{r7}
 801d5b4:	4770      	bx	lr

0801d5b6 <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 801d5b6:	b480      	push	{r7}
 801d5b8:	b087      	sub	sp, #28
 801d5ba:	af00      	add	r7, sp, #0
 801d5bc:	60f8      	str	r0, [r7, #12]
 801d5be:	460b      	mov	r3, r1
 801d5c0:	607a      	str	r2, [r7, #4]
 801d5c2:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 801d5c4:	f04f 33ff 	mov.w	r3, #4294967295
 801d5c8:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 801d5ca:	697b      	ldr	r3, [r7, #20]
}
 801d5cc:	4618      	mov	r0, r3
 801d5ce:	371c      	adds	r7, #28
 801d5d0:	46bd      	mov	sp, r7
 801d5d2:	bc80      	pop	{r7}
 801d5d4:	4770      	bx	lr

0801d5d6 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 801d5d6:	b480      	push	{r7}
 801d5d8:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 801d5da:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 801d5de:	4618      	mov	r0, r3
 801d5e0:	46bd      	mov	sp, r7
 801d5e2:	bc80      	pop	{r7}
 801d5e4:	4770      	bx	lr

0801d5e6 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 801d5e6:	b480      	push	{r7}
 801d5e8:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 801d5ea:	bf00      	nop
 801d5ec:	46bd      	mov	sp, r7
 801d5ee:	bc80      	pop	{r7}
 801d5f0:	4770      	bx	lr

0801d5f2 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 801d5f2:	b480      	push	{r7}
 801d5f4:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 801d5f6:	bf00      	nop
 801d5f8:	46bd      	mov	sp, r7
 801d5fa:	bc80      	pop	{r7}
 801d5fc:	4770      	bx	lr

0801d5fe <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 801d5fe:	b480      	push	{r7}
 801d600:	b083      	sub	sp, #12
 801d602:	af00      	add	r7, sp, #0
 801d604:	4603      	mov	r3, r0
 801d606:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 801d608:	bf00      	nop
 801d60a:	370c      	adds	r7, #12
 801d60c:	46bd      	mov	sp, r7
 801d60e:	bc80      	pop	{r7}
 801d610:	4770      	bx	lr
	...

0801d614 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801d614:	b480      	push	{r7}
 801d616:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801d618:	4b04      	ldr	r3, [pc, #16]	; (801d62c <UTIL_LPM_Init+0x18>)
 801d61a:	2200      	movs	r2, #0
 801d61c:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801d61e:	4b04      	ldr	r3, [pc, #16]	; (801d630 <UTIL_LPM_Init+0x1c>)
 801d620:	2200      	movs	r2, #0
 801d622:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801d624:	bf00      	nop
 801d626:	46bd      	mov	sp, r7
 801d628:	bc80      	pop	{r7}
 801d62a:	4770      	bx	lr
 801d62c:	20001c24 	.word	0x20001c24
 801d630:	20001c28 	.word	0x20001c28

0801d634 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801d634:	b480      	push	{r7}
 801d636:	b087      	sub	sp, #28
 801d638:	af00      	add	r7, sp, #0
 801d63a:	6078      	str	r0, [r7, #4]
 801d63c:	460b      	mov	r3, r1
 801d63e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d640:	f3ef 8310 	mrs	r3, PRIMASK
 801d644:	613b      	str	r3, [r7, #16]
  return(result);
 801d646:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801d648:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801d64a:	b672      	cpsid	i
}
 801d64c:	bf00      	nop
  
  switch( state )
 801d64e:	78fb      	ldrb	r3, [r7, #3]
 801d650:	2b00      	cmp	r3, #0
 801d652:	d008      	beq.n	801d666 <UTIL_LPM_SetStopMode+0x32>
 801d654:	2b01      	cmp	r3, #1
 801d656:	d10e      	bne.n	801d676 <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801d658:	4b0d      	ldr	r3, [pc, #52]	; (801d690 <UTIL_LPM_SetStopMode+0x5c>)
 801d65a:	681a      	ldr	r2, [r3, #0]
 801d65c:	687b      	ldr	r3, [r7, #4]
 801d65e:	4313      	orrs	r3, r2
 801d660:	4a0b      	ldr	r2, [pc, #44]	; (801d690 <UTIL_LPM_SetStopMode+0x5c>)
 801d662:	6013      	str	r3, [r2, #0]
      break;
 801d664:	e008      	b.n	801d678 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801d666:	687b      	ldr	r3, [r7, #4]
 801d668:	43da      	mvns	r2, r3
 801d66a:	4b09      	ldr	r3, [pc, #36]	; (801d690 <UTIL_LPM_SetStopMode+0x5c>)
 801d66c:	681b      	ldr	r3, [r3, #0]
 801d66e:	4013      	ands	r3, r2
 801d670:	4a07      	ldr	r2, [pc, #28]	; (801d690 <UTIL_LPM_SetStopMode+0x5c>)
 801d672:	6013      	str	r3, [r2, #0]
      break;
 801d674:	e000      	b.n	801d678 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 801d676:	bf00      	nop
 801d678:	697b      	ldr	r3, [r7, #20]
 801d67a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d67c:	68fb      	ldr	r3, [r7, #12]
 801d67e:	f383 8810 	msr	PRIMASK, r3
}
 801d682:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801d684:	bf00      	nop
 801d686:	371c      	adds	r7, #28
 801d688:	46bd      	mov	sp, r7
 801d68a:	bc80      	pop	{r7}
 801d68c:	4770      	bx	lr
 801d68e:	bf00      	nop
 801d690:	20001c24 	.word	0x20001c24

0801d694 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801d694:	b480      	push	{r7}
 801d696:	b087      	sub	sp, #28
 801d698:	af00      	add	r7, sp, #0
 801d69a:	6078      	str	r0, [r7, #4]
 801d69c:	460b      	mov	r3, r1
 801d69e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d6a0:	f3ef 8310 	mrs	r3, PRIMASK
 801d6a4:	613b      	str	r3, [r7, #16]
  return(result);
 801d6a6:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801d6a8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801d6aa:	b672      	cpsid	i
}
 801d6ac:	bf00      	nop
  
  switch(state)
 801d6ae:	78fb      	ldrb	r3, [r7, #3]
 801d6b0:	2b00      	cmp	r3, #0
 801d6b2:	d008      	beq.n	801d6c6 <UTIL_LPM_SetOffMode+0x32>
 801d6b4:	2b01      	cmp	r3, #1
 801d6b6:	d10e      	bne.n	801d6d6 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801d6b8:	4b0d      	ldr	r3, [pc, #52]	; (801d6f0 <UTIL_LPM_SetOffMode+0x5c>)
 801d6ba:	681a      	ldr	r2, [r3, #0]
 801d6bc:	687b      	ldr	r3, [r7, #4]
 801d6be:	4313      	orrs	r3, r2
 801d6c0:	4a0b      	ldr	r2, [pc, #44]	; (801d6f0 <UTIL_LPM_SetOffMode+0x5c>)
 801d6c2:	6013      	str	r3, [r2, #0]
      break;
 801d6c4:	e008      	b.n	801d6d8 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801d6c6:	687b      	ldr	r3, [r7, #4]
 801d6c8:	43da      	mvns	r2, r3
 801d6ca:	4b09      	ldr	r3, [pc, #36]	; (801d6f0 <UTIL_LPM_SetOffMode+0x5c>)
 801d6cc:	681b      	ldr	r3, [r3, #0]
 801d6ce:	4013      	ands	r3, r2
 801d6d0:	4a07      	ldr	r2, [pc, #28]	; (801d6f0 <UTIL_LPM_SetOffMode+0x5c>)
 801d6d2:	6013      	str	r3, [r2, #0]
      break;
 801d6d4:	e000      	b.n	801d6d8 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801d6d6:	bf00      	nop
 801d6d8:	697b      	ldr	r3, [r7, #20]
 801d6da:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d6dc:	68fb      	ldr	r3, [r7, #12]
 801d6de:	f383 8810 	msr	PRIMASK, r3
}
 801d6e2:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801d6e4:	bf00      	nop
 801d6e6:	371c      	adds	r7, #28
 801d6e8:	46bd      	mov	sp, r7
 801d6ea:	bc80      	pop	{r7}
 801d6ec:	4770      	bx	lr
 801d6ee:	bf00      	nop
 801d6f0:	20001c28 	.word	0x20001c28

0801d6f4 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 801d6f4:	b580      	push	{r7, lr}
 801d6f6:	b084      	sub	sp, #16
 801d6f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d6fa:	f3ef 8310 	mrs	r3, PRIMASK
 801d6fe:	60bb      	str	r3, [r7, #8]
  return(result);
 801d700:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 801d702:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801d704:	b672      	cpsid	i
}
 801d706:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801d708:	4b12      	ldr	r3, [pc, #72]	; (801d754 <UTIL_LPM_EnterLowPower+0x60>)
 801d70a:	681b      	ldr	r3, [r3, #0]
 801d70c:	2b00      	cmp	r3, #0
 801d70e:	d006      	beq.n	801d71e <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 801d710:	4b11      	ldr	r3, [pc, #68]	; (801d758 <UTIL_LPM_EnterLowPower+0x64>)
 801d712:	681b      	ldr	r3, [r3, #0]
 801d714:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801d716:	4b10      	ldr	r3, [pc, #64]	; (801d758 <UTIL_LPM_EnterLowPower+0x64>)
 801d718:	685b      	ldr	r3, [r3, #4]
 801d71a:	4798      	blx	r3
 801d71c:	e010      	b.n	801d740 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801d71e:	4b0f      	ldr	r3, [pc, #60]	; (801d75c <UTIL_LPM_EnterLowPower+0x68>)
 801d720:	681b      	ldr	r3, [r3, #0]
 801d722:	2b00      	cmp	r3, #0
 801d724:	d006      	beq.n	801d734 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 801d726:	4b0c      	ldr	r3, [pc, #48]	; (801d758 <UTIL_LPM_EnterLowPower+0x64>)
 801d728:	689b      	ldr	r3, [r3, #8]
 801d72a:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 801d72c:	4b0a      	ldr	r3, [pc, #40]	; (801d758 <UTIL_LPM_EnterLowPower+0x64>)
 801d72e:	68db      	ldr	r3, [r3, #12]
 801d730:	4798      	blx	r3
 801d732:	e005      	b.n	801d740 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 801d734:	4b08      	ldr	r3, [pc, #32]	; (801d758 <UTIL_LPM_EnterLowPower+0x64>)
 801d736:	691b      	ldr	r3, [r3, #16]
 801d738:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801d73a:	4b07      	ldr	r3, [pc, #28]	; (801d758 <UTIL_LPM_EnterLowPower+0x64>)
 801d73c:	695b      	ldr	r3, [r3, #20]
 801d73e:	4798      	blx	r3
 801d740:	68fb      	ldr	r3, [r7, #12]
 801d742:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d744:	687b      	ldr	r3, [r7, #4]
 801d746:	f383 8810 	msr	PRIMASK, r3
}
 801d74a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 801d74c:	bf00      	nop
 801d74e:	3710      	adds	r7, #16
 801d750:	46bd      	mov	sp, r7
 801d752:	bd80      	pop	{r7, pc}
 801d754:	20001c24 	.word	0x20001c24
 801d758:	0801f74c 	.word	0x0801f74c
 801d75c:	20001c28 	.word	0x20001c28

0801d760 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801d760:	b480      	push	{r7}
 801d762:	b087      	sub	sp, #28
 801d764:	af00      	add	r7, sp, #0
 801d766:	60f8      	str	r0, [r7, #12]
 801d768:	60b9      	str	r1, [r7, #8]
 801d76a:	4613      	mov	r3, r2
 801d76c:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 801d76e:	68fb      	ldr	r3, [r7, #12]
 801d770:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801d772:	68bb      	ldr	r3, [r7, #8]
 801d774:	613b      	str	r3, [r7, #16]

  while( size-- )
 801d776:	e007      	b.n	801d788 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801d778:	693a      	ldr	r2, [r7, #16]
 801d77a:	1c53      	adds	r3, r2, #1
 801d77c:	613b      	str	r3, [r7, #16]
 801d77e:	697b      	ldr	r3, [r7, #20]
 801d780:	1c59      	adds	r1, r3, #1
 801d782:	6179      	str	r1, [r7, #20]
 801d784:	7812      	ldrb	r2, [r2, #0]
 801d786:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801d788:	88fb      	ldrh	r3, [r7, #6]
 801d78a:	1e5a      	subs	r2, r3, #1
 801d78c:	80fa      	strh	r2, [r7, #6]
 801d78e:	2b00      	cmp	r3, #0
 801d790:	d1f2      	bne.n	801d778 <UTIL_MEM_cpy_8+0x18>
    }
}
 801d792:	bf00      	nop
 801d794:	bf00      	nop
 801d796:	371c      	adds	r7, #28
 801d798:	46bd      	mov	sp, r7
 801d79a:	bc80      	pop	{r7}
 801d79c:	4770      	bx	lr

0801d79e <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801d79e:	b480      	push	{r7}
 801d7a0:	b085      	sub	sp, #20
 801d7a2:	af00      	add	r7, sp, #0
 801d7a4:	6078      	str	r0, [r7, #4]
 801d7a6:	460b      	mov	r3, r1
 801d7a8:	70fb      	strb	r3, [r7, #3]
 801d7aa:	4613      	mov	r3, r2
 801d7ac:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801d7ae:	687b      	ldr	r3, [r7, #4]
 801d7b0:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801d7b2:	e004      	b.n	801d7be <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 801d7b4:	68fb      	ldr	r3, [r7, #12]
 801d7b6:	1c5a      	adds	r2, r3, #1
 801d7b8:	60fa      	str	r2, [r7, #12]
 801d7ba:	78fa      	ldrb	r2, [r7, #3]
 801d7bc:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801d7be:	883b      	ldrh	r3, [r7, #0]
 801d7c0:	1e5a      	subs	r2, r3, #1
 801d7c2:	803a      	strh	r2, [r7, #0]
 801d7c4:	2b00      	cmp	r3, #0
 801d7c6:	d1f5      	bne.n	801d7b4 <UTIL_MEM_set_8+0x16>
  }
}
 801d7c8:	bf00      	nop
 801d7ca:	bf00      	nop
 801d7cc:	3714      	adds	r7, #20
 801d7ce:	46bd      	mov	sp, r7
 801d7d0:	bc80      	pop	{r7}
 801d7d2:	4770      	bx	lr

0801d7d4 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801d7d4:	b082      	sub	sp, #8
 801d7d6:	b480      	push	{r7}
 801d7d8:	b087      	sub	sp, #28
 801d7da:	af00      	add	r7, sp, #0
 801d7dc:	60f8      	str	r0, [r7, #12]
 801d7de:	1d38      	adds	r0, r7, #4
 801d7e0:	e880 0006 	stmia.w	r0, {r1, r2}
 801d7e4:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801d7e6:	2300      	movs	r3, #0
 801d7e8:	613b      	str	r3, [r7, #16]
 801d7ea:	2300      	movs	r3, #0
 801d7ec:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 801d7ee:	687a      	ldr	r2, [r7, #4]
 801d7f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d7f2:	4413      	add	r3, r2
 801d7f4:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801d7f6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801d7fa:	b29a      	uxth	r2, r3
 801d7fc:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801d800:	b29b      	uxth	r3, r3
 801d802:	4413      	add	r3, r2
 801d804:	b29b      	uxth	r3, r3
 801d806:	b21b      	sxth	r3, r3
 801d808:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 801d80a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801d80e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801d812:	db0a      	blt.n	801d82a <SysTimeAdd+0x56>
  {
    c.Seconds++;
 801d814:	693b      	ldr	r3, [r7, #16]
 801d816:	3301      	adds	r3, #1
 801d818:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 801d81a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801d81e:	b29b      	uxth	r3, r3
 801d820:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 801d824:	b29b      	uxth	r3, r3
 801d826:	b21b      	sxth	r3, r3
 801d828:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801d82a:	68fb      	ldr	r3, [r7, #12]
 801d82c:	461a      	mov	r2, r3
 801d82e:	f107 0310 	add.w	r3, r7, #16
 801d832:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d836:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801d83a:	68f8      	ldr	r0, [r7, #12]
 801d83c:	371c      	adds	r7, #28
 801d83e:	46bd      	mov	sp, r7
 801d840:	bc80      	pop	{r7}
 801d842:	b002      	add	sp, #8
 801d844:	4770      	bx	lr

0801d846 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801d846:	b082      	sub	sp, #8
 801d848:	b480      	push	{r7}
 801d84a:	b087      	sub	sp, #28
 801d84c:	af00      	add	r7, sp, #0
 801d84e:	60f8      	str	r0, [r7, #12]
 801d850:	1d38      	adds	r0, r7, #4
 801d852:	e880 0006 	stmia.w	r0, {r1, r2}
 801d856:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801d858:	2300      	movs	r3, #0
 801d85a:	613b      	str	r3, [r7, #16]
 801d85c:	2300      	movs	r3, #0
 801d85e:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 801d860:	687a      	ldr	r2, [r7, #4]
 801d862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d864:	1ad3      	subs	r3, r2, r3
 801d866:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801d868:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801d86c:	b29a      	uxth	r2, r3
 801d86e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801d872:	b29b      	uxth	r3, r3
 801d874:	1ad3      	subs	r3, r2, r3
 801d876:	b29b      	uxth	r3, r3
 801d878:	b21b      	sxth	r3, r3
 801d87a:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 801d87c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801d880:	2b00      	cmp	r3, #0
 801d882:	da0a      	bge.n	801d89a <SysTimeSub+0x54>
  {
    c.Seconds--;
 801d884:	693b      	ldr	r3, [r7, #16]
 801d886:	3b01      	subs	r3, #1
 801d888:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 801d88a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801d88e:	b29b      	uxth	r3, r3
 801d890:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 801d894:	b29b      	uxth	r3, r3
 801d896:	b21b      	sxth	r3, r3
 801d898:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801d89a:	68fb      	ldr	r3, [r7, #12]
 801d89c:	461a      	mov	r2, r3
 801d89e:	f107 0310 	add.w	r3, r7, #16
 801d8a2:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d8a6:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801d8aa:	68f8      	ldr	r0, [r7, #12]
 801d8ac:	371c      	adds	r7, #28
 801d8ae:	46bd      	mov	sp, r7
 801d8b0:	bc80      	pop	{r7}
 801d8b2:	b002      	add	sp, #8
 801d8b4:	4770      	bx	lr
	...

0801d8b8 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801d8b8:	b580      	push	{r7, lr}
 801d8ba:	b088      	sub	sp, #32
 801d8bc:	af02      	add	r7, sp, #8
 801d8be:	463b      	mov	r3, r7
 801d8c0:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801d8c4:	2300      	movs	r3, #0
 801d8c6:	60bb      	str	r3, [r7, #8]
 801d8c8:	2300      	movs	r3, #0
 801d8ca:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801d8cc:	4b10      	ldr	r3, [pc, #64]	; (801d910 <SysTimeSet+0x58>)
 801d8ce:	691b      	ldr	r3, [r3, #16]
 801d8d0:	f107 0208 	add.w	r2, r7, #8
 801d8d4:	3204      	adds	r2, #4
 801d8d6:	4610      	mov	r0, r2
 801d8d8:	4798      	blx	r3
 801d8da:	4603      	mov	r3, r0
 801d8dc:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801d8de:	f107 0010 	add.w	r0, r7, #16
 801d8e2:	68fb      	ldr	r3, [r7, #12]
 801d8e4:	9300      	str	r3, [sp, #0]
 801d8e6:	68bb      	ldr	r3, [r7, #8]
 801d8e8:	463a      	mov	r2, r7
 801d8ea:	ca06      	ldmia	r2, {r1, r2}
 801d8ec:	f7ff ffab 	bl	801d846 <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801d8f0:	4b07      	ldr	r3, [pc, #28]	; (801d910 <SysTimeSet+0x58>)
 801d8f2:	681b      	ldr	r3, [r3, #0]
 801d8f4:	693a      	ldr	r2, [r7, #16]
 801d8f6:	4610      	mov	r0, r2
 801d8f8:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801d8fa:	4b05      	ldr	r3, [pc, #20]	; (801d910 <SysTimeSet+0x58>)
 801d8fc:	689b      	ldr	r3, [r3, #8]
 801d8fe:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801d902:	4610      	mov	r0, r2
 801d904:	4798      	blx	r3
}
 801d906:	bf00      	nop
 801d908:	3718      	adds	r7, #24
 801d90a:	46bd      	mov	sp, r7
 801d90c:	bd80      	pop	{r7, pc}
 801d90e:	bf00      	nop
 801d910:	0801f830 	.word	0x0801f830

0801d914 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801d914:	b580      	push	{r7, lr}
 801d916:	b08a      	sub	sp, #40	; 0x28
 801d918:	af02      	add	r7, sp, #8
 801d91a:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801d91c:	2300      	movs	r3, #0
 801d91e:	61bb      	str	r3, [r7, #24]
 801d920:	2300      	movs	r3, #0
 801d922:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801d924:	2300      	movs	r3, #0
 801d926:	613b      	str	r3, [r7, #16]
 801d928:	2300      	movs	r3, #0
 801d92a:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801d92c:	4b14      	ldr	r3, [pc, #80]	; (801d980 <SysTimeGet+0x6c>)
 801d92e:	691b      	ldr	r3, [r3, #16]
 801d930:	f107 0218 	add.w	r2, r7, #24
 801d934:	3204      	adds	r2, #4
 801d936:	4610      	mov	r0, r2
 801d938:	4798      	blx	r3
 801d93a:	4603      	mov	r3, r0
 801d93c:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801d93e:	4b10      	ldr	r3, [pc, #64]	; (801d980 <SysTimeGet+0x6c>)
 801d940:	68db      	ldr	r3, [r3, #12]
 801d942:	4798      	blx	r3
 801d944:	4603      	mov	r3, r0
 801d946:	b21b      	sxth	r3, r3
 801d948:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801d94a:	4b0d      	ldr	r3, [pc, #52]	; (801d980 <SysTimeGet+0x6c>)
 801d94c:	685b      	ldr	r3, [r3, #4]
 801d94e:	4798      	blx	r3
 801d950:	4603      	mov	r3, r0
 801d952:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801d954:	f107 0010 	add.w	r0, r7, #16
 801d958:	69fb      	ldr	r3, [r7, #28]
 801d95a:	9300      	str	r3, [sp, #0]
 801d95c:	69bb      	ldr	r3, [r7, #24]
 801d95e:	f107 0208 	add.w	r2, r7, #8
 801d962:	ca06      	ldmia	r2, {r1, r2}
 801d964:	f7ff ff36 	bl	801d7d4 <SysTimeAdd>

  return sysTime;
 801d968:	687b      	ldr	r3, [r7, #4]
 801d96a:	461a      	mov	r2, r3
 801d96c:	f107 0310 	add.w	r3, r7, #16
 801d970:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d974:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801d978:	6878      	ldr	r0, [r7, #4]
 801d97a:	3720      	adds	r7, #32
 801d97c:	46bd      	mov	sp, r7
 801d97e:	bd80      	pop	{r7, pc}
 801d980:	0801f830 	.word	0x0801f830

0801d984 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801d984:	b580      	push	{r7, lr}
 801d986:	b084      	sub	sp, #16
 801d988:	af00      	add	r7, sp, #0
 801d98a:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801d98c:	2300      	movs	r3, #0
 801d98e:	60bb      	str	r3, [r7, #8]
 801d990:	2300      	movs	r3, #0
 801d992:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801d994:	4b0a      	ldr	r3, [pc, #40]	; (801d9c0 <SysTimeGetMcuTime+0x3c>)
 801d996:	691b      	ldr	r3, [r3, #16]
 801d998:	f107 0208 	add.w	r2, r7, #8
 801d99c:	3204      	adds	r2, #4
 801d99e:	4610      	mov	r0, r2
 801d9a0:	4798      	blx	r3
 801d9a2:	4603      	mov	r3, r0
 801d9a4:	60bb      	str	r3, [r7, #8]

  return calendarTime;
 801d9a6:	687b      	ldr	r3, [r7, #4]
 801d9a8:	461a      	mov	r2, r3
 801d9aa:	f107 0308 	add.w	r3, r7, #8
 801d9ae:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d9b2:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801d9b6:	6878      	ldr	r0, [r7, #4]
 801d9b8:	3710      	adds	r7, #16
 801d9ba:	46bd      	mov	sp, r7
 801d9bc:	bd80      	pop	{r7, pc}
 801d9be:	bf00      	nop
 801d9c0:	0801f830 	.word	0x0801f830

0801d9c4 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 801d9c4:	b580      	push	{r7, lr}
 801d9c6:	b088      	sub	sp, #32
 801d9c8:	af02      	add	r7, sp, #8
 801d9ca:	463b      	mov	r3, r7
 801d9cc:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801d9d0:	4b0f      	ldr	r3, [pc, #60]	; (801da10 <SysTimeToMs+0x4c>)
 801d9d2:	68db      	ldr	r3, [r3, #12]
 801d9d4:	4798      	blx	r3
 801d9d6:	4603      	mov	r3, r0
 801d9d8:	b21b      	sxth	r3, r3
 801d9da:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801d9dc:	4b0c      	ldr	r3, [pc, #48]	; (801da10 <SysTimeToMs+0x4c>)
 801d9de:	685b      	ldr	r3, [r3, #4]
 801d9e0:	4798      	blx	r3
 801d9e2:	4603      	mov	r3, r0
 801d9e4:	613b      	str	r3, [r7, #16]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 801d9e6:	f107 0008 	add.w	r0, r7, #8
 801d9ea:	697b      	ldr	r3, [r7, #20]
 801d9ec:	9300      	str	r3, [sp, #0]
 801d9ee:	693b      	ldr	r3, [r7, #16]
 801d9f0:	463a      	mov	r2, r7
 801d9f2:	ca06      	ldmia	r2, {r1, r2}
 801d9f4:	f7ff ff27 	bl	801d846 <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 801d9f8:	68bb      	ldr	r3, [r7, #8]
 801d9fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801d9fe:	fb02 f303 	mul.w	r3, r2, r3
 801da02:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801da06:	4413      	add	r3, r2
}
 801da08:	4618      	mov	r0, r3
 801da0a:	3718      	adds	r7, #24
 801da0c:	46bd      	mov	sp, r7
 801da0e:	bd80      	pop	{r7, pc}
 801da10:	0801f830 	.word	0x0801f830

0801da14 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 801da14:	b580      	push	{r7, lr}
 801da16:	b08a      	sub	sp, #40	; 0x28
 801da18:	af02      	add	r7, sp, #8
 801da1a:	6078      	str	r0, [r7, #4]
 801da1c:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 801da1e:	683b      	ldr	r3, [r7, #0]
 801da20:	4a19      	ldr	r2, [pc, #100]	; (801da88 <SysTimeFromMs+0x74>)
 801da22:	fba2 2303 	umull	r2, r3, r2, r3
 801da26:	099b      	lsrs	r3, r3, #6
 801da28:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 801da2a:	69fb      	ldr	r3, [r7, #28]
 801da2c:	617b      	str	r3, [r7, #20]
 801da2e:	683b      	ldr	r3, [r7, #0]
 801da30:	b29a      	uxth	r2, r3
 801da32:	69fb      	ldr	r3, [r7, #28]
 801da34:	b29b      	uxth	r3, r3
 801da36:	4619      	mov	r1, r3
 801da38:	0149      	lsls	r1, r1, #5
 801da3a:	1ac9      	subs	r1, r1, r3
 801da3c:	0089      	lsls	r1, r1, #2
 801da3e:	440b      	add	r3, r1
 801da40:	00db      	lsls	r3, r3, #3
 801da42:	b29b      	uxth	r3, r3
 801da44:	1ad3      	subs	r3, r2, r3
 801da46:	b29b      	uxth	r3, r3
 801da48:	b21b      	sxth	r3, r3
 801da4a:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 801da4c:	f107 030c 	add.w	r3, r7, #12
 801da50:	2200      	movs	r2, #0
 801da52:	601a      	str	r2, [r3, #0]
 801da54:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801da56:	4b0d      	ldr	r3, [pc, #52]	; (801da8c <SysTimeFromMs+0x78>)
 801da58:	68db      	ldr	r3, [r3, #12]
 801da5a:	4798      	blx	r3
 801da5c:	4603      	mov	r3, r0
 801da5e:	b21b      	sxth	r3, r3
 801da60:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801da62:	4b0a      	ldr	r3, [pc, #40]	; (801da8c <SysTimeFromMs+0x78>)
 801da64:	685b      	ldr	r3, [r3, #4]
 801da66:	4798      	blx	r3
 801da68:	4603      	mov	r3, r0
 801da6a:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 801da6c:	6878      	ldr	r0, [r7, #4]
 801da6e:	693b      	ldr	r3, [r7, #16]
 801da70:	9300      	str	r3, [sp, #0]
 801da72:	68fb      	ldr	r3, [r7, #12]
 801da74:	f107 0214 	add.w	r2, r7, #20
 801da78:	ca06      	ldmia	r2, {r1, r2}
 801da7a:	f7ff feab 	bl	801d7d4 <SysTimeAdd>
}
 801da7e:	6878      	ldr	r0, [r7, #4]
 801da80:	3720      	adds	r7, #32
 801da82:	46bd      	mov	sp, r7
 801da84:	bd80      	pop	{r7, pc}
 801da86:	bf00      	nop
 801da88:	10624dd3 	.word	0x10624dd3
 801da8c:	0801f830 	.word	0x0801f830

0801da90 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801da90:	b480      	push	{r7}
 801da92:	b085      	sub	sp, #20
 801da94:	af00      	add	r7, sp, #0
 801da96:	6078      	str	r0, [r7, #4]
  int i = 0;
 801da98:	2300      	movs	r3, #0
 801da9a:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801da9c:	e00e      	b.n	801dabc <ee_skip_atoi+0x2c>
 801da9e:	68fa      	ldr	r2, [r7, #12]
 801daa0:	4613      	mov	r3, r2
 801daa2:	009b      	lsls	r3, r3, #2
 801daa4:	4413      	add	r3, r2
 801daa6:	005b      	lsls	r3, r3, #1
 801daa8:	4618      	mov	r0, r3
 801daaa:	687b      	ldr	r3, [r7, #4]
 801daac:	681b      	ldr	r3, [r3, #0]
 801daae:	1c59      	adds	r1, r3, #1
 801dab0:	687a      	ldr	r2, [r7, #4]
 801dab2:	6011      	str	r1, [r2, #0]
 801dab4:	781b      	ldrb	r3, [r3, #0]
 801dab6:	4403      	add	r3, r0
 801dab8:	3b30      	subs	r3, #48	; 0x30
 801daba:	60fb      	str	r3, [r7, #12]
 801dabc:	687b      	ldr	r3, [r7, #4]
 801dabe:	681b      	ldr	r3, [r3, #0]
 801dac0:	781b      	ldrb	r3, [r3, #0]
 801dac2:	2b2f      	cmp	r3, #47	; 0x2f
 801dac4:	d904      	bls.n	801dad0 <ee_skip_atoi+0x40>
 801dac6:	687b      	ldr	r3, [r7, #4]
 801dac8:	681b      	ldr	r3, [r3, #0]
 801daca:	781b      	ldrb	r3, [r3, #0]
 801dacc:	2b39      	cmp	r3, #57	; 0x39
 801dace:	d9e6      	bls.n	801da9e <ee_skip_atoi+0xe>
  return i;
 801dad0:	68fb      	ldr	r3, [r7, #12]
}
 801dad2:	4618      	mov	r0, r3
 801dad4:	3714      	adds	r7, #20
 801dad6:	46bd      	mov	sp, r7
 801dad8:	bc80      	pop	{r7}
 801dada:	4770      	bx	lr

0801dadc <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801dadc:	b480      	push	{r7}
 801dade:	b099      	sub	sp, #100	; 0x64
 801dae0:	af00      	add	r7, sp, #0
 801dae2:	60f8      	str	r0, [r7, #12]
 801dae4:	60b9      	str	r1, [r7, #8]
 801dae6:	607a      	str	r2, [r7, #4]
 801dae8:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801daea:	4b71      	ldr	r3, [pc, #452]	; (801dcb0 <ee_number+0x1d4>)
 801daec:	681b      	ldr	r3, [r3, #0]
 801daee:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801daf0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801daf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801daf6:	2b00      	cmp	r3, #0
 801daf8:	d002      	beq.n	801db00 <ee_number+0x24>
 801dafa:	4b6e      	ldr	r3, [pc, #440]	; (801dcb4 <ee_number+0x1d8>)
 801dafc:	681b      	ldr	r3, [r3, #0]
 801dafe:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801db00:	683b      	ldr	r3, [r7, #0]
 801db02:	2b01      	cmp	r3, #1
 801db04:	dd02      	ble.n	801db0c <ee_number+0x30>
 801db06:	683b      	ldr	r3, [r7, #0]
 801db08:	2b24      	cmp	r3, #36	; 0x24
 801db0a:	dd01      	ble.n	801db10 <ee_number+0x34>
 801db0c:	2300      	movs	r3, #0
 801db0e:	e0ca      	b.n	801dca6 <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 801db10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801db12:	f003 0301 	and.w	r3, r3, #1
 801db16:	2b00      	cmp	r3, #0
 801db18:	d001      	beq.n	801db1e <ee_number+0x42>
 801db1a:	2330      	movs	r3, #48	; 0x30
 801db1c:	e000      	b.n	801db20 <ee_number+0x44>
 801db1e:	2320      	movs	r3, #32
 801db20:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  sign = 0;
 801db24:	2300      	movs	r3, #0
 801db26:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (type & SIGN)
 801db2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801db2c:	f003 0302 	and.w	r3, r3, #2
 801db30:	2b00      	cmp	r3, #0
 801db32:	d00b      	beq.n	801db4c <ee_number+0x70>
  {
    if (num < 0)
 801db34:	687b      	ldr	r3, [r7, #4]
 801db36:	2b00      	cmp	r3, #0
 801db38:	da08      	bge.n	801db4c <ee_number+0x70>
    {
      sign = '-';
 801db3a:	232d      	movs	r3, #45	; 0x2d
 801db3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      num = -num;
 801db40:	687b      	ldr	r3, [r7, #4]
 801db42:	425b      	negs	r3, r3
 801db44:	607b      	str	r3, [r7, #4]
      size--;
 801db46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801db48:	3b01      	subs	r3, #1
 801db4a:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 801db4c:	2300      	movs	r3, #0
 801db4e:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 801db50:	687b      	ldr	r3, [r7, #4]
 801db52:	2b00      	cmp	r3, #0
 801db54:	d11e      	bne.n	801db94 <ee_number+0xb8>
    tmp[i++] = '0';
 801db56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801db58:	1c5a      	adds	r2, r3, #1
 801db5a:	657a      	str	r2, [r7, #84]	; 0x54
 801db5c:	3360      	adds	r3, #96	; 0x60
 801db5e:	443b      	add	r3, r7
 801db60:	2230      	movs	r2, #48	; 0x30
 801db62:	f803 2c50 	strb.w	r2, [r3, #-80]
 801db66:	e018      	b.n	801db9a <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801db68:	687b      	ldr	r3, [r7, #4]
 801db6a:	683a      	ldr	r2, [r7, #0]
 801db6c:	fbb3 f1f2 	udiv	r1, r3, r2
 801db70:	fb01 f202 	mul.w	r2, r1, r2
 801db74:	1a9b      	subs	r3, r3, r2
 801db76:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801db78:	441a      	add	r2, r3
 801db7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801db7c:	1c59      	adds	r1, r3, #1
 801db7e:	6579      	str	r1, [r7, #84]	; 0x54
 801db80:	7812      	ldrb	r2, [r2, #0]
 801db82:	3360      	adds	r3, #96	; 0x60
 801db84:	443b      	add	r3, r7
 801db86:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 801db8a:	687a      	ldr	r2, [r7, #4]
 801db8c:	683b      	ldr	r3, [r7, #0]
 801db8e:	fbb2 f3f3 	udiv	r3, r2, r3
 801db92:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801db94:	687b      	ldr	r3, [r7, #4]
 801db96:	2b00      	cmp	r3, #0
 801db98:	d1e6      	bne.n	801db68 <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 801db9a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801db9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801db9e:	429a      	cmp	r2, r3
 801dba0:	dd01      	ble.n	801dba6 <ee_number+0xca>
 801dba2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801dba4:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 801dba6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801dba8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801dbaa:	1ad3      	subs	r3, r2, r3
 801dbac:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801dbae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801dbb0:	f003 0301 	and.w	r3, r3, #1
 801dbb4:	2b00      	cmp	r3, #0
 801dbb6:	d112      	bne.n	801dbde <ee_number+0x102>
 801dbb8:	e00c      	b.n	801dbd4 <ee_number+0xf8>
 801dbba:	68fb      	ldr	r3, [r7, #12]
 801dbbc:	1c5a      	adds	r2, r3, #1
 801dbbe:	60fa      	str	r2, [r7, #12]
 801dbc0:	2220      	movs	r2, #32
 801dbc2:	701a      	strb	r2, [r3, #0]
 801dbc4:	68bb      	ldr	r3, [r7, #8]
 801dbc6:	3b01      	subs	r3, #1
 801dbc8:	60bb      	str	r3, [r7, #8]
 801dbca:	68bb      	ldr	r3, [r7, #8]
 801dbcc:	2b00      	cmp	r3, #0
 801dbce:	d101      	bne.n	801dbd4 <ee_number+0xf8>
 801dbd0:	68fb      	ldr	r3, [r7, #12]
 801dbd2:	e068      	b.n	801dca6 <ee_number+0x1ca>
 801dbd4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801dbd6:	1e5a      	subs	r2, r3, #1
 801dbd8:	66ba      	str	r2, [r7, #104]	; 0x68
 801dbda:	2b00      	cmp	r3, #0
 801dbdc:	dced      	bgt.n	801dbba <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801dbde:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801dbe2:	2b00      	cmp	r3, #0
 801dbe4:	d01b      	beq.n	801dc1e <ee_number+0x142>
 801dbe6:	68fb      	ldr	r3, [r7, #12]
 801dbe8:	1c5a      	adds	r2, r3, #1
 801dbea:	60fa      	str	r2, [r7, #12]
 801dbec:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 801dbf0:	701a      	strb	r2, [r3, #0]
 801dbf2:	68bb      	ldr	r3, [r7, #8]
 801dbf4:	3b01      	subs	r3, #1
 801dbf6:	60bb      	str	r3, [r7, #8]
 801dbf8:	68bb      	ldr	r3, [r7, #8]
 801dbfa:	2b00      	cmp	r3, #0
 801dbfc:	d10f      	bne.n	801dc1e <ee_number+0x142>
 801dbfe:	68fb      	ldr	r3, [r7, #12]
 801dc00:	e051      	b.n	801dca6 <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801dc02:	68fb      	ldr	r3, [r7, #12]
 801dc04:	1c5a      	adds	r2, r3, #1
 801dc06:	60fa      	str	r2, [r7, #12]
 801dc08:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 801dc0c:	701a      	strb	r2, [r3, #0]
 801dc0e:	68bb      	ldr	r3, [r7, #8]
 801dc10:	3b01      	subs	r3, #1
 801dc12:	60bb      	str	r3, [r7, #8]
 801dc14:	68bb      	ldr	r3, [r7, #8]
 801dc16:	2b00      	cmp	r3, #0
 801dc18:	d101      	bne.n	801dc1e <ee_number+0x142>
 801dc1a:	68fb      	ldr	r3, [r7, #12]
 801dc1c:	e043      	b.n	801dca6 <ee_number+0x1ca>
 801dc1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801dc20:	1e5a      	subs	r2, r3, #1
 801dc22:	66ba      	str	r2, [r7, #104]	; 0x68
 801dc24:	2b00      	cmp	r3, #0
 801dc26:	dcec      	bgt.n	801dc02 <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801dc28:	e00c      	b.n	801dc44 <ee_number+0x168>
 801dc2a:	68fb      	ldr	r3, [r7, #12]
 801dc2c:	1c5a      	adds	r2, r3, #1
 801dc2e:	60fa      	str	r2, [r7, #12]
 801dc30:	2230      	movs	r2, #48	; 0x30
 801dc32:	701a      	strb	r2, [r3, #0]
 801dc34:	68bb      	ldr	r3, [r7, #8]
 801dc36:	3b01      	subs	r3, #1
 801dc38:	60bb      	str	r3, [r7, #8]
 801dc3a:	68bb      	ldr	r3, [r7, #8]
 801dc3c:	2b00      	cmp	r3, #0
 801dc3e:	d101      	bne.n	801dc44 <ee_number+0x168>
 801dc40:	68fb      	ldr	r3, [r7, #12]
 801dc42:	e030      	b.n	801dca6 <ee_number+0x1ca>
 801dc44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801dc46:	1e5a      	subs	r2, r3, #1
 801dc48:	66fa      	str	r2, [r7, #108]	; 0x6c
 801dc4a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801dc4c:	429a      	cmp	r2, r3
 801dc4e:	dbec      	blt.n	801dc2a <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801dc50:	e010      	b.n	801dc74 <ee_number+0x198>
 801dc52:	68fb      	ldr	r3, [r7, #12]
 801dc54:	1c5a      	adds	r2, r3, #1
 801dc56:	60fa      	str	r2, [r7, #12]
 801dc58:	f107 0110 	add.w	r1, r7, #16
 801dc5c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801dc5e:	440a      	add	r2, r1
 801dc60:	7812      	ldrb	r2, [r2, #0]
 801dc62:	701a      	strb	r2, [r3, #0]
 801dc64:	68bb      	ldr	r3, [r7, #8]
 801dc66:	3b01      	subs	r3, #1
 801dc68:	60bb      	str	r3, [r7, #8]
 801dc6a:	68bb      	ldr	r3, [r7, #8]
 801dc6c:	2b00      	cmp	r3, #0
 801dc6e:	d101      	bne.n	801dc74 <ee_number+0x198>
 801dc70:	68fb      	ldr	r3, [r7, #12]
 801dc72:	e018      	b.n	801dca6 <ee_number+0x1ca>
 801dc74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801dc76:	1e5a      	subs	r2, r3, #1
 801dc78:	657a      	str	r2, [r7, #84]	; 0x54
 801dc7a:	2b00      	cmp	r3, #0
 801dc7c:	dce9      	bgt.n	801dc52 <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 801dc7e:	e00c      	b.n	801dc9a <ee_number+0x1be>
 801dc80:	68fb      	ldr	r3, [r7, #12]
 801dc82:	1c5a      	adds	r2, r3, #1
 801dc84:	60fa      	str	r2, [r7, #12]
 801dc86:	2220      	movs	r2, #32
 801dc88:	701a      	strb	r2, [r3, #0]
 801dc8a:	68bb      	ldr	r3, [r7, #8]
 801dc8c:	3b01      	subs	r3, #1
 801dc8e:	60bb      	str	r3, [r7, #8]
 801dc90:	68bb      	ldr	r3, [r7, #8]
 801dc92:	2b00      	cmp	r3, #0
 801dc94:	d101      	bne.n	801dc9a <ee_number+0x1be>
 801dc96:	68fb      	ldr	r3, [r7, #12]
 801dc98:	e005      	b.n	801dca6 <ee_number+0x1ca>
 801dc9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801dc9c:	1e5a      	subs	r2, r3, #1
 801dc9e:	66ba      	str	r2, [r7, #104]	; 0x68
 801dca0:	2b00      	cmp	r3, #0
 801dca2:	dced      	bgt.n	801dc80 <ee_number+0x1a4>

  return str;
 801dca4:	68fb      	ldr	r3, [r7, #12]
}
 801dca6:	4618      	mov	r0, r3
 801dca8:	3764      	adds	r7, #100	; 0x64
 801dcaa:	46bd      	mov	sp, r7
 801dcac:	bc80      	pop	{r7}
 801dcae:	4770      	bx	lr
 801dcb0:	2000013c 	.word	0x2000013c
 801dcb4:	20000140 	.word	0x20000140

0801dcb8 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801dcb8:	b580      	push	{r7, lr}
 801dcba:	b092      	sub	sp, #72	; 0x48
 801dcbc:	af04      	add	r7, sp, #16
 801dcbe:	60f8      	str	r0, [r7, #12]
 801dcc0:	60b9      	str	r1, [r7, #8]
 801dcc2:	607a      	str	r2, [r7, #4]
 801dcc4:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801dcc6:	68bb      	ldr	r3, [r7, #8]
 801dcc8:	2b00      	cmp	r3, #0
 801dcca:	dc01      	bgt.n	801dcd0 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801dccc:	2300      	movs	r3, #0
 801dcce:	e13e      	b.n	801df4e <tiny_vsnprintf_like+0x296>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801dcd0:	68fb      	ldr	r3, [r7, #12]
 801dcd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 801dcd4:	e128      	b.n	801df28 <tiny_vsnprintf_like+0x270>
  {
    CHECK_STR_SIZE(buf, str, size);
 801dcd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801dcd8:	68fb      	ldr	r3, [r7, #12]
 801dcda:	1ad2      	subs	r2, r2, r3
 801dcdc:	68bb      	ldr	r3, [r7, #8]
 801dcde:	3b01      	subs	r3, #1
 801dce0:	429a      	cmp	r2, r3
 801dce2:	f280 812e 	bge.w	801df42 <tiny_vsnprintf_like+0x28a>

    if (*fmt != '%')
 801dce6:	687b      	ldr	r3, [r7, #4]
 801dce8:	781b      	ldrb	r3, [r3, #0]
 801dcea:	2b25      	cmp	r3, #37	; 0x25
 801dcec:	d006      	beq.n	801dcfc <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801dcee:	687a      	ldr	r2, [r7, #4]
 801dcf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dcf2:	1c59      	adds	r1, r3, #1
 801dcf4:	62f9      	str	r1, [r7, #44]	; 0x2c
 801dcf6:	7812      	ldrb	r2, [r2, #0]
 801dcf8:	701a      	strb	r2, [r3, #0]
      continue;
 801dcfa:	e112      	b.n	801df22 <tiny_vsnprintf_like+0x26a>
    }

    // Process flags
    flags = 0;
 801dcfc:	2300      	movs	r3, #0
 801dcfe:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801dd00:	687b      	ldr	r3, [r7, #4]
 801dd02:	3301      	adds	r3, #1
 801dd04:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801dd06:	687b      	ldr	r3, [r7, #4]
 801dd08:	781b      	ldrb	r3, [r3, #0]
 801dd0a:	2b30      	cmp	r3, #48	; 0x30
 801dd0c:	d103      	bne.n	801dd16 <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801dd0e:	6a3b      	ldr	r3, [r7, #32]
 801dd10:	f043 0301 	orr.w	r3, r3, #1
 801dd14:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 801dd16:	f04f 33ff 	mov.w	r3, #4294967295
 801dd1a:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801dd1c:	687b      	ldr	r3, [r7, #4]
 801dd1e:	781b      	ldrb	r3, [r3, #0]
 801dd20:	2b2f      	cmp	r3, #47	; 0x2f
 801dd22:	d908      	bls.n	801dd36 <tiny_vsnprintf_like+0x7e>
 801dd24:	687b      	ldr	r3, [r7, #4]
 801dd26:	781b      	ldrb	r3, [r3, #0]
 801dd28:	2b39      	cmp	r3, #57	; 0x39
 801dd2a:	d804      	bhi.n	801dd36 <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 801dd2c:	1d3b      	adds	r3, r7, #4
 801dd2e:	4618      	mov	r0, r3
 801dd30:	f7ff feae 	bl	801da90 <ee_skip_atoi>
 801dd34:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 801dd36:	f04f 33ff 	mov.w	r3, #4294967295
 801dd3a:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 801dd3c:	f04f 33ff 	mov.w	r3, #4294967295
 801dd40:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 801dd42:	230a      	movs	r3, #10
 801dd44:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 801dd46:	687b      	ldr	r3, [r7, #4]
 801dd48:	781b      	ldrb	r3, [r3, #0]
 801dd4a:	3b58      	subs	r3, #88	; 0x58
 801dd4c:	2b20      	cmp	r3, #32
 801dd4e:	f200 8094 	bhi.w	801de7a <tiny_vsnprintf_like+0x1c2>
 801dd52:	a201      	add	r2, pc, #4	; (adr r2, 801dd58 <tiny_vsnprintf_like+0xa0>)
 801dd54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801dd58:	0801de63 	.word	0x0801de63
 801dd5c:	0801de7b 	.word	0x0801de7b
 801dd60:	0801de7b 	.word	0x0801de7b
 801dd64:	0801de7b 	.word	0x0801de7b
 801dd68:	0801de7b 	.word	0x0801de7b
 801dd6c:	0801de7b 	.word	0x0801de7b
 801dd70:	0801de7b 	.word	0x0801de7b
 801dd74:	0801de7b 	.word	0x0801de7b
 801dd78:	0801de7b 	.word	0x0801de7b
 801dd7c:	0801de7b 	.word	0x0801de7b
 801dd80:	0801de7b 	.word	0x0801de7b
 801dd84:	0801dde7 	.word	0x0801dde7
 801dd88:	0801de71 	.word	0x0801de71
 801dd8c:	0801de7b 	.word	0x0801de7b
 801dd90:	0801de7b 	.word	0x0801de7b
 801dd94:	0801de7b 	.word	0x0801de7b
 801dd98:	0801de7b 	.word	0x0801de7b
 801dd9c:	0801de71 	.word	0x0801de71
 801dda0:	0801de7b 	.word	0x0801de7b
 801dda4:	0801de7b 	.word	0x0801de7b
 801dda8:	0801de7b 	.word	0x0801de7b
 801ddac:	0801de7b 	.word	0x0801de7b
 801ddb0:	0801de7b 	.word	0x0801de7b
 801ddb4:	0801de7b 	.word	0x0801de7b
 801ddb8:	0801de7b 	.word	0x0801de7b
 801ddbc:	0801de7b 	.word	0x0801de7b
 801ddc0:	0801de7b 	.word	0x0801de7b
 801ddc4:	0801de07 	.word	0x0801de07
 801ddc8:	0801de7b 	.word	0x0801de7b
 801ddcc:	0801dec7 	.word	0x0801dec7
 801ddd0:	0801de7b 	.word	0x0801de7b
 801ddd4:	0801de7b 	.word	0x0801de7b
 801ddd8:	0801de6b 	.word	0x0801de6b
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801dddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ddde:	1c5a      	adds	r2, r3, #1
 801dde0:	62fa      	str	r2, [r7, #44]	; 0x2c
 801dde2:	2220      	movs	r2, #32
 801dde4:	701a      	strb	r2, [r3, #0]
 801dde6:	69fb      	ldr	r3, [r7, #28]
 801dde8:	3b01      	subs	r3, #1
 801ddea:	61fb      	str	r3, [r7, #28]
 801ddec:	69fb      	ldr	r3, [r7, #28]
 801ddee:	2b00      	cmp	r3, #0
 801ddf0:	dcf4      	bgt.n	801dddc <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801ddf2:	683b      	ldr	r3, [r7, #0]
 801ddf4:	1d1a      	adds	r2, r3, #4
 801ddf6:	603a      	str	r2, [r7, #0]
 801ddf8:	6819      	ldr	r1, [r3, #0]
 801ddfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ddfc:	1c5a      	adds	r2, r3, #1
 801ddfe:	62fa      	str	r2, [r7, #44]	; 0x2c
 801de00:	b2ca      	uxtb	r2, r1
 801de02:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801de04:	e08d      	b.n	801df22 <tiny_vsnprintf_like+0x26a>

      case 's':
        s = va_arg(args, char *);
 801de06:	683b      	ldr	r3, [r7, #0]
 801de08:	1d1a      	adds	r2, r3, #4
 801de0a:	603a      	str	r2, [r7, #0]
 801de0c:	681b      	ldr	r3, [r3, #0]
 801de0e:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 801de10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801de12:	2b00      	cmp	r3, #0
 801de14:	d101      	bne.n	801de1a <tiny_vsnprintf_like+0x162>
 801de16:	4b50      	ldr	r3, [pc, #320]	; (801df58 <tiny_vsnprintf_like+0x2a0>)
 801de18:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801de1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801de1c:	f7e2 f9ac 	bl	8000178 <strlen>
 801de20:	4603      	mov	r3, r0
 801de22:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801de24:	e004      	b.n	801de30 <tiny_vsnprintf_like+0x178>
 801de26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801de28:	1c5a      	adds	r2, r3, #1
 801de2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801de2c:	2220      	movs	r2, #32
 801de2e:	701a      	strb	r2, [r3, #0]
 801de30:	69fb      	ldr	r3, [r7, #28]
 801de32:	1e5a      	subs	r2, r3, #1
 801de34:	61fa      	str	r2, [r7, #28]
 801de36:	693a      	ldr	r2, [r7, #16]
 801de38:	429a      	cmp	r2, r3
 801de3a:	dbf4      	blt.n	801de26 <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801de3c:	2300      	movs	r3, #0
 801de3e:	62bb      	str	r3, [r7, #40]	; 0x28
 801de40:	e00a      	b.n	801de58 <tiny_vsnprintf_like+0x1a0>
 801de42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801de44:	1c53      	adds	r3, r2, #1
 801de46:	627b      	str	r3, [r7, #36]	; 0x24
 801de48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801de4a:	1c59      	adds	r1, r3, #1
 801de4c:	62f9      	str	r1, [r7, #44]	; 0x2c
 801de4e:	7812      	ldrb	r2, [r2, #0]
 801de50:	701a      	strb	r2, [r3, #0]
 801de52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801de54:	3301      	adds	r3, #1
 801de56:	62bb      	str	r3, [r7, #40]	; 0x28
 801de58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801de5a:	693b      	ldr	r3, [r7, #16]
 801de5c:	429a      	cmp	r2, r3
 801de5e:	dbf0      	blt.n	801de42 <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801de60:	e05f      	b.n	801df22 <tiny_vsnprintf_like+0x26a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 801de62:	6a3b      	ldr	r3, [r7, #32]
 801de64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801de68:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801de6a:	2310      	movs	r3, #16
 801de6c:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 801de6e:	e02b      	b.n	801dec8 <tiny_vsnprintf_like+0x210>

      case 'd':
      case 'i':
        flags |= SIGN;
 801de70:	6a3b      	ldr	r3, [r7, #32]
 801de72:	f043 0302 	orr.w	r3, r3, #2
 801de76:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801de78:	e025      	b.n	801dec6 <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801de7a:	687b      	ldr	r3, [r7, #4]
 801de7c:	781b      	ldrb	r3, [r3, #0]
 801de7e:	2b25      	cmp	r3, #37	; 0x25
 801de80:	d004      	beq.n	801de8c <tiny_vsnprintf_like+0x1d4>
 801de82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801de84:	1c5a      	adds	r2, r3, #1
 801de86:	62fa      	str	r2, [r7, #44]	; 0x2c
 801de88:	2225      	movs	r2, #37	; 0x25
 801de8a:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801de8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801de8e:	68fb      	ldr	r3, [r7, #12]
 801de90:	1ad2      	subs	r2, r2, r3
 801de92:	68bb      	ldr	r3, [r7, #8]
 801de94:	3b01      	subs	r3, #1
 801de96:	429a      	cmp	r2, r3
 801de98:	da16      	bge.n	801dec8 <tiny_vsnprintf_like+0x210>
        if (*fmt)
 801de9a:	687b      	ldr	r3, [r7, #4]
 801de9c:	781b      	ldrb	r3, [r3, #0]
 801de9e:	2b00      	cmp	r3, #0
 801dea0:	d006      	beq.n	801deb0 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 801dea2:	687a      	ldr	r2, [r7, #4]
 801dea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dea6:	1c59      	adds	r1, r3, #1
 801dea8:	62f9      	str	r1, [r7, #44]	; 0x2c
 801deaa:	7812      	ldrb	r2, [r2, #0]
 801deac:	701a      	strb	r2, [r3, #0]
 801deae:	e002      	b.n	801deb6 <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 801deb0:	687b      	ldr	r3, [r7, #4]
 801deb2:	3b01      	subs	r3, #1
 801deb4:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801deb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801deb8:	68fb      	ldr	r3, [r7, #12]
 801deba:	1ad2      	subs	r2, r2, r3
 801debc:	68bb      	ldr	r3, [r7, #8]
 801debe:	3b01      	subs	r3, #1
 801dec0:	429a      	cmp	r2, r3
 801dec2:	db2d      	blt.n	801df20 <tiny_vsnprintf_like+0x268>
 801dec4:	e000      	b.n	801dec8 <tiny_vsnprintf_like+0x210>
        break;
 801dec6:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 801dec8:	697b      	ldr	r3, [r7, #20]
 801deca:	2b6c      	cmp	r3, #108	; 0x6c
 801decc:	d105      	bne.n	801deda <tiny_vsnprintf_like+0x222>
      num = va_arg(args, unsigned long);
 801dece:	683b      	ldr	r3, [r7, #0]
 801ded0:	1d1a      	adds	r2, r3, #4
 801ded2:	603a      	str	r2, [r7, #0]
 801ded4:	681b      	ldr	r3, [r3, #0]
 801ded6:	637b      	str	r3, [r7, #52]	; 0x34
 801ded8:	e00f      	b.n	801defa <tiny_vsnprintf_like+0x242>
    else if (flags & SIGN)
 801deda:	6a3b      	ldr	r3, [r7, #32]
 801dedc:	f003 0302 	and.w	r3, r3, #2
 801dee0:	2b00      	cmp	r3, #0
 801dee2:	d005      	beq.n	801def0 <tiny_vsnprintf_like+0x238>
      num = va_arg(args, int);
 801dee4:	683b      	ldr	r3, [r7, #0]
 801dee6:	1d1a      	adds	r2, r3, #4
 801dee8:	603a      	str	r2, [r7, #0]
 801deea:	681b      	ldr	r3, [r3, #0]
 801deec:	637b      	str	r3, [r7, #52]	; 0x34
 801deee:	e004      	b.n	801defa <tiny_vsnprintf_like+0x242>
    else
      num = va_arg(args, unsigned int);
 801def0:	683b      	ldr	r3, [r7, #0]
 801def2:	1d1a      	adds	r2, r3, #4
 801def4:	603a      	str	r2, [r7, #0]
 801def6:	681b      	ldr	r3, [r3, #0]
 801def8:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801defa:	68bb      	ldr	r3, [r7, #8]
 801defc:	1e5a      	subs	r2, r3, #1
 801defe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801df00:	68fb      	ldr	r3, [r7, #12]
 801df02:	1acb      	subs	r3, r1, r3
 801df04:	1ad1      	subs	r1, r2, r3
 801df06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801df08:	6a3b      	ldr	r3, [r7, #32]
 801df0a:	9302      	str	r3, [sp, #8]
 801df0c:	69bb      	ldr	r3, [r7, #24]
 801df0e:	9301      	str	r3, [sp, #4]
 801df10:	69fb      	ldr	r3, [r7, #28]
 801df12:	9300      	str	r3, [sp, #0]
 801df14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801df16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801df18:	f7ff fde0 	bl	801dadc <ee_number>
 801df1c:	62f8      	str	r0, [r7, #44]	; 0x2c
 801df1e:	e000      	b.n	801df22 <tiny_vsnprintf_like+0x26a>
        continue;
 801df20:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801df22:	687b      	ldr	r3, [r7, #4]
 801df24:	3301      	adds	r3, #1
 801df26:	607b      	str	r3, [r7, #4]
 801df28:	687b      	ldr	r3, [r7, #4]
 801df2a:	781b      	ldrb	r3, [r3, #0]
 801df2c:	2b00      	cmp	r3, #0
 801df2e:	f47f aed2 	bne.w	801dcd6 <tiny_vsnprintf_like+0x1e>
 801df32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801df34:	68fb      	ldr	r3, [r7, #12]
 801df36:	1ad2      	subs	r2, r2, r3
 801df38:	68bb      	ldr	r3, [r7, #8]
 801df3a:	3b01      	subs	r3, #1
 801df3c:	429a      	cmp	r2, r3
 801df3e:	f6bf aeca 	bge.w	801dcd6 <tiny_vsnprintf_like+0x1e>
  }

  *str = '\0';
 801df42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801df44:	2200      	movs	r2, #0
 801df46:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801df48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801df4a:	68fb      	ldr	r3, [r7, #12]
 801df4c:	1ad3      	subs	r3, r2, r3
}
 801df4e:	4618      	mov	r0, r3
 801df50:	3738      	adds	r7, #56	; 0x38
 801df52:	46bd      	mov	sp, r7
 801df54:	bd80      	pop	{r7, pc}
 801df56:	bf00      	nop
 801df58:	0801f744 	.word	0x0801f744

0801df5c <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801df5c:	b580      	push	{r7, lr}
 801df5e:	b090      	sub	sp, #64	; 0x40
 801df60:	af00      	add	r7, sp, #0
 801df62:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801df64:	4b73      	ldr	r3, [pc, #460]	; (801e134 <UTIL_SEQ_Run+0x1d8>)
 801df66:	681b      	ldr	r3, [r3, #0]
 801df68:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 801df6a:	4b72      	ldr	r3, [pc, #456]	; (801e134 <UTIL_SEQ_Run+0x1d8>)
 801df6c:	681a      	ldr	r2, [r3, #0]
 801df6e:	687b      	ldr	r3, [r7, #4]
 801df70:	4013      	ands	r3, r2
 801df72:	4a70      	ldr	r2, [pc, #448]	; (801e134 <UTIL_SEQ_Run+0x1d8>)
 801df74:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 801df76:	4b70      	ldr	r3, [pc, #448]	; (801e138 <UTIL_SEQ_Run+0x1dc>)
 801df78:	681b      	ldr	r3, [r3, #0]
 801df7a:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 801df7c:	4b6f      	ldr	r3, [pc, #444]	; (801e13c <UTIL_SEQ_Run+0x1e0>)
 801df7e:	681b      	ldr	r3, [r3, #0]
 801df80:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 801df82:	4b6f      	ldr	r3, [pc, #444]	; (801e140 <UTIL_SEQ_Run+0x1e4>)
 801df84:	681b      	ldr	r3, [r3, #0]
 801df86:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 801df88:	4b6e      	ldr	r3, [pc, #440]	; (801e144 <UTIL_SEQ_Run+0x1e8>)
 801df8a:	681b      	ldr	r3, [r3, #0]
 801df8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801df8e:	e08d      	b.n	801e0ac <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 801df90:	2300      	movs	r3, #0
 801df92:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801df94:	e002      	b.n	801df9c <UTIL_SEQ_Run+0x40>
    {
      counter++;
 801df96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801df98:	3301      	adds	r3, #1
 801df9a:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801df9c:	4a6a      	ldr	r2, [pc, #424]	; (801e148 <UTIL_SEQ_Run+0x1ec>)
 801df9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dfa0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801dfa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dfa6:	401a      	ands	r2, r3
 801dfa8:	4b62      	ldr	r3, [pc, #392]	; (801e134 <UTIL_SEQ_Run+0x1d8>)
 801dfaa:	681b      	ldr	r3, [r3, #0]
 801dfac:	4013      	ands	r3, r2
 801dfae:	2b00      	cmp	r3, #0
 801dfb0:	d0f1      	beq.n	801df96 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801dfb2:	4a65      	ldr	r2, [pc, #404]	; (801e148 <UTIL_SEQ_Run+0x1ec>)
 801dfb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dfb6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801dfba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dfbc:	401a      	ands	r2, r3
 801dfbe:	4b5d      	ldr	r3, [pc, #372]	; (801e134 <UTIL_SEQ_Run+0x1d8>)
 801dfc0:	681b      	ldr	r3, [r3, #0]
 801dfc2:	4013      	ands	r3, r2
 801dfc4:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801dfc6:	4a60      	ldr	r2, [pc, #384]	; (801e148 <UTIL_SEQ_Run+0x1ec>)
 801dfc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dfca:	00db      	lsls	r3, r3, #3
 801dfcc:	4413      	add	r3, r2
 801dfce:	685a      	ldr	r2, [r3, #4]
 801dfd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dfd2:	4013      	ands	r3, r2
 801dfd4:	2b00      	cmp	r3, #0
 801dfd6:	d106      	bne.n	801dfe6 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801dfd8:	4a5b      	ldr	r2, [pc, #364]	; (801e148 <UTIL_SEQ_Run+0x1ec>)
 801dfda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dfdc:	00db      	lsls	r3, r3, #3
 801dfde:	4413      	add	r3, r2
 801dfe0:	f04f 32ff 	mov.w	r2, #4294967295
 801dfe4:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801dfe6:	4a58      	ldr	r2, [pc, #352]	; (801e148 <UTIL_SEQ_Run+0x1ec>)
 801dfe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dfea:	00db      	lsls	r3, r3, #3
 801dfec:	4413      	add	r3, r2
 801dfee:	685a      	ldr	r2, [r3, #4]
 801dff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dff2:	4013      	ands	r3, r2
 801dff4:	4618      	mov	r0, r3
 801dff6:	f000 f907 	bl	801e208 <SEQ_BitPosition>
 801dffa:	4603      	mov	r3, r0
 801dffc:	461a      	mov	r2, r3
 801dffe:	4b53      	ldr	r3, [pc, #332]	; (801e14c <UTIL_SEQ_Run+0x1f0>)
 801e000:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801e002:	4a51      	ldr	r2, [pc, #324]	; (801e148 <UTIL_SEQ_Run+0x1ec>)
 801e004:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e006:	00db      	lsls	r3, r3, #3
 801e008:	4413      	add	r3, r2
 801e00a:	685a      	ldr	r2, [r3, #4]
 801e00c:	4b4f      	ldr	r3, [pc, #316]	; (801e14c <UTIL_SEQ_Run+0x1f0>)
 801e00e:	681b      	ldr	r3, [r3, #0]
 801e010:	2101      	movs	r1, #1
 801e012:	fa01 f303 	lsl.w	r3, r1, r3
 801e016:	43db      	mvns	r3, r3
 801e018:	401a      	ands	r2, r3
 801e01a:	494b      	ldr	r1, [pc, #300]	; (801e148 <UTIL_SEQ_Run+0x1ec>)
 801e01c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e01e:	00db      	lsls	r3, r3, #3
 801e020:	440b      	add	r3, r1
 801e022:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e024:	f3ef 8310 	mrs	r3, PRIMASK
 801e028:	61bb      	str	r3, [r7, #24]
  return(result);
 801e02a:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801e02c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801e02e:	b672      	cpsid	i
}
 801e030:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801e032:	4b46      	ldr	r3, [pc, #280]	; (801e14c <UTIL_SEQ_Run+0x1f0>)
 801e034:	681b      	ldr	r3, [r3, #0]
 801e036:	2201      	movs	r2, #1
 801e038:	fa02 f303 	lsl.w	r3, r2, r3
 801e03c:	43da      	mvns	r2, r3
 801e03e:	4b3e      	ldr	r3, [pc, #248]	; (801e138 <UTIL_SEQ_Run+0x1dc>)
 801e040:	681b      	ldr	r3, [r3, #0]
 801e042:	4013      	ands	r3, r2
 801e044:	4a3c      	ldr	r2, [pc, #240]	; (801e138 <UTIL_SEQ_Run+0x1dc>)
 801e046:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801e048:	2301      	movs	r3, #1
 801e04a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801e04c:	e013      	b.n	801e076 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801e04e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e050:	3b01      	subs	r3, #1
 801e052:	4a3d      	ldr	r2, [pc, #244]	; (801e148 <UTIL_SEQ_Run+0x1ec>)
 801e054:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801e058:	4b3c      	ldr	r3, [pc, #240]	; (801e14c <UTIL_SEQ_Run+0x1f0>)
 801e05a:	681b      	ldr	r3, [r3, #0]
 801e05c:	2201      	movs	r2, #1
 801e05e:	fa02 f303 	lsl.w	r3, r2, r3
 801e062:	43da      	mvns	r2, r3
 801e064:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e066:	3b01      	subs	r3, #1
 801e068:	400a      	ands	r2, r1
 801e06a:	4937      	ldr	r1, [pc, #220]	; (801e148 <UTIL_SEQ_Run+0x1ec>)
 801e06c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801e070:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e072:	3b01      	subs	r3, #1
 801e074:	63fb      	str	r3, [r7, #60]	; 0x3c
 801e076:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e078:	2b00      	cmp	r3, #0
 801e07a:	d1e8      	bne.n	801e04e <UTIL_SEQ_Run+0xf2>
 801e07c:	6a3b      	ldr	r3, [r7, #32]
 801e07e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e080:	697b      	ldr	r3, [r7, #20]
 801e082:	f383 8810 	msr	PRIMASK, r3
}
 801e086:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801e088:	4b30      	ldr	r3, [pc, #192]	; (801e14c <UTIL_SEQ_Run+0x1f0>)
 801e08a:	681b      	ldr	r3, [r3, #0]
 801e08c:	4a30      	ldr	r2, [pc, #192]	; (801e150 <UTIL_SEQ_Run+0x1f4>)
 801e08e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801e092:	4798      	blx	r3

    local_taskset = TaskSet;
 801e094:	4b28      	ldr	r3, [pc, #160]	; (801e138 <UTIL_SEQ_Run+0x1dc>)
 801e096:	681b      	ldr	r3, [r3, #0]
 801e098:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 801e09a:	4b28      	ldr	r3, [pc, #160]	; (801e13c <UTIL_SEQ_Run+0x1e0>)
 801e09c:	681b      	ldr	r3, [r3, #0]
 801e09e:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 801e0a0:	4b27      	ldr	r3, [pc, #156]	; (801e140 <UTIL_SEQ_Run+0x1e4>)
 801e0a2:	681b      	ldr	r3, [r3, #0]
 801e0a4:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 801e0a6:	4b27      	ldr	r3, [pc, #156]	; (801e144 <UTIL_SEQ_Run+0x1e8>)
 801e0a8:	681b      	ldr	r3, [r3, #0]
 801e0aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801e0ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801e0ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e0b0:	401a      	ands	r2, r3
 801e0b2:	4b20      	ldr	r3, [pc, #128]	; (801e134 <UTIL_SEQ_Run+0x1d8>)
 801e0b4:	681b      	ldr	r3, [r3, #0]
 801e0b6:	4013      	ands	r3, r2
 801e0b8:	2b00      	cmp	r3, #0
 801e0ba:	d005      	beq.n	801e0c8 <UTIL_SEQ_Run+0x16c>
 801e0bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801e0be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e0c0:	4013      	ands	r3, r2
 801e0c2:	2b00      	cmp	r3, #0
 801e0c4:	f43f af64 	beq.w	801df90 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801e0c8:	4b20      	ldr	r3, [pc, #128]	; (801e14c <UTIL_SEQ_Run+0x1f0>)
 801e0ca:	f04f 32ff 	mov.w	r2, #4294967295
 801e0ce:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801e0d0:	f000 f88e 	bl	801e1f0 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e0d4:	f3ef 8310 	mrs	r3, PRIMASK
 801e0d8:	613b      	str	r3, [r7, #16]
  return(result);
 801e0da:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801e0dc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801e0de:	b672      	cpsid	i
}
 801e0e0:	bf00      	nop
  local_taskset = TaskSet;
 801e0e2:	4b15      	ldr	r3, [pc, #84]	; (801e138 <UTIL_SEQ_Run+0x1dc>)
 801e0e4:	681b      	ldr	r3, [r3, #0]
 801e0e6:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 801e0e8:	4b14      	ldr	r3, [pc, #80]	; (801e13c <UTIL_SEQ_Run+0x1e0>)
 801e0ea:	681b      	ldr	r3, [r3, #0]
 801e0ec:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 801e0ee:	4b14      	ldr	r3, [pc, #80]	; (801e140 <UTIL_SEQ_Run+0x1e4>)
 801e0f0:	681b      	ldr	r3, [r3, #0]
 801e0f2:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 801e0f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801e0f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e0f8:	401a      	ands	r2, r3
 801e0fa:	4b0e      	ldr	r3, [pc, #56]	; (801e134 <UTIL_SEQ_Run+0x1d8>)
 801e0fc:	681b      	ldr	r3, [r3, #0]
 801e0fe:	4013      	ands	r3, r2
 801e100:	2b00      	cmp	r3, #0
 801e102:	d107      	bne.n	801e114 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 801e104:	4b0f      	ldr	r3, [pc, #60]	; (801e144 <UTIL_SEQ_Run+0x1e8>)
 801e106:	681a      	ldr	r2, [r3, #0]
 801e108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e10a:	4013      	ands	r3, r2
 801e10c:	2b00      	cmp	r3, #0
 801e10e:	d101      	bne.n	801e114 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 801e110:	f7e4 fab4 	bl	800267c <UTIL_SEQ_Idle>
 801e114:	69fb      	ldr	r3, [r7, #28]
 801e116:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e118:	68fb      	ldr	r3, [r7, #12]
 801e11a:	f383 8810 	msr	PRIMASK, r3
}
 801e11e:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 801e120:	f000 f86c 	bl	801e1fc <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801e124:	4a03      	ldr	r2, [pc, #12]	; (801e134 <UTIL_SEQ_Run+0x1d8>)
 801e126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e128:	6013      	str	r3, [r2, #0]

  return;
 801e12a:	bf00      	nop
}
 801e12c:	3740      	adds	r7, #64	; 0x40
 801e12e:	46bd      	mov	sp, r7
 801e130:	bd80      	pop	{r7, pc}
 801e132:	bf00      	nop
 801e134:	20000148 	.word	0x20000148
 801e138:	20001c2c 	.word	0x20001c2c
 801e13c:	20001c30 	.word	0x20001c30
 801e140:	20000144 	.word	0x20000144
 801e144:	20001c34 	.word	0x20001c34
 801e148:	20001c4c 	.word	0x20001c4c
 801e14c:	20001c38 	.word	0x20001c38
 801e150:	20001c3c 	.word	0x20001c3c

0801e154 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801e154:	b580      	push	{r7, lr}
 801e156:	b088      	sub	sp, #32
 801e158:	af00      	add	r7, sp, #0
 801e15a:	60f8      	str	r0, [r7, #12]
 801e15c:	60b9      	str	r1, [r7, #8]
 801e15e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e160:	f3ef 8310 	mrs	r3, PRIMASK
 801e164:	617b      	str	r3, [r7, #20]
  return(result);
 801e166:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801e168:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801e16a:	b672      	cpsid	i
}
 801e16c:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801e16e:	68f8      	ldr	r0, [r7, #12]
 801e170:	f000 f84a 	bl	801e208 <SEQ_BitPosition>
 801e174:	4603      	mov	r3, r0
 801e176:	4619      	mov	r1, r3
 801e178:	4a06      	ldr	r2, [pc, #24]	; (801e194 <UTIL_SEQ_RegTask+0x40>)
 801e17a:	687b      	ldr	r3, [r7, #4]
 801e17c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801e180:	69fb      	ldr	r3, [r7, #28]
 801e182:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e184:	69bb      	ldr	r3, [r7, #24]
 801e186:	f383 8810 	msr	PRIMASK, r3
}
 801e18a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801e18c:	bf00      	nop
}
 801e18e:	3720      	adds	r7, #32
 801e190:	46bd      	mov	sp, r7
 801e192:	bd80      	pop	{r7, pc}
 801e194:	20001c3c 	.word	0x20001c3c

0801e198 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801e198:	b480      	push	{r7}
 801e19a:	b087      	sub	sp, #28
 801e19c:	af00      	add	r7, sp, #0
 801e19e:	6078      	str	r0, [r7, #4]
 801e1a0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e1a2:	f3ef 8310 	mrs	r3, PRIMASK
 801e1a6:	60fb      	str	r3, [r7, #12]
  return(result);
 801e1a8:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801e1aa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801e1ac:	b672      	cpsid	i
}
 801e1ae:	bf00      	nop

  TaskSet |= TaskId_bm;
 801e1b0:	4b0d      	ldr	r3, [pc, #52]	; (801e1e8 <UTIL_SEQ_SetTask+0x50>)
 801e1b2:	681a      	ldr	r2, [r3, #0]
 801e1b4:	687b      	ldr	r3, [r7, #4]
 801e1b6:	4313      	orrs	r3, r2
 801e1b8:	4a0b      	ldr	r2, [pc, #44]	; (801e1e8 <UTIL_SEQ_SetTask+0x50>)
 801e1ba:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801e1bc:	4a0b      	ldr	r2, [pc, #44]	; (801e1ec <UTIL_SEQ_SetTask+0x54>)
 801e1be:	683b      	ldr	r3, [r7, #0]
 801e1c0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801e1c4:	687b      	ldr	r3, [r7, #4]
 801e1c6:	431a      	orrs	r2, r3
 801e1c8:	4908      	ldr	r1, [pc, #32]	; (801e1ec <UTIL_SEQ_SetTask+0x54>)
 801e1ca:	683b      	ldr	r3, [r7, #0]
 801e1cc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801e1d0:	697b      	ldr	r3, [r7, #20]
 801e1d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e1d4:	693b      	ldr	r3, [r7, #16]
 801e1d6:	f383 8810 	msr	PRIMASK, r3
}
 801e1da:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801e1dc:	bf00      	nop
}
 801e1de:	371c      	adds	r7, #28
 801e1e0:	46bd      	mov	sp, r7
 801e1e2:	bc80      	pop	{r7}
 801e1e4:	4770      	bx	lr
 801e1e6:	bf00      	nop
 801e1e8:	20001c2c 	.word	0x20001c2c
 801e1ec:	20001c4c 	.word	0x20001c4c

0801e1f0 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801e1f0:	b480      	push	{r7}
 801e1f2:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801e1f4:	bf00      	nop
}
 801e1f6:	46bd      	mov	sp, r7
 801e1f8:	bc80      	pop	{r7}
 801e1fa:	4770      	bx	lr

0801e1fc <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801e1fc:	b480      	push	{r7}
 801e1fe:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801e200:	bf00      	nop
}
 801e202:	46bd      	mov	sp, r7
 801e204:	bc80      	pop	{r7}
 801e206:	4770      	bx	lr

0801e208 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801e208:	b480      	push	{r7}
 801e20a:	b085      	sub	sp, #20
 801e20c:	af00      	add	r7, sp, #0
 801e20e:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 801e210:	2300      	movs	r3, #0
 801e212:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 801e214:	687b      	ldr	r3, [r7, #4]
 801e216:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 801e218:	68bb      	ldr	r3, [r7, #8]
 801e21a:	0c1b      	lsrs	r3, r3, #16
 801e21c:	041b      	lsls	r3, r3, #16
 801e21e:	2b00      	cmp	r3, #0
 801e220:	d104      	bne.n	801e22c <SEQ_BitPosition+0x24>
 801e222:	2310      	movs	r3, #16
 801e224:	73fb      	strb	r3, [r7, #15]
 801e226:	68bb      	ldr	r3, [r7, #8]
 801e228:	041b      	lsls	r3, r3, #16
 801e22a:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801e22c:	68bb      	ldr	r3, [r7, #8]
 801e22e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801e232:	2b00      	cmp	r3, #0
 801e234:	d105      	bne.n	801e242 <SEQ_BitPosition+0x3a>
 801e236:	7bfb      	ldrb	r3, [r7, #15]
 801e238:	3308      	adds	r3, #8
 801e23a:	73fb      	strb	r3, [r7, #15]
 801e23c:	68bb      	ldr	r3, [r7, #8]
 801e23e:	021b      	lsls	r3, r3, #8
 801e240:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801e242:	68bb      	ldr	r3, [r7, #8]
 801e244:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801e248:	2b00      	cmp	r3, #0
 801e24a:	d105      	bne.n	801e258 <SEQ_BitPosition+0x50>
 801e24c:	7bfb      	ldrb	r3, [r7, #15]
 801e24e:	3304      	adds	r3, #4
 801e250:	73fb      	strb	r3, [r7, #15]
 801e252:	68bb      	ldr	r3, [r7, #8]
 801e254:	011b      	lsls	r3, r3, #4
 801e256:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801e258:	68bb      	ldr	r3, [r7, #8]
 801e25a:	0f1b      	lsrs	r3, r3, #28
 801e25c:	4a06      	ldr	r2, [pc, #24]	; (801e278 <SEQ_BitPosition+0x70>)
 801e25e:	5cd2      	ldrb	r2, [r2, r3]
 801e260:	7bfb      	ldrb	r3, [r7, #15]
 801e262:	4413      	add	r3, r2
 801e264:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801e266:	7bfb      	ldrb	r3, [r7, #15]
 801e268:	f1c3 031f 	rsb	r3, r3, #31
 801e26c:	b2db      	uxtb	r3, r3
}
 801e26e:	4618      	mov	r0, r3
 801e270:	3714      	adds	r7, #20
 801e272:	46bd      	mov	sp, r7
 801e274:	bc80      	pop	{r7}
 801e276:	4770      	bx	lr
 801e278:	0801fe0c 	.word	0x0801fe0c

0801e27c <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801e27c:	b580      	push	{r7, lr}
 801e27e:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801e280:	4b04      	ldr	r3, [pc, #16]	; (801e294 <UTIL_TIMER_Init+0x18>)
 801e282:	2200      	movs	r2, #0
 801e284:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801e286:	4b04      	ldr	r3, [pc, #16]	; (801e298 <UTIL_TIMER_Init+0x1c>)
 801e288:	681b      	ldr	r3, [r3, #0]
 801e28a:	4798      	blx	r3
 801e28c:	4603      	mov	r3, r0
}
 801e28e:	4618      	mov	r0, r3
 801e290:	bd80      	pop	{r7, pc}
 801e292:	bf00      	nop
 801e294:	20001c54 	.word	0x20001c54
 801e298:	0801f804 	.word	0x0801f804

0801e29c <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801e29c:	b580      	push	{r7, lr}
 801e29e:	b084      	sub	sp, #16
 801e2a0:	af00      	add	r7, sp, #0
 801e2a2:	60f8      	str	r0, [r7, #12]
 801e2a4:	60b9      	str	r1, [r7, #8]
 801e2a6:	603b      	str	r3, [r7, #0]
 801e2a8:	4613      	mov	r3, r2
 801e2aa:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801e2ac:	68fb      	ldr	r3, [r7, #12]
 801e2ae:	2b00      	cmp	r3, #0
 801e2b0:	d023      	beq.n	801e2fa <UTIL_TIMER_Create+0x5e>
 801e2b2:	683b      	ldr	r3, [r7, #0]
 801e2b4:	2b00      	cmp	r3, #0
 801e2b6:	d020      	beq.n	801e2fa <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801e2b8:	68fb      	ldr	r3, [r7, #12]
 801e2ba:	2200      	movs	r2, #0
 801e2bc:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801e2be:	4b11      	ldr	r3, [pc, #68]	; (801e304 <UTIL_TIMER_Create+0x68>)
 801e2c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e2c2:	68b8      	ldr	r0, [r7, #8]
 801e2c4:	4798      	blx	r3
 801e2c6:	4602      	mov	r2, r0
 801e2c8:	68fb      	ldr	r3, [r7, #12]
 801e2ca:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801e2cc:	68fb      	ldr	r3, [r7, #12]
 801e2ce:	2200      	movs	r2, #0
 801e2d0:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801e2d2:	68fb      	ldr	r3, [r7, #12]
 801e2d4:	2200      	movs	r2, #0
 801e2d6:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801e2d8:	68fb      	ldr	r3, [r7, #12]
 801e2da:	2200      	movs	r2, #0
 801e2dc:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801e2de:	68fb      	ldr	r3, [r7, #12]
 801e2e0:	683a      	ldr	r2, [r7, #0]
 801e2e2:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801e2e4:	68fb      	ldr	r3, [r7, #12]
 801e2e6:	69ba      	ldr	r2, [r7, #24]
 801e2e8:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801e2ea:	68fb      	ldr	r3, [r7, #12]
 801e2ec:	79fa      	ldrb	r2, [r7, #7]
 801e2ee:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801e2f0:	68fb      	ldr	r3, [r7, #12]
 801e2f2:	2200      	movs	r2, #0
 801e2f4:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801e2f6:	2300      	movs	r3, #0
 801e2f8:	e000      	b.n	801e2fc <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801e2fa:	2301      	movs	r3, #1
  }
}
 801e2fc:	4618      	mov	r0, r3
 801e2fe:	3710      	adds	r7, #16
 801e300:	46bd      	mov	sp, r7
 801e302:	bd80      	pop	{r7, pc}
 801e304:	0801f804 	.word	0x0801f804

0801e308 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801e308:	b580      	push	{r7, lr}
 801e30a:	b08a      	sub	sp, #40	; 0x28
 801e30c:	af00      	add	r7, sp, #0
 801e30e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801e310:	2300      	movs	r3, #0
 801e312:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801e316:	687b      	ldr	r3, [r7, #4]
 801e318:	2b00      	cmp	r3, #0
 801e31a:	d056      	beq.n	801e3ca <UTIL_TIMER_Start+0xc2>
 801e31c:	6878      	ldr	r0, [r7, #4]
 801e31e:	f000 f9a9 	bl	801e674 <TimerExists>
 801e322:	4603      	mov	r3, r0
 801e324:	f083 0301 	eor.w	r3, r3, #1
 801e328:	b2db      	uxtb	r3, r3
 801e32a:	2b00      	cmp	r3, #0
 801e32c:	d04d      	beq.n	801e3ca <UTIL_TIMER_Start+0xc2>
 801e32e:	687b      	ldr	r3, [r7, #4]
 801e330:	7a5b      	ldrb	r3, [r3, #9]
 801e332:	2b00      	cmp	r3, #0
 801e334:	d149      	bne.n	801e3ca <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e336:	f3ef 8310 	mrs	r3, PRIMASK
 801e33a:	613b      	str	r3, [r7, #16]
  return(result);
 801e33c:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801e33e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801e340:	b672      	cpsid	i
}
 801e342:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801e344:	687b      	ldr	r3, [r7, #4]
 801e346:	685b      	ldr	r3, [r3, #4]
 801e348:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801e34a:	4b24      	ldr	r3, [pc, #144]	; (801e3dc <UTIL_TIMER_Start+0xd4>)
 801e34c:	6a1b      	ldr	r3, [r3, #32]
 801e34e:	4798      	blx	r3
 801e350:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801e352:	6a3a      	ldr	r2, [r7, #32]
 801e354:	69bb      	ldr	r3, [r7, #24]
 801e356:	429a      	cmp	r2, r3
 801e358:	d201      	bcs.n	801e35e <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801e35a:	69bb      	ldr	r3, [r7, #24]
 801e35c:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801e35e:	687b      	ldr	r3, [r7, #4]
 801e360:	6a3a      	ldr	r2, [r7, #32]
 801e362:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801e364:	687b      	ldr	r3, [r7, #4]
 801e366:	2200      	movs	r2, #0
 801e368:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801e36a:	687b      	ldr	r3, [r7, #4]
 801e36c:	2201      	movs	r2, #1
 801e36e:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801e370:	687b      	ldr	r3, [r7, #4]
 801e372:	2200      	movs	r2, #0
 801e374:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801e376:	4b1a      	ldr	r3, [pc, #104]	; (801e3e0 <UTIL_TIMER_Start+0xd8>)
 801e378:	681b      	ldr	r3, [r3, #0]
 801e37a:	2b00      	cmp	r3, #0
 801e37c:	d106      	bne.n	801e38c <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801e37e:	4b17      	ldr	r3, [pc, #92]	; (801e3dc <UTIL_TIMER_Start+0xd4>)
 801e380:	691b      	ldr	r3, [r3, #16]
 801e382:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801e384:	6878      	ldr	r0, [r7, #4]
 801e386:	f000 f9eb 	bl	801e760 <TimerInsertNewHeadTimer>
 801e38a:	e017      	b.n	801e3bc <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801e38c:	4b13      	ldr	r3, [pc, #76]	; (801e3dc <UTIL_TIMER_Start+0xd4>)
 801e38e:	699b      	ldr	r3, [r3, #24]
 801e390:	4798      	blx	r3
 801e392:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801e394:	687b      	ldr	r3, [r7, #4]
 801e396:	681a      	ldr	r2, [r3, #0]
 801e398:	697b      	ldr	r3, [r7, #20]
 801e39a:	441a      	add	r2, r3
 801e39c:	687b      	ldr	r3, [r7, #4]
 801e39e:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801e3a0:	687b      	ldr	r3, [r7, #4]
 801e3a2:	681a      	ldr	r2, [r3, #0]
 801e3a4:	4b0e      	ldr	r3, [pc, #56]	; (801e3e0 <UTIL_TIMER_Start+0xd8>)
 801e3a6:	681b      	ldr	r3, [r3, #0]
 801e3a8:	681b      	ldr	r3, [r3, #0]
 801e3aa:	429a      	cmp	r2, r3
 801e3ac:	d203      	bcs.n	801e3b6 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801e3ae:	6878      	ldr	r0, [r7, #4]
 801e3b0:	f000 f9d6 	bl	801e760 <TimerInsertNewHeadTimer>
 801e3b4:	e002      	b.n	801e3bc <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801e3b6:	6878      	ldr	r0, [r7, #4]
 801e3b8:	f000 f9a2 	bl	801e700 <TimerInsertTimer>
 801e3bc:	69fb      	ldr	r3, [r7, #28]
 801e3be:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e3c0:	68fb      	ldr	r3, [r7, #12]
 801e3c2:	f383 8810 	msr	PRIMASK, r3
}
 801e3c6:	bf00      	nop
  {
 801e3c8:	e002      	b.n	801e3d0 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801e3ca:	2301      	movs	r3, #1
 801e3cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 801e3d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801e3d4:	4618      	mov	r0, r3
 801e3d6:	3728      	adds	r7, #40	; 0x28
 801e3d8:	46bd      	mov	sp, r7
 801e3da:	bd80      	pop	{r7, pc}
 801e3dc:	0801f804 	.word	0x0801f804
 801e3e0:	20001c54 	.word	0x20001c54

0801e3e4 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801e3e4:	b580      	push	{r7, lr}
 801e3e6:	b088      	sub	sp, #32
 801e3e8:	af00      	add	r7, sp, #0
 801e3ea:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801e3ec:	2300      	movs	r3, #0
 801e3ee:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801e3f0:	687b      	ldr	r3, [r7, #4]
 801e3f2:	2b00      	cmp	r3, #0
 801e3f4:	d05b      	beq.n	801e4ae <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e3f6:	f3ef 8310 	mrs	r3, PRIMASK
 801e3fa:	60fb      	str	r3, [r7, #12]
  return(result);
 801e3fc:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801e3fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801e400:	b672      	cpsid	i
}
 801e402:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801e404:	4b2d      	ldr	r3, [pc, #180]	; (801e4bc <UTIL_TIMER_Stop+0xd8>)
 801e406:	681b      	ldr	r3, [r3, #0]
 801e408:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801e40a:	4b2c      	ldr	r3, [pc, #176]	; (801e4bc <UTIL_TIMER_Stop+0xd8>)
 801e40c:	681b      	ldr	r3, [r3, #0]
 801e40e:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801e410:	687b      	ldr	r3, [r7, #4]
 801e412:	2201      	movs	r2, #1
 801e414:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801e416:	4b29      	ldr	r3, [pc, #164]	; (801e4bc <UTIL_TIMER_Stop+0xd8>)
 801e418:	681b      	ldr	r3, [r3, #0]
 801e41a:	2b00      	cmp	r3, #0
 801e41c:	d041      	beq.n	801e4a2 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801e41e:	687b      	ldr	r3, [r7, #4]
 801e420:	2200      	movs	r2, #0
 801e422:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801e424:	4b25      	ldr	r3, [pc, #148]	; (801e4bc <UTIL_TIMER_Stop+0xd8>)
 801e426:	681b      	ldr	r3, [r3, #0]
 801e428:	687a      	ldr	r2, [r7, #4]
 801e42a:	429a      	cmp	r2, r3
 801e42c:	d134      	bne.n	801e498 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801e42e:	4b23      	ldr	r3, [pc, #140]	; (801e4bc <UTIL_TIMER_Stop+0xd8>)
 801e430:	681b      	ldr	r3, [r3, #0]
 801e432:	2200      	movs	r2, #0
 801e434:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801e436:	4b21      	ldr	r3, [pc, #132]	; (801e4bc <UTIL_TIMER_Stop+0xd8>)
 801e438:	681b      	ldr	r3, [r3, #0]
 801e43a:	695b      	ldr	r3, [r3, #20]
 801e43c:	2b00      	cmp	r3, #0
 801e43e:	d00a      	beq.n	801e456 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801e440:	4b1e      	ldr	r3, [pc, #120]	; (801e4bc <UTIL_TIMER_Stop+0xd8>)
 801e442:	681b      	ldr	r3, [r3, #0]
 801e444:	695b      	ldr	r3, [r3, #20]
 801e446:	4a1d      	ldr	r2, [pc, #116]	; (801e4bc <UTIL_TIMER_Stop+0xd8>)
 801e448:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801e44a:	4b1c      	ldr	r3, [pc, #112]	; (801e4bc <UTIL_TIMER_Stop+0xd8>)
 801e44c:	681b      	ldr	r3, [r3, #0]
 801e44e:	4618      	mov	r0, r3
 801e450:	f000 f92c 	bl	801e6ac <TimerSetTimeout>
 801e454:	e023      	b.n	801e49e <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801e456:	4b1a      	ldr	r3, [pc, #104]	; (801e4c0 <UTIL_TIMER_Stop+0xdc>)
 801e458:	68db      	ldr	r3, [r3, #12]
 801e45a:	4798      	blx	r3
            TimerListHead = NULL;
 801e45c:	4b17      	ldr	r3, [pc, #92]	; (801e4bc <UTIL_TIMER_Stop+0xd8>)
 801e45e:	2200      	movs	r2, #0
 801e460:	601a      	str	r2, [r3, #0]
 801e462:	e01c      	b.n	801e49e <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801e464:	697a      	ldr	r2, [r7, #20]
 801e466:	687b      	ldr	r3, [r7, #4]
 801e468:	429a      	cmp	r2, r3
 801e46a:	d110      	bne.n	801e48e <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801e46c:	697b      	ldr	r3, [r7, #20]
 801e46e:	695b      	ldr	r3, [r3, #20]
 801e470:	2b00      	cmp	r3, #0
 801e472:	d006      	beq.n	801e482 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801e474:	697b      	ldr	r3, [r7, #20]
 801e476:	695b      	ldr	r3, [r3, #20]
 801e478:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801e47a:	69bb      	ldr	r3, [r7, #24]
 801e47c:	697a      	ldr	r2, [r7, #20]
 801e47e:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801e480:	e00d      	b.n	801e49e <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801e482:	2300      	movs	r3, #0
 801e484:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801e486:	69bb      	ldr	r3, [r7, #24]
 801e488:	697a      	ldr	r2, [r7, #20]
 801e48a:	615a      	str	r2, [r3, #20]
            break;
 801e48c:	e007      	b.n	801e49e <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801e48e:	697b      	ldr	r3, [r7, #20]
 801e490:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801e492:	697b      	ldr	r3, [r7, #20]
 801e494:	695b      	ldr	r3, [r3, #20]
 801e496:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801e498:	697b      	ldr	r3, [r7, #20]
 801e49a:	2b00      	cmp	r3, #0
 801e49c:	d1e2      	bne.n	801e464 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801e49e:	2300      	movs	r3, #0
 801e4a0:	77fb      	strb	r3, [r7, #31]
 801e4a2:	693b      	ldr	r3, [r7, #16]
 801e4a4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e4a6:	68bb      	ldr	r3, [r7, #8]
 801e4a8:	f383 8810 	msr	PRIMASK, r3
}
 801e4ac:	e001      	b.n	801e4b2 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801e4ae:	2301      	movs	r3, #1
 801e4b0:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801e4b2:	7ffb      	ldrb	r3, [r7, #31]
}
 801e4b4:	4618      	mov	r0, r3
 801e4b6:	3720      	adds	r7, #32
 801e4b8:	46bd      	mov	sp, r7
 801e4ba:	bd80      	pop	{r7, pc}
 801e4bc:	20001c54 	.word	0x20001c54
 801e4c0:	0801f804 	.word	0x0801f804

0801e4c4 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801e4c4:	b580      	push	{r7, lr}
 801e4c6:	b084      	sub	sp, #16
 801e4c8:	af00      	add	r7, sp, #0
 801e4ca:	6078      	str	r0, [r7, #4]
 801e4cc:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801e4ce:	2300      	movs	r3, #0
 801e4d0:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801e4d2:	687b      	ldr	r3, [r7, #4]
 801e4d4:	2b00      	cmp	r3, #0
 801e4d6:	d102      	bne.n	801e4de <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801e4d8:	2301      	movs	r3, #1
 801e4da:	73fb      	strb	r3, [r7, #15]
 801e4dc:	e014      	b.n	801e508 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801e4de:	4b0d      	ldr	r3, [pc, #52]	; (801e514 <UTIL_TIMER_SetPeriod+0x50>)
 801e4e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e4e2:	6838      	ldr	r0, [r7, #0]
 801e4e4:	4798      	blx	r3
 801e4e6:	4602      	mov	r2, r0
 801e4e8:	687b      	ldr	r3, [r7, #4]
 801e4ea:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801e4ec:	6878      	ldr	r0, [r7, #4]
 801e4ee:	f000 f8c1 	bl	801e674 <TimerExists>
 801e4f2:	4603      	mov	r3, r0
 801e4f4:	2b00      	cmp	r3, #0
 801e4f6:	d007      	beq.n	801e508 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801e4f8:	6878      	ldr	r0, [r7, #4]
 801e4fa:	f7ff ff73 	bl	801e3e4 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801e4fe:	6878      	ldr	r0, [r7, #4]
 801e500:	f7ff ff02 	bl	801e308 <UTIL_TIMER_Start>
 801e504:	4603      	mov	r3, r0
 801e506:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801e508:	7bfb      	ldrb	r3, [r7, #15]
}
 801e50a:	4618      	mov	r0, r3
 801e50c:	3710      	adds	r7, #16
 801e50e:	46bd      	mov	sp, r7
 801e510:	bd80      	pop	{r7, pc}
 801e512:	bf00      	nop
 801e514:	0801f804 	.word	0x0801f804

0801e518 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801e518:	b590      	push	{r4, r7, lr}
 801e51a:	b089      	sub	sp, #36	; 0x24
 801e51c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e51e:	f3ef 8310 	mrs	r3, PRIMASK
 801e522:	60bb      	str	r3, [r7, #8]
  return(result);
 801e524:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801e526:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801e528:	b672      	cpsid	i
}
 801e52a:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801e52c:	4b38      	ldr	r3, [pc, #224]	; (801e610 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801e52e:	695b      	ldr	r3, [r3, #20]
 801e530:	4798      	blx	r3
 801e532:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801e534:	4b36      	ldr	r3, [pc, #216]	; (801e610 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801e536:	691b      	ldr	r3, [r3, #16]
 801e538:	4798      	blx	r3
 801e53a:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801e53c:	693a      	ldr	r2, [r7, #16]
 801e53e:	697b      	ldr	r3, [r7, #20]
 801e540:	1ad3      	subs	r3, r2, r3
 801e542:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801e544:	4b33      	ldr	r3, [pc, #204]	; (801e614 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e546:	681b      	ldr	r3, [r3, #0]
 801e548:	2b00      	cmp	r3, #0
 801e54a:	d037      	beq.n	801e5bc <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 801e54c:	4b31      	ldr	r3, [pc, #196]	; (801e614 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e54e:	681b      	ldr	r3, [r3, #0]
 801e550:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801e552:	69fb      	ldr	r3, [r7, #28]
 801e554:	681b      	ldr	r3, [r3, #0]
 801e556:	68fa      	ldr	r2, [r7, #12]
 801e558:	429a      	cmp	r2, r3
 801e55a:	d206      	bcs.n	801e56a <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 801e55c:	69fb      	ldr	r3, [r7, #28]
 801e55e:	681a      	ldr	r2, [r3, #0]
 801e560:	68fb      	ldr	r3, [r7, #12]
 801e562:	1ad2      	subs	r2, r2, r3
 801e564:	69fb      	ldr	r3, [r7, #28]
 801e566:	601a      	str	r2, [r3, #0]
 801e568:	e002      	b.n	801e570 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801e56a:	69fb      	ldr	r3, [r7, #28]
 801e56c:	2200      	movs	r2, #0
 801e56e:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801e570:	69fb      	ldr	r3, [r7, #28]
 801e572:	695b      	ldr	r3, [r3, #20]
 801e574:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801e576:	69fb      	ldr	r3, [r7, #28]
 801e578:	2b00      	cmp	r3, #0
 801e57a:	d1ea      	bne.n	801e552 <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801e57c:	e01e      	b.n	801e5bc <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 801e57e:	4b25      	ldr	r3, [pc, #148]	; (801e614 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e580:	681b      	ldr	r3, [r3, #0]
 801e582:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801e584:	4b23      	ldr	r3, [pc, #140]	; (801e614 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e586:	681b      	ldr	r3, [r3, #0]
 801e588:	695b      	ldr	r3, [r3, #20]
 801e58a:	4a22      	ldr	r2, [pc, #136]	; (801e614 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e58c:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 801e58e:	69fb      	ldr	r3, [r7, #28]
 801e590:	2200      	movs	r2, #0
 801e592:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801e594:	69fb      	ldr	r3, [r7, #28]
 801e596:	2200      	movs	r2, #0
 801e598:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801e59a:	69fb      	ldr	r3, [r7, #28]
 801e59c:	68db      	ldr	r3, [r3, #12]
 801e59e:	69fa      	ldr	r2, [r7, #28]
 801e5a0:	6912      	ldr	r2, [r2, #16]
 801e5a2:	4610      	mov	r0, r2
 801e5a4:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801e5a6:	69fb      	ldr	r3, [r7, #28]
 801e5a8:	7adb      	ldrb	r3, [r3, #11]
 801e5aa:	2b01      	cmp	r3, #1
 801e5ac:	d106      	bne.n	801e5bc <UTIL_TIMER_IRQ_Handler+0xa4>
 801e5ae:	69fb      	ldr	r3, [r7, #28]
 801e5b0:	7a9b      	ldrb	r3, [r3, #10]
 801e5b2:	2b00      	cmp	r3, #0
 801e5b4:	d102      	bne.n	801e5bc <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801e5b6:	69f8      	ldr	r0, [r7, #28]
 801e5b8:	f7ff fea6 	bl	801e308 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801e5bc:	4b15      	ldr	r3, [pc, #84]	; (801e614 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e5be:	681b      	ldr	r3, [r3, #0]
 801e5c0:	2b00      	cmp	r3, #0
 801e5c2:	d00d      	beq.n	801e5e0 <UTIL_TIMER_IRQ_Handler+0xc8>
 801e5c4:	4b13      	ldr	r3, [pc, #76]	; (801e614 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e5c6:	681b      	ldr	r3, [r3, #0]
 801e5c8:	681b      	ldr	r3, [r3, #0]
 801e5ca:	2b00      	cmp	r3, #0
 801e5cc:	d0d7      	beq.n	801e57e <UTIL_TIMER_IRQ_Handler+0x66>
 801e5ce:	4b11      	ldr	r3, [pc, #68]	; (801e614 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e5d0:	681b      	ldr	r3, [r3, #0]
 801e5d2:	681c      	ldr	r4, [r3, #0]
 801e5d4:	4b0e      	ldr	r3, [pc, #56]	; (801e610 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801e5d6:	699b      	ldr	r3, [r3, #24]
 801e5d8:	4798      	blx	r3
 801e5da:	4603      	mov	r3, r0
 801e5dc:	429c      	cmp	r4, r3
 801e5de:	d3ce      	bcc.n	801e57e <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801e5e0:	4b0c      	ldr	r3, [pc, #48]	; (801e614 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e5e2:	681b      	ldr	r3, [r3, #0]
 801e5e4:	2b00      	cmp	r3, #0
 801e5e6:	d009      	beq.n	801e5fc <UTIL_TIMER_IRQ_Handler+0xe4>
 801e5e8:	4b0a      	ldr	r3, [pc, #40]	; (801e614 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e5ea:	681b      	ldr	r3, [r3, #0]
 801e5ec:	7a1b      	ldrb	r3, [r3, #8]
 801e5ee:	2b00      	cmp	r3, #0
 801e5f0:	d104      	bne.n	801e5fc <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801e5f2:	4b08      	ldr	r3, [pc, #32]	; (801e614 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e5f4:	681b      	ldr	r3, [r3, #0]
 801e5f6:	4618      	mov	r0, r3
 801e5f8:	f000 f858 	bl	801e6ac <TimerSetTimeout>
 801e5fc:	69bb      	ldr	r3, [r7, #24]
 801e5fe:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e600:	687b      	ldr	r3, [r7, #4]
 801e602:	f383 8810 	msr	PRIMASK, r3
}
 801e606:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801e608:	bf00      	nop
 801e60a:	3724      	adds	r7, #36	; 0x24
 801e60c:	46bd      	mov	sp, r7
 801e60e:	bd90      	pop	{r4, r7, pc}
 801e610:	0801f804 	.word	0x0801f804
 801e614:	20001c54 	.word	0x20001c54

0801e618 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801e618:	b580      	push	{r7, lr}
 801e61a:	b082      	sub	sp, #8
 801e61c:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801e61e:	4b06      	ldr	r3, [pc, #24]	; (801e638 <UTIL_TIMER_GetCurrentTime+0x20>)
 801e620:	69db      	ldr	r3, [r3, #28]
 801e622:	4798      	blx	r3
 801e624:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801e626:	4b04      	ldr	r3, [pc, #16]	; (801e638 <UTIL_TIMER_GetCurrentTime+0x20>)
 801e628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e62a:	6878      	ldr	r0, [r7, #4]
 801e62c:	4798      	blx	r3
 801e62e:	4603      	mov	r3, r0
}
 801e630:	4618      	mov	r0, r3
 801e632:	3708      	adds	r7, #8
 801e634:	46bd      	mov	sp, r7
 801e636:	bd80      	pop	{r7, pc}
 801e638:	0801f804 	.word	0x0801f804

0801e63c <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801e63c:	b580      	push	{r7, lr}
 801e63e:	b084      	sub	sp, #16
 801e640:	af00      	add	r7, sp, #0
 801e642:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801e644:	4b0a      	ldr	r3, [pc, #40]	; (801e670 <UTIL_TIMER_GetElapsedTime+0x34>)
 801e646:	69db      	ldr	r3, [r3, #28]
 801e648:	4798      	blx	r3
 801e64a:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801e64c:	4b08      	ldr	r3, [pc, #32]	; (801e670 <UTIL_TIMER_GetElapsedTime+0x34>)
 801e64e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e650:	6878      	ldr	r0, [r7, #4]
 801e652:	4798      	blx	r3
 801e654:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801e656:	4b06      	ldr	r3, [pc, #24]	; (801e670 <UTIL_TIMER_GetElapsedTime+0x34>)
 801e658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e65a:	68f9      	ldr	r1, [r7, #12]
 801e65c:	68ba      	ldr	r2, [r7, #8]
 801e65e:	1a8a      	subs	r2, r1, r2
 801e660:	4610      	mov	r0, r2
 801e662:	4798      	blx	r3
 801e664:	4603      	mov	r3, r0
}
 801e666:	4618      	mov	r0, r3
 801e668:	3710      	adds	r7, #16
 801e66a:	46bd      	mov	sp, r7
 801e66c:	bd80      	pop	{r7, pc}
 801e66e:	bf00      	nop
 801e670:	0801f804 	.word	0x0801f804

0801e674 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801e674:	b480      	push	{r7}
 801e676:	b085      	sub	sp, #20
 801e678:	af00      	add	r7, sp, #0
 801e67a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801e67c:	4b0a      	ldr	r3, [pc, #40]	; (801e6a8 <TimerExists+0x34>)
 801e67e:	681b      	ldr	r3, [r3, #0]
 801e680:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801e682:	e008      	b.n	801e696 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801e684:	68fa      	ldr	r2, [r7, #12]
 801e686:	687b      	ldr	r3, [r7, #4]
 801e688:	429a      	cmp	r2, r3
 801e68a:	d101      	bne.n	801e690 <TimerExists+0x1c>
    {
      return true;
 801e68c:	2301      	movs	r3, #1
 801e68e:	e006      	b.n	801e69e <TimerExists+0x2a>
    }
    cur = cur->Next;
 801e690:	68fb      	ldr	r3, [r7, #12]
 801e692:	695b      	ldr	r3, [r3, #20]
 801e694:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801e696:	68fb      	ldr	r3, [r7, #12]
 801e698:	2b00      	cmp	r3, #0
 801e69a:	d1f3      	bne.n	801e684 <TimerExists+0x10>
  }
  return false;
 801e69c:	2300      	movs	r3, #0
}
 801e69e:	4618      	mov	r0, r3
 801e6a0:	3714      	adds	r7, #20
 801e6a2:	46bd      	mov	sp, r7
 801e6a4:	bc80      	pop	{r7}
 801e6a6:	4770      	bx	lr
 801e6a8:	20001c54 	.word	0x20001c54

0801e6ac <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801e6ac:	b590      	push	{r4, r7, lr}
 801e6ae:	b085      	sub	sp, #20
 801e6b0:	af00      	add	r7, sp, #0
 801e6b2:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801e6b4:	4b11      	ldr	r3, [pc, #68]	; (801e6fc <TimerSetTimeout+0x50>)
 801e6b6:	6a1b      	ldr	r3, [r3, #32]
 801e6b8:	4798      	blx	r3
 801e6ba:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801e6bc:	687b      	ldr	r3, [r7, #4]
 801e6be:	2201      	movs	r2, #1
 801e6c0:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801e6c2:	687b      	ldr	r3, [r7, #4]
 801e6c4:	681c      	ldr	r4, [r3, #0]
 801e6c6:	4b0d      	ldr	r3, [pc, #52]	; (801e6fc <TimerSetTimeout+0x50>)
 801e6c8:	699b      	ldr	r3, [r3, #24]
 801e6ca:	4798      	blx	r3
 801e6cc:	4602      	mov	r2, r0
 801e6ce:	68fb      	ldr	r3, [r7, #12]
 801e6d0:	4413      	add	r3, r2
 801e6d2:	429c      	cmp	r4, r3
 801e6d4:	d207      	bcs.n	801e6e6 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801e6d6:	4b09      	ldr	r3, [pc, #36]	; (801e6fc <TimerSetTimeout+0x50>)
 801e6d8:	699b      	ldr	r3, [r3, #24]
 801e6da:	4798      	blx	r3
 801e6dc:	4602      	mov	r2, r0
 801e6de:	68fb      	ldr	r3, [r7, #12]
 801e6e0:	441a      	add	r2, r3
 801e6e2:	687b      	ldr	r3, [r7, #4]
 801e6e4:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801e6e6:	4b05      	ldr	r3, [pc, #20]	; (801e6fc <TimerSetTimeout+0x50>)
 801e6e8:	689b      	ldr	r3, [r3, #8]
 801e6ea:	687a      	ldr	r2, [r7, #4]
 801e6ec:	6812      	ldr	r2, [r2, #0]
 801e6ee:	4610      	mov	r0, r2
 801e6f0:	4798      	blx	r3
}
 801e6f2:	bf00      	nop
 801e6f4:	3714      	adds	r7, #20
 801e6f6:	46bd      	mov	sp, r7
 801e6f8:	bd90      	pop	{r4, r7, pc}
 801e6fa:	bf00      	nop
 801e6fc:	0801f804 	.word	0x0801f804

0801e700 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801e700:	b480      	push	{r7}
 801e702:	b085      	sub	sp, #20
 801e704:	af00      	add	r7, sp, #0
 801e706:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801e708:	4b14      	ldr	r3, [pc, #80]	; (801e75c <TimerInsertTimer+0x5c>)
 801e70a:	681b      	ldr	r3, [r3, #0]
 801e70c:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801e70e:	4b13      	ldr	r3, [pc, #76]	; (801e75c <TimerInsertTimer+0x5c>)
 801e710:	681b      	ldr	r3, [r3, #0]
 801e712:	695b      	ldr	r3, [r3, #20]
 801e714:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801e716:	e012      	b.n	801e73e <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801e718:	687b      	ldr	r3, [r7, #4]
 801e71a:	681a      	ldr	r2, [r3, #0]
 801e71c:	68bb      	ldr	r3, [r7, #8]
 801e71e:	681b      	ldr	r3, [r3, #0]
 801e720:	429a      	cmp	r2, r3
 801e722:	d905      	bls.n	801e730 <TimerInsertTimer+0x30>
    {
        cur = next;
 801e724:	68bb      	ldr	r3, [r7, #8]
 801e726:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801e728:	68bb      	ldr	r3, [r7, #8]
 801e72a:	695b      	ldr	r3, [r3, #20]
 801e72c:	60bb      	str	r3, [r7, #8]
 801e72e:	e006      	b.n	801e73e <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801e730:	68fb      	ldr	r3, [r7, #12]
 801e732:	687a      	ldr	r2, [r7, #4]
 801e734:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801e736:	687b      	ldr	r3, [r7, #4]
 801e738:	68ba      	ldr	r2, [r7, #8]
 801e73a:	615a      	str	r2, [r3, #20]
        return;
 801e73c:	e009      	b.n	801e752 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801e73e:	68fb      	ldr	r3, [r7, #12]
 801e740:	695b      	ldr	r3, [r3, #20]
 801e742:	2b00      	cmp	r3, #0
 801e744:	d1e8      	bne.n	801e718 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801e746:	68fb      	ldr	r3, [r7, #12]
 801e748:	687a      	ldr	r2, [r7, #4]
 801e74a:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801e74c:	687b      	ldr	r3, [r7, #4]
 801e74e:	2200      	movs	r2, #0
 801e750:	615a      	str	r2, [r3, #20]
}
 801e752:	3714      	adds	r7, #20
 801e754:	46bd      	mov	sp, r7
 801e756:	bc80      	pop	{r7}
 801e758:	4770      	bx	lr
 801e75a:	bf00      	nop
 801e75c:	20001c54 	.word	0x20001c54

0801e760 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801e760:	b580      	push	{r7, lr}
 801e762:	b084      	sub	sp, #16
 801e764:	af00      	add	r7, sp, #0
 801e766:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801e768:	4b0b      	ldr	r3, [pc, #44]	; (801e798 <TimerInsertNewHeadTimer+0x38>)
 801e76a:	681b      	ldr	r3, [r3, #0]
 801e76c:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801e76e:	68fb      	ldr	r3, [r7, #12]
 801e770:	2b00      	cmp	r3, #0
 801e772:	d002      	beq.n	801e77a <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801e774:	68fb      	ldr	r3, [r7, #12]
 801e776:	2200      	movs	r2, #0
 801e778:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801e77a:	687b      	ldr	r3, [r7, #4]
 801e77c:	68fa      	ldr	r2, [r7, #12]
 801e77e:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801e780:	4a05      	ldr	r2, [pc, #20]	; (801e798 <TimerInsertNewHeadTimer+0x38>)
 801e782:	687b      	ldr	r3, [r7, #4]
 801e784:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801e786:	4b04      	ldr	r3, [pc, #16]	; (801e798 <TimerInsertNewHeadTimer+0x38>)
 801e788:	681b      	ldr	r3, [r3, #0]
 801e78a:	4618      	mov	r0, r3
 801e78c:	f7ff ff8e 	bl	801e6ac <TimerSetTimeout>
}
 801e790:	bf00      	nop
 801e792:	3710      	adds	r7, #16
 801e794:	46bd      	mov	sp, r7
 801e796:	bd80      	pop	{r7, pc}
 801e798:	20001c54 	.word	0x20001c54

0801e79c <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801e79c:	b580      	push	{r7, lr}
 801e79e:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801e7a0:	2218      	movs	r2, #24
 801e7a2:	2100      	movs	r1, #0
 801e7a4:	4807      	ldr	r0, [pc, #28]	; (801e7c4 <UTIL_ADV_TRACE_Init+0x28>)
 801e7a6:	f7fe fffa 	bl	801d79e <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801e7aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801e7ae:	2100      	movs	r1, #0
 801e7b0:	4805      	ldr	r0, [pc, #20]	; (801e7c8 <UTIL_ADV_TRACE_Init+0x2c>)
 801e7b2:	f7fe fff4 	bl	801d79e <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801e7b6:	4b05      	ldr	r3, [pc, #20]	; (801e7cc <UTIL_ADV_TRACE_Init+0x30>)
 801e7b8:	681b      	ldr	r3, [r3, #0]
 801e7ba:	4805      	ldr	r0, [pc, #20]	; (801e7d0 <UTIL_ADV_TRACE_Init+0x34>)
 801e7bc:	4798      	blx	r3
 801e7be:	4603      	mov	r3, r0
}
 801e7c0:	4618      	mov	r0, r3
 801e7c2:	bd80      	pop	{r7, pc}
 801e7c4:	20001c58 	.word	0x20001c58
 801e7c8:	20001c70 	.word	0x20001c70
 801e7cc:	0801f844 	.word	0x0801f844
 801e7d0:	0801ea3d 	.word	0x0801ea3d

0801e7d4 <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801e7d4:	b480      	push	{r7}
 801e7d6:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801e7d8:	4b06      	ldr	r3, [pc, #24]	; (801e7f4 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801e7da:	8a5a      	ldrh	r2, [r3, #18]
 801e7dc:	4b05      	ldr	r3, [pc, #20]	; (801e7f4 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801e7de:	8a1b      	ldrh	r3, [r3, #16]
 801e7e0:	429a      	cmp	r2, r3
 801e7e2:	d101      	bne.n	801e7e8 <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801e7e4:	2301      	movs	r3, #1
 801e7e6:	e000      	b.n	801e7ea <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801e7e8:	2300      	movs	r3, #0
}
 801e7ea:	4618      	mov	r0, r3
 801e7ec:	46bd      	mov	sp, r7
 801e7ee:	bc80      	pop	{r7}
 801e7f0:	4770      	bx	lr
 801e7f2:	bf00      	nop
 801e7f4:	20001c58 	.word	0x20001c58

0801e7f8 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801e7f8:	b408      	push	{r3}
 801e7fa:	b580      	push	{r7, lr}
 801e7fc:	b08d      	sub	sp, #52	; 0x34
 801e7fe:	af00      	add	r7, sp, #0
 801e800:	60f8      	str	r0, [r7, #12]
 801e802:	60b9      	str	r1, [r7, #8]
 801e804:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801e806:	2300      	movs	r3, #0
 801e808:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801e80a:	2300      	movs	r3, #0
 801e80c:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801e80e:	4b37      	ldr	r3, [pc, #220]	; (801e8ec <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801e810:	7a1b      	ldrb	r3, [r3, #8]
 801e812:	461a      	mov	r2, r3
 801e814:	68fb      	ldr	r3, [r7, #12]
 801e816:	4293      	cmp	r3, r2
 801e818:	d902      	bls.n	801e820 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801e81a:	f06f 0304 	mvn.w	r3, #4
 801e81e:	e05e      	b.n	801e8de <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801e820:	4b32      	ldr	r3, [pc, #200]	; (801e8ec <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801e822:	68da      	ldr	r2, [r3, #12]
 801e824:	68bb      	ldr	r3, [r7, #8]
 801e826:	4013      	ands	r3, r2
 801e828:	68ba      	ldr	r2, [r7, #8]
 801e82a:	429a      	cmp	r2, r3
 801e82c:	d002      	beq.n	801e834 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801e82e:	f06f 0305 	mvn.w	r3, #5
 801e832:	e054      	b.n	801e8de <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801e834:	4b2d      	ldr	r3, [pc, #180]	; (801e8ec <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801e836:	685b      	ldr	r3, [r3, #4]
 801e838:	2b00      	cmp	r3, #0
 801e83a:	d00a      	beq.n	801e852 <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801e83c:	687b      	ldr	r3, [r7, #4]
 801e83e:	2b00      	cmp	r3, #0
 801e840:	d007      	beq.n	801e852 <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801e842:	4b2a      	ldr	r3, [pc, #168]	; (801e8ec <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801e844:	685b      	ldr	r3, [r3, #4]
 801e846:	f107 0116 	add.w	r1, r7, #22
 801e84a:	f107 0218 	add.w	r2, r7, #24
 801e84e:	4610      	mov	r0, r2
 801e850:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801e852:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801e856:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801e858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e85a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801e85c:	f44f 7100 	mov.w	r1, #512	; 0x200
 801e860:	4823      	ldr	r0, [pc, #140]	; (801e8f0 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801e862:	f7ff fa29 	bl	801dcb8 <tiny_vsnprintf_like>
 801e866:	4603      	mov	r3, r0
 801e868:	85bb      	strh	r3, [r7, #44]	; 0x2c

  TRACE_Lock();
 801e86a:	f000 f9f1 	bl	801ec50 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801e86e:	8afa      	ldrh	r2, [r7, #22]
 801e870:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801e872:	4413      	add	r3, r2
 801e874:	b29b      	uxth	r3, r3
 801e876:	f107 0214 	add.w	r2, r7, #20
 801e87a:	4611      	mov	r1, r2
 801e87c:	4618      	mov	r0, r3
 801e87e:	f000 f969 	bl	801eb54 <TRACE_AllocateBufer>
 801e882:	4603      	mov	r3, r0
 801e884:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e888:	d025      	beq.n	801e8d6 <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801e88a:	2300      	movs	r3, #0
 801e88c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801e88e:	e00e      	b.n	801e8ae <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801e890:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801e892:	8aba      	ldrh	r2, [r7, #20]
 801e894:	3330      	adds	r3, #48	; 0x30
 801e896:	443b      	add	r3, r7
 801e898:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801e89c:	4b15      	ldr	r3, [pc, #84]	; (801e8f4 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801e89e:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801e8a0:	8abb      	ldrh	r3, [r7, #20]
 801e8a2:	3301      	adds	r3, #1
 801e8a4:	b29b      	uxth	r3, r3
 801e8a6:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801e8a8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801e8aa:	3301      	adds	r3, #1
 801e8ac:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801e8ae:	8afb      	ldrh	r3, [r7, #22]
 801e8b0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801e8b2:	429a      	cmp	r2, r3
 801e8b4:	d3ec      	bcc.n	801e890 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801e8b6:	8abb      	ldrh	r3, [r7, #20]
 801e8b8:	461a      	mov	r2, r3
 801e8ba:	4b0e      	ldr	r3, [pc, #56]	; (801e8f4 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801e8bc:	18d0      	adds	r0, r2, r3
 801e8be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e8c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801e8c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 801e8c6:	f7ff f9f7 	bl	801dcb8 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801e8ca:	f000 f9df 	bl	801ec8c <TRACE_UnLock>

    return TRACE_Send();
 801e8ce:	f000 f831 	bl	801e934 <TRACE_Send>
 801e8d2:	4603      	mov	r3, r0
 801e8d4:	e003      	b.n	801e8de <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801e8d6:	f000 f9d9 	bl	801ec8c <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801e8da:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801e8de:	4618      	mov	r0, r3
 801e8e0:	3734      	adds	r7, #52	; 0x34
 801e8e2:	46bd      	mov	sp, r7
 801e8e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801e8e8:	b001      	add	sp, #4
 801e8ea:	4770      	bx	lr
 801e8ec:	20001c58 	.word	0x20001c58
 801e8f0:	20002070 	.word	0x20002070
 801e8f4:	20001c70 	.word	0x20001c70

0801e8f8 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801e8f8:	b480      	push	{r7}
 801e8fa:	b083      	sub	sp, #12
 801e8fc:	af00      	add	r7, sp, #0
 801e8fe:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801e900:	4a03      	ldr	r2, [pc, #12]	; (801e910 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801e902:	687b      	ldr	r3, [r7, #4]
 801e904:	6053      	str	r3, [r2, #4]
}
 801e906:	bf00      	nop
 801e908:	370c      	adds	r7, #12
 801e90a:	46bd      	mov	sp, r7
 801e90c:	bc80      	pop	{r7}
 801e90e:	4770      	bx	lr
 801e910:	20001c58 	.word	0x20001c58

0801e914 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801e914:	b480      	push	{r7}
 801e916:	b083      	sub	sp, #12
 801e918:	af00      	add	r7, sp, #0
 801e91a:	4603      	mov	r3, r0
 801e91c:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801e91e:	4a04      	ldr	r2, [pc, #16]	; (801e930 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801e920:	79fb      	ldrb	r3, [r7, #7]
 801e922:	7213      	strb	r3, [r2, #8]
}
 801e924:	bf00      	nop
 801e926:	370c      	adds	r7, #12
 801e928:	46bd      	mov	sp, r7
 801e92a:	bc80      	pop	{r7}
 801e92c:	4770      	bx	lr
 801e92e:	bf00      	nop
 801e930:	20001c58 	.word	0x20001c58

0801e934 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801e934:	b580      	push	{r7, lr}
 801e936:	b088      	sub	sp, #32
 801e938:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801e93a:	2300      	movs	r3, #0
 801e93c:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801e93e:	2300      	movs	r3, #0
 801e940:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e942:	f3ef 8310 	mrs	r3, PRIMASK
 801e946:	613b      	str	r3, [r7, #16]
  return(result);
 801e948:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801e94a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801e94c:	b672      	cpsid	i
}
 801e94e:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801e950:	f000 f9ba 	bl	801ecc8 <TRACE_IsLocked>
 801e954:	4603      	mov	r3, r0
 801e956:	2b00      	cmp	r3, #0
 801e958:	d15d      	bne.n	801ea16 <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801e95a:	f000 f979 	bl	801ec50 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801e95e:	4b34      	ldr	r3, [pc, #208]	; (801ea30 <TRACE_Send+0xfc>)
 801e960:	8a1a      	ldrh	r2, [r3, #16]
 801e962:	4b33      	ldr	r3, [pc, #204]	; (801ea30 <TRACE_Send+0xfc>)
 801e964:	8a5b      	ldrh	r3, [r3, #18]
 801e966:	429a      	cmp	r2, r3
 801e968:	d04d      	beq.n	801ea06 <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801e96a:	4b31      	ldr	r3, [pc, #196]	; (801ea30 <TRACE_Send+0xfc>)
 801e96c:	789b      	ldrb	r3, [r3, #2]
 801e96e:	2b01      	cmp	r3, #1
 801e970:	d117      	bne.n	801e9a2 <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801e972:	4b2f      	ldr	r3, [pc, #188]	; (801ea30 <TRACE_Send+0xfc>)
 801e974:	881a      	ldrh	r2, [r3, #0]
 801e976:	4b2e      	ldr	r3, [pc, #184]	; (801ea30 <TRACE_Send+0xfc>)
 801e978:	8a1b      	ldrh	r3, [r3, #16]
 801e97a:	1ad3      	subs	r3, r2, r3
 801e97c:	b29a      	uxth	r2, r3
 801e97e:	4b2c      	ldr	r3, [pc, #176]	; (801ea30 <TRACE_Send+0xfc>)
 801e980:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801e982:	4b2b      	ldr	r3, [pc, #172]	; (801ea30 <TRACE_Send+0xfc>)
 801e984:	2202      	movs	r2, #2
 801e986:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801e988:	4b29      	ldr	r3, [pc, #164]	; (801ea30 <TRACE_Send+0xfc>)
 801e98a:	2200      	movs	r2, #0
 801e98c:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801e98e:	4b28      	ldr	r3, [pc, #160]	; (801ea30 <TRACE_Send+0xfc>)
 801e990:	8a9b      	ldrh	r3, [r3, #20]
 801e992:	2b00      	cmp	r3, #0
 801e994:	d105      	bne.n	801e9a2 <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801e996:	4b26      	ldr	r3, [pc, #152]	; (801ea30 <TRACE_Send+0xfc>)
 801e998:	2200      	movs	r2, #0
 801e99a:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801e99c:	4b24      	ldr	r3, [pc, #144]	; (801ea30 <TRACE_Send+0xfc>)
 801e99e:	2200      	movs	r2, #0
 801e9a0:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801e9a2:	4b23      	ldr	r3, [pc, #140]	; (801ea30 <TRACE_Send+0xfc>)
 801e9a4:	789b      	ldrb	r3, [r3, #2]
 801e9a6:	2b00      	cmp	r3, #0
 801e9a8:	d115      	bne.n	801e9d6 <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801e9aa:	4b21      	ldr	r3, [pc, #132]	; (801ea30 <TRACE_Send+0xfc>)
 801e9ac:	8a5a      	ldrh	r2, [r3, #18]
 801e9ae:	4b20      	ldr	r3, [pc, #128]	; (801ea30 <TRACE_Send+0xfc>)
 801e9b0:	8a1b      	ldrh	r3, [r3, #16]
 801e9b2:	429a      	cmp	r2, r3
 801e9b4:	d908      	bls.n	801e9c8 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801e9b6:	4b1e      	ldr	r3, [pc, #120]	; (801ea30 <TRACE_Send+0xfc>)
 801e9b8:	8a5a      	ldrh	r2, [r3, #18]
 801e9ba:	4b1d      	ldr	r3, [pc, #116]	; (801ea30 <TRACE_Send+0xfc>)
 801e9bc:	8a1b      	ldrh	r3, [r3, #16]
 801e9be:	1ad3      	subs	r3, r2, r3
 801e9c0:	b29a      	uxth	r2, r3
 801e9c2:	4b1b      	ldr	r3, [pc, #108]	; (801ea30 <TRACE_Send+0xfc>)
 801e9c4:	829a      	strh	r2, [r3, #20]
 801e9c6:	e006      	b.n	801e9d6 <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801e9c8:	4b19      	ldr	r3, [pc, #100]	; (801ea30 <TRACE_Send+0xfc>)
 801e9ca:	8a1b      	ldrh	r3, [r3, #16]
 801e9cc:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801e9d0:	b29a      	uxth	r2, r3
 801e9d2:	4b17      	ldr	r3, [pc, #92]	; (801ea30 <TRACE_Send+0xfc>)
 801e9d4:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801e9d6:	4b16      	ldr	r3, [pc, #88]	; (801ea30 <TRACE_Send+0xfc>)
 801e9d8:	8a1b      	ldrh	r3, [r3, #16]
 801e9da:	461a      	mov	r2, r3
 801e9dc:	4b15      	ldr	r3, [pc, #84]	; (801ea34 <TRACE_Send+0x100>)
 801e9de:	4413      	add	r3, r2
 801e9e0:	61bb      	str	r3, [r7, #24]
 801e9e2:	697b      	ldr	r3, [r7, #20]
 801e9e4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e9e6:	68fb      	ldr	r3, [r7, #12]
 801e9e8:	f383 8810 	msr	PRIMASK, r3
}
 801e9ec:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801e9ee:	f7e3 ff4b 	bl	8002888 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801e9f2:	4b11      	ldr	r3, [pc, #68]	; (801ea38 <TRACE_Send+0x104>)
 801e9f4:	68db      	ldr	r3, [r3, #12]
 801e9f6:	4a0e      	ldr	r2, [pc, #56]	; (801ea30 <TRACE_Send+0xfc>)
 801e9f8:	8a92      	ldrh	r2, [r2, #20]
 801e9fa:	4611      	mov	r1, r2
 801e9fc:	69b8      	ldr	r0, [r7, #24]
 801e9fe:	4798      	blx	r3
 801ea00:	4603      	mov	r3, r0
 801ea02:	77fb      	strb	r3, [r7, #31]
 801ea04:	e00d      	b.n	801ea22 <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801ea06:	f000 f941 	bl	801ec8c <TRACE_UnLock>
 801ea0a:	697b      	ldr	r3, [r7, #20]
 801ea0c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ea0e:	68bb      	ldr	r3, [r7, #8]
 801ea10:	f383 8810 	msr	PRIMASK, r3
}
 801ea14:	e005      	b.n	801ea22 <TRACE_Send+0xee>
 801ea16:	697b      	ldr	r3, [r7, #20]
 801ea18:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ea1a:	687b      	ldr	r3, [r7, #4]
 801ea1c:	f383 8810 	msr	PRIMASK, r3
}
 801ea20:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801ea22:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801ea26:	4618      	mov	r0, r3
 801ea28:	3720      	adds	r7, #32
 801ea2a:	46bd      	mov	sp, r7
 801ea2c:	bd80      	pop	{r7, pc}
 801ea2e:	bf00      	nop
 801ea30:	20001c58 	.word	0x20001c58
 801ea34:	20001c70 	.word	0x20001c70
 801ea38:	0801f844 	.word	0x0801f844

0801ea3c <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801ea3c:	b580      	push	{r7, lr}
 801ea3e:	b088      	sub	sp, #32
 801ea40:	af00      	add	r7, sp, #0
 801ea42:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801ea44:	2300      	movs	r3, #0
 801ea46:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ea48:	f3ef 8310 	mrs	r3, PRIMASK
 801ea4c:	617b      	str	r3, [r7, #20]
  return(result);
 801ea4e:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801ea50:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801ea52:	b672      	cpsid	i
}
 801ea54:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801ea56:	4b3c      	ldr	r3, [pc, #240]	; (801eb48 <TRACE_TxCpltCallback+0x10c>)
 801ea58:	789b      	ldrb	r3, [r3, #2]
 801ea5a:	2b02      	cmp	r3, #2
 801ea5c:	d106      	bne.n	801ea6c <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801ea5e:	4b3a      	ldr	r3, [pc, #232]	; (801eb48 <TRACE_TxCpltCallback+0x10c>)
 801ea60:	2200      	movs	r2, #0
 801ea62:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801ea64:	4b38      	ldr	r3, [pc, #224]	; (801eb48 <TRACE_TxCpltCallback+0x10c>)
 801ea66:	2200      	movs	r2, #0
 801ea68:	821a      	strh	r2, [r3, #16]
 801ea6a:	e00a      	b.n	801ea82 <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801ea6c:	4b36      	ldr	r3, [pc, #216]	; (801eb48 <TRACE_TxCpltCallback+0x10c>)
 801ea6e:	8a1a      	ldrh	r2, [r3, #16]
 801ea70:	4b35      	ldr	r3, [pc, #212]	; (801eb48 <TRACE_TxCpltCallback+0x10c>)
 801ea72:	8a9b      	ldrh	r3, [r3, #20]
 801ea74:	4413      	add	r3, r2
 801ea76:	b29b      	uxth	r3, r3
 801ea78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801ea7c:	b29a      	uxth	r2, r3
 801ea7e:	4b32      	ldr	r3, [pc, #200]	; (801eb48 <TRACE_TxCpltCallback+0x10c>)
 801ea80:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801ea82:	4b31      	ldr	r3, [pc, #196]	; (801eb48 <TRACE_TxCpltCallback+0x10c>)
 801ea84:	8a1a      	ldrh	r2, [r3, #16]
 801ea86:	4b30      	ldr	r3, [pc, #192]	; (801eb48 <TRACE_TxCpltCallback+0x10c>)
 801ea88:	8a5b      	ldrh	r3, [r3, #18]
 801ea8a:	429a      	cmp	r2, r3
 801ea8c:	d04d      	beq.n	801eb2a <TRACE_TxCpltCallback+0xee>
 801ea8e:	4b2e      	ldr	r3, [pc, #184]	; (801eb48 <TRACE_TxCpltCallback+0x10c>)
 801ea90:	8adb      	ldrh	r3, [r3, #22]
 801ea92:	2b01      	cmp	r3, #1
 801ea94:	d149      	bne.n	801eb2a <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801ea96:	4b2c      	ldr	r3, [pc, #176]	; (801eb48 <TRACE_TxCpltCallback+0x10c>)
 801ea98:	789b      	ldrb	r3, [r3, #2]
 801ea9a:	2b01      	cmp	r3, #1
 801ea9c:	d117      	bne.n	801eace <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801ea9e:	4b2a      	ldr	r3, [pc, #168]	; (801eb48 <TRACE_TxCpltCallback+0x10c>)
 801eaa0:	881a      	ldrh	r2, [r3, #0]
 801eaa2:	4b29      	ldr	r3, [pc, #164]	; (801eb48 <TRACE_TxCpltCallback+0x10c>)
 801eaa4:	8a1b      	ldrh	r3, [r3, #16]
 801eaa6:	1ad3      	subs	r3, r2, r3
 801eaa8:	b29a      	uxth	r2, r3
 801eaaa:	4b27      	ldr	r3, [pc, #156]	; (801eb48 <TRACE_TxCpltCallback+0x10c>)
 801eaac:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801eaae:	4b26      	ldr	r3, [pc, #152]	; (801eb48 <TRACE_TxCpltCallback+0x10c>)
 801eab0:	2202      	movs	r2, #2
 801eab2:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801eab4:	4b24      	ldr	r3, [pc, #144]	; (801eb48 <TRACE_TxCpltCallback+0x10c>)
 801eab6:	2200      	movs	r2, #0
 801eab8:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801eaba:	4b23      	ldr	r3, [pc, #140]	; (801eb48 <TRACE_TxCpltCallback+0x10c>)
 801eabc:	8a9b      	ldrh	r3, [r3, #20]
 801eabe:	2b00      	cmp	r3, #0
 801eac0:	d105      	bne.n	801eace <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801eac2:	4b21      	ldr	r3, [pc, #132]	; (801eb48 <TRACE_TxCpltCallback+0x10c>)
 801eac4:	2200      	movs	r2, #0
 801eac6:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801eac8:	4b1f      	ldr	r3, [pc, #124]	; (801eb48 <TRACE_TxCpltCallback+0x10c>)
 801eaca:	2200      	movs	r2, #0
 801eacc:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801eace:	4b1e      	ldr	r3, [pc, #120]	; (801eb48 <TRACE_TxCpltCallback+0x10c>)
 801ead0:	789b      	ldrb	r3, [r3, #2]
 801ead2:	2b00      	cmp	r3, #0
 801ead4:	d115      	bne.n	801eb02 <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801ead6:	4b1c      	ldr	r3, [pc, #112]	; (801eb48 <TRACE_TxCpltCallback+0x10c>)
 801ead8:	8a5a      	ldrh	r2, [r3, #18]
 801eada:	4b1b      	ldr	r3, [pc, #108]	; (801eb48 <TRACE_TxCpltCallback+0x10c>)
 801eadc:	8a1b      	ldrh	r3, [r3, #16]
 801eade:	429a      	cmp	r2, r3
 801eae0:	d908      	bls.n	801eaf4 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801eae2:	4b19      	ldr	r3, [pc, #100]	; (801eb48 <TRACE_TxCpltCallback+0x10c>)
 801eae4:	8a5a      	ldrh	r2, [r3, #18]
 801eae6:	4b18      	ldr	r3, [pc, #96]	; (801eb48 <TRACE_TxCpltCallback+0x10c>)
 801eae8:	8a1b      	ldrh	r3, [r3, #16]
 801eaea:	1ad3      	subs	r3, r2, r3
 801eaec:	b29a      	uxth	r2, r3
 801eaee:	4b16      	ldr	r3, [pc, #88]	; (801eb48 <TRACE_TxCpltCallback+0x10c>)
 801eaf0:	829a      	strh	r2, [r3, #20]
 801eaf2:	e006      	b.n	801eb02 <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801eaf4:	4b14      	ldr	r3, [pc, #80]	; (801eb48 <TRACE_TxCpltCallback+0x10c>)
 801eaf6:	8a1b      	ldrh	r3, [r3, #16]
 801eaf8:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801eafc:	b29a      	uxth	r2, r3
 801eafe:	4b12      	ldr	r3, [pc, #72]	; (801eb48 <TRACE_TxCpltCallback+0x10c>)
 801eb00:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801eb02:	4b11      	ldr	r3, [pc, #68]	; (801eb48 <TRACE_TxCpltCallback+0x10c>)
 801eb04:	8a1b      	ldrh	r3, [r3, #16]
 801eb06:	461a      	mov	r2, r3
 801eb08:	4b10      	ldr	r3, [pc, #64]	; (801eb4c <TRACE_TxCpltCallback+0x110>)
 801eb0a:	4413      	add	r3, r2
 801eb0c:	61fb      	str	r3, [r7, #28]
 801eb0e:	69bb      	ldr	r3, [r7, #24]
 801eb10:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801eb12:	693b      	ldr	r3, [r7, #16]
 801eb14:	f383 8810 	msr	PRIMASK, r3
}
 801eb18:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801eb1a:	4b0d      	ldr	r3, [pc, #52]	; (801eb50 <TRACE_TxCpltCallback+0x114>)
 801eb1c:	68db      	ldr	r3, [r3, #12]
 801eb1e:	4a0a      	ldr	r2, [pc, #40]	; (801eb48 <TRACE_TxCpltCallback+0x10c>)
 801eb20:	8a92      	ldrh	r2, [r2, #20]
 801eb22:	4611      	mov	r1, r2
 801eb24:	69f8      	ldr	r0, [r7, #28]
 801eb26:	4798      	blx	r3
 801eb28:	e00a      	b.n	801eb40 <TRACE_TxCpltCallback+0x104>
 801eb2a:	69bb      	ldr	r3, [r7, #24]
 801eb2c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801eb2e:	68fb      	ldr	r3, [r7, #12]
 801eb30:	f383 8810 	msr	PRIMASK, r3
}
 801eb34:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801eb36:	f7e3 feaf 	bl	8002898 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801eb3a:	f000 f8a7 	bl	801ec8c <TRACE_UnLock>
  }
}
 801eb3e:	bf00      	nop
 801eb40:	bf00      	nop
 801eb42:	3720      	adds	r7, #32
 801eb44:	46bd      	mov	sp, r7
 801eb46:	bd80      	pop	{r7, pc}
 801eb48:	20001c58 	.word	0x20001c58
 801eb4c:	20001c70 	.word	0x20001c70
 801eb50:	0801f844 	.word	0x0801f844

0801eb54 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801eb54:	b480      	push	{r7}
 801eb56:	b087      	sub	sp, #28
 801eb58:	af00      	add	r7, sp, #0
 801eb5a:	4603      	mov	r3, r0
 801eb5c:	6039      	str	r1, [r7, #0]
 801eb5e:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801eb60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801eb64:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801eb66:	f3ef 8310 	mrs	r3, PRIMASK
 801eb6a:	60fb      	str	r3, [r7, #12]
  return(result);
 801eb6c:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801eb6e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801eb70:	b672      	cpsid	i
}
 801eb72:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801eb74:	4b35      	ldr	r3, [pc, #212]	; (801ec4c <TRACE_AllocateBufer+0xf8>)
 801eb76:	8a5a      	ldrh	r2, [r3, #18]
 801eb78:	4b34      	ldr	r3, [pc, #208]	; (801ec4c <TRACE_AllocateBufer+0xf8>)
 801eb7a:	8a1b      	ldrh	r3, [r3, #16]
 801eb7c:	429a      	cmp	r2, r3
 801eb7e:	d11b      	bne.n	801ebb8 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801eb80:	4b32      	ldr	r3, [pc, #200]	; (801ec4c <TRACE_AllocateBufer+0xf8>)
 801eb82:	8a5b      	ldrh	r3, [r3, #18]
 801eb84:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801eb88:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801eb8a:	88fa      	ldrh	r2, [r7, #6]
 801eb8c:	8afb      	ldrh	r3, [r7, #22]
 801eb8e:	429a      	cmp	r2, r3
 801eb90:	d33a      	bcc.n	801ec08 <TRACE_AllocateBufer+0xb4>
 801eb92:	4b2e      	ldr	r3, [pc, #184]	; (801ec4c <TRACE_AllocateBufer+0xf8>)
 801eb94:	8a1b      	ldrh	r3, [r3, #16]
 801eb96:	88fa      	ldrh	r2, [r7, #6]
 801eb98:	429a      	cmp	r2, r3
 801eb9a:	d235      	bcs.n	801ec08 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801eb9c:	4b2b      	ldr	r3, [pc, #172]	; (801ec4c <TRACE_AllocateBufer+0xf8>)
 801eb9e:	2201      	movs	r2, #1
 801eba0:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801eba2:	4b2a      	ldr	r3, [pc, #168]	; (801ec4c <TRACE_AllocateBufer+0xf8>)
 801eba4:	8a5a      	ldrh	r2, [r3, #18]
 801eba6:	4b29      	ldr	r3, [pc, #164]	; (801ec4c <TRACE_AllocateBufer+0xf8>)
 801eba8:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801ebaa:	4b28      	ldr	r3, [pc, #160]	; (801ec4c <TRACE_AllocateBufer+0xf8>)
 801ebac:	8a1b      	ldrh	r3, [r3, #16]
 801ebae:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801ebb0:	4b26      	ldr	r3, [pc, #152]	; (801ec4c <TRACE_AllocateBufer+0xf8>)
 801ebb2:	2200      	movs	r2, #0
 801ebb4:	825a      	strh	r2, [r3, #18]
 801ebb6:	e027      	b.n	801ec08 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801ebb8:	4b24      	ldr	r3, [pc, #144]	; (801ec4c <TRACE_AllocateBufer+0xf8>)
 801ebba:	8a5a      	ldrh	r2, [r3, #18]
 801ebbc:	4b23      	ldr	r3, [pc, #140]	; (801ec4c <TRACE_AllocateBufer+0xf8>)
 801ebbe:	8a1b      	ldrh	r3, [r3, #16]
 801ebc0:	429a      	cmp	r2, r3
 801ebc2:	d91b      	bls.n	801ebfc <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801ebc4:	4b21      	ldr	r3, [pc, #132]	; (801ec4c <TRACE_AllocateBufer+0xf8>)
 801ebc6:	8a5b      	ldrh	r3, [r3, #18]
 801ebc8:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801ebcc:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801ebce:	88fa      	ldrh	r2, [r7, #6]
 801ebd0:	8afb      	ldrh	r3, [r7, #22]
 801ebd2:	429a      	cmp	r2, r3
 801ebd4:	d318      	bcc.n	801ec08 <TRACE_AllocateBufer+0xb4>
 801ebd6:	4b1d      	ldr	r3, [pc, #116]	; (801ec4c <TRACE_AllocateBufer+0xf8>)
 801ebd8:	8a1b      	ldrh	r3, [r3, #16]
 801ebda:	88fa      	ldrh	r2, [r7, #6]
 801ebdc:	429a      	cmp	r2, r3
 801ebde:	d213      	bcs.n	801ec08 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801ebe0:	4b1a      	ldr	r3, [pc, #104]	; (801ec4c <TRACE_AllocateBufer+0xf8>)
 801ebe2:	2201      	movs	r2, #1
 801ebe4:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801ebe6:	4b19      	ldr	r3, [pc, #100]	; (801ec4c <TRACE_AllocateBufer+0xf8>)
 801ebe8:	8a5a      	ldrh	r2, [r3, #18]
 801ebea:	4b18      	ldr	r3, [pc, #96]	; (801ec4c <TRACE_AllocateBufer+0xf8>)
 801ebec:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801ebee:	4b17      	ldr	r3, [pc, #92]	; (801ec4c <TRACE_AllocateBufer+0xf8>)
 801ebf0:	8a1b      	ldrh	r3, [r3, #16]
 801ebf2:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801ebf4:	4b15      	ldr	r3, [pc, #84]	; (801ec4c <TRACE_AllocateBufer+0xf8>)
 801ebf6:	2200      	movs	r2, #0
 801ebf8:	825a      	strh	r2, [r3, #18]
 801ebfa:	e005      	b.n	801ec08 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801ebfc:	4b13      	ldr	r3, [pc, #76]	; (801ec4c <TRACE_AllocateBufer+0xf8>)
 801ebfe:	8a1a      	ldrh	r2, [r3, #16]
 801ec00:	4b12      	ldr	r3, [pc, #72]	; (801ec4c <TRACE_AllocateBufer+0xf8>)
 801ec02:	8a5b      	ldrh	r3, [r3, #18]
 801ec04:	1ad3      	subs	r3, r2, r3
 801ec06:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801ec08:	8afa      	ldrh	r2, [r7, #22]
 801ec0a:	88fb      	ldrh	r3, [r7, #6]
 801ec0c:	429a      	cmp	r2, r3
 801ec0e:	d90f      	bls.n	801ec30 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801ec10:	4b0e      	ldr	r3, [pc, #56]	; (801ec4c <TRACE_AllocateBufer+0xf8>)
 801ec12:	8a5a      	ldrh	r2, [r3, #18]
 801ec14:	683b      	ldr	r3, [r7, #0]
 801ec16:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801ec18:	4b0c      	ldr	r3, [pc, #48]	; (801ec4c <TRACE_AllocateBufer+0xf8>)
 801ec1a:	8a5a      	ldrh	r2, [r3, #18]
 801ec1c:	88fb      	ldrh	r3, [r7, #6]
 801ec1e:	4413      	add	r3, r2
 801ec20:	b29b      	uxth	r3, r3
 801ec22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801ec26:	b29a      	uxth	r2, r3
 801ec28:	4b08      	ldr	r3, [pc, #32]	; (801ec4c <TRACE_AllocateBufer+0xf8>)
 801ec2a:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801ec2c:	2300      	movs	r3, #0
 801ec2e:	82bb      	strh	r3, [r7, #20]
 801ec30:	693b      	ldr	r3, [r7, #16]
 801ec32:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ec34:	68bb      	ldr	r3, [r7, #8]
 801ec36:	f383 8810 	msr	PRIMASK, r3
}
 801ec3a:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801ec3c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801ec40:	4618      	mov	r0, r3
 801ec42:	371c      	adds	r7, #28
 801ec44:	46bd      	mov	sp, r7
 801ec46:	bc80      	pop	{r7}
 801ec48:	4770      	bx	lr
 801ec4a:	bf00      	nop
 801ec4c:	20001c58 	.word	0x20001c58

0801ec50 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801ec50:	b480      	push	{r7}
 801ec52:	b085      	sub	sp, #20
 801ec54:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ec56:	f3ef 8310 	mrs	r3, PRIMASK
 801ec5a:	607b      	str	r3, [r7, #4]
  return(result);
 801ec5c:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801ec5e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801ec60:	b672      	cpsid	i
}
 801ec62:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801ec64:	4b08      	ldr	r3, [pc, #32]	; (801ec88 <TRACE_Lock+0x38>)
 801ec66:	8adb      	ldrh	r3, [r3, #22]
 801ec68:	3301      	adds	r3, #1
 801ec6a:	b29a      	uxth	r2, r3
 801ec6c:	4b06      	ldr	r3, [pc, #24]	; (801ec88 <TRACE_Lock+0x38>)
 801ec6e:	82da      	strh	r2, [r3, #22]
 801ec70:	68fb      	ldr	r3, [r7, #12]
 801ec72:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ec74:	68bb      	ldr	r3, [r7, #8]
 801ec76:	f383 8810 	msr	PRIMASK, r3
}
 801ec7a:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801ec7c:	bf00      	nop
 801ec7e:	3714      	adds	r7, #20
 801ec80:	46bd      	mov	sp, r7
 801ec82:	bc80      	pop	{r7}
 801ec84:	4770      	bx	lr
 801ec86:	bf00      	nop
 801ec88:	20001c58 	.word	0x20001c58

0801ec8c <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801ec8c:	b480      	push	{r7}
 801ec8e:	b085      	sub	sp, #20
 801ec90:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ec92:	f3ef 8310 	mrs	r3, PRIMASK
 801ec96:	607b      	str	r3, [r7, #4]
  return(result);
 801ec98:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801ec9a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801ec9c:	b672      	cpsid	i
}
 801ec9e:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801eca0:	4b08      	ldr	r3, [pc, #32]	; (801ecc4 <TRACE_UnLock+0x38>)
 801eca2:	8adb      	ldrh	r3, [r3, #22]
 801eca4:	3b01      	subs	r3, #1
 801eca6:	b29a      	uxth	r2, r3
 801eca8:	4b06      	ldr	r3, [pc, #24]	; (801ecc4 <TRACE_UnLock+0x38>)
 801ecaa:	82da      	strh	r2, [r3, #22]
 801ecac:	68fb      	ldr	r3, [r7, #12]
 801ecae:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ecb0:	68bb      	ldr	r3, [r7, #8]
 801ecb2:	f383 8810 	msr	PRIMASK, r3
}
 801ecb6:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801ecb8:	bf00      	nop
 801ecba:	3714      	adds	r7, #20
 801ecbc:	46bd      	mov	sp, r7
 801ecbe:	bc80      	pop	{r7}
 801ecc0:	4770      	bx	lr
 801ecc2:	bf00      	nop
 801ecc4:	20001c58 	.word	0x20001c58

0801ecc8 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801ecc8:	b480      	push	{r7}
 801ecca:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801eccc:	4b05      	ldr	r3, [pc, #20]	; (801ece4 <TRACE_IsLocked+0x1c>)
 801ecce:	8adb      	ldrh	r3, [r3, #22]
 801ecd0:	2b00      	cmp	r3, #0
 801ecd2:	bf14      	ite	ne
 801ecd4:	2301      	movne	r3, #1
 801ecd6:	2300      	moveq	r3, #0
 801ecd8:	b2db      	uxtb	r3, r3
}
 801ecda:	4618      	mov	r0, r3
 801ecdc:	46bd      	mov	sp, r7
 801ecde:	bc80      	pop	{r7}
 801ece0:	4770      	bx	lr
 801ece2:	bf00      	nop
 801ece4:	20001c58 	.word	0x20001c58

0801ece8 <memset>:
 801ece8:	4402      	add	r2, r0
 801ecea:	4603      	mov	r3, r0
 801ecec:	4293      	cmp	r3, r2
 801ecee:	d100      	bne.n	801ecf2 <memset+0xa>
 801ecf0:	4770      	bx	lr
 801ecf2:	f803 1b01 	strb.w	r1, [r3], #1
 801ecf6:	e7f9      	b.n	801ecec <memset+0x4>

0801ecf8 <__libc_init_array>:
 801ecf8:	b570      	push	{r4, r5, r6, lr}
 801ecfa:	4d0d      	ldr	r5, [pc, #52]	; (801ed30 <__libc_init_array+0x38>)
 801ecfc:	4c0d      	ldr	r4, [pc, #52]	; (801ed34 <__libc_init_array+0x3c>)
 801ecfe:	1b64      	subs	r4, r4, r5
 801ed00:	10a4      	asrs	r4, r4, #2
 801ed02:	2600      	movs	r6, #0
 801ed04:	42a6      	cmp	r6, r4
 801ed06:	d109      	bne.n	801ed1c <__libc_init_array+0x24>
 801ed08:	4d0b      	ldr	r5, [pc, #44]	; (801ed38 <__libc_init_array+0x40>)
 801ed0a:	4c0c      	ldr	r4, [pc, #48]	; (801ed3c <__libc_init_array+0x44>)
 801ed0c:	f000 f898 	bl	801ee40 <_init>
 801ed10:	1b64      	subs	r4, r4, r5
 801ed12:	10a4      	asrs	r4, r4, #2
 801ed14:	2600      	movs	r6, #0
 801ed16:	42a6      	cmp	r6, r4
 801ed18:	d105      	bne.n	801ed26 <__libc_init_array+0x2e>
 801ed1a:	bd70      	pop	{r4, r5, r6, pc}
 801ed1c:	f855 3b04 	ldr.w	r3, [r5], #4
 801ed20:	4798      	blx	r3
 801ed22:	3601      	adds	r6, #1
 801ed24:	e7ee      	b.n	801ed04 <__libc_init_array+0xc>
 801ed26:	f855 3b04 	ldr.w	r3, [r5], #4
 801ed2a:	4798      	blx	r3
 801ed2c:	3601      	adds	r6, #1
 801ed2e:	e7f2      	b.n	801ed16 <__libc_init_array+0x1e>
 801ed30:	0801fefc 	.word	0x0801fefc
 801ed34:	0801fefc 	.word	0x0801fefc
 801ed38:	0801fefc 	.word	0x0801fefc
 801ed3c:	0801ff00 	.word	0x0801ff00

0801ed40 <floor>:
 801ed40:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801ed44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ed48:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801ed4c:	2e13      	cmp	r6, #19
 801ed4e:	460b      	mov	r3, r1
 801ed50:	4607      	mov	r7, r0
 801ed52:	460c      	mov	r4, r1
 801ed54:	4605      	mov	r5, r0
 801ed56:	dc32      	bgt.n	801edbe <floor+0x7e>
 801ed58:	2e00      	cmp	r6, #0
 801ed5a:	da14      	bge.n	801ed86 <floor+0x46>
 801ed5c:	a334      	add	r3, pc, #208	; (adr r3, 801ee30 <floor+0xf0>)
 801ed5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ed62:	f7e1 fa17 	bl	8000194 <__adddf3>
 801ed66:	2200      	movs	r2, #0
 801ed68:	2300      	movs	r3, #0
 801ed6a:	f7e1 fe59 	bl	8000a20 <__aeabi_dcmpgt>
 801ed6e:	b138      	cbz	r0, 801ed80 <floor+0x40>
 801ed70:	2c00      	cmp	r4, #0
 801ed72:	da56      	bge.n	801ee22 <floor+0xe2>
 801ed74:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 801ed78:	4325      	orrs	r5, r4
 801ed7a:	d055      	beq.n	801ee28 <floor+0xe8>
 801ed7c:	4c2e      	ldr	r4, [pc, #184]	; (801ee38 <floor+0xf8>)
 801ed7e:	2500      	movs	r5, #0
 801ed80:	4623      	mov	r3, r4
 801ed82:	462f      	mov	r7, r5
 801ed84:	e025      	b.n	801edd2 <floor+0x92>
 801ed86:	4a2d      	ldr	r2, [pc, #180]	; (801ee3c <floor+0xfc>)
 801ed88:	fa42 f806 	asr.w	r8, r2, r6
 801ed8c:	ea01 0208 	and.w	r2, r1, r8
 801ed90:	4302      	orrs	r2, r0
 801ed92:	d01e      	beq.n	801edd2 <floor+0x92>
 801ed94:	a326      	add	r3, pc, #152	; (adr r3, 801ee30 <floor+0xf0>)
 801ed96:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ed9a:	f7e1 f9fb 	bl	8000194 <__adddf3>
 801ed9e:	2200      	movs	r2, #0
 801eda0:	2300      	movs	r3, #0
 801eda2:	f7e1 fe3d 	bl	8000a20 <__aeabi_dcmpgt>
 801eda6:	2800      	cmp	r0, #0
 801eda8:	d0ea      	beq.n	801ed80 <floor+0x40>
 801edaa:	2c00      	cmp	r4, #0
 801edac:	bfbe      	ittt	lt
 801edae:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801edb2:	4133      	asrlt	r3, r6
 801edb4:	18e4      	addlt	r4, r4, r3
 801edb6:	ea24 0408 	bic.w	r4, r4, r8
 801edba:	2500      	movs	r5, #0
 801edbc:	e7e0      	b.n	801ed80 <floor+0x40>
 801edbe:	2e33      	cmp	r6, #51	; 0x33
 801edc0:	dd0b      	ble.n	801edda <floor+0x9a>
 801edc2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801edc6:	d104      	bne.n	801edd2 <floor+0x92>
 801edc8:	4602      	mov	r2, r0
 801edca:	f7e1 f9e3 	bl	8000194 <__adddf3>
 801edce:	4607      	mov	r7, r0
 801edd0:	460b      	mov	r3, r1
 801edd2:	4638      	mov	r0, r7
 801edd4:	4619      	mov	r1, r3
 801edd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801edda:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 801edde:	f04f 38ff 	mov.w	r8, #4294967295
 801ede2:	fa28 f802 	lsr.w	r8, r8, r2
 801ede6:	ea10 0f08 	tst.w	r0, r8
 801edea:	d0f2      	beq.n	801edd2 <floor+0x92>
 801edec:	a310      	add	r3, pc, #64	; (adr r3, 801ee30 <floor+0xf0>)
 801edee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801edf2:	f7e1 f9cf 	bl	8000194 <__adddf3>
 801edf6:	2200      	movs	r2, #0
 801edf8:	2300      	movs	r3, #0
 801edfa:	f7e1 fe11 	bl	8000a20 <__aeabi_dcmpgt>
 801edfe:	2800      	cmp	r0, #0
 801ee00:	d0be      	beq.n	801ed80 <floor+0x40>
 801ee02:	2c00      	cmp	r4, #0
 801ee04:	da0a      	bge.n	801ee1c <floor+0xdc>
 801ee06:	2e14      	cmp	r6, #20
 801ee08:	d101      	bne.n	801ee0e <floor+0xce>
 801ee0a:	3401      	adds	r4, #1
 801ee0c:	e006      	b.n	801ee1c <floor+0xdc>
 801ee0e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801ee12:	2301      	movs	r3, #1
 801ee14:	40b3      	lsls	r3, r6
 801ee16:	441d      	add	r5, r3
 801ee18:	42af      	cmp	r7, r5
 801ee1a:	d8f6      	bhi.n	801ee0a <floor+0xca>
 801ee1c:	ea25 0508 	bic.w	r5, r5, r8
 801ee20:	e7ae      	b.n	801ed80 <floor+0x40>
 801ee22:	2500      	movs	r5, #0
 801ee24:	462c      	mov	r4, r5
 801ee26:	e7ab      	b.n	801ed80 <floor+0x40>
 801ee28:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801ee2c:	e7a8      	b.n	801ed80 <floor+0x40>
 801ee2e:	bf00      	nop
 801ee30:	8800759c 	.word	0x8800759c
 801ee34:	7e37e43c 	.word	0x7e37e43c
 801ee38:	bff00000 	.word	0xbff00000
 801ee3c:	000fffff 	.word	0x000fffff

0801ee40 <_init>:
 801ee40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ee42:	bf00      	nop
 801ee44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ee46:	bc08      	pop	{r3}
 801ee48:	469e      	mov	lr, r3
 801ee4a:	4770      	bx	lr

0801ee4c <_fini>:
 801ee4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ee4e:	bf00      	nop
 801ee50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ee52:	bc08      	pop	{r3}
 801ee54:	469e      	mov	lr, r3
 801ee56:	4770      	bx	lr
