
Seeed-LoRa-E5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ed20  08000138  08000138  00001138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fc4  0801ee58  0801ee58  0001fe58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .USER_embedded_Keys 000000d8  0801fe1c  0801fe1c  00020e1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0801fef4  0801fef4  0002114c  2**0
                  CONTENTS
  5 .ARM          00000008  0801fef4  0801fef4  00020ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0801fefc  0801fefc  0002114c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0801fefc  0801fefc  00020efc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0801ff00  0801ff00  00020f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         0000014c  20000000  0801ff04  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00002124  2000014c  08020050  0002114c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002270  08020050  00021270  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0002114c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00047124  00000000  00000000  00021176  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000b010  00000000  00000000  0006829a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003718  00000000  00000000  000732b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002a18  00000000  00000000  000769c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a42f  00000000  00000000  000793e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00046be1  00000000  00000000  000a380f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cfb3a  00000000  00000000  000ea3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001b9f2a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000e470  00000000  00000000  001b9f70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  001c83e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	@ (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	@ (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	2000014c 	.word	0x2000014c
 8000154:	00000000 	.word	0x00000000
 8000158:	0801ee40 	.word	0x0801ee40

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	@ (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	@ (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	@ (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000150 	.word	0x20000150
 8000174:	0801ee40 	.word	0x0801ee40

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	@ 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__aeabi_dmul>:
 8000500:	b570      	push	{r4, r5, r6, lr}
 8000502:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000506:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800050a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800050e:	bf1d      	ittte	ne
 8000510:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000514:	ea94 0f0c 	teqne	r4, ip
 8000518:	ea95 0f0c 	teqne	r5, ip
 800051c:	f000 f8de 	bleq	80006dc <__aeabi_dmul+0x1dc>
 8000520:	442c      	add	r4, r5
 8000522:	ea81 0603 	eor.w	r6, r1, r3
 8000526:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800052a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800052e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000532:	bf18      	it	ne
 8000534:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000538:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800053c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000540:	d038      	beq.n	80005b4 <__aeabi_dmul+0xb4>
 8000542:	fba0 ce02 	umull	ip, lr, r0, r2
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800054e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000552:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000556:	f04f 0600 	mov.w	r6, #0
 800055a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800055e:	f09c 0f00 	teq	ip, #0
 8000562:	bf18      	it	ne
 8000564:	f04e 0e01 	orrne.w	lr, lr, #1
 8000568:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800056c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000570:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000574:	d204      	bcs.n	8000580 <__aeabi_dmul+0x80>
 8000576:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800057a:	416d      	adcs	r5, r5
 800057c:	eb46 0606 	adc.w	r6, r6, r6
 8000580:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000584:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000588:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800058c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000590:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000594:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000598:	bf88      	it	hi
 800059a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800059e:	d81e      	bhi.n	80005de <__aeabi_dmul+0xde>
 80005a0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005a4:	bf08      	it	eq
 80005a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005aa:	f150 0000 	adcs.w	r0, r0, #0
 80005ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005b2:	bd70      	pop	{r4, r5, r6, pc}
 80005b4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005b8:	ea46 0101 	orr.w	r1, r6, r1
 80005bc:	ea40 0002 	orr.w	r0, r0, r2
 80005c0:	ea81 0103 	eor.w	r1, r1, r3
 80005c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c8:	bfc2      	ittt	gt
 80005ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005d2:	bd70      	popgt	{r4, r5, r6, pc}
 80005d4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005d8:	f04f 0e00 	mov.w	lr, #0
 80005dc:	3c01      	subs	r4, #1
 80005de:	f300 80ab 	bgt.w	8000738 <__aeabi_dmul+0x238>
 80005e2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005e6:	bfde      	ittt	le
 80005e8:	2000      	movle	r0, #0
 80005ea:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005ee:	bd70      	pople	{r4, r5, r6, pc}
 80005f0:	f1c4 0400 	rsb	r4, r4, #0
 80005f4:	3c20      	subs	r4, #32
 80005f6:	da35      	bge.n	8000664 <__aeabi_dmul+0x164>
 80005f8:	340c      	adds	r4, #12
 80005fa:	dc1b      	bgt.n	8000634 <__aeabi_dmul+0x134>
 80005fc:	f104 0414 	add.w	r4, r4, #20
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f305 	lsl.w	r3, r0, r5
 8000608:	fa20 f004 	lsr.w	r0, r0, r4
 800060c:	fa01 f205 	lsl.w	r2, r1, r5
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000618:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800061c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000620:	fa21 f604 	lsr.w	r6, r1, r4
 8000624:	eb42 0106 	adc.w	r1, r2, r6
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 040c 	rsb	r4, r4, #12
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f304 	lsl.w	r3, r0, r4
 8000640:	fa20 f005 	lsr.w	r0, r0, r5
 8000644:	fa01 f204 	lsl.w	r2, r1, r4
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000650:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000654:	f141 0100 	adc.w	r1, r1, #0
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f205 	lsl.w	r2, r0, r5
 800066c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000670:	fa20 f304 	lsr.w	r3, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea43 0302 	orr.w	r3, r3, r2
 800067c:	fa21 f004 	lsr.w	r0, r1, r4
 8000680:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000684:	fa21 f204 	lsr.w	r2, r1, r4
 8000688:	ea20 0002 	bic.w	r0, r0, r2
 800068c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f094 0f00 	teq	r4, #0
 80006a0:	d10f      	bne.n	80006c2 <__aeabi_dmul+0x1c2>
 80006a2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006a6:	0040      	lsls	r0, r0, #1
 80006a8:	eb41 0101 	adc.w	r1, r1, r1
 80006ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006b0:	bf08      	it	eq
 80006b2:	3c01      	subeq	r4, #1
 80006b4:	d0f7      	beq.n	80006a6 <__aeabi_dmul+0x1a6>
 80006b6:	ea41 0106 	orr.w	r1, r1, r6
 80006ba:	f095 0f00 	teq	r5, #0
 80006be:	bf18      	it	ne
 80006c0:	4770      	bxne	lr
 80006c2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006c6:	0052      	lsls	r2, r2, #1
 80006c8:	eb43 0303 	adc.w	r3, r3, r3
 80006cc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006d0:	bf08      	it	eq
 80006d2:	3d01      	subeq	r5, #1
 80006d4:	d0f7      	beq.n	80006c6 <__aeabi_dmul+0x1c6>
 80006d6:	ea43 0306 	orr.w	r3, r3, r6
 80006da:	4770      	bx	lr
 80006dc:	ea94 0f0c 	teq	r4, ip
 80006e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006e4:	bf18      	it	ne
 80006e6:	ea95 0f0c 	teqne	r5, ip
 80006ea:	d00c      	beq.n	8000706 <__aeabi_dmul+0x206>
 80006ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f0:	bf18      	it	ne
 80006f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006f6:	d1d1      	bne.n	800069c <__aeabi_dmul+0x19c>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000700:	f04f 0000 	mov.w	r0, #0
 8000704:	bd70      	pop	{r4, r5, r6, pc}
 8000706:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800070a:	bf06      	itte	eq
 800070c:	4610      	moveq	r0, r2
 800070e:	4619      	moveq	r1, r3
 8000710:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000714:	d019      	beq.n	800074a <__aeabi_dmul+0x24a>
 8000716:	ea94 0f0c 	teq	r4, ip
 800071a:	d102      	bne.n	8000722 <__aeabi_dmul+0x222>
 800071c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000720:	d113      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000722:	ea95 0f0c 	teq	r5, ip
 8000726:	d105      	bne.n	8000734 <__aeabi_dmul+0x234>
 8000728:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800072c:	bf1c      	itt	ne
 800072e:	4610      	movne	r0, r2
 8000730:	4619      	movne	r1, r3
 8000732:	d10a      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000734:	ea81 0103 	eor.w	r1, r1, r3
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800073c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000740:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	bd70      	pop	{r4, r5, r6, pc}
 800074a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800074e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000752:	bd70      	pop	{r4, r5, r6, pc}

08000754 <__aeabi_ddiv>:
 8000754:	b570      	push	{r4, r5, r6, lr}
 8000756:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800075a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800075e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000762:	bf1d      	ittte	ne
 8000764:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000768:	ea94 0f0c 	teqne	r4, ip
 800076c:	ea95 0f0c 	teqne	r5, ip
 8000770:	f000 f8a7 	bleq	80008c2 <__aeabi_ddiv+0x16e>
 8000774:	eba4 0405 	sub.w	r4, r4, r5
 8000778:	ea81 0e03 	eor.w	lr, r1, r3
 800077c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000780:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000784:	f000 8088 	beq.w	8000898 <__aeabi_ddiv+0x144>
 8000788:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800078c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000790:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000794:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000798:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800079c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ac:	429d      	cmp	r5, r3
 80007ae:	bf08      	it	eq
 80007b0:	4296      	cmpeq	r6, r2
 80007b2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007b6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007ba:	d202      	bcs.n	80007c2 <__aeabi_ddiv+0x6e>
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	1ab6      	subs	r6, r6, r2
 80007c4:	eb65 0503 	sbc.w	r5, r5, r3
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007d2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000830:	ea55 0e06 	orrs.w	lr, r5, r6
 8000834:	d018      	beq.n	8000868 <__aeabi_ddiv+0x114>
 8000836:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800083a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800083e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000842:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000846:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800084a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800084e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000852:	d1c0      	bne.n	80007d6 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000858:	d10b      	bne.n	8000872 <__aeabi_ddiv+0x11e>
 800085a:	ea41 0100 	orr.w	r1, r1, r0
 800085e:	f04f 0000 	mov.w	r0, #0
 8000862:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000866:	e7b6      	b.n	80007d6 <__aeabi_ddiv+0x82>
 8000868:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800086c:	bf04      	itt	eq
 800086e:	4301      	orreq	r1, r0
 8000870:	2000      	moveq	r0, #0
 8000872:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000876:	bf88      	it	hi
 8000878:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800087c:	f63f aeaf 	bhi.w	80005de <__aeabi_dmul+0xde>
 8000880:	ebb5 0c03 	subs.w	ip, r5, r3
 8000884:	bf04      	itt	eq
 8000886:	ebb6 0c02 	subseq.w	ip, r6, r2
 800088a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800088e:	f150 0000 	adcs.w	r0, r0, #0
 8000892:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000896:	bd70      	pop	{r4, r5, r6, pc}
 8000898:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800089c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008a4:	bfc2      	ittt	gt
 80008a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ae:	bd70      	popgt	{r4, r5, r6, pc}
 80008b0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008b4:	f04f 0e00 	mov.w	lr, #0
 80008b8:	3c01      	subs	r4, #1
 80008ba:	e690      	b.n	80005de <__aeabi_dmul+0xde>
 80008bc:	ea45 0e06 	orr.w	lr, r5, r6
 80008c0:	e68d      	b.n	80005de <__aeabi_dmul+0xde>
 80008c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008c6:	ea94 0f0c 	teq	r4, ip
 80008ca:	bf08      	it	eq
 80008cc:	ea95 0f0c 	teqeq	r5, ip
 80008d0:	f43f af3b 	beq.w	800074a <__aeabi_dmul+0x24a>
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	d10a      	bne.n	80008f0 <__aeabi_ddiv+0x19c>
 80008da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008de:	f47f af34 	bne.w	800074a <__aeabi_dmul+0x24a>
 80008e2:	ea95 0f0c 	teq	r5, ip
 80008e6:	f47f af25 	bne.w	8000734 <__aeabi_dmul+0x234>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e72c      	b.n	800074a <__aeabi_dmul+0x24a>
 80008f0:	ea95 0f0c 	teq	r5, ip
 80008f4:	d106      	bne.n	8000904 <__aeabi_ddiv+0x1b0>
 80008f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008fa:	f43f aefd 	beq.w	80006f8 <__aeabi_dmul+0x1f8>
 80008fe:	4610      	mov	r0, r2
 8000900:	4619      	mov	r1, r3
 8000902:	e722      	b.n	800074a <__aeabi_dmul+0x24a>
 8000904:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090e:	f47f aec5 	bne.w	800069c <__aeabi_dmul+0x19c>
 8000912:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000916:	f47f af0d 	bne.w	8000734 <__aeabi_dmul+0x234>
 800091a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800091e:	f47f aeeb 	bne.w	80006f8 <__aeabi_dmul+0x1f8>
 8000922:	e712      	b.n	800074a <__aeabi_dmul+0x24a>

08000924 <__gedf2>:
 8000924:	f04f 3cff 	mov.w	ip, #4294967295
 8000928:	e006      	b.n	8000938 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__ledf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	e002      	b.n	8000938 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__cmpdf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	f84d cd04 	str.w	ip, [sp, #-4]!
 800093c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000940:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000944:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800094e:	d01b      	beq.n	8000988 <__cmpdf2+0x54>
 8000950:	b001      	add	sp, #4
 8000952:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000956:	bf0c      	ite	eq
 8000958:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800095c:	ea91 0f03 	teqne	r1, r3
 8000960:	bf02      	ittt	eq
 8000962:	ea90 0f02 	teqeq	r0, r2
 8000966:	2000      	moveq	r0, #0
 8000968:	4770      	bxeq	lr
 800096a:	f110 0f00 	cmn.w	r0, #0
 800096e:	ea91 0f03 	teq	r1, r3
 8000972:	bf58      	it	pl
 8000974:	4299      	cmppl	r1, r3
 8000976:	bf08      	it	eq
 8000978:	4290      	cmpeq	r0, r2
 800097a:	bf2c      	ite	cs
 800097c:	17d8      	asrcs	r0, r3, #31
 800097e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000982:	f040 0001 	orr.w	r0, r0, #1
 8000986:	4770      	bx	lr
 8000988:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800098c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000990:	d102      	bne.n	8000998 <__cmpdf2+0x64>
 8000992:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000996:	d107      	bne.n	80009a8 <__cmpdf2+0x74>
 8000998:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800099c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a0:	d1d6      	bne.n	8000950 <__cmpdf2+0x1c>
 80009a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009a6:	d0d3      	beq.n	8000950 <__cmpdf2+0x1c>
 80009a8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop

080009b0 <__aeabi_cdrcmple>:
 80009b0:	4684      	mov	ip, r0
 80009b2:	4610      	mov	r0, r2
 80009b4:	4662      	mov	r2, ip
 80009b6:	468c      	mov	ip, r1
 80009b8:	4619      	mov	r1, r3
 80009ba:	4663      	mov	r3, ip
 80009bc:	e000      	b.n	80009c0 <__aeabi_cdcmpeq>
 80009be:	bf00      	nop

080009c0 <__aeabi_cdcmpeq>:
 80009c0:	b501      	push	{r0, lr}
 80009c2:	f7ff ffb7 	bl	8000934 <__cmpdf2>
 80009c6:	2800      	cmp	r0, #0
 80009c8:	bf48      	it	mi
 80009ca:	f110 0f00 	cmnmi.w	r0, #0
 80009ce:	bd01      	pop	{r0, pc}

080009d0 <__aeabi_dcmpeq>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff fff4 	bl	80009c0 <__aeabi_cdcmpeq>
 80009d8:	bf0c      	ite	eq
 80009da:	2001      	moveq	r0, #1
 80009dc:	2000      	movne	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmplt>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffea 	bl	80009c0 <__aeabi_cdcmpeq>
 80009ec:	bf34      	ite	cc
 80009ee:	2001      	movcc	r0, #1
 80009f0:	2000      	movcs	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmple>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffe0 	bl	80009c0 <__aeabi_cdcmpeq>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpge>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffce 	bl	80009b0 <__aeabi_cdrcmple>
 8000a14:	bf94      	ite	ls
 8000a16:	2001      	movls	r0, #1
 8000a18:	2000      	movhi	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpgt>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff ffc4 	bl	80009b0 <__aeabi_cdrcmple>
 8000a28:	bf34      	ite	cc
 8000a2a:	2001      	movcc	r0, #1
 8000a2c:	2000      	movcs	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_d2iz>:
 8000a34:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a38:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a3c:	d215      	bcs.n	8000a6a <__aeabi_d2iz+0x36>
 8000a3e:	d511      	bpl.n	8000a64 <__aeabi_d2iz+0x30>
 8000a40:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a44:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a48:	d912      	bls.n	8000a70 <__aeabi_d2iz+0x3c>
 8000a4a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a4e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a52:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a56:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5e:	bf18      	it	ne
 8000a60:	4240      	negne	r0, r0
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d105      	bne.n	8000a7c <__aeabi_d2iz+0x48>
 8000a70:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a74:	bf08      	it	eq
 8000a76:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2f>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a8c:	bf24      	itt	cs
 8000a8e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a92:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a96:	d90d      	bls.n	8000ab4 <__aeabi_d2f+0x30>
 8000a98:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a9c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aa8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aac:	bf08      	it	eq
 8000aae:	f020 0001 	biceq.w	r0, r0, #1
 8000ab2:	4770      	bx	lr
 8000ab4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ab8:	d121      	bne.n	8000afe <__aeabi_d2f+0x7a>
 8000aba:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000abe:	bfbc      	itt	lt
 8000ac0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac4:	4770      	bxlt	lr
 8000ac6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ace:	f1c2 0218 	rsb	r2, r2, #24
 8000ad2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ad6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ada:	fa20 f002 	lsr.w	r0, r0, r2
 8000ade:	bf18      	it	ne
 8000ae0:	f040 0001 	orrne.w	r0, r0, #1
 8000ae4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aec:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af0:	ea40 000c 	orr.w	r0, r0, ip
 8000af4:	fa23 f302 	lsr.w	r3, r3, r2
 8000af8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000afc:	e7cc      	b.n	8000a98 <__aeabi_d2f+0x14>
 8000afe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b02:	d107      	bne.n	8000b14 <__aeabi_d2f+0x90>
 8000b04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b08:	bf1e      	ittt	ne
 8000b0a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b0e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b12:	4770      	bxne	lr
 8000b14:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b18:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b1c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_frsub>:
 8000b24:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b28:	e002      	b.n	8000b30 <__addsf3>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_fsub>:
 8000b2c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b30 <__addsf3>:
 8000b30:	0042      	lsls	r2, r0, #1
 8000b32:	bf1f      	itttt	ne
 8000b34:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b38:	ea92 0f03 	teqne	r2, r3
 8000b3c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b40:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b44:	d06a      	beq.n	8000c1c <__addsf3+0xec>
 8000b46:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b4e:	bfc1      	itttt	gt
 8000b50:	18d2      	addgt	r2, r2, r3
 8000b52:	4041      	eorgt	r1, r0
 8000b54:	4048      	eorgt	r0, r1
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	bfb8      	it	lt
 8000b5a:	425b      	neglt	r3, r3
 8000b5c:	2b19      	cmp	r3, #25
 8000b5e:	bf88      	it	hi
 8000b60:	4770      	bxhi	lr
 8000b62:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b66:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b6e:	bf18      	it	ne
 8000b70:	4240      	negne	r0, r0
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b76:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b7e:	bf18      	it	ne
 8000b80:	4249      	negne	r1, r1
 8000b82:	ea92 0f03 	teq	r2, r3
 8000b86:	d03f      	beq.n	8000c08 <__addsf3+0xd8>
 8000b88:	f1a2 0201 	sub.w	r2, r2, #1
 8000b8c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b90:	eb10 000c 	adds.w	r0, r0, ip
 8000b94:	f1c3 0320 	rsb	r3, r3, #32
 8000b98:	fa01 f103 	lsl.w	r1, r1, r3
 8000b9c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba0:	d502      	bpl.n	8000ba8 <__addsf3+0x78>
 8000ba2:	4249      	negs	r1, r1
 8000ba4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ba8:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bac:	d313      	bcc.n	8000bd6 <__addsf3+0xa6>
 8000bae:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb2:	d306      	bcc.n	8000bc2 <__addsf3+0x92>
 8000bb4:	0840      	lsrs	r0, r0, #1
 8000bb6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bba:	f102 0201 	add.w	r2, r2, #1
 8000bbe:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc0:	d251      	bcs.n	8000c66 <__addsf3+0x136>
 8000bc2:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bc6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bca:	bf08      	it	eq
 8000bcc:	f020 0001 	biceq.w	r0, r0, #1
 8000bd0:	ea40 0003 	orr.w	r0, r0, r3
 8000bd4:	4770      	bx	lr
 8000bd6:	0049      	lsls	r1, r1, #1
 8000bd8:	eb40 0000 	adc.w	r0, r0, r0
 8000bdc:	3a01      	subs	r2, #1
 8000bde:	bf28      	it	cs
 8000be0:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be4:	d2ed      	bcs.n	8000bc2 <__addsf3+0x92>
 8000be6:	fab0 fc80 	clz	ip, r0
 8000bea:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bee:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bf6:	bfaa      	itet	ge
 8000bf8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bfc:	4252      	neglt	r2, r2
 8000bfe:	4318      	orrge	r0, r3
 8000c00:	bfbc      	itt	lt
 8000c02:	40d0      	lsrlt	r0, r2
 8000c04:	4318      	orrlt	r0, r3
 8000c06:	4770      	bx	lr
 8000c08:	f092 0f00 	teq	r2, #0
 8000c0c:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c10:	bf06      	itte	eq
 8000c12:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c16:	3201      	addeq	r2, #1
 8000c18:	3b01      	subne	r3, #1
 8000c1a:	e7b5      	b.n	8000b88 <__addsf3+0x58>
 8000c1c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c20:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c24:	bf18      	it	ne
 8000c26:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2a:	d021      	beq.n	8000c70 <__addsf3+0x140>
 8000c2c:	ea92 0f03 	teq	r2, r3
 8000c30:	d004      	beq.n	8000c3c <__addsf3+0x10c>
 8000c32:	f092 0f00 	teq	r2, #0
 8000c36:	bf08      	it	eq
 8000c38:	4608      	moveq	r0, r1
 8000c3a:	4770      	bx	lr
 8000c3c:	ea90 0f01 	teq	r0, r1
 8000c40:	bf1c      	itt	ne
 8000c42:	2000      	movne	r0, #0
 8000c44:	4770      	bxne	lr
 8000c46:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4a:	d104      	bne.n	8000c56 <__addsf3+0x126>
 8000c4c:	0040      	lsls	r0, r0, #1
 8000c4e:	bf28      	it	cs
 8000c50:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c54:	4770      	bx	lr
 8000c56:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5a:	bf3c      	itt	cc
 8000c5c:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c60:	4770      	bxcc	lr
 8000c62:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c66:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c6e:	4770      	bx	lr
 8000c70:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c74:	bf16      	itet	ne
 8000c76:	4608      	movne	r0, r1
 8000c78:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c7c:	4601      	movne	r1, r0
 8000c7e:	0242      	lsls	r2, r0, #9
 8000c80:	bf06      	itte	eq
 8000c82:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c86:	ea90 0f01 	teqeq	r0, r1
 8000c8a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c8e:	4770      	bx	lr

08000c90 <__aeabi_ui2f>:
 8000c90:	f04f 0300 	mov.w	r3, #0
 8000c94:	e004      	b.n	8000ca0 <__aeabi_i2f+0x8>
 8000c96:	bf00      	nop

08000c98 <__aeabi_i2f>:
 8000c98:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c9c:	bf48      	it	mi
 8000c9e:	4240      	negmi	r0, r0
 8000ca0:	ea5f 0c00 	movs.w	ip, r0
 8000ca4:	bf08      	it	eq
 8000ca6:	4770      	bxeq	lr
 8000ca8:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cac:	4601      	mov	r1, r0
 8000cae:	f04f 0000 	mov.w	r0, #0
 8000cb2:	e01c      	b.n	8000cee <__aeabi_l2f+0x2a>

08000cb4 <__aeabi_ul2f>:
 8000cb4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cb8:	bf08      	it	eq
 8000cba:	4770      	bxeq	lr
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e00a      	b.n	8000cd8 <__aeabi_l2f+0x14>
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_l2f>:
 8000cc4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc8:	bf08      	it	eq
 8000cca:	4770      	bxeq	lr
 8000ccc:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd0:	d502      	bpl.n	8000cd8 <__aeabi_l2f+0x14>
 8000cd2:	4240      	negs	r0, r0
 8000cd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd8:	ea5f 0c01 	movs.w	ip, r1
 8000cdc:	bf02      	ittt	eq
 8000cde:	4684      	moveq	ip, r0
 8000ce0:	4601      	moveq	r1, r0
 8000ce2:	2000      	moveq	r0, #0
 8000ce4:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000ce8:	bf08      	it	eq
 8000cea:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cee:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf2:	fabc f28c 	clz	r2, ip
 8000cf6:	3a08      	subs	r2, #8
 8000cf8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cfc:	db10      	blt.n	8000d20 <__aeabi_l2f+0x5c>
 8000cfe:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d02:	4463      	add	r3, ip
 8000d04:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d08:	f1c2 0220 	rsb	r2, r2, #32
 8000d0c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d10:	fa20 f202 	lsr.w	r2, r0, r2
 8000d14:	eb43 0002 	adc.w	r0, r3, r2
 8000d18:	bf08      	it	eq
 8000d1a:	f020 0001 	biceq.w	r0, r0, #1
 8000d1e:	4770      	bx	lr
 8000d20:	f102 0220 	add.w	r2, r2, #32
 8000d24:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d28:	f1c2 0220 	rsb	r2, r2, #32
 8000d2c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d30:	fa21 f202 	lsr.w	r2, r1, r2
 8000d34:	eb43 0002 	adc.w	r0, r3, r2
 8000d38:	bf08      	it	eq
 8000d3a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d3e:	4770      	bx	lr

08000d40 <__aeabi_fmul>:
 8000d40:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d44:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d48:	bf1e      	ittt	ne
 8000d4a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d4e:	ea92 0f0c 	teqne	r2, ip
 8000d52:	ea93 0f0c 	teqne	r3, ip
 8000d56:	d06f      	beq.n	8000e38 <__aeabi_fmul+0xf8>
 8000d58:	441a      	add	r2, r3
 8000d5a:	ea80 0c01 	eor.w	ip, r0, r1
 8000d5e:	0240      	lsls	r0, r0, #9
 8000d60:	bf18      	it	ne
 8000d62:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d66:	d01e      	beq.n	8000da6 <__aeabi_fmul+0x66>
 8000d68:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d6c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d70:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d74:	fba0 3101 	umull	r3, r1, r0, r1
 8000d78:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d7c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d80:	bf3e      	ittt	cc
 8000d82:	0049      	lslcc	r1, r1, #1
 8000d84:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d88:	005b      	lslcc	r3, r3, #1
 8000d8a:	ea40 0001 	orr.w	r0, r0, r1
 8000d8e:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d92:	2afd      	cmp	r2, #253	@ 0xfd
 8000d94:	d81d      	bhi.n	8000dd2 <__aeabi_fmul+0x92>
 8000d96:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d9a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d9e:	bf08      	it	eq
 8000da0:	f020 0001 	biceq.w	r0, r0, #1
 8000da4:	4770      	bx	lr
 8000da6:	f090 0f00 	teq	r0, #0
 8000daa:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000dae:	bf08      	it	eq
 8000db0:	0249      	lsleq	r1, r1, #9
 8000db2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000db6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dba:	3a7f      	subs	r2, #127	@ 0x7f
 8000dbc:	bfc2      	ittt	gt
 8000dbe:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dc2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dc6:	4770      	bxgt	lr
 8000dc8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dcc:	f04f 0300 	mov.w	r3, #0
 8000dd0:	3a01      	subs	r2, #1
 8000dd2:	dc5d      	bgt.n	8000e90 <__aeabi_fmul+0x150>
 8000dd4:	f112 0f19 	cmn.w	r2, #25
 8000dd8:	bfdc      	itt	le
 8000dda:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000dde:	4770      	bxle	lr
 8000de0:	f1c2 0200 	rsb	r2, r2, #0
 8000de4:	0041      	lsls	r1, r0, #1
 8000de6:	fa21 f102 	lsr.w	r1, r1, r2
 8000dea:	f1c2 0220 	rsb	r2, r2, #32
 8000dee:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df2:	ea5f 0031 	movs.w	r0, r1, rrx
 8000df6:	f140 0000 	adc.w	r0, r0, #0
 8000dfa:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dfe:	bf08      	it	eq
 8000e00:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e04:	4770      	bx	lr
 8000e06:	f092 0f00 	teq	r2, #0
 8000e0a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e0e:	bf02      	ittt	eq
 8000e10:	0040      	lsleq	r0, r0, #1
 8000e12:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e16:	3a01      	subeq	r2, #1
 8000e18:	d0f9      	beq.n	8000e0e <__aeabi_fmul+0xce>
 8000e1a:	ea40 000c 	orr.w	r0, r0, ip
 8000e1e:	f093 0f00 	teq	r3, #0
 8000e22:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e26:	bf02      	ittt	eq
 8000e28:	0049      	lsleq	r1, r1, #1
 8000e2a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e2e:	3b01      	subeq	r3, #1
 8000e30:	d0f9      	beq.n	8000e26 <__aeabi_fmul+0xe6>
 8000e32:	ea41 010c 	orr.w	r1, r1, ip
 8000e36:	e78f      	b.n	8000d58 <__aeabi_fmul+0x18>
 8000e38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e3c:	ea92 0f0c 	teq	r2, ip
 8000e40:	bf18      	it	ne
 8000e42:	ea93 0f0c 	teqne	r3, ip
 8000e46:	d00a      	beq.n	8000e5e <__aeabi_fmul+0x11e>
 8000e48:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e4c:	bf18      	it	ne
 8000e4e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e52:	d1d8      	bne.n	8000e06 <__aeabi_fmul+0xc6>
 8000e54:	ea80 0001 	eor.w	r0, r0, r1
 8000e58:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e5c:	4770      	bx	lr
 8000e5e:	f090 0f00 	teq	r0, #0
 8000e62:	bf17      	itett	ne
 8000e64:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e68:	4608      	moveq	r0, r1
 8000e6a:	f091 0f00 	teqne	r1, #0
 8000e6e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e72:	d014      	beq.n	8000e9e <__aeabi_fmul+0x15e>
 8000e74:	ea92 0f0c 	teq	r2, ip
 8000e78:	d101      	bne.n	8000e7e <__aeabi_fmul+0x13e>
 8000e7a:	0242      	lsls	r2, r0, #9
 8000e7c:	d10f      	bne.n	8000e9e <__aeabi_fmul+0x15e>
 8000e7e:	ea93 0f0c 	teq	r3, ip
 8000e82:	d103      	bne.n	8000e8c <__aeabi_fmul+0x14c>
 8000e84:	024b      	lsls	r3, r1, #9
 8000e86:	bf18      	it	ne
 8000e88:	4608      	movne	r0, r1
 8000e8a:	d108      	bne.n	8000e9e <__aeabi_fmul+0x15e>
 8000e8c:	ea80 0001 	eor.w	r0, r0, r1
 8000e90:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e94:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e98:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e9c:	4770      	bx	lr
 8000e9e:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ea2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000ea6:	4770      	bx	lr

08000ea8 <__aeabi_fdiv>:
 8000ea8:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000eac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb0:	bf1e      	ittt	ne
 8000eb2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eb6:	ea92 0f0c 	teqne	r2, ip
 8000eba:	ea93 0f0c 	teqne	r3, ip
 8000ebe:	d069      	beq.n	8000f94 <__aeabi_fdiv+0xec>
 8000ec0:	eba2 0203 	sub.w	r2, r2, r3
 8000ec4:	ea80 0c01 	eor.w	ip, r0, r1
 8000ec8:	0249      	lsls	r1, r1, #9
 8000eca:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ece:	d037      	beq.n	8000f40 <__aeabi_fdiv+0x98>
 8000ed0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ed4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ed8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000edc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	bf38      	it	cc
 8000ee4:	005b      	lslcc	r3, r3, #1
 8000ee6:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eea:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	bf24      	itt	cs
 8000ef2:	1a5b      	subcs	r3, r3, r1
 8000ef4:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ef8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000efc:	bf24      	itt	cs
 8000efe:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f02:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f06:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0a:	bf24      	itt	cs
 8000f0c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f10:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f14:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f18:	bf24      	itt	cs
 8000f1a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f1e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f22:	011b      	lsls	r3, r3, #4
 8000f24:	bf18      	it	ne
 8000f26:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2a:	d1e0      	bne.n	8000eee <__aeabi_fdiv+0x46>
 8000f2c:	2afd      	cmp	r2, #253	@ 0xfd
 8000f2e:	f63f af50 	bhi.w	8000dd2 <__aeabi_fmul+0x92>
 8000f32:	428b      	cmp	r3, r1
 8000f34:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f38:	bf08      	it	eq
 8000f3a:	f020 0001 	biceq.w	r0, r0, #1
 8000f3e:	4770      	bx	lr
 8000f40:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f44:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f48:	327f      	adds	r2, #127	@ 0x7f
 8000f4a:	bfc2      	ittt	gt
 8000f4c:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f50:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f54:	4770      	bxgt	lr
 8000f56:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f5a:	f04f 0300 	mov.w	r3, #0
 8000f5e:	3a01      	subs	r2, #1
 8000f60:	e737      	b.n	8000dd2 <__aeabi_fmul+0x92>
 8000f62:	f092 0f00 	teq	r2, #0
 8000f66:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f6a:	bf02      	ittt	eq
 8000f6c:	0040      	lsleq	r0, r0, #1
 8000f6e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f72:	3a01      	subeq	r2, #1
 8000f74:	d0f9      	beq.n	8000f6a <__aeabi_fdiv+0xc2>
 8000f76:	ea40 000c 	orr.w	r0, r0, ip
 8000f7a:	f093 0f00 	teq	r3, #0
 8000f7e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f82:	bf02      	ittt	eq
 8000f84:	0049      	lsleq	r1, r1, #1
 8000f86:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f8a:	3b01      	subeq	r3, #1
 8000f8c:	d0f9      	beq.n	8000f82 <__aeabi_fdiv+0xda>
 8000f8e:	ea41 010c 	orr.w	r1, r1, ip
 8000f92:	e795      	b.n	8000ec0 <__aeabi_fdiv+0x18>
 8000f94:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f98:	ea92 0f0c 	teq	r2, ip
 8000f9c:	d108      	bne.n	8000fb0 <__aeabi_fdiv+0x108>
 8000f9e:	0242      	lsls	r2, r0, #9
 8000fa0:	f47f af7d 	bne.w	8000e9e <__aeabi_fmul+0x15e>
 8000fa4:	ea93 0f0c 	teq	r3, ip
 8000fa8:	f47f af70 	bne.w	8000e8c <__aeabi_fmul+0x14c>
 8000fac:	4608      	mov	r0, r1
 8000fae:	e776      	b.n	8000e9e <__aeabi_fmul+0x15e>
 8000fb0:	ea93 0f0c 	teq	r3, ip
 8000fb4:	d104      	bne.n	8000fc0 <__aeabi_fdiv+0x118>
 8000fb6:	024b      	lsls	r3, r1, #9
 8000fb8:	f43f af4c 	beq.w	8000e54 <__aeabi_fmul+0x114>
 8000fbc:	4608      	mov	r0, r1
 8000fbe:	e76e      	b.n	8000e9e <__aeabi_fmul+0x15e>
 8000fc0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fc4:	bf18      	it	ne
 8000fc6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fca:	d1ca      	bne.n	8000f62 <__aeabi_fdiv+0xba>
 8000fcc:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fd0:	f47f af5c 	bne.w	8000e8c <__aeabi_fmul+0x14c>
 8000fd4:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fd8:	f47f af3c 	bne.w	8000e54 <__aeabi_fmul+0x114>
 8000fdc:	e75f      	b.n	8000e9e <__aeabi_fmul+0x15e>
 8000fde:	bf00      	nop

08000fe0 <__gesf2>:
 8000fe0:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe4:	e006      	b.n	8000ff4 <__cmpsf2+0x4>
 8000fe6:	bf00      	nop

08000fe8 <__lesf2>:
 8000fe8:	f04f 0c01 	mov.w	ip, #1
 8000fec:	e002      	b.n	8000ff4 <__cmpsf2+0x4>
 8000fee:	bf00      	nop

08000ff0 <__cmpsf2>:
 8000ff0:	f04f 0c01 	mov.w	ip, #1
 8000ff4:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ff8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ffc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001000:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001004:	bf18      	it	ne
 8001006:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100a:	d011      	beq.n	8001030 <__cmpsf2+0x40>
 800100c:	b001      	add	sp, #4
 800100e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001012:	bf18      	it	ne
 8001014:	ea90 0f01 	teqne	r0, r1
 8001018:	bf58      	it	pl
 800101a:	ebb2 0003 	subspl.w	r0, r2, r3
 800101e:	bf88      	it	hi
 8001020:	17c8      	asrhi	r0, r1, #31
 8001022:	bf38      	it	cc
 8001024:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001028:	bf18      	it	ne
 800102a:	f040 0001 	orrne.w	r0, r0, #1
 800102e:	4770      	bx	lr
 8001030:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001034:	d102      	bne.n	800103c <__cmpsf2+0x4c>
 8001036:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103a:	d105      	bne.n	8001048 <__cmpsf2+0x58>
 800103c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001040:	d1e4      	bne.n	800100c <__cmpsf2+0x1c>
 8001042:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001046:	d0e1      	beq.n	800100c <__cmpsf2+0x1c>
 8001048:	f85d 0b04 	ldr.w	r0, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop

08001050 <__aeabi_cfrcmple>:
 8001050:	4684      	mov	ip, r0
 8001052:	4608      	mov	r0, r1
 8001054:	4661      	mov	r1, ip
 8001056:	e7ff      	b.n	8001058 <__aeabi_cfcmpeq>

08001058 <__aeabi_cfcmpeq>:
 8001058:	b50f      	push	{r0, r1, r2, r3, lr}
 800105a:	f7ff ffc9 	bl	8000ff0 <__cmpsf2>
 800105e:	2800      	cmp	r0, #0
 8001060:	bf48      	it	mi
 8001062:	f110 0f00 	cmnmi.w	r0, #0
 8001066:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001068 <__aeabi_fcmpeq>:
 8001068:	f84d ed08 	str.w	lr, [sp, #-8]!
 800106c:	f7ff fff4 	bl	8001058 <__aeabi_cfcmpeq>
 8001070:	bf0c      	ite	eq
 8001072:	2001      	moveq	r0, #1
 8001074:	2000      	movne	r0, #0
 8001076:	f85d fb08 	ldr.w	pc, [sp], #8
 800107a:	bf00      	nop

0800107c <__aeabi_fcmplt>:
 800107c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001080:	f7ff ffea 	bl	8001058 <__aeabi_cfcmpeq>
 8001084:	bf34      	ite	cc
 8001086:	2001      	movcc	r0, #1
 8001088:	2000      	movcs	r0, #0
 800108a:	f85d fb08 	ldr.w	pc, [sp], #8
 800108e:	bf00      	nop

08001090 <__aeabi_fcmple>:
 8001090:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001094:	f7ff ffe0 	bl	8001058 <__aeabi_cfcmpeq>
 8001098:	bf94      	ite	ls
 800109a:	2001      	movls	r0, #1
 800109c:	2000      	movhi	r0, #0
 800109e:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a2:	bf00      	nop

080010a4 <__aeabi_fcmpge>:
 80010a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a8:	f7ff ffd2 	bl	8001050 <__aeabi_cfrcmple>
 80010ac:	bf94      	ite	ls
 80010ae:	2001      	movls	r0, #1
 80010b0:	2000      	movhi	r0, #0
 80010b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010b6:	bf00      	nop

080010b8 <__aeabi_fcmpgt>:
 80010b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010bc:	f7ff ffc8 	bl	8001050 <__aeabi_cfrcmple>
 80010c0:	bf34      	ite	cc
 80010c2:	2001      	movcc	r0, #1
 80010c4:	2000      	movcs	r0, #0
 80010c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ca:	bf00      	nop

080010cc <__aeabi_f2iz>:
 80010cc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d0:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80010d4:	d30f      	bcc.n	80010f6 <__aeabi_f2iz+0x2a>
 80010d6:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80010da:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010de:	d90d      	bls.n	80010fc <__aeabi_f2iz+0x30>
 80010e0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80010e8:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80010ec:	fa23 f002 	lsr.w	r0, r3, r2
 80010f0:	bf18      	it	ne
 80010f2:	4240      	negne	r0, r0
 80010f4:	4770      	bx	lr
 80010f6:	f04f 0000 	mov.w	r0, #0
 80010fa:	4770      	bx	lr
 80010fc:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001100:	d101      	bne.n	8001106 <__aeabi_f2iz+0x3a>
 8001102:	0242      	lsls	r2, r0, #9
 8001104:	d105      	bne.n	8001112 <__aeabi_f2iz+0x46>
 8001106:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800110a:	bf08      	it	eq
 800110c:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001110:	4770      	bx	lr
 8001112:	f04f 0000 	mov.w	r0, #0
 8001116:	4770      	bx	lr

08001118 <__aeabi_f2uiz>:
 8001118:	0042      	lsls	r2, r0, #1
 800111a:	d20e      	bcs.n	800113a <__aeabi_f2uiz+0x22>
 800111c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001120:	d30b      	bcc.n	800113a <__aeabi_f2uiz+0x22>
 8001122:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001126:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800112a:	d409      	bmi.n	8001140 <__aeabi_f2uiz+0x28>
 800112c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001130:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001134:	fa23 f002 	lsr.w	r0, r3, r2
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr
 8001140:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001144:	d101      	bne.n	800114a <__aeabi_f2uiz+0x32>
 8001146:	0242      	lsls	r2, r0, #9
 8001148:	d102      	bne.n	8001150 <__aeabi_f2uiz+0x38>
 800114a:	f04f 30ff 	mov.w	r0, #4294967295
 800114e:	4770      	bx	lr
 8001150:	f04f 0000 	mov.w	r0, #0
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop

08001158 <__aeabi_uldivmod>:
 8001158:	b953      	cbnz	r3, 8001170 <__aeabi_uldivmod+0x18>
 800115a:	b94a      	cbnz	r2, 8001170 <__aeabi_uldivmod+0x18>
 800115c:	2900      	cmp	r1, #0
 800115e:	bf08      	it	eq
 8001160:	2800      	cmpeq	r0, #0
 8001162:	bf1c      	itt	ne
 8001164:	f04f 31ff 	movne.w	r1, #4294967295
 8001168:	f04f 30ff 	movne.w	r0, #4294967295
 800116c:	f000 b96a 	b.w	8001444 <__aeabi_idiv0>
 8001170:	f1ad 0c08 	sub.w	ip, sp, #8
 8001174:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001178:	f000 f806 	bl	8001188 <__udivmoddi4>
 800117c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001180:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001184:	b004      	add	sp, #16
 8001186:	4770      	bx	lr

08001188 <__udivmoddi4>:
 8001188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800118c:	9d08      	ldr	r5, [sp, #32]
 800118e:	460c      	mov	r4, r1
 8001190:	2b00      	cmp	r3, #0
 8001192:	d14e      	bne.n	8001232 <__udivmoddi4+0xaa>
 8001194:	4694      	mov	ip, r2
 8001196:	458c      	cmp	ip, r1
 8001198:	4686      	mov	lr, r0
 800119a:	fab2 f282 	clz	r2, r2
 800119e:	d962      	bls.n	8001266 <__udivmoddi4+0xde>
 80011a0:	b14a      	cbz	r2, 80011b6 <__udivmoddi4+0x2e>
 80011a2:	f1c2 0320 	rsb	r3, r2, #32
 80011a6:	4091      	lsls	r1, r2
 80011a8:	fa20 f303 	lsr.w	r3, r0, r3
 80011ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80011b0:	4319      	orrs	r1, r3
 80011b2:	fa00 fe02 	lsl.w	lr, r0, r2
 80011b6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80011ba:	fa1f f68c 	uxth.w	r6, ip
 80011be:	fbb1 f4f7 	udiv	r4, r1, r7
 80011c2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80011c6:	fb07 1114 	mls	r1, r7, r4, r1
 80011ca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80011ce:	fb04 f106 	mul.w	r1, r4, r6
 80011d2:	4299      	cmp	r1, r3
 80011d4:	d90a      	bls.n	80011ec <__udivmoddi4+0x64>
 80011d6:	eb1c 0303 	adds.w	r3, ip, r3
 80011da:	f104 30ff 	add.w	r0, r4, #4294967295
 80011de:	f080 8112 	bcs.w	8001406 <__udivmoddi4+0x27e>
 80011e2:	4299      	cmp	r1, r3
 80011e4:	f240 810f 	bls.w	8001406 <__udivmoddi4+0x27e>
 80011e8:	3c02      	subs	r4, #2
 80011ea:	4463      	add	r3, ip
 80011ec:	1a59      	subs	r1, r3, r1
 80011ee:	fa1f f38e 	uxth.w	r3, lr
 80011f2:	fbb1 f0f7 	udiv	r0, r1, r7
 80011f6:	fb07 1110 	mls	r1, r7, r0, r1
 80011fa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80011fe:	fb00 f606 	mul.w	r6, r0, r6
 8001202:	429e      	cmp	r6, r3
 8001204:	d90a      	bls.n	800121c <__udivmoddi4+0x94>
 8001206:	eb1c 0303 	adds.w	r3, ip, r3
 800120a:	f100 31ff 	add.w	r1, r0, #4294967295
 800120e:	f080 80fc 	bcs.w	800140a <__udivmoddi4+0x282>
 8001212:	429e      	cmp	r6, r3
 8001214:	f240 80f9 	bls.w	800140a <__udivmoddi4+0x282>
 8001218:	4463      	add	r3, ip
 800121a:	3802      	subs	r0, #2
 800121c:	1b9b      	subs	r3, r3, r6
 800121e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8001222:	2100      	movs	r1, #0
 8001224:	b11d      	cbz	r5, 800122e <__udivmoddi4+0xa6>
 8001226:	40d3      	lsrs	r3, r2
 8001228:	2200      	movs	r2, #0
 800122a:	e9c5 3200 	strd	r3, r2, [r5]
 800122e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001232:	428b      	cmp	r3, r1
 8001234:	d905      	bls.n	8001242 <__udivmoddi4+0xba>
 8001236:	b10d      	cbz	r5, 800123c <__udivmoddi4+0xb4>
 8001238:	e9c5 0100 	strd	r0, r1, [r5]
 800123c:	2100      	movs	r1, #0
 800123e:	4608      	mov	r0, r1
 8001240:	e7f5      	b.n	800122e <__udivmoddi4+0xa6>
 8001242:	fab3 f183 	clz	r1, r3
 8001246:	2900      	cmp	r1, #0
 8001248:	d146      	bne.n	80012d8 <__udivmoddi4+0x150>
 800124a:	42a3      	cmp	r3, r4
 800124c:	d302      	bcc.n	8001254 <__udivmoddi4+0xcc>
 800124e:	4290      	cmp	r0, r2
 8001250:	f0c0 80f0 	bcc.w	8001434 <__udivmoddi4+0x2ac>
 8001254:	1a86      	subs	r6, r0, r2
 8001256:	eb64 0303 	sbc.w	r3, r4, r3
 800125a:	2001      	movs	r0, #1
 800125c:	2d00      	cmp	r5, #0
 800125e:	d0e6      	beq.n	800122e <__udivmoddi4+0xa6>
 8001260:	e9c5 6300 	strd	r6, r3, [r5]
 8001264:	e7e3      	b.n	800122e <__udivmoddi4+0xa6>
 8001266:	2a00      	cmp	r2, #0
 8001268:	f040 8090 	bne.w	800138c <__udivmoddi4+0x204>
 800126c:	eba1 040c 	sub.w	r4, r1, ip
 8001270:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001274:	fa1f f78c 	uxth.w	r7, ip
 8001278:	2101      	movs	r1, #1
 800127a:	fbb4 f6f8 	udiv	r6, r4, r8
 800127e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8001282:	fb08 4416 	mls	r4, r8, r6, r4
 8001286:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800128a:	fb07 f006 	mul.w	r0, r7, r6
 800128e:	4298      	cmp	r0, r3
 8001290:	d908      	bls.n	80012a4 <__udivmoddi4+0x11c>
 8001292:	eb1c 0303 	adds.w	r3, ip, r3
 8001296:	f106 34ff 	add.w	r4, r6, #4294967295
 800129a:	d202      	bcs.n	80012a2 <__udivmoddi4+0x11a>
 800129c:	4298      	cmp	r0, r3
 800129e:	f200 80cd 	bhi.w	800143c <__udivmoddi4+0x2b4>
 80012a2:	4626      	mov	r6, r4
 80012a4:	1a1c      	subs	r4, r3, r0
 80012a6:	fa1f f38e 	uxth.w	r3, lr
 80012aa:	fbb4 f0f8 	udiv	r0, r4, r8
 80012ae:	fb08 4410 	mls	r4, r8, r0, r4
 80012b2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80012b6:	fb00 f707 	mul.w	r7, r0, r7
 80012ba:	429f      	cmp	r7, r3
 80012bc:	d908      	bls.n	80012d0 <__udivmoddi4+0x148>
 80012be:	eb1c 0303 	adds.w	r3, ip, r3
 80012c2:	f100 34ff 	add.w	r4, r0, #4294967295
 80012c6:	d202      	bcs.n	80012ce <__udivmoddi4+0x146>
 80012c8:	429f      	cmp	r7, r3
 80012ca:	f200 80b0 	bhi.w	800142e <__udivmoddi4+0x2a6>
 80012ce:	4620      	mov	r0, r4
 80012d0:	1bdb      	subs	r3, r3, r7
 80012d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80012d6:	e7a5      	b.n	8001224 <__udivmoddi4+0x9c>
 80012d8:	f1c1 0620 	rsb	r6, r1, #32
 80012dc:	408b      	lsls	r3, r1
 80012de:	fa22 f706 	lsr.w	r7, r2, r6
 80012e2:	431f      	orrs	r7, r3
 80012e4:	fa20 fc06 	lsr.w	ip, r0, r6
 80012e8:	fa04 f301 	lsl.w	r3, r4, r1
 80012ec:	ea43 030c 	orr.w	r3, r3, ip
 80012f0:	40f4      	lsrs	r4, r6
 80012f2:	fa00 f801 	lsl.w	r8, r0, r1
 80012f6:	0c38      	lsrs	r0, r7, #16
 80012f8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80012fc:	fbb4 fef0 	udiv	lr, r4, r0
 8001300:	fa1f fc87 	uxth.w	ip, r7
 8001304:	fb00 441e 	mls	r4, r0, lr, r4
 8001308:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800130c:	fb0e f90c 	mul.w	r9, lr, ip
 8001310:	45a1      	cmp	r9, r4
 8001312:	fa02 f201 	lsl.w	r2, r2, r1
 8001316:	d90a      	bls.n	800132e <__udivmoddi4+0x1a6>
 8001318:	193c      	adds	r4, r7, r4
 800131a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800131e:	f080 8084 	bcs.w	800142a <__udivmoddi4+0x2a2>
 8001322:	45a1      	cmp	r9, r4
 8001324:	f240 8081 	bls.w	800142a <__udivmoddi4+0x2a2>
 8001328:	f1ae 0e02 	sub.w	lr, lr, #2
 800132c:	443c      	add	r4, r7
 800132e:	eba4 0409 	sub.w	r4, r4, r9
 8001332:	fa1f f983 	uxth.w	r9, r3
 8001336:	fbb4 f3f0 	udiv	r3, r4, r0
 800133a:	fb00 4413 	mls	r4, r0, r3, r4
 800133e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8001342:	fb03 fc0c 	mul.w	ip, r3, ip
 8001346:	45a4      	cmp	ip, r4
 8001348:	d907      	bls.n	800135a <__udivmoddi4+0x1d2>
 800134a:	193c      	adds	r4, r7, r4
 800134c:	f103 30ff 	add.w	r0, r3, #4294967295
 8001350:	d267      	bcs.n	8001422 <__udivmoddi4+0x29a>
 8001352:	45a4      	cmp	ip, r4
 8001354:	d965      	bls.n	8001422 <__udivmoddi4+0x29a>
 8001356:	3b02      	subs	r3, #2
 8001358:	443c      	add	r4, r7
 800135a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800135e:	fba0 9302 	umull	r9, r3, r0, r2
 8001362:	eba4 040c 	sub.w	r4, r4, ip
 8001366:	429c      	cmp	r4, r3
 8001368:	46ce      	mov	lr, r9
 800136a:	469c      	mov	ip, r3
 800136c:	d351      	bcc.n	8001412 <__udivmoddi4+0x28a>
 800136e:	d04e      	beq.n	800140e <__udivmoddi4+0x286>
 8001370:	b155      	cbz	r5, 8001388 <__udivmoddi4+0x200>
 8001372:	ebb8 030e 	subs.w	r3, r8, lr
 8001376:	eb64 040c 	sbc.w	r4, r4, ip
 800137a:	fa04 f606 	lsl.w	r6, r4, r6
 800137e:	40cb      	lsrs	r3, r1
 8001380:	431e      	orrs	r6, r3
 8001382:	40cc      	lsrs	r4, r1
 8001384:	e9c5 6400 	strd	r6, r4, [r5]
 8001388:	2100      	movs	r1, #0
 800138a:	e750      	b.n	800122e <__udivmoddi4+0xa6>
 800138c:	f1c2 0320 	rsb	r3, r2, #32
 8001390:	fa20 f103 	lsr.w	r1, r0, r3
 8001394:	fa0c fc02 	lsl.w	ip, ip, r2
 8001398:	fa24 f303 	lsr.w	r3, r4, r3
 800139c:	4094      	lsls	r4, r2
 800139e:	430c      	orrs	r4, r1
 80013a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80013a4:	fa00 fe02 	lsl.w	lr, r0, r2
 80013a8:	fa1f f78c 	uxth.w	r7, ip
 80013ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80013b0:	fb08 3110 	mls	r1, r8, r0, r3
 80013b4:	0c23      	lsrs	r3, r4, #16
 80013b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80013ba:	fb00 f107 	mul.w	r1, r0, r7
 80013be:	4299      	cmp	r1, r3
 80013c0:	d908      	bls.n	80013d4 <__udivmoddi4+0x24c>
 80013c2:	eb1c 0303 	adds.w	r3, ip, r3
 80013c6:	f100 36ff 	add.w	r6, r0, #4294967295
 80013ca:	d22c      	bcs.n	8001426 <__udivmoddi4+0x29e>
 80013cc:	4299      	cmp	r1, r3
 80013ce:	d92a      	bls.n	8001426 <__udivmoddi4+0x29e>
 80013d0:	3802      	subs	r0, #2
 80013d2:	4463      	add	r3, ip
 80013d4:	1a5b      	subs	r3, r3, r1
 80013d6:	b2a4      	uxth	r4, r4
 80013d8:	fbb3 f1f8 	udiv	r1, r3, r8
 80013dc:	fb08 3311 	mls	r3, r8, r1, r3
 80013e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80013e4:	fb01 f307 	mul.w	r3, r1, r7
 80013e8:	42a3      	cmp	r3, r4
 80013ea:	d908      	bls.n	80013fe <__udivmoddi4+0x276>
 80013ec:	eb1c 0404 	adds.w	r4, ip, r4
 80013f0:	f101 36ff 	add.w	r6, r1, #4294967295
 80013f4:	d213      	bcs.n	800141e <__udivmoddi4+0x296>
 80013f6:	42a3      	cmp	r3, r4
 80013f8:	d911      	bls.n	800141e <__udivmoddi4+0x296>
 80013fa:	3902      	subs	r1, #2
 80013fc:	4464      	add	r4, ip
 80013fe:	1ae4      	subs	r4, r4, r3
 8001400:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001404:	e739      	b.n	800127a <__udivmoddi4+0xf2>
 8001406:	4604      	mov	r4, r0
 8001408:	e6f0      	b.n	80011ec <__udivmoddi4+0x64>
 800140a:	4608      	mov	r0, r1
 800140c:	e706      	b.n	800121c <__udivmoddi4+0x94>
 800140e:	45c8      	cmp	r8, r9
 8001410:	d2ae      	bcs.n	8001370 <__udivmoddi4+0x1e8>
 8001412:	ebb9 0e02 	subs.w	lr, r9, r2
 8001416:	eb63 0c07 	sbc.w	ip, r3, r7
 800141a:	3801      	subs	r0, #1
 800141c:	e7a8      	b.n	8001370 <__udivmoddi4+0x1e8>
 800141e:	4631      	mov	r1, r6
 8001420:	e7ed      	b.n	80013fe <__udivmoddi4+0x276>
 8001422:	4603      	mov	r3, r0
 8001424:	e799      	b.n	800135a <__udivmoddi4+0x1d2>
 8001426:	4630      	mov	r0, r6
 8001428:	e7d4      	b.n	80013d4 <__udivmoddi4+0x24c>
 800142a:	46d6      	mov	lr, sl
 800142c:	e77f      	b.n	800132e <__udivmoddi4+0x1a6>
 800142e:	4463      	add	r3, ip
 8001430:	3802      	subs	r0, #2
 8001432:	e74d      	b.n	80012d0 <__udivmoddi4+0x148>
 8001434:	4606      	mov	r6, r0
 8001436:	4623      	mov	r3, r4
 8001438:	4608      	mov	r0, r1
 800143a:	e70f      	b.n	800125c <__udivmoddi4+0xd4>
 800143c:	3e02      	subs	r6, #2
 800143e:	4463      	add	r3, ip
 8001440:	e730      	b.n	80012a4 <__udivmoddi4+0x11c>
 8001442:	bf00      	nop

08001444 <__aeabi_idiv0>:
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop

08001448 <process_temp_code>:
static uint16_t convert_to_uint16(uint8_t bytes[]);
static int8_t w_reg(uint8_t value, Si7021_registers_t reg);
static int8_t r_reg(Si7021_registers_t reg);

static float process_temp_code(uint16_t temp_code)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	80fb      	strh	r3, [r7, #6]
  return (float)(((175.72 * temp_code) / 65536.0) - 46.85);
 8001452:	88fb      	ldrh	r3, [r7, #6]
 8001454:	4618      	mov	r0, r3
 8001456:	f7fe ffe9 	bl	800042c <__aeabi_i2d>
 800145a:	a311      	add	r3, pc, #68	@ (adr r3, 80014a0 <process_temp_code+0x58>)
 800145c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001460:	f7ff f84e 	bl	8000500 <__aeabi_dmul>
 8001464:	4602      	mov	r2, r0
 8001466:	460b      	mov	r3, r1
 8001468:	4610      	mov	r0, r2
 800146a:	4619      	mov	r1, r3
 800146c:	f04f 0200 	mov.w	r2, #0
 8001470:	4b0f      	ldr	r3, [pc, #60]	@ (80014b0 <process_temp_code+0x68>)
 8001472:	f7ff f96f 	bl	8000754 <__aeabi_ddiv>
 8001476:	4602      	mov	r2, r0
 8001478:	460b      	mov	r3, r1
 800147a:	4610      	mov	r0, r2
 800147c:	4619      	mov	r1, r3
 800147e:	a30a      	add	r3, pc, #40	@ (adr r3, 80014a8 <process_temp_code+0x60>)
 8001480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001484:	f7fe fe84 	bl	8000190 <__aeabi_dsub>
 8001488:	4602      	mov	r2, r0
 800148a:	460b      	mov	r3, r1
 800148c:	4610      	mov	r0, r2
 800148e:	4619      	mov	r1, r3
 8001490:	f7ff faf8 	bl	8000a84 <__aeabi_d2f>
 8001494:	4603      	mov	r3, r0
}
 8001496:	4618      	mov	r0, r3
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	3d70a3d7 	.word	0x3d70a3d7
 80014a4:	4065f70a 	.word	0x4065f70a
 80014a8:	cccccccd 	.word	0xcccccccd
 80014ac:	40476ccc 	.word	0x40476ccc
 80014b0:	40f00000 	.word	0x40f00000

080014b4 <process_humi_code>:

static float process_humi_code(uint16_t humi_code)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	80fb      	strh	r3, [r7, #6]
  float value = (float)(((125.0 * humi_code) / 65536.0) - 6.0);
 80014be:	88fb      	ldrh	r3, [r7, #6]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7fe ffb3 	bl	800042c <__aeabi_i2d>
 80014c6:	f04f 0200 	mov.w	r2, #0
 80014ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001538 <process_humi_code+0x84>)
 80014cc:	f7ff f818 	bl	8000500 <__aeabi_dmul>
 80014d0:	4602      	mov	r2, r0
 80014d2:	460b      	mov	r3, r1
 80014d4:	4610      	mov	r0, r2
 80014d6:	4619      	mov	r1, r3
 80014d8:	f04f 0200 	mov.w	r2, #0
 80014dc:	4b17      	ldr	r3, [pc, #92]	@ (800153c <process_humi_code+0x88>)
 80014de:	f7ff f939 	bl	8000754 <__aeabi_ddiv>
 80014e2:	4602      	mov	r2, r0
 80014e4:	460b      	mov	r3, r1
 80014e6:	4610      	mov	r0, r2
 80014e8:	4619      	mov	r1, r3
 80014ea:	f04f 0200 	mov.w	r2, #0
 80014ee:	4b14      	ldr	r3, [pc, #80]	@ (8001540 <process_humi_code+0x8c>)
 80014f0:	f7fe fe4e 	bl	8000190 <__aeabi_dsub>
 80014f4:	4602      	mov	r2, r0
 80014f6:	460b      	mov	r3, r1
 80014f8:	4610      	mov	r0, r2
 80014fa:	4619      	mov	r1, r3
 80014fc:	f7ff fac2 	bl	8000a84 <__aeabi_d2f>
 8001500:	4603      	mov	r3, r0
 8001502:	60fb      	str	r3, [r7, #12]

  if(value < 0)
 8001504:	f04f 0100 	mov.w	r1, #0
 8001508:	68f8      	ldr	r0, [r7, #12]
 800150a:	f7ff fdb7 	bl	800107c <__aeabi_fcmplt>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d002      	beq.n	800151a <process_humi_code+0x66>
    return 0;
 8001514:	f04f 0300 	mov.w	r3, #0
 8001518:	e009      	b.n	800152e <process_humi_code+0x7a>
  else if(value > 100)
 800151a:	490a      	ldr	r1, [pc, #40]	@ (8001544 <process_humi_code+0x90>)
 800151c:	68f8      	ldr	r0, [r7, #12]
 800151e:	f7ff fdcb 	bl	80010b8 <__aeabi_fcmpgt>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <process_humi_code+0x78>
    return 100;
 8001528:	4b06      	ldr	r3, [pc, #24]	@ (8001544 <process_humi_code+0x90>)
 800152a:	e000      	b.n	800152e <process_humi_code+0x7a>
  else
    return (float)value;
 800152c:	68fb      	ldr	r3, [r7, #12]
}
 800152e:	4618      	mov	r0, r3
 8001530:	3710      	adds	r7, #16
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	405f4000 	.word	0x405f4000
 800153c:	40f00000 	.word	0x40f00000
 8001540:	40180000 	.word	0x40180000
 8001544:	42c80000 	.word	0x42c80000

08001548 <convert_to_uint16>:

static uint16_t convert_to_uint16(uint8_t bytes[])
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  return (uint16_t)((bytes[0]<<8) | bytes[1]);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	021b      	lsls	r3, r3, #8
 8001556:	b21a      	sxth	r2, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	3301      	adds	r3, #1
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	b21b      	sxth	r3, r3
 8001560:	4313      	orrs	r3, r2
 8001562:	b21b      	sxth	r3, r3
 8001564:	b29b      	uxth	r3, r3
}
 8001566:	4618      	mov	r0, r3
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	bc80      	pop	{r7}
 800156e:	4770      	bx	lr

08001570 <w_reg>:
  else
    return 0;
}

static int8_t w_reg(uint8_t value, Si7021_registers_t reg)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b088      	sub	sp, #32
 8001574:	af04      	add	r7, sp, #16
 8001576:	4603      	mov	r3, r0
 8001578:	460a      	mov	r2, r1
 800157a:	71fb      	strb	r3, [r7, #7]
 800157c:	4613      	mov	r3, r2
 800157e:	71bb      	strb	r3, [r7, #6]
  uint16_t cmd;

  if(reg == User_Register_1)
 8001580:	79bb      	ldrb	r3, [r7, #6]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d102      	bne.n	800158c <w_reg+0x1c>
  {
    cmd = W_RHT_U_reg;
 8001586:	23e6      	movs	r3, #230	@ 0xe6
 8001588:	81fb      	strh	r3, [r7, #14]
 800158a:	e008      	b.n	800159e <w_reg+0x2e>
  }
  else if(reg == Heater_Control_Register)
 800158c:	79bb      	ldrb	r3, [r7, #6]
 800158e:	2b01      	cmp	r3, #1
 8001590:	d102      	bne.n	8001598 <w_reg+0x28>
  {
    cmd = W_Heater_C_reg;
 8001592:	2351      	movs	r3, #81	@ 0x51
 8001594:	81fb      	strh	r3, [r7, #14]
 8001596:	e002      	b.n	800159e <w_reg+0x2e>
  }
  else
    return -1;
 8001598:	f04f 33ff 	mov.w	r3, #4294967295
 800159c:	e013      	b.n	80015c6 <w_reg+0x56>

  if(HAL_OK != HAL_I2C_Mem_Write(&hi2c3, I2C_ADDR, cmd, 1, &value, 1, 10000))
 800159e:	2180      	movs	r1, #128	@ 0x80
 80015a0:	89fa      	ldrh	r2, [r7, #14]
 80015a2:	f242 7310 	movw	r3, #10000	@ 0x2710
 80015a6:	9302      	str	r3, [sp, #8]
 80015a8:	2301      	movs	r3, #1
 80015aa:	9301      	str	r3, [sp, #4]
 80015ac:	1dfb      	adds	r3, r7, #7
 80015ae:	9300      	str	r3, [sp, #0]
 80015b0:	2301      	movs	r3, #1
 80015b2:	4807      	ldr	r0, [pc, #28]	@ (80015d0 <w_reg+0x60>)
 80015b4:	f004 fcae 	bl	8005f14 <HAL_I2C_Mem_Write>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d002      	beq.n	80015c4 <w_reg+0x54>
    return -1;
 80015be:	f04f 33ff 	mov.w	r3, #4294967295
 80015c2:	e000      	b.n	80015c6 <w_reg+0x56>
  else
    return 0;
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3710      	adds	r7, #16
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	200001d0 	.word	0x200001d0

080015d4 <r_both_Si7021>:

  return 0;
}

int8_t r_both_Si7021(float* humidity, float* temperature)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af02      	add	r7, sp, #8
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	6039      	str	r1, [r7, #0]
  uint8_t cmd = Humi_HM;
 80015de:	23e5      	movs	r3, #229	@ 0xe5
 80015e0:	737b      	strb	r3, [r7, #13]
  uint8_t buffer[2];
  uint16_t code;

  if(HAL_OK != HAL_I2C_Master_Transmit(&hi2c3, I2C_ADDR, &cmd, 1, 10000))
 80015e2:	2180      	movs	r1, #128	@ 0x80
 80015e4:	f107 020d 	add.w	r2, r7, #13
 80015e8:	f242 7310 	movw	r3, #10000	@ 0x2710
 80015ec:	9300      	str	r3, [sp, #0]
 80015ee:	2301      	movs	r3, #1
 80015f0:	482d      	ldr	r0, [pc, #180]	@ (80016a8 <r_both_Si7021+0xd4>)
 80015f2:	f004 faa5 	bl	8005b40 <HAL_I2C_Master_Transmit>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d002      	beq.n	8001602 <r_both_Si7021+0x2e>
    return -1;
 80015fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001600:	e04e      	b.n	80016a0 <r_both_Si7021+0xcc>

  if(HAL_OK != HAL_I2C_Master_Receive(&hi2c3, I2C_ADDR, buffer, 2, 10000))
 8001602:	2180      	movs	r1, #128	@ 0x80
 8001604:	f107 0208 	add.w	r2, r7, #8
 8001608:	f242 7310 	movw	r3, #10000	@ 0x2710
 800160c:	9300      	str	r3, [sp, #0]
 800160e:	2302      	movs	r3, #2
 8001610:	4825      	ldr	r0, [pc, #148]	@ (80016a8 <r_both_Si7021+0xd4>)
 8001612:	f004 fb89 	bl	8005d28 <HAL_I2C_Master_Receive>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d002      	beq.n	8001622 <r_both_Si7021+0x4e>
    return -1;
 800161c:	f04f 33ff 	mov.w	r3, #4294967295
 8001620:	e03e      	b.n	80016a0 <r_both_Si7021+0xcc>

  code = convert_to_uint16(buffer);
 8001622:	f107 0308 	add.w	r3, r7, #8
 8001626:	4618      	mov	r0, r3
 8001628:	f7ff ff8e 	bl	8001548 <convert_to_uint16>
 800162c:	4603      	mov	r3, r0
 800162e:	81fb      	strh	r3, [r7, #14]
  *humidity = process_humi_code(code);
 8001630:	89fb      	ldrh	r3, [r7, #14]
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff ff3e 	bl	80014b4 <process_humi_code>
 8001638:	4602      	mov	r2, r0
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	601a      	str	r2, [r3, #0]

  /* There is a temperature measurement with each RH measurement */
  cmd = Temp_AH;
 800163e:	23e0      	movs	r3, #224	@ 0xe0
 8001640:	737b      	strb	r3, [r7, #13]

  if(HAL_OK != HAL_I2C_Master_Transmit(&hi2c3, I2C_ADDR, &cmd, 1, 10000))
 8001642:	2180      	movs	r1, #128	@ 0x80
 8001644:	f107 020d 	add.w	r2, r7, #13
 8001648:	f242 7310 	movw	r3, #10000	@ 0x2710
 800164c:	9300      	str	r3, [sp, #0]
 800164e:	2301      	movs	r3, #1
 8001650:	4815      	ldr	r0, [pc, #84]	@ (80016a8 <r_both_Si7021+0xd4>)
 8001652:	f004 fa75 	bl	8005b40 <HAL_I2C_Master_Transmit>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d002      	beq.n	8001662 <r_both_Si7021+0x8e>
    return -1;
 800165c:	f04f 33ff 	mov.w	r3, #4294967295
 8001660:	e01e      	b.n	80016a0 <r_both_Si7021+0xcc>

  if(HAL_OK != HAL_I2C_Master_Receive(&hi2c3, I2C_ADDR, buffer, 2, 10000))
 8001662:	2180      	movs	r1, #128	@ 0x80
 8001664:	f107 0208 	add.w	r2, r7, #8
 8001668:	f242 7310 	movw	r3, #10000	@ 0x2710
 800166c:	9300      	str	r3, [sp, #0]
 800166e:	2302      	movs	r3, #2
 8001670:	480d      	ldr	r0, [pc, #52]	@ (80016a8 <r_both_Si7021+0xd4>)
 8001672:	f004 fb59 	bl	8005d28 <HAL_I2C_Master_Receive>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d002      	beq.n	8001682 <r_both_Si7021+0xae>
    return -1;
 800167c:	f04f 33ff 	mov.w	r3, #4294967295
 8001680:	e00e      	b.n	80016a0 <r_both_Si7021+0xcc>

  code = convert_to_uint16(buffer);
 8001682:	f107 0308 	add.w	r3, r7, #8
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff ff5e 	bl	8001548 <convert_to_uint16>
 800168c:	4603      	mov	r3, r0
 800168e:	81fb      	strh	r3, [r7, #14]
  *temperature = process_temp_code(code);
 8001690:	89fb      	ldrh	r3, [r7, #14]
 8001692:	4618      	mov	r0, r3
 8001694:	f7ff fed8 	bl	8001448 <process_temp_code>
 8001698:	4602      	mov	r2, r0
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	601a      	str	r2, [r3, #0]

  return 0;
 800169e:	2300      	movs	r3, #0
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3710      	adds	r7, #16
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	200001d0 	.word	0x200001d0

080016ac <enable_heater_Si7021>:
  else
    return 0;
}

int8_t enable_heater_Si7021(uint8_t val)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	4603      	mov	r3, r0
 80016b4:	71fb      	strb	r3, [r7, #7]
  int8_t rv;
  uint8_t temp = user_register_1;
 80016b6:	4b19      	ldr	r3, [pc, #100]	@ (800171c <enable_heater_Si7021+0x70>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	73bb      	strb	r3, [r7, #14]

  if(val == 0)
 80016bc:	79fb      	ldrb	r3, [r7, #7]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d10f      	bne.n	80016e2 <enable_heater_Si7021+0x36>
  {
    user_register_1 &= ~(1<<HTRE);
 80016c2:	4b16      	ldr	r3, [pc, #88]	@ (800171c <enable_heater_Si7021+0x70>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	f023 0304 	bic.w	r3, r3, #4
 80016ca:	b2da      	uxtb	r2, r3
 80016cc:	4b13      	ldr	r3, [pc, #76]	@ (800171c <enable_heater_Si7021+0x70>)
 80016ce:	701a      	strb	r2, [r3, #0]
    rv = w_reg(user_register_1, User_Register_1);
 80016d0:	4b12      	ldr	r3, [pc, #72]	@ (800171c <enable_heater_Si7021+0x70>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	2100      	movs	r1, #0
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7ff ff4a 	bl	8001570 <w_reg>
 80016dc:	4603      	mov	r3, r0
 80016de:	73fb      	strb	r3, [r7, #15]
 80016e0:	e00e      	b.n	8001700 <enable_heater_Si7021+0x54>
  }
  else
  {
    user_register_1 |= (1<<HTRE);
 80016e2:	4b0e      	ldr	r3, [pc, #56]	@ (800171c <enable_heater_Si7021+0x70>)
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	f043 0304 	orr.w	r3, r3, #4
 80016ea:	b2da      	uxtb	r2, r3
 80016ec:	4b0b      	ldr	r3, [pc, #44]	@ (800171c <enable_heater_Si7021+0x70>)
 80016ee:	701a      	strb	r2, [r3, #0]
    rv = w_reg(user_register_1, User_Register_1);
 80016f0:	4b0a      	ldr	r3, [pc, #40]	@ (800171c <enable_heater_Si7021+0x70>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	2100      	movs	r1, #0
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff ff3a 	bl	8001570 <w_reg>
 80016fc:	4603      	mov	r3, r0
 80016fe:	73fb      	strb	r3, [r7, #15]
  }

  /* in case of write error restore local copy of the register value */
  if(rv < 0)
 8001700:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001704:	2b00      	cmp	r3, #0
 8001706:	da02      	bge.n	800170e <enable_heater_Si7021+0x62>
    user_register_1 = temp;
 8001708:	4a04      	ldr	r2, [pc, #16]	@ (800171c <enable_heater_Si7021+0x70>)
 800170a:	7bbb      	ldrb	r3, [r7, #14]
 800170c:	7013      	strb	r3, [r2, #0]

  return rv;
 800170e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001712:	4618      	mov	r0, r3
 8001714:	3710      	adds	r7, #16
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	20000000 	.word	0x20000000

08001720 <rst_Si7021>:

int8_t rst_Si7021()
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af02      	add	r7, sp, #8
  uint8_t cmd = Si7021_Reset;
 8001726:	23fe      	movs	r3, #254	@ 0xfe
 8001728:	71fb      	strb	r3, [r7, #7]

  if(HAL_OK != HAL_I2C_Master_Transmit(&hi2c3, I2C_ADDR, &cmd, 1, 10000))
 800172a:	2180      	movs	r1, #128	@ 0x80
 800172c:	1dfa      	adds	r2, r7, #7
 800172e:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001732:	9300      	str	r3, [sp, #0]
 8001734:	2301      	movs	r3, #1
 8001736:	4807      	ldr	r0, [pc, #28]	@ (8001754 <rst_Si7021+0x34>)
 8001738:	f004 fa02 	bl	8005b40 <HAL_I2C_Master_Transmit>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d002      	beq.n	8001748 <rst_Si7021+0x28>
    return -1;
 8001742:	f04f 33ff 	mov.w	r3, #4294967295
 8001746:	e000      	b.n	800174a <rst_Si7021+0x2a>
  else
    return 0;
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	200001d0 	.word	0x200001d0

08001758 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001760:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001764:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001766:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4313      	orrs	r3, r2
 800176e:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001770:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001774:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4013      	ands	r3, r2
 800177a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800177c:	68fb      	ldr	r3, [r7, #12]
}
 800177e:	bf00      	nop
 8001780:	3714      	adds	r7, #20
 8001782:	46bd      	mov	sp, r7
 8001784:	bc80      	pop	{r7}
 8001786:	4770      	bx	lr

08001788 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8001790:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001794:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	43db      	mvns	r3, r3
 800179a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800179e:	4013      	ands	r3, r2
 80017a0:	660b      	str	r3, [r1, #96]	@ 0x60
}
 80017a2:	bf00      	nop
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bc80      	pop	{r7}
 80017aa:	4770      	bx	lr

080017ac <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 80017b0:	4b23      	ldr	r3, [pc, #140]	@ (8001840 <MX_ADC_Init+0x94>)
 80017b2:	4a24      	ldr	r2, [pc, #144]	@ (8001844 <MX_ADC_Init+0x98>)
 80017b4:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80017b6:	4b22      	ldr	r3, [pc, #136]	@ (8001840 <MX_ADC_Init+0x94>)
 80017b8:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80017bc:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80017be:	4b20      	ldr	r3, [pc, #128]	@ (8001840 <MX_ADC_Init+0x94>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001840 <MX_ADC_Init+0x94>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80017ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001840 <MX_ADC_Init+0x94>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001840 <MX_ADC_Init+0x94>)
 80017d2:	2204      	movs	r2, #4
 80017d4:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80017d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001840 <MX_ADC_Init+0x94>)
 80017d8:	2200      	movs	r2, #0
 80017da:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80017dc:	4b18      	ldr	r3, [pc, #96]	@ (8001840 <MX_ADC_Init+0x94>)
 80017de:	2200      	movs	r2, #0
 80017e0:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80017e2:	4b17      	ldr	r3, [pc, #92]	@ (8001840 <MX_ADC_Init+0x94>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 80017e8:	4b15      	ldr	r3, [pc, #84]	@ (8001840 <MX_ADC_Init+0x94>)
 80017ea:	2201      	movs	r2, #1
 80017ec:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80017ee:	4b14      	ldr	r3, [pc, #80]	@ (8001840 <MX_ADC_Init+0x94>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017f6:	4b12      	ldr	r3, [pc, #72]	@ (8001840 <MX_ADC_Init+0x94>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017fc:	4b10      	ldr	r3, [pc, #64]	@ (8001840 <MX_ADC_Init+0x94>)
 80017fe:	2200      	movs	r2, #0
 8001800:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001802:	4b0f      	ldr	r3, [pc, #60]	@ (8001840 <MX_ADC_Init+0x94>)
 8001804:	2200      	movs	r2, #0
 8001806:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800180a:	4b0d      	ldr	r3, [pc, #52]	@ (8001840 <MX_ADC_Init+0x94>)
 800180c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001810:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8001812:	4b0b      	ldr	r3, [pc, #44]	@ (8001840 <MX_ADC_Init+0x94>)
 8001814:	2207      	movs	r2, #7
 8001816:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8001818:	4b09      	ldr	r3, [pc, #36]	@ (8001840 <MX_ADC_Init+0x94>)
 800181a:	2207      	movs	r2, #7
 800181c:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.OversamplingMode = DISABLE;
 800181e:	4b08      	ldr	r3, [pc, #32]	@ (8001840 <MX_ADC_Init+0x94>)
 8001820:	2200      	movs	r2, #0
 8001822:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001826:	4b06      	ldr	r3, [pc, #24]	@ (8001840 <MX_ADC_Init+0x94>)
 8001828:	2200      	movs	r2, #0
 800182a:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800182c:	4804      	ldr	r0, [pc, #16]	@ (8001840 <MX_ADC_Init+0x94>)
 800182e:	f002 f899 	bl	8003964 <HAL_ADC_Init>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <MX_ADC_Init+0x90>
  {
    Error_Handler();
 8001838:	f000 fd1e 	bl	8002278 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800183c:	bf00      	nop
 800183e:	bd80      	pop	{r7, pc}
 8001840:	20000168 	.word	0x20000168
 8001844:	40012400 	.word	0x40012400

08001848 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a05      	ldr	r2, [pc, #20]	@ (800186c <HAL_ADC_MspInit+0x24>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d103      	bne.n	8001862 <HAL_ADC_MspInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800185a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800185e:	f7ff ff7b 	bl	8001758 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8001862:	bf00      	nop
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	40012400 	.word	0x40012400

08001870 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a05      	ldr	r2, [pc, #20]	@ (8001894 <HAL_ADC_MspDeInit+0x24>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d103      	bne.n	800188a <HAL_ADC_MspDeInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 8001882:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001886:	f7ff ff7f 	bl	8001788 <LL_APB2_GRP1_DisableClock>
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 800188a:	bf00      	nop
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	40012400 	.word	0x40012400

08001898 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 800189c:	4b03      	ldr	r3, [pc, #12]	@ (80018ac <SYS_InitMeasurement+0x14>)
 800189e:	4a04      	ldr	r2, [pc, #16]	@ (80018b0 <SYS_InitMeasurement+0x18>)
 80018a0:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 80018a2:	bf00      	nop
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bc80      	pop	{r7}
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	20000168 	.word	0x20000168
 80018b0:	40012400 	.word	0x40012400

080018b4 <SYS_GetBatteryLevel>:

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}

uint16_t SYS_GetBatteryLevel(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 80018ba:	2300      	movs	r3, #0
 80018bc:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 80018be:	2300      	movs	r3, #0
 80018c0:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 80018c2:	4813      	ldr	r0, [pc, #76]	@ (8001910 <SYS_GetBatteryLevel+0x5c>)
 80018c4:	f000 f82a 	bl	800191c <ADC_ReadChannels>
 80018c8:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d102      	bne.n	80018d6 <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 80018d0:	2300      	movs	r3, #0
 80018d2:	80fb      	strh	r3, [r7, #6]
 80018d4:	e016      	b.n	8001904 <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 80018d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001914 <SYS_GetBatteryLevel+0x60>)
 80018d8:	881b      	ldrh	r3, [r3, #0]
 80018da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80018de:	4293      	cmp	r3, r2
 80018e0:	d00b      	beq.n	80018fa <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 80018e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001914 <SYS_GetBatteryLevel+0x60>)
 80018e4:	881b      	ldrh	r3, [r3, #0]
 80018e6:	461a      	mov	r2, r3
 80018e8:	f640 43e4 	movw	r3, #3300	@ 0xce4
 80018ec:	fb03 f202 	mul.w	r2, r3, r2
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f6:	80fb      	strh	r3, [r7, #6]
 80018f8:	e004      	b.n	8001904 <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 80018fa:	4a07      	ldr	r2, [pc, #28]	@ (8001918 <SYS_GetBatteryLevel+0x64>)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001902:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 8001904:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 8001906:	4618      	mov	r0, r3
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	b4002000 	.word	0xb4002000
 8001914:	1fff75aa 	.word	0x1fff75aa
 8001918:	004c08d8 	.word	0x004c08d8

0800191c <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b086      	sub	sp, #24
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 8001924:	2300      	movs	r3, #0
 8001926:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001928:	f107 0308 	add.w	r3, r7, #8
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	605a      	str	r2, [r3, #4]
 8001932:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 8001934:	f7ff ff3a 	bl	80017ac <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8001938:	481a      	ldr	r0, [pc, #104]	@ (80019a4 <ADC_ReadChannels+0x88>)
 800193a:	f002 fe32 	bl	80045a2 <HAL_ADCEx_Calibration_Start>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 8001944:	f000 fc98 	bl	8002278 <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800194c:	2300      	movs	r3, #0
 800194e:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001950:	2300      	movs	r3, #0
 8001952:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001954:	f107 0308 	add.w	r3, r7, #8
 8001958:	4619      	mov	r1, r3
 800195a:	4812      	ldr	r0, [pc, #72]	@ (80019a4 <ADC_ReadChannels+0x88>)
 800195c:	f002 fb3e 	bl	8003fdc <HAL_ADC_ConfigChannel>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 8001966:	f000 fc87 	bl	8002278 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 800196a:	480e      	ldr	r0, [pc, #56]	@ (80019a4 <ADC_ReadChannels+0x88>)
 800196c:	f002 fa1a 	bl	8003da4 <HAL_ADC_Start>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 8001976:	f000 fc7f 	bl	8002278 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 800197a:	f04f 31ff 	mov.w	r1, #4294967295
 800197e:	4809      	ldr	r0, [pc, #36]	@ (80019a4 <ADC_ReadChannels+0x88>)
 8001980:	f002 fa88 	bl	8003e94 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 8001984:	4807      	ldr	r0, [pc, #28]	@ (80019a4 <ADC_ReadChannels+0x88>)
 8001986:	f002 fa53 	bl	8003e30 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 800198a:	4806      	ldr	r0, [pc, #24]	@ (80019a4 <ADC_ReadChannels+0x88>)
 800198c:	f002 fb19 	bl	8003fc2 <HAL_ADC_GetValue>
 8001990:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 8001992:	4804      	ldr	r0, [pc, #16]	@ (80019a4 <ADC_ReadChannels+0x88>)
 8001994:	f002 f97a 	bl	8003c8c <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 8001998:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 800199a:	4618      	mov	r0, r3
 800199c:	3718      	adds	r7, #24
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	20000168 	.word	0x20000168

080019a8 <LL_AHB1_GRP1_EnableClock>:
{
 80019a8:	b480      	push	{r7}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80019b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019b4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80019b6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4313      	orrs	r3, r2
 80019be:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80019c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019c4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4013      	ands	r3, r2
 80019ca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019cc:	68fb      	ldr	r3, [r7, #12]
}
 80019ce:	bf00      	nop
 80019d0:	3714      	adds	r7, #20
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bc80      	pop	{r7}
 80019d6:	4770      	bx	lr

080019d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80019dc:	2004      	movs	r0, #4
 80019de:	f7ff ffe3 	bl	80019a8 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019e2:	2001      	movs	r0, #1
 80019e4:	f7ff ffe0 	bl	80019a8 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 80019e8:	2200      	movs	r2, #0
 80019ea:	2102      	movs	r1, #2
 80019ec:	200b      	movs	r0, #11
 80019ee:	f002 ff7e 	bl	80048ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80019f2:	200b      	movs	r0, #11
 80019f4:	f002 ff95 	bl	8004922 <HAL_NVIC_EnableIRQ>

}
 80019f8:	bf00      	nop
 80019fa:	bd80      	pop	{r7, pc}

080019fc <FLASH_IF_Write>:
  /* USER CODE END FLASH_IF_DeInit_2 */
  return ret_status;
}

FLASH_IF_StatusTypedef FLASH_IF_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b086      	sub	sp, #24
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	60b9      	str	r1, [r7, #8]
 8001a06:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001a08:	23ff      	movs	r3, #255	@ 0xff
 8001a0a:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Write_1 */

  /* USER CODE END FLASH_IF_Write_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001a12:	d311      	bcc.n	8001a38 <FLASH_IF_Write+0x3c>
 8001a14:	4b0b      	ldr	r3, [pc, #44]	@ (8001a44 <FLASH_IF_Write+0x48>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	029a      	lsls	r2, r3, #10
 8001a1a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a48 <FLASH_IF_Write+0x4c>)
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8001a22:	3b01      	subs	r3, #1
 8001a24:	68fa      	ldr	r2, [r7, #12]
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d306      	bcc.n	8001a38 <FLASH_IF_Write+0x3c>
  {
    ret_status = FLASH_IF_INT_Write(pDestination, pSource, uLength);
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	68b9      	ldr	r1, [r7, #8]
 8001a2e:	68f8      	ldr	r0, [r7, #12]
 8001a30:	f000 f85a 	bl	8001ae8 <FLASH_IF_INT_Write>
 8001a34:	4603      	mov	r3, r0
 8001a36:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Write_2 */

  /* USER CODE END FLASH_IF_Write_2 */
  return ret_status;
 8001a38:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3718      	adds	r7, #24
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	1fff75e0 	.word	0x1fff75e0
 8001a48:	03fffc00 	.word	0x03fffc00

08001a4c <FLASH_IF_Read>:

FLASH_IF_StatusTypedef FLASH_IF_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b086      	sub	sp, #24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001a58:	23ff      	movs	r3, #255	@ 0xff
 8001a5a:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Read_1 */

  /* USER CODE END FLASH_IF_Read_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001a62:	d311      	bcc.n	8001a88 <FLASH_IF_Read+0x3c>
 8001a64:	4b0b      	ldr	r3, [pc, #44]	@ (8001a94 <FLASH_IF_Read+0x48>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	029a      	lsls	r2, r3, #10
 8001a6a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a98 <FLASH_IF_Read+0x4c>)
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8001a72:	3b01      	subs	r3, #1
 8001a74:	68ba      	ldr	r2, [r7, #8]
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d306      	bcc.n	8001a88 <FLASH_IF_Read+0x3c>
  {
    ret_status = FLASH_IF_INT_Read(pDestination, pSource, uLength);
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	68b9      	ldr	r1, [r7, #8]
 8001a7e:	68f8      	ldr	r0, [r7, #12]
 8001a80:	f000 f93a 	bl	8001cf8 <FLASH_IF_INT_Read>
 8001a84:	4603      	mov	r3, r0
 8001a86:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Read_2 */

  /* USER CODE END FLASH_IF_Read_2 */
  return ret_status;
 8001a88:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3718      	adds	r7, #24
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	1fff75e0 	.word	0x1fff75e0
 8001a98:	03fffc00 	.word	0x03fffc00

08001a9c <FLASH_IF_Erase>:

FLASH_IF_StatusTypedef FLASH_IF_Erase(void *pStart, uint32_t uLength)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001aa6:	23ff      	movs	r3, #255	@ 0xff
 8001aa8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN FLASH_IF_Erase_1 */

  /* USER CODE END FLASH_IF_Erase_1 */
  /* Check Flash start address */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001ab0:	d310      	bcc.n	8001ad4 <FLASH_IF_Erase+0x38>
 8001ab2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ae0 <FLASH_IF_Erase+0x44>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	029a      	lsls	r2, r3, #10
 8001ab8:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae4 <FLASH_IF_Erase+0x48>)
 8001aba:	4013      	ands	r3, r2
 8001abc:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8001ac0:	3b01      	subs	r3, #1
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d305      	bcc.n	8001ad4 <FLASH_IF_Erase+0x38>
  {
    ret_status = FLASH_IF_INT_Erase(pStart, uLength);
 8001ac8:	6839      	ldr	r1, [r7, #0]
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f000 f932 	bl	8001d34 <FLASH_IF_INT_Erase>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE BEGIN FLASH_IF_Erase_2 */

  /* USER CODE END FLASH_IF_Erase_2 */
  return ret_status;
 8001ad4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3710      	adds	r7, #16
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	1fff75e0 	.word	0x1fff75e0
 8001ae4:	03fffc00 	.word	0x03fffc00

08001ae8 <FLASH_IF_INT_Write>:

/* Private Functions Definition -----------------------------------------------*/

/* Private Functions : internal flash -----------------------------------------*/
static FLASH_IF_StatusTypedef FLASH_IF_INT_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b090      	sub	sp, #64	@ 0x40
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 8001af4:	2300      	movs	r3, #0
 8001af6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  /* USER CODE BEGIN FLASH_IF_INT_Write_1 */

  /* USER CODE END FLASH_IF_INT_Write_1 */
  uint32_t uDest = (uint32_t)pDestination;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t uSource = (uint32_t)pSource;
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t length = uLength;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t number_pages;
  uint32_t current_dest;
  uint32_t current_source;
  uint32_t current_length;

  if ((pDestination == NULL) || (pSource == NULL) || !IS_ADDR_ALIGNED_64BITS(uLength)
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d00c      	beq.n	8001b26 <FLASH_IF_INT_Write+0x3e>
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d009      	beq.n	8001b26 <FLASH_IF_INT_Write+0x3e>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f003 0307 	and.w	r3, r3, #7
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d104      	bne.n	8001b26 <FLASH_IF_INT_Write+0x3e>
      || !IS_ADDR_ALIGNED_64BITS((uint32_t)pDestination))
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f003 0307 	and.w	r3, r3, #7
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d002      	beq.n	8001b2c <FLASH_IF_INT_Write+0x44>
  {
    return FLASH_IF_PARAM_ERROR;
 8001b26:	f06f 0305 	mvn.w	r3, #5
 8001b2a:	e0da      	b.n	8001ce2 <FLASH_IF_INT_Write+0x1fa>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 8001b2c:	f000 f992 	bl	8001e54 <FLASH_IF_INT_Clear_Error>
 8001b30:	4603      	mov	r3, r0
 8001b32:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

  if (ret_status == FLASH_IF_OK)
 8001b36:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	f040 80cf 	bne.w	8001cde <FLASH_IF_INT_Write+0x1f6>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 8001b40:	f003 fb3a 	bl	80051b8 <HAL_FLASH_Unlock>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	f040 80c6 	bne.w	8001cd8 <FLASH_IF_INT_Write+0x1f0>
    {
      start_page_index = PAGE_INDEX(uDest);
 8001b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b4e:	f103 4278 	add.w	r2, r3, #4160749568	@ 0xf8000000
 8001b52:	4b66      	ldr	r3, [pc, #408]	@ (8001cec <FLASH_IF_INT_Write+0x204>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	0299      	lsls	r1, r3, #10
 8001b58:	4b65      	ldr	r3, [pc, #404]	@ (8001cf0 <FLASH_IF_INT_Write+0x208>)
 8001b5a:	400b      	ands	r3, r1
 8001b5c:	fbb2 f1f3 	udiv	r1, r2, r3
 8001b60:	fb01 f303 	mul.w	r3, r1, r3
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	0adb      	lsrs	r3, r3, #11
 8001b68:	61bb      	str	r3, [r7, #24]
      number_pages = PAGE_INDEX(uDest + uLength - 1U) - start_page_index + 1U;
 8001b6a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	4413      	add	r3, r2
 8001b70:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 8001b74:	3b01      	subs	r3, #1
 8001b76:	4a5d      	ldr	r2, [pc, #372]	@ (8001cec <FLASH_IF_INT_Write+0x204>)
 8001b78:	6812      	ldr	r2, [r2, #0]
 8001b7a:	0291      	lsls	r1, r2, #10
 8001b7c:	4a5c      	ldr	r2, [pc, #368]	@ (8001cf0 <FLASH_IF_INT_Write+0x208>)
 8001b7e:	400a      	ands	r2, r1
 8001b80:	fbb3 f1f2 	udiv	r1, r3, r2
 8001b84:	fb01 f202 	mul.w	r2, r1, r2
 8001b88:	1a9b      	subs	r3, r3, r2
 8001b8a:	0ada      	lsrs	r2, r3, #11
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	3301      	adds	r3, #1
 8001b92:	617b      	str	r3, [r7, #20]

      if (number_pages > 1)
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d905      	bls.n	8001ba6 <FLASH_IF_INT_Write+0xbe>
      {
        length = FLASH_PAGE_SIZE - (uDest % FLASH_PAGE_SIZE);
 8001b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b9c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ba0:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8001ba4:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001baa:	e089      	b.n	8001cc0 <FLASH_IF_INT_Write+0x1d8>
      {
        page_address = page_index * FLASH_PAGE_SIZE + FLASH_BASE;
 8001bac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bae:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8001bb2:	02db      	lsls	r3, r3, #11
 8001bb4:	613b      	str	r3, [r7, #16]
        if (FLASH_IF_INT_IsEmpty(pDestination, length) != FLASH_IF_MEM_EMPTY)
 8001bb6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001bb8:	68f8      	ldr	r0, [r7, #12]
 8001bba:	f000 f925 	bl	8001e08 <FLASH_IF_INT_IsEmpty>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d031      	beq.n	8001c28 <FLASH_IF_INT_Write+0x140>
        {
          if (pAllocatedBuffer == NULL)
 8001bc4:	4b4b      	ldr	r3, [pc, #300]	@ (8001cf4 <FLASH_IF_INT_Write+0x20c>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d103      	bne.n	8001bd4 <FLASH_IF_INT_Write+0xec>
          {
            ret_status = FLASH_IF_PARAM_ERROR;
 8001bcc:	23fa      	movs	r3, #250	@ 0xfa
 8001bce:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            break; /* exit for loop */
 8001bd2:	e07e      	b.n	8001cd2 <FLASH_IF_INT_Write+0x1ea>
          }

          /* backup initial Flash page data in RAM area */
          FLASH_IF_INT_Read(pAllocatedBuffer, (const void *)page_address, FLASH_PAGE_SIZE);
 8001bd4:	4b47      	ldr	r3, [pc, #284]	@ (8001cf4 <FLASH_IF_INT_Write+0x20c>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	6939      	ldr	r1, [r7, #16]
 8001bda:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001bde:	4618      	mov	r0, r3
 8001be0:	f000 f88a 	bl	8001cf8 <FLASH_IF_INT_Read>
          /* copy fragment into RAM area */
          UTIL_MEM_cpy_8(&pAllocatedBuffer[uDest % FLASH_PAGE_SIZE], (const void *)uSource, length);
 8001be4:	4b43      	ldr	r3, [pc, #268]	@ (8001cf4 <FLASH_IF_INT_Write+0x20c>)
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001bea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bee:	4413      	add	r3, r2
 8001bf0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001bf2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001bf4:	b292      	uxth	r2, r2
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f01b fdb2 	bl	801d760 <UTIL_MEM_cpy_8>

          /*  erase the Flash sector, to avoid writing twice in RAM */
          if (FLASH_IF_INT_Erase((void *)page_address, FLASH_PAGE_SIZE) != FLASH_IF_OK)
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001c02:	4618      	mov	r0, r3
 8001c04:	f000 f896 	bl	8001d34 <FLASH_IF_INT_Erase>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d003      	beq.n	8001c16 <FLASH_IF_INT_Write+0x12e>
          {
            ret_status = FLASH_IF_ERASE_ERROR;
 8001c0e:	23fe      	movs	r3, #254	@ 0xfe
 8001c10:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            break; /* exit for loop */
 8001c14:	e05d      	b.n	8001cd2 <FLASH_IF_INT_Write+0x1ea>
          }

          /* copy the whole flash sector including fragment from RAM to Flash */
          current_dest = page_address;
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	627b      	str	r3, [r7, #36]	@ 0x24
          current_source = (uint32_t)pAllocatedBuffer;
 8001c1a:	4b36      	ldr	r3, [pc, #216]	@ (8001cf4 <FLASH_IF_INT_Write+0x20c>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	623b      	str	r3, [r7, #32]
          current_length = FLASH_PAGE_SIZE;
 8001c20:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001c24:	61fb      	str	r3, [r7, #28]
 8001c26:	e005      	b.n	8001c34 <FLASH_IF_INT_Write+0x14c>
        }
        else
        {
          /* write a part of flash page from selected source data */
          current_dest = uDest;
 8001c28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c2a:	627b      	str	r3, [r7, #36]	@ 0x24
          current_source = uSource;
 8001c2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c2e:	623b      	str	r3, [r7, #32]
          current_length = length;
 8001c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c32:	61fb      	str	r3, [r7, #28]
        }

        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 8001c34:	2300      	movs	r3, #0
 8001c36:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c38:	e026      	b.n	8001c88 <FLASH_IF_INT_Write+0x1a0>
        {
          /* Device voltage range supposed to be [2.7V to 3.6V], the operation will be done by word */
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
                                *((uint64_t *)(current_source + address_offset))) == HAL_OK)
 8001c3a:	6a3a      	ldr	r2, [r7, #32]
 8001c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c3e:	4413      	add	r3, r2
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
 8001c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c44:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001c46:	2001      	movs	r0, #1
 8001c48:	f003 fa72 	bl	8005130 <HAL_FLASH_Program>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d113      	bne.n	8001c7a <FLASH_IF_INT_Write+0x192>
          {
            /* Check the written value */
            if (*(uint64_t *)current_dest != *(uint64_t *)(current_source + address_offset))
 8001c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c58:	6a3a      	ldr	r2, [r7, #32]
 8001c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c5c:	4413      	add	r3, r2
 8001c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c62:	4299      	cmp	r1, r3
 8001c64:	bf08      	it	eq
 8001c66:	4290      	cmpeq	r0, r2
 8001c68:	d003      	beq.n	8001c72 <FLASH_IF_INT_Write+0x18a>
            {
              /* Flash content doesn't match SRAM content */
              ret_status = FLASH_IF_WRITE_ERROR;
 8001c6a:	23fc      	movs	r3, #252	@ 0xfc
 8001c6c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
              break;
 8001c70:	e00e      	b.n	8001c90 <FLASH_IF_INT_Write+0x1a8>
            }
            /* Increment FLASH Destination address */
            current_dest = current_dest + 8U;
 8001c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c74:	3308      	adds	r3, #8
 8001c76:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c78:	e003      	b.n	8001c82 <FLASH_IF_INT_Write+0x19a>
          }
          else
          {
            /* Error occurred while writing data in Flash memory */
            ret_status = FLASH_IF_WRITE_ERROR;
 8001c7a:	23fc      	movs	r3, #252	@ 0xfc
 8001c7c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            break;
 8001c80:	e006      	b.n	8001c90 <FLASH_IF_INT_Write+0x1a8>
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 8001c82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c84:	3308      	adds	r3, #8
 8001c86:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c88:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d3d4      	bcc.n	8001c3a <FLASH_IF_INT_Write+0x152>
          }
        }

        if (ret_status != FLASH_IF_OK)
 8001c90:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d11b      	bne.n	8001cd0 <FLASH_IF_INT_Write+0x1e8>
          /* Error occurred while writing data in Flash memory */
          break;
        }

        /* Increment FLASH destination address, source address, and decrease remaining length */
        uDest += length;
 8001c98:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c9c:	4413      	add	r3, r2
 8001c9e:	63bb      	str	r3, [r7, #56]	@ 0x38
        uSource += length;
 8001ca0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ca4:	4413      	add	r3, r2
 8001ca6:	637b      	str	r3, [r7, #52]	@ 0x34
        length = ((uLength - length) > FLASH_PAGE_SIZE) ? FLASH_PAGE_SIZE : uLength - length;
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001cb2:	bf28      	it	cs
 8001cb4:	f44f 6300 	movcs.w	r3, #2048	@ 0x800
 8001cb8:	633b      	str	r3, [r7, #48]	@ 0x30
      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 8001cba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	f4ff af6f 	bcc.w	8001bac <FLASH_IF_INT_Write+0xc4>
 8001cce:	e000      	b.n	8001cd2 <FLASH_IF_INT_Write+0x1ea>
          break;
 8001cd0:	bf00      	nop
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 8001cd2:	f003 fa93 	bl	80051fc <HAL_FLASH_Lock>
 8001cd6:	e002      	b.n	8001cde <FLASH_IF_INT_Write+0x1f6>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 8001cd8:	23fb      	movs	r3, #251	@ 0xfb
 8001cda:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Write_2 */

  /* USER CODE END FLASH_IF_INT_Write_2 */
  return ret_status;
 8001cde:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3740      	adds	r7, #64	@ 0x40
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	1fff75e0 	.word	0x1fff75e0
 8001cf0:	03fffc00 	.word	0x03fffc00
 8001cf4:	200001cc 	.word	0x200001cc

08001cf8 <FLASH_IF_INT_Read>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 8001d04:	2300      	movs	r3, #0
 8001d06:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_INT_Read_1 */

  /* USER CODE END FLASH_IF_INT_Read_1 */
  if ((pDestination == NULL) || (pSource == NULL))
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d002      	beq.n	8001d14 <FLASH_IF_INT_Read+0x1c>
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d102      	bne.n	8001d1a <FLASH_IF_INT_Read+0x22>
  {
    return FLASH_IF_PARAM_ERROR;
 8001d14:	f06f 0305 	mvn.w	r3, #5
 8001d18:	e008      	b.n	8001d2c <FLASH_IF_INT_Read+0x34>
  }

  UTIL_MEM_cpy_8(pDestination, pSource, uLength);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	461a      	mov	r2, r3
 8001d20:	68b9      	ldr	r1, [r7, #8]
 8001d22:	68f8      	ldr	r0, [r7, #12]
 8001d24:	f01b fd1c 	bl	801d760 <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN FLASH_IF_INT_Read_2 */

  /* USER CODE END FLASH_IF_INT_Read_2 */
  return ret_status;
 8001d28:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3718      	adds	r7, #24
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <FLASH_IF_INT_Erase>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Erase(void *pStart, uint32_t uLength)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b088      	sub	sp, #32
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	77fb      	strb	r3, [r7, #31]
  /* USER CODE BEGIN FLASH_IF_INT_Erase_1 */

  /* USER CODE END FLASH_IF_INT_Erase_1 */
  HAL_StatusTypeDef hal_status = HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	77bb      	strb	r3, [r7, #30]
  uint32_t page_error = 0U;
 8001d46:	2300      	movs	r3, #0
 8001d48:	617b      	str	r3, [r7, #20]
  uint32_t uStart = (uint32_t)pStart;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef erase_init;

  if (pStart == NULL)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d102      	bne.n	8001d5a <FLASH_IF_INT_Erase+0x26>
  {
    return FLASH_IF_PARAM_ERROR;
 8001d54:	f06f 0305 	mvn.w	r3, #5
 8001d58:	e04e      	b.n	8001df8 <FLASH_IF_INT_Erase+0xc4>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 8001d5a:	f000 f87b 	bl	8001e54 <FLASH_IF_INT_Clear_Error>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	77fb      	strb	r3, [r7, #31]

  if (ret_status == FLASH_IF_OK)
 8001d62:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d144      	bne.n	8001df4 <FLASH_IF_INT_Erase+0xc0>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 8001d6a:	f003 fa25 	bl	80051b8 <HAL_FLASH_Unlock>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d13d      	bne.n	8001df0 <FLASH_IF_INT_Erase+0xbc>
    {
      erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 8001d74:	2302      	movs	r3, #2
 8001d76:	60bb      	str	r3, [r7, #8]
      erase_init.Page = PAGE_INDEX(uStart);
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	f103 4278 	add.w	r2, r3, #4160749568	@ 0xf8000000
 8001d7e:	4b20      	ldr	r3, [pc, #128]	@ (8001e00 <FLASH_IF_INT_Erase+0xcc>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	0299      	lsls	r1, r3, #10
 8001d84:	4b1f      	ldr	r3, [pc, #124]	@ (8001e04 <FLASH_IF_INT_Erase+0xd0>)
 8001d86:	400b      	ands	r3, r1
 8001d88:	fbb2 f1f3 	udiv	r1, r2, r3
 8001d8c:	fb01 f303 	mul.w	r3, r1, r3
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	0adb      	lsrs	r3, r3, #11
 8001d94:	60fb      	str	r3, [r7, #12]
      /* Get the number of pages to erase from 1st page */
      erase_init.NbPages = PAGE_INDEX(uStart + uLength - 1U) - erase_init.Page + 1U;
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 8001da0:	3b01      	subs	r3, #1
 8001da2:	4a17      	ldr	r2, [pc, #92]	@ (8001e00 <FLASH_IF_INT_Erase+0xcc>)
 8001da4:	6812      	ldr	r2, [r2, #0]
 8001da6:	0291      	lsls	r1, r2, #10
 8001da8:	4a16      	ldr	r2, [pc, #88]	@ (8001e04 <FLASH_IF_INT_Erase+0xd0>)
 8001daa:	400a      	ands	r2, r1
 8001dac:	fbb3 f1f2 	udiv	r1, r3, r2
 8001db0:	fb01 f202 	mul.w	r2, r1, r2
 8001db4:	1a9b      	subs	r3, r3, r2
 8001db6:	0ada      	lsrs	r2, r3, #11
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	613b      	str	r3, [r7, #16]

      /* Erase the Page */
      hal_status = HAL_FLASHEx_Erase(&erase_init, &page_error);
 8001dc0:	f107 0214 	add.w	r2, r7, #20
 8001dc4:	f107 0308 	add.w	r3, r7, #8
 8001dc8:	4611      	mov	r1, r2
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f003 faf6 	bl	80053bc <HAL_FLASHEx_Erase>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	77bb      	strb	r3, [r7, #30]

      if (hal_status != HAL_OK)
 8001dd4:	7fbb      	ldrb	r3, [r7, #30]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d007      	beq.n	8001dea <FLASH_IF_INT_Erase+0xb6>
      {
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 8001dda:	7fbb      	ldrb	r3, [r7, #30]
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d101      	bne.n	8001de4 <FLASH_IF_INT_Erase+0xb0>
 8001de0:	2301      	movs	r3, #1
 8001de2:	e001      	b.n	8001de8 <FLASH_IF_INT_Erase+0xb4>
 8001de4:	f06f 0301 	mvn.w	r3, #1
 8001de8:	77fb      	strb	r3, [r7, #31]
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 8001dea:	f003 fa07 	bl	80051fc <HAL_FLASH_Lock>
 8001dee:	e001      	b.n	8001df4 <FLASH_IF_INT_Erase+0xc0>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 8001df0:	23fb      	movs	r3, #251	@ 0xfb
 8001df2:	77fb      	strb	r3, [r7, #31]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Erase_2 */

  /* USER CODE END FLASH_IF_INT_Erase_2 */
  return ret_status;
 8001df4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3720      	adds	r7, #32
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	1fff75e0 	.word	0x1fff75e0
 8001e04:	03fffc00 	.word	0x03fffc00

08001e08 <FLASH_IF_INT_IsEmpty>:

static int32_t FLASH_IF_INT_IsEmpty(void *pStart, uint32_t uLength)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
  int32_t status = FLASH_IF_MEM_EMPTY;
 8001e12:	2300      	movs	r3, #0
 8001e14:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_1 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_1 */
  uint32_t index;
  for (index = 0; index < uLength; index += 8)
 8001e16:	2300      	movs	r3, #0
 8001e18:	60bb      	str	r3, [r7, #8]
 8001e1a:	e011      	b.n	8001e40 <FLASH_IF_INT_IsEmpty+0x38>
  {
    if (*(uint64_t *)pStart != UINT64_MAX)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e26:	bf08      	it	eq
 8001e28:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8001e2c:	d002      	beq.n	8001e34 <FLASH_IF_INT_IsEmpty+0x2c>
    {
      status = FLASH_IF_MEM_NOT_EMPTY;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	60fb      	str	r3, [r7, #12]
      break;
 8001e32:	e009      	b.n	8001e48 <FLASH_IF_INT_IsEmpty+0x40>
    }
    pStart = (void *)((uint32_t)pStart + 8U);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	3308      	adds	r3, #8
 8001e38:	607b      	str	r3, [r7, #4]
  for (index = 0; index < uLength; index += 8)
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	3308      	adds	r3, #8
 8001e3e:	60bb      	str	r3, [r7, #8]
 8001e40:	68ba      	ldr	r2, [r7, #8]
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d3e9      	bcc.n	8001e1c <FLASH_IF_INT_IsEmpty+0x14>
  }
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_2 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_2 */
  return status;
 8001e48:	68fb      	ldr	r3, [r7, #12]
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3714      	adds	r7, #20
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bc80      	pop	{r7}
 8001e52:	4770      	bx	lr

08001e54 <FLASH_IF_INT_Clear_Error>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Clear_Error(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
 8001e5a:	23fb      	movs	r3, #251	@ 0xfb
 8001e5c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_1 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_1 */
  /* Unlock the Program memory */
  if (HAL_FLASH_Unlock() == HAL_OK)
 8001e5e:	f003 f9ab 	bl	80051b8 <HAL_FLASH_Unlock>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d110      	bne.n	8001e8a <FLASH_IF_INT_Clear_Error+0x36>
  {
    /* Clear all FLASH flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8001e68:	4b0b      	ldr	r3, [pc, #44]	@ (8001e98 <FLASH_IF_INT_Clear_Error+0x44>)
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	4a0a      	ldr	r2, [pc, #40]	@ (8001e98 <FLASH_IF_INT_Clear_Error+0x44>)
 8001e6e:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8001e72:	6193      	str	r3, [r2, #24]
 8001e74:	4b08      	ldr	r3, [pc, #32]	@ (8001e98 <FLASH_IF_INT_Clear_Error+0x44>)
 8001e76:	f24c 32fa 	movw	r2, #50170	@ 0xc3fa
 8001e7a:	611a      	str	r2, [r3, #16]
    /* Unlock the Program memory */
    if (HAL_FLASH_Lock() == HAL_OK)
 8001e7c:	f003 f9be 	bl	80051fc <HAL_FLASH_Lock>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d101      	bne.n	8001e8a <FLASH_IF_INT_Clear_Error+0x36>
    {
      ret_status = FLASH_IF_OK;
 8001e86:	2300      	movs	r3, #0
 8001e88:	71fb      	strb	r3, [r7, #7]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_2 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_2 */
  return ret_status;
 8001e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	58004000 	.word	0x58004000

08001e9c <LL_AHB2_GRP1_EnableClock>:
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b085      	sub	sp, #20
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001ea4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ea8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001eaa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001eb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001eb8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
}
 8001ec2:	bf00      	nop
 8001ec4:	3714      	adds	r7, #20
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bc80      	pop	{r7}
 8001eca:	4770      	bx	lr

08001ecc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b086      	sub	sp, #24
 8001ed0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed2:	1d3b      	adds	r3, r7, #4
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	605a      	str	r2, [r3, #4]
 8001eda:	609a      	str	r2, [r3, #8]
 8001edc:	60da      	str	r2, [r3, #12]
 8001ede:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ee0:	2004      	movs	r0, #4
 8001ee2:	f7ff ffdb 	bl	8001e9c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ee6:	2002      	movs	r0, #2
 8001ee8:	f7ff ffd8 	bl	8001e9c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eec:	2001      	movs	r0, #1
 8001eee:	f7ff ffd5 	bl	8001e9c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DBG3_Pin|DBG4_Pin|DBG2_Pin, GPIO_PIN_RESET);
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f44f 6183 	mov.w	r1, #1048	@ 0x418
 8001ef8:	4821      	ldr	r0, [pc, #132]	@ (8001f80 <MX_GPIO_Init+0xb4>)
 8001efa:	f003 fd61 	bl	80059c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001efe:	2201      	movs	r2, #1
 8001f00:	2120      	movs	r1, #32
 8001f02:	481f      	ldr	r0, [pc, #124]	@ (8001f80 <MX_GPIO_Init+0xb4>)
 8001f04:	f003 fd5c 	bl	80059c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DBG1_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin, GPIO_PIN_RESET);
 8001f08:	2200      	movs	r2, #0
 8001f0a:	2131      	movs	r1, #49	@ 0x31
 8001f0c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f10:	f003 fd56 	bl	80059c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DBG3_Pin DBG4_Pin LED2_Pin DBG2_Pin */
  GPIO_InitStruct.Pin = DBG3_Pin|DBG4_Pin|LED2_Pin|DBG2_Pin;
 8001f14:	f44f 6387 	mov.w	r3, #1080	@ 0x438
 8001f18:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f22:	2303      	movs	r3, #3
 8001f24:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f26:	1d3b      	adds	r3, r7, #4
 8001f28:	4619      	mov	r1, r3
 8001f2a:	4815      	ldr	r0, [pc, #84]	@ (8001f80 <MX_GPIO_Init+0xb4>)
 8001f2c:	f003 fb1a 	bl	8005564 <HAL_GPIO_Init>

  /*Configure GPIO pins : DBG1_Pin RF_CTRL1_Pin RF_CTRL2_Pin */
  GPIO_InitStruct.Pin = DBG1_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin;
 8001f30:	2331      	movs	r3, #49	@ 0x31
 8001f32:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f34:	2301      	movs	r3, #1
 8001f36:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f40:	1d3b      	adds	r3, r7, #4
 8001f42:	4619      	mov	r1, r3
 8001f44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f48:	f003 fb0c 	bl	8005564 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUT1_Pin */
  GPIO_InitStruct.Pin = BUT1_Pin;
 8001f4c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f50:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001f52:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001f56:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUT1_GPIO_Port, &GPIO_InitStruct);
 8001f5c:	1d3b      	adds	r3, r7, #4
 8001f5e:	4619      	mov	r1, r3
 8001f60:	4807      	ldr	r0, [pc, #28]	@ (8001f80 <MX_GPIO_Init+0xb4>)
 8001f62:	f003 faff 	bl	8005564 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001f66:	2200      	movs	r2, #0
 8001f68:	2100      	movs	r1, #0
 8001f6a:	2029      	movs	r0, #41	@ 0x29
 8001f6c:	f002 fcbf 	bl	80048ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001f70:	2029      	movs	r0, #41	@ 0x29
 8001f72:	f002 fcd6 	bl	8004922 <HAL_NVIC_EnableIRQ>

}
 8001f76:	bf00      	nop
 8001f78:	3718      	adds	r7, #24
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	48000400 	.word	0x48000400

08001f84 <LL_AHB2_GRP1_EnableClock>:
{
 8001f84:	b480      	push	{r7}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001f8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f90:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001f92:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001f9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fa0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
}
 8001faa:	bf00      	nop
 8001fac:	3714      	adds	r7, #20
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bc80      	pop	{r7}
 8001fb2:	4770      	bx	lr

08001fb4 <LL_APB1_GRP1_EnableClock>:
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b085      	sub	sp, #20
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001fbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fc0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001fc2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001fcc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fd0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
}
 8001fda:	bf00      	nop
 8001fdc:	3714      	adds	r7, #20
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bc80      	pop	{r7}
 8001fe2:	4770      	bx	lr

08001fe4 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001fe8:	4b1b      	ldr	r3, [pc, #108]	@ (8002058 <MX_I2C3_Init+0x74>)
 8001fea:	4a1c      	ldr	r2, [pc, #112]	@ (800205c <MX_I2C3_Init+0x78>)
 8001fec:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10805D88;
 8001fee:	4b1a      	ldr	r3, [pc, #104]	@ (8002058 <MX_I2C3_Init+0x74>)
 8001ff0:	4a1b      	ldr	r2, [pc, #108]	@ (8002060 <MX_I2C3_Init+0x7c>)
 8001ff2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001ff4:	4b18      	ldr	r3, [pc, #96]	@ (8002058 <MX_I2C3_Init+0x74>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ffa:	4b17      	ldr	r3, [pc, #92]	@ (8002058 <MX_I2C3_Init+0x74>)
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002000:	4b15      	ldr	r3, [pc, #84]	@ (8002058 <MX_I2C3_Init+0x74>)
 8002002:	2200      	movs	r2, #0
 8002004:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8002006:	4b14      	ldr	r3, [pc, #80]	@ (8002058 <MX_I2C3_Init+0x74>)
 8002008:	2200      	movs	r2, #0
 800200a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800200c:	4b12      	ldr	r3, [pc, #72]	@ (8002058 <MX_I2C3_Init+0x74>)
 800200e:	2200      	movs	r2, #0
 8002010:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002012:	4b11      	ldr	r3, [pc, #68]	@ (8002058 <MX_I2C3_Init+0x74>)
 8002014:	2200      	movs	r2, #0
 8002016:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002018:	4b0f      	ldr	r3, [pc, #60]	@ (8002058 <MX_I2C3_Init+0x74>)
 800201a:	2200      	movs	r2, #0
 800201c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800201e:	480e      	ldr	r0, [pc, #56]	@ (8002058 <MX_I2C3_Init+0x74>)
 8002020:	f003 fcfe 	bl	8005a20 <HAL_I2C_Init>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800202a:	f000 f925 	bl	8002278 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800202e:	2100      	movs	r1, #0
 8002030:	4809      	ldr	r0, [pc, #36]	@ (8002058 <MX_I2C3_Init+0x74>)
 8002032:	f004 fb41 	bl	80066b8 <HAL_I2CEx_ConfigAnalogFilter>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800203c:	f000 f91c 	bl	8002278 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002040:	2100      	movs	r1, #0
 8002042:	4805      	ldr	r0, [pc, #20]	@ (8002058 <MX_I2C3_Init+0x74>)
 8002044:	f004 fb82 	bl	800674c <HAL_I2CEx_ConfigDigitalFilter>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800204e:	f000 f913 	bl	8002278 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002052:	bf00      	nop
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	200001d0 	.word	0x200001d0
 800205c:	40005c00 	.word	0x40005c00
 8002060:	10805d88 	.word	0x10805d88

08002064 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b096      	sub	sp, #88	@ 0x58
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800206c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	605a      	str	r2, [r3, #4]
 8002076:	609a      	str	r2, [r3, #8]
 8002078:	60da      	str	r2, [r3, #12]
 800207a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800207c:	f107 030c 	add.w	r3, r7, #12
 8002080:	2238      	movs	r2, #56	@ 0x38
 8002082:	2100      	movs	r1, #0
 8002084:	4618      	mov	r0, r3
 8002086:	f01c fe2d 	bl	801ece4 <memset>
  if(i2cHandle->Instance==I2C3)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a21      	ldr	r2, [pc, #132]	@ (8002114 <HAL_I2C_MspInit+0xb0>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d13a      	bne.n	800210a <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002094:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002098:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800209a:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 800209e:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020a0:	f107 030c 	add.w	r3, r7, #12
 80020a4:	4618      	mov	r0, r3
 80020a6:	f005 fe0d 	bl	8007cc4 <HAL_RCCEx_PeriphCLKConfig>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 80020b0:	f000 f8e2 	bl	8002278 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020b4:	2002      	movs	r0, #2
 80020b6:	f7ff ff65 	bl	8001f84 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020ba:	2004      	movs	r0, #4
 80020bc:	f7ff ff62 	bl	8001f84 <LL_AHB2_GRP1_EnableClock>
    /**I2C3 GPIO Configuration
    PB14     ------> I2C3_SDA
    PC0     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80020c0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80020c4:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020c6:	2312      	movs	r3, #18
 80020c8:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ca:	2300      	movs	r3, #0
 80020cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ce:	2300      	movs	r3, #0
 80020d0:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80020d2:	2304      	movs	r3, #4
 80020d4:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020d6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80020da:	4619      	mov	r1, r3
 80020dc:	480e      	ldr	r0, [pc, #56]	@ (8002118 <HAL_I2C_MspInit+0xb4>)
 80020de:	f003 fa41 	bl	8005564 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80020e2:	2301      	movs	r3, #1
 80020e4:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020e6:	2312      	movs	r3, #18
 80020e8:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ea:	2300      	movs	r3, #0
 80020ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ee:	2300      	movs	r3, #0
 80020f0:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80020f2:	2304      	movs	r3, #4
 80020f4:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020f6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80020fa:	4619      	mov	r1, r3
 80020fc:	4807      	ldr	r0, [pc, #28]	@ (800211c <HAL_I2C_MspInit+0xb8>)
 80020fe:	f003 fa31 	bl	8005564 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002102:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8002106:	f7ff ff55 	bl	8001fb4 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800210a:	bf00      	nop
 800210c:	3758      	adds	r7, #88	@ 0x58
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	40005c00 	.word	0x40005c00
 8002118:	48000400 	.word	0x48000400
 800211c:	48000800 	.word	0x48000800

08002120 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8002128:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800212c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002130:	f023 0218 	bic.w	r2, r3, #24
 8002134:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4313      	orrs	r3, r2
 800213c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8002140:	bf00      	nop
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	bc80      	pop	{r7}
 8002148:	4770      	bx	lr
	...

0800214c <SI7201_Init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void SI7201_Init()
  {
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
#ifdef ENABLE_SENSOR_SI7201
  int8_t enable_status = enable_heater_Si7021(1);
 8002152:	2001      	movs	r0, #1
 8002154:	f7ff faaa 	bl	80016ac <enable_heater_Si7021>
 8002158:	4603      	mov	r3, r0
 800215a:	71fb      	strb	r3, [r7, #7]

  int8_t reset_status = rst_Si7021();
 800215c:	f7ff fae0 	bl	8001720 <rst_Si7021>
 8002160:	4603      	mov	r3, r0
 8002162:	71bb      	strb	r3, [r7, #6]

  if(enable_status == 0 && reset_status == 0){
 8002164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d10a      	bne.n	8002182 <SI7201_Init+0x36>
 800216c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d106      	bne.n	8002182 <SI7201_Init+0x36>
  	  APP_LOG(0, VLEVEL_M, "Si7021 status => OK");
 8002174:	4b08      	ldr	r3, [pc, #32]	@ (8002198 <SI7201_Init+0x4c>)
 8002176:	2200      	movs	r2, #0
 8002178:	2100      	movs	r1, #0
 800217a:	2002      	movs	r0, #2
 800217c:	f01c fb3a 	bl	801e7f4 <UTIL_ADV_TRACE_COND_FSend>
 8002180:	e006      	b.n	8002190 <SI7201_Init+0x44>
    }
    else
    {
      APP_LOG(0, VLEVEL_M, "Si7021 status => Error");
 8002182:	4b06      	ldr	r3, [pc, #24]	@ (800219c <SI7201_Init+0x50>)
 8002184:	2200      	movs	r2, #0
 8002186:	2100      	movs	r1, #0
 8002188:	2002      	movs	r0, #2
 800218a:	f01c fb33 	bl	801e7f4 <UTIL_ADV_TRACE_COND_FSend>
    }
#endif
  }
 800218e:	bf00      	nop
 8002190:	bf00      	nop
 8002192:	3708      	adds	r7, #8
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	0801ee58 	.word	0x0801ee58
 800219c:	0801ee6c 	.word	0x0801ee6c

080021a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021a4:	f001 f9f0 	bl	8003588 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021a8:	f000 f80c 	bl	80021c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021ac:	f7ff fe8e 	bl	8001ecc <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 80021b0:	f009 f920 	bl	800b3f4 <MX_LoRaWAN_Init>
  MX_I2C3_Init();
 80021b4:	f7ff ff16 	bl	8001fe4 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  SI7201_Init();
 80021b8:	f7ff ffc8 	bl	800214c <SI7201_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_LoRaWAN_Process();
 80021bc:	f009 f922 	bl	800b404 <MX_LoRaWAN_Process>
 80021c0:	e7fc      	b.n	80021bc <main+0x1c>
	...

080021c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b09a      	sub	sp, #104	@ 0x68
 80021c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021ca:	f107 0320 	add.w	r3, r7, #32
 80021ce:	2248      	movs	r2, #72	@ 0x48
 80021d0:	2100      	movs	r1, #0
 80021d2:	4618      	mov	r0, r3
 80021d4:	f01c fd86 	bl	801ece4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021d8:	f107 0308 	add.w	r3, r7, #8
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	605a      	str	r2, [r3, #4]
 80021e2:	609a      	str	r2, [r3, #8]
 80021e4:	60da      	str	r2, [r3, #12]
 80021e6:	611a      	str	r2, [r3, #16]
 80021e8:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80021ea:	f004 fafb 	bl	80067e4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80021ee:	2000      	movs	r0, #0
 80021f0:	f7ff ff96 	bl	8002120 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021f4:	4b1f      	ldr	r3, [pc, #124]	@ (8002274 <SystemClock_Config+0xb0>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80021fc:	4a1d      	ldr	r2, [pc, #116]	@ (8002274 <SystemClock_Config+0xb0>)
 80021fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002202:	6013      	str	r3, [r2, #0]
 8002204:	4b1b      	ldr	r3, [pc, #108]	@ (8002274 <SystemClock_Config+0xb0>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800220c:	607b      	str	r3, [r7, #4]
 800220e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8002210:	2324      	movs	r3, #36	@ 0x24
 8002212:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002214:	2381      	movs	r3, #129	@ 0x81
 8002216:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002218:	2301      	movs	r3, #1
 800221a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800221c:	2300      	movs	r3, #0
 800221e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8002220:	23b0      	movs	r3, #176	@ 0xb0
 8002222:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002224:	2300      	movs	r3, #0
 8002226:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002228:	f107 0320 	add.w	r3, r7, #32
 800222c:	4618      	mov	r0, r3
 800222e:	f004 fe25 	bl	8006e7c <HAL_RCC_OscConfig>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8002238:	f000 f81e 	bl	8002278 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 800223c:	234f      	movs	r3, #79	@ 0x4f
 800223e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002240:	2300      	movs	r3, #0
 8002242:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002244:	2300      	movs	r3, #0
 8002246:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002248:	2300      	movs	r3, #0
 800224a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800224c:	2300      	movs	r3, #0
 800224e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8002250:	2300      	movs	r3, #0
 8002252:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002254:	f107 0308 	add.w	r3, r7, #8
 8002258:	2102      	movs	r1, #2
 800225a:	4618      	mov	r0, r3
 800225c:	f005 f990 	bl	8007580 <HAL_RCC_ClockConfig>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002266:	f000 f807 	bl	8002278 <Error_Handler>
  }
}
 800226a:	bf00      	nop
 800226c:	3768      	adds	r7, #104	@ 0x68
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	58000400 	.word	0x58000400

08002278 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800227c:	b672      	cpsid	i
}
 800227e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002280:	bf00      	nop
 8002282:	e7fd      	b.n	8002280 <Error_Handler+0x8>

08002284 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002288:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800228c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002290:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002294:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002298:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800229c:	bf00      	nop
 800229e:	46bd      	mov	sp, r7
 80022a0:	bc80      	pop	{r7}
 80022a2:	4770      	bx	lr

080022a4 <LL_APB1_GRP1_EnableClock>:
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80022ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022b0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80022b2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80022bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022c0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4013      	ands	r3, r2
 80022c6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80022c8:	68fb      	ldr	r3, [r7, #12]
}
 80022ca:	bf00      	nop
 80022cc:	3714      	adds	r7, #20
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bc80      	pop	{r7}
 80022d2:	4770      	bx	lr

080022d4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b08c      	sub	sp, #48	@ 0x30
 80022d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 80022da:	1d3b      	adds	r3, r7, #4
 80022dc:	222c      	movs	r2, #44	@ 0x2c
 80022de:	2100      	movs	r1, #0
 80022e0:	4618      	mov	r0, r3
 80022e2:	f01c fcff 	bl	801ece4 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80022e6:	4b22      	ldr	r3, [pc, #136]	@ (8002370 <MX_RTC_Init+0x9c>)
 80022e8:	4a22      	ldr	r2, [pc, #136]	@ (8002374 <MX_RTC_Init+0xa0>)
 80022ea:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 80022ec:	4b20      	ldr	r3, [pc, #128]	@ (8002370 <MX_RTC_Init+0x9c>)
 80022ee:	221f      	movs	r2, #31
 80022f0:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80022f2:	4b1f      	ldr	r3, [pc, #124]	@ (8002370 <MX_RTC_Init+0x9c>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80022f8:	4b1d      	ldr	r3, [pc, #116]	@ (8002370 <MX_RTC_Init+0x9c>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80022fe:	4b1c      	ldr	r3, [pc, #112]	@ (8002370 <MX_RTC_Init+0x9c>)
 8002300:	2200      	movs	r2, #0
 8002302:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002304:	4b1a      	ldr	r3, [pc, #104]	@ (8002370 <MX_RTC_Init+0x9c>)
 8002306:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800230a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800230c:	4b18      	ldr	r3, [pc, #96]	@ (8002370 <MX_RTC_Init+0x9c>)
 800230e:	2200      	movs	r2, #0
 8002310:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8002312:	4b17      	ldr	r3, [pc, #92]	@ (8002370 <MX_RTC_Init+0x9c>)
 8002314:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002318:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800231a:	4815      	ldr	r0, [pc, #84]	@ (8002370 <MX_RTC_Init+0x9c>)
 800231c:	f005 fdec 	bl	8007ef8 <HAL_RTC_Init>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8002326:	f7ff ffa7 	bl	8002278 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 800232a:	4811      	ldr	r0, [pc, #68]	@ (8002370 <MX_RTC_Init+0x9c>)
 800232c:	f006 f8e2 	bl	80084f4 <HAL_RTCEx_SetSSRU_IT>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8002336:	f7ff ff9f 	bl	8002278 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 800233a:	2300      	movs	r3, #0
 800233c:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800233e:	2300      	movs	r3, #0
 8002340:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002342:	2300      	movs	r3, #0
 8002344:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8002346:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800234a:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 800234c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002350:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8002352:	1d3b      	adds	r3, r7, #4
 8002354:	2200      	movs	r2, #0
 8002356:	4619      	mov	r1, r3
 8002358:	4805      	ldr	r0, [pc, #20]	@ (8002370 <MX_RTC_Init+0x9c>)
 800235a:	f005 fe4f 	bl	8007ffc <HAL_RTC_SetAlarm_IT>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8002364:	f7ff ff88 	bl	8002278 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002368:	bf00      	nop
 800236a:	3730      	adds	r7, #48	@ 0x30
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	20000224 	.word	0x20000224
 8002374:	40002800 	.word	0x40002800

08002378 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b090      	sub	sp, #64	@ 0x40
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002380:	f107 0308 	add.w	r3, r7, #8
 8002384:	2238      	movs	r2, #56	@ 0x38
 8002386:	2100      	movs	r1, #0
 8002388:	4618      	mov	r0, r3
 800238a:	f01c fcab 	bl	801ece4 <memset>
  if(rtcHandle->Instance==RTC)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a16      	ldr	r2, [pc, #88]	@ (80023ec <HAL_RTC_MspInit+0x74>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d125      	bne.n	80023e4 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002398:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800239c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800239e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80023a2:	63fb      	str	r3, [r7, #60]	@ 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023a4:	f107 0308 	add.w	r3, r7, #8
 80023a8:	4618      	mov	r0, r3
 80023aa:	f005 fc8b 	bl	8007cc4 <HAL_RCCEx_PeriphCLKConfig>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d001      	beq.n	80023b8 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80023b4:	f7ff ff60 	bl	8002278 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80023b8:	f7ff ff64 	bl	8002284 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80023bc:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80023c0:	f7ff ff70 	bl	80022a4 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 80023c4:	2200      	movs	r2, #0
 80023c6:	2100      	movs	r1, #0
 80023c8:	2002      	movs	r0, #2
 80023ca:	f002 fa90 	bl	80048ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 80023ce:	2002      	movs	r0, #2
 80023d0:	f002 faa7 	bl	8004922 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80023d4:	2200      	movs	r2, #0
 80023d6:	2100      	movs	r1, #0
 80023d8:	202a      	movs	r0, #42	@ 0x2a
 80023da:	f002 fa88 	bl	80048ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80023de:	202a      	movs	r0, #42	@ 0x2a
 80023e0:	f002 fa9f 	bl	8004922 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80023e4:	bf00      	nop
 80023e6:	3740      	adds	r7, #64	@ 0x40
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	40002800 	.word	0x40002800

080023f0 <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 80023f4:	4b03      	ldr	r3, [pc, #12]	@ (8002404 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 80023f6:	2201      	movs	r2, #1
 80023f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80023fc:	bf00      	nop
 80023fe:	46bd      	mov	sp, r7
 8002400:	bc80      	pop	{r7}
 8002402:	4770      	bx	lr
 8002404:	58000400 	.word	0x58000400

08002408 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 800240c:	bf00      	nop
 800240e:	46bd      	mov	sp, r7
 8002410:	bc80      	pop	{r7}
 8002412:	4770      	bx	lr

08002414 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8002418:	bf00      	nop
 800241a:	46bd      	mov	sp, r7
 800241c:	bc80      	pop	{r7}
 800241e:	4770      	bx	lr

08002420 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8002424:	f001 f8d0 	bl	80035c8 <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 8002428:	f7ff ffe2 	bl	80023f0 <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 800242c:	2001      	movs	r0, #1
 800242e:	f004 fa6b 	bl	8006908 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8002432:	bf00      	nop
 8002434:	bd80      	pop	{r7, pc}

08002436 <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 800243a:	f001 f8d3 	bl	80035e4 <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 800243e:	f000 ff53 	bl	80032e8 <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 8002442:	bf00      	nop
 8002444:	bd80      	pop	{r7, pc}

08002446 <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 8002446:	b580      	push	{r7, lr}
 8002448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 800244a:	f001 f8bd 	bl	80035c8 <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800244e:	2101      	movs	r1, #1
 8002450:	2000      	movs	r0, #0
 8002452:	f004 f9d5 	bl	8006800 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 8002456:	bf00      	nop
 8002458:	bd80      	pop	{r7, pc}

0800245a <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 800245a:	b580      	push	{r7, lr}
 800245c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 800245e:	f001 f8c1 	bl	80035e4 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 8002462:	bf00      	nop
 8002464:	bd80      	pop	{r7, pc}

08002466 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002466:	b480      	push	{r7}
 8002468:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800246a:	bf00      	nop
 800246c:	46bd      	mov	sp, r7
 800246e:	bc80      	pop	{r7}
 8002470:	4770      	bx	lr

08002472 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002472:	b480      	push	{r7}
 8002474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002476:	bf00      	nop
 8002478:	e7fd      	b.n	8002476 <NMI_Handler+0x4>

0800247a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800247a:	b480      	push	{r7}
 800247c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800247e:	bf00      	nop
 8002480:	e7fd      	b.n	800247e <HardFault_Handler+0x4>

08002482 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002482:	b480      	push	{r7}
 8002484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002486:	bf00      	nop
 8002488:	e7fd      	b.n	8002486 <MemManage_Handler+0x4>

0800248a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800248a:	b480      	push	{r7}
 800248c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800248e:	bf00      	nop
 8002490:	e7fd      	b.n	800248e <BusFault_Handler+0x4>

08002492 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002492:	b480      	push	{r7}
 8002494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002496:	bf00      	nop
 8002498:	e7fd      	b.n	8002496 <UsageFault_Handler+0x4>

0800249a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800249a:	b480      	push	{r7}
 800249c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800249e:	bf00      	nop
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bc80      	pop	{r7}
 80024a4:	4770      	bx	lr

080024a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024a6:	b480      	push	{r7}
 80024a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024aa:	bf00      	nop
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bc80      	pop	{r7}
 80024b0:	4770      	bx	lr

080024b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024b2:	b480      	push	{r7}
 80024b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024b6:	bf00      	nop
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bc80      	pop	{r7}
 80024bc:	4770      	bx	lr

080024be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024be:	b480      	push	{r7}
 80024c0:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024c2:	bf00      	nop
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bc80      	pop	{r7}
 80024c8:	4770      	bx	lr
	...

080024cc <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 80024d0:	4802      	ldr	r0, [pc, #8]	@ (80024dc <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 80024d2:	f006 f84b 	bl	800856c <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 80024d6:	bf00      	nop
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	20000224 	.word	0x20000224

080024e0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80024e4:	4802      	ldr	r0, [pc, #8]	@ (80024f0 <DMA1_Channel1_IRQHandler+0x10>)
 80024e6:	f002 fcb3 	bl	8004e50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80024ea:	bf00      	nop
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	20000304 	.word	0x20000304

080024f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80024f8:	4802      	ldr	r0, [pc, #8]	@ (8002504 <USART1_IRQHandler+0x10>)
 80024fa:	f006 fe81 	bl	8009200 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80024fe:	bf00      	nop
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	20000270 	.word	0x20000270

08002508 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [15:10] Interrupt.
  */
void EXTI15_10_IRQHandler(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 800250c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002510:	f003 fa6e 	bl	80059f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002514:	bf00      	nop
 8002516:	bd80      	pop	{r7, pc}

08002518 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800251c:	4802      	ldr	r0, [pc, #8]	@ (8002528 <RTC_Alarm_IRQHandler+0x10>)
 800251e:	f005 fed5 	bl	80082cc <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8002522:	bf00      	nop
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	20000224 	.word	0x20000224

0800252c <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8002530:	4802      	ldr	r0, [pc, #8]	@ (800253c <SUBGHZ_Radio_IRQHandler+0x10>)
 8002532:	f006 fb89 	bl	8008c48 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8002536:	bf00      	nop
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	2000025c 	.word	0x2000025c

08002540 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8002540:	b480      	push	{r7}
 8002542:	b085      	sub	sp, #20
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8002548:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800254c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800254e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4313      	orrs	r3, r2
 8002556:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8002558:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800255c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4013      	ands	r3, r2
 8002562:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002564:	68fb      	ldr	r3, [r7, #12]
}
 8002566:	bf00      	nop
 8002568:	3714      	adds	r7, #20
 800256a:	46bd      	mov	sp, r7
 800256c:	bc80      	pop	{r7}
 800256e:	4770      	bx	lr

08002570 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8002574:	4b06      	ldr	r3, [pc, #24]	@ (8002590 <MX_SUBGHZ_Init+0x20>)
 8002576:	2208      	movs	r2, #8
 8002578:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 800257a:	4805      	ldr	r0, [pc, #20]	@ (8002590 <MX_SUBGHZ_Init+0x20>)
 800257c:	f006 f8e2 	bl	8008744 <HAL_SUBGHZ_Init>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8002586:	f7ff fe77 	bl	8002278 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 800258a:	bf00      	nop
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	2000025c 	.word	0x2000025c

08002594 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 800259c:	2001      	movs	r0, #1
 800259e:	f7ff ffcf 	bl	8002540 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 80025a2:	2200      	movs	r2, #0
 80025a4:	2100      	movs	r1, #0
 80025a6:	2032      	movs	r0, #50	@ 0x32
 80025a8:	f002 f9a1 	bl	80048ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 80025ac:	2032      	movs	r0, #50	@ 0x32
 80025ae:	f002 f9b8 	bl	8004922 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 80025b2:	bf00      	nop
 80025b4:	3708      	adds	r7, #8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}

080025ba <LL_RCC_SetClkAfterWakeFromStop>:
{
 80025ba:	b480      	push	{r7}
 80025bc:	b083      	sub	sp, #12
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80025c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80025cc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	608b      	str	r3, [r1, #8]
}
 80025d6:	bf00      	nop
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	bc80      	pop	{r7}
 80025de:	4770      	bx	lr

080025e0 <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 80025e4:	4b02      	ldr	r3, [pc, #8]	@ (80025f0 <LL_FLASH_GetUDN+0x10>)
 80025e6:	681b      	ldr	r3, [r3, #0]
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bc80      	pop	{r7}
 80025ee:	4770      	bx	lr
 80025f0:	1fff7580 	.word	0x1fff7580

080025f4 <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 80025f8:	4b03      	ldr	r3, [pc, #12]	@ (8002608 <LL_FLASH_GetDeviceID+0x14>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	b2db      	uxtb	r3, r3
}
 80025fe:	4618      	mov	r0, r3
 8002600:	46bd      	mov	sp, r7
 8002602:	bc80      	pop	{r7}
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	1fff7584 	.word	0x1fff7584

0800260c <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8002610:	4b03      	ldr	r3, [pc, #12]	@ (8002620 <LL_FLASH_GetSTCompanyID+0x14>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	0a1b      	lsrs	r3, r3, #8
}
 8002616:	4618      	mov	r0, r3
 8002618:	46bd      	mov	sp, r7
 800261a:	bc80      	pop	{r7}
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	1fff7584 	.word	0x1fff7584

08002624 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8002628:	2000      	movs	r0, #0
 800262a:	f7ff ffc6 	bl	80025ba <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 800262e:	f01b fe23 	bl	801e278 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8002632:	4b0e      	ldr	r3, [pc, #56]	@ (800266c <SystemApp_Init+0x48>)
 8002634:	2201      	movs	r2, #1
 8002636:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 8002638:	f000 f98c 	bl	8002954 <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 800263c:	f01c f8ac 	bl	801e798 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8002640:	480b      	ldr	r0, [pc, #44]	@ (8002670 <SystemApp_Init+0x4c>)
 8002642:	f01c f957 	bl	801e8f4 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /* #warning "should be removed when proper obl is done" */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002646:	4b0b      	ldr	r3, [pc, #44]	@ (8002674 <SystemApp_Init+0x50>)
 8002648:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800264c:	611a      	str	r2, [r3, #16]

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 800264e:	2003      	movs	r0, #3
 8002650:	f01c f95e 	bl	801e910 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 8002654:	f7ff f920 	bl	8001898 <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 8002658:	f000 fa16 	bl	8002a88 <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 800265c:	f01a ffda 	bl	801d614 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8002660:	2101      	movs	r1, #1
 8002662:	2001      	movs	r0, #1
 8002664:	f01b f816 	bl	801d694 <UTIL_LPM_SetOffMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8002668:	bf00      	nop
 800266a:	bd80      	pop	{r7, pc}
 800266c:	20000268 	.word	0x20000268
 8002670:	08002845 	.word	0x08002845
 8002674:	58004000 	.word	0x58004000

08002678 <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 800267c:	f01b f83a 	bl	801d6f4 <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8002680:	bf00      	nop
 8002682:	bd80      	pop	{r7, pc}

08002684 <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 800268a:	2300      	movs	r3, #0
 800268c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 800268e:	f7ff f911 	bl	80018b4 <SYS_GetBatteryLevel>
 8002692:	4603      	mov	r3, r0
 8002694:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 8002696:	88bb      	ldrh	r3, [r7, #4]
 8002698:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800269c:	4293      	cmp	r3, r2
 800269e:	d902      	bls.n	80026a6 <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 80026a0:	23fe      	movs	r3, #254	@ 0xfe
 80026a2:	71fb      	strb	r3, [r7, #7]
 80026a4:	e014      	b.n	80026d0 <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 80026a6:	88bb      	ldrh	r3, [r7, #4]
 80026a8:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 80026ac:	d202      	bcs.n	80026b4 <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 80026ae:	2300      	movs	r3, #0
 80026b0:	71fb      	strb	r3, [r7, #7]
 80026b2:	e00d      	b.n	80026d0 <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 80026b4:	88bb      	ldrh	r3, [r7, #4]
 80026b6:	f5a3 63e1 	sub.w	r3, r3, #1800	@ 0x708
 80026ba:	461a      	mov	r2, r3
 80026bc:	4613      	mov	r3, r2
 80026be:	01db      	lsls	r3, r3, #7
 80026c0:	1a9b      	subs	r3, r3, r2
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	461a      	mov	r2, r3
 80026c6:	4b05      	ldr	r3, [pc, #20]	@ (80026dc <GetBatteryLevel+0x58>)
 80026c8:	fba3 2302 	umull	r2, r3, r3, r2
 80026cc:	09db      	lsrs	r3, r3, #7
 80026ce:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 80026d0:	79fb      	ldrb	r3, [r7, #7]
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3708      	adds	r7, #8
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	1b4e81b5 	.word	0x1b4e81b5

080026e0 <GetTemperatureLevel>:

int16_t GetTemperatureLevel(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b088      	sub	sp, #32
 80026e4:	af00      	add	r7, sp, #0
  int16_t temperatureLevel = 0;
 80026e6:	2300      	movs	r3, #0
 80026e8:	83fb      	strh	r3, [r7, #30]

  sensor_t sensor_data;

  EnvSensors_Read(&sensor_data);
 80026ea:	1d3b      	adds	r3, r7, #4
 80026ec:	4618      	mov	r0, r3
 80026ee:	f000 f98d 	bl	8002a0c <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7fe fce9 	bl	80010cc <__aeabi_f2iz>
 80026fa:	4603      	mov	r3, r0
 80026fc:	83fb      	strh	r3, [r7, #30]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 80026fe:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8002702:	4618      	mov	r0, r3
 8002704:	3720      	adds	r7, #32
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 800270a:	b590      	push	{r4, r7, lr}
 800270c:	b087      	sub	sp, #28
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 8002712:	2300      	movs	r3, #0
 8002714:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 8002716:	f7ff ff63 	bl	80025e0 <LL_FLASH_GetUDN>
 800271a:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002722:	d138      	bne.n	8002796 <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8002724:	f000 ff6c 	bl	8003600 <HAL_GetUIDw0>
 8002728:	4604      	mov	r4, r0
 800272a:	f000 ff7d 	bl	8003628 <HAL_GetUIDw2>
 800272e:	4603      	mov	r3, r0
 8002730:	4423      	add	r3, r4
 8002732:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 8002734:	f000 ff6e 	bl	8003614 <HAL_GetUIDw1>
 8002738:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	0e1a      	lsrs	r2, r3, #24
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	3307      	adds	r3, #7
 8002742:	b2d2      	uxtb	r2, r2
 8002744:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	0c1a      	lsrs	r2, r3, #16
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	3306      	adds	r3, #6
 800274e:	b2d2      	uxtb	r2, r2
 8002750:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	0a1a      	lsrs	r2, r3, #8
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	3305      	adds	r3, #5
 800275a:	b2d2      	uxtb	r2, r2
 800275c:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	3304      	adds	r3, #4
 8002762:	693a      	ldr	r2, [r7, #16]
 8002764:	b2d2      	uxtb	r2, r2
 8002766:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	0e1a      	lsrs	r2, r3, #24
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	3303      	adds	r3, #3
 8002770:	b2d2      	uxtb	r2, r2
 8002772:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	0c1a      	lsrs	r2, r3, #16
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	3302      	adds	r3, #2
 800277c:	b2d2      	uxtb	r2, r2
 800277e:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	0a1a      	lsrs	r2, r3, #8
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	3301      	adds	r3, #1
 8002788:	b2d2      	uxtb	r2, r2
 800278a:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	b2da      	uxtb	r2, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 8002794:	e031      	b.n	80027fa <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	3307      	adds	r3, #7
 800279a:	697a      	ldr	r2, [r7, #20]
 800279c:	b2d2      	uxtb	r2, r2
 800279e:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	0a1a      	lsrs	r2, r3, #8
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	3306      	adds	r3, #6
 80027a8:	b2d2      	uxtb	r2, r2
 80027aa:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	0c1a      	lsrs	r2, r3, #16
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	3305      	adds	r3, #5
 80027b4:	b2d2      	uxtb	r2, r2
 80027b6:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	0e1a      	lsrs	r2, r3, #24
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	3304      	adds	r3, #4
 80027c0:	b2d2      	uxtb	r2, r2
 80027c2:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 80027c4:	f7ff ff16 	bl	80025f4 <LL_FLASH_GetDeviceID>
 80027c8:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	3303      	adds	r3, #3
 80027ce:	697a      	ldr	r2, [r7, #20]
 80027d0:	b2d2      	uxtb	r2, r2
 80027d2:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 80027d4:	f7ff ff1a 	bl	800260c <LL_FLASH_GetSTCompanyID>
 80027d8:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	3302      	adds	r3, #2
 80027de:	697a      	ldr	r2, [r7, #20]
 80027e0:	b2d2      	uxtb	r2, r2
 80027e2:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	0a1a      	lsrs	r2, r3, #8
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	3301      	adds	r3, #1
 80027ec:	b2d2      	uxtb	r2, r2
 80027ee:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	0c1b      	lsrs	r3, r3, #16
 80027f4:	b2da      	uxtb	r2, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	701a      	strb	r2, [r3, #0]
}
 80027fa:	bf00      	nop
 80027fc:	371c      	adds	r7, #28
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd90      	pop	{r4, r7, pc}

08002802 <GetDevAddr>:

void GetDevAddr(uint32_t *devAddr)
{
 8002802:	b590      	push	{r4, r7, lr}
 8002804:	b083      	sub	sp, #12
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  *devAddr = LL_FLASH_GetUDN();
 800280a:	f7ff fee9 	bl	80025e0 <LL_FLASH_GetUDN>
 800280e:	4602      	mov	r2, r0
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	601a      	str	r2, [r3, #0]
  if (*devAddr == 0xFFFFFFFF)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800281c:	d10d      	bne.n	800283a <GetDevAddr+0x38>
  {
    *devAddr = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 800281e:	f000 feef 	bl	8003600 <HAL_GetUIDw0>
 8002822:	4604      	mov	r4, r0
 8002824:	f000 fef6 	bl	8003614 <HAL_GetUIDw1>
 8002828:	4603      	mov	r3, r0
 800282a:	405c      	eors	r4, r3
 800282c:	f000 fefc 	bl	8003628 <HAL_GetUIDw2>
 8002830:	4603      	mov	r3, r0
 8002832:	ea84 0203 	eor.w	r2, r4, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	601a      	str	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
}
 800283a:	bf00      	nop
 800283c:	370c      	adds	r7, #12
 800283e:	46bd      	mov	sp, r7
 8002840:	bd90      	pop	{r4, r7, pc}
	...

08002844 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b086      	sub	sp, #24
 8002848:	af02      	add	r7, sp, #8
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 800284e:	f107 0308 	add.w	r3, r7, #8
 8002852:	4618      	mov	r0, r3
 8002854:	f01b f85e 	bl	801d914 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800285e:	9200      	str	r2, [sp, #0]
 8002860:	4a07      	ldr	r2, [pc, #28]	@ (8002880 <TimestampNow+0x3c>)
 8002862:	2110      	movs	r1, #16
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f000 f81d 	bl	80028a4 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f7fd fc84 	bl	8000178 <strlen>
 8002870:	4603      	mov	r3, r0
 8002872:	b29a      	uxth	r2, r3
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8002878:	bf00      	nop
 800287a:	3710      	adds	r7, #16
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	0801ee84 	.word	0x0801ee84

08002884 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8002888:	2101      	movs	r1, #1
 800288a:	2002      	movs	r0, #2
 800288c:	f01a fed2 	bl	801d634 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8002890:	bf00      	nop
 8002892:	bd80      	pop	{r7, pc}

08002894 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8002898:	2100      	movs	r1, #0
 800289a:	2002      	movs	r0, #2
 800289c:	f01a feca 	bl	801d634 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 80028a0:	bf00      	nop
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 80028a4:	b40c      	push	{r2, r3}
 80028a6:	b580      	push	{r7, lr}
 80028a8:	b084      	sub	sp, #16
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
 80028ae:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 80028b0:	f107 031c 	add.w	r3, r7, #28
 80028b4:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 80028b6:	6839      	ldr	r1, [r7, #0]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	69ba      	ldr	r2, [r7, #24]
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f01b f9fb 	bl	801dcb8 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 80028c2:	bf00      	nop
 80028c4:	3710      	adds	r7, #16
 80028c6:	46bd      	mov	sp, r7
 80028c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80028cc:	b002      	add	sp, #8
 80028ce:	4770      	bx	lr

080028d0 <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 80028da:	4618      	mov	r0, r3
 80028dc:	370c      	adds	r7, #12
 80028de:	46bd      	mov	sp, r7
 80028e0:	bc80      	pop	{r7}
 80028e2:	4770      	bx	lr

080028e4 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80028ea:	2300      	movs	r3, #0
 80028ec:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 80028ee:	4b06      	ldr	r3, [pc, #24]	@ (8002908 <HAL_GetTick+0x24>)
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d002      	beq.n	80028fc <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 80028f6:	f000 f993 	bl	8002c20 <TIMER_IF_GetTimerValue>
 80028fa:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 80028fc:	687b      	ldr	r3, [r7, #4]
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3708      	adds	r7, #8
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	20000268 	.word	0x20000268

0800290c <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4618      	mov	r0, r3
 8002918:	f000 fa09 	bl	8002d2e <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 800291c:	bf00      	nop
 800291e:	3708      	adds	r7, #8
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <LL_AHB2_GRP1_EnableClock>:
{
 8002924:	b480      	push	{r7}
 8002926:	b085      	sub	sp, #20
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800292c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002930:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002932:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4313      	orrs	r3, r2
 800293a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800293c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002940:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4013      	ands	r3, r2
 8002946:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002948:	68fb      	ldr	r3, [r7, #12]
}
 800294a:	bf00      	nop
 800294c:	3714      	adds	r7, #20
 800294e:	46bd      	mov	sp, r7
 8002950:	bc80      	pop	{r7}
 8002952:	4770      	bx	lr

08002954 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b086      	sub	sp, #24
 8002958:	af00      	add	r7, sp, #0

  /* USER CODE END DBG_Init_1 */

  /* SW probes */
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 0 )
  HAL_DBGMCU_DisableDBGSleepMode();
 800295a:	f000 fe6f 	bl	800363c <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 800295e:	f000 fe73 	bl	8003648 <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 8002962:	f000 fe77 	bl	8003654 <HAL_DBGMCU_DisableDBGStandbyMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8002966:	1d3b      	adds	r3, r7, #4
 8002968:	2200      	movs	r2, #0
 800296a:	601a      	str	r2, [r3, #0]
 800296c:	605a      	str	r2, [r3, #4]
 800296e:	609a      	str	r2, [r3, #8]
 8002970:	60da      	str	r2, [r3, #12]
 8002972:	611a      	str	r2, [r3, #16]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8002974:	2301      	movs	r3, #1
 8002976:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8002978:	2300      	movs	r3, #0
 800297a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 800297c:	2303      	movs	r3, #3
 800297e:	613b      	str	r3, [r7, #16]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
 8002980:	2001      	movs	r0, #1
 8002982:	f7ff ffcf 	bl	8002924 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE2_CLK_ENABLE();
 8002986:	2002      	movs	r0, #2
 8002988:	f7ff ffcc 	bl	8002924 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE3_CLK_ENABLE();
 800298c:	2002      	movs	r0, #2
 800298e:	f7ff ffc9 	bl	8002924 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE4_CLK_ENABLE();
 8002992:	2002      	movs	r0, #2
 8002994:	f7ff ffc6 	bl	8002924 <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 8002998:	2301      	movs	r3, #1
 800299a:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 800299c:	1d3b      	adds	r3, r7, #4
 800299e:	4619      	mov	r1, r3
 80029a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80029a4:	f002 fdde 	bl	8005564 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 80029a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80029ac:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 80029ae:	1d3b      	adds	r3, r7, #4
 80029b0:	4619      	mov	r1, r3
 80029b2:	4815      	ldr	r0, [pc, #84]	@ (8002a08 <DBG_Init+0xb4>)
 80029b4:	f002 fdd6 	bl	8005564 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE3_PIN;
 80029b8:	2308      	movs	r3, #8
 80029ba:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE3_PORT, &GPIO_InitStruct);
 80029bc:	1d3b      	adds	r3, r7, #4
 80029be:	4619      	mov	r1, r3
 80029c0:	4811      	ldr	r0, [pc, #68]	@ (8002a08 <DBG_Init+0xb4>)
 80029c2:	f002 fdcf 	bl	8005564 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE4_PIN;
 80029c6:	2310      	movs	r3, #16
 80029c8:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE4_PORT, &GPIO_InitStruct);
 80029ca:	1d3b      	adds	r3, r7, #4
 80029cc:	4619      	mov	r1, r3
 80029ce:	480e      	ldr	r0, [pc, #56]	@ (8002a08 <DBG_Init+0xb4>)
 80029d0:	f002 fdc8 	bl	8005564 <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 80029d4:	2200      	movs	r2, #0
 80029d6:	2101      	movs	r1, #1
 80029d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80029dc:	f002 fff0 	bl	80059c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 80029e0:	2200      	movs	r2, #0
 80029e2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80029e6:	4808      	ldr	r0, [pc, #32]	@ (8002a08 <DBG_Init+0xb4>)
 80029e8:	f002 ffea 	bl	80059c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE3_PORT, PROBE_LINE3_PIN, GPIO_PIN_RESET);
 80029ec:	2200      	movs	r2, #0
 80029ee:	2108      	movs	r1, #8
 80029f0:	4805      	ldr	r0, [pc, #20]	@ (8002a08 <DBG_Init+0xb4>)
 80029f2:	f002 ffe5 	bl	80059c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE4_PORT, PROBE_LINE4_PIN, GPIO_PIN_RESET);
 80029f6:	2200      	movs	r2, #0
 80029f8:	2110      	movs	r1, #16
 80029fa:	4803      	ldr	r0, [pc, #12]	@ (8002a08 <DBG_Init+0xb4>)
 80029fc:	f002 ffe0 	bl	80059c0 <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8002a00:	bf00      	nop
 8002a02:	3718      	adds	r7, #24
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	48000400 	.word	0x48000400

08002a0c <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b086      	sub	sp, #24
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 8002a14:	4b16      	ldr	r3, [pc, #88]	@ (8002a70 <EnvSensors_Read+0x64>)
 8002a16:	60fb      	str	r3, [r7, #12]
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 8002a18:	4b16      	ldr	r3, [pc, #88]	@ (8002a74 <EnvSensors_Read+0x68>)
 8002a1a:	60bb      	str	r3, [r7, #8]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 8002a1c:	4b16      	ldr	r3, [pc, #88]	@ (8002a78 <EnvSensors_Read+0x6c>)
 8002a1e:	617b      	str	r3, [r7, #20]
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif  /* SENSOR_ENABLED */

#ifdef ENABLE_SENSOR_SI7201
  int8_t status = r_both_Si7021(&HUMIDITY_Value, &TEMPERATURE_Value);
 8002a20:	f107 0208 	add.w	r2, r7, #8
 8002a24:	f107 030c 	add.w	r3, r7, #12
 8002a28:	4611      	mov	r1, r2
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7fe fdd2 	bl	80015d4 <r_both_Si7021>
 8002a30:	4603      	mov	r3, r0
 8002a32:	74fb      	strb	r3, [r7, #19]

  if(status != 0)
 8002a34:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d005      	beq.n	8002a48 <EnvSensors_Read+0x3c>
  {
	  APP_LOG(1, VLEVEL_M, "Read temperature & humidity error");
 8002a3c:	4b0f      	ldr	r3, [pc, #60]	@ (8002a7c <EnvSensors_Read+0x70>)
 8002a3e:	2201      	movs	r2, #1
 8002a40:	2100      	movs	r1, #0
 8002a42:	2002      	movs	r0, #2
 8002a44:	f01b fed6 	bl	801e7f4 <UTIL_ADV_TRACE_COND_FSend>
  }
#endif

  sensor_data->humidity    = HUMIDITY_Value;
 8002a48:	68fa      	ldr	r2, [r7, #12]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8002a4e:	68ba      	ldr	r2, [r7, #8]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	697a      	ldr	r2, [r7, #20]
 8002a58:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a08      	ldr	r2, [pc, #32]	@ (8002a80 <EnvSensors_Read+0x74>)
 8002a5e:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4a08      	ldr	r2, [pc, #32]	@ (8002a84 <EnvSensors_Read+0x78>)
 8002a64:	611a      	str	r2, [r3, #16]

  return 0;
 8002a66:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3718      	adds	r7, #24
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	42480000 	.word	0x42480000
 8002a74:	41900000 	.word	0x41900000
 8002a78:	447a0000 	.word	0x447a0000
 8002a7c:	0801ee90 	.word	0x0801ee90
 8002a80:	003e090d 	.word	0x003e090d
 8002a84:	000503ab 	.word	0x000503ab

08002a88 <EnvSensors_Init>:

int32_t EnvSensors_Init(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
  int32_t ret = 0;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	607b      	str	r3, [r7, #4]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
 8002a92:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bc80      	pop	{r7}
 8002a9c:	4770      	bx	lr

08002a9e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8002aa2:	bf00      	nop
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bc80      	pop	{r7}
 8002aa8:	4770      	bx	lr

08002aaa <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8002aaa:	b480      	push	{r7}
 8002aac:	b083      	sub	sp, #12
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	689b      	ldr	r3, [r3, #8]
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bc80      	pop	{r7}
 8002abe:	4770      	bx	lr

08002ac0 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8002aca:	4b14      	ldr	r3, [pc, #80]	@ (8002b1c <TIMER_IF_Init+0x5c>)
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	f083 0301 	eor.w	r3, r3, #1
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d01b      	beq.n	8002b10 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002ad8:	4b11      	ldr	r3, [pc, #68]	@ (8002b20 <TIMER_IF_Init+0x60>)
 8002ada:	f04f 32ff 	mov.w	r2, #4294967295
 8002ade:	631a      	str	r2, [r3, #48]	@ 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8002ae0:	f7ff fbf8 	bl	80022d4 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8002ae4:	f000 f856 	bl	8002b94 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002ae8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002aec:	480c      	ldr	r0, [pc, #48]	@ (8002b20 <TIMER_IF_Init+0x60>)
 8002aee:	f005 fb91 	bl	8008214 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002af2:	4b0b      	ldr	r3, [pc, #44]	@ (8002b20 <TIMER_IF_Init+0x60>)
 8002af4:	f04f 32ff 	mov.w	r2, #4294967295
 8002af8:	631a      	str	r2, [r3, #48]	@ 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8002afa:	4809      	ldr	r0, [pc, #36]	@ (8002b20 <TIMER_IF_Init+0x60>)
 8002afc:	f005 fcc8 	bl	8008490 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8002b00:	2000      	movs	r0, #0
 8002b02:	f000 f9d3 	bl	8002eac <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8002b06:	f000 f85f 	bl	8002bc8 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8002b0a:	4b04      	ldr	r3, [pc, #16]	@ (8002b1c <TIMER_IF_Init+0x5c>)
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8002b10:	79fb      	ldrb	r3, [r7, #7]
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3708      	adds	r7, #8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	20000269 	.word	0x20000269
 8002b20:	20000224 	.word	0x20000224

08002b24 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b08e      	sub	sp, #56	@ 0x38
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 8002b32:	f107 0308 	add.w	r3, r7, #8
 8002b36:	222c      	movs	r2, #44	@ 0x2c
 8002b38:	2100      	movs	r1, #0
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f01c f8d2 	bl	801ece4 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8002b40:	f000 f828 	bl	8002b94 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8002b44:	4b11      	ldr	r3, [pc, #68]	@ (8002b8c <TIMER_IF_StartTimer+0x68>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	627b      	str	r3, [r7, #36]	@ 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	43db      	mvns	r3, r3
 8002b56:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8002b5c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002b60:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8002b62:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b66:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002b68:	f107 0308 	add.w	r3, r7, #8
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	4619      	mov	r1, r3
 8002b70:	4807      	ldr	r0, [pc, #28]	@ (8002b90 <TIMER_IF_StartTimer+0x6c>)
 8002b72:	f005 fa43 	bl	8007ffc <HAL_RTC_SetAlarm_IT>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d001      	beq.n	8002b80 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8002b7c:	f7ff fb7c 	bl	8002278 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8002b80:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3738      	adds	r7, #56	@ 0x38
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	2000026c 	.word	0x2000026c
 8002b90:	20000224 	.word	0x20000224

08002b94 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8002b9e:	4b08      	ldr	r3, [pc, #32]	@ (8002bc0 <TIMER_IF_StopTimer+0x2c>)
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002ba4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002ba8:	4806      	ldr	r0, [pc, #24]	@ (8002bc4 <TIMER_IF_StopTimer+0x30>)
 8002baa:	f005 fb33 	bl	8008214 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002bae:	4b05      	ldr	r3, [pc, #20]	@ (8002bc4 <TIMER_IF_StopTimer+0x30>)
 8002bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8002bb4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 8002bb6:	79fb      	ldrb	r3, [r7, #7]
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3708      	adds	r7, #8
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	40002800 	.word	0x40002800
 8002bc4:	20000224 	.word	0x20000224

08002bc8 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8002bcc:	f000 f98e 	bl	8002eec <GetTimerTicks>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	4a03      	ldr	r2, [pc, #12]	@ (8002be0 <TIMER_IF_SetTimerContext+0x18>)
 8002bd4:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002bd6:	4b02      	ldr	r3, [pc, #8]	@ (8002be0 <TIMER_IF_SetTimerContext+0x18>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	2000026c 	.word	0x2000026c

08002be4 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002be8:	4b02      	ldr	r3, [pc, #8]	@ (8002bf4 <TIMER_IF_GetTimerContext+0x10>)
 8002bea:	681b      	ldr	r3, [r3, #0]
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bc80      	pop	{r7}
 8002bf2:	4770      	bx	lr
 8002bf4:	2000026c 	.word	0x2000026c

08002bf8 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8002c02:	f000 f973 	bl	8002eec <GetTimerTicks>
 8002c06:	4602      	mov	r2, r0
 8002c08:	4b04      	ldr	r3, [pc, #16]	@ (8002c1c <TIMER_IF_GetTimerElapsedTime+0x24>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 8002c10:	687b      	ldr	r3, [r7, #4]
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3708      	adds	r7, #8
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	2000026c 	.word	0x2000026c

08002c20 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002c26:	2300      	movs	r3, #0
 8002c28:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 8002c2a:	4b06      	ldr	r3, [pc, #24]	@ (8002c44 <TIMER_IF_GetTimerValue+0x24>)
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d002      	beq.n	8002c38 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 8002c32:	f000 f95b 	bl	8002eec <GetTimerTicks>
 8002c36:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8002c38:	687b      	ldr	r3, [r7, #4]
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3708      	adds	r7, #8
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	20000269 	.word	0x20000269

08002c48 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 8002c52:	2303      	movs	r3, #3
 8002c54:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 8002c56:	687b      	ldr	r3, [r7, #4]
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bc80      	pop	{r7}
 8002c60:	4770      	bx	lr

08002c62 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8002c62:	b5b0      	push	{r4, r5, r7, lr}
 8002c64:	b084      	sub	sp, #16
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002c6a:	2100      	movs	r1, #0
 8002c6c:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8002c6e:	6879      	ldr	r1, [r7, #4]
 8002c70:	2000      	movs	r0, #0
 8002c72:	460a      	mov	r2, r1
 8002c74:	4603      	mov	r3, r0
 8002c76:	0d95      	lsrs	r5, r2, #22
 8002c78:	0294      	lsls	r4, r2, #10
 8002c7a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002c7e:	f04f 0300 	mov.w	r3, #0
 8002c82:	4620      	mov	r0, r4
 8002c84:	4629      	mov	r1, r5
 8002c86:	f7fe fa67 	bl	8001158 <__aeabi_uldivmod>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	4613      	mov	r3, r2
 8002c90:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 8002c92:	68fb      	ldr	r3, [r7, #12]
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3710      	adds	r7, #16
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bdb0      	pop	{r4, r5, r7, pc}

08002c9c <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8002c9c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002ca0:	b085      	sub	sp, #20
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002ca6:	2100      	movs	r1, #0
 8002ca8:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8002caa:	6879      	ldr	r1, [r7, #4]
 8002cac:	2000      	movs	r0, #0
 8002cae:	460c      	mov	r4, r1
 8002cb0:	4605      	mov	r5, r0
 8002cb2:	4620      	mov	r0, r4
 8002cb4:	4629      	mov	r1, r5
 8002cb6:	f04f 0a00 	mov.w	sl, #0
 8002cba:	f04f 0b00 	mov.w	fp, #0
 8002cbe:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8002cc2:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8002cc6:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 8002cca:	4650      	mov	r0, sl
 8002ccc:	4659      	mov	r1, fp
 8002cce:	1b02      	subs	r2, r0, r4
 8002cd0:	eb61 0305 	sbc.w	r3, r1, r5
 8002cd4:	f04f 0000 	mov.w	r0, #0
 8002cd8:	f04f 0100 	mov.w	r1, #0
 8002cdc:	0099      	lsls	r1, r3, #2
 8002cde:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002ce2:	0090      	lsls	r0, r2, #2
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	460b      	mov	r3, r1
 8002ce8:	eb12 0804 	adds.w	r8, r2, r4
 8002cec:	eb43 0905 	adc.w	r9, r3, r5
 8002cf0:	f04f 0200 	mov.w	r2, #0
 8002cf4:	f04f 0300 	mov.w	r3, #0
 8002cf8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cfc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d00:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d04:	4690      	mov	r8, r2
 8002d06:	4699      	mov	r9, r3
 8002d08:	4640      	mov	r0, r8
 8002d0a:	4649      	mov	r1, r9
 8002d0c:	f04f 0200 	mov.w	r2, #0
 8002d10:	f04f 0300 	mov.w	r3, #0
 8002d14:	0a82      	lsrs	r2, r0, #10
 8002d16:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002d1a:	0a8b      	lsrs	r3, r1, #10
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8002d20:	68fb      	ldr	r3, [r7, #12]
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3714      	adds	r7, #20
 8002d26:	46bd      	mov	sp, r7
 8002d28:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002d2c:	4770      	bx	lr

08002d2e <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b084      	sub	sp, #16
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f7ff ff93 	bl	8002c62 <TIMER_IF_Convert_ms2Tick>
 8002d3c:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 8002d3e:	f000 f8d5 	bl	8002eec <GetTimerTicks>
 8002d42:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002d44:	e000      	b.n	8002d48 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8002d46:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002d48:	f000 f8d0 	bl	8002eec <GetTimerTicks>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	68fa      	ldr	r2, [r7, #12]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d8f6      	bhi.n	8002d46 <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8002d58:	bf00      	nop
 8002d5a:	bf00      	nop
 8002d5c:	3710      	adds	r7, #16
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b082      	sub	sp, #8
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8002d6a:	f01b fbd3 	bl	801e514 <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 8002d6e:	bf00      	nop
 8002d70:	3708      	adds	r7, #8
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b084      	sub	sp, #16
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8002d7e:	f000 f8a5 	bl	8002ecc <TIMER_IF_BkUp_Read_MSBticks>
 8002d82:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	3301      	adds	r3, #1
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f000 f88f 	bl	8002eac <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 8002d8e:	bf00      	nop
 8002d90:	3710      	adds	r7, #16
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8002d96:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d9a:	b08c      	sub	sp, #48	@ 0x30
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 8002da0:	2300      	movs	r3, #0
 8002da2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8002da4:	f000 f8a2 	bl	8002eec <GetTimerTicks>
 8002da8:	62b8      	str	r0, [r7, #40]	@ 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8002daa:	f000 f88f 	bl	8002ecc <TIMER_IF_BkUp_Read_MSBticks>
 8002dae:	6278      	str	r0, [r7, #36]	@ 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8002db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db2:	2200      	movs	r2, #0
 8002db4:	60bb      	str	r3, [r7, #8]
 8002db6:	60fa      	str	r2, [r7, #12]
 8002db8:	f04f 0200 	mov.w	r2, #0
 8002dbc:	f04f 0300 	mov.w	r3, #0
 8002dc0:	68b9      	ldr	r1, [r7, #8]
 8002dc2:	000b      	movs	r3, r1
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002dc8:	2000      	movs	r0, #0
 8002dca:	460c      	mov	r4, r1
 8002dcc:	4605      	mov	r5, r0
 8002dce:	eb12 0804 	adds.w	r8, r2, r4
 8002dd2:	eb43 0905 	adc.w	r9, r3, r5
 8002dd6:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8002dda:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002dde:	f04f 0200 	mov.w	r2, #0
 8002de2:	f04f 0300 	mov.w	r3, #0
 8002de6:	0a82      	lsrs	r2, r0, #10
 8002de8:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002dec:	0a8b      	lsrs	r3, r1, #10
 8002dee:	4613      	mov	r3, r2
 8002df0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	2200      	movs	r2, #0
 8002df6:	603b      	str	r3, [r7, #0]
 8002df8:	607a      	str	r2, [r7, #4]
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8002e00:	f04f 0b00 	mov.w	fp, #0
 8002e04:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7ff ff46 	bl	8002c9c <TIMER_IF_Convert_Tick2ms>
 8002e10:	4603      	mov	r3, r0
 8002e12:	b29a      	uxth	r2, r3
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 8002e18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3730      	adds	r7, #48	@ 0x30
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002e24 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	2100      	movs	r1, #0
 8002e30:	4803      	ldr	r0, [pc, #12]	@ (8002e40 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 8002e32:	f005 fbbf 	bl	80085b4 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 8002e36:	bf00      	nop
 8002e38:	3708      	adds	r7, #8
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	20000224 	.word	0x20000224

08002e44 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	2101      	movs	r1, #1
 8002e50:	4803      	ldr	r0, [pc, #12]	@ (8002e60 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 8002e52:	f005 fbaf 	bl	80085b4 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 8002e56:	bf00      	nop
 8002e58:	3708      	adds	r7, #8
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	20000224 	.word	0x20000224

08002e64 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8002e6e:	2100      	movs	r1, #0
 8002e70:	4804      	ldr	r0, [pc, #16]	@ (8002e84 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 8002e72:	f005 fbb7 	bl	80085e4 <HAL_RTCEx_BKUPRead>
 8002e76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 8002e78:	687b      	ldr	r3, [r7, #4]
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3708      	adds	r7, #8
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	20000224 	.word	0x20000224

08002e88 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8002e92:	2101      	movs	r1, #1
 8002e94:	4804      	ldr	r0, [pc, #16]	@ (8002ea8 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 8002e96:	f005 fba5 	bl	80085e4 <HAL_RTCEx_BKUPRead>
 8002e9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 8002e9c:	687b      	ldr	r3, [r7, #4]
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3708      	adds	r7, #8
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	20000224 	.word	0x20000224

08002eac <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	2102      	movs	r1, #2
 8002eb8:	4803      	ldr	r0, [pc, #12]	@ (8002ec8 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 8002eba:	f005 fb7b 	bl	80085b4 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 8002ebe:	bf00      	nop
 8002ec0:	3708      	adds	r7, #8
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	20000224 	.word	0x20000224

08002ecc <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8002ed2:	2102      	movs	r1, #2
 8002ed4:	4804      	ldr	r0, [pc, #16]	@ (8002ee8 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 8002ed6:	f005 fb85 	bl	80085e4 <HAL_RTCEx_BKUPRead>
 8002eda:	6078      	str	r0, [r7, #4]
  return MSBticks;
 8002edc:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	20000224 	.word	0x20000224

08002eec <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8002ef2:	480b      	ldr	r0, [pc, #44]	@ (8002f20 <GetTimerTicks+0x34>)
 8002ef4:	f7ff fdd9 	bl	8002aaa <LL_RTC_TIME_GetSubSecond>
 8002ef8:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002efa:	e003      	b.n	8002f04 <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8002efc:	4808      	ldr	r0, [pc, #32]	@ (8002f20 <GetTimerTicks+0x34>)
 8002efe:	f7ff fdd4 	bl	8002aaa <LL_RTC_TIME_GetSubSecond>
 8002f02:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002f04:	4806      	ldr	r0, [pc, #24]	@ (8002f20 <GetTimerTicks+0x34>)
 8002f06:	f7ff fdd0 	bl	8002aaa <LL_RTC_TIME_GetSubSecond>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d1f4      	bne.n	8002efc <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3708      	adds	r7, #8
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	40002800 	.word	0x40002800

08002f24 <LL_AHB2_GRP1_EnableClock>:
{
 8002f24:	b480      	push	{r7}
 8002f26:	b085      	sub	sp, #20
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002f2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f30:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002f32:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002f3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f40:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4013      	ands	r3, r2
 8002f46:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002f48:	68fb      	ldr	r3, [r7, #12]
}
 8002f4a:	bf00      	nop
 8002f4c:	3714      	adds	r7, #20
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bc80      	pop	{r7}
 8002f52:	4770      	bx	lr

08002f54 <LL_APB2_GRP1_EnableClock>:
{
 8002f54:	b480      	push	{r7}
 8002f56:	b085      	sub	sp, #20
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002f5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f60:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002f62:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002f6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f70:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4013      	ands	r3, r2
 8002f76:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002f78:	68fb      	ldr	r3, [r7, #12]
}
 8002f7a:	bf00      	nop
 8002f7c:	3714      	adds	r7, #20
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bc80      	pop	{r7}
 8002f82:	4770      	bx	lr

08002f84 <LL_APB2_GRP1_DisableClock>:
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8002f8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f90:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	43db      	mvns	r3, r3
 8002f96:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	660b      	str	r3, [r1, #96]	@ 0x60
}
 8002f9e:	bf00      	nop
 8002fa0:	370c      	adds	r7, #12
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bc80      	pop	{r7}
 8002fa6:	4770      	bx	lr

08002fa8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002fac:	4b22      	ldr	r3, [pc, #136]	@ (8003038 <MX_USART1_UART_Init+0x90>)
 8002fae:	4a23      	ldr	r2, [pc, #140]	@ (800303c <MX_USART1_UART_Init+0x94>)
 8002fb0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002fb2:	4b21      	ldr	r3, [pc, #132]	@ (8003038 <MX_USART1_UART_Init+0x90>)
 8002fb4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002fb8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002fba:	4b1f      	ldr	r3, [pc, #124]	@ (8003038 <MX_USART1_UART_Init+0x90>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002fc0:	4b1d      	ldr	r3, [pc, #116]	@ (8003038 <MX_USART1_UART_Init+0x90>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002fc6:	4b1c      	ldr	r3, [pc, #112]	@ (8003038 <MX_USART1_UART_Init+0x90>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002fcc:	4b1a      	ldr	r3, [pc, #104]	@ (8003038 <MX_USART1_UART_Init+0x90>)
 8002fce:	220c      	movs	r2, #12
 8002fd0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fd2:	4b19      	ldr	r3, [pc, #100]	@ (8003038 <MX_USART1_UART_Init+0x90>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fd8:	4b17      	ldr	r3, [pc, #92]	@ (8003038 <MX_USART1_UART_Init+0x90>)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002fde:	4b16      	ldr	r3, [pc, #88]	@ (8003038 <MX_USART1_UART_Init+0x90>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002fe4:	4b14      	ldr	r3, [pc, #80]	@ (8003038 <MX_USART1_UART_Init+0x90>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002fea:	4b13      	ldr	r3, [pc, #76]	@ (8003038 <MX_USART1_UART_Init+0x90>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002ff0:	4811      	ldr	r0, [pc, #68]	@ (8003038 <MX_USART1_UART_Init+0x90>)
 8002ff2:	f005 ffe8 	bl	8008fc6 <HAL_UART_Init>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d001      	beq.n	8003000 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002ffc:	f7ff f93c 	bl	8002278 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003000:	2100      	movs	r1, #0
 8003002:	480d      	ldr	r0, [pc, #52]	@ (8003038 <MX_USART1_UART_Init+0x90>)
 8003004:	f008 f90b 	bl	800b21e <HAL_UARTEx_SetTxFifoThreshold>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d001      	beq.n	8003012 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800300e:	f7ff f933 	bl	8002278 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003012:	2100      	movs	r1, #0
 8003014:	4808      	ldr	r0, [pc, #32]	@ (8003038 <MX_USART1_UART_Init+0x90>)
 8003016:	f008 f940 	bl	800b29a <HAL_UARTEx_SetRxFifoThreshold>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d001      	beq.n	8003024 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003020:	f7ff f92a 	bl	8002278 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8003024:	4804      	ldr	r0, [pc, #16]	@ (8003038 <MX_USART1_UART_Init+0x90>)
 8003026:	f008 f8bf 	bl	800b1a8 <HAL_UARTEx_EnableFifoMode>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d001      	beq.n	8003034 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003030:	f7ff f922 	bl	8002278 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003034:	bf00      	nop
 8003036:	bd80      	pop	{r7, pc}
 8003038:	20000270 	.word	0x20000270
 800303c:	40013800 	.word	0x40013800

08003040 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b096      	sub	sp, #88	@ 0x58
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003048:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800304c:	2200      	movs	r2, #0
 800304e:	601a      	str	r2, [r3, #0]
 8003050:	605a      	str	r2, [r3, #4]
 8003052:	609a      	str	r2, [r3, #8]
 8003054:	60da      	str	r2, [r3, #12]
 8003056:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003058:	f107 030c 	add.w	r3, r7, #12
 800305c:	2238      	movs	r2, #56	@ 0x38
 800305e:	2100      	movs	r1, #0
 8003060:	4618      	mov	r0, r3
 8003062:	f01b fe3f 	bl	801ece4 <memset>
  if(uartHandle->Instance==USART1)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a2f      	ldr	r2, [pc, #188]	@ (8003128 <HAL_UART_MspInit+0xe8>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d156      	bne.n	800311e <HAL_UART_MspInit+0xde>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003070:	2301      	movs	r3, #1
 8003072:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003074:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8003078:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800307a:	f107 030c 	add.w	r3, r7, #12
 800307e:	4618      	mov	r0, r3
 8003080:	f004 fe20 	bl	8007cc4 <HAL_RCCEx_PeriphCLKConfig>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800308a:	f7ff f8f5 	bl	8002278 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800308e:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8003092:	f7ff ff5f 	bl	8002f54 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003096:	2002      	movs	r0, #2
 8003098:	f7ff ff44 	bl	8002f24 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 800309c:	23c0      	movs	r3, #192	@ 0xc0
 800309e:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030a0:	2302      	movs	r3, #2
 80030a2:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a4:	2300      	movs	r3, #0
 80030a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030a8:	2303      	movs	r3, #3
 80030aa:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80030ac:	2307      	movs	r3, #7
 80030ae:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030b0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80030b4:	4619      	mov	r1, r3
 80030b6:	481d      	ldr	r0, [pc, #116]	@ (800312c <HAL_UART_MspInit+0xec>)
 80030b8:	f002 fa54 	bl	8005564 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 80030bc:	4b1c      	ldr	r3, [pc, #112]	@ (8003130 <HAL_UART_MspInit+0xf0>)
 80030be:	4a1d      	ldr	r2, [pc, #116]	@ (8003134 <HAL_UART_MspInit+0xf4>)
 80030c0:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80030c2:	4b1b      	ldr	r3, [pc, #108]	@ (8003130 <HAL_UART_MspInit+0xf0>)
 80030c4:	2212      	movs	r2, #18
 80030c6:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80030c8:	4b19      	ldr	r3, [pc, #100]	@ (8003130 <HAL_UART_MspInit+0xf0>)
 80030ca:	2210      	movs	r2, #16
 80030cc:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030ce:	4b18      	ldr	r3, [pc, #96]	@ (8003130 <HAL_UART_MspInit+0xf0>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80030d4:	4b16      	ldr	r3, [pc, #88]	@ (8003130 <HAL_UART_MspInit+0xf0>)
 80030d6:	2280      	movs	r2, #128	@ 0x80
 80030d8:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80030da:	4b15      	ldr	r3, [pc, #84]	@ (8003130 <HAL_UART_MspInit+0xf0>)
 80030dc:	2200      	movs	r2, #0
 80030de:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80030e0:	4b13      	ldr	r3, [pc, #76]	@ (8003130 <HAL_UART_MspInit+0xf0>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80030e6:	4b12      	ldr	r3, [pc, #72]	@ (8003130 <HAL_UART_MspInit+0xf0>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80030ec:	4b10      	ldr	r3, [pc, #64]	@ (8003130 <HAL_UART_MspInit+0xf0>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80030f2:	480f      	ldr	r0, [pc, #60]	@ (8003130 <HAL_UART_MspInit+0xf0>)
 80030f4:	f001 fc32 	bl	800495c <HAL_DMA_Init>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 80030fe:	f7ff f8bb 	bl	8002278 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a0a      	ldr	r2, [pc, #40]	@ (8003130 <HAL_UART_MspInit+0xf0>)
 8003106:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003108:	4a09      	ldr	r2, [pc, #36]	@ (8003130 <HAL_UART_MspInit+0xf0>)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 800310e:	2200      	movs	r2, #0
 8003110:	2102      	movs	r1, #2
 8003112:	2024      	movs	r0, #36	@ 0x24
 8003114:	f001 fbeb 	bl	80048ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003118:	2024      	movs	r0, #36	@ 0x24
 800311a:	f001 fc02 	bl	8004922 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800311e:	bf00      	nop
 8003120:	3758      	adds	r7, #88	@ 0x58
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	40013800 	.word	0x40013800
 800312c:	48000400 	.word	0x48000400
 8003130:	20000304 	.word	0x20000304
 8003134:	40020008 	.word	0x40020008

08003138 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a0b      	ldr	r2, [pc, #44]	@ (8003174 <HAL_UART_MspDeInit+0x3c>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d10f      	bne.n	800316a <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800314a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800314e:	f7ff ff19 	bl	8002f84 <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, USARTx_RX_Pin|USARTx_TX_Pin);
 8003152:	21c0      	movs	r1, #192	@ 0xc0
 8003154:	4808      	ldr	r0, [pc, #32]	@ (8003178 <HAL_UART_MspDeInit+0x40>)
 8003156:	f002 fb65 	bl	8005824 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800315e:	4618      	mov	r0, r3
 8003160:	f001 fca4 	bl	8004aac <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8003164:	2024      	movs	r0, #36	@ 0x24
 8003166:	f001 fbea 	bl	800493e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 800316a:	bf00      	nop
 800316c:	3708      	adds	r7, #8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	40013800 	.word	0x40013800
 8003178:	48000400 	.word	0x48000400

0800317c <LL_APB2_GRP1_ForceReset>:
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 8003184:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003188:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800318a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4313      	orrs	r3, r2
 8003192:	640b      	str	r3, [r1, #64]	@ 0x40
}
 8003194:	bf00      	nop
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	bc80      	pop	{r7}
 800319c:	4770      	bx	lr

0800319e <LL_APB2_GRP1_ReleaseReset>:
{
 800319e:	b480      	push	{r7}
 80031a0:	b083      	sub	sp, #12
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 80031a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	43db      	mvns	r3, r3
 80031b0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80031b4:	4013      	ands	r3, r2
 80031b6:	640b      	str	r3, [r1, #64]	@ 0x40
}
 80031b8:	bf00      	nop
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	bc80      	pop	{r7}
 80031c0:	4770      	bx	lr
	...

080031c4 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80031cc:	4b06      	ldr	r3, [pc, #24]	@ (80031e8 <LL_EXTI_EnableIT_0_31+0x24>)
 80031ce:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80031d2:	4905      	ldr	r1, [pc, #20]	@ (80031e8 <LL_EXTI_EnableIT_0_31+0x24>)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 80031dc:	bf00      	nop
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bc80      	pop	{r7}
 80031e4:	4770      	bx	lr
 80031e6:	bf00      	nop
 80031e8:	58000800 	.word	0x58000800

080031ec <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 80031f4:	4a07      	ldr	r2, [pc, #28]	@ (8003214 <vcom_Init+0x28>)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 80031fa:	f7fe fbed 	bl	80019d8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80031fe:	f7ff fed3 	bl	8002fa8 <MX_USART1_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_26);
 8003202:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8003206:	f7ff ffdd 	bl	80031c4 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 800320a:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 800320c:	4618      	mov	r0, r3
 800320e:	3708      	adds	r7, #8
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	20000368 	.word	0x20000368

08003218 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 800321c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8003220:	f7ff ffac 	bl	800317c <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 8003224:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8003228:	f7ff ffb9 	bl	800319e <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 800322c:	4804      	ldr	r0, [pc, #16]	@ (8003240 <vcom_DeInit+0x28>)
 800322e:	f7ff ff83 	bl	8003138 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8003232:	200f      	movs	r0, #15
 8003234:	f001 fb83 	bl	800493e <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 8003238:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 800323a:	4618      	mov	r0, r3
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	20000270 	.word	0x20000270

08003244 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	460b      	mov	r3, r1
 800324e:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8003250:	887b      	ldrh	r3, [r7, #2]
 8003252:	461a      	mov	r2, r3
 8003254:	6879      	ldr	r1, [r7, #4]
 8003256:	4804      	ldr	r0, [pc, #16]	@ (8003268 <vcom_Trace_DMA+0x24>)
 8003258:	f005 ff52 	bl	8009100 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 800325c:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 800325e:	4618      	mov	r0, r3
 8003260:	3708      	adds	r7, #8
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	20000270 	.word	0x20000270

0800326c <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8003274:	4a19      	ldr	r2, [pc, #100]	@ (80032dc <vcom_ReceiveInit+0x70>)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 800327a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800327e:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 8003280:	f107 0308 	add.w	r3, r7, #8
 8003284:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003288:	4815      	ldr	r0, [pc, #84]	@ (80032e0 <vcom_ReceiveInit+0x74>)
 800328a:	f007 ff00 	bl	800b08e <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 800328e:	bf00      	nop
 8003290:	4b13      	ldr	r3, [pc, #76]	@ (80032e0 <vcom_ReceiveInit+0x74>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	69db      	ldr	r3, [r3, #28]
 8003296:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800329a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800329e:	d0f7      	beq.n	8003290 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 80032a0:	bf00      	nop
 80032a2:	4b0f      	ldr	r3, [pc, #60]	@ (80032e0 <vcom_ReceiveInit+0x74>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	69db      	ldr	r3, [r3, #28]
 80032a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80032b0:	d1f7      	bne.n	80032a2 <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 80032b2:	4b0b      	ldr	r3, [pc, #44]	@ (80032e0 <vcom_ReceiveInit+0x74>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	689a      	ldr	r2, [r3, #8]
 80032b8:	4b09      	ldr	r3, [pc, #36]	@ (80032e0 <vcom_ReceiveInit+0x74>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 80032c0:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 80032c2:	4807      	ldr	r0, [pc, #28]	@ (80032e0 <vcom_ReceiveInit+0x74>)
 80032c4:	f007 ff3e 	bl	800b144 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 80032c8:	2201      	movs	r2, #1
 80032ca:	4906      	ldr	r1, [pc, #24]	@ (80032e4 <vcom_ReceiveInit+0x78>)
 80032cc:	4804      	ldr	r0, [pc, #16]	@ (80032e0 <vcom_ReceiveInit+0x74>)
 80032ce:	f005 fecb 	bl	8009068 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 80032d2:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3710      	adds	r7, #16
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	2000036c 	.word	0x2000036c
 80032e0:	20000270 	.word	0x20000270
 80032e4:	20000364 	.word	0x20000364

080032e8 <vcom_Resume>:

void vcom_Resume(void)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80032ec:	4808      	ldr	r0, [pc, #32]	@ (8003310 <vcom_Resume+0x28>)
 80032ee:	f005 fe6a 	bl	8008fc6 <HAL_UART_Init>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d001      	beq.n	80032fc <vcom_Resume+0x14>
  {
    Error_Handler();
 80032f8:	f7fe ffbe 	bl	8002278 <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80032fc:	4805      	ldr	r0, [pc, #20]	@ (8003314 <vcom_Resume+0x2c>)
 80032fe:	f001 fb2d 	bl	800495c <HAL_DMA_Init>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d001      	beq.n	800330c <vcom_Resume+0x24>
  {
    Error_Handler();
 8003308:	f7fe ffb6 	bl	8002278 <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 800330c:	bf00      	nop
 800330e:	bd80      	pop	{r7, pc}
 8003310:	20000270 	.word	0x20000270
 8003314:	20000304 	.word	0x20000304

08003318 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART1)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a05      	ldr	r2, [pc, #20]	@ (800333c <HAL_UART_TxCpltCallback+0x24>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d103      	bne.n	8003332 <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 800332a:	4b05      	ldr	r3, [pc, #20]	@ (8003340 <HAL_UART_TxCpltCallback+0x28>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	2000      	movs	r0, #0
 8003330:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8003332:	bf00      	nop
 8003334:	3708      	adds	r7, #8
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	40013800 	.word	0x40013800
 8003340:	20000368 	.word	0x20000368

08003344 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART1)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a0d      	ldr	r2, [pc, #52]	@ (8003388 <HAL_UART_RxCpltCallback+0x44>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d113      	bne.n	800337e <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 8003356:	4b0d      	ldr	r3, [pc, #52]	@ (800338c <HAL_UART_RxCpltCallback+0x48>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00a      	beq.n	8003374 <HAL_UART_RxCpltCallback+0x30>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003364:	2b00      	cmp	r3, #0
 8003366:	d105      	bne.n	8003374 <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 8003368:	4b08      	ldr	r3, [pc, #32]	@ (800338c <HAL_UART_RxCpltCallback+0x48>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2200      	movs	r2, #0
 800336e:	2101      	movs	r1, #1
 8003370:	4807      	ldr	r0, [pc, #28]	@ (8003390 <HAL_UART_RxCpltCallback+0x4c>)
 8003372:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8003374:	2201      	movs	r2, #1
 8003376:	4906      	ldr	r1, [pc, #24]	@ (8003390 <HAL_UART_RxCpltCallback+0x4c>)
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f005 fe75 	bl	8009068 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 800337e:	bf00      	nop
 8003380:	3708      	adds	r7, #8
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	40013800 	.word	0x40013800
 800338c:	2000036c 	.word	0x2000036c
 8003390:	20000364 	.word	0x20000364

08003394 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003394:	480d      	ldr	r0, [pc, #52]	@ (80033cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003396:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003398:	f7ff fb81 	bl	8002a9e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800339c:	480c      	ldr	r0, [pc, #48]	@ (80033d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800339e:	490d      	ldr	r1, [pc, #52]	@ (80033d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80033a0:	4a0d      	ldr	r2, [pc, #52]	@ (80033d8 <LoopForever+0xe>)
  movs r3, #0
 80033a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033a4:	e002      	b.n	80033ac <LoopCopyDataInit>

080033a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033aa:	3304      	adds	r3, #4

080033ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033b0:	d3f9      	bcc.n	80033a6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033b2:	4a0a      	ldr	r2, [pc, #40]	@ (80033dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80033b4:	4c0a      	ldr	r4, [pc, #40]	@ (80033e0 <LoopForever+0x16>)
  movs r3, #0
 80033b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033b8:	e001      	b.n	80033be <LoopFillZerobss>

080033ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033bc:	3204      	adds	r2, #4

080033be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033c0:	d3fb      	bcc.n	80033ba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80033c2:	f01b fc97 	bl	801ecf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80033c6:	f7fe feeb 	bl	80021a0 <main>

080033ca <LoopForever>:

LoopForever:
    b LoopForever
 80033ca:	e7fe      	b.n	80033ca <LoopForever>
  ldr   r0, =_estack
 80033cc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80033d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80033d4:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 80033d8:	0801ff04 	.word	0x0801ff04
  ldr r2, =_sbss
 80033dc:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 80033e0:	20002270 	.word	0x20002270

080033e4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80033e4:	e7fe      	b.n	80033e4 <ADC_IRQHandler>

080033e6 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 80033e6:	b580      	push	{r7, lr}
 80033e8:	b086      	sub	sp, #24
 80033ea:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 80033ec:	1d3b      	adds	r3, r7, #4
 80033ee:	2200      	movs	r2, #0
 80033f0:	601a      	str	r2, [r3, #0]
 80033f2:	605a      	str	r2, [r3, #4]
 80033f4:	609a      	str	r2, [r3, #8]
 80033f6:	60da      	str	r2, [r3, #12]
 80033f8:	611a      	str	r2, [r3, #16]
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 80033fa:	2310      	movs	r3, #16
 80033fc:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80033fe:	2301      	movs	r3, #1
 8003400:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8003402:	2300      	movs	r3, #0
 8003404:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003406:	2303      	movs	r3, #3
 8003408:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 800340a:	1d3b      	adds	r3, r7, #4
 800340c:	4619      	mov	r1, r3
 800340e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003412:	f002 f8a7 	bl	8005564 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8003416:	2320      	movs	r3, #32
 8003418:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 800341a:	1d3b      	adds	r3, r7, #4
 800341c:	4619      	mov	r1, r3
 800341e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003422:	f002 f89f 	bl	8005564 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8003426:	2200      	movs	r2, #0
 8003428:	2120      	movs	r1, #32
 800342a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800342e:	f002 fac7 	bl	80059c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8003432:	2200      	movs	r2, #0
 8003434:	2110      	movs	r1, #16
 8003436:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800343a:	f002 fac1 	bl	80059c0 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 800343e:	2300      	movs	r3, #0
}
 8003440:	4618      	mov	r0, r3
 8003442:	3718      	adds	r7, #24
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	4603      	mov	r3, r0
 8003450:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8003452:	79fb      	ldrb	r3, [r7, #7]
 8003454:	2b03      	cmp	r3, #3
 8003456:	d83f      	bhi.n	80034d8 <BSP_RADIO_ConfigRFSwitch+0x90>
 8003458:	a201      	add	r2, pc, #4	@ (adr r2, 8003460 <BSP_RADIO_ConfigRFSwitch+0x18>)
 800345a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800345e:	bf00      	nop
 8003460:	08003471 	.word	0x08003471
 8003464:	0800348b 	.word	0x0800348b
 8003468:	080034a5 	.word	0x080034a5
 800346c:	080034bf 	.word	0x080034bf
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8003470:	2200      	movs	r2, #0
 8003472:	2110      	movs	r1, #16
 8003474:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003478:	f002 faa2 	bl	80059c0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 800347c:	2200      	movs	r2, #0
 800347e:	2120      	movs	r1, #32
 8003480:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003484:	f002 fa9c 	bl	80059c0 <HAL_GPIO_WritePin>
      break;      
 8003488:	e027      	b.n	80034da <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 800348a:	2201      	movs	r2, #1
 800348c:	2110      	movs	r1, #16
 800348e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003492:	f002 fa95 	bl	80059c0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8003496:	2200      	movs	r2, #0
 8003498:	2120      	movs	r1, #32
 800349a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800349e:	f002 fa8f 	bl	80059c0 <HAL_GPIO_WritePin>
      break;
 80034a2:	e01a      	b.n	80034da <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 80034a4:	2201      	movs	r2, #1
 80034a6:	2110      	movs	r1, #16
 80034a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80034ac:	f002 fa88 	bl	80059c0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 80034b0:	2201      	movs	r2, #1
 80034b2:	2120      	movs	r1, #32
 80034b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80034b8:	f002 fa82 	bl	80059c0 <HAL_GPIO_WritePin>
      break;
 80034bc:	e00d      	b.n	80034da <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80034be:	2200      	movs	r2, #0
 80034c0:	2110      	movs	r1, #16
 80034c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80034c6:	f002 fa7b 	bl	80059c0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 80034ca:	2201      	movs	r2, #1
 80034cc:	2120      	movs	r1, #32
 80034ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80034d2:	f002 fa75 	bl	80059c0 <HAL_GPIO_WritePin>
      break;
 80034d6:	e000      	b.n	80034da <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 80034d8:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 80034da:	2300      	movs	r3, #0
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3708      	adds	r7, #8
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 80034e4:	b480      	push	{r7}
 80034e6:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 80034e8:	2302      	movs	r3, #2
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bc80      	pop	{r7}
 80034f0:	4770      	bx	lr

080034f2 <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 80034f2:	b480      	push	{r7}
 80034f4:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 80034f6:	2301      	movs	r3, #1
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bc80      	pop	{r7}
 80034fe:	4770      	bx	lr

08003500 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8003500:	b480      	push	{r7}
 8003502:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8003504:	2301      	movs	r3, #1
}
 8003506:	4618      	mov	r0, r3
 8003508:	46bd      	mov	sp, r7
 800350a:	bc80      	pop	{r7}
 800350c:	4770      	bx	lr

0800350e <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 800350e:	b480      	push	{r7}
 8003510:	b085      	sub	sp, #20
 8003512:	af00      	add	r7, sp, #0
 8003514:	4603      	mov	r3, r0
 8003516:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8003518:	79fb      	ldrb	r3, [r7, #7]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d102      	bne.n	8003524 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 800351e:	230f      	movs	r3, #15
 8003520:	60fb      	str	r3, [r7, #12]
 8003522:	e001      	b.n	8003528 <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8003524:	2316      	movs	r3, #22
 8003526:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003528:	68fb      	ldr	r3, [r7, #12]
}
 800352a:	4618      	mov	r0, r3
 800352c:	3714      	adds	r7, #20
 800352e:	46bd      	mov	sp, r7
 8003530:	bc80      	pop	{r7}
 8003532:	4770      	bx	lr

08003534 <LL_DBGMCU_DisableDBGSleepMode>:
{
 8003534:	b480      	push	{r7}
 8003536:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8003538:	4b04      	ldr	r3, [pc, #16]	@ (800354c <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	4a03      	ldr	r2, [pc, #12]	@ (800354c <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 800353e:	f023 0301 	bic.w	r3, r3, #1
 8003542:	6053      	str	r3, [r2, #4]
}
 8003544:	bf00      	nop
 8003546:	46bd      	mov	sp, r7
 8003548:	bc80      	pop	{r7}
 800354a:	4770      	bx	lr
 800354c:	e0042000 	.word	0xe0042000

08003550 <LL_DBGMCU_DisableDBGStopMode>:
{
 8003550:	b480      	push	{r7}
 8003552:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8003554:	4b04      	ldr	r3, [pc, #16]	@ (8003568 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	4a03      	ldr	r2, [pc, #12]	@ (8003568 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 800355a:	f023 0302 	bic.w	r3, r3, #2
 800355e:	6053      	str	r3, [r2, #4]
}
 8003560:	bf00      	nop
 8003562:	46bd      	mov	sp, r7
 8003564:	bc80      	pop	{r7}
 8003566:	4770      	bx	lr
 8003568:	e0042000 	.word	0xe0042000

0800356c <LL_DBGMCU_DisableDBGStandbyMode>:
{
 800356c:	b480      	push	{r7}
 800356e:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8003570:	4b04      	ldr	r3, [pc, #16]	@ (8003584 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	4a03      	ldr	r2, [pc, #12]	@ (8003584 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8003576:	f023 0304 	bic.w	r3, r3, #4
 800357a:	6053      	str	r3, [r2, #4]
}
 800357c:	bf00      	nop
 800357e:	46bd      	mov	sp, r7
 8003580:	bc80      	pop	{r7}
 8003582:	4770      	bx	lr
 8003584:	e0042000 	.word	0xe0042000

08003588 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800358e:	2300      	movs	r3, #0
 8003590:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003592:	2003      	movs	r0, #3
 8003594:	f001 f9a0 	bl	80048d8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003598:	f004 f9b6 	bl	8007908 <HAL_RCC_GetHCLKFreq>
 800359c:	4603      	mov	r3, r0
 800359e:	4a09      	ldr	r2, [pc, #36]	@ (80035c4 <HAL_Init+0x3c>)
 80035a0:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80035a2:	200f      	movs	r0, #15
 80035a4:	f7ff f994 	bl	80028d0 <HAL_InitTick>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d002      	beq.n	80035b4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	71fb      	strb	r3, [r7, #7]
 80035b2:	e001      	b.n	80035b8 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80035b4:	f7fe ff57 	bl	8002466 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80035b8:	79fb      	ldrb	r3, [r7, #7]
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3708      	adds	r7, #8
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	20000004 	.word	0x20000004

080035c8 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80035c8:	b480      	push	{r7}
 80035ca:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80035cc:	4b04      	ldr	r3, [pc, #16]	@ (80035e0 <HAL_SuspendTick+0x18>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a03      	ldr	r2, [pc, #12]	@ (80035e0 <HAL_SuspendTick+0x18>)
 80035d2:	f023 0302 	bic.w	r3, r3, #2
 80035d6:	6013      	str	r3, [r2, #0]
}
 80035d8:	bf00      	nop
 80035da:	46bd      	mov	sp, r7
 80035dc:	bc80      	pop	{r7}
 80035de:	4770      	bx	lr
 80035e0:	e000e010 	.word	0xe000e010

080035e4 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80035e4:	b480      	push	{r7}
 80035e6:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80035e8:	4b04      	ldr	r3, [pc, #16]	@ (80035fc <HAL_ResumeTick+0x18>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a03      	ldr	r2, [pc, #12]	@ (80035fc <HAL_ResumeTick+0x18>)
 80035ee:	f043 0302 	orr.w	r3, r3, #2
 80035f2:	6013      	str	r3, [r2, #0]
}
 80035f4:	bf00      	nop
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bc80      	pop	{r7}
 80035fa:	4770      	bx	lr
 80035fc:	e000e010 	.word	0xe000e010

08003600 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8003600:	b480      	push	{r7}
 8003602:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8003604:	4b02      	ldr	r3, [pc, #8]	@ (8003610 <HAL_GetUIDw0+0x10>)
 8003606:	681b      	ldr	r3, [r3, #0]
}
 8003608:	4618      	mov	r0, r3
 800360a:	46bd      	mov	sp, r7
 800360c:	bc80      	pop	{r7}
 800360e:	4770      	bx	lr
 8003610:	1fff7590 	.word	0x1fff7590

08003614 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8003614:	b480      	push	{r7}
 8003616:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8003618:	4b02      	ldr	r3, [pc, #8]	@ (8003624 <HAL_GetUIDw1+0x10>)
 800361a:	681b      	ldr	r3, [r3, #0]
}
 800361c:	4618      	mov	r0, r3
 800361e:	46bd      	mov	sp, r7
 8003620:	bc80      	pop	{r7}
 8003622:	4770      	bx	lr
 8003624:	1fff7594 	.word	0x1fff7594

08003628 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8003628:	b480      	push	{r7}
 800362a:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 800362c:	4b02      	ldr	r3, [pc, #8]	@ (8003638 <HAL_GetUIDw2+0x10>)
 800362e:	681b      	ldr	r3, [r3, #0]
}
 8003630:	4618      	mov	r0, r3
 8003632:	46bd      	mov	sp, r7
 8003634:	bc80      	pop	{r7}
 8003636:	4770      	bx	lr
 8003638:	1fff7598 	.word	0x1fff7598

0800363c <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGSleepMode();
 8003640:	f7ff ff78 	bl	8003534 <LL_DBGMCU_DisableDBGSleepMode>
}
 8003644:	bf00      	nop
 8003646:	bd80      	pop	{r7, pc}

08003648 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStopMode();
 800364c:	f7ff ff80 	bl	8003550 <LL_DBGMCU_DisableDBGStopMode>
}
 8003650:	bf00      	nop
 8003652:	bd80      	pop	{r7, pc}

08003654 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStandbyMode();
 8003658:	f7ff ff88 	bl	800356c <LL_DBGMCU_DisableDBGStandbyMode>
}
 800365c:	bf00      	nop
 800365e:	bd80      	pop	{r7, pc}

08003660 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	431a      	orrs	r2, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	601a      	str	r2, [r3, #0]
}
 800367a:	bf00      	nop
 800367c:	370c      	adds	r7, #12
 800367e:	46bd      	mov	sp, r7
 8003680:	bc80      	pop	{r7}
 8003682:	4770      	bx	lr

08003684 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003694:	4618      	mov	r0, r3
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	bc80      	pop	{r7}
 800369c:	4770      	bx	lr

0800369e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800369e:	b480      	push	{r7}
 80036a0:	b085      	sub	sp, #20
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	60f8      	str	r0, [r7, #12]
 80036a6:	60b9      	str	r1, [r7, #8]
 80036a8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	695a      	ldr	r2, [r3, #20]
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	f003 0304 	and.w	r3, r3, #4
 80036b4:	2107      	movs	r1, #7
 80036b6:	fa01 f303 	lsl.w	r3, r1, r3
 80036ba:	43db      	mvns	r3, r3
 80036bc:	401a      	ands	r2, r3
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	f003 0304 	and.w	r3, r3, #4
 80036c4:	6879      	ldr	r1, [r7, #4]
 80036c6:	fa01 f303 	lsl.w	r3, r1, r3
 80036ca:	431a      	orrs	r2, r3
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80036d0:	bf00      	nop
 80036d2:	3714      	adds	r7, #20
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bc80      	pop	{r7}
 80036d8:	4770      	bx	lr

080036da <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80036da:	b480      	push	{r7}
 80036dc:	b083      	sub	sp, #12
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
 80036e2:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	695a      	ldr	r2, [r3, #20]
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	f003 0304 	and.w	r3, r3, #4
 80036ee:	2107      	movs	r1, #7
 80036f0:	fa01 f303 	lsl.w	r3, r1, r3
 80036f4:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80036fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003700:	4618      	mov	r0, r3
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	bc80      	pop	{r7}
 8003708:	4770      	bx	lr

0800370a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800370a:	b480      	push	{r7}
 800370c:	b083      	sub	sp, #12
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800371a:	2b00      	cmp	r3, #0
 800371c:	d101      	bne.n	8003722 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800371e:	2301      	movs	r3, #1
 8003720:	e000      	b.n	8003724 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003722:	2300      	movs	r3, #0
}
 8003724:	4618      	mov	r0, r3
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	bc80      	pop	{r7}
 800372c:	4770      	bx	lr

0800372e <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800372e:	b480      	push	{r7}
 8003730:	b085      	sub	sp, #20
 8003732:	af00      	add	r7, sp, #0
 8003734:	60f8      	str	r0, [r7, #12]
 8003736:	60b9      	str	r1, [r7, #8]
 8003738:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	f003 031f 	and.w	r3, r3, #31
 8003744:	210f      	movs	r1, #15
 8003746:	fa01 f303 	lsl.w	r3, r1, r3
 800374a:	43db      	mvns	r3, r3
 800374c:	401a      	ands	r2, r3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	0e9b      	lsrs	r3, r3, #26
 8003752:	f003 010f 	and.w	r1, r3, #15
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	f003 031f 	and.w	r3, r3, #31
 800375c:	fa01 f303 	lsl.w	r3, r1, r3
 8003760:	431a      	orrs	r2, r3
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003766:	bf00      	nop
 8003768:	3714      	adds	r7, #20
 800376a:	46bd      	mov	sp, r7
 800376c:	bc80      	pop	{r7}
 800376e:	4770      	bx	lr

08003770 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003784:	431a      	orrs	r2, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800378a:	bf00      	nop
 800378c:	370c      	adds	r7, #12
 800378e:	46bd      	mov	sp, r7
 8003790:	bc80      	pop	{r7}
 8003792:	4770      	bx	lr

08003794 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80037a8:	43db      	mvns	r3, r3
 80037aa:	401a      	ands	r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80037b0:	bf00      	nop
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bc80      	pop	{r7}
 80037b8:	4770      	bx	lr

080037ba <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80037ba:	b480      	push	{r7}
 80037bc:	b085      	sub	sp, #20
 80037be:	af00      	add	r7, sp, #0
 80037c0:	60f8      	str	r0, [r7, #12]
 80037c2:	60b9      	str	r1, [r7, #8]
 80037c4:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	695a      	ldr	r2, [r3, #20]
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	021b      	lsls	r3, r3, #8
 80037ce:	43db      	mvns	r3, r3
 80037d0:	401a      	ands	r2, r3
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	0219      	lsls	r1, r3, #8
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	400b      	ands	r3, r1
 80037da:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 80037de:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80037e2:	431a      	orrs	r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80037e8:	bf00      	nop
 80037ea:	3714      	adds	r7, #20
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bc80      	pop	{r7}
 80037f0:	4770      	bx	lr

080037f2 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80037f2:	b480      	push	{r7}
 80037f4:	b083      	sub	sp, #12
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003802:	f023 0317 	bic.w	r3, r3, #23
 8003806:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800380e:	bf00      	nop
 8003810:	370c      	adds	r7, #12
 8003812:	46bd      	mov	sp, r7
 8003814:	bc80      	pop	{r7}
 8003816:	4770      	bx	lr

08003818 <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003828:	f023 0317 	bic.w	r3, r3, #23
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	6093      	str	r3, [r2, #8]
}
 8003830:	bf00      	nop
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	bc80      	pop	{r7}
 8003838:	4770      	bx	lr

0800383a <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800383a:	b480      	push	{r7}
 800383c:	b083      	sub	sp, #12
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800384a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800384e:	d101      	bne.n	8003854 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003850:	2301      	movs	r3, #1
 8003852:	e000      	b.n	8003856 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	370c      	adds	r7, #12
 800385a:	46bd      	mov	sp, r7
 800385c:	bc80      	pop	{r7}
 800385e:	4770      	bx	lr

08003860 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003870:	f023 0317 	bic.w	r3, r3, #23
 8003874:	f043 0201 	orr.w	r2, r3, #1
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800387c:	bf00      	nop
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	bc80      	pop	{r7}
 8003884:	4770      	bx	lr

08003886 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003886:	b480      	push	{r7}
 8003888:	b083      	sub	sp, #12
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003896:	f023 0317 	bic.w	r3, r3, #23
 800389a:	f043 0202 	orr.w	r2, r3, #2
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80038a2:	bf00      	nop
 80038a4:	370c      	adds	r7, #12
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bc80      	pop	{r7}
 80038aa:	4770      	bx	lr

080038ac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f003 0301 	and.w	r3, r3, #1
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d101      	bne.n	80038c4 <LL_ADC_IsEnabled+0x18>
 80038c0:	2301      	movs	r3, #1
 80038c2:	e000      	b.n	80038c6 <LL_ADC_IsEnabled+0x1a>
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	370c      	adds	r7, #12
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bc80      	pop	{r7}
 80038ce:	4770      	bx	lr

080038d0 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	f003 0302 	and.w	r3, r3, #2
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d101      	bne.n	80038e8 <LL_ADC_IsDisableOngoing+0x18>
 80038e4:	2301      	movs	r3, #1
 80038e6:	e000      	b.n	80038ea <LL_ADC_IsDisableOngoing+0x1a>
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	370c      	adds	r7, #12
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bc80      	pop	{r7}
 80038f2:	4770      	bx	lr

080038f4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003904:	f023 0317 	bic.w	r3, r3, #23
 8003908:	f043 0204 	orr.w	r2, r3, #4
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003910:	bf00      	nop
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	bc80      	pop	{r7}
 8003918:	4770      	bx	lr

0800391a <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800391a:	b480      	push	{r7}
 800391c:	b083      	sub	sp, #12
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800392a:	f023 0317 	bic.w	r3, r3, #23
 800392e:	f043 0210 	orr.w	r2, r3, #16
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003936:	bf00      	nop
 8003938:	370c      	adds	r7, #12
 800393a:	46bd      	mov	sp, r7
 800393c:	bc80      	pop	{r7}
 800393e:	4770      	bx	lr

08003940 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f003 0304 	and.w	r3, r3, #4
 8003950:	2b04      	cmp	r3, #4
 8003952:	d101      	bne.n	8003958 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003954:	2301      	movs	r3, #1
 8003956:	e000      	b.n	800395a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003958:	2300      	movs	r3, #0
}
 800395a:	4618      	mov	r0, r3
 800395c:	370c      	adds	r7, #12
 800395e:	46bd      	mov	sp, r7
 8003960:	bc80      	pop	{r7}
 8003962:	4770      	bx	lr

08003964 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b088      	sub	sp, #32
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800396c:	2300      	movs	r3, #0
 800396e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8003970:	2300      	movs	r3, #0
 8003972:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8003974:	2300      	movs	r3, #0
 8003976:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003978:	2300      	movs	r3, #0
 800397a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d101      	bne.n	8003986 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e17e      	b.n	8003c84 <HAL_ADC_Init+0x320>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003990:	2b00      	cmp	r3, #0
 8003992:	d109      	bne.n	80039a8 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f7fd ff57 	bl	8001848 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4618      	mov	r0, r3
 80039ae:	f7ff ff44 	bl	800383a <LL_ADC_IsInternalRegulatorEnabled>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d115      	bne.n	80039e4 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4618      	mov	r0, r3
 80039be:	f7ff ff18 	bl	80037f2 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80039c2:	4b9e      	ldr	r3, [pc, #632]	@ (8003c3c <HAL_ADC_Init+0x2d8>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	099b      	lsrs	r3, r3, #6
 80039c8:	4a9d      	ldr	r2, [pc, #628]	@ (8003c40 <HAL_ADC_Init+0x2dc>)
 80039ca:	fba2 2303 	umull	r2, r3, r2, r3
 80039ce:	099b      	lsrs	r3, r3, #6
 80039d0:	3301      	adds	r3, #1
 80039d2:	005b      	lsls	r3, r3, #1
 80039d4:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80039d6:	e002      	b.n	80039de <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	3b01      	subs	r3, #1
 80039dc:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d1f9      	bne.n	80039d8 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4618      	mov	r0, r3
 80039ea:	f7ff ff26 	bl	800383a <LL_ADC_IsInternalRegulatorEnabled>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d10d      	bne.n	8003a10 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039f8:	f043 0210 	orr.w	r2, r3, #16
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a04:	f043 0201 	orr.w	r2, r3, #1
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7ff ff93 	bl	8003940 <LL_ADC_REG_IsConversionOngoing>
 8003a1a:	6138      	str	r0, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a20:	f003 0310 	and.w	r3, r3, #16
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	f040 8124 	bne.w	8003c72 <HAL_ADC_Init+0x30e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	f040 8120 	bne.w	8003c72 <HAL_ADC_Init+0x30e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a36:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003a3a:	f043 0202 	orr.w	r2, r3, #2
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4618      	mov	r0, r3
 8003a48:	f7ff ff30 	bl	80038ac <LL_ADC_IsEnabled>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	f040 80a7 	bne.w	8003ba2 <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	7e1b      	ldrb	r3, [r3, #24]
 8003a5c:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003a5e:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	7e5b      	ldrb	r3, [r3, #25]
 8003a64:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003a66:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	7e9b      	ldrb	r3, [r3, #26]
 8003a6c:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003a6e:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003a74:	2a00      	cmp	r2, #0
 8003a76:	d002      	beq.n	8003a7e <HAL_ADC_Init+0x11a>
 8003a78:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003a7c:	e000      	b.n	8003a80 <HAL_ADC_Init+0x11c>
 8003a7e:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003a80:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003a86:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	691b      	ldr	r3, [r3, #16]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	da04      	bge.n	8003a9a <HAL_ADC_Init+0x136>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	691b      	ldr	r3, [r3, #16]
 8003a94:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003a98:	e001      	b.n	8003a9e <HAL_ADC_Init+0x13a>
 8003a9a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                           |
 8003a9e:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003aa6:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003aa8:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003aaa:	69ba      	ldr	r2, [r7, #24]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d114      	bne.n	8003ae4 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	7e9b      	ldrb	r3, [r3, #26]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d104      	bne.n	8003acc <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ac8:	61bb      	str	r3, [r7, #24]
 8003aca:	e00b      	b.n	8003ae4 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ad0:	f043 0220 	orr.w	r2, r3, #32
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003adc:	f043 0201 	orr.w	r2, r3, #1
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d009      	beq.n	8003b00 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af0:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003af8:	4313      	orrs	r3, r2
 8003afa:	69ba      	ldr	r2, [r7, #24]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	f423 33fe 	bic.w	r3, r3, #130048	@ 0x1fc00
 8003b0a:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	6812      	ldr	r2, [r2, #0]
 8003b12:	69b9      	ldr	r1, [r7, #24]
 8003b14:	430b      	orrs	r3, r1
 8003b16:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003b24:	4313      	orrs	r3, r2
 8003b26:	697a      	ldr	r2, [r7, #20]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d111      	bne.n	8003b5a <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003b42:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003b48:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8003b4e:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	f043 0301 	orr.w	r3, r3, #1
 8003b58:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	691a      	ldr	r2, [r3, #16]
 8003b60:	4b38      	ldr	r3, [pc, #224]	@ (8003c44 <HAL_ADC_Init+0x2e0>)
 8003b62:	4013      	ands	r3, r2
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	6812      	ldr	r2, [r2, #0]
 8003b68:	6979      	ldr	r1, [r7, #20]
 8003b6a:	430b      	orrs	r3, r1
 8003b6c:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003b76:	d014      	beq.n	8003ba2 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003b7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b80:	d00f      	beq.n	8003ba2 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003b86:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003b8a:	d00a      	beq.n	8003ba2 <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8003b8c:	4b2e      	ldr	r3, [pc, #184]	@ (8003c48 <HAL_ADC_Init+0x2e4>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8003b9c:	492a      	ldr	r1, [pc, #168]	@ (8003c48 <HAL_ADC_Init+0x2e4>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6818      	ldr	r0, [r3, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003baa:	461a      	mov	r2, r3
 8003bac:	2100      	movs	r1, #0
 8003bae:	f7ff fd76 	bl	800369e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6818      	ldr	r0, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bba:	461a      	mov	r2, r3
 8003bbc:	4923      	ldr	r1, [pc, #140]	@ (8003c4c <HAL_ADC_Init+0x2e8>)
 8003bbe:	f7ff fd6e 	bl	800369e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d108      	bne.n	8003bdc <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f062 020f 	orn	r2, r2, #15
 8003bd8:	629a      	str	r2, [r3, #40]	@ 0x28
 8003bda:	e017      	b.n	8003c0c <HAL_ADC_Init+0x2a8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	691b      	ldr	r3, [r3, #16]
 8003be0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003be4:	d112      	bne.n	8003c0c <HAL_ADC_Init+0x2a8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	69db      	ldr	r3, [r3, #28]
 8003bf0:	3b01      	subs	r3, #1
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	f003 031c 	and.w	r3, r3, #28
 8003bf8:	f06f 020f 	mvn.w	r2, #15
 8003bfc:	fa02 f103 	lsl.w	r1, r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	629a      	str	r2, [r3, #40]	@ 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2100      	movs	r1, #0
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7ff fd61 	bl	80036da <LL_ADC_GetSamplingTimeCommonChannels>
 8003c18:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d116      	bne.n	8003c50 <HAL_ADC_Init+0x2ec>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c2c:	f023 0303 	bic.w	r3, r3, #3
 8003c30:	f043 0201 	orr.w	r2, r3, #1
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	659a      	str	r2, [r3, #88]	@ 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003c38:	e023      	b.n	8003c82 <HAL_ADC_Init+0x31e>
 8003c3a:	bf00      	nop
 8003c3c:	20000004 	.word	0x20000004
 8003c40:	053e2d63 	.word	0x053e2d63
 8003c44:	1ffffc02 	.word	0x1ffffc02
 8003c48:	40012708 	.word	0x40012708
 8003c4c:	03ffff04 	.word	0x03ffff04
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c54:	f023 0312 	bic.w	r3, r3, #18
 8003c58:	f043 0210 	orr.w	r2, r3, #16
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c64:	f043 0201 	orr.w	r2, r3, #1
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003c70:	e007      	b.n	8003c82 <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c76:	f043 0210 	orr.w	r2, r3, #16
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 8003c82:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3720      	adds	r7, #32
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d101      	bne.n	8003c9e <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e07a      	b.n	8003d94 <HAL_ADC_DeInit+0x108>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ca2:	f043 0202 	orr.w	r2, r3, #2
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f000 face 	bl	800424c <ADC_ConversionStop>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003cb4:	7bfb      	ldrb	r3, [r7, #15]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d10f      	bne.n	8003cda <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f000 fb92 	bl	80043e4 <ADC_Disable>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003cc4:	7bfb      	ldrb	r3, [r7, #15]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d102      	bne.n	8003cd0 <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f7ff fd9f 	bl	8003818 <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	6812      	ldr	r2, [r2, #0]
 8003ce4:	f423 7367 	bic.w	r3, r3, #924	@ 0x39c
 8003ce8:	f023 0303 	bic.w	r3, r3, #3
 8003cec:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f240 329f 	movw	r2, #927	@ 0x39f
 8003cf6:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68d9      	ldr	r1, [r3, #12]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	4b26      	ldr	r3, [pc, #152]	@ (8003d9c <HAL_ADC_DeInit+0x110>)
 8003d04:	400b      	ands	r3, r1
 8003d06:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	691a      	ldr	r2, [r3, #16]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f022 4240 	bic.w	r2, r2, #3221225472	@ 0xc0000000
 8003d16:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	695a      	ldr	r2, [r3, #20]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f022 0207 	bic.w	r2, r2, #7
 8003d26:	615a      	str	r2, [r3, #20]

  /* Reset registers AWDxTR */
  hadc->Instance->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	6a1a      	ldr	r2, [r3, #32]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f002 22f0 	and.w	r2, r2, #4026593280	@ 0xf000f000
 8003d36:	621a      	str	r2, [r3, #32]
  hadc->Instance->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f002 22f0 	and.w	r2, r2, #4026593280	@ 0xf000f000
 8003d46:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc->Instance->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f002 22f0 	and.w	r2, r2, #4026593280	@ 0xf000f000
 8003d56:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	2200      	movs	r2, #0
 8003d64:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 8003d66:	4b0e      	ldr	r3, [pc, #56]	@ (8003da0 <HAL_ADC_DeInit+0x114>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a0d      	ldr	r2, [pc, #52]	@ (8003da0 <HAL_ADC_DeInit+0x114>)
 8003d6c:	f023 73fe 	bic.w	r3, r3, #33292288	@ 0x1fc0000
 8003d70:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f7fd fd7c 	bl	8001870 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	659a      	str	r2, [r3, #88]	@ 0x58

  __HAL_UNLOCK(hadc);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 8003d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3710      	adds	r7, #16
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	833e0200 	.word	0x833e0200
 8003da0:	40012708 	.word	0x40012708

08003da4 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4618      	mov	r0, r3
 8003db2:	f7ff fdc5 	bl	8003940 <LL_ADC_REG_IsConversionOngoing>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d132      	bne.n	8003e22 <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d101      	bne.n	8003dca <HAL_ADC_Start+0x26>
 8003dc6:	2302      	movs	r3, #2
 8003dc8:	e02e      	b.n	8003e28 <HAL_ADC_Start+0x84>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 fa80 	bl	80042d8 <ADC_Enable>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003ddc:	7bfb      	ldrb	r3, [r7, #15]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d11a      	bne.n	8003e18 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003de6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003dea:	f023 0301 	bic.w	r3, r3, #1
 8003dee:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	221c      	movs	r2, #28
 8003e02:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4618      	mov	r0, r3
 8003e12:	f7ff fd6f 	bl	80038f4 <LL_ADC_REG_StartConversion>
 8003e16:	e006      	b.n	8003e26 <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8003e20:	e001      	b.n	8003e26 <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003e22:	2302      	movs	r3, #2
 8003e24:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 8003e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3710      	adds	r7, #16
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d101      	bne.n	8003e46 <HAL_ADC_Stop+0x16>
 8003e42:	2302      	movs	r3, #2
 8003e44:	e022      	b.n	8003e8c <HAL_ADC_Stop+0x5c>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f000 f9fc 	bl	800424c <ADC_ConversionStop>
 8003e54:	4603      	mov	r3, r0
 8003e56:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003e58:	7bfb      	ldrb	r3, [r7, #15]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d111      	bne.n	8003e82 <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 fac0 	bl	80043e4 <ADC_Disable>
 8003e64:	4603      	mov	r3, r0
 8003e66:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003e68:	7bfb      	ldrb	r3, [r7, #15]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d109      	bne.n	8003e82 <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e72:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e76:	f023 0301 	bic.w	r3, r3, #1
 8003e7a:	f043 0201 	orr.w	r2, r3, #1
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 8003e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3710      	adds	r7, #16
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}

08003e94 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	695b      	ldr	r3, [r3, #20]
 8003ea2:	2b08      	cmp	r3, #8
 8003ea4:	d102      	bne.n	8003eac <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8003ea6:	2308      	movs	r3, #8
 8003ea8:	60fb      	str	r3, [r7, #12]
 8003eaa:	e010      	b.n	8003ece <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	f003 0301 	and.w	r3, r3, #1
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d007      	beq.n	8003eca <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ebe:	f043 0220 	orr.w	r2, r3, #32
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e077      	b.n	8003fba <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8003eca:	2304      	movs	r3, #4
 8003ecc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003ece:	f7fe fd09 	bl	80028e4 <HAL_GetTick>
 8003ed2:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003ed4:	e021      	b.n	8003f1a <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003edc:	d01d      	beq.n	8003f1a <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003ede:	f7fe fd01 	bl	80028e4 <HAL_GetTick>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	683a      	ldr	r2, [r7, #0]
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d302      	bcc.n	8003ef4 <HAL_ADC_PollForConversion+0x60>
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d112      	bne.n	8003f1a <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	4013      	ands	r3, r2
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d10b      	bne.n	8003f1a <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f06:	f043 0204 	orr.w	r2, r3, #4
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	659a      	str	r2, [r3, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e04f      	b.n	8003fba <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	4013      	ands	r3, r2
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d0d6      	beq.n	8003ed6 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f2c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f7ff fbe6 	bl	800370a <LL_ADC_REG_IsTriggerSourceSWStart>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d031      	beq.n	8003fa8 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	7e9b      	ldrb	r3, [r3, #26]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d12d      	bne.n	8003fa8 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0308 	and.w	r3, r3, #8
 8003f56:	2b08      	cmp	r3, #8
 8003f58:	d126      	bne.n	8003fa8 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f7ff fcee 	bl	8003940 <LL_ADC_REG_IsConversionOngoing>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d112      	bne.n	8003f90 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	685a      	ldr	r2, [r3, #4]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f022 020c 	bic.w	r2, r2, #12
 8003f78:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f7e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f82:	f023 0301 	bic.w	r3, r3, #1
 8003f86:	f043 0201 	orr.w	r2, r3, #1
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	659a      	str	r2, [r3, #88]	@ 0x58
 8003f8e:	e00b      	b.n	8003fa8 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f94:	f043 0220 	orr.w	r2, r3, #32
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fa0:	f043 0201 	orr.w	r2, r3, #1
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	7e1b      	ldrb	r3, [r3, #24]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d103      	bne.n	8003fb8 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	220c      	movs	r2, #12
 8003fb6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3710      	adds	r7, #16
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}

08003fc2 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003fc2:	b480      	push	{r7}
 8003fc4:	b083      	sub	sp, #12
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bc80      	pop	{r7}
 8003fd8:	4770      	bx	lr
	...

08003fdc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b088      	sub	sp, #32
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003fea:	2300      	movs	r3, #0
 8003fec:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d101      	bne.n	8004004 <HAL_ADC_ConfigChannel+0x28>
 8004000:	2302      	movs	r3, #2
 8004002:	e110      	b.n	8004226 <HAL_ADC_ConfigChannel+0x24a>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4618      	mov	r0, r3
 8004012:	f7ff fc95 	bl	8003940 <LL_ADC_REG_IsConversionOngoing>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	f040 80f7 	bne.w	800420c <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	2b02      	cmp	r3, #2
 8004024:	f000 80b1 	beq.w	800418a <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	691b      	ldr	r3, [r3, #16]
 800402c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004030:	d004      	beq.n	800403c <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004036:	4a7e      	ldr	r2, [pc, #504]	@ (8004230 <HAL_ADC_ConfigChannel+0x254>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d108      	bne.n	800404e <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4619      	mov	r1, r3
 8004046:	4610      	mov	r0, r2
 8004048:	f7ff fb92 	bl	8003770 <LL_ADC_REG_SetSequencerChAdd>
 800404c:	e041      	b.n	80040d2 <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f003 031f 	and.w	r3, r3, #31
 800405a:	210f      	movs	r1, #15
 800405c:	fa01 f303 	lsl.w	r3, r1, r3
 8004060:	43db      	mvns	r3, r3
 8004062:	401a      	ands	r2, r3
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800406c:	2b00      	cmp	r3, #0
 800406e:	d105      	bne.n	800407c <HAL_ADC_ConfigChannel+0xa0>
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	0e9b      	lsrs	r3, r3, #26
 8004076:	f003 031f 	and.w	r3, r3, #31
 800407a:	e011      	b.n	80040a0 <HAL_ADC_ConfigChannel+0xc4>
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	fa93 f3a3 	rbit	r3, r3
 8004088:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d101      	bne.n	8004098 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 8004094:	2320      	movs	r3, #32
 8004096:	e003      	b.n	80040a0 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	fab3 f383 	clz	r3, r3
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	6839      	ldr	r1, [r7, #0]
 80040a2:	6849      	ldr	r1, [r1, #4]
 80040a4:	f001 011f 	and.w	r1, r1, #31
 80040a8:	408b      	lsls	r3, r1
 80040aa:	431a      	orrs	r2, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	089b      	lsrs	r3, r3, #2
 80040b6:	1c5a      	adds	r2, r3, #1
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	69db      	ldr	r3, [r3, #28]
 80040bc:	429a      	cmp	r2, r3
 80040be:	d808      	bhi.n	80040d2 <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6818      	ldr	r0, [r3, #0]
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	6859      	ldr	r1, [r3, #4]
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	461a      	mov	r2, r3
 80040ce:	f7ff fb2e 	bl	800372e <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6818      	ldr	r0, [r3, #0]
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	6819      	ldr	r1, [r3, #0]
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	461a      	mov	r2, r3
 80040e0:	f7ff fb6b 	bl	80037ba <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	f280 8097 	bge.w	800421c <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80040ee:	4851      	ldr	r0, [pc, #324]	@ (8004234 <HAL_ADC_ConfigChannel+0x258>)
 80040f0:	f7ff fac8 	bl	8003684 <LL_ADC_GetCommonPathInternalCh>
 80040f4:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a4f      	ldr	r2, [pc, #316]	@ (8004238 <HAL_ADC_ConfigChannel+0x25c>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d120      	bne.n	8004142 <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004106:	2b00      	cmp	r3, #0
 8004108:	d11b      	bne.n	8004142 <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004110:	4619      	mov	r1, r3
 8004112:	4848      	ldr	r0, [pc, #288]	@ (8004234 <HAL_ADC_ConfigChannel+0x258>)
 8004114:	f7ff faa4 	bl	8003660 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004118:	4b48      	ldr	r3, [pc, #288]	@ (800423c <HAL_ADC_ConfigChannel+0x260>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	099b      	lsrs	r3, r3, #6
 800411e:	4a48      	ldr	r2, [pc, #288]	@ (8004240 <HAL_ADC_ConfigChannel+0x264>)
 8004120:	fba2 2303 	umull	r2, r3, r2, r3
 8004124:	099b      	lsrs	r3, r3, #6
 8004126:	1c5a      	adds	r2, r3, #1
 8004128:	4613      	mov	r3, r2
 800412a:	005b      	lsls	r3, r3, #1
 800412c:	4413      	add	r3, r2
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004132:	e002      	b.n	800413a <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	3b01      	subs	r3, #1
 8004138:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d1f9      	bne.n	8004134 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004140:	e06c      	b.n	800421c <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a3f      	ldr	r2, [pc, #252]	@ (8004244 <HAL_ADC_ConfigChannel+0x268>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d10c      	bne.n	8004166 <HAL_ADC_ConfigChannel+0x18a>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d107      	bne.n	8004166 <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800415c:	4619      	mov	r1, r3
 800415e:	4835      	ldr	r0, [pc, #212]	@ (8004234 <HAL_ADC_ConfigChannel+0x258>)
 8004160:	f7ff fa7e 	bl	8003660 <LL_ADC_SetCommonPathInternalCh>
 8004164:	e05a      	b.n	800421c <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a37      	ldr	r2, [pc, #220]	@ (8004248 <HAL_ADC_ConfigChannel+0x26c>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d155      	bne.n	800421c <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004170:	69bb      	ldr	r3, [r7, #24]
 8004172:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004176:	2b00      	cmp	r3, #0
 8004178:	d150      	bne.n	800421c <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800417a:	69bb      	ldr	r3, [r7, #24]
 800417c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004180:	4619      	mov	r1, r3
 8004182:	482c      	ldr	r0, [pc, #176]	@ (8004234 <HAL_ADC_ConfigChannel+0x258>)
 8004184:	f7ff fa6c 	bl	8003660 <LL_ADC_SetCommonPathInternalCh>
 8004188:	e048      	b.n	800421c <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	691b      	ldr	r3, [r3, #16]
 800418e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004192:	d004      	beq.n	800419e <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004198:	4a25      	ldr	r2, [pc, #148]	@ (8004230 <HAL_ADC_ConfigChannel+0x254>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d107      	bne.n	80041ae <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4619      	mov	r1, r3
 80041a8:	4610      	mov	r0, r2
 80041aa:	f7ff faf3 	bl	8003794 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	da32      	bge.n	800421c <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80041b6:	481f      	ldr	r0, [pc, #124]	@ (8004234 <HAL_ADC_ConfigChannel+0x258>)
 80041b8:	f7ff fa64 	bl	8003684 <LL_ADC_GetCommonPathInternalCh>
 80041bc:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a1d      	ldr	r2, [pc, #116]	@ (8004238 <HAL_ADC_ConfigChannel+0x25c>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d107      	bne.n	80041d8 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80041ce:	4619      	mov	r1, r3
 80041d0:	4818      	ldr	r0, [pc, #96]	@ (8004234 <HAL_ADC_ConfigChannel+0x258>)
 80041d2:	f7ff fa45 	bl	8003660 <LL_ADC_SetCommonPathInternalCh>
 80041d6:	e021      	b.n	800421c <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a19      	ldr	r2, [pc, #100]	@ (8004244 <HAL_ADC_ConfigChannel+0x268>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d107      	bne.n	80041f2 <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80041e2:	69bb      	ldr	r3, [r7, #24]
 80041e4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80041e8:	4619      	mov	r1, r3
 80041ea:	4812      	ldr	r0, [pc, #72]	@ (8004234 <HAL_ADC_ConfigChannel+0x258>)
 80041ec:	f7ff fa38 	bl	8003660 <LL_ADC_SetCommonPathInternalCh>
 80041f0:	e014      	b.n	800421c <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a14      	ldr	r2, [pc, #80]	@ (8004248 <HAL_ADC_ConfigChannel+0x26c>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d10f      	bne.n	800421c <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80041fc:	69bb      	ldr	r3, [r7, #24]
 80041fe:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8004202:	4619      	mov	r1, r3
 8004204:	480b      	ldr	r0, [pc, #44]	@ (8004234 <HAL_ADC_ConfigChannel+0x258>)
 8004206:	f7ff fa2b 	bl	8003660 <LL_ADC_SetCommonPathInternalCh>
 800420a:	e007      	b.n	800421c <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004210:	f043 0220 	orr.w	r2, r3, #32
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 8004224:	7ffb      	ldrb	r3, [r7, #31]
}
 8004226:	4618      	mov	r0, r3
 8004228:	3720      	adds	r7, #32
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	80000004 	.word	0x80000004
 8004234:	40012708 	.word	0x40012708
 8004238:	b0001000 	.word	0xb0001000
 800423c:	20000004 	.word	0x20000004
 8004240:	053e2d63 	.word	0x053e2d63
 8004244:	b8004000 	.word	0xb8004000
 8004248:	b4002000 	.word	0xb4002000

0800424c <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4618      	mov	r0, r3
 800425a:	f7ff fb71 	bl	8003940 <LL_ADC_REG_IsConversionOngoing>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d033      	beq.n	80042cc <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4618      	mov	r0, r3
 800426a:	f7ff fb31 	bl	80038d0 <LL_ADC_IsDisableOngoing>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d104      	bne.n	800427e <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4618      	mov	r0, r3
 800427a:	f7ff fb4e 	bl	800391a <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800427e:	f7fe fb31 	bl	80028e4 <HAL_GetTick>
 8004282:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004284:	e01b      	b.n	80042be <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004286:	f7fe fb2d 	bl	80028e4 <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	2b02      	cmp	r3, #2
 8004292:	d914      	bls.n	80042be <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f003 0304 	and.w	r3, r3, #4
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d00d      	beq.n	80042be <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042a6:	f043 0210 	orr.w	r2, r3, #16
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042b2:	f043 0201 	orr.w	r2, r3, #1
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e007      	b.n	80042ce <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	f003 0304 	and.w	r3, r3, #4
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d1dc      	bne.n	8004286 <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3710      	adds	r7, #16
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
	...

080042d8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80042e0:	2300      	movs	r3, #0
 80042e2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4618      	mov	r0, r3
 80042ea:	f7ff fadf 	bl	80038ac <LL_ADC_IsEnabled>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d169      	bne.n	80043c8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	689a      	ldr	r2, [r3, #8]
 80042fa:	4b36      	ldr	r3, [pc, #216]	@ (80043d4 <ADC_Enable+0xfc>)
 80042fc:	4013      	ands	r3, r2
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d00d      	beq.n	800431e <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004306:	f043 0210 	orr.w	r2, r3, #16
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004312:	f043 0201 	orr.w	r2, r3, #1
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e055      	b.n	80043ca <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4618      	mov	r0, r3
 8004324:	f7ff fa9c 	bl	8003860 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8004328:	482b      	ldr	r0, [pc, #172]	@ (80043d8 <ADC_Enable+0x100>)
 800432a:	f7ff f9ab 	bl	8003684 <LL_ADC_GetCommonPathInternalCh>
 800432e:	4603      	mov	r3, r0
 8004330:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d00f      	beq.n	8004358 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004338:	4b28      	ldr	r3, [pc, #160]	@ (80043dc <ADC_Enable+0x104>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	099b      	lsrs	r3, r3, #6
 800433e:	4a28      	ldr	r2, [pc, #160]	@ (80043e0 <ADC_Enable+0x108>)
 8004340:	fba2 2303 	umull	r2, r3, r2, r3
 8004344:	099b      	lsrs	r3, r3, #6
 8004346:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8004348:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800434a:	e002      	b.n	8004352 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	3b01      	subs	r3, #1
 8004350:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d1f9      	bne.n	800434c <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	7e5b      	ldrb	r3, [r3, #25]
 800435c:	2b01      	cmp	r3, #1
 800435e:	d033      	beq.n	80043c8 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8004360:	f7fe fac0 	bl	80028e4 <HAL_GetTick>
 8004364:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004366:	e028      	b.n	80043ba <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4618      	mov	r0, r3
 800436e:	f7ff fa9d 	bl	80038ac <LL_ADC_IsEnabled>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d104      	bne.n	8004382 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4618      	mov	r0, r3
 800437e:	f7ff fa6f 	bl	8003860 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004382:	f7fe faaf 	bl	80028e4 <HAL_GetTick>
 8004386:	4602      	mov	r2, r0
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	2b02      	cmp	r3, #2
 800438e:	d914      	bls.n	80043ba <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0301 	and.w	r3, r3, #1
 800439a:	2b01      	cmp	r3, #1
 800439c:	d00d      	beq.n	80043ba <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043a2:	f043 0210 	orr.w	r2, r3, #16
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043ae:	f043 0201 	orr.w	r2, r3, #1
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e007      	b.n	80043ca <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0301 	and.w	r3, r3, #1
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d1cf      	bne.n	8004368 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80043c8:	2300      	movs	r3, #0
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3710      	adds	r7, #16
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	80000017 	.word	0x80000017
 80043d8:	40012708 	.word	0x40012708
 80043dc:	20000004 	.word	0x20000004
 80043e0:	053e2d63 	.word	0x053e2d63

080043e4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b084      	sub	sp, #16
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4618      	mov	r0, r3
 80043f2:	f7ff fa6d 	bl	80038d0 <LL_ADC_IsDisableOngoing>
 80043f6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4618      	mov	r0, r3
 80043fe:	f7ff fa55 	bl	80038ac <LL_ADC_IsEnabled>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d047      	beq.n	8004498 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d144      	bne.n	8004498 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	f003 0305 	and.w	r3, r3, #5
 8004418:	2b01      	cmp	r3, #1
 800441a:	d10c      	bne.n	8004436 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4618      	mov	r0, r3
 8004422:	f7ff fa30 	bl	8003886 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2203      	movs	r2, #3
 800442c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800442e:	f7fe fa59 	bl	80028e4 <HAL_GetTick>
 8004432:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004434:	e029      	b.n	800448a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800443a:	f043 0210 	orr.w	r2, r3, #16
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004446:	f043 0201 	orr.w	r2, r3, #1
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e023      	b.n	800449a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004452:	f7fe fa47 	bl	80028e4 <HAL_GetTick>
 8004456:	4602      	mov	r2, r0
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	1ad3      	subs	r3, r2, r3
 800445c:	2b02      	cmp	r3, #2
 800445e:	d914      	bls.n	800448a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	f003 0301 	and.w	r3, r3, #1
 800446a:	2b00      	cmp	r3, #0
 800446c:	d00d      	beq.n	800448a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004472:	f043 0210 	orr.w	r2, r3, #16
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800447e:	f043 0201 	orr.w	r2, r3, #1
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e007      	b.n	800449a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	f003 0301 	and.w	r3, r3, #1
 8004494:	2b00      	cmp	r3, #0
 8004496:	d1dc      	bne.n	8004452 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3710      	adds	r7, #16
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}

080044a2 <LL_ADC_SetCalibrationFactor>:
{
 80044a2:	b480      	push	{r7}
 80044a4:	b083      	sub	sp, #12
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
 80044aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80044b2:	f023 027f 	bic.w	r2, r3, #127	@ 0x7f
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	431a      	orrs	r2, r3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
}
 80044c0:	bf00      	nop
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bc80      	pop	{r7}
 80044c8:	4770      	bx	lr

080044ca <LL_ADC_GetCalibrationFactor>:
{
 80044ca:	b480      	push	{r7}
 80044cc:	b083      	sub	sp, #12
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80044d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80044dc:	4618      	mov	r0, r3
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bc80      	pop	{r7}
 80044e4:	4770      	bx	lr

080044e6 <LL_ADC_Enable>:
{
 80044e6:	b480      	push	{r7}
 80044e8:	b083      	sub	sp, #12
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80044f6:	f023 0317 	bic.w	r3, r3, #23
 80044fa:	f043 0201 	orr.w	r2, r3, #1
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	609a      	str	r2, [r3, #8]
}
 8004502:	bf00      	nop
 8004504:	370c      	adds	r7, #12
 8004506:	46bd      	mov	sp, r7
 8004508:	bc80      	pop	{r7}
 800450a:	4770      	bx	lr

0800450c <LL_ADC_Disable>:
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800451c:	f023 0317 	bic.w	r3, r3, #23
 8004520:	f043 0202 	orr.w	r2, r3, #2
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	609a      	str	r2, [r3, #8]
}
 8004528:	bf00      	nop
 800452a:	370c      	adds	r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	bc80      	pop	{r7}
 8004530:	4770      	bx	lr

08004532 <LL_ADC_IsEnabled>:
{
 8004532:	b480      	push	{r7}
 8004534:	b083      	sub	sp, #12
 8004536:	af00      	add	r7, sp, #0
 8004538:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	f003 0301 	and.w	r3, r3, #1
 8004542:	2b01      	cmp	r3, #1
 8004544:	d101      	bne.n	800454a <LL_ADC_IsEnabled+0x18>
 8004546:	2301      	movs	r3, #1
 8004548:	e000      	b.n	800454c <LL_ADC_IsEnabled+0x1a>
 800454a:	2300      	movs	r3, #0
}
 800454c:	4618      	mov	r0, r3
 800454e:	370c      	adds	r7, #12
 8004550:	46bd      	mov	sp, r7
 8004552:	bc80      	pop	{r7}
 8004554:	4770      	bx	lr

08004556 <LL_ADC_StartCalibration>:
{
 8004556:	b480      	push	{r7}
 8004558:	b083      	sub	sp, #12
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004566:	f023 0317 	bic.w	r3, r3, #23
 800456a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	609a      	str	r2, [r3, #8]
}
 8004572:	bf00      	nop
 8004574:	370c      	adds	r7, #12
 8004576:	46bd      	mov	sp, r7
 8004578:	bc80      	pop	{r7}
 800457a:	4770      	bx	lr

0800457c <LL_ADC_IsCalibrationOnGoing>:
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800458c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004590:	d101      	bne.n	8004596 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004592:	2301      	movs	r3, #1
 8004594:	e000      	b.n	8004598 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004596:	2300      	movs	r3, #0
}
 8004598:	4618      	mov	r0, r3
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	bc80      	pop	{r7}
 80045a0:	4770      	bx	lr

080045a2 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 80045a2:	b580      	push	{r7, lr}
 80045a4:	b088      	sub	sp, #32
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80045aa:	2300      	movs	r3, #0
 80045ac:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 80045ae:	2300      	movs	r3, #0
 80045b0:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d101      	bne.n	80045c0 <HAL_ADCEx_Calibration_Start+0x1e>
 80045bc:	2302      	movs	r3, #2
 80045be:	e0b9      	b.n	8004734 <HAL_ADCEx_Calibration_Start+0x192>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f7ff ff0b 	bl	80043e4 <ADC_Disable>
 80045ce:	4603      	mov	r3, r0
 80045d0:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4618      	mov	r0, r3
 80045d8:	f7ff ffab 	bl	8004532 <LL_ADC_IsEnabled>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	f040 809d 	bne.w	800471e <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045e8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80045ec:	f043 0202 	orr.w	r2, r3, #2
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68da      	ldr	r2, [r3, #12]
 80045fa:	f248 0303 	movw	r3, #32771	@ 0x8003
 80045fe:	4013      	ands	r3, r2
 8004600:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	6812      	ldr	r2, [r2, #0]
 800460c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004610:	f023 0303 	bic.w	r3, r3, #3
 8004614:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8004616:	2300      	movs	r3, #0
 8004618:	61fb      	str	r3, [r7, #28]
 800461a:	e02e      	b.n	800467a <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4618      	mov	r0, r3
 8004622:	f7ff ff98 	bl	8004556 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004626:	e014      	b.n	8004652 <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	3301      	adds	r3, #1
 800462c:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	f5b3 3f2e 	cmp.w	r3, #178176	@ 0x2b800
 8004634:	d30d      	bcc.n	8004652 <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800463a:	f023 0312 	bic.w	r3, r3, #18
 800463e:	f043 0210 	orr.w	r2, r3, #16
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e070      	b.n	8004734 <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4618      	mov	r0, r3
 8004658:	f7ff ff90 	bl	800457c <LL_ADC_IsCalibrationOnGoing>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d1e2      	bne.n	8004628 <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4618      	mov	r0, r3
 8004668:	f7ff ff2f 	bl	80044ca <LL_ADC_GetCalibrationFactor>
 800466c:	4602      	mov	r2, r0
 800466e:	69bb      	ldr	r3, [r7, #24]
 8004670:	4413      	add	r3, r2
 8004672:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	3301      	adds	r3, #1
 8004678:	61fb      	str	r3, [r7, #28]
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	2b07      	cmp	r3, #7
 800467e:	d9cd      	bls.n	800461c <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8004680:	69ba      	ldr	r2, [r7, #24]
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	fbb2 f3f3 	udiv	r3, r2, r3
 8004688:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4618      	mov	r0, r3
 8004690:	f7ff ff29 	bl	80044e6 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	69b9      	ldr	r1, [r7, #24]
 800469a:	4618      	mov	r0, r3
 800469c:	f7ff ff01 	bl	80044a2 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4618      	mov	r0, r3
 80046a6:	f7ff ff31 	bl	800450c <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80046aa:	f7fe f91b 	bl	80028e4 <HAL_GetTick>
 80046ae:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80046b0:	e01c      	b.n	80046ec <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80046b2:	f7fe f917 	bl	80028e4 <HAL_GetTick>
 80046b6:	4602      	mov	r2, r0
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	2b02      	cmp	r3, #2
 80046be:	d915      	bls.n	80046ec <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4618      	mov	r0, r3
 80046c6:	f7ff ff34 	bl	8004532 <LL_ADC_IsEnabled>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d00d      	beq.n	80046ec <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046d4:	f043 0210 	orr.w	r2, r3, #16
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046e0:	f043 0201 	orr.w	r2, r3, #1
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e023      	b.n	8004734 <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4618      	mov	r0, r3
 80046f2:	f7ff ff1e 	bl	8004532 <LL_ADC_IsEnabled>
 80046f6:	4603      	mov	r3, r0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d1da      	bne.n	80046b2 <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68d9      	ldr	r1, [r3, #12]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	693a      	ldr	r2, [r7, #16]
 8004708:	430a      	orrs	r2, r1
 800470a:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004710:	f023 0303 	bic.w	r3, r3, #3
 8004714:	f043 0201 	orr.w	r2, r3, #1
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	659a      	str	r2, [r3, #88]	@ 0x58
 800471c:	e005      	b.n	800472a <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004722:	f043 0210 	orr.w	r2, r3, #16
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 8004732:	7dfb      	ldrb	r3, [r7, #23]
}
 8004734:	4618      	mov	r0, r3
 8004736:	3720      	adds	r7, #32
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}

0800473c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800473c:	b480      	push	{r7}
 800473e:	b085      	sub	sp, #20
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f003 0307 	and.w	r3, r3, #7
 800474a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800474c:	4b0c      	ldr	r3, [pc, #48]	@ (8004780 <__NVIC_SetPriorityGrouping+0x44>)
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004752:	68ba      	ldr	r2, [r7, #8]
 8004754:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004758:	4013      	ands	r3, r2
 800475a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004764:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004768:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800476c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800476e:	4a04      	ldr	r2, [pc, #16]	@ (8004780 <__NVIC_SetPriorityGrouping+0x44>)
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	60d3      	str	r3, [r2, #12]
}
 8004774:	bf00      	nop
 8004776:	3714      	adds	r7, #20
 8004778:	46bd      	mov	sp, r7
 800477a:	bc80      	pop	{r7}
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	e000ed00 	.word	0xe000ed00

08004784 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004784:	b480      	push	{r7}
 8004786:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004788:	4b04      	ldr	r3, [pc, #16]	@ (800479c <__NVIC_GetPriorityGrouping+0x18>)
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	0a1b      	lsrs	r3, r3, #8
 800478e:	f003 0307 	and.w	r3, r3, #7
}
 8004792:	4618      	mov	r0, r3
 8004794:	46bd      	mov	sp, r7
 8004796:	bc80      	pop	{r7}
 8004798:	4770      	bx	lr
 800479a:	bf00      	nop
 800479c:	e000ed00 	.word	0xe000ed00

080047a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	4603      	mov	r3, r0
 80047a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	db0b      	blt.n	80047ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047b2:	79fb      	ldrb	r3, [r7, #7]
 80047b4:	f003 021f 	and.w	r2, r3, #31
 80047b8:	4906      	ldr	r1, [pc, #24]	@ (80047d4 <__NVIC_EnableIRQ+0x34>)
 80047ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047be:	095b      	lsrs	r3, r3, #5
 80047c0:	2001      	movs	r0, #1
 80047c2:	fa00 f202 	lsl.w	r2, r0, r2
 80047c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80047ca:	bf00      	nop
 80047cc:	370c      	adds	r7, #12
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bc80      	pop	{r7}
 80047d2:	4770      	bx	lr
 80047d4:	e000e100 	.word	0xe000e100

080047d8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	4603      	mov	r3, r0
 80047e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	db12      	blt.n	8004810 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047ea:	79fb      	ldrb	r3, [r7, #7]
 80047ec:	f003 021f 	and.w	r2, r3, #31
 80047f0:	490a      	ldr	r1, [pc, #40]	@ (800481c <__NVIC_DisableIRQ+0x44>)
 80047f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047f6:	095b      	lsrs	r3, r3, #5
 80047f8:	2001      	movs	r0, #1
 80047fa:	fa00 f202 	lsl.w	r2, r0, r2
 80047fe:	3320      	adds	r3, #32
 8004800:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004804:	f3bf 8f4f 	dsb	sy
}
 8004808:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800480a:	f3bf 8f6f 	isb	sy
}
 800480e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004810:	bf00      	nop
 8004812:	370c      	adds	r7, #12
 8004814:	46bd      	mov	sp, r7
 8004816:	bc80      	pop	{r7}
 8004818:	4770      	bx	lr
 800481a:	bf00      	nop
 800481c:	e000e100 	.word	0xe000e100

08004820 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
 8004826:	4603      	mov	r3, r0
 8004828:	6039      	str	r1, [r7, #0]
 800482a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800482c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004830:	2b00      	cmp	r3, #0
 8004832:	db0a      	blt.n	800484a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	b2da      	uxtb	r2, r3
 8004838:	490c      	ldr	r1, [pc, #48]	@ (800486c <__NVIC_SetPriority+0x4c>)
 800483a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800483e:	0112      	lsls	r2, r2, #4
 8004840:	b2d2      	uxtb	r2, r2
 8004842:	440b      	add	r3, r1
 8004844:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004848:	e00a      	b.n	8004860 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	b2da      	uxtb	r2, r3
 800484e:	4908      	ldr	r1, [pc, #32]	@ (8004870 <__NVIC_SetPriority+0x50>)
 8004850:	79fb      	ldrb	r3, [r7, #7]
 8004852:	f003 030f 	and.w	r3, r3, #15
 8004856:	3b04      	subs	r3, #4
 8004858:	0112      	lsls	r2, r2, #4
 800485a:	b2d2      	uxtb	r2, r2
 800485c:	440b      	add	r3, r1
 800485e:	761a      	strb	r2, [r3, #24]
}
 8004860:	bf00      	nop
 8004862:	370c      	adds	r7, #12
 8004864:	46bd      	mov	sp, r7
 8004866:	bc80      	pop	{r7}
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop
 800486c:	e000e100 	.word	0xe000e100
 8004870:	e000ed00 	.word	0xe000ed00

08004874 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004874:	b480      	push	{r7}
 8004876:	b089      	sub	sp, #36	@ 0x24
 8004878:	af00      	add	r7, sp, #0
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	60b9      	str	r1, [r7, #8]
 800487e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f003 0307 	and.w	r3, r3, #7
 8004886:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	f1c3 0307 	rsb	r3, r3, #7
 800488e:	2b04      	cmp	r3, #4
 8004890:	bf28      	it	cs
 8004892:	2304      	movcs	r3, #4
 8004894:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	3304      	adds	r3, #4
 800489a:	2b06      	cmp	r3, #6
 800489c:	d902      	bls.n	80048a4 <NVIC_EncodePriority+0x30>
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	3b03      	subs	r3, #3
 80048a2:	e000      	b.n	80048a6 <NVIC_EncodePriority+0x32>
 80048a4:	2300      	movs	r3, #0
 80048a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048a8:	f04f 32ff 	mov.w	r2, #4294967295
 80048ac:	69bb      	ldr	r3, [r7, #24]
 80048ae:	fa02 f303 	lsl.w	r3, r2, r3
 80048b2:	43da      	mvns	r2, r3
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	401a      	ands	r2, r3
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80048bc:	f04f 31ff 	mov.w	r1, #4294967295
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	fa01 f303 	lsl.w	r3, r1, r3
 80048c6:	43d9      	mvns	r1, r3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048cc:	4313      	orrs	r3, r2
         );
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3724      	adds	r7, #36	@ 0x24
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bc80      	pop	{r7}
 80048d6:	4770      	bx	lr

080048d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f7ff ff2b 	bl	800473c <__NVIC_SetPriorityGrouping>
}
 80048e6:	bf00      	nop
 80048e8:	3708      	adds	r7, #8
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}

080048ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048ee:	b580      	push	{r7, lr}
 80048f0:	b086      	sub	sp, #24
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	4603      	mov	r3, r0
 80048f6:	60b9      	str	r1, [r7, #8]
 80048f8:	607a      	str	r2, [r7, #4]
 80048fa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80048fc:	f7ff ff42 	bl	8004784 <__NVIC_GetPriorityGrouping>
 8004900:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	68b9      	ldr	r1, [r7, #8]
 8004906:	6978      	ldr	r0, [r7, #20]
 8004908:	f7ff ffb4 	bl	8004874 <NVIC_EncodePriority>
 800490c:	4602      	mov	r2, r0
 800490e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004912:	4611      	mov	r1, r2
 8004914:	4618      	mov	r0, r3
 8004916:	f7ff ff83 	bl	8004820 <__NVIC_SetPriority>
}
 800491a:	bf00      	nop
 800491c:	3718      	adds	r7, #24
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}

08004922 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004922:	b580      	push	{r7, lr}
 8004924:	b082      	sub	sp, #8
 8004926:	af00      	add	r7, sp, #0
 8004928:	4603      	mov	r3, r0
 800492a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800492c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004930:	4618      	mov	r0, r3
 8004932:	f7ff ff35 	bl	80047a0 <__NVIC_EnableIRQ>
}
 8004936:	bf00      	nop
 8004938:	3708      	adds	r7, #8
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}

0800493e <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800493e:	b580      	push	{r7, lr}
 8004940:	b082      	sub	sp, #8
 8004942:	af00      	add	r7, sp, #0
 8004944:	4603      	mov	r3, r0
 8004946:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800494c:	4618      	mov	r0, r3
 800494e:	f7ff ff43 	bl	80047d8 <__NVIC_DisableIRQ>
}
 8004952:	bf00      	nop
 8004954:	3708      	adds	r7, #8
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
	...

0800495c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b082      	sub	sp, #8
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d101      	bne.n	800496e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e08e      	b.n	8004a8c <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	461a      	mov	r2, r3
 8004974:	4b47      	ldr	r3, [pc, #284]	@ (8004a94 <HAL_DMA_Init+0x138>)
 8004976:	429a      	cmp	r2, r3
 8004978:	d80f      	bhi.n	800499a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	461a      	mov	r2, r3
 8004980:	4b45      	ldr	r3, [pc, #276]	@ (8004a98 <HAL_DMA_Init+0x13c>)
 8004982:	4413      	add	r3, r2
 8004984:	4a45      	ldr	r2, [pc, #276]	@ (8004a9c <HAL_DMA_Init+0x140>)
 8004986:	fba2 2303 	umull	r2, r3, r2, r3
 800498a:	091b      	lsrs	r3, r3, #4
 800498c:	009a      	lsls	r2, r3, #2
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a42      	ldr	r2, [pc, #264]	@ (8004aa0 <HAL_DMA_Init+0x144>)
 8004996:	641a      	str	r2, [r3, #64]	@ 0x40
 8004998:	e00e      	b.n	80049b8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	461a      	mov	r2, r3
 80049a0:	4b40      	ldr	r3, [pc, #256]	@ (8004aa4 <HAL_DMA_Init+0x148>)
 80049a2:	4413      	add	r3, r2
 80049a4:	4a3d      	ldr	r2, [pc, #244]	@ (8004a9c <HAL_DMA_Init+0x140>)
 80049a6:	fba2 2303 	umull	r2, r3, r2, r3
 80049aa:	091b      	lsrs	r3, r3, #4
 80049ac:	009a      	lsls	r2, r3, #2
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a3c      	ldr	r2, [pc, #240]	@ (8004aa8 <HAL_DMA_Init+0x14c>)
 80049b6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2202      	movs	r2, #2
 80049bc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	6812      	ldr	r2, [r2, #0]
 80049ca:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80049ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049d2:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	6819      	ldr	r1, [r3, #0]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	689a      	ldr	r2, [r3, #8]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	431a      	orrs	r2, r3
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	691b      	ldr	r3, [r3, #16]
 80049e8:	431a      	orrs	r2, r3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	695b      	ldr	r3, [r3, #20]
 80049ee:	431a      	orrs	r2, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	699b      	ldr	r3, [r3, #24]
 80049f4:	431a      	orrs	r2, r3
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	69db      	ldr	r3, [r3, #28]
 80049fa:	431a      	orrs	r2, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a1b      	ldr	r3, [r3, #32]
 8004a00:	431a      	orrs	r2, r3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	430a      	orrs	r2, r1
 8004a08:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 fb24 	bl	8005058 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a18:	d102      	bne.n	8004a20 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	685a      	ldr	r2, [r3, #4]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a28:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004a2c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004a36:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d010      	beq.n	8004a62 <HAL_DMA_Init+0x106>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	2b04      	cmp	r3, #4
 8004a46:	d80c      	bhi.n	8004a62 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f000 fb4d 	bl	80050e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a52:	2200      	movs	r2, #0
 8004a54:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004a5e:	605a      	str	r2, [r3, #4]
 8004a60:	e008      	b.n	8004a74 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004a8a:	2300      	movs	r3, #0
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3708      	adds	r7, #8
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	40020407 	.word	0x40020407
 8004a98:	bffdfff8 	.word	0xbffdfff8
 8004a9c:	cccccccd 	.word	0xcccccccd
 8004aa0:	40020000 	.word	0x40020000
 8004aa4:	bffdfbf8 	.word	0xbffdfbf8
 8004aa8:	40020400 	.word	0x40020400

08004aac <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b082      	sub	sp, #8
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d101      	bne.n	8004abe <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e07b      	b.n	8004bb6 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f022 0201 	bic.w	r2, r2, #1
 8004acc:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	4b3a      	ldr	r3, [pc, #232]	@ (8004bc0 <HAL_DMA_DeInit+0x114>)
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d80f      	bhi.n	8004afa <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	461a      	mov	r2, r3
 8004ae0:	4b38      	ldr	r3, [pc, #224]	@ (8004bc4 <HAL_DMA_DeInit+0x118>)
 8004ae2:	4413      	add	r3, r2
 8004ae4:	4a38      	ldr	r2, [pc, #224]	@ (8004bc8 <HAL_DMA_DeInit+0x11c>)
 8004ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8004aea:	091b      	lsrs	r3, r3, #4
 8004aec:	009a      	lsls	r2, r3, #2
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4a35      	ldr	r2, [pc, #212]	@ (8004bcc <HAL_DMA_DeInit+0x120>)
 8004af6:	641a      	str	r2, [r3, #64]	@ 0x40
 8004af8:	e00e      	b.n	8004b18 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	461a      	mov	r2, r3
 8004b00:	4b33      	ldr	r3, [pc, #204]	@ (8004bd0 <HAL_DMA_DeInit+0x124>)
 8004b02:	4413      	add	r3, r2
 8004b04:	4a30      	ldr	r2, [pc, #192]	@ (8004bc8 <HAL_DMA_DeInit+0x11c>)
 8004b06:	fba2 2303 	umull	r2, r3, r2, r3
 8004b0a:	091b      	lsrs	r3, r3, #4
 8004b0c:	009a      	lsls	r2, r3, #2
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	4a2f      	ldr	r2, [pc, #188]	@ (8004bd4 <HAL_DMA_DeInit+0x128>)
 8004b16:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b24:	f003 021c 	and.w	r2, r3, #28
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b2c:	2101      	movs	r1, #1
 8004b2e:	fa01 f202 	lsl.w	r2, r1, r2
 8004b32:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f000 fa8f 	bl	8005058 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b3e:	2200      	movs	r2, #0
 8004b40:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004b4a:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d00f      	beq.n	8004b74 <HAL_DMA_DeInit+0xc8>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	2b04      	cmp	r3, #4
 8004b5a:	d80b      	bhi.n	8004b74 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f000 fac3 	bl	80050e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b66:	2200      	movs	r2, #0
 8004b68:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004b72:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = NULL;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004bb4:	2300      	movs	r3, #0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3708      	adds	r7, #8
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	40020407 	.word	0x40020407
 8004bc4:	bffdfff8 	.word	0xbffdfff8
 8004bc8:	cccccccd 	.word	0xcccccccd
 8004bcc:	40020000 	.word	0x40020000
 8004bd0:	bffdfbf8 	.word	0xbffdfbf8
 8004bd4:	40020400 	.word	0x40020400

08004bd8 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b086      	sub	sp, #24
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	607a      	str	r2, [r7, #4]
 8004be4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004be6:	2300      	movs	r3, #0
 8004be8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d101      	bne.n	8004bf8 <HAL_DMA_Start_IT+0x20>
 8004bf4:	2302      	movs	r3, #2
 8004bf6:	e069      	b.n	8004ccc <HAL_DMA_Start_IT+0xf4>
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d155      	bne.n	8004cb8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2202      	movs	r2, #2
 8004c10:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2200      	movs	r2, #0
 8004c18:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f022 0201 	bic.w	r2, r2, #1
 8004c28:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	68b9      	ldr	r1, [r7, #8]
 8004c30:	68f8      	ldr	r0, [r7, #12]
 8004c32:	f000 f9d3 	bl	8004fdc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d008      	beq.n	8004c50 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f042 020e 	orr.w	r2, r2, #14
 8004c4c:	601a      	str	r2, [r3, #0]
 8004c4e:	e00f      	b.n	8004c70 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f022 0204 	bic.w	r2, r2, #4
 8004c5e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f042 020a 	orr.w	r2, r2, #10
 8004c6e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d007      	beq.n	8004c8e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c88:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004c8c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d007      	beq.n	8004ca6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ca0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ca4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f042 0201 	orr.w	r2, r2, #1
 8004cb4:	601a      	str	r2, [r3, #0]
 8004cb6:	e008      	b.n	8004cca <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2280      	movs	r2, #128	@ 0x80
 8004cbc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Return error status */
    status = HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004cca:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3718      	adds	r7, #24
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}

08004cd4 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d101      	bne.n	8004ce6 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e04f      	b.n	8004d86 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	d008      	beq.n	8004d04 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2204      	movs	r2, #4
 8004cf6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e040      	b.n	8004d86 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f022 020e 	bic.w	r2, r2, #14
 8004d12:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d1e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004d22:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f022 0201 	bic.w	r2, r2, #1
 8004d32:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d38:	f003 021c 	and.w	r2, r3, #28
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d40:	2101      	movs	r1, #1
 8004d42:	fa01 f202 	lsl.w	r2, r1, r2
 8004d46:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004d50:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d00c      	beq.n	8004d74 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d64:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004d68:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004d72:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2201      	movs	r2, #1
 8004d78:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8004d84:	2300      	movs	r3, #0
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	370c      	adds	r7, #12
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bc80      	pop	{r7}
 8004d8e:	4770      	bx	lr

08004d90 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b084      	sub	sp, #16
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	2b02      	cmp	r3, #2
 8004da6:	d005      	beq.n	8004db4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2204      	movs	r2, #4
 8004dac:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	73fb      	strb	r3, [r7, #15]
 8004db2:	e047      	b.n	8004e44 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f022 020e 	bic.w	r2, r2, #14
 8004dc2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f022 0201 	bic.w	r2, r2, #1
 8004dd2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004dde:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004de2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004de8:	f003 021c 	and.w	r2, r3, #28
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004df0:	2101      	movs	r1, #1
 8004df2:	fa01 f202 	lsl.w	r2, r1, r2
 8004df6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004e00:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d00c      	beq.n	8004e24 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e14:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004e18:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004e22:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d003      	beq.n	8004e44 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	4798      	blx	r3
    }
  }
  return status;
 8004e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3710      	adds	r7, #16
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
	...

08004e50 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b084      	sub	sp, #16
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e6c:	f003 031c 	and.w	r3, r3, #28
 8004e70:	2204      	movs	r2, #4
 8004e72:	409a      	lsls	r2, r3
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	4013      	ands	r3, r2
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d027      	beq.n	8004ecc <HAL_DMA_IRQHandler+0x7c>
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	f003 0304 	and.w	r3, r3, #4
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d022      	beq.n	8004ecc <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 0320 	and.w	r3, r3, #32
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d107      	bne.n	8004ea4 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f022 0204 	bic.w	r2, r2, #4
 8004ea2:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ea8:	f003 021c 	and.w	r2, r3, #28
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eb0:	2104      	movs	r1, #4
 8004eb2:	fa01 f202 	lsl.w	r2, r1, r2
 8004eb6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	f000 8081 	beq.w	8004fc4 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8004eca:	e07b      	b.n	8004fc4 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ed0:	f003 031c 	and.w	r3, r3, #28
 8004ed4:	2202      	movs	r2, #2
 8004ed6:	409a      	lsls	r2, r3
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	4013      	ands	r3, r2
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d03d      	beq.n	8004f5c <HAL_DMA_IRQHandler+0x10c>
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	f003 0302 	and.w	r3, r3, #2
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d038      	beq.n	8004f5c <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0320 	and.w	r3, r3, #32
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d10b      	bne.n	8004f10 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f022 020a 	bic.w	r2, r2, #10
 8004f06:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	461a      	mov	r2, r3
 8004f16:	4b2e      	ldr	r3, [pc, #184]	@ (8004fd0 <HAL_DMA_IRQHandler+0x180>)
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d909      	bls.n	8004f30 <HAL_DMA_IRQHandler+0xe0>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f20:	f003 031c 	and.w	r3, r3, #28
 8004f24:	4a2b      	ldr	r2, [pc, #172]	@ (8004fd4 <HAL_DMA_IRQHandler+0x184>)
 8004f26:	2102      	movs	r1, #2
 8004f28:	fa01 f303 	lsl.w	r3, r1, r3
 8004f2c:	6053      	str	r3, [r2, #4]
 8004f2e:	e008      	b.n	8004f42 <HAL_DMA_IRQHandler+0xf2>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f34:	f003 031c 	and.w	r3, r3, #28
 8004f38:	4a27      	ldr	r2, [pc, #156]	@ (8004fd8 <HAL_DMA_IRQHandler+0x188>)
 8004f3a:	2102      	movs	r1, #2
 8004f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8004f40:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      if (hdma->XferCpltCallback != NULL)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d038      	beq.n	8004fc4 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8004f5a:	e033      	b.n	8004fc4 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f60:	f003 031c 	and.w	r3, r3, #28
 8004f64:	2208      	movs	r2, #8
 8004f66:	409a      	lsls	r2, r3
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d02a      	beq.n	8004fc6 <HAL_DMA_IRQHandler+0x176>
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	f003 0308 	and.w	r3, r3, #8
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d025      	beq.n	8004fc6 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f022 020e 	bic.w	r2, r2, #14
 8004f88:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f8e:	f003 021c 	and.w	r2, r3, #28
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f96:	2101      	movs	r1, #1
 8004f98:	fa01 f202 	lsl.w	r2, r1, r2
 8004f9c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d004      	beq.n	8004fc6 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004fc4:	bf00      	nop
 8004fc6:	bf00      	nop
}
 8004fc8:	3710      	adds	r7, #16
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	40020080 	.word	0x40020080
 8004fd4:	40020400 	.word	0x40020400
 8004fd8:	40020000 	.word	0x40020000

08004fdc <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b085      	sub	sp, #20
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	60f8      	str	r0, [r7, #12]
 8004fe4:	60b9      	str	r1, [r7, #8]
 8004fe6:	607a      	str	r2, [r7, #4]
 8004fe8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fee:	68fa      	ldr	r2, [r7, #12]
 8004ff0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004ff2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d004      	beq.n	8005006 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005000:	68fa      	ldr	r2, [r7, #12]
 8005002:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005004:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800500a:	f003 021c 	and.w	r2, r3, #28
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005012:	2101      	movs	r1, #1
 8005014:	fa01 f202 	lsl.w	r2, r1, r2
 8005018:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	683a      	ldr	r2, [r7, #0]
 8005020:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	2b10      	cmp	r3, #16
 8005028:	d108      	bne.n	800503c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	68ba      	ldr	r2, [r7, #8]
 8005038:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800503a:	e007      	b.n	800504c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68ba      	ldr	r2, [r7, #8]
 8005042:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	60da      	str	r2, [r3, #12]
}
 800504c:	bf00      	nop
 800504e:	3714      	adds	r7, #20
 8005050:	46bd      	mov	sp, r7
 8005052:	bc80      	pop	{r7}
 8005054:	4770      	bx	lr
	...

08005058 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005058:	b480      	push	{r7}
 800505a:	b085      	sub	sp, #20
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	461a      	mov	r2, r3
 8005066:	4b1c      	ldr	r3, [pc, #112]	@ (80050d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8005068:	429a      	cmp	r2, r3
 800506a:	d813      	bhi.n	8005094 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005070:	089b      	lsrs	r3, r3, #2
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005078:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	b2db      	uxtb	r3, r3
 8005086:	3b08      	subs	r3, #8
 8005088:	4a14      	ldr	r2, [pc, #80]	@ (80050dc <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 800508a:	fba2 2303 	umull	r2, r3, r2, r3
 800508e:	091b      	lsrs	r3, r3, #4
 8005090:	60fb      	str	r3, [r7, #12]
 8005092:	e011      	b.n	80050b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005098:	089b      	lsrs	r3, r3, #2
 800509a:	009a      	lsls	r2, r3, #2
 800509c:	4b10      	ldr	r3, [pc, #64]	@ (80050e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 800509e:	4413      	add	r3, r2
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	3b08      	subs	r3, #8
 80050ac:	4a0b      	ldr	r2, [pc, #44]	@ (80050dc <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80050ae:	fba2 2303 	umull	r2, r3, r2, r3
 80050b2:	091b      	lsrs	r3, r3, #4
 80050b4:	3307      	adds	r3, #7
 80050b6:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4a0a      	ldr	r2, [pc, #40]	@ (80050e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 80050bc:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f003 031f 	and.w	r3, r3, #31
 80050c4:	2201      	movs	r2, #1
 80050c6:	409a      	lsls	r2, r3
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80050cc:	bf00      	nop
 80050ce:	3714      	adds	r7, #20
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bc80      	pop	{r7}
 80050d4:	4770      	bx	lr
 80050d6:	bf00      	nop
 80050d8:	40020407 	.word	0x40020407
 80050dc:	cccccccd 	.word	0xcccccccd
 80050e0:	4002081c 	.word	0x4002081c
 80050e4:	40020880 	.word	0x40020880

080050e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b085      	sub	sp, #20
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050f8:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80050fa:	68fa      	ldr	r2, [r7, #12]
 80050fc:	4b0a      	ldr	r3, [pc, #40]	@ (8005128 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80050fe:	4413      	add	r3, r2
 8005100:	009b      	lsls	r3, r3, #2
 8005102:	461a      	mov	r2, r3
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	4a08      	ldr	r2, [pc, #32]	@ (800512c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800510c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	3b01      	subs	r3, #1
 8005112:	f003 0303 	and.w	r3, r3, #3
 8005116:	2201      	movs	r2, #1
 8005118:	409a      	lsls	r2, r3
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800511e:	bf00      	nop
 8005120:	3714      	adds	r7, #20
 8005122:	46bd      	mov	sp, r7
 8005124:	bc80      	pop	{r7}
 8005126:	4770      	bx	lr
 8005128:	1000823f 	.word	0x1000823f
 800512c:	40020940 	.word	0x40020940

08005130 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b086      	sub	sp, #24
 8005134:	af00      	add	r7, sp, #0
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	60b9      	str	r1, [r7, #8]
 800513a:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800513e:	4b1c      	ldr	r3, [pc, #112]	@ (80051b0 <HAL_FLASH_Program+0x80>)
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	2b01      	cmp	r3, #1
 8005144:	d101      	bne.n	800514a <HAL_FLASH_Program+0x1a>
 8005146:	2302      	movs	r3, #2
 8005148:	e02d      	b.n	80051a6 <HAL_FLASH_Program+0x76>
 800514a:	4b19      	ldr	r3, [pc, #100]	@ (80051b0 <HAL_FLASH_Program+0x80>)
 800514c:	2201      	movs	r2, #1
 800514e:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005150:	4b17      	ldr	r3, [pc, #92]	@ (80051b0 <HAL_FLASH_Program+0x80>)
 8005152:	2200      	movs	r2, #0
 8005154:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005156:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800515a:	f000 f869 	bl	8005230 <FLASH_WaitForLastOperation>
 800515e:	4603      	mov	r3, r0
 8005160:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8005162:	7dfb      	ldrb	r3, [r7, #23]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d11a      	bne.n	800519e <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2b01      	cmp	r3, #1
 800516c:	d105      	bne.n	800517a <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800516e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005172:	68b8      	ldr	r0, [r7, #8]
 8005174:	f000 f8be 	bl	80052f4 <FLASH_Program_DoubleWord>
 8005178:	e004      	b.n	8005184 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	4619      	mov	r1, r3
 800517e:	68b8      	ldr	r0, [r7, #8]
 8005180:	f000 f8de 	bl	8005340 <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005184:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005188:	f000 f852 	bl	8005230 <FLASH_WaitForLastOperation>
 800518c:	4603      	mov	r3, r0
 800518e:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8005190:	4b08      	ldr	r3, [pc, #32]	@ (80051b4 <HAL_FLASH_Program+0x84>)
 8005192:	695a      	ldr	r2, [r3, #20]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	43db      	mvns	r3, r3
 8005198:	4906      	ldr	r1, [pc, #24]	@ (80051b4 <HAL_FLASH_Program+0x84>)
 800519a:	4013      	ands	r3, r2
 800519c:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800519e:	4b04      	ldr	r3, [pc, #16]	@ (80051b0 <HAL_FLASH_Program+0x80>)
 80051a0:	2200      	movs	r2, #0
 80051a2:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80051a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3718      	adds	r7, #24
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	bf00      	nop
 80051b0:	20000370 	.word	0x20000370
 80051b4:	58004000 	.word	0x58004000

080051b8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b083      	sub	sp, #12
 80051bc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80051be:	2300      	movs	r3, #0
 80051c0:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80051c2:	4b0b      	ldr	r3, [pc, #44]	@ (80051f0 <HAL_FLASH_Unlock+0x38>)
 80051c4:	695b      	ldr	r3, [r3, #20]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	da0b      	bge.n	80051e2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80051ca:	4b09      	ldr	r3, [pc, #36]	@ (80051f0 <HAL_FLASH_Unlock+0x38>)
 80051cc:	4a09      	ldr	r2, [pc, #36]	@ (80051f4 <HAL_FLASH_Unlock+0x3c>)
 80051ce:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80051d0:	4b07      	ldr	r3, [pc, #28]	@ (80051f0 <HAL_FLASH_Unlock+0x38>)
 80051d2:	4a09      	ldr	r2, [pc, #36]	@ (80051f8 <HAL_FLASH_Unlock+0x40>)
 80051d4:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80051d6:	4b06      	ldr	r3, [pc, #24]	@ (80051f0 <HAL_FLASH_Unlock+0x38>)
 80051d8:	695b      	ldr	r3, [r3, #20]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	da01      	bge.n	80051e2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80051e2:	79fb      	ldrb	r3, [r7, #7]
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	370c      	adds	r7, #12
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bc80      	pop	{r7}
 80051ec:	4770      	bx	lr
 80051ee:	bf00      	nop
 80051f0:	58004000 	.word	0x58004000
 80051f4:	45670123 	.word	0x45670123
 80051f8:	cdef89ab 	.word	0xcdef89ab

080051fc <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b083      	sub	sp, #12
 8005200:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005202:	2300      	movs	r3, #0
 8005204:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8005206:	4b09      	ldr	r3, [pc, #36]	@ (800522c <HAL_FLASH_Lock+0x30>)
 8005208:	695b      	ldr	r3, [r3, #20]
 800520a:	4a08      	ldr	r2, [pc, #32]	@ (800522c <HAL_FLASH_Lock+0x30>)
 800520c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005210:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8005212:	4b06      	ldr	r3, [pc, #24]	@ (800522c <HAL_FLASH_Lock+0x30>)
 8005214:	695b      	ldr	r3, [r3, #20]
 8005216:	2b00      	cmp	r3, #0
 8005218:	db01      	blt.n	800521e <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800521e:	79fb      	ldrb	r3, [r7, #7]
}
 8005220:	4618      	mov	r0, r3
 8005222:	370c      	adds	r7, #12
 8005224:	46bd      	mov	sp, r7
 8005226:	bc80      	pop	{r7}
 8005228:	4770      	bx	lr
 800522a:	bf00      	nop
 800522c:	58004000 	.word	0x58004000

08005230 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8005238:	f7fd fb54 	bl	80028e4 <HAL_GetTick>
 800523c:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800523e:	e009      	b.n	8005254 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8005240:	f7fd fb50 	bl	80028e4 <HAL_GetTick>
 8005244:	4602      	mov	r2, r0
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	429a      	cmp	r2, r3
 800524e:	d801      	bhi.n	8005254 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8005250:	2303      	movs	r3, #3
 8005252:	e046      	b.n	80052e2 <FLASH_WaitForLastOperation+0xb2>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005254:	4b25      	ldr	r3, [pc, #148]	@ (80052ec <FLASH_WaitForLastOperation+0xbc>)
 8005256:	691b      	ldr	r3, [r3, #16]
 8005258:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800525c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005260:	d0ee      	beq.n	8005240 <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 8005262:	4b22      	ldr	r3, [pc, #136]	@ (80052ec <FLASH_WaitForLastOperation+0xbc>)
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	f003 0301 	and.w	r3, r3, #1
 800526e:	2b00      	cmp	r3, #0
 8005270:	d002      	beq.n	8005278 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005272:	4b1e      	ldr	r3, [pc, #120]	@ (80052ec <FLASH_WaitForLastOperation+0xbc>)
 8005274:	2201      	movs	r2, #1
 8005276:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 8005278:	68ba      	ldr	r2, [r7, #8]
 800527a:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 800527e:	4013      	ands	r3, r2
 8005280:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005288:	d307      	bcc.n	800529a <FLASH_WaitForLastOperation+0x6a>
 800528a:	4b18      	ldr	r3, [pc, #96]	@ (80052ec <FLASH_WaitForLastOperation+0xbc>)
 800528c:	699a      	ldr	r2, [r3, #24]
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8005294:	4915      	ldr	r1, [pc, #84]	@ (80052ec <FLASH_WaitForLastOperation+0xbc>)
 8005296:	4313      	orrs	r3, r2
 8005298:	618b      	str	r3, [r1, #24]
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d004      	beq.n	80052ae <FLASH_WaitForLastOperation+0x7e>
 80052a4:	4a11      	ldr	r2, [pc, #68]	@ (80052ec <FLASH_WaitForLastOperation+0xbc>)
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80052ac:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d00e      	beq.n	80052d2 <FLASH_WaitForLastOperation+0xa2>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 80052b4:	4a0e      	ldr	r2, [pc, #56]	@ (80052f0 <FLASH_WaitForLastOperation+0xc0>)
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	e011      	b.n	80052e2 <FLASH_WaitForLastOperation+0xb2>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 80052be:	f7fd fb11 	bl	80028e4 <HAL_GetTick>
 80052c2:	4602      	mov	r2, r0
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	1ad3      	subs	r3, r2, r3
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d801      	bhi.n	80052d2 <FLASH_WaitForLastOperation+0xa2>
    {
      return HAL_TIMEOUT;
 80052ce:	2303      	movs	r3, #3
 80052d0:	e007      	b.n	80052e2 <FLASH_WaitForLastOperation+0xb2>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 80052d2:	4b06      	ldr	r3, [pc, #24]	@ (80052ec <FLASH_WaitForLastOperation+0xbc>)
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80052da:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80052de:	d0ee      	beq.n	80052be <FLASH_WaitForLastOperation+0x8e>
    }
  }

  return HAL_OK;
 80052e0:	2300      	movs	r3, #0
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3710      	adds	r7, #16
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop
 80052ec:	58004000 	.word	0x58004000
 80052f0:	20000370 	.word	0x20000370

080052f4 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b085      	sub	sp, #20
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8005300:	4b0e      	ldr	r3, [pc, #56]	@ (800533c <FLASH_Program_DoubleWord+0x48>)
 8005302:	695b      	ldr	r3, [r3, #20]
 8005304:	4a0d      	ldr	r2, [pc, #52]	@ (800533c <FLASH_Program_DoubleWord+0x48>)
 8005306:	f043 0301 	orr.w	r3, r3, #1
 800530a:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	683a      	ldr	r2, [r7, #0]
 8005310:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8005312:	f3bf 8f6f 	isb	sy
}
 8005316:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8005318:	e9d7 0100 	ldrd	r0, r1, [r7]
 800531c:	f04f 0200 	mov.w	r2, #0
 8005320:	f04f 0300 	mov.w	r3, #0
 8005324:	000a      	movs	r2, r1
 8005326:	2300      	movs	r3, #0
 8005328:	68f9      	ldr	r1, [r7, #12]
 800532a:	3104      	adds	r1, #4
 800532c:	4613      	mov	r3, r2
 800532e:	600b      	str	r3, [r1, #0]
}
 8005330:	bf00      	nop
 8005332:	3714      	adds	r7, #20
 8005334:	46bd      	mov	sp, r7
 8005336:	bc80      	pop	{r7}
 8005338:	4770      	bx	lr
 800533a:	bf00      	nop
 800533c:	58004000 	.word	0x58004000

08005340 <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 8005340:	b480      	push	{r7}
 8005342:	b089      	sub	sp, #36	@ 0x24
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800534a:	2340      	movs	r3, #64	@ 0x40
 800534c:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8005356:	4b18      	ldr	r3, [pc, #96]	@ (80053b8 <FLASH_Program_Fast+0x78>)
 8005358:	695b      	ldr	r3, [r3, #20]
 800535a:	4a17      	ldr	r2, [pc, #92]	@ (80053b8 <FLASH_Program_Fast+0x78>)
 800535c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005360:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005362:	f3ef 8310 	mrs	r3, PRIMASK
 8005366:	60fb      	str	r3, [r7, #12]
  return(result);
 8005368:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 800536a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800536c:	b672      	cpsid	i
}
 800536e:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8005378:	69bb      	ldr	r3, [r7, #24]
 800537a:	3304      	adds	r3, #4
 800537c:	61bb      	str	r3, [r7, #24]
    src_addr++;
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	3304      	adds	r3, #4
 8005382:	617b      	str	r3, [r7, #20]
    row_index--;
 8005384:	7ffb      	ldrb	r3, [r7, #31]
 8005386:	3b01      	subs	r3, #1
 8005388:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 800538a:	7ffb      	ldrb	r3, [r7, #31]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d1ef      	bne.n	8005370 <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8005390:	bf00      	nop
 8005392:	4b09      	ldr	r3, [pc, #36]	@ (80053b8 <FLASH_Program_Fast+0x78>)
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800539a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800539e:	d0f8      	beq.n	8005392 <FLASH_Program_Fast+0x52>
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	f383 8810 	msr	PRIMASK, r3
}
 80053aa:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80053ac:	bf00      	nop
 80053ae:	3724      	adds	r7, #36	@ 0x24
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bc80      	pop	{r7}
 80053b4:	4770      	bx	lr
 80053b6:	bf00      	nop
 80053b8:	58004000 	.word	0x58004000

080053bc <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b084      	sub	sp, #16
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80053c6:	4b28      	ldr	r3, [pc, #160]	@ (8005468 <HAL_FLASHEx_Erase+0xac>)
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	d101      	bne.n	80053d2 <HAL_FLASHEx_Erase+0x16>
 80053ce:	2302      	movs	r3, #2
 80053d0:	e046      	b.n	8005460 <HAL_FLASHEx_Erase+0xa4>
 80053d2:	4b25      	ldr	r3, [pc, #148]	@ (8005468 <HAL_FLASHEx_Erase+0xac>)
 80053d4:	2201      	movs	r2, #1
 80053d6:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80053d8:	4b23      	ldr	r3, [pc, #140]	@ (8005468 <HAL_FLASHEx_Erase+0xac>)
 80053da:	2200      	movs	r2, #0
 80053dc:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80053de:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80053e2:	f7ff ff25 	bl	8005230 <FLASH_WaitForLastOperation>
 80053e6:	4603      	mov	r3, r0
 80053e8:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80053ea:	7bfb      	ldrb	r3, [r7, #15]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d133      	bne.n	8005458 <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	2b04      	cmp	r3, #4
 80053f6:	d108      	bne.n	800540a <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 80053f8:	f000 f838 	bl	800546c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80053fc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005400:	f7ff ff16 	bl	8005230 <FLASH_WaitForLastOperation>
 8005404:	4603      	mov	r3, r0
 8005406:	73fb      	strb	r3, [r7, #15]
 8005408:	e024      	b.n	8005454 <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	f04f 32ff 	mov.w	r2, #4294967295
 8005410:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	60bb      	str	r3, [r7, #8]
 8005418:	e012      	b.n	8005440 <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 800541a:	68b8      	ldr	r0, [r7, #8]
 800541c:	f000 f836 	bl	800548c <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005420:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005424:	f7ff ff04 	bl	8005230 <FLASH_WaitForLastOperation>
 8005428:	4603      	mov	r3, r0
 800542a:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 800542c:	7bfb      	ldrb	r3, [r7, #15]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d003      	beq.n	800543a <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	68ba      	ldr	r2, [r7, #8]
 8005436:	601a      	str	r2, [r3, #0]
          break;
 8005438:	e00a      	b.n	8005450 <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	3301      	adds	r3, #1
 800543e:	60bb      	str	r3, [r7, #8]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	685a      	ldr	r2, [r3, #4]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	4413      	add	r3, r2
 800544a:	68ba      	ldr	r2, [r7, #8]
 800544c:	429a      	cmp	r2, r3
 800544e:	d3e4      	bcc.n	800541a <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 8005450:	f000 f878 	bl	8005544 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8005454:	f000 f832 	bl	80054bc <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005458:	4b03      	ldr	r3, [pc, #12]	@ (8005468 <HAL_FLASHEx_Erase+0xac>)
 800545a:	2200      	movs	r2, #0
 800545c:	701a      	strb	r2, [r3, #0]

  return status;
 800545e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005460:	4618      	mov	r0, r3
 8005462:	3710      	adds	r7, #16
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}
 8005468:	20000370 	.word	0x20000370

0800546c <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 800546c:	b480      	push	{r7}
 800546e:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 8005470:	4b05      	ldr	r3, [pc, #20]	@ (8005488 <FLASH_MassErase+0x1c>)
 8005472:	695b      	ldr	r3, [r3, #20]
 8005474:	4a04      	ldr	r2, [pc, #16]	@ (8005488 <FLASH_MassErase+0x1c>)
 8005476:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800547a:	f043 0304 	orr.w	r3, r3, #4
 800547e:	6153      	str	r3, [r2, #20]
#endif
}
 8005480:	bf00      	nop
 8005482:	46bd      	mov	sp, r7
 8005484:	bc80      	pop	{r7}
 8005486:	4770      	bx	lr
 8005488:	58004000 	.word	0x58004000

0800548c <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 800548c:	b480      	push	{r7}
 800548e:	b083      	sub	sp, #12
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8005494:	4b08      	ldr	r3, [pc, #32]	@ (80054b8 <FLASH_PageErase+0x2c>)
 8005496:	695b      	ldr	r3, [r3, #20]
 8005498:	f423 727e 	bic.w	r2, r3, #1016	@ 0x3f8
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	00db      	lsls	r3, r3, #3
 80054a0:	4313      	orrs	r3, r2
 80054a2:	4a05      	ldr	r2, [pc, #20]	@ (80054b8 <FLASH_PageErase+0x2c>)
 80054a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054a8:	f043 0302 	orr.w	r3, r3, #2
 80054ac:	6153      	str	r3, [r2, #20]
#endif
}
 80054ae:	bf00      	nop
 80054b0:	370c      	adds	r7, #12
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bc80      	pop	{r7}
 80054b6:	4770      	bx	lr
 80054b8:	58004000 	.word	0x58004000

080054bc <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80054bc:	b480      	push	{r7}
 80054be:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 80054c0:	4b1f      	ldr	r3, [pc, #124]	@ (8005540 <FLASH_FlushCaches+0x84>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d117      	bne.n	80054fc <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80054cc:	4b1c      	ldr	r3, [pc, #112]	@ (8005540 <FLASH_FlushCaches+0x84>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a1b      	ldr	r2, [pc, #108]	@ (8005540 <FLASH_FlushCaches+0x84>)
 80054d2:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80054d6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80054d8:	4b19      	ldr	r3, [pc, #100]	@ (8005540 <FLASH_FlushCaches+0x84>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a18      	ldr	r2, [pc, #96]	@ (8005540 <FLASH_FlushCaches+0x84>)
 80054de:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80054e2:	6013      	str	r3, [r2, #0]
 80054e4:	4b16      	ldr	r3, [pc, #88]	@ (8005540 <FLASH_FlushCaches+0x84>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a15      	ldr	r2, [pc, #84]	@ (8005540 <FLASH_FlushCaches+0x84>)
 80054ea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80054ee:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80054f0:	4b13      	ldr	r3, [pc, #76]	@ (8005540 <FLASH_FlushCaches+0x84>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a12      	ldr	r2, [pc, #72]	@ (8005540 <FLASH_FlushCaches+0x84>)
 80054f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80054fa:	6013      	str	r3, [r2, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 80054fc:	4b10      	ldr	r3, [pc, #64]	@ (8005540 <FLASH_FlushCaches+0x84>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005504:	2b01      	cmp	r3, #1
 8005506:	d117      	bne.n	8005538 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8005508:	4b0d      	ldr	r3, [pc, #52]	@ (8005540 <FLASH_FlushCaches+0x84>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a0c      	ldr	r2, [pc, #48]	@ (8005540 <FLASH_FlushCaches+0x84>)
 800550e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005512:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005514:	4b0a      	ldr	r3, [pc, #40]	@ (8005540 <FLASH_FlushCaches+0x84>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a09      	ldr	r2, [pc, #36]	@ (8005540 <FLASH_FlushCaches+0x84>)
 800551a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800551e:	6013      	str	r3, [r2, #0]
 8005520:	4b07      	ldr	r3, [pc, #28]	@ (8005540 <FLASH_FlushCaches+0x84>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a06      	ldr	r2, [pc, #24]	@ (8005540 <FLASH_FlushCaches+0x84>)
 8005526:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800552a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800552c:	4b04      	ldr	r3, [pc, #16]	@ (8005540 <FLASH_FlushCaches+0x84>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a03      	ldr	r2, [pc, #12]	@ (8005540 <FLASH_FlushCaches+0x84>)
 8005532:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005536:	6013      	str	r3, [r2, #0]
  }
#endif
}
 8005538:	bf00      	nop
 800553a:	46bd      	mov	sp, r7
 800553c:	bc80      	pop	{r7}
 800553e:	4770      	bx	lr
 8005540:	58004000 	.word	0x58004000

08005544 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 8005544:	b480      	push	{r7}
 8005546:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8005548:	4b05      	ldr	r3, [pc, #20]	@ (8005560 <FLASH_AcknowledgePageErase+0x1c>)
 800554a:	695b      	ldr	r3, [r3, #20]
 800554c:	4a04      	ldr	r2, [pc, #16]	@ (8005560 <FLASH_AcknowledgePageErase+0x1c>)
 800554e:	f423 737e 	bic.w	r3, r3, #1016	@ 0x3f8
 8005552:	f023 0302 	bic.w	r3, r3, #2
 8005556:	6153      	str	r3, [r2, #20]
#endif
}
 8005558:	bf00      	nop
 800555a:	46bd      	mov	sp, r7
 800555c:	bc80      	pop	{r7}
 800555e:	4770      	bx	lr
 8005560:	58004000 	.word	0x58004000

08005564 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005564:	b480      	push	{r7}
 8005566:	b087      	sub	sp, #28
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800556e:	2300      	movs	r3, #0
 8005570:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005572:	e140      	b.n	80057f6 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	2101      	movs	r1, #1
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	fa01 f303 	lsl.w	r3, r1, r3
 8005580:	4013      	ands	r3, r2
 8005582:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2b00      	cmp	r3, #0
 8005588:	f000 8132 	beq.w	80057f0 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	f003 0303 	and.w	r3, r3, #3
 8005594:	2b01      	cmp	r3, #1
 8005596:	d005      	beq.n	80055a4 <HAL_GPIO_Init+0x40>
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	f003 0303 	and.w	r3, r3, #3
 80055a0:	2b02      	cmp	r3, #2
 80055a2:	d130      	bne.n	8005606 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	005b      	lsls	r3, r3, #1
 80055ae:	2203      	movs	r2, #3
 80055b0:	fa02 f303 	lsl.w	r3, r2, r3
 80055b4:	43db      	mvns	r3, r3
 80055b6:	693a      	ldr	r2, [r7, #16]
 80055b8:	4013      	ands	r3, r2
 80055ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	68da      	ldr	r2, [r3, #12]
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	005b      	lsls	r3, r3, #1
 80055c4:	fa02 f303 	lsl.w	r3, r2, r3
 80055c8:	693a      	ldr	r2, [r7, #16]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	693a      	ldr	r2, [r7, #16]
 80055d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80055da:	2201      	movs	r2, #1
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	fa02 f303 	lsl.w	r3, r2, r3
 80055e2:	43db      	mvns	r3, r3
 80055e4:	693a      	ldr	r2, [r7, #16]
 80055e6:	4013      	ands	r3, r2
 80055e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	091b      	lsrs	r3, r3, #4
 80055f0:	f003 0201 	and.w	r2, r3, #1
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	fa02 f303 	lsl.w	r3, r2, r3
 80055fa:	693a      	ldr	r2, [r7, #16]
 80055fc:	4313      	orrs	r3, r2
 80055fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	693a      	ldr	r2, [r7, #16]
 8005604:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	f003 0303 	and.w	r3, r3, #3
 800560e:	2b03      	cmp	r3, #3
 8005610:	d017      	beq.n	8005642 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	68db      	ldr	r3, [r3, #12]
 8005616:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	005b      	lsls	r3, r3, #1
 800561c:	2203      	movs	r2, #3
 800561e:	fa02 f303 	lsl.w	r3, r2, r3
 8005622:	43db      	mvns	r3, r3
 8005624:	693a      	ldr	r2, [r7, #16]
 8005626:	4013      	ands	r3, r2
 8005628:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	689a      	ldr	r2, [r3, #8]
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	005b      	lsls	r3, r3, #1
 8005632:	fa02 f303 	lsl.w	r3, r2, r3
 8005636:	693a      	ldr	r2, [r7, #16]
 8005638:	4313      	orrs	r3, r2
 800563a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	693a      	ldr	r2, [r7, #16]
 8005640:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	f003 0303 	and.w	r3, r3, #3
 800564a:	2b02      	cmp	r3, #2
 800564c:	d123      	bne.n	8005696 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	08da      	lsrs	r2, r3, #3
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	3208      	adds	r2, #8
 8005656:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800565a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	f003 0307 	and.w	r3, r3, #7
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	220f      	movs	r2, #15
 8005666:	fa02 f303 	lsl.w	r3, r2, r3
 800566a:	43db      	mvns	r3, r3
 800566c:	693a      	ldr	r2, [r7, #16]
 800566e:	4013      	ands	r3, r2
 8005670:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	691a      	ldr	r2, [r3, #16]
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	f003 0307 	and.w	r3, r3, #7
 800567c:	009b      	lsls	r3, r3, #2
 800567e:	fa02 f303 	lsl.w	r3, r2, r3
 8005682:	693a      	ldr	r2, [r7, #16]
 8005684:	4313      	orrs	r3, r2
 8005686:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	08da      	lsrs	r2, r3, #3
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	3208      	adds	r2, #8
 8005690:	6939      	ldr	r1, [r7, #16]
 8005692:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	005b      	lsls	r3, r3, #1
 80056a0:	2203      	movs	r2, #3
 80056a2:	fa02 f303 	lsl.w	r3, r2, r3
 80056a6:	43db      	mvns	r3, r3
 80056a8:	693a      	ldr	r2, [r7, #16]
 80056aa:	4013      	ands	r3, r2
 80056ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	f003 0203 	and.w	r2, r3, #3
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	005b      	lsls	r3, r3, #1
 80056ba:	fa02 f303 	lsl.w	r3, r2, r3
 80056be:	693a      	ldr	r2, [r7, #16]
 80056c0:	4313      	orrs	r3, r2
 80056c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	693a      	ldr	r2, [r7, #16]
 80056c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	f000 808c 	beq.w	80057f0 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80056d8:	4a4e      	ldr	r2, [pc, #312]	@ (8005814 <HAL_GPIO_Init+0x2b0>)
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	089b      	lsrs	r3, r3, #2
 80056de:	3302      	adds	r3, #2
 80056e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	f003 0303 	and.w	r3, r3, #3
 80056ec:	009b      	lsls	r3, r3, #2
 80056ee:	2207      	movs	r2, #7
 80056f0:	fa02 f303 	lsl.w	r3, r2, r3
 80056f4:	43db      	mvns	r3, r3
 80056f6:	693a      	ldr	r2, [r7, #16]
 80056f8:	4013      	ands	r3, r2
 80056fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005702:	d00d      	beq.n	8005720 <HAL_GPIO_Init+0x1bc>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a44      	ldr	r2, [pc, #272]	@ (8005818 <HAL_GPIO_Init+0x2b4>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d007      	beq.n	800571c <HAL_GPIO_Init+0x1b8>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4a43      	ldr	r2, [pc, #268]	@ (800581c <HAL_GPIO_Init+0x2b8>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d101      	bne.n	8005718 <HAL_GPIO_Init+0x1b4>
 8005714:	2302      	movs	r3, #2
 8005716:	e004      	b.n	8005722 <HAL_GPIO_Init+0x1be>
 8005718:	2307      	movs	r3, #7
 800571a:	e002      	b.n	8005722 <HAL_GPIO_Init+0x1be>
 800571c:	2301      	movs	r3, #1
 800571e:	e000      	b.n	8005722 <HAL_GPIO_Init+0x1be>
 8005720:	2300      	movs	r3, #0
 8005722:	697a      	ldr	r2, [r7, #20]
 8005724:	f002 0203 	and.w	r2, r2, #3
 8005728:	0092      	lsls	r2, r2, #2
 800572a:	4093      	lsls	r3, r2
 800572c:	693a      	ldr	r2, [r7, #16]
 800572e:	4313      	orrs	r3, r2
 8005730:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005732:	4938      	ldr	r1, [pc, #224]	@ (8005814 <HAL_GPIO_Init+0x2b0>)
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	089b      	lsrs	r3, r3, #2
 8005738:	3302      	adds	r3, #2
 800573a:	693a      	ldr	r2, [r7, #16]
 800573c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005740:	4b37      	ldr	r3, [pc, #220]	@ (8005820 <HAL_GPIO_Init+0x2bc>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	43db      	mvns	r3, r3
 800574a:	693a      	ldr	r2, [r7, #16]
 800574c:	4013      	ands	r3, r2
 800574e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005758:	2b00      	cmp	r3, #0
 800575a:	d003      	beq.n	8005764 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 800575c:	693a      	ldr	r2, [r7, #16]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	4313      	orrs	r3, r2
 8005762:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005764:	4a2e      	ldr	r2, [pc, #184]	@ (8005820 <HAL_GPIO_Init+0x2bc>)
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800576a:	4b2d      	ldr	r3, [pc, #180]	@ (8005820 <HAL_GPIO_Init+0x2bc>)
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	43db      	mvns	r3, r3
 8005774:	693a      	ldr	r2, [r7, #16]
 8005776:	4013      	ands	r3, r2
 8005778:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005782:	2b00      	cmp	r3, #0
 8005784:	d003      	beq.n	800578e <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8005786:	693a      	ldr	r2, [r7, #16]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	4313      	orrs	r3, r2
 800578c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800578e:	4a24      	ldr	r2, [pc, #144]	@ (8005820 <HAL_GPIO_Init+0x2bc>)
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8005794:	4b22      	ldr	r3, [pc, #136]	@ (8005820 <HAL_GPIO_Init+0x2bc>)
 8005796:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800579a:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	43db      	mvns	r3, r3
 80057a0:	693a      	ldr	r2, [r7, #16]
 80057a2:	4013      	ands	r3, r2
 80057a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d003      	beq.n	80057ba <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 80057b2:	693a      	ldr	r2, [r7, #16]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80057ba:	4a19      	ldr	r2, [pc, #100]	@ (8005820 <HAL_GPIO_Init+0x2bc>)
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80057c2:	4b17      	ldr	r3, [pc, #92]	@ (8005820 <HAL_GPIO_Init+0x2bc>)
 80057c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80057c8:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	43db      	mvns	r3, r3
 80057ce:	693a      	ldr	r2, [r7, #16]
 80057d0:	4013      	ands	r3, r2
 80057d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d003      	beq.n	80057e8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80057e0:	693a      	ldr	r2, [r7, #16]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	4313      	orrs	r3, r2
 80057e6:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80057e8:	4a0d      	ldr	r2, [pc, #52]	@ (8005820 <HAL_GPIO_Init+0x2bc>)
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	3301      	adds	r3, #1
 80057f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	fa22 f303 	lsr.w	r3, r2, r3
 8005800:	2b00      	cmp	r3, #0
 8005802:	f47f aeb7 	bne.w	8005574 <HAL_GPIO_Init+0x10>
  }
}
 8005806:	bf00      	nop
 8005808:	bf00      	nop
 800580a:	371c      	adds	r7, #28
 800580c:	46bd      	mov	sp, r7
 800580e:	bc80      	pop	{r7}
 8005810:	4770      	bx	lr
 8005812:	bf00      	nop
 8005814:	40010000 	.word	0x40010000
 8005818:	48000400 	.word	0x48000400
 800581c:	48000800 	.word	0x48000800
 8005820:	58000800 	.word	0x58000800

08005824 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005824:	b480      	push	{r7}
 8005826:	b087      	sub	sp, #28
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800582e:	2300      	movs	r3, #0
 8005830:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8005832:	e0af      	b.n	8005994 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005834:	2201      	movs	r2, #1
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	fa02 f303 	lsl.w	r3, r2, r3
 800583c:	683a      	ldr	r2, [r7, #0]
 800583e:	4013      	ands	r3, r2
 8005840:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	2b00      	cmp	r3, #0
 8005846:	f000 80a2 	beq.w	800598e <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800584a:	4a59      	ldr	r2, [pc, #356]	@ (80059b0 <HAL_GPIO_DeInit+0x18c>)
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	089b      	lsrs	r3, r3, #2
 8005850:	3302      	adds	r3, #2
 8005852:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005856:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	f003 0303 	and.w	r3, r3, #3
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	2207      	movs	r2, #7
 8005862:	fa02 f303 	lsl.w	r3, r2, r3
 8005866:	68fa      	ldr	r2, [r7, #12]
 8005868:	4013      	ands	r3, r2
 800586a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005872:	d00d      	beq.n	8005890 <HAL_GPIO_DeInit+0x6c>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	4a4f      	ldr	r2, [pc, #316]	@ (80059b4 <HAL_GPIO_DeInit+0x190>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d007      	beq.n	800588c <HAL_GPIO_DeInit+0x68>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	4a4e      	ldr	r2, [pc, #312]	@ (80059b8 <HAL_GPIO_DeInit+0x194>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d101      	bne.n	8005888 <HAL_GPIO_DeInit+0x64>
 8005884:	2302      	movs	r3, #2
 8005886:	e004      	b.n	8005892 <HAL_GPIO_DeInit+0x6e>
 8005888:	2307      	movs	r3, #7
 800588a:	e002      	b.n	8005892 <HAL_GPIO_DeInit+0x6e>
 800588c:	2301      	movs	r3, #1
 800588e:	e000      	b.n	8005892 <HAL_GPIO_DeInit+0x6e>
 8005890:	2300      	movs	r3, #0
 8005892:	697a      	ldr	r2, [r7, #20]
 8005894:	f002 0203 	and.w	r2, r2, #3
 8005898:	0092      	lsls	r2, r2, #2
 800589a:	4093      	lsls	r3, r2
 800589c:	68fa      	ldr	r2, [r7, #12]
 800589e:	429a      	cmp	r2, r3
 80058a0:	d136      	bne.n	8005910 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 80058a2:	4b46      	ldr	r3, [pc, #280]	@ (80059bc <HAL_GPIO_DeInit+0x198>)
 80058a4:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	43db      	mvns	r3, r3
 80058ac:	4943      	ldr	r1, [pc, #268]	@ (80059bc <HAL_GPIO_DeInit+0x198>)
 80058ae:	4013      	ands	r3, r2
 80058b0:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 80058b4:	4b41      	ldr	r3, [pc, #260]	@ (80059bc <HAL_GPIO_DeInit+0x198>)
 80058b6:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	43db      	mvns	r3, r3
 80058be:	493f      	ldr	r1, [pc, #252]	@ (80059bc <HAL_GPIO_DeInit+0x198>)
 80058c0:	4013      	ands	r3, r2
 80058c2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80058c6:	4b3d      	ldr	r3, [pc, #244]	@ (80059bc <HAL_GPIO_DeInit+0x198>)
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	43db      	mvns	r3, r3
 80058ce:	493b      	ldr	r1, [pc, #236]	@ (80059bc <HAL_GPIO_DeInit+0x198>)
 80058d0:	4013      	ands	r3, r2
 80058d2:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 80058d4:	4b39      	ldr	r3, [pc, #228]	@ (80059bc <HAL_GPIO_DeInit+0x198>)
 80058d6:	685a      	ldr	r2, [r3, #4]
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	43db      	mvns	r3, r3
 80058dc:	4937      	ldr	r1, [pc, #220]	@ (80059bc <HAL_GPIO_DeInit+0x198>)
 80058de:	4013      	ands	r3, r2
 80058e0:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	f003 0303 	and.w	r3, r3, #3
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	2207      	movs	r2, #7
 80058ec:	fa02 f303 	lsl.w	r3, r2, r3
 80058f0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80058f2:	4a2f      	ldr	r2, [pc, #188]	@ (80059b0 <HAL_GPIO_DeInit+0x18c>)
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	089b      	lsrs	r3, r3, #2
 80058f8:	3302      	adds	r3, #2
 80058fa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	43da      	mvns	r2, r3
 8005902:	482b      	ldr	r0, [pc, #172]	@ (80059b0 <HAL_GPIO_DeInit+0x18c>)
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	089b      	lsrs	r3, r3, #2
 8005908:	400a      	ands	r2, r1
 800590a:	3302      	adds	r3, #2
 800590c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	005b      	lsls	r3, r3, #1
 8005918:	2103      	movs	r1, #3
 800591a:	fa01 f303 	lsl.w	r3, r1, r3
 800591e:	431a      	orrs	r2, r3
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	08da      	lsrs	r2, r3, #3
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	3208      	adds	r2, #8
 800592c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	f003 0307 	and.w	r3, r3, #7
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	220f      	movs	r2, #15
 800593a:	fa02 f303 	lsl.w	r3, r2, r3
 800593e:	43db      	mvns	r3, r3
 8005940:	697a      	ldr	r2, [r7, #20]
 8005942:	08d2      	lsrs	r2, r2, #3
 8005944:	4019      	ands	r1, r3
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	3208      	adds	r2, #8
 800594a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	689a      	ldr	r2, [r3, #8]
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	005b      	lsls	r3, r3, #1
 8005956:	2103      	movs	r1, #3
 8005958:	fa01 f303 	lsl.w	r3, r1, r3
 800595c:	43db      	mvns	r3, r3
 800595e:	401a      	ands	r2, r3
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	685a      	ldr	r2, [r3, #4]
 8005968:	2101      	movs	r1, #1
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	fa01 f303 	lsl.w	r3, r1, r3
 8005970:	43db      	mvns	r3, r3
 8005972:	401a      	ands	r2, r3
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	68da      	ldr	r2, [r3, #12]
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	005b      	lsls	r3, r3, #1
 8005980:	2103      	movs	r1, #3
 8005982:	fa01 f303 	lsl.w	r3, r1, r3
 8005986:	43db      	mvns	r3, r3
 8005988:	401a      	ands	r2, r3
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	60da      	str	r2, [r3, #12]
    }

    position++;
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	3301      	adds	r3, #1
 8005992:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8005994:	683a      	ldr	r2, [r7, #0]
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	fa22 f303 	lsr.w	r3, r2, r3
 800599c:	2b00      	cmp	r3, #0
 800599e:	f47f af49 	bne.w	8005834 <HAL_GPIO_DeInit+0x10>
  }
}
 80059a2:	bf00      	nop
 80059a4:	bf00      	nop
 80059a6:	371c      	adds	r7, #28
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bc80      	pop	{r7}
 80059ac:	4770      	bx	lr
 80059ae:	bf00      	nop
 80059b0:	40010000 	.word	0x40010000
 80059b4:	48000400 	.word	0x48000400
 80059b8:	48000800 	.word	0x48000800
 80059bc:	58000800 	.word	0x58000800

080059c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	460b      	mov	r3, r1
 80059ca:	807b      	strh	r3, [r7, #2]
 80059cc:	4613      	mov	r3, r2
 80059ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80059d0:	787b      	ldrb	r3, [r7, #1]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d003      	beq.n	80059de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80059d6:	887a      	ldrh	r2, [r7, #2]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80059dc:	e002      	b.n	80059e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80059de:	887a      	ldrh	r2, [r7, #2]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80059e4:	bf00      	nop
 80059e6:	370c      	adds	r7, #12
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bc80      	pop	{r7}
 80059ec:	4770      	bx	lr
	...

080059f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b082      	sub	sp, #8
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	4603      	mov	r3, r0
 80059f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80059fa:	4b08      	ldr	r3, [pc, #32]	@ (8005a1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80059fc:	68da      	ldr	r2, [r3, #12]
 80059fe:	88fb      	ldrh	r3, [r7, #6]
 8005a00:	4013      	ands	r3, r2
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d006      	beq.n	8005a14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005a06:	4a05      	ldr	r2, [pc, #20]	@ (8005a1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005a08:	88fb      	ldrh	r3, [r7, #6]
 8005a0a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005a0c:	88fb      	ldrh	r3, [r7, #6]
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f005 fe08 	bl	800b624 <HAL_GPIO_EXTI_Callback>
  }
}
 8005a14:	bf00      	nop
 8005a16:	3708      	adds	r7, #8
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}
 8005a1c:	58000800 	.word	0x58000800

08005a20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b082      	sub	sp, #8
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d101      	bne.n	8005a32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e081      	b.n	8005b36 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d106      	bne.n	8005a4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f7fc fb0c 	bl	8002064 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2224      	movs	r2, #36	@ 0x24
 8005a50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f022 0201 	bic.w	r2, r2, #1
 8005a62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	685a      	ldr	r2, [r3, #4]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005a70:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	689a      	ldr	r2, [r3, #8]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005a80:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	68db      	ldr	r3, [r3, #12]
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d107      	bne.n	8005a9a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	689a      	ldr	r2, [r3, #8]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005a96:	609a      	str	r2, [r3, #8]
 8005a98:	e006      	b.n	8005aa8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	689a      	ldr	r2, [r3, #8]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005aa6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	2b02      	cmp	r3, #2
 8005aae:	d104      	bne.n	8005aba <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005ab8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	687a      	ldr	r2, [r7, #4]
 8005ac2:	6812      	ldr	r2, [r2, #0]
 8005ac4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005ac8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005acc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	68da      	ldr	r2, [r3, #12]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005adc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	691a      	ldr	r2, [r3, #16]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	695b      	ldr	r3, [r3, #20]
 8005ae6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	699b      	ldr	r3, [r3, #24]
 8005aee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	430a      	orrs	r2, r1
 8005af6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	69d9      	ldr	r1, [r3, #28]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6a1a      	ldr	r2, [r3, #32]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	430a      	orrs	r2, r1
 8005b06:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f042 0201 	orr.w	r2, r2, #1
 8005b16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2220      	movs	r2, #32
 8005b22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005b34:	2300      	movs	r3, #0
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3708      	adds	r7, #8
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}
	...

08005b40 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b088      	sub	sp, #32
 8005b44:	af02      	add	r7, sp, #8
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	607a      	str	r2, [r7, #4]
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	460b      	mov	r3, r1
 8005b4e:	817b      	strh	r3, [r7, #10]
 8005b50:	4613      	mov	r3, r2
 8005b52:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b5a:	b2db      	uxtb	r3, r3
 8005b5c:	2b20      	cmp	r3, #32
 8005b5e:	f040 80da 	bne.w	8005d16 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d101      	bne.n	8005b70 <HAL_I2C_Master_Transmit+0x30>
 8005b6c:	2302      	movs	r3, #2
 8005b6e:	e0d3      	b.n	8005d18 <HAL_I2C_Master_Transmit+0x1d8>
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2201      	movs	r2, #1
 8005b74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005b78:	f7fc feb4 	bl	80028e4 <HAL_GetTick>
 8005b7c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	9300      	str	r3, [sp, #0]
 8005b82:	2319      	movs	r3, #25
 8005b84:	2201      	movs	r2, #1
 8005b86:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005b8a:	68f8      	ldr	r0, [r7, #12]
 8005b8c:	f000 fb4d 	bl	800622a <I2C_WaitOnFlagUntilTimeout>
 8005b90:	4603      	mov	r3, r0
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d001      	beq.n	8005b9a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	e0be      	b.n	8005d18 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2221      	movs	r2, #33	@ 0x21
 8005b9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2210      	movs	r2, #16
 8005ba6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2200      	movs	r2, #0
 8005bae:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	893a      	ldrh	r2, [r7, #8]
 8005bba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	2bff      	cmp	r3, #255	@ 0xff
 8005bca:	d90e      	bls.n	8005bea <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	22ff      	movs	r2, #255	@ 0xff
 8005bd0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bd6:	b2da      	uxtb	r2, r3
 8005bd8:	8979      	ldrh	r1, [r7, #10]
 8005bda:	4b51      	ldr	r3, [pc, #324]	@ (8005d20 <HAL_I2C_Master_Transmit+0x1e0>)
 8005bdc:	9300      	str	r3, [sp, #0]
 8005bde:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005be2:	68f8      	ldr	r0, [r7, #12]
 8005be4:	f000 fd38 	bl	8006658 <I2C_TransferConfig>
 8005be8:	e06c      	b.n	8005cc4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bee:	b29a      	uxth	r2, r3
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bf8:	b2da      	uxtb	r2, r3
 8005bfa:	8979      	ldrh	r1, [r7, #10]
 8005bfc:	4b48      	ldr	r3, [pc, #288]	@ (8005d20 <HAL_I2C_Master_Transmit+0x1e0>)
 8005bfe:	9300      	str	r3, [sp, #0]
 8005c00:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005c04:	68f8      	ldr	r0, [r7, #12]
 8005c06:	f000 fd27 	bl	8006658 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005c0a:	e05b      	b.n	8005cc4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c0c:	697a      	ldr	r2, [r7, #20]
 8005c0e:	6a39      	ldr	r1, [r7, #32]
 8005c10:	68f8      	ldr	r0, [r7, #12]
 8005c12:	f000 fb4a 	bl	80062aa <I2C_WaitOnTXISFlagUntilTimeout>
 8005c16:	4603      	mov	r3, r0
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d001      	beq.n	8005c20 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e07b      	b.n	8005d18 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c24:	781a      	ldrb	r2, [r3, #0]
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c30:	1c5a      	adds	r2, r3, #1
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	3b01      	subs	r3, #1
 8005c3e:	b29a      	uxth	r2, r3
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c48:	3b01      	subs	r3, #1
 8005c4a:	b29a      	uxth	r2, r3
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d034      	beq.n	8005cc4 <HAL_I2C_Master_Transmit+0x184>
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d130      	bne.n	8005cc4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	9300      	str	r3, [sp, #0]
 8005c66:	6a3b      	ldr	r3, [r7, #32]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	2180      	movs	r1, #128	@ 0x80
 8005c6c:	68f8      	ldr	r0, [r7, #12]
 8005c6e:	f000 fadc 	bl	800622a <I2C_WaitOnFlagUntilTimeout>
 8005c72:	4603      	mov	r3, r0
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d001      	beq.n	8005c7c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	e04d      	b.n	8005d18 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	2bff      	cmp	r3, #255	@ 0xff
 8005c84:	d90e      	bls.n	8005ca4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	22ff      	movs	r2, #255	@ 0xff
 8005c8a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c90:	b2da      	uxtb	r2, r3
 8005c92:	8979      	ldrh	r1, [r7, #10]
 8005c94:	2300      	movs	r3, #0
 8005c96:	9300      	str	r3, [sp, #0]
 8005c98:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005c9c:	68f8      	ldr	r0, [r7, #12]
 8005c9e:	f000 fcdb 	bl	8006658 <I2C_TransferConfig>
 8005ca2:	e00f      	b.n	8005cc4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ca8:	b29a      	uxth	r2, r3
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cb2:	b2da      	uxtb	r2, r3
 8005cb4:	8979      	ldrh	r1, [r7, #10]
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	9300      	str	r3, [sp, #0]
 8005cba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005cbe:	68f8      	ldr	r0, [r7, #12]
 8005cc0:	f000 fcca 	bl	8006658 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d19e      	bne.n	8005c0c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005cce:	697a      	ldr	r2, [r7, #20]
 8005cd0:	6a39      	ldr	r1, [r7, #32]
 8005cd2:	68f8      	ldr	r0, [r7, #12]
 8005cd4:	f000 fb29 	bl	800632a <I2C_WaitOnSTOPFlagUntilTimeout>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d001      	beq.n	8005ce2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e01a      	b.n	8005d18 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	2220      	movs	r2, #32
 8005ce8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	6859      	ldr	r1, [r3, #4]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	4b0b      	ldr	r3, [pc, #44]	@ (8005d24 <HAL_I2C_Master_Transmit+0x1e4>)
 8005cf6:	400b      	ands	r3, r1
 8005cf8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2220      	movs	r2, #32
 8005cfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2200      	movs	r2, #0
 8005d06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005d12:	2300      	movs	r3, #0
 8005d14:	e000      	b.n	8005d18 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8005d16:	2302      	movs	r3, #2
  }
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3718      	adds	r7, #24
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}
 8005d20:	80002000 	.word	0x80002000
 8005d24:	fe00e800 	.word	0xfe00e800

08005d28 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b088      	sub	sp, #32
 8005d2c:	af02      	add	r7, sp, #8
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	607a      	str	r2, [r7, #4]
 8005d32:	461a      	mov	r2, r3
 8005d34:	460b      	mov	r3, r1
 8005d36:	817b      	strh	r3, [r7, #10]
 8005d38:	4613      	mov	r3, r2
 8005d3a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d42:	b2db      	uxtb	r3, r3
 8005d44:	2b20      	cmp	r3, #32
 8005d46:	f040 80db 	bne.w	8005f00 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d101      	bne.n	8005d58 <HAL_I2C_Master_Receive+0x30>
 8005d54:	2302      	movs	r3, #2
 8005d56:	e0d4      	b.n	8005f02 <HAL_I2C_Master_Receive+0x1da>
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005d60:	f7fc fdc0 	bl	80028e4 <HAL_GetTick>
 8005d64:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	9300      	str	r3, [sp, #0]
 8005d6a:	2319      	movs	r3, #25
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005d72:	68f8      	ldr	r0, [r7, #12]
 8005d74:	f000 fa59 	bl	800622a <I2C_WaitOnFlagUntilTimeout>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d001      	beq.n	8005d82 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e0bf      	b.n	8005f02 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2222      	movs	r2, #34	@ 0x22
 8005d86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2210      	movs	r2, #16
 8005d8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2200      	movs	r2, #0
 8005d96:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	893a      	ldrh	r2, [r7, #8]
 8005da2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2200      	movs	r2, #0
 8005da8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	2bff      	cmp	r3, #255	@ 0xff
 8005db2:	d90e      	bls.n	8005dd2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	22ff      	movs	r2, #255	@ 0xff
 8005db8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dbe:	b2da      	uxtb	r2, r3
 8005dc0:	8979      	ldrh	r1, [r7, #10]
 8005dc2:	4b52      	ldr	r3, [pc, #328]	@ (8005f0c <HAL_I2C_Master_Receive+0x1e4>)
 8005dc4:	9300      	str	r3, [sp, #0]
 8005dc6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005dca:	68f8      	ldr	r0, [r7, #12]
 8005dcc:	f000 fc44 	bl	8006658 <I2C_TransferConfig>
 8005dd0:	e06d      	b.n	8005eae <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dd6:	b29a      	uxth	r2, r3
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005de0:	b2da      	uxtb	r2, r3
 8005de2:	8979      	ldrh	r1, [r7, #10]
 8005de4:	4b49      	ldr	r3, [pc, #292]	@ (8005f0c <HAL_I2C_Master_Receive+0x1e4>)
 8005de6:	9300      	str	r3, [sp, #0]
 8005de8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005dec:	68f8      	ldr	r0, [r7, #12]
 8005dee:	f000 fc33 	bl	8006658 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8005df2:	e05c      	b.n	8005eae <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005df4:	697a      	ldr	r2, [r7, #20]
 8005df6:	6a39      	ldr	r1, [r7, #32]
 8005df8:	68f8      	ldr	r0, [r7, #12]
 8005dfa:	f000 fad3 	bl	80063a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d001      	beq.n	8005e08 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	e07c      	b.n	8005f02 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e12:	b2d2      	uxtb	r2, r2
 8005e14:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e1a:	1c5a      	adds	r2, r3, #1
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e24:	3b01      	subs	r3, #1
 8005e26:	b29a      	uxth	r2, r3
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	3b01      	subs	r3, #1
 8005e34:	b29a      	uxth	r2, r3
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d034      	beq.n	8005eae <HAL_I2C_Master_Receive+0x186>
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d130      	bne.n	8005eae <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	9300      	str	r3, [sp, #0]
 8005e50:	6a3b      	ldr	r3, [r7, #32]
 8005e52:	2200      	movs	r2, #0
 8005e54:	2180      	movs	r1, #128	@ 0x80
 8005e56:	68f8      	ldr	r0, [r7, #12]
 8005e58:	f000 f9e7 	bl	800622a <I2C_WaitOnFlagUntilTimeout>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d001      	beq.n	8005e66 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	e04d      	b.n	8005f02 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	2bff      	cmp	r3, #255	@ 0xff
 8005e6e:	d90e      	bls.n	8005e8e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	22ff      	movs	r2, #255	@ 0xff
 8005e74:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e7a:	b2da      	uxtb	r2, r3
 8005e7c:	8979      	ldrh	r1, [r7, #10]
 8005e7e:	2300      	movs	r3, #0
 8005e80:	9300      	str	r3, [sp, #0]
 8005e82:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005e86:	68f8      	ldr	r0, [r7, #12]
 8005e88:	f000 fbe6 	bl	8006658 <I2C_TransferConfig>
 8005e8c:	e00f      	b.n	8005eae <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e92:	b29a      	uxth	r2, r3
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e9c:	b2da      	uxtb	r2, r3
 8005e9e:	8979      	ldrh	r1, [r7, #10]
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	9300      	str	r3, [sp, #0]
 8005ea4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005ea8:	68f8      	ldr	r0, [r7, #12]
 8005eaa:	f000 fbd5 	bl	8006658 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d19d      	bne.n	8005df4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005eb8:	697a      	ldr	r2, [r7, #20]
 8005eba:	6a39      	ldr	r1, [r7, #32]
 8005ebc:	68f8      	ldr	r0, [r7, #12]
 8005ebe:	f000 fa34 	bl	800632a <I2C_WaitOnSTOPFlagUntilTimeout>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d001      	beq.n	8005ecc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	e01a      	b.n	8005f02 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	2220      	movs	r2, #32
 8005ed2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	6859      	ldr	r1, [r3, #4]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	4b0c      	ldr	r3, [pc, #48]	@ (8005f10 <HAL_I2C_Master_Receive+0x1e8>)
 8005ee0:	400b      	ands	r3, r1
 8005ee2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2220      	movs	r2, #32
 8005ee8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005efc:	2300      	movs	r3, #0
 8005efe:	e000      	b.n	8005f02 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005f00:	2302      	movs	r3, #2
  }
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3718      	adds	r7, #24
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}
 8005f0a:	bf00      	nop
 8005f0c:	80002400 	.word	0x80002400
 8005f10:	fe00e800 	.word	0xfe00e800

08005f14 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b088      	sub	sp, #32
 8005f18:	af02      	add	r7, sp, #8
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	4608      	mov	r0, r1
 8005f1e:	4611      	mov	r1, r2
 8005f20:	461a      	mov	r2, r3
 8005f22:	4603      	mov	r3, r0
 8005f24:	817b      	strh	r3, [r7, #10]
 8005f26:	460b      	mov	r3, r1
 8005f28:	813b      	strh	r3, [r7, #8]
 8005f2a:	4613      	mov	r3, r2
 8005f2c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f34:	b2db      	uxtb	r3, r3
 8005f36:	2b20      	cmp	r3, #32
 8005f38:	f040 80f9 	bne.w	800612e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f3c:	6a3b      	ldr	r3, [r7, #32]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d002      	beq.n	8005f48 <HAL_I2C_Mem_Write+0x34>
 8005f42:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d105      	bne.n	8005f54 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f4e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	e0ed      	b.n	8006130 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	d101      	bne.n	8005f62 <HAL_I2C_Mem_Write+0x4e>
 8005f5e:	2302      	movs	r3, #2
 8005f60:	e0e6      	b.n	8006130 <HAL_I2C_Mem_Write+0x21c>
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2201      	movs	r2, #1
 8005f66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005f6a:	f7fc fcbb 	bl	80028e4 <HAL_GetTick>
 8005f6e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	9300      	str	r3, [sp, #0]
 8005f74:	2319      	movs	r3, #25
 8005f76:	2201      	movs	r2, #1
 8005f78:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005f7c:	68f8      	ldr	r0, [r7, #12]
 8005f7e:	f000 f954 	bl	800622a <I2C_WaitOnFlagUntilTimeout>
 8005f82:	4603      	mov	r3, r0
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d001      	beq.n	8005f8c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e0d1      	b.n	8006130 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2221      	movs	r2, #33	@ 0x21
 8005f90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2240      	movs	r2, #64	@ 0x40
 8005f98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	6a3a      	ldr	r2, [r7, #32]
 8005fa6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005fac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005fb4:	88f8      	ldrh	r0, [r7, #6]
 8005fb6:	893a      	ldrh	r2, [r7, #8]
 8005fb8:	8979      	ldrh	r1, [r7, #10]
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	9301      	str	r3, [sp, #4]
 8005fbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fc0:	9300      	str	r3, [sp, #0]
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	68f8      	ldr	r0, [r7, #12]
 8005fc6:	f000 f8b9 	bl	800613c <I2C_RequestMemoryWrite>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d005      	beq.n	8005fdc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	e0a9      	b.n	8006130 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	2bff      	cmp	r3, #255	@ 0xff
 8005fe4:	d90e      	bls.n	8006004 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	22ff      	movs	r2, #255	@ 0xff
 8005fea:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ff0:	b2da      	uxtb	r2, r3
 8005ff2:	8979      	ldrh	r1, [r7, #10]
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	9300      	str	r3, [sp, #0]
 8005ff8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005ffc:	68f8      	ldr	r0, [r7, #12]
 8005ffe:	f000 fb2b 	bl	8006658 <I2C_TransferConfig>
 8006002:	e00f      	b.n	8006024 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006008:	b29a      	uxth	r2, r3
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006012:	b2da      	uxtb	r2, r3
 8006014:	8979      	ldrh	r1, [r7, #10]
 8006016:	2300      	movs	r3, #0
 8006018:	9300      	str	r3, [sp, #0]
 800601a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800601e:	68f8      	ldr	r0, [r7, #12]
 8006020:	f000 fb1a 	bl	8006658 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006024:	697a      	ldr	r2, [r7, #20]
 8006026:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006028:	68f8      	ldr	r0, [r7, #12]
 800602a:	f000 f93e 	bl	80062aa <I2C_WaitOnTXISFlagUntilTimeout>
 800602e:	4603      	mov	r3, r0
 8006030:	2b00      	cmp	r3, #0
 8006032:	d001      	beq.n	8006038 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	e07b      	b.n	8006130 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800603c:	781a      	ldrb	r2, [r3, #0]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006048:	1c5a      	adds	r2, r3, #1
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006052:	b29b      	uxth	r3, r3
 8006054:	3b01      	subs	r3, #1
 8006056:	b29a      	uxth	r2, r3
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006060:	3b01      	subs	r3, #1
 8006062:	b29a      	uxth	r2, r3
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800606c:	b29b      	uxth	r3, r3
 800606e:	2b00      	cmp	r3, #0
 8006070:	d034      	beq.n	80060dc <HAL_I2C_Mem_Write+0x1c8>
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006076:	2b00      	cmp	r3, #0
 8006078:	d130      	bne.n	80060dc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	9300      	str	r3, [sp, #0]
 800607e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006080:	2200      	movs	r2, #0
 8006082:	2180      	movs	r1, #128	@ 0x80
 8006084:	68f8      	ldr	r0, [r7, #12]
 8006086:	f000 f8d0 	bl	800622a <I2C_WaitOnFlagUntilTimeout>
 800608a:	4603      	mov	r3, r0
 800608c:	2b00      	cmp	r3, #0
 800608e:	d001      	beq.n	8006094 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	e04d      	b.n	8006130 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006098:	b29b      	uxth	r3, r3
 800609a:	2bff      	cmp	r3, #255	@ 0xff
 800609c:	d90e      	bls.n	80060bc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	22ff      	movs	r2, #255	@ 0xff
 80060a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060a8:	b2da      	uxtb	r2, r3
 80060aa:	8979      	ldrh	r1, [r7, #10]
 80060ac:	2300      	movs	r3, #0
 80060ae:	9300      	str	r3, [sp, #0]
 80060b0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80060b4:	68f8      	ldr	r0, [r7, #12]
 80060b6:	f000 facf 	bl	8006658 <I2C_TransferConfig>
 80060ba:	e00f      	b.n	80060dc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060c0:	b29a      	uxth	r2, r3
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060ca:	b2da      	uxtb	r2, r3
 80060cc:	8979      	ldrh	r1, [r7, #10]
 80060ce:	2300      	movs	r3, #0
 80060d0:	9300      	str	r3, [sp, #0]
 80060d2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80060d6:	68f8      	ldr	r0, [r7, #12]
 80060d8:	f000 fabe 	bl	8006658 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060e0:	b29b      	uxth	r3, r3
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d19e      	bne.n	8006024 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060e6:	697a      	ldr	r2, [r7, #20]
 80060e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80060ea:	68f8      	ldr	r0, [r7, #12]
 80060ec:	f000 f91d 	bl	800632a <I2C_WaitOnSTOPFlagUntilTimeout>
 80060f0:	4603      	mov	r3, r0
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d001      	beq.n	80060fa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	e01a      	b.n	8006130 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	2220      	movs	r2, #32
 8006100:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	6859      	ldr	r1, [r3, #4]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	4b0a      	ldr	r3, [pc, #40]	@ (8006138 <HAL_I2C_Mem_Write+0x224>)
 800610e:	400b      	ands	r3, r1
 8006110:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2220      	movs	r2, #32
 8006116:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2200      	movs	r2, #0
 800611e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2200      	movs	r2, #0
 8006126:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800612a:	2300      	movs	r3, #0
 800612c:	e000      	b.n	8006130 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800612e:	2302      	movs	r3, #2
  }
}
 8006130:	4618      	mov	r0, r3
 8006132:	3718      	adds	r7, #24
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}
 8006138:	fe00e800 	.word	0xfe00e800

0800613c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b086      	sub	sp, #24
 8006140:	af02      	add	r7, sp, #8
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	4608      	mov	r0, r1
 8006146:	4611      	mov	r1, r2
 8006148:	461a      	mov	r2, r3
 800614a:	4603      	mov	r3, r0
 800614c:	817b      	strh	r3, [r7, #10]
 800614e:	460b      	mov	r3, r1
 8006150:	813b      	strh	r3, [r7, #8]
 8006152:	4613      	mov	r3, r2
 8006154:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006156:	88fb      	ldrh	r3, [r7, #6]
 8006158:	b2da      	uxtb	r2, r3
 800615a:	8979      	ldrh	r1, [r7, #10]
 800615c:	4b20      	ldr	r3, [pc, #128]	@ (80061e0 <I2C_RequestMemoryWrite+0xa4>)
 800615e:	9300      	str	r3, [sp, #0]
 8006160:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006164:	68f8      	ldr	r0, [r7, #12]
 8006166:	f000 fa77 	bl	8006658 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800616a:	69fa      	ldr	r2, [r7, #28]
 800616c:	69b9      	ldr	r1, [r7, #24]
 800616e:	68f8      	ldr	r0, [r7, #12]
 8006170:	f000 f89b 	bl	80062aa <I2C_WaitOnTXISFlagUntilTimeout>
 8006174:	4603      	mov	r3, r0
 8006176:	2b00      	cmp	r3, #0
 8006178:	d001      	beq.n	800617e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	e02c      	b.n	80061d8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800617e:	88fb      	ldrh	r3, [r7, #6]
 8006180:	2b01      	cmp	r3, #1
 8006182:	d105      	bne.n	8006190 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006184:	893b      	ldrh	r3, [r7, #8]
 8006186:	b2da      	uxtb	r2, r3
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	629a      	str	r2, [r3, #40]	@ 0x28
 800618e:	e015      	b.n	80061bc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006190:	893b      	ldrh	r3, [r7, #8]
 8006192:	0a1b      	lsrs	r3, r3, #8
 8006194:	b29b      	uxth	r3, r3
 8006196:	b2da      	uxtb	r2, r3
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800619e:	69fa      	ldr	r2, [r7, #28]
 80061a0:	69b9      	ldr	r1, [r7, #24]
 80061a2:	68f8      	ldr	r0, [r7, #12]
 80061a4:	f000 f881 	bl	80062aa <I2C_WaitOnTXISFlagUntilTimeout>
 80061a8:	4603      	mov	r3, r0
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d001      	beq.n	80061b2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80061ae:	2301      	movs	r3, #1
 80061b0:	e012      	b.n	80061d8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80061b2:	893b      	ldrh	r3, [r7, #8]
 80061b4:	b2da      	uxtb	r2, r3
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	9300      	str	r3, [sp, #0]
 80061c0:	69bb      	ldr	r3, [r7, #24]
 80061c2:	2200      	movs	r2, #0
 80061c4:	2180      	movs	r1, #128	@ 0x80
 80061c6:	68f8      	ldr	r0, [r7, #12]
 80061c8:	f000 f82f 	bl	800622a <I2C_WaitOnFlagUntilTimeout>
 80061cc:	4603      	mov	r3, r0
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d001      	beq.n	80061d6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	e000      	b.n	80061d8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80061d6:	2300      	movs	r3, #0
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3710      	adds	r7, #16
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}
 80061e0:	80002000 	.word	0x80002000

080061e4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b083      	sub	sp, #12
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	699b      	ldr	r3, [r3, #24]
 80061f2:	f003 0302 	and.w	r3, r3, #2
 80061f6:	2b02      	cmp	r3, #2
 80061f8:	d103      	bne.n	8006202 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	2200      	movs	r2, #0
 8006200:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	699b      	ldr	r3, [r3, #24]
 8006208:	f003 0301 	and.w	r3, r3, #1
 800620c:	2b01      	cmp	r3, #1
 800620e:	d007      	beq.n	8006220 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	699a      	ldr	r2, [r3, #24]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f042 0201 	orr.w	r2, r2, #1
 800621e:	619a      	str	r2, [r3, #24]
  }
}
 8006220:	bf00      	nop
 8006222:	370c      	adds	r7, #12
 8006224:	46bd      	mov	sp, r7
 8006226:	bc80      	pop	{r7}
 8006228:	4770      	bx	lr

0800622a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800622a:	b580      	push	{r7, lr}
 800622c:	b084      	sub	sp, #16
 800622e:	af00      	add	r7, sp, #0
 8006230:	60f8      	str	r0, [r7, #12]
 8006232:	60b9      	str	r1, [r7, #8]
 8006234:	603b      	str	r3, [r7, #0]
 8006236:	4613      	mov	r3, r2
 8006238:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800623a:	e022      	b.n	8006282 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006242:	d01e      	beq.n	8006282 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006244:	f7fc fb4e 	bl	80028e4 <HAL_GetTick>
 8006248:	4602      	mov	r2, r0
 800624a:	69bb      	ldr	r3, [r7, #24]
 800624c:	1ad3      	subs	r3, r2, r3
 800624e:	683a      	ldr	r2, [r7, #0]
 8006250:	429a      	cmp	r2, r3
 8006252:	d302      	bcc.n	800625a <I2C_WaitOnFlagUntilTimeout+0x30>
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d113      	bne.n	8006282 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800625e:	f043 0220 	orr.w	r2, r3, #32
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2220      	movs	r2, #32
 800626a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2200      	movs	r2, #0
 8006272:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2200      	movs	r2, #0
 800627a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 800627e:	2301      	movs	r3, #1
 8006280:	e00f      	b.n	80062a2 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	699a      	ldr	r2, [r3, #24]
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	4013      	ands	r3, r2
 800628c:	68ba      	ldr	r2, [r7, #8]
 800628e:	429a      	cmp	r2, r3
 8006290:	bf0c      	ite	eq
 8006292:	2301      	moveq	r3, #1
 8006294:	2300      	movne	r3, #0
 8006296:	b2db      	uxtb	r3, r3
 8006298:	461a      	mov	r2, r3
 800629a:	79fb      	ldrb	r3, [r7, #7]
 800629c:	429a      	cmp	r2, r3
 800629e:	d0cd      	beq.n	800623c <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80062a0:	2300      	movs	r3, #0
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3710      	adds	r7, #16
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}

080062aa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80062aa:	b580      	push	{r7, lr}
 80062ac:	b084      	sub	sp, #16
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	60f8      	str	r0, [r7, #12]
 80062b2:	60b9      	str	r1, [r7, #8]
 80062b4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80062b6:	e02c      	b.n	8006312 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	68b9      	ldr	r1, [r7, #8]
 80062bc:	68f8      	ldr	r0, [r7, #12]
 80062be:	f000 f8eb 	bl	8006498 <I2C_IsErrorOccurred>
 80062c2:	4603      	mov	r3, r0
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d001      	beq.n	80062cc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	e02a      	b.n	8006322 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062d2:	d01e      	beq.n	8006312 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062d4:	f7fc fb06 	bl	80028e4 <HAL_GetTick>
 80062d8:	4602      	mov	r2, r0
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	1ad3      	subs	r3, r2, r3
 80062de:	68ba      	ldr	r2, [r7, #8]
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d302      	bcc.n	80062ea <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d113      	bne.n	8006312 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062ee:	f043 0220 	orr.w	r2, r3, #32
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2220      	movs	r2, #32
 80062fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2200      	movs	r2, #0
 8006302:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2200      	movs	r2, #0
 800630a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800630e:	2301      	movs	r3, #1
 8006310:	e007      	b.n	8006322 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	699b      	ldr	r3, [r3, #24]
 8006318:	f003 0302 	and.w	r3, r3, #2
 800631c:	2b02      	cmp	r3, #2
 800631e:	d1cb      	bne.n	80062b8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006320:	2300      	movs	r3, #0
}
 8006322:	4618      	mov	r0, r3
 8006324:	3710      	adds	r7, #16
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}

0800632a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800632a:	b580      	push	{r7, lr}
 800632c:	b084      	sub	sp, #16
 800632e:	af00      	add	r7, sp, #0
 8006330:	60f8      	str	r0, [r7, #12]
 8006332:	60b9      	str	r1, [r7, #8]
 8006334:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006336:	e028      	b.n	800638a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006338:	687a      	ldr	r2, [r7, #4]
 800633a:	68b9      	ldr	r1, [r7, #8]
 800633c:	68f8      	ldr	r0, [r7, #12]
 800633e:	f000 f8ab 	bl	8006498 <I2C_IsErrorOccurred>
 8006342:	4603      	mov	r3, r0
 8006344:	2b00      	cmp	r3, #0
 8006346:	d001      	beq.n	800634c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	e026      	b.n	800639a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800634c:	f7fc faca 	bl	80028e4 <HAL_GetTick>
 8006350:	4602      	mov	r2, r0
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	1ad3      	subs	r3, r2, r3
 8006356:	68ba      	ldr	r2, [r7, #8]
 8006358:	429a      	cmp	r2, r3
 800635a:	d302      	bcc.n	8006362 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d113      	bne.n	800638a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006366:	f043 0220 	orr.w	r2, r3, #32
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2220      	movs	r2, #32
 8006372:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2200      	movs	r2, #0
 800637a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2200      	movs	r2, #0
 8006382:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8006386:	2301      	movs	r3, #1
 8006388:	e007      	b.n	800639a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	699b      	ldr	r3, [r3, #24]
 8006390:	f003 0320 	and.w	r3, r3, #32
 8006394:	2b20      	cmp	r3, #32
 8006396:	d1cf      	bne.n	8006338 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006398:	2300      	movs	r3, #0
}
 800639a:	4618      	mov	r0, r3
 800639c:	3710      	adds	r7, #16
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}
	...

080063a4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b084      	sub	sp, #16
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	60f8      	str	r0, [r7, #12]
 80063ac:	60b9      	str	r1, [r7, #8]
 80063ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80063b0:	e064      	b.n	800647c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	68b9      	ldr	r1, [r7, #8]
 80063b6:	68f8      	ldr	r0, [r7, #12]
 80063b8:	f000 f86e 	bl	8006498 <I2C_IsErrorOccurred>
 80063bc:	4603      	mov	r3, r0
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d001      	beq.n	80063c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	e062      	b.n	800648c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	699b      	ldr	r3, [r3, #24]
 80063cc:	f003 0320 	and.w	r3, r3, #32
 80063d0:	2b20      	cmp	r3, #32
 80063d2:	d138      	bne.n	8006446 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	699b      	ldr	r3, [r3, #24]
 80063da:	f003 0304 	and.w	r3, r3, #4
 80063de:	2b04      	cmp	r3, #4
 80063e0:	d105      	bne.n	80063ee <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d001      	beq.n	80063ee <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80063ea:	2300      	movs	r3, #0
 80063ec:	e04e      	b.n	800648c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	699b      	ldr	r3, [r3, #24]
 80063f4:	f003 0310 	and.w	r3, r3, #16
 80063f8:	2b10      	cmp	r3, #16
 80063fa:	d107      	bne.n	800640c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	2210      	movs	r2, #16
 8006402:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2204      	movs	r2, #4
 8006408:	645a      	str	r2, [r3, #68]	@ 0x44
 800640a:	e002      	b.n	8006412 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2200      	movs	r2, #0
 8006410:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	2220      	movs	r2, #32
 8006418:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	6859      	ldr	r1, [r3, #4]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681a      	ldr	r2, [r3, #0]
 8006424:	4b1b      	ldr	r3, [pc, #108]	@ (8006494 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8006426:	400b      	ands	r3, r1
 8006428:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2220      	movs	r2, #32
 800642e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2200      	movs	r2, #0
 8006436:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2200      	movs	r2, #0
 800643e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	e022      	b.n	800648c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006446:	f7fc fa4d 	bl	80028e4 <HAL_GetTick>
 800644a:	4602      	mov	r2, r0
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	1ad3      	subs	r3, r2, r3
 8006450:	68ba      	ldr	r2, [r7, #8]
 8006452:	429a      	cmp	r2, r3
 8006454:	d302      	bcc.n	800645c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d10f      	bne.n	800647c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006460:	f043 0220 	orr.w	r2, r3, #32
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2220      	movs	r2, #32
 800646c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2200      	movs	r2, #0
 8006474:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8006478:	2301      	movs	r3, #1
 800647a:	e007      	b.n	800648c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	699b      	ldr	r3, [r3, #24]
 8006482:	f003 0304 	and.w	r3, r3, #4
 8006486:	2b04      	cmp	r3, #4
 8006488:	d193      	bne.n	80063b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800648a:	2300      	movs	r3, #0
}
 800648c:	4618      	mov	r0, r3
 800648e:	3710      	adds	r7, #16
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}
 8006494:	fe00e800 	.word	0xfe00e800

08006498 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b08a      	sub	sp, #40	@ 0x28
 800649c:	af00      	add	r7, sp, #0
 800649e:	60f8      	str	r0, [r7, #12]
 80064a0:	60b9      	str	r1, [r7, #8]
 80064a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064a4:	2300      	movs	r3, #0
 80064a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	699b      	ldr	r3, [r3, #24]
 80064b0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80064b2:	2300      	movs	r3, #0
 80064b4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80064ba:	69bb      	ldr	r3, [r7, #24]
 80064bc:	f003 0310 	and.w	r3, r3, #16
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d068      	beq.n	8006596 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	2210      	movs	r2, #16
 80064ca:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80064cc:	e049      	b.n	8006562 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064d4:	d045      	beq.n	8006562 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80064d6:	f7fc fa05 	bl	80028e4 <HAL_GetTick>
 80064da:	4602      	mov	r2, r0
 80064dc:	69fb      	ldr	r3, [r7, #28]
 80064de:	1ad3      	subs	r3, r2, r3
 80064e0:	68ba      	ldr	r2, [r7, #8]
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d302      	bcc.n	80064ec <I2C_IsErrorOccurred+0x54>
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d13a      	bne.n	8006562 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80064f6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80064fe:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	699b      	ldr	r3, [r3, #24]
 8006506:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800650a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800650e:	d121      	bne.n	8006554 <I2C_IsErrorOccurred+0xbc>
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006516:	d01d      	beq.n	8006554 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006518:	7cfb      	ldrb	r3, [r7, #19]
 800651a:	2b20      	cmp	r3, #32
 800651c:	d01a      	beq.n	8006554 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	685a      	ldr	r2, [r3, #4]
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800652c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800652e:	f7fc f9d9 	bl	80028e4 <HAL_GetTick>
 8006532:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006534:	e00e      	b.n	8006554 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006536:	f7fc f9d5 	bl	80028e4 <HAL_GetTick>
 800653a:	4602      	mov	r2, r0
 800653c:	69fb      	ldr	r3, [r7, #28]
 800653e:	1ad3      	subs	r3, r2, r3
 8006540:	2b19      	cmp	r3, #25
 8006542:	d907      	bls.n	8006554 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8006544:	6a3b      	ldr	r3, [r7, #32]
 8006546:	f043 0320 	orr.w	r3, r3, #32
 800654a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800654c:	2301      	movs	r3, #1
 800654e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8006552:	e006      	b.n	8006562 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	699b      	ldr	r3, [r3, #24]
 800655a:	f003 0320 	and.w	r3, r3, #32
 800655e:	2b20      	cmp	r3, #32
 8006560:	d1e9      	bne.n	8006536 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	699b      	ldr	r3, [r3, #24]
 8006568:	f003 0320 	and.w	r3, r3, #32
 800656c:	2b20      	cmp	r3, #32
 800656e:	d003      	beq.n	8006578 <I2C_IsErrorOccurred+0xe0>
 8006570:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006574:	2b00      	cmp	r3, #0
 8006576:	d0aa      	beq.n	80064ce <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006578:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800657c:	2b00      	cmp	r3, #0
 800657e:	d103      	bne.n	8006588 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	2220      	movs	r2, #32
 8006586:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006588:	6a3b      	ldr	r3, [r7, #32]
 800658a:	f043 0304 	orr.w	r3, r3, #4
 800658e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006590:	2301      	movs	r3, #1
 8006592:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	699b      	ldr	r3, [r3, #24]
 800659c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800659e:	69bb      	ldr	r3, [r7, #24]
 80065a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d00b      	beq.n	80065c0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80065a8:	6a3b      	ldr	r3, [r7, #32]
 80065aa:	f043 0301 	orr.w	r3, r3, #1
 80065ae:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80065b8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80065c0:	69bb      	ldr	r3, [r7, #24]
 80065c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d00b      	beq.n	80065e2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80065ca:	6a3b      	ldr	r3, [r7, #32]
 80065cc:	f043 0308 	orr.w	r3, r3, #8
 80065d0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80065da:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80065dc:	2301      	movs	r3, #1
 80065de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80065e2:	69bb      	ldr	r3, [r7, #24]
 80065e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d00b      	beq.n	8006604 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80065ec:	6a3b      	ldr	r3, [r7, #32]
 80065ee:	f043 0302 	orr.w	r3, r3, #2
 80065f2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80065fc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8006604:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006608:	2b00      	cmp	r3, #0
 800660a:	d01c      	beq.n	8006646 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800660c:	68f8      	ldr	r0, [r7, #12]
 800660e:	f7ff fde9 	bl	80061e4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	6859      	ldr	r1, [r3, #4]
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	4b0d      	ldr	r3, [pc, #52]	@ (8006654 <I2C_IsErrorOccurred+0x1bc>)
 800661e:	400b      	ands	r3, r1
 8006620:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006626:	6a3b      	ldr	r3, [r7, #32]
 8006628:	431a      	orrs	r2, r3
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2220      	movs	r2, #32
 8006632:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2200      	movs	r2, #0
 800663a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2200      	movs	r2, #0
 8006642:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8006646:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800664a:	4618      	mov	r0, r3
 800664c:	3728      	adds	r7, #40	@ 0x28
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}
 8006652:	bf00      	nop
 8006654:	fe00e800 	.word	0xfe00e800

08006658 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006658:	b480      	push	{r7}
 800665a:	b087      	sub	sp, #28
 800665c:	af00      	add	r7, sp, #0
 800665e:	60f8      	str	r0, [r7, #12]
 8006660:	607b      	str	r3, [r7, #4]
 8006662:	460b      	mov	r3, r1
 8006664:	817b      	strh	r3, [r7, #10]
 8006666:	4613      	mov	r3, r2
 8006668:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800666a:	897b      	ldrh	r3, [r7, #10]
 800666c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006670:	7a7b      	ldrb	r3, [r7, #9]
 8006672:	041b      	lsls	r3, r3, #16
 8006674:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006678:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800667e:	6a3b      	ldr	r3, [r7, #32]
 8006680:	4313      	orrs	r3, r2
 8006682:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006686:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	685a      	ldr	r2, [r3, #4]
 800668e:	6a3b      	ldr	r3, [r7, #32]
 8006690:	0d5b      	lsrs	r3, r3, #21
 8006692:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006696:	4b07      	ldr	r3, [pc, #28]	@ (80066b4 <I2C_TransferConfig+0x5c>)
 8006698:	430b      	orrs	r3, r1
 800669a:	43db      	mvns	r3, r3
 800669c:	ea02 0103 	and.w	r1, r2, r3
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	697a      	ldr	r2, [r7, #20]
 80066a6:	430a      	orrs	r2, r1
 80066a8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80066aa:	bf00      	nop
 80066ac:	371c      	adds	r7, #28
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bc80      	pop	{r7}
 80066b2:	4770      	bx	lr
 80066b4:	03ff63ff 	.word	0x03ff63ff

080066b8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b083      	sub	sp, #12
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066c8:	b2db      	uxtb	r3, r3
 80066ca:	2b20      	cmp	r3, #32
 80066cc:	d138      	bne.n	8006740 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	d101      	bne.n	80066dc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80066d8:	2302      	movs	r3, #2
 80066da:	e032      	b.n	8006742 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2201      	movs	r2, #1
 80066e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2224      	movs	r2, #36	@ 0x24
 80066e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f022 0201 	bic.w	r2, r2, #1
 80066fa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	681a      	ldr	r2, [r3, #0]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800670a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	6819      	ldr	r1, [r3, #0]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	683a      	ldr	r2, [r7, #0]
 8006718:	430a      	orrs	r2, r1
 800671a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f042 0201 	orr.w	r2, r2, #1
 800672a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2220      	movs	r2, #32
 8006730:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2200      	movs	r2, #0
 8006738:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800673c:	2300      	movs	r3, #0
 800673e:	e000      	b.n	8006742 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006740:	2302      	movs	r3, #2
  }
}
 8006742:	4618      	mov	r0, r3
 8006744:	370c      	adds	r7, #12
 8006746:	46bd      	mov	sp, r7
 8006748:	bc80      	pop	{r7}
 800674a:	4770      	bx	lr

0800674c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800674c:	b480      	push	{r7}
 800674e:	b085      	sub	sp, #20
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800675c:	b2db      	uxtb	r3, r3
 800675e:	2b20      	cmp	r3, #32
 8006760:	d139      	bne.n	80067d6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006768:	2b01      	cmp	r3, #1
 800676a:	d101      	bne.n	8006770 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800676c:	2302      	movs	r3, #2
 800676e:	e033      	b.n	80067d8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2201      	movs	r2, #1
 8006774:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2224      	movs	r2, #36	@ 0x24
 800677c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f022 0201 	bic.w	r2, r2, #1
 800678e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800679e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	021b      	lsls	r3, r3, #8
 80067a4:	68fa      	ldr	r2, [r7, #12]
 80067a6:	4313      	orrs	r3, r2
 80067a8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	68fa      	ldr	r2, [r7, #12]
 80067b0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	681a      	ldr	r2, [r3, #0]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f042 0201 	orr.w	r2, r2, #1
 80067c0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2220      	movs	r2, #32
 80067c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2200      	movs	r2, #0
 80067ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80067d2:	2300      	movs	r3, #0
 80067d4:	e000      	b.n	80067d8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80067d6:	2302      	movs	r3, #2
  }
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3714      	adds	r7, #20
 80067dc:	46bd      	mov	sp, r7
 80067de:	bc80      	pop	{r7}
 80067e0:	4770      	bx	lr
	...

080067e4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80067e4:	b480      	push	{r7}
 80067e6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80067e8:	4b04      	ldr	r3, [pc, #16]	@ (80067fc <HAL_PWR_EnableBkUpAccess+0x18>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a03      	ldr	r2, [pc, #12]	@ (80067fc <HAL_PWR_EnableBkUpAccess+0x18>)
 80067ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067f2:	6013      	str	r3, [r2, #0]
}
 80067f4:	bf00      	nop
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bc80      	pop	{r7}
 80067fa:	4770      	bx	lr
 80067fc:	58000400 	.word	0x58000400

08006800 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b082      	sub	sp, #8
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	460b      	mov	r3, r1
 800680a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d10c      	bne.n	800682c <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8006812:	4b13      	ldr	r3, [pc, #76]	@ (8006860 <HAL_PWR_EnterSLEEPMode+0x60>)
 8006814:	695b      	ldr	r3, [r3, #20]
 8006816:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800681a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800681e:	d10d      	bne.n	800683c <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8006820:	f000 f83c 	bl	800689c <HAL_PWREx_DisableLowPowerRunMode>
 8006824:	4603      	mov	r3, r0
 8006826:	2b00      	cmp	r3, #0
 8006828:	d008      	beq.n	800683c <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 800682a:	e015      	b.n	8006858 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 800682c:	4b0c      	ldr	r3, [pc, #48]	@ (8006860 <HAL_PWR_EnterSLEEPMode+0x60>)
 800682e:	695b      	ldr	r3, [r3, #20]
 8006830:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006834:	2b00      	cmp	r3, #0
 8006836:	d101      	bne.n	800683c <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8006838:	f000 f822 	bl	8006880 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800683c:	4b09      	ldr	r3, [pc, #36]	@ (8006864 <HAL_PWR_EnterSLEEPMode+0x64>)
 800683e:	691b      	ldr	r3, [r3, #16]
 8006840:	4a08      	ldr	r2, [pc, #32]	@ (8006864 <HAL_PWR_EnterSLEEPMode+0x64>)
 8006842:	f023 0304 	bic.w	r3, r3, #4
 8006846:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8006848:	78fb      	ldrb	r3, [r7, #3]
 800684a:	2b01      	cmp	r3, #1
 800684c:	d101      	bne.n	8006852 <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800684e:	bf30      	wfi
 8006850:	e002      	b.n	8006858 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8006852:	bf40      	sev
    __WFE();
 8006854:	bf20      	wfe
    __WFE();
 8006856:	bf20      	wfe
  }
}
 8006858:	3708      	adds	r7, #8
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
 800685e:	bf00      	nop
 8006860:	58000400 	.word	0x58000400
 8006864:	e000ed00 	.word	0xe000ed00

08006868 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006868:	b480      	push	{r7}
 800686a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800686c:	4b03      	ldr	r3, [pc, #12]	@ (800687c <HAL_PWREx_GetVoltageRange+0x14>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8006874:	4618      	mov	r0, r3
 8006876:	46bd      	mov	sp, r7
 8006878:	bc80      	pop	{r7}
 800687a:	4770      	bx	lr
 800687c:	58000400 	.word	0x58000400

08006880 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8006880:	b480      	push	{r7}
 8006882:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8006884:	4b04      	ldr	r3, [pc, #16]	@ (8006898 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a03      	ldr	r2, [pc, #12]	@ (8006898 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 800688a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800688e:	6013      	str	r3, [r2, #0]
}
 8006890:	bf00      	nop
 8006892:	46bd      	mov	sp, r7
 8006894:	bc80      	pop	{r7}
 8006896:	4770      	bx	lr
 8006898:	58000400 	.word	0x58000400

0800689c <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 800689c:	b480      	push	{r7}
 800689e:	b083      	sub	sp, #12
 80068a0:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 80068a2:	4b16      	ldr	r3, [pc, #88]	@ (80068fc <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a15      	ldr	r2, [pc, #84]	@ (80068fc <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80068a8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80068ac:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 80068ae:	4b14      	ldr	r3, [pc, #80]	@ (8006900 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	2232      	movs	r2, #50	@ 0x32
 80068b4:	fb02 f303 	mul.w	r3, r2, r3
 80068b8:	4a12      	ldr	r2, [pc, #72]	@ (8006904 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 80068ba:	fba2 2303 	umull	r2, r3, r2, r3
 80068be:	0c9b      	lsrs	r3, r3, #18
 80068c0:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80068c2:	e002      	b.n	80068ca <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	3b01      	subs	r3, #1
 80068c8:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80068ca:	4b0c      	ldr	r3, [pc, #48]	@ (80068fc <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80068cc:	695b      	ldr	r3, [r3, #20]
 80068ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80068d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068d6:	d102      	bne.n	80068de <HAL_PWREx_DisableLowPowerRunMode+0x42>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d1f2      	bne.n	80068c4 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80068de:	4b07      	ldr	r3, [pc, #28]	@ (80068fc <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80068e0:	695b      	ldr	r3, [r3, #20]
 80068e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80068e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068ea:	d101      	bne.n	80068f0 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 80068ec:	2303      	movs	r3, #3
 80068ee:	e000      	b.n	80068f2 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 80068f0:	2300      	movs	r3, #0
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	370c      	adds	r7, #12
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bc80      	pop	{r7}
 80068fa:	4770      	bx	lr
 80068fc:	58000400 	.word	0x58000400
 8006900:	20000004 	.word	0x20000004
 8006904:	431bde83 	.word	0x431bde83

08006908 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8006908:	b480      	push	{r7}
 800690a:	b083      	sub	sp, #12
 800690c:	af00      	add	r7, sp, #0
 800690e:	4603      	mov	r3, r0
 8006910:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8006912:	4b10      	ldr	r3, [pc, #64]	@ (8006954 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f023 0307 	bic.w	r3, r3, #7
 800691a:	4a0e      	ldr	r2, [pc, #56]	@ (8006954 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 800691c:	f043 0302 	orr.w	r3, r3, #2
 8006920:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8006922:	4b0d      	ldr	r3, [pc, #52]	@ (8006958 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8006924:	691b      	ldr	r3, [r3, #16]
 8006926:	4a0c      	ldr	r2, [pc, #48]	@ (8006958 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8006928:	f043 0304 	orr.w	r3, r3, #4
 800692c:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 800692e:	79fb      	ldrb	r3, [r7, #7]
 8006930:	2b01      	cmp	r3, #1
 8006932:	d101      	bne.n	8006938 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8006934:	bf30      	wfi
 8006936:	e002      	b.n	800693e <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8006938:	bf40      	sev
    __WFE();
 800693a:	bf20      	wfe
    __WFE();
 800693c:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800693e:	4b06      	ldr	r3, [pc, #24]	@ (8006958 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8006940:	691b      	ldr	r3, [r3, #16]
 8006942:	4a05      	ldr	r2, [pc, #20]	@ (8006958 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8006944:	f023 0304 	bic.w	r3, r3, #4
 8006948:	6113      	str	r3, [r2, #16]
}
 800694a:	bf00      	nop
 800694c:	370c      	adds	r7, #12
 800694e:	46bd      	mov	sp, r7
 8006950:	bc80      	pop	{r7}
 8006952:	4770      	bx	lr
 8006954:	58000400 	.word	0x58000400
 8006958:	e000ed00 	.word	0xe000ed00

0800695c <LL_PWR_IsEnabledBkUpAccess>:
{
 800695c:	b480      	push	{r7}
 800695e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8006960:	4b06      	ldr	r3, [pc, #24]	@ (800697c <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006968:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800696c:	d101      	bne.n	8006972 <LL_PWR_IsEnabledBkUpAccess+0x16>
 800696e:	2301      	movs	r3, #1
 8006970:	e000      	b.n	8006974 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8006972:	2300      	movs	r3, #0
}
 8006974:	4618      	mov	r0, r3
 8006976:	46bd      	mov	sp, r7
 8006978:	bc80      	pop	{r7}
 800697a:	4770      	bx	lr
 800697c:	58000400 	.word	0x58000400

08006980 <LL_RCC_HSE_EnableTcxo>:
{
 8006980:	b480      	push	{r7}
 8006982:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8006984:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800698e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006992:	6013      	str	r3, [r2, #0]
}
 8006994:	bf00      	nop
 8006996:	46bd      	mov	sp, r7
 8006998:	bc80      	pop	{r7}
 800699a:	4770      	bx	lr

0800699c <LL_RCC_HSE_DisableTcxo>:
{
 800699c:	b480      	push	{r7}
 800699e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80069a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80069aa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80069ae:	6013      	str	r3, [r2, #0]
}
 80069b0:	bf00      	nop
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bc80      	pop	{r7}
 80069b6:	4770      	bx	lr

080069b8 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80069b8:	b480      	push	{r7}
 80069ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80069bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80069c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80069ca:	d101      	bne.n	80069d0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80069cc:	2301      	movs	r3, #1
 80069ce:	e000      	b.n	80069d2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80069d0:	2300      	movs	r3, #0
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bc80      	pop	{r7}
 80069d8:	4770      	bx	lr

080069da <LL_RCC_HSE_Enable>:
{
 80069da:	b480      	push	{r7}
 80069dc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80069de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80069e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80069ec:	6013      	str	r3, [r2, #0]
}
 80069ee:	bf00      	nop
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bc80      	pop	{r7}
 80069f4:	4770      	bx	lr

080069f6 <LL_RCC_HSE_Disable>:
{
 80069f6:	b480      	push	{r7}
 80069f8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80069fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006a04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a08:	6013      	str	r3, [r2, #0]
}
 8006a0a:	bf00      	nop
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bc80      	pop	{r7}
 8006a10:	4770      	bx	lr

08006a12 <LL_RCC_HSE_IsReady>:
{
 8006a12:	b480      	push	{r7}
 8006a14:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8006a16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006a24:	d101      	bne.n	8006a2a <LL_RCC_HSE_IsReady+0x18>
 8006a26:	2301      	movs	r3, #1
 8006a28:	e000      	b.n	8006a2c <LL_RCC_HSE_IsReady+0x1a>
 8006a2a:	2300      	movs	r3, #0
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bc80      	pop	{r7}
 8006a32:	4770      	bx	lr

08006a34 <LL_RCC_HSI_Enable>:
{
 8006a34:	b480      	push	{r7}
 8006a36:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8006a38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006a42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a46:	6013      	str	r3, [r2, #0]
}
 8006a48:	bf00      	nop
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bc80      	pop	{r7}
 8006a4e:	4770      	bx	lr

08006a50 <LL_RCC_HSI_Disable>:
{
 8006a50:	b480      	push	{r7}
 8006a52:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8006a54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006a5e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a62:	6013      	str	r3, [r2, #0]
}
 8006a64:	bf00      	nop
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bc80      	pop	{r7}
 8006a6a:	4770      	bx	lr

08006a6c <LL_RCC_HSI_IsReady>:
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8006a70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a7e:	d101      	bne.n	8006a84 <LL_RCC_HSI_IsReady+0x18>
 8006a80:	2301      	movs	r3, #1
 8006a82:	e000      	b.n	8006a86 <LL_RCC_HSI_IsReady+0x1a>
 8006a84:	2300      	movs	r3, #0
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bc80      	pop	{r7}
 8006a8c:	4770      	bx	lr

08006a8e <LL_RCC_HSI_SetCalibTrimming>:
{
 8006a8e:	b480      	push	{r7}
 8006a90:	b083      	sub	sp, #12
 8006a92:	af00      	add	r7, sp, #0
 8006a94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8006a96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	061b      	lsls	r3, r3, #24
 8006aa4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	604b      	str	r3, [r1, #4]
}
 8006aac:	bf00      	nop
 8006aae:	370c      	adds	r7, #12
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bc80      	pop	{r7}
 8006ab4:	4770      	bx	lr

08006ab6 <LL_RCC_LSE_IsReady>:
{
 8006ab6:	b480      	push	{r7}
 8006ab8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006aba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ac2:	f003 0302 	and.w	r3, r3, #2
 8006ac6:	2b02      	cmp	r3, #2
 8006ac8:	d101      	bne.n	8006ace <LL_RCC_LSE_IsReady+0x18>
 8006aca:	2301      	movs	r3, #1
 8006acc:	e000      	b.n	8006ad0 <LL_RCC_LSE_IsReady+0x1a>
 8006ace:	2300      	movs	r3, #0
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bc80      	pop	{r7}
 8006ad6:	4770      	bx	lr

08006ad8 <LL_RCC_LSI_Enable>:
{
 8006ad8:	b480      	push	{r7}
 8006ada:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8006adc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ae0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ae4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006ae8:	f043 0301 	orr.w	r3, r3, #1
 8006aec:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8006af0:	bf00      	nop
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bc80      	pop	{r7}
 8006af6:	4770      	bx	lr

08006af8 <LL_RCC_LSI_Disable>:
{
 8006af8:	b480      	push	{r7}
 8006afa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8006afc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b04:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006b08:	f023 0301 	bic.w	r3, r3, #1
 8006b0c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8006b10:	bf00      	nop
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bc80      	pop	{r7}
 8006b16:	4770      	bx	lr

08006b18 <LL_RCC_LSI_IsReady>:
{
 8006b18:	b480      	push	{r7}
 8006b1a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8006b1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b24:	f003 0302 	and.w	r3, r3, #2
 8006b28:	2b02      	cmp	r3, #2
 8006b2a:	d101      	bne.n	8006b30 <LL_RCC_LSI_IsReady+0x18>
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	e000      	b.n	8006b32 <LL_RCC_LSI_IsReady+0x1a>
 8006b30:	2300      	movs	r3, #0
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bc80      	pop	{r7}
 8006b38:	4770      	bx	lr

08006b3a <LL_RCC_MSI_Enable>:
{
 8006b3a:	b480      	push	{r7}
 8006b3c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8006b3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006b48:	f043 0301 	orr.w	r3, r3, #1
 8006b4c:	6013      	str	r3, [r2, #0]
}
 8006b4e:	bf00      	nop
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bc80      	pop	{r7}
 8006b54:	4770      	bx	lr

08006b56 <LL_RCC_MSI_Disable>:
{
 8006b56:	b480      	push	{r7}
 8006b58:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8006b5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006b64:	f023 0301 	bic.w	r3, r3, #1
 8006b68:	6013      	str	r3, [r2, #0]
}
 8006b6a:	bf00      	nop
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bc80      	pop	{r7}
 8006b70:	4770      	bx	lr

08006b72 <LL_RCC_MSI_IsReady>:
{
 8006b72:	b480      	push	{r7}
 8006b74:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8006b76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f003 0302 	and.w	r3, r3, #2
 8006b80:	2b02      	cmp	r3, #2
 8006b82:	d101      	bne.n	8006b88 <LL_RCC_MSI_IsReady+0x16>
 8006b84:	2301      	movs	r3, #1
 8006b86:	e000      	b.n	8006b8a <LL_RCC_MSI_IsReady+0x18>
 8006b88:	2300      	movs	r3, #0
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bc80      	pop	{r7}
 8006b90:	4770      	bx	lr

08006b92 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8006b92:	b480      	push	{r7}
 8006b94:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8006b96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f003 0308 	and.w	r3, r3, #8
 8006ba0:	2b08      	cmp	r3, #8
 8006ba2:	d101      	bne.n	8006ba8 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	e000      	b.n	8006baa <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8006ba8:	2300      	movs	r3, #0
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bc80      	pop	{r7}
 8006bb0:	4770      	bx	lr

08006bb2 <LL_RCC_MSI_GetRange>:
{
 8006bb2:	b480      	push	{r7}
 8006bb4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8006bb6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bc80      	pop	{r7}
 8006bc6:	4770      	bx	lr

08006bc8 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8006bc8:	b480      	push	{r7}
 8006bca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8006bcc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006bd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006bd4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bc80      	pop	{r7}
 8006bde:	4770      	bx	lr

08006be0 <LL_RCC_MSI_SetCalibTrimming>:
{
 8006be0:	b480      	push	{r7}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8006be8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	021b      	lsls	r3, r3, #8
 8006bf6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	604b      	str	r3, [r1, #4]
}
 8006bfe:	bf00      	nop
 8006c00:	370c      	adds	r7, #12
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bc80      	pop	{r7}
 8006c06:	4770      	bx	lr

08006c08 <LL_RCC_SetSysClkSource>:
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b083      	sub	sp, #12
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8006c10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c14:	689b      	ldr	r3, [r3, #8]
 8006c16:	f023 0203 	bic.w	r2, r3, #3
 8006c1a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	4313      	orrs	r3, r2
 8006c22:	608b      	str	r3, [r1, #8]
}
 8006c24:	bf00      	nop
 8006c26:	370c      	adds	r7, #12
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bc80      	pop	{r7}
 8006c2c:	4770      	bx	lr

08006c2e <LL_RCC_GetSysClkSource>:
{
 8006c2e:	b480      	push	{r7}
 8006c30:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006c32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	f003 030c 	and.w	r3, r3, #12
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bc80      	pop	{r7}
 8006c42:	4770      	bx	lr

08006c44 <LL_RCC_SetAHBPrescaler>:
{
 8006c44:	b480      	push	{r7}
 8006c46:	b083      	sub	sp, #12
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8006c4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c50:	689b      	ldr	r3, [r3, #8]
 8006c52:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006c56:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	608b      	str	r3, [r1, #8]
}
 8006c60:	bf00      	nop
 8006c62:	370c      	adds	r7, #12
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bc80      	pop	{r7}
 8006c68:	4770      	bx	lr

08006c6a <LL_RCC_SetAHB3Prescaler>:
{
 8006c6a:	b480      	push	{r7}
 8006c6c:	b083      	sub	sp, #12
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8006c72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c76:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006c7a:	f023 020f 	bic.w	r2, r3, #15
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	091b      	lsrs	r3, r3, #4
 8006c82:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006c86:	4313      	orrs	r3, r2
 8006c88:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8006c8c:	bf00      	nop
 8006c8e:	370c      	adds	r7, #12
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bc80      	pop	{r7}
 8006c94:	4770      	bx	lr

08006c96 <LL_RCC_SetAPB1Prescaler>:
{
 8006c96:	b480      	push	{r7}
 8006c98:	b083      	sub	sp, #12
 8006c9a:	af00      	add	r7, sp, #0
 8006c9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8006c9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ca2:	689b      	ldr	r3, [r3, #8]
 8006ca4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006ca8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	608b      	str	r3, [r1, #8]
}
 8006cb2:	bf00      	nop
 8006cb4:	370c      	adds	r7, #12
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bc80      	pop	{r7}
 8006cba:	4770      	bx	lr

08006cbc <LL_RCC_SetAPB2Prescaler>:
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b083      	sub	sp, #12
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8006cc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006cce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	608b      	str	r3, [r1, #8]
}
 8006cd8:	bf00      	nop
 8006cda:	370c      	adds	r7, #12
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bc80      	pop	{r7}
 8006ce0:	4770      	bx	lr

08006ce2 <LL_RCC_GetAHBPrescaler>:
{
 8006ce2:	b480      	push	{r7}
 8006ce4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8006ce6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bc80      	pop	{r7}
 8006cf6:	4770      	bx	lr

08006cf8 <LL_RCC_GetAHB3Prescaler>:
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8006cfc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d00:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006d04:	011b      	lsls	r3, r3, #4
 8006d06:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bc80      	pop	{r7}
 8006d10:	4770      	bx	lr

08006d12 <LL_RCC_GetAPB1Prescaler>:
{
 8006d12:	b480      	push	{r7}
 8006d14:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8006d16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bc80      	pop	{r7}
 8006d26:	4770      	bx	lr

08006d28 <LL_RCC_GetAPB2Prescaler>:
{
 8006d28:	b480      	push	{r7}
 8006d2a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8006d2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d30:	689b      	ldr	r3, [r3, #8]
 8006d32:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bc80      	pop	{r7}
 8006d3c:	4770      	bx	lr

08006d3e <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8006d3e:	b480      	push	{r7}
 8006d40:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8006d42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006d4c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006d50:	6013      	str	r3, [r2, #0]
}
 8006d52:	bf00      	nop
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bc80      	pop	{r7}
 8006d58:	4770      	bx	lr

08006d5a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8006d5a:	b480      	push	{r7}
 8006d5c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8006d5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006d68:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006d6c:	6013      	str	r3, [r2, #0]
}
 8006d6e:	bf00      	nop
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bc80      	pop	{r7}
 8006d74:	4770      	bx	lr

08006d76 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8006d76:	b480      	push	{r7}
 8006d78:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8006d7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d84:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006d88:	d101      	bne.n	8006d8e <LL_RCC_PLL_IsReady+0x18>
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	e000      	b.n	8006d90 <LL_RCC_PLL_IsReady+0x1a>
 8006d8e:	2300      	movs	r3, #0
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bc80      	pop	{r7}
 8006d96:	4770      	bx	lr

08006d98 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8006d9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006da0:	68db      	ldr	r3, [r3, #12]
 8006da2:	0a1b      	lsrs	r3, r3, #8
 8006da4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bc80      	pop	{r7}
 8006dae:	4770      	bx	lr

08006db0 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8006db0:	b480      	push	{r7}
 8006db2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8006db4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006db8:	68db      	ldr	r3, [r3, #12]
 8006dba:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bc80      	pop	{r7}
 8006dc4:	4770      	bx	lr

08006dc6 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8006dc6:	b480      	push	{r7}
 8006dc8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8006dca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006dce:	68db      	ldr	r3, [r3, #12]
 8006dd0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bc80      	pop	{r7}
 8006dda:	4770      	bx	lr

08006ddc <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8006de0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006de4:	68db      	ldr	r3, [r3, #12]
 8006de6:	f003 0303 	and.w	r3, r3, #3
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bc80      	pop	{r7}
 8006df0:	4770      	bx	lr

08006df2 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8006df2:	b480      	push	{r7}
 8006df4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8006df6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006dfa:	689b      	ldr	r3, [r3, #8]
 8006dfc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006e00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e04:	d101      	bne.n	8006e0a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8006e06:	2301      	movs	r3, #1
 8006e08:	e000      	b.n	8006e0c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8006e0a:	2300      	movs	r3, #0
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bc80      	pop	{r7}
 8006e12:	4770      	bx	lr

08006e14 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8006e14:	b480      	push	{r7}
 8006e16:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8006e18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e1c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006e20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006e24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e28:	d101      	bne.n	8006e2e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	e000      	b.n	8006e30 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8006e2e:	2300      	movs	r3, #0
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bc80      	pop	{r7}
 8006e36:	4770      	bx	lr

08006e38 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8006e3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e46:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e4a:	d101      	bne.n	8006e50 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	e000      	b.n	8006e52 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8006e50:	2300      	movs	r3, #0
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bc80      	pop	{r7}
 8006e58:	4770      	bx	lr

08006e5a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8006e5a:	b480      	push	{r7}
 8006e5c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8006e5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e62:	689b      	ldr	r3, [r3, #8]
 8006e64:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006e68:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006e6c:	d101      	bne.n	8006e72 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8006e6e:	2301      	movs	r3, #1
 8006e70:	e000      	b.n	8006e74 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8006e72:	2300      	movs	r3, #0
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bc80      	pop	{r7}
 8006e7a:	4770      	bx	lr

08006e7c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b088      	sub	sp, #32
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d101      	bne.n	8006e8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	e36f      	b.n	800756e <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e8e:	f7ff fece 	bl	8006c2e <LL_RCC_GetSysClkSource>
 8006e92:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006e94:	f7ff ffa2 	bl	8006ddc <LL_RCC_PLL_GetMainSource>
 8006e98:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f003 0320 	and.w	r3, r3, #32
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	f000 80c4 	beq.w	8007030 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006ea8:	69fb      	ldr	r3, [r7, #28]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d005      	beq.n	8006eba <HAL_RCC_OscConfig+0x3e>
 8006eae:	69fb      	ldr	r3, [r7, #28]
 8006eb0:	2b0c      	cmp	r3, #12
 8006eb2:	d176      	bne.n	8006fa2 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006eb4:	69bb      	ldr	r3, [r7, #24]
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d173      	bne.n	8006fa2 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6a1b      	ldr	r3, [r3, #32]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d101      	bne.n	8006ec6 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	e353      	b.n	800756e <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006eca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f003 0308 	and.w	r3, r3, #8
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d005      	beq.n	8006ee4 <HAL_RCC_OscConfig+0x68>
 8006ed8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006ee2:	e006      	b.n	8006ef2 <HAL_RCC_OscConfig+0x76>
 8006ee4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ee8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006eec:	091b      	lsrs	r3, r3, #4
 8006eee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d222      	bcs.n	8006f3c <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006efa:	4618      	mov	r0, r3
 8006efc:	f000 fd3c 	bl	8007978 <RCC_SetFlashLatencyFromMSIRange>
 8006f00:	4603      	mov	r3, r0
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d001      	beq.n	8006f0a <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8006f06:	2301      	movs	r3, #1
 8006f08:	e331      	b.n	800756e <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006f0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006f14:	f043 0308 	orr.w	r3, r3, #8
 8006f18:	6013      	str	r3, [r2, #0]
 8006f1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f28:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f34:	4618      	mov	r0, r3
 8006f36:	f7ff fe53 	bl	8006be0 <LL_RCC_MSI_SetCalibTrimming>
 8006f3a:	e021      	b.n	8006f80 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006f3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006f46:	f043 0308 	orr.w	r3, r3, #8
 8006f4a:	6013      	str	r3, [r2, #0]
 8006f4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f5a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f66:	4618      	mov	r0, r3
 8006f68:	f7ff fe3a 	bl	8006be0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f70:	4618      	mov	r0, r3
 8006f72:	f000 fd01 	bl	8007978 <RCC_SetFlashLatencyFromMSIRange>
 8006f76:	4603      	mov	r3, r0
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d001      	beq.n	8006f80 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	e2f6      	b.n	800756e <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006f80:	f000 fcc2 	bl	8007908 <HAL_RCC_GetHCLKFreq>
 8006f84:	4603      	mov	r3, r0
 8006f86:	4aa7      	ldr	r2, [pc, #668]	@ (8007224 <HAL_RCC_OscConfig+0x3a8>)
 8006f88:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8006f8a:	4ba7      	ldr	r3, [pc, #668]	@ (8007228 <HAL_RCC_OscConfig+0x3ac>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f7fb fc9e 	bl	80028d0 <HAL_InitTick>
 8006f94:	4603      	mov	r3, r0
 8006f96:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8006f98:	7cfb      	ldrb	r3, [r7, #19]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d047      	beq.n	800702e <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8006f9e:	7cfb      	ldrb	r3, [r7, #19]
 8006fa0:	e2e5      	b.n	800756e <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6a1b      	ldr	r3, [r3, #32]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d02c      	beq.n	8007004 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006faa:	f7ff fdc6 	bl	8006b3a <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006fae:	f7fb fc99 	bl	80028e4 <HAL_GetTick>
 8006fb2:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8006fb4:	e008      	b.n	8006fc8 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006fb6:	f7fb fc95 	bl	80028e4 <HAL_GetTick>
 8006fba:	4602      	mov	r2, r0
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	1ad3      	subs	r3, r2, r3
 8006fc0:	2b02      	cmp	r3, #2
 8006fc2:	d901      	bls.n	8006fc8 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8006fc4:	2303      	movs	r3, #3
 8006fc6:	e2d2      	b.n	800756e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8006fc8:	f7ff fdd3 	bl	8006b72 <LL_RCC_MSI_IsReady>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d0f1      	beq.n	8006fb6 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006fd2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006fdc:	f043 0308 	orr.w	r3, r3, #8
 8006fe0:	6013      	str	r3, [r2, #0]
 8006fe2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ff0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f7ff fdef 	bl	8006be0 <LL_RCC_MSI_SetCalibTrimming>
 8007002:	e015      	b.n	8007030 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007004:	f7ff fda7 	bl	8006b56 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007008:	f7fb fc6c 	bl	80028e4 <HAL_GetTick>
 800700c:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800700e:	e008      	b.n	8007022 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007010:	f7fb fc68 	bl	80028e4 <HAL_GetTick>
 8007014:	4602      	mov	r2, r0
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	1ad3      	subs	r3, r2, r3
 800701a:	2b02      	cmp	r3, #2
 800701c:	d901      	bls.n	8007022 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800701e:	2303      	movs	r3, #3
 8007020:	e2a5      	b.n	800756e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8007022:	f7ff fda6 	bl	8006b72 <LL_RCC_MSI_IsReady>
 8007026:	4603      	mov	r3, r0
 8007028:	2b00      	cmp	r3, #0
 800702a:	d1f1      	bne.n	8007010 <HAL_RCC_OscConfig+0x194>
 800702c:	e000      	b.n	8007030 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800702e:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f003 0301 	and.w	r3, r3, #1
 8007038:	2b00      	cmp	r3, #0
 800703a:	d058      	beq.n	80070ee <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800703c:	69fb      	ldr	r3, [r7, #28]
 800703e:	2b08      	cmp	r3, #8
 8007040:	d005      	beq.n	800704e <HAL_RCC_OscConfig+0x1d2>
 8007042:	69fb      	ldr	r3, [r7, #28]
 8007044:	2b0c      	cmp	r3, #12
 8007046:	d108      	bne.n	800705a <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007048:	69bb      	ldr	r3, [r7, #24]
 800704a:	2b03      	cmp	r3, #3
 800704c:	d105      	bne.n	800705a <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d14b      	bne.n	80070ee <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8007056:	2301      	movs	r3, #1
 8007058:	e289      	b.n	800756e <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800705a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800706c:	4313      	orrs	r3, r2
 800706e:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007078:	d102      	bne.n	8007080 <HAL_RCC_OscConfig+0x204>
 800707a:	f7ff fcae 	bl	80069da <LL_RCC_HSE_Enable>
 800707e:	e00d      	b.n	800709c <HAL_RCC_OscConfig+0x220>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8007088:	d104      	bne.n	8007094 <HAL_RCC_OscConfig+0x218>
 800708a:	f7ff fc79 	bl	8006980 <LL_RCC_HSE_EnableTcxo>
 800708e:	f7ff fca4 	bl	80069da <LL_RCC_HSE_Enable>
 8007092:	e003      	b.n	800709c <HAL_RCC_OscConfig+0x220>
 8007094:	f7ff fcaf 	bl	80069f6 <LL_RCC_HSE_Disable>
 8007098:	f7ff fc80 	bl	800699c <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d012      	beq.n	80070ca <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070a4:	f7fb fc1e 	bl	80028e4 <HAL_GetTick>
 80070a8:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80070aa:	e008      	b.n	80070be <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80070ac:	f7fb fc1a 	bl	80028e4 <HAL_GetTick>
 80070b0:	4602      	mov	r2, r0
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	1ad3      	subs	r3, r2, r3
 80070b6:	2b64      	cmp	r3, #100	@ 0x64
 80070b8:	d901      	bls.n	80070be <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 80070ba:	2303      	movs	r3, #3
 80070bc:	e257      	b.n	800756e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 80070be:	f7ff fca8 	bl	8006a12 <LL_RCC_HSE_IsReady>
 80070c2:	4603      	mov	r3, r0
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d0f1      	beq.n	80070ac <HAL_RCC_OscConfig+0x230>
 80070c8:	e011      	b.n	80070ee <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070ca:	f7fb fc0b 	bl	80028e4 <HAL_GetTick>
 80070ce:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80070d0:	e008      	b.n	80070e4 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80070d2:	f7fb fc07 	bl	80028e4 <HAL_GetTick>
 80070d6:	4602      	mov	r2, r0
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	1ad3      	subs	r3, r2, r3
 80070dc:	2b64      	cmp	r3, #100	@ 0x64
 80070de:	d901      	bls.n	80070e4 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80070e0:	2303      	movs	r3, #3
 80070e2:	e244      	b.n	800756e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 80070e4:	f7ff fc95 	bl	8006a12 <LL_RCC_HSE_IsReady>
 80070e8:	4603      	mov	r3, r0
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d1f1      	bne.n	80070d2 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f003 0302 	and.w	r3, r3, #2
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d046      	beq.n	8007188 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80070fa:	69fb      	ldr	r3, [r7, #28]
 80070fc:	2b04      	cmp	r3, #4
 80070fe:	d005      	beq.n	800710c <HAL_RCC_OscConfig+0x290>
 8007100:	69fb      	ldr	r3, [r7, #28]
 8007102:	2b0c      	cmp	r3, #12
 8007104:	d10e      	bne.n	8007124 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007106:	69bb      	ldr	r3, [r7, #24]
 8007108:	2b02      	cmp	r3, #2
 800710a:	d10b      	bne.n	8007124 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	691b      	ldr	r3, [r3, #16]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d101      	bne.n	8007118 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8007114:	2301      	movs	r3, #1
 8007116:	e22a      	b.n	800756e <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	695b      	ldr	r3, [r3, #20]
 800711c:	4618      	mov	r0, r3
 800711e:	f7ff fcb6 	bl	8006a8e <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8007122:	e031      	b.n	8007188 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	691b      	ldr	r3, [r3, #16]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d019      	beq.n	8007160 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800712c:	f7ff fc82 	bl	8006a34 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007130:	f7fb fbd8 	bl	80028e4 <HAL_GetTick>
 8007134:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8007136:	e008      	b.n	800714a <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007138:	f7fb fbd4 	bl	80028e4 <HAL_GetTick>
 800713c:	4602      	mov	r2, r0
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	1ad3      	subs	r3, r2, r3
 8007142:	2b02      	cmp	r3, #2
 8007144:	d901      	bls.n	800714a <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8007146:	2303      	movs	r3, #3
 8007148:	e211      	b.n	800756e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 800714a:	f7ff fc8f 	bl	8006a6c <LL_RCC_HSI_IsReady>
 800714e:	4603      	mov	r3, r0
 8007150:	2b00      	cmp	r3, #0
 8007152:	d0f1      	beq.n	8007138 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	695b      	ldr	r3, [r3, #20]
 8007158:	4618      	mov	r0, r3
 800715a:	f7ff fc98 	bl	8006a8e <LL_RCC_HSI_SetCalibTrimming>
 800715e:	e013      	b.n	8007188 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007160:	f7ff fc76 	bl	8006a50 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007164:	f7fb fbbe 	bl	80028e4 <HAL_GetTick>
 8007168:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800716a:	e008      	b.n	800717e <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800716c:	f7fb fbba 	bl	80028e4 <HAL_GetTick>
 8007170:	4602      	mov	r2, r0
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	1ad3      	subs	r3, r2, r3
 8007176:	2b02      	cmp	r3, #2
 8007178:	d901      	bls.n	800717e <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 800717a:	2303      	movs	r3, #3
 800717c:	e1f7      	b.n	800756e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 800717e:	f7ff fc75 	bl	8006a6c <LL_RCC_HSI_IsReady>
 8007182:	4603      	mov	r3, r0
 8007184:	2b00      	cmp	r3, #0
 8007186:	d1f1      	bne.n	800716c <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f003 0308 	and.w	r3, r3, #8
 8007190:	2b00      	cmp	r3, #0
 8007192:	d06e      	beq.n	8007272 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	699b      	ldr	r3, [r3, #24]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d056      	beq.n	800724a <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 800719c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80071a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80071a4:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	69da      	ldr	r2, [r3, #28]
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	f003 0310 	and.w	r3, r3, #16
 80071b0:	429a      	cmp	r2, r3
 80071b2:	d031      	beq.n	8007218 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f003 0302 	and.w	r3, r3, #2
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d006      	beq.n	80071cc <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d101      	bne.n	80071cc <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 80071c8:	2301      	movs	r3, #1
 80071ca:	e1d0      	b.n	800756e <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f003 0301 	and.w	r3, r3, #1
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d013      	beq.n	80071fe <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 80071d6:	f7ff fc8f 	bl	8006af8 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80071da:	f7fb fb83 	bl	80028e4 <HAL_GetTick>
 80071de:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80071e0:	e008      	b.n	80071f4 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80071e2:	f7fb fb7f 	bl	80028e4 <HAL_GetTick>
 80071e6:	4602      	mov	r2, r0
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	1ad3      	subs	r3, r2, r3
 80071ec:	2b11      	cmp	r3, #17
 80071ee:	d901      	bls.n	80071f4 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 80071f0:	2303      	movs	r3, #3
 80071f2:	e1bc      	b.n	800756e <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 80071f4:	f7ff fc90 	bl	8006b18 <LL_RCC_LSI_IsReady>
 80071f8:	4603      	mov	r3, r0
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d1f1      	bne.n	80071e2 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80071fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007202:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007206:	f023 0210 	bic.w	r2, r3, #16
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	69db      	ldr	r3, [r3, #28]
 800720e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007212:	4313      	orrs	r3, r2
 8007214:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007218:	f7ff fc5e 	bl	8006ad8 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800721c:	f7fb fb62 	bl	80028e4 <HAL_GetTick>
 8007220:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8007222:	e00c      	b.n	800723e <HAL_RCC_OscConfig+0x3c2>
 8007224:	20000004 	.word	0x20000004
 8007228:	20000008 	.word	0x20000008
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800722c:	f7fb fb5a 	bl	80028e4 <HAL_GetTick>
 8007230:	4602      	mov	r2, r0
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	1ad3      	subs	r3, r2, r3
 8007236:	2b11      	cmp	r3, #17
 8007238:	d901      	bls.n	800723e <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800723a:	2303      	movs	r3, #3
 800723c:	e197      	b.n	800756e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 800723e:	f7ff fc6b 	bl	8006b18 <LL_RCC_LSI_IsReady>
 8007242:	4603      	mov	r3, r0
 8007244:	2b00      	cmp	r3, #0
 8007246:	d0f1      	beq.n	800722c <HAL_RCC_OscConfig+0x3b0>
 8007248:	e013      	b.n	8007272 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800724a:	f7ff fc55 	bl	8006af8 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800724e:	f7fb fb49 	bl	80028e4 <HAL_GetTick>
 8007252:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8007254:	e008      	b.n	8007268 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007256:	f7fb fb45 	bl	80028e4 <HAL_GetTick>
 800725a:	4602      	mov	r2, r0
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	1ad3      	subs	r3, r2, r3
 8007260:	2b11      	cmp	r3, #17
 8007262:	d901      	bls.n	8007268 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8007264:	2303      	movs	r3, #3
 8007266:	e182      	b.n	800756e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8007268:	f7ff fc56 	bl	8006b18 <LL_RCC_LSI_IsReady>
 800726c:	4603      	mov	r3, r0
 800726e:	2b00      	cmp	r3, #0
 8007270:	d1f1      	bne.n	8007256 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f003 0304 	and.w	r3, r3, #4
 800727a:	2b00      	cmp	r3, #0
 800727c:	f000 80d8 	beq.w	8007430 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8007280:	f7ff fb6c 	bl	800695c <LL_PWR_IsEnabledBkUpAccess>
 8007284:	4603      	mov	r3, r0
 8007286:	2b00      	cmp	r3, #0
 8007288:	d113      	bne.n	80072b2 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800728a:	f7ff faab 	bl	80067e4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800728e:	f7fb fb29 	bl	80028e4 <HAL_GetTick>
 8007292:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8007294:	e008      	b.n	80072a8 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007296:	f7fb fb25 	bl	80028e4 <HAL_GetTick>
 800729a:	4602      	mov	r2, r0
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	1ad3      	subs	r3, r2, r3
 80072a0:	2b02      	cmp	r3, #2
 80072a2:	d901      	bls.n	80072a8 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 80072a4:	2303      	movs	r3, #3
 80072a6:	e162      	b.n	800756e <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80072a8:	f7ff fb58 	bl	800695c <LL_PWR_IsEnabledBkUpAccess>
 80072ac:	4603      	mov	r3, r0
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d0f1      	beq.n	8007296 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	68db      	ldr	r3, [r3, #12]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d07b      	beq.n	80073b2 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	68db      	ldr	r3, [r3, #12]
 80072be:	2b85      	cmp	r3, #133	@ 0x85
 80072c0:	d003      	beq.n	80072ca <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	68db      	ldr	r3, [r3, #12]
 80072c6:	2b05      	cmp	r3, #5
 80072c8:	d109      	bne.n	80072de <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80072ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80072ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072d2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80072d6:	f043 0304 	orr.w	r3, r3, #4
 80072da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80072de:	f7fb fb01 	bl	80028e4 <HAL_GetTick>
 80072e2:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80072e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80072e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072ec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80072f0:	f043 0301 	orr.w	r3, r3, #1
 80072f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80072f8:	e00a      	b.n	8007310 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072fa:	f7fb faf3 	bl	80028e4 <HAL_GetTick>
 80072fe:	4602      	mov	r2, r0
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	1ad3      	subs	r3, r2, r3
 8007304:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007308:	4293      	cmp	r3, r2
 800730a:	d901      	bls.n	8007310 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 800730c:	2303      	movs	r3, #3
 800730e:	e12e      	b.n	800756e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8007310:	f7ff fbd1 	bl	8006ab6 <LL_RCC_LSE_IsReady>
 8007314:	4603      	mov	r3, r0
 8007316:	2b00      	cmp	r3, #0
 8007318:	d0ef      	beq.n	80072fa <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	68db      	ldr	r3, [r3, #12]
 800731e:	2b81      	cmp	r3, #129	@ 0x81
 8007320:	d003      	beq.n	800732a <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	68db      	ldr	r3, [r3, #12]
 8007326:	2b85      	cmp	r3, #133	@ 0x85
 8007328:	d121      	bne.n	800736e <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800732a:	f7fb fadb 	bl	80028e4 <HAL_GetTick>
 800732e:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007330:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007334:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007338:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800733c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007340:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8007344:	e00a      	b.n	800735c <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007346:	f7fb facd 	bl	80028e4 <HAL_GetTick>
 800734a:	4602      	mov	r2, r0
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	1ad3      	subs	r3, r2, r3
 8007350:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007354:	4293      	cmp	r3, r2
 8007356:	d901      	bls.n	800735c <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8007358:	2303      	movs	r3, #3
 800735a:	e108      	b.n	800756e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800735c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007360:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007364:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007368:	2b00      	cmp	r3, #0
 800736a:	d0ec      	beq.n	8007346 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800736c:	e060      	b.n	8007430 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800736e:	f7fb fab9 	bl	80028e4 <HAL_GetTick>
 8007372:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007374:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007378:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800737c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007380:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007384:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007388:	e00a      	b.n	80073a0 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800738a:	f7fb faab 	bl	80028e4 <HAL_GetTick>
 800738e:	4602      	mov	r2, r0
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	1ad3      	subs	r3, r2, r3
 8007394:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007398:	4293      	cmp	r3, r2
 800739a:	d901      	bls.n	80073a0 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 800739c:	2303      	movs	r3, #3
 800739e:	e0e6      	b.n	800756e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80073a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80073a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d1ec      	bne.n	800738a <HAL_RCC_OscConfig+0x50e>
 80073b0:	e03e      	b.n	8007430 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80073b2:	f7fb fa97 	bl	80028e4 <HAL_GetTick>
 80073b6:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80073b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80073bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073c0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80073c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80073c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80073cc:	e00a      	b.n	80073e4 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073ce:	f7fb fa89 	bl	80028e4 <HAL_GetTick>
 80073d2:	4602      	mov	r2, r0
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	1ad3      	subs	r3, r2, r3
 80073d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073dc:	4293      	cmp	r3, r2
 80073de:	d901      	bls.n	80073e4 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80073e0:	2303      	movs	r3, #3
 80073e2:	e0c4      	b.n	800756e <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80073e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80073e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d1ec      	bne.n	80073ce <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80073f4:	f7fb fa76 	bl	80028e4 <HAL_GetTick>
 80073f8:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80073fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80073fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007402:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007406:	f023 0301 	bic.w	r3, r3, #1
 800740a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800740e:	e00a      	b.n	8007426 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007410:	f7fb fa68 	bl	80028e4 <HAL_GetTick>
 8007414:	4602      	mov	r2, r0
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	1ad3      	subs	r3, r2, r3
 800741a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800741e:	4293      	cmp	r3, r2
 8007420:	d901      	bls.n	8007426 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8007422:	2303      	movs	r3, #3
 8007424:	e0a3      	b.n	800756e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8007426:	f7ff fb46 	bl	8006ab6 <LL_RCC_LSE_IsReady>
 800742a:	4603      	mov	r3, r0
 800742c:	2b00      	cmp	r3, #0
 800742e:	d1ef      	bne.n	8007410 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007434:	2b00      	cmp	r3, #0
 8007436:	f000 8099 	beq.w	800756c <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800743a:	69fb      	ldr	r3, [r7, #28]
 800743c:	2b0c      	cmp	r3, #12
 800743e:	d06c      	beq.n	800751a <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007444:	2b02      	cmp	r3, #2
 8007446:	d14b      	bne.n	80074e0 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007448:	f7ff fc87 	bl	8006d5a <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800744c:	f7fb fa4a 	bl	80028e4 <HAL_GetTick>
 8007450:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8007452:	e008      	b.n	8007466 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007454:	f7fb fa46 	bl	80028e4 <HAL_GetTick>
 8007458:	4602      	mov	r2, r0
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	1ad3      	subs	r3, r2, r3
 800745e:	2b0a      	cmp	r3, #10
 8007460:	d901      	bls.n	8007466 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8007462:	2303      	movs	r3, #3
 8007464:	e083      	b.n	800756e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8007466:	f7ff fc86 	bl	8006d76 <LL_RCC_PLL_IsReady>
 800746a:	4603      	mov	r3, r0
 800746c:	2b00      	cmp	r3, #0
 800746e:	d1f1      	bne.n	8007454 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007470:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007474:	68da      	ldr	r2, [r3, #12]
 8007476:	4b40      	ldr	r3, [pc, #256]	@ (8007578 <HAL_RCC_OscConfig+0x6fc>)
 8007478:	4013      	ands	r3, r2
 800747a:	687a      	ldr	r2, [r7, #4]
 800747c:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800747e:	687a      	ldr	r2, [r7, #4]
 8007480:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007482:	4311      	orrs	r1, r2
 8007484:	687a      	ldr	r2, [r7, #4]
 8007486:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007488:	0212      	lsls	r2, r2, #8
 800748a:	4311      	orrs	r1, r2
 800748c:	687a      	ldr	r2, [r7, #4]
 800748e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007490:	4311      	orrs	r1, r2
 8007492:	687a      	ldr	r2, [r7, #4]
 8007494:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8007496:	4311      	orrs	r1, r2
 8007498:	687a      	ldr	r2, [r7, #4]
 800749a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800749c:	430a      	orrs	r2, r1
 800749e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80074a2:	4313      	orrs	r3, r2
 80074a4:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80074a6:	f7ff fc4a 	bl	8006d3e <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80074aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80074ae:	68db      	ldr	r3, [r3, #12]
 80074b0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80074b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80074b8:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074ba:	f7fb fa13 	bl	80028e4 <HAL_GetTick>
 80074be:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80074c0:	e008      	b.n	80074d4 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074c2:	f7fb fa0f 	bl	80028e4 <HAL_GetTick>
 80074c6:	4602      	mov	r2, r0
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	1ad3      	subs	r3, r2, r3
 80074cc:	2b0a      	cmp	r3, #10
 80074ce:	d901      	bls.n	80074d4 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 80074d0:	2303      	movs	r3, #3
 80074d2:	e04c      	b.n	800756e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 80074d4:	f7ff fc4f 	bl	8006d76 <LL_RCC_PLL_IsReady>
 80074d8:	4603      	mov	r3, r0
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d0f1      	beq.n	80074c2 <HAL_RCC_OscConfig+0x646>
 80074de:	e045      	b.n	800756c <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074e0:	f7ff fc3b 	bl	8006d5a <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074e4:	f7fb f9fe 	bl	80028e4 <HAL_GetTick>
 80074e8:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80074ea:	e008      	b.n	80074fe <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074ec:	f7fb f9fa 	bl	80028e4 <HAL_GetTick>
 80074f0:	4602      	mov	r2, r0
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	1ad3      	subs	r3, r2, r3
 80074f6:	2b0a      	cmp	r3, #10
 80074f8:	d901      	bls.n	80074fe <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80074fa:	2303      	movs	r3, #3
 80074fc:	e037      	b.n	800756e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80074fe:	f7ff fc3a 	bl	8006d76 <LL_RCC_PLL_IsReady>
 8007502:	4603      	mov	r3, r0
 8007504:	2b00      	cmp	r3, #0
 8007506:	d1f1      	bne.n	80074ec <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8007508:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800750c:	68da      	ldr	r2, [r3, #12]
 800750e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007512:	4b1a      	ldr	r3, [pc, #104]	@ (800757c <HAL_RCC_OscConfig+0x700>)
 8007514:	4013      	ands	r3, r2
 8007516:	60cb      	str	r3, [r1, #12]
 8007518:	e028      	b.n	800756c <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800751e:	2b01      	cmp	r3, #1
 8007520:	d101      	bne.n	8007526 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8007522:	2301      	movs	r3, #1
 8007524:	e023      	b.n	800756e <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007526:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800752a:	68db      	ldr	r3, [r3, #12]
 800752c:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800752e:	69bb      	ldr	r3, [r7, #24]
 8007530:	f003 0203 	and.w	r2, r3, #3
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007538:	429a      	cmp	r2, r3
 800753a:	d115      	bne.n	8007568 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 800753c:	69bb      	ldr	r3, [r7, #24]
 800753e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007546:	429a      	cmp	r2, r3
 8007548:	d10e      	bne.n	8007568 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800754a:	69bb      	ldr	r3, [r7, #24]
 800754c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007554:	021b      	lsls	r3, r3, #8
 8007556:	429a      	cmp	r2, r3
 8007558:	d106      	bne.n	8007568 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800755a:	69bb      	ldr	r3, [r7, #24]
 800755c:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007564:	429a      	cmp	r2, r3
 8007566:	d001      	beq.n	800756c <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8007568:	2301      	movs	r3, #1
 800756a:	e000      	b.n	800756e <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 800756c:	2300      	movs	r3, #0
}
 800756e:	4618      	mov	r0, r3
 8007570:	3720      	adds	r7, #32
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}
 8007576:	bf00      	nop
 8007578:	11c1808c 	.word	0x11c1808c
 800757c:	eefefffc 	.word	0xeefefffc

08007580 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b084      	sub	sp, #16
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d101      	bne.n	8007594 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007590:	2301      	movs	r3, #1
 8007592:	e10f      	b.n	80077b4 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007594:	4b89      	ldr	r3, [pc, #548]	@ (80077bc <HAL_RCC_ClockConfig+0x23c>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f003 0307 	and.w	r3, r3, #7
 800759c:	683a      	ldr	r2, [r7, #0]
 800759e:	429a      	cmp	r2, r3
 80075a0:	d91b      	bls.n	80075da <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075a2:	4b86      	ldr	r3, [pc, #536]	@ (80077bc <HAL_RCC_ClockConfig+0x23c>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f023 0207 	bic.w	r2, r3, #7
 80075aa:	4984      	ldr	r1, [pc, #528]	@ (80077bc <HAL_RCC_ClockConfig+0x23c>)
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	4313      	orrs	r3, r2
 80075b0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80075b2:	f7fb f997 	bl	80028e4 <HAL_GetTick>
 80075b6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075b8:	e008      	b.n	80075cc <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80075ba:	f7fb f993 	bl	80028e4 <HAL_GetTick>
 80075be:	4602      	mov	r2, r0
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	1ad3      	subs	r3, r2, r3
 80075c4:	2b02      	cmp	r3, #2
 80075c6:	d901      	bls.n	80075cc <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80075c8:	2303      	movs	r3, #3
 80075ca:	e0f3      	b.n	80077b4 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075cc:	4b7b      	ldr	r3, [pc, #492]	@ (80077bc <HAL_RCC_ClockConfig+0x23c>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f003 0307 	and.w	r3, r3, #7
 80075d4:	683a      	ldr	r2, [r7, #0]
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d1ef      	bne.n	80075ba <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f003 0302 	and.w	r3, r3, #2
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d016      	beq.n	8007614 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	689b      	ldr	r3, [r3, #8]
 80075ea:	4618      	mov	r0, r3
 80075ec:	f7ff fb2a 	bl	8006c44 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80075f0:	f7fb f978 	bl	80028e4 <HAL_GetTick>
 80075f4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80075f6:	e008      	b.n	800760a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80075f8:	f7fb f974 	bl	80028e4 <HAL_GetTick>
 80075fc:	4602      	mov	r2, r0
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	1ad3      	subs	r3, r2, r3
 8007602:	2b02      	cmp	r3, #2
 8007604:	d901      	bls.n	800760a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8007606:	2303      	movs	r3, #3
 8007608:	e0d4      	b.n	80077b4 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800760a:	f7ff fbf2 	bl	8006df2 <LL_RCC_IsActiveFlag_HPRE>
 800760e:	4603      	mov	r3, r0
 8007610:	2b00      	cmp	r3, #0
 8007612:	d0f1      	beq.n	80075f8 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800761c:	2b00      	cmp	r3, #0
 800761e:	d016      	beq.n	800764e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	695b      	ldr	r3, [r3, #20]
 8007624:	4618      	mov	r0, r3
 8007626:	f7ff fb20 	bl	8006c6a <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800762a:	f7fb f95b 	bl	80028e4 <HAL_GetTick>
 800762e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8007630:	e008      	b.n	8007644 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007632:	f7fb f957 	bl	80028e4 <HAL_GetTick>
 8007636:	4602      	mov	r2, r0
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	1ad3      	subs	r3, r2, r3
 800763c:	2b02      	cmp	r3, #2
 800763e:	d901      	bls.n	8007644 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8007640:	2303      	movs	r3, #3
 8007642:	e0b7      	b.n	80077b4 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8007644:	f7ff fbe6 	bl	8006e14 <LL_RCC_IsActiveFlag_SHDHPRE>
 8007648:	4603      	mov	r3, r0
 800764a:	2b00      	cmp	r3, #0
 800764c:	d0f1      	beq.n	8007632 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f003 0304 	and.w	r3, r3, #4
 8007656:	2b00      	cmp	r3, #0
 8007658:	d016      	beq.n	8007688 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	68db      	ldr	r3, [r3, #12]
 800765e:	4618      	mov	r0, r3
 8007660:	f7ff fb19 	bl	8006c96 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007664:	f7fb f93e 	bl	80028e4 <HAL_GetTick>
 8007668:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800766a:	e008      	b.n	800767e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800766c:	f7fb f93a 	bl	80028e4 <HAL_GetTick>
 8007670:	4602      	mov	r2, r0
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	1ad3      	subs	r3, r2, r3
 8007676:	2b02      	cmp	r3, #2
 8007678:	d901      	bls.n	800767e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800767a:	2303      	movs	r3, #3
 800767c:	e09a      	b.n	80077b4 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800767e:	f7ff fbdb 	bl	8006e38 <LL_RCC_IsActiveFlag_PPRE1>
 8007682:	4603      	mov	r3, r0
 8007684:	2b00      	cmp	r3, #0
 8007686:	d0f1      	beq.n	800766c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f003 0308 	and.w	r3, r3, #8
 8007690:	2b00      	cmp	r3, #0
 8007692:	d017      	beq.n	80076c4 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	691b      	ldr	r3, [r3, #16]
 8007698:	00db      	lsls	r3, r3, #3
 800769a:	4618      	mov	r0, r3
 800769c:	f7ff fb0e 	bl	8006cbc <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80076a0:	f7fb f920 	bl	80028e4 <HAL_GetTick>
 80076a4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80076a6:	e008      	b.n	80076ba <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80076a8:	f7fb f91c 	bl	80028e4 <HAL_GetTick>
 80076ac:	4602      	mov	r2, r0
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	1ad3      	subs	r3, r2, r3
 80076b2:	2b02      	cmp	r3, #2
 80076b4:	d901      	bls.n	80076ba <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 80076b6:	2303      	movs	r3, #3
 80076b8:	e07c      	b.n	80077b4 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80076ba:	f7ff fbce 	bl	8006e5a <LL_RCC_IsActiveFlag_PPRE2>
 80076be:	4603      	mov	r3, r0
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d0f1      	beq.n	80076a8 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f003 0301 	and.w	r3, r3, #1
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d043      	beq.n	8007758 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	2b02      	cmp	r3, #2
 80076d6:	d106      	bne.n	80076e6 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80076d8:	f7ff f99b 	bl	8006a12 <LL_RCC_HSE_IsReady>
 80076dc:	4603      	mov	r3, r0
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d11e      	bne.n	8007720 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80076e2:	2301      	movs	r3, #1
 80076e4:	e066      	b.n	80077b4 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	2b03      	cmp	r3, #3
 80076ec:	d106      	bne.n	80076fc <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80076ee:	f7ff fb42 	bl	8006d76 <LL_RCC_PLL_IsReady>
 80076f2:	4603      	mov	r3, r0
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d113      	bne.n	8007720 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80076f8:	2301      	movs	r3, #1
 80076fa:	e05b      	b.n	80077b4 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d106      	bne.n	8007712 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8007704:	f7ff fa35 	bl	8006b72 <LL_RCC_MSI_IsReady>
 8007708:	4603      	mov	r3, r0
 800770a:	2b00      	cmp	r3, #0
 800770c:	d108      	bne.n	8007720 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800770e:	2301      	movs	r3, #1
 8007710:	e050      	b.n	80077b4 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8007712:	f7ff f9ab 	bl	8006a6c <LL_RCC_HSI_IsReady>
 8007716:	4603      	mov	r3, r0
 8007718:	2b00      	cmp	r3, #0
 800771a:	d101      	bne.n	8007720 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800771c:	2301      	movs	r3, #1
 800771e:	e049      	b.n	80077b4 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	4618      	mov	r0, r3
 8007726:	f7ff fa6f 	bl	8006c08 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800772a:	f7fb f8db 	bl	80028e4 <HAL_GetTick>
 800772e:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007730:	e00a      	b.n	8007748 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007732:	f7fb f8d7 	bl	80028e4 <HAL_GetTick>
 8007736:	4602      	mov	r2, r0
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	1ad3      	subs	r3, r2, r3
 800773c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007740:	4293      	cmp	r3, r2
 8007742:	d901      	bls.n	8007748 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8007744:	2303      	movs	r3, #3
 8007746:	e035      	b.n	80077b4 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007748:	f7ff fa71 	bl	8006c2e <LL_RCC_GetSysClkSource>
 800774c:	4602      	mov	r2, r0
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	009b      	lsls	r3, r3, #2
 8007754:	429a      	cmp	r2, r3
 8007756:	d1ec      	bne.n	8007732 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007758:	4b18      	ldr	r3, [pc, #96]	@ (80077bc <HAL_RCC_ClockConfig+0x23c>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f003 0307 	and.w	r3, r3, #7
 8007760:	683a      	ldr	r2, [r7, #0]
 8007762:	429a      	cmp	r2, r3
 8007764:	d21b      	bcs.n	800779e <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007766:	4b15      	ldr	r3, [pc, #84]	@ (80077bc <HAL_RCC_ClockConfig+0x23c>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f023 0207 	bic.w	r2, r3, #7
 800776e:	4913      	ldr	r1, [pc, #76]	@ (80077bc <HAL_RCC_ClockConfig+0x23c>)
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	4313      	orrs	r3, r2
 8007774:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007776:	f7fb f8b5 	bl	80028e4 <HAL_GetTick>
 800777a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800777c:	e008      	b.n	8007790 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800777e:	f7fb f8b1 	bl	80028e4 <HAL_GetTick>
 8007782:	4602      	mov	r2, r0
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	1ad3      	subs	r3, r2, r3
 8007788:	2b02      	cmp	r3, #2
 800778a:	d901      	bls.n	8007790 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 800778c:	2303      	movs	r3, #3
 800778e:	e011      	b.n	80077b4 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007790:	4b0a      	ldr	r3, [pc, #40]	@ (80077bc <HAL_RCC_ClockConfig+0x23c>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f003 0307 	and.w	r3, r3, #7
 8007798:	683a      	ldr	r2, [r7, #0]
 800779a:	429a      	cmp	r2, r3
 800779c:	d1ef      	bne.n	800777e <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800779e:	f000 f8b3 	bl	8007908 <HAL_RCC_GetHCLKFreq>
 80077a2:	4603      	mov	r3, r0
 80077a4:	4a06      	ldr	r2, [pc, #24]	@ (80077c0 <HAL_RCC_ClockConfig+0x240>)
 80077a6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 80077a8:	4b06      	ldr	r3, [pc, #24]	@ (80077c4 <HAL_RCC_ClockConfig+0x244>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4618      	mov	r0, r3
 80077ae:	f7fb f88f 	bl	80028d0 <HAL_InitTick>
 80077b2:	4603      	mov	r3, r0
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	3710      	adds	r7, #16
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}
 80077bc:	58004000 	.word	0x58004000
 80077c0:	20000004 	.word	0x20000004
 80077c4:	20000008 	.word	0x20000008

080077c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80077c8:	b590      	push	{r4, r7, lr}
 80077ca:	b087      	sub	sp, #28
 80077cc:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80077ce:	2300      	movs	r3, #0
 80077d0:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80077d2:	2300      	movs	r3, #0
 80077d4:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80077d6:	f7ff fa2a 	bl	8006c2e <LL_RCC_GetSysClkSource>
 80077da:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80077dc:	f7ff fafe 	bl	8006ddc <LL_RCC_PLL_GetMainSource>
 80077e0:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d005      	beq.n	80077f4 <HAL_RCC_GetSysClockFreq+0x2c>
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	2b0c      	cmp	r3, #12
 80077ec:	d139      	bne.n	8007862 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2b01      	cmp	r3, #1
 80077f2:	d136      	bne.n	8007862 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80077f4:	f7ff f9cd 	bl	8006b92 <LL_RCC_MSI_IsEnabledRangeSelect>
 80077f8:	4603      	mov	r3, r0
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d115      	bne.n	800782a <HAL_RCC_GetSysClockFreq+0x62>
 80077fe:	f7ff f9c8 	bl	8006b92 <LL_RCC_MSI_IsEnabledRangeSelect>
 8007802:	4603      	mov	r3, r0
 8007804:	2b01      	cmp	r3, #1
 8007806:	d106      	bne.n	8007816 <HAL_RCC_GetSysClockFreq+0x4e>
 8007808:	f7ff f9d3 	bl	8006bb2 <LL_RCC_MSI_GetRange>
 800780c:	4603      	mov	r3, r0
 800780e:	0a1b      	lsrs	r3, r3, #8
 8007810:	f003 030f 	and.w	r3, r3, #15
 8007814:	e005      	b.n	8007822 <HAL_RCC_GetSysClockFreq+0x5a>
 8007816:	f7ff f9d7 	bl	8006bc8 <LL_RCC_MSI_GetRangeAfterStandby>
 800781a:	4603      	mov	r3, r0
 800781c:	0a1b      	lsrs	r3, r3, #8
 800781e:	f003 030f 	and.w	r3, r3, #15
 8007822:	4a36      	ldr	r2, [pc, #216]	@ (80078fc <HAL_RCC_GetSysClockFreq+0x134>)
 8007824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007828:	e014      	b.n	8007854 <HAL_RCC_GetSysClockFreq+0x8c>
 800782a:	f7ff f9b2 	bl	8006b92 <LL_RCC_MSI_IsEnabledRangeSelect>
 800782e:	4603      	mov	r3, r0
 8007830:	2b01      	cmp	r3, #1
 8007832:	d106      	bne.n	8007842 <HAL_RCC_GetSysClockFreq+0x7a>
 8007834:	f7ff f9bd 	bl	8006bb2 <LL_RCC_MSI_GetRange>
 8007838:	4603      	mov	r3, r0
 800783a:	091b      	lsrs	r3, r3, #4
 800783c:	f003 030f 	and.w	r3, r3, #15
 8007840:	e005      	b.n	800784e <HAL_RCC_GetSysClockFreq+0x86>
 8007842:	f7ff f9c1 	bl	8006bc8 <LL_RCC_MSI_GetRangeAfterStandby>
 8007846:	4603      	mov	r3, r0
 8007848:	091b      	lsrs	r3, r3, #4
 800784a:	f003 030f 	and.w	r3, r3, #15
 800784e:	4a2b      	ldr	r2, [pc, #172]	@ (80078fc <HAL_RCC_GetSysClockFreq+0x134>)
 8007850:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007854:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d115      	bne.n	8007888 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007860:	e012      	b.n	8007888 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	2b04      	cmp	r3, #4
 8007866:	d102      	bne.n	800786e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007868:	4b25      	ldr	r3, [pc, #148]	@ (8007900 <HAL_RCC_GetSysClockFreq+0x138>)
 800786a:	617b      	str	r3, [r7, #20]
 800786c:	e00c      	b.n	8007888 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	2b08      	cmp	r3, #8
 8007872:	d109      	bne.n	8007888 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8007874:	f7ff f8a0 	bl	80069b8 <LL_RCC_HSE_IsEnabledDiv2>
 8007878:	4603      	mov	r3, r0
 800787a:	2b01      	cmp	r3, #1
 800787c:	d102      	bne.n	8007884 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800787e:	4b20      	ldr	r3, [pc, #128]	@ (8007900 <HAL_RCC_GetSysClockFreq+0x138>)
 8007880:	617b      	str	r3, [r7, #20]
 8007882:	e001      	b.n	8007888 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8007884:	4b1f      	ldr	r3, [pc, #124]	@ (8007904 <HAL_RCC_GetSysClockFreq+0x13c>)
 8007886:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007888:	f7ff f9d1 	bl	8006c2e <LL_RCC_GetSysClkSource>
 800788c:	4603      	mov	r3, r0
 800788e:	2b0c      	cmp	r3, #12
 8007890:	d12f      	bne.n	80078f2 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8007892:	f7ff faa3 	bl	8006ddc <LL_RCC_PLL_GetMainSource>
 8007896:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2b02      	cmp	r3, #2
 800789c:	d003      	beq.n	80078a6 <HAL_RCC_GetSysClockFreq+0xde>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2b03      	cmp	r3, #3
 80078a2:	d003      	beq.n	80078ac <HAL_RCC_GetSysClockFreq+0xe4>
 80078a4:	e00d      	b.n	80078c2 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80078a6:	4b16      	ldr	r3, [pc, #88]	@ (8007900 <HAL_RCC_GetSysClockFreq+0x138>)
 80078a8:	60fb      	str	r3, [r7, #12]
        break;
 80078aa:	e00d      	b.n	80078c8 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80078ac:	f7ff f884 	bl	80069b8 <LL_RCC_HSE_IsEnabledDiv2>
 80078b0:	4603      	mov	r3, r0
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	d102      	bne.n	80078bc <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80078b6:	4b12      	ldr	r3, [pc, #72]	@ (8007900 <HAL_RCC_GetSysClockFreq+0x138>)
 80078b8:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80078ba:	e005      	b.n	80078c8 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80078bc:	4b11      	ldr	r3, [pc, #68]	@ (8007904 <HAL_RCC_GetSysClockFreq+0x13c>)
 80078be:	60fb      	str	r3, [r7, #12]
        break;
 80078c0:	e002      	b.n	80078c8 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	60fb      	str	r3, [r7, #12]
        break;
 80078c6:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80078c8:	f7ff fa66 	bl	8006d98 <LL_RCC_PLL_GetN>
 80078cc:	4602      	mov	r2, r0
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	fb03 f402 	mul.w	r4, r3, r2
 80078d4:	f7ff fa77 	bl	8006dc6 <LL_RCC_PLL_GetDivider>
 80078d8:	4603      	mov	r3, r0
 80078da:	091b      	lsrs	r3, r3, #4
 80078dc:	3301      	adds	r3, #1
 80078de:	fbb4 f4f3 	udiv	r4, r4, r3
 80078e2:	f7ff fa65 	bl	8006db0 <LL_RCC_PLL_GetR>
 80078e6:	4603      	mov	r3, r0
 80078e8:	0f5b      	lsrs	r3, r3, #29
 80078ea:	3301      	adds	r3, #1
 80078ec:	fbb4 f3f3 	udiv	r3, r4, r3
 80078f0:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80078f2:	697b      	ldr	r3, [r7, #20]
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	371c      	adds	r7, #28
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd90      	pop	{r4, r7, pc}
 80078fc:	0801f7c4 	.word	0x0801f7c4
 8007900:	00f42400 	.word	0x00f42400
 8007904:	01e84800 	.word	0x01e84800

08007908 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007908:	b598      	push	{r3, r4, r7, lr}
 800790a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800790c:	f7ff ff5c 	bl	80077c8 <HAL_RCC_GetSysClockFreq>
 8007910:	4604      	mov	r4, r0
 8007912:	f7ff f9e6 	bl	8006ce2 <LL_RCC_GetAHBPrescaler>
 8007916:	4603      	mov	r3, r0
 8007918:	091b      	lsrs	r3, r3, #4
 800791a:	f003 030f 	and.w	r3, r3, #15
 800791e:	4a03      	ldr	r2, [pc, #12]	@ (800792c <HAL_RCC_GetHCLKFreq+0x24>)
 8007920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007924:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8007928:	4618      	mov	r0, r3
 800792a:	bd98      	pop	{r3, r4, r7, pc}
 800792c:	0801f764 	.word	0x0801f764

08007930 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007930:	b598      	push	{r3, r4, r7, lr}
 8007932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8007934:	f7ff ffe8 	bl	8007908 <HAL_RCC_GetHCLKFreq>
 8007938:	4604      	mov	r4, r0
 800793a:	f7ff f9ea 	bl	8006d12 <LL_RCC_GetAPB1Prescaler>
 800793e:	4603      	mov	r3, r0
 8007940:	0a1b      	lsrs	r3, r3, #8
 8007942:	4a03      	ldr	r2, [pc, #12]	@ (8007950 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007948:	fa24 f303 	lsr.w	r3, r4, r3
}
 800794c:	4618      	mov	r0, r3
 800794e:	bd98      	pop	{r3, r4, r7, pc}
 8007950:	0801f7a4 	.word	0x0801f7a4

08007954 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007954:	b598      	push	{r3, r4, r7, lr}
 8007956:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8007958:	f7ff ffd6 	bl	8007908 <HAL_RCC_GetHCLKFreq>
 800795c:	4604      	mov	r4, r0
 800795e:	f7ff f9e3 	bl	8006d28 <LL_RCC_GetAPB2Prescaler>
 8007962:	4603      	mov	r3, r0
 8007964:	0adb      	lsrs	r3, r3, #11
 8007966:	4a03      	ldr	r2, [pc, #12]	@ (8007974 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800796c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8007970:	4618      	mov	r0, r3
 8007972:	bd98      	pop	{r3, r4, r7, pc}
 8007974:	0801f7a4 	.word	0x0801f7a4

08007978 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8007978:	b590      	push	{r4, r7, lr}
 800797a:	b085      	sub	sp, #20
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	091b      	lsrs	r3, r3, #4
 8007984:	f003 030f 	and.w	r3, r3, #15
 8007988:	4a10      	ldr	r2, [pc, #64]	@ (80079cc <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800798a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800798e:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8007990:	f7ff f9b2 	bl	8006cf8 <LL_RCC_GetAHB3Prescaler>
 8007994:	4603      	mov	r3, r0
 8007996:	091b      	lsrs	r3, r3, #4
 8007998:	f003 030f 	and.w	r3, r3, #15
 800799c:	4a0c      	ldr	r2, [pc, #48]	@ (80079d0 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 800799e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079a2:	68fa      	ldr	r2, [r7, #12]
 80079a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80079a8:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	4a09      	ldr	r2, [pc, #36]	@ (80079d4 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80079ae:	fba2 2303 	umull	r2, r3, r2, r3
 80079b2:	0c9c      	lsrs	r4, r3, #18
 80079b4:	f7fe ff58 	bl	8006868 <HAL_PWREx_GetVoltageRange>
 80079b8:	4603      	mov	r3, r0
 80079ba:	4619      	mov	r1, r3
 80079bc:	4620      	mov	r0, r4
 80079be:	f000 f80b 	bl	80079d8 <RCC_SetFlashLatency>
 80079c2:	4603      	mov	r3, r0
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	3714      	adds	r7, #20
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd90      	pop	{r4, r7, pc}
 80079cc:	0801f7c4 	.word	0x0801f7c4
 80079d0:	0801f764 	.word	0x0801f764
 80079d4:	431bde83 	.word	0x431bde83

080079d8 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b08e      	sub	sp, #56	@ 0x38
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
 80079e0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80079e2:	4a3a      	ldr	r2, [pc, #232]	@ (8007acc <RCC_SetFlashLatency+0xf4>)
 80079e4:	f107 0320 	add.w	r3, r7, #32
 80079e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80079ec:	6018      	str	r0, [r3, #0]
 80079ee:	3304      	adds	r3, #4
 80079f0:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80079f2:	4a37      	ldr	r2, [pc, #220]	@ (8007ad0 <RCC_SetFlashLatency+0xf8>)
 80079f4:	f107 0318 	add.w	r3, r7, #24
 80079f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80079fc:	6018      	str	r0, [r3, #0]
 80079fe:	3304      	adds	r3, #4
 8007a00:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8007a02:	4a34      	ldr	r2, [pc, #208]	@ (8007ad4 <RCC_SetFlashLatency+0xfc>)
 8007a04:	f107 030c 	add.w	r3, r7, #12
 8007a08:	ca07      	ldmia	r2, {r0, r1, r2}
 8007a0a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8007a0e:	2300      	movs	r3, #0
 8007a10:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a18:	d11b      	bne.n	8007a52 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8007a1e:	e014      	b.n	8007a4a <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8007a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a22:	005b      	lsls	r3, r3, #1
 8007a24:	3338      	adds	r3, #56	@ 0x38
 8007a26:	443b      	add	r3, r7
 8007a28:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8007a2c:	461a      	mov	r2, r3
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d807      	bhi.n	8007a44 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a36:	009b      	lsls	r3, r3, #2
 8007a38:	3338      	adds	r3, #56	@ 0x38
 8007a3a:	443b      	add	r3, r7
 8007a3c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8007a40:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007a42:	e021      	b.n	8007a88 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a46:	3301      	adds	r3, #1
 8007a48:	633b      	str	r3, [r7, #48]	@ 0x30
 8007a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a4c:	2b02      	cmp	r3, #2
 8007a4e:	d9e7      	bls.n	8007a20 <RCC_SetFlashLatency+0x48>
 8007a50:	e01a      	b.n	8007a88 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007a52:	2300      	movs	r3, #0
 8007a54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007a56:	e014      	b.n	8007a82 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8007a58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a5a:	005b      	lsls	r3, r3, #1
 8007a5c:	3338      	adds	r3, #56	@ 0x38
 8007a5e:	443b      	add	r3, r7
 8007a60:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8007a64:	461a      	mov	r2, r3
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d807      	bhi.n	8007a7c <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007a6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a6e:	009b      	lsls	r3, r3, #2
 8007a70:	3338      	adds	r3, #56	@ 0x38
 8007a72:	443b      	add	r3, r7
 8007a74:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8007a78:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007a7a:	e005      	b.n	8007a88 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007a7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a7e:	3301      	adds	r3, #1
 8007a80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007a82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a84:	2b02      	cmp	r3, #2
 8007a86:	d9e7      	bls.n	8007a58 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007a88:	4b13      	ldr	r3, [pc, #76]	@ (8007ad8 <RCC_SetFlashLatency+0x100>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f023 0207 	bic.w	r2, r3, #7
 8007a90:	4911      	ldr	r1, [pc, #68]	@ (8007ad8 <RCC_SetFlashLatency+0x100>)
 8007a92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a94:	4313      	orrs	r3, r2
 8007a96:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007a98:	f7fa ff24 	bl	80028e4 <HAL_GetTick>
 8007a9c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007a9e:	e008      	b.n	8007ab2 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007aa0:	f7fa ff20 	bl	80028e4 <HAL_GetTick>
 8007aa4:	4602      	mov	r2, r0
 8007aa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aa8:	1ad3      	subs	r3, r2, r3
 8007aaa:	2b02      	cmp	r3, #2
 8007aac:	d901      	bls.n	8007ab2 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8007aae:	2303      	movs	r3, #3
 8007ab0:	e007      	b.n	8007ac2 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007ab2:	4b09      	ldr	r3, [pc, #36]	@ (8007ad8 <RCC_SetFlashLatency+0x100>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f003 0307 	and.w	r3, r3, #7
 8007aba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007abc:	429a      	cmp	r2, r3
 8007abe:	d1ef      	bne.n	8007aa0 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8007ac0:	2300      	movs	r3, #0
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3738      	adds	r7, #56	@ 0x38
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}
 8007aca:	bf00      	nop
 8007acc:	0801eeb4 	.word	0x0801eeb4
 8007ad0:	0801eebc 	.word	0x0801eebc
 8007ad4:	0801eec4 	.word	0x0801eec4
 8007ad8:	58004000 	.word	0x58004000

08007adc <LL_RCC_LSE_IsReady>:
{
 8007adc:	b480      	push	{r7}
 8007ade:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8007ae0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ae8:	f003 0302 	and.w	r3, r3, #2
 8007aec:	2b02      	cmp	r3, #2
 8007aee:	d101      	bne.n	8007af4 <LL_RCC_LSE_IsReady+0x18>
 8007af0:	2301      	movs	r3, #1
 8007af2:	e000      	b.n	8007af6 <LL_RCC_LSE_IsReady+0x1a>
 8007af4:	2300      	movs	r3, #0
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bc80      	pop	{r7}
 8007afc:	4770      	bx	lr

08007afe <LL_RCC_SetUSARTClockSource>:
{
 8007afe:	b480      	push	{r7}
 8007b00:	b083      	sub	sp, #12
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8007b06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007b0a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	0c1b      	lsrs	r3, r3, #16
 8007b12:	43db      	mvns	r3, r3
 8007b14:	401a      	ands	r2, r3
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	b29b      	uxth	r3, r3
 8007b1a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007b24:	bf00      	nop
 8007b26:	370c      	adds	r7, #12
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bc80      	pop	{r7}
 8007b2c:	4770      	bx	lr

08007b2e <LL_RCC_SetI2SClockSource>:
{
 8007b2e:	b480      	push	{r7}
 8007b30:	b083      	sub	sp, #12
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8007b36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b3e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007b42:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007b4e:	bf00      	nop
 8007b50:	370c      	adds	r7, #12
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bc80      	pop	{r7}
 8007b56:	4770      	bx	lr

08007b58 <LL_RCC_SetLPUARTClockSource>:
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b083      	sub	sp, #12
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8007b60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b68:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007b6c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	4313      	orrs	r3, r2
 8007b74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007b78:	bf00      	nop
 8007b7a:	370c      	adds	r7, #12
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bc80      	pop	{r7}
 8007b80:	4770      	bx	lr

08007b82 <LL_RCC_SetI2CClockSource>:
{
 8007b82:	b480      	push	{r7}
 8007b84:	b083      	sub	sp, #12
 8007b86:	af00      	add	r7, sp, #0
 8007b88:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8007b8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007b8e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	091b      	lsrs	r3, r3, #4
 8007b96:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8007b9a:	43db      	mvns	r3, r3
 8007b9c:	401a      	ands	r2, r3
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	011b      	lsls	r3, r3, #4
 8007ba2:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8007ba6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007baa:	4313      	orrs	r3, r2
 8007bac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007bb0:	bf00      	nop
 8007bb2:	370c      	adds	r7, #12
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bc80      	pop	{r7}
 8007bb8:	4770      	bx	lr

08007bba <LL_RCC_SetLPTIMClockSource>:
{
 8007bba:	b480      	push	{r7}
 8007bbc:	b083      	sub	sp, #12
 8007bbe:	af00      	add	r7, sp, #0
 8007bc0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8007bc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007bc6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	0c1b      	lsrs	r3, r3, #16
 8007bce:	041b      	lsls	r3, r3, #16
 8007bd0:	43db      	mvns	r3, r3
 8007bd2:	401a      	ands	r2, r3
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	041b      	lsls	r3, r3, #16
 8007bd8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007bdc:	4313      	orrs	r3, r2
 8007bde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007be2:	bf00      	nop
 8007be4:	370c      	adds	r7, #12
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bc80      	pop	{r7}
 8007bea:	4770      	bx	lr

08007bec <LL_RCC_SetRNGClockSource>:
{
 8007bec:	b480      	push	{r7}
 8007bee:	b083      	sub	sp, #12
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8007bf4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bfc:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8007c00:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	4313      	orrs	r3, r2
 8007c08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007c0c:	bf00      	nop
 8007c0e:	370c      	adds	r7, #12
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bc80      	pop	{r7}
 8007c14:	4770      	bx	lr

08007c16 <LL_RCC_SetADCClockSource>:
{
 8007c16:	b480      	push	{r7}
 8007c18:	b083      	sub	sp, #12
 8007c1a:	af00      	add	r7, sp, #0
 8007c1c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8007c1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c26:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007c2a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	4313      	orrs	r3, r2
 8007c32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007c36:	bf00      	nop
 8007c38:	370c      	adds	r7, #12
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bc80      	pop	{r7}
 8007c3e:	4770      	bx	lr

08007c40 <LL_RCC_SetRTCClockSource>:
{
 8007c40:	b480      	push	{r7}
 8007c42:	b083      	sub	sp, #12
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8007c48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c50:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007c54:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8007c60:	bf00      	nop
 8007c62:	370c      	adds	r7, #12
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bc80      	pop	{r7}
 8007c68:	4770      	bx	lr

08007c6a <LL_RCC_GetRTCClockSource>:
{
 8007c6a:	b480      	push	{r7}
 8007c6c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8007c6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bc80      	pop	{r7}
 8007c80:	4770      	bx	lr

08007c82 <LL_RCC_ForceBackupDomainReset>:
{
 8007c82:	b480      	push	{r7}
 8007c84:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007c86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c8e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007c92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007c96:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007c9a:	bf00      	nop
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bc80      	pop	{r7}
 8007ca0:	4770      	bx	lr

08007ca2 <LL_RCC_ReleaseBackupDomainReset>:
{
 8007ca2:	b480      	push	{r7}
 8007ca4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007ca6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007cb2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007cb6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007cba:	bf00      	nop
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bc80      	pop	{r7}
 8007cc0:	4770      	bx	lr
	...

08007cc4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b086      	sub	sp, #24
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8007ccc:	2300      	movs	r3, #0
 8007cce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d058      	beq.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8007ce4:	f7fe fd7e 	bl	80067e4 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007ce8:	f7fa fdfc 	bl	80028e4 <HAL_GetTick>
 8007cec:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8007cee:	e009      	b.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007cf0:	f7fa fdf8 	bl	80028e4 <HAL_GetTick>
 8007cf4:	4602      	mov	r2, r0
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	1ad3      	subs	r3, r2, r3
 8007cfa:	2b02      	cmp	r3, #2
 8007cfc:	d902      	bls.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8007cfe:	2303      	movs	r3, #3
 8007d00:	74fb      	strb	r3, [r7, #19]
        break;
 8007d02:	e006      	b.n	8007d12 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8007d04:	4b7b      	ldr	r3, [pc, #492]	@ (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d10:	d1ee      	bne.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8007d12:	7cfb      	ldrb	r3, [r7, #19]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d13c      	bne.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8007d18:	f7ff ffa7 	bl	8007c6a <LL_RCC_GetRTCClockSource>
 8007d1c:	4602      	mov	r2, r0
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d22:	429a      	cmp	r2, r3
 8007d24:	d00f      	beq.n	8007d46 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007d26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d32:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007d34:	f7ff ffa5 	bl	8007c82 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007d38:	f7ff ffb3 	bl	8007ca2 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007d3c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007d40:	697b      	ldr	r3, [r7, #20]
 8007d42:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	f003 0302 	and.w	r3, r3, #2
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d014      	beq.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d50:	f7fa fdc8 	bl	80028e4 <HAL_GetTick>
 8007d54:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8007d56:	e00b      	b.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d58:	f7fa fdc4 	bl	80028e4 <HAL_GetTick>
 8007d5c:	4602      	mov	r2, r0
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	1ad3      	subs	r3, r2, r3
 8007d62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d902      	bls.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8007d6a:	2303      	movs	r3, #3
 8007d6c:	74fb      	strb	r3, [r7, #19]
            break;
 8007d6e:	e004      	b.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8007d70:	f7ff feb4 	bl	8007adc <LL_RCC_LSE_IsReady>
 8007d74:	4603      	mov	r3, r0
 8007d76:	2b01      	cmp	r3, #1
 8007d78:	d1ee      	bne.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8007d7a:	7cfb      	ldrb	r3, [r7, #19]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d105      	bne.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d84:	4618      	mov	r0, r3
 8007d86:	f7ff ff5b 	bl	8007c40 <LL_RCC_SetRTCClockSource>
 8007d8a:	e004      	b.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007d8c:	7cfb      	ldrb	r3, [r7, #19]
 8007d8e:	74bb      	strb	r3, [r7, #18]
 8007d90:	e001      	b.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d92:	7cfb      	ldrb	r3, [r7, #19]
 8007d94:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f003 0301 	and.w	r3, r3, #1
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d004      	beq.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	685b      	ldr	r3, [r3, #4]
 8007da6:	4618      	mov	r0, r3
 8007da8:	f7ff fea9 	bl	8007afe <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f003 0302 	and.w	r3, r3, #2
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d004      	beq.n	8007dc2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	689b      	ldr	r3, [r3, #8]
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f7ff fe9e 	bl	8007afe <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f003 0320 	and.w	r3, r3, #32
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d004      	beq.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	691b      	ldr	r3, [r3, #16]
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f7ff fec0 	bl	8007b58 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d004      	beq.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6a1b      	ldr	r3, [r3, #32]
 8007de8:	4618      	mov	r0, r3
 8007dea:	f7ff fee6 	bl	8007bba <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d004      	beq.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f7ff fedb 	bl	8007bba <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d004      	beq.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e14:	4618      	mov	r0, r3
 8007e16:	f7ff fed0 	bl	8007bba <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d004      	beq.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	695b      	ldr	r3, [r3, #20]
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f7ff fea9 	bl	8007b82 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d004      	beq.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	699b      	ldr	r3, [r3, #24]
 8007e40:	4618      	mov	r0, r3
 8007e42:	f7ff fe9e 	bl	8007b82 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d004      	beq.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	69db      	ldr	r3, [r3, #28]
 8007e56:	4618      	mov	r0, r3
 8007e58:	f7ff fe93 	bl	8007b82 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f003 0310 	and.w	r3, r3, #16
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d011      	beq.n	8007e8c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	68db      	ldr	r3, [r3, #12]
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	f7ff fe5e 	bl	8007b2e <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	68db      	ldr	r3, [r3, #12]
 8007e76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e7a:	d107      	bne.n	8007e8c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8007e7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e80:	68db      	ldr	r3, [r3, #12]
 8007e82:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007e86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007e8a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d010      	beq.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f7ff fea5 	bl	8007bec <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d107      	bne.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8007eaa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007eae:	68db      	ldr	r3, [r3, #12]
 8007eb0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007eb4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007eb8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d011      	beq.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f7ff fea3 	bl	8007c16 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ed4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ed8:	d107      	bne.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007eda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007ede:	68db      	ldr	r3, [r3, #12]
 8007ee0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007ee4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007ee8:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8007eea:	7cbb      	ldrb	r3, [r7, #18]
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	3718      	adds	r7, #24
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}
 8007ef4:	58000400 	.word	0x58000400

08007ef8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b084      	sub	sp, #16
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007f00:	2301      	movs	r3, #1
 8007f02:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d071      	beq.n	8007fee <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007f10:	b2db      	uxtb	r3, r3
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d106      	bne.n	8007f24 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f7fa fa2a 	bl	8002378 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2202      	movs	r2, #2
 8007f28:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007f2c:	4b32      	ldr	r3, [pc, #200]	@ (8007ff8 <HAL_RTC_Init+0x100>)
 8007f2e:	68db      	ldr	r3, [r3, #12]
 8007f30:	f003 0310 	and.w	r3, r3, #16
 8007f34:	2b10      	cmp	r3, #16
 8007f36:	d051      	beq.n	8007fdc <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007f38:	4b2f      	ldr	r3, [pc, #188]	@ (8007ff8 <HAL_RTC_Init+0x100>)
 8007f3a:	22ca      	movs	r2, #202	@ 0xca
 8007f3c:	625a      	str	r2, [r3, #36]	@ 0x24
 8007f3e:	4b2e      	ldr	r3, [pc, #184]	@ (8007ff8 <HAL_RTC_Init+0x100>)
 8007f40:	2253      	movs	r2, #83	@ 0x53
 8007f42:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f000 fa11 	bl	800836c <RTC_EnterInitMode>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8007f4e:	7bfb      	ldrb	r3, [r7, #15]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d13f      	bne.n	8007fd4 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8007f54:	4b28      	ldr	r3, [pc, #160]	@ (8007ff8 <HAL_RTC_Init+0x100>)
 8007f56:	699b      	ldr	r3, [r3, #24]
 8007f58:	4a27      	ldr	r2, [pc, #156]	@ (8007ff8 <HAL_RTC_Init+0x100>)
 8007f5a:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 8007f5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f62:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8007f64:	4b24      	ldr	r3, [pc, #144]	@ (8007ff8 <HAL_RTC_Init+0x100>)
 8007f66:	699a      	ldr	r2, [r3, #24]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6859      	ldr	r1, [r3, #4]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	691b      	ldr	r3, [r3, #16]
 8007f70:	4319      	orrs	r1, r3
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	699b      	ldr	r3, [r3, #24]
 8007f76:	430b      	orrs	r3, r1
 8007f78:	491f      	ldr	r1, [pc, #124]	@ (8007ff8 <HAL_RTC_Init+0x100>)
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	68da      	ldr	r2, [r3, #12]
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	689b      	ldr	r3, [r3, #8]
 8007f86:	041b      	lsls	r3, r3, #16
 8007f88:	491b      	ldr	r1, [pc, #108]	@ (8007ff8 <HAL_RTC_Init+0x100>)
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8007f8e:	4b1a      	ldr	r3, [pc, #104]	@ (8007ff8 <HAL_RTC_Init+0x100>)
 8007f90:	68db      	ldr	r3, [r3, #12]
 8007f92:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f9e:	430b      	orrs	r3, r1
 8007fa0:	4915      	ldr	r1, [pc, #84]	@ (8007ff8 <HAL_RTC_Init+0x100>)
 8007fa2:	4313      	orrs	r3, r2
 8007fa4:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f000 fa14 	bl	80083d4 <RTC_ExitInitMode>
 8007fac:	4603      	mov	r3, r0
 8007fae:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8007fb0:	7bfb      	ldrb	r3, [r7, #15]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d10e      	bne.n	8007fd4 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 8007fb6:	4b10      	ldr	r3, [pc, #64]	@ (8007ff8 <HAL_RTC_Init+0x100>)
 8007fb8:	699b      	ldr	r3, [r3, #24]
 8007fba:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6a19      	ldr	r1, [r3, #32]
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	69db      	ldr	r3, [r3, #28]
 8007fc6:	4319      	orrs	r1, r3
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	695b      	ldr	r3, [r3, #20]
 8007fcc:	430b      	orrs	r3, r1
 8007fce:	490a      	ldr	r1, [pc, #40]	@ (8007ff8 <HAL_RTC_Init+0x100>)
 8007fd0:	4313      	orrs	r3, r2
 8007fd2:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007fd4:	4b08      	ldr	r3, [pc, #32]	@ (8007ff8 <HAL_RTC_Init+0x100>)
 8007fd6:	22ff      	movs	r2, #255	@ 0xff
 8007fd8:	625a      	str	r2, [r3, #36]	@ 0x24
 8007fda:	e001      	b.n	8007fe0 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8007fdc:	2300      	movs	r3, #0
 8007fde:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8007fe0:	7bfb      	ldrb	r3, [r7, #15]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d103      	bne.n	8007fee <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2201      	movs	r2, #1
 8007fea:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 8007fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	3710      	adds	r7, #16
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}
 8007ff8:	40002800 	.word	0x40002800

08007ffc <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8007ffc:	b590      	push	{r4, r7, lr}
 8007ffe:	b087      	sub	sp, #28
 8008000:	af00      	add	r7, sp, #0
 8008002:	60f8      	str	r0, [r7, #12]
 8008004:	60b9      	str	r1, [r7, #8]
 8008006:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008008:	2300      	movs	r3, #0
 800800a:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8008012:	2b01      	cmp	r3, #1
 8008014:	d101      	bne.n	800801a <HAL_RTC_SetAlarm_IT+0x1e>
 8008016:	2302      	movs	r3, #2
 8008018:	e0f3      	b.n	8008202 <HAL_RTC_SetAlarm_IT+0x206>
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	2201      	movs	r2, #1
 800801e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	2202      	movs	r2, #2
 8008026:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 800802a:	4b78      	ldr	r3, [pc, #480]	@ (800820c <HAL_RTC_SetAlarm_IT+0x210>)
 800802c:	68db      	ldr	r3, [r3, #12]
 800802e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008032:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8008034:	693b      	ldr	r3, [r7, #16]
 8008036:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800803a:	d06a      	beq.n	8008112 <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d13a      	bne.n	80080b8 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8008042:	4b72      	ldr	r3, [pc, #456]	@ (800820c <HAL_RTC_SetAlarm_IT+0x210>)
 8008044:	699b      	ldr	r3, [r3, #24]
 8008046:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800804a:	2b00      	cmp	r3, #0
 800804c:	d102      	bne.n	8008054 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	2200      	movs	r2, #0
 8008052:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	695b      	ldr	r3, [r3, #20]
 8008058:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	781b      	ldrb	r3, [r3, #0]
 8008060:	4618      	mov	r0, r3
 8008062:	f000 f9f5 	bl	8008450 <RTC_ByteToBcd2>
 8008066:	4603      	mov	r3, r0
 8008068:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	785b      	ldrb	r3, [r3, #1]
 800806e:	4618      	mov	r0, r3
 8008070:	f000 f9ee 	bl	8008450 <RTC_ByteToBcd2>
 8008074:	4603      	mov	r3, r0
 8008076:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008078:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	789b      	ldrb	r3, [r3, #2]
 800807e:	4618      	mov	r0, r3
 8008080:	f000 f9e6 	bl	8008450 <RTC_ByteToBcd2>
 8008084:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008086:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	78db      	ldrb	r3, [r3, #3]
 800808e:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8008090:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800809a:	4618      	mov	r0, r3
 800809c:	f000 f9d8 	bl	8008450 <RTC_ByteToBcd2>
 80080a0:	4603      	mov	r3, r0
 80080a2:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80080a4:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80080ac:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80080b2:	4313      	orrs	r3, r2
 80080b4:	617b      	str	r3, [r7, #20]
 80080b6:	e02c      	b.n	8008112 <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	695b      	ldr	r3, [r3, #20]
 80080bc:	f1b3 3f80 	cmp.w	r3, #2155905152	@ 0x80808080
 80080c0:	d00d      	beq.n	80080de <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	695b      	ldr	r3, [r3, #20]
 80080c6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80080ca:	d008      	beq.n	80080de <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80080cc:	4b4f      	ldr	r3, [pc, #316]	@ (800820c <HAL_RTC_SetAlarm_IT+0x210>)
 80080ce:	699b      	ldr	r3, [r3, #24]
 80080d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d102      	bne.n	80080de <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	2200      	movs	r2, #0
 80080dc:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	781b      	ldrb	r3, [r3, #0]
 80080e2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	785b      	ldrb	r3, [r3, #1]
 80080e8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80080ea:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80080ec:	68ba      	ldr	r2, [r7, #8]
 80080ee:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80080f0:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	78db      	ldrb	r3, [r3, #3]
 80080f6:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80080f8:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008100:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8008102:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8008108:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800810e:	4313      	orrs	r3, r2
 8008110:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008112:	4b3e      	ldr	r3, [pc, #248]	@ (800820c <HAL_RTC_SetAlarm_IT+0x210>)
 8008114:	22ca      	movs	r2, #202	@ 0xca
 8008116:	625a      	str	r2, [r3, #36]	@ 0x24
 8008118:	4b3c      	ldr	r3, [pc, #240]	@ (800820c <HAL_RTC_SetAlarm_IT+0x210>)
 800811a:	2253      	movs	r2, #83	@ 0x53
 800811c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008122:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008126:	d12c      	bne.n	8008182 <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8008128:	4b38      	ldr	r3, [pc, #224]	@ (800820c <HAL_RTC_SetAlarm_IT+0x210>)
 800812a:	699b      	ldr	r3, [r3, #24]
 800812c:	4a37      	ldr	r2, [pc, #220]	@ (800820c <HAL_RTC_SetAlarm_IT+0x210>)
 800812e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8008132:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8008134:	4b35      	ldr	r3, [pc, #212]	@ (800820c <HAL_RTC_SetAlarm_IT+0x210>)
 8008136:	2201      	movs	r2, #1
 8008138:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 800813a:	693b      	ldr	r3, [r7, #16]
 800813c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008140:	d107      	bne.n	8008152 <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	699a      	ldr	r2, [r3, #24]
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	69db      	ldr	r3, [r3, #28]
 800814a:	4930      	ldr	r1, [pc, #192]	@ (800820c <HAL_RTC_SetAlarm_IT+0x210>)
 800814c:	4313      	orrs	r3, r2
 800814e:	644b      	str	r3, [r1, #68]	@ 0x44
 8008150:	e006      	b.n	8008160 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8008152:	4a2e      	ldr	r2, [pc, #184]	@ (800820c <HAL_RTC_SetAlarm_IT+0x210>)
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	6413      	str	r3, [r2, #64]	@ 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8008158:	4a2c      	ldr	r2, [pc, #176]	@ (800820c <HAL_RTC_SetAlarm_IT+0x210>)
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	699b      	ldr	r3, [r3, #24]
 800815e:	6453      	str	r3, [r2, #68]	@ 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8008160:	4a2a      	ldr	r2, [pc, #168]	@ (800820c <HAL_RTC_SetAlarm_IT+0x210>)
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	685b      	ldr	r3, [r3, #4]
 8008166:	6713      	str	r3, [r2, #112]	@ 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800816c:	f043 0201 	orr.w	r2, r3, #1
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8008174:	4b25      	ldr	r3, [pc, #148]	@ (800820c <HAL_RTC_SetAlarm_IT+0x210>)
 8008176:	699b      	ldr	r3, [r3, #24]
 8008178:	4a24      	ldr	r2, [pc, #144]	@ (800820c <HAL_RTC_SetAlarm_IT+0x210>)
 800817a:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
 800817e:	6193      	str	r3, [r2, #24]
 8008180:	e02b      	b.n	80081da <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8008182:	4b22      	ldr	r3, [pc, #136]	@ (800820c <HAL_RTC_SetAlarm_IT+0x210>)
 8008184:	699b      	ldr	r3, [r3, #24]
 8008186:	4a21      	ldr	r2, [pc, #132]	@ (800820c <HAL_RTC_SetAlarm_IT+0x210>)
 8008188:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 800818c:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800818e:	4b1f      	ldr	r3, [pc, #124]	@ (800820c <HAL_RTC_SetAlarm_IT+0x210>)
 8008190:	2202      	movs	r2, #2
 8008192:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8008194:	693b      	ldr	r3, [r7, #16]
 8008196:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800819a:	d107      	bne.n	80081ac <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	699a      	ldr	r2, [r3, #24]
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	69db      	ldr	r3, [r3, #28]
 80081a4:	4919      	ldr	r1, [pc, #100]	@ (800820c <HAL_RTC_SetAlarm_IT+0x210>)
 80081a6:	4313      	orrs	r3, r2
 80081a8:	64cb      	str	r3, [r1, #76]	@ 0x4c
 80081aa:	e006      	b.n	80081ba <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 80081ac:	4a17      	ldr	r2, [pc, #92]	@ (800820c <HAL_RTC_SetAlarm_IT+0x210>)
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	6493      	str	r3, [r2, #72]	@ 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 80081b2:	4a16      	ldr	r2, [pc, #88]	@ (800820c <HAL_RTC_SetAlarm_IT+0x210>)
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	699b      	ldr	r3, [r3, #24]
 80081b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 80081ba:	4a14      	ldr	r2, [pc, #80]	@ (800820c <HAL_RTC_SetAlarm_IT+0x210>)
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	6753      	str	r3, [r2, #116]	@ 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081c6:	f043 0202 	orr.w	r2, r3, #2
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80081ce:	4b0f      	ldr	r3, [pc, #60]	@ (800820c <HAL_RTC_SetAlarm_IT+0x210>)
 80081d0:	699b      	ldr	r3, [r3, #24]
 80081d2:	4a0e      	ldr	r2, [pc, #56]	@ (800820c <HAL_RTC_SetAlarm_IT+0x210>)
 80081d4:	f443 5308 	orr.w	r3, r3, #8704	@ 0x2200
 80081d8:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80081da:	4b0d      	ldr	r3, [pc, #52]	@ (8008210 <HAL_RTC_SetAlarm_IT+0x214>)
 80081dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80081e0:	4a0b      	ldr	r2, [pc, #44]	@ (8008210 <HAL_RTC_SetAlarm_IT+0x214>)
 80081e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80081e6:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80081ea:	4b08      	ldr	r3, [pc, #32]	@ (800820c <HAL_RTC_SetAlarm_IT+0x210>)
 80081ec:	22ff      	movs	r2, #255	@ 0xff
 80081ee:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	2201      	movs	r2, #1
 80081f4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	2200      	movs	r2, #0
 80081fc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8008200:	2300      	movs	r3, #0
}
 8008202:	4618      	mov	r0, r3
 8008204:	371c      	adds	r7, #28
 8008206:	46bd      	mov	sp, r7
 8008208:	bd90      	pop	{r4, r7, pc}
 800820a:	bf00      	nop
 800820c:	40002800 	.word	0x40002800
 8008210:	58000800 	.word	0x58000800

08008214 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8008214:	b480      	push	{r7}
 8008216:	b083      	sub	sp, #12
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
 800821c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8008224:	2b01      	cmp	r3, #1
 8008226:	d101      	bne.n	800822c <HAL_RTC_DeactivateAlarm+0x18>
 8008228:	2302      	movs	r3, #2
 800822a:	e048      	b.n	80082be <HAL_RTC_DeactivateAlarm+0xaa>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2201      	movs	r2, #1
 8008230:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2202      	movs	r2, #2
 8008238:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800823c:	4b22      	ldr	r3, [pc, #136]	@ (80082c8 <HAL_RTC_DeactivateAlarm+0xb4>)
 800823e:	22ca      	movs	r2, #202	@ 0xca
 8008240:	625a      	str	r2, [r3, #36]	@ 0x24
 8008242:	4b21      	ldr	r3, [pc, #132]	@ (80082c8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008244:	2253      	movs	r2, #83	@ 0x53
 8008246:	625a      	str	r2, [r3, #36]	@ 0x24

  if (Alarm == RTC_ALARM_A)
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800824e:	d115      	bne.n	800827c <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8008250:	4b1d      	ldr	r3, [pc, #116]	@ (80082c8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008252:	699b      	ldr	r3, [r3, #24]
 8008254:	4a1c      	ldr	r2, [pc, #112]	@ (80082c8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008256:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800825a:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 800825c:	4b1a      	ldr	r3, [pc, #104]	@ (80082c8 <HAL_RTC_DeactivateAlarm+0xb4>)
 800825e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008260:	4a19      	ldr	r2, [pc, #100]	@ (80082c8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008262:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008266:	6453      	str	r3, [r2, #68]	@ 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800826c:	f023 0201 	bic.w	r2, r3, #1
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8008274:	4b14      	ldr	r3, [pc, #80]	@ (80082c8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008276:	2201      	movs	r2, #1
 8008278:	65da      	str	r2, [r3, #92]	@ 0x5c
 800827a:	e014      	b.n	80082a6 <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800827c:	4b12      	ldr	r3, [pc, #72]	@ (80082c8 <HAL_RTC_DeactivateAlarm+0xb4>)
 800827e:	699b      	ldr	r3, [r3, #24]
 8008280:	4a11      	ldr	r2, [pc, #68]	@ (80082c8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008282:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 8008286:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8008288:	4b0f      	ldr	r3, [pc, #60]	@ (80082c8 <HAL_RTC_DeactivateAlarm+0xb4>)
 800828a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800828c:	4a0e      	ldr	r2, [pc, #56]	@ (80082c8 <HAL_RTC_DeactivateAlarm+0xb4>)
 800828e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008292:	64d3      	str	r3, [r2, #76]	@ 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008298:	f023 0202 	bic.w	r2, r3, #2
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80082a0:	4b09      	ldr	r3, [pc, #36]	@ (80082c8 <HAL_RTC_DeactivateAlarm+0xb4>)
 80082a2:	2202      	movs	r2, #2
 80082a4:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80082a6:	4b08      	ldr	r3, [pc, #32]	@ (80082c8 <HAL_RTC_DeactivateAlarm+0xb4>)
 80082a8:	22ff      	movs	r2, #255	@ 0xff
 80082aa:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2201      	movs	r2, #1
 80082b0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2200      	movs	r2, #0
 80082b8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80082bc:	2300      	movs	r3, #0
}
 80082be:	4618      	mov	r0, r3
 80082c0:	370c      	adds	r7, #12
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bc80      	pop	{r7}
 80082c6:	4770      	bx	lr
 80082c8:	40002800 	.word	0x40002800

080082cc <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b084      	sub	sp, #16
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 80082d4:	4b11      	ldr	r3, [pc, #68]	@ (800831c <HAL_RTC_AlarmIRQHandler+0x50>)
 80082d6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082dc:	4013      	ands	r3, r2
 80082de:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	f003 0301 	and.w	r3, r3, #1
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d005      	beq.n	80082f6 <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80082ea:	4b0c      	ldr	r3, [pc, #48]	@ (800831c <HAL_RTC_AlarmIRQHandler+0x50>)
 80082ec:	2201      	movs	r2, #1
 80082ee:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f7fa fd36 	bl	8002d62 <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	f003 0302 	and.w	r3, r3, #2
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d005      	beq.n	800830c <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8008300:	4b06      	ldr	r3, [pc, #24]	@ (800831c <HAL_RTC_AlarmIRQHandler+0x50>)
 8008302:	2202      	movs	r2, #2
 8008304:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f000 f94a 	bl	80085a0 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2201      	movs	r2, #1
 8008310:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 8008314:	bf00      	nop
 8008316:	3710      	adds	r7, #16
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}
 800831c:	40002800 	.word	0x40002800

08008320 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b084      	sub	sp, #16
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8008328:	4b0f      	ldr	r3, [pc, #60]	@ (8008368 <HAL_RTC_WaitForSynchro+0x48>)
 800832a:	68db      	ldr	r3, [r3, #12]
 800832c:	4a0e      	ldr	r2, [pc, #56]	@ (8008368 <HAL_RTC_WaitForSynchro+0x48>)
 800832e:	f023 0320 	bic.w	r3, r3, #32
 8008332:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8008334:	f7fa fad6 	bl	80028e4 <HAL_GetTick>
 8008338:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800833a:	e009      	b.n	8008350 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800833c:	f7fa fad2 	bl	80028e4 <HAL_GetTick>
 8008340:	4602      	mov	r2, r0
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	1ad3      	subs	r3, r2, r3
 8008346:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800834a:	d901      	bls.n	8008350 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800834c:	2303      	movs	r3, #3
 800834e:	e006      	b.n	800835e <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8008350:	4b05      	ldr	r3, [pc, #20]	@ (8008368 <HAL_RTC_WaitForSynchro+0x48>)
 8008352:	68db      	ldr	r3, [r3, #12]
 8008354:	f003 0320 	and.w	r3, r3, #32
 8008358:	2b00      	cmp	r3, #0
 800835a:	d0ef      	beq.n	800833c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800835c:	2300      	movs	r3, #0
}
 800835e:	4618      	mov	r0, r3
 8008360:	3710      	adds	r7, #16
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}
 8008366:	bf00      	nop
 8008368:	40002800 	.word	0x40002800

0800836c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b084      	sub	sp, #16
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008374:	2300      	movs	r3, #0
 8008376:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8008378:	4b15      	ldr	r3, [pc, #84]	@ (80083d0 <RTC_EnterInitMode+0x64>)
 800837a:	68db      	ldr	r3, [r3, #12]
 800837c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008380:	2b00      	cmp	r3, #0
 8008382:	d120      	bne.n	80083c6 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8008384:	4b12      	ldr	r3, [pc, #72]	@ (80083d0 <RTC_EnterInitMode+0x64>)
 8008386:	68db      	ldr	r3, [r3, #12]
 8008388:	4a11      	ldr	r2, [pc, #68]	@ (80083d0 <RTC_EnterInitMode+0x64>)
 800838a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800838e:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8008390:	f7fa faa8 	bl	80028e4 <HAL_GetTick>
 8008394:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008396:	e00d      	b.n	80083b4 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008398:	f7fa faa4 	bl	80028e4 <HAL_GetTick>
 800839c:	4602      	mov	r2, r0
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	1ad3      	subs	r3, r2, r3
 80083a2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80083a6:	d905      	bls.n	80083b4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80083a8:	2303      	movs	r3, #3
 80083aa:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2203      	movs	r2, #3
 80083b0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80083b4:	4b06      	ldr	r3, [pc, #24]	@ (80083d0 <RTC_EnterInitMode+0x64>)
 80083b6:	68db      	ldr	r3, [r3, #12]
 80083b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d102      	bne.n	80083c6 <RTC_EnterInitMode+0x5a>
 80083c0:	7bfb      	ldrb	r3, [r7, #15]
 80083c2:	2b03      	cmp	r3, #3
 80083c4:	d1e8      	bne.n	8008398 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 80083c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	3710      	adds	r7, #16
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}
 80083d0:	40002800 	.word	0x40002800

080083d4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b084      	sub	sp, #16
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80083dc:	2300      	movs	r3, #0
 80083de:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80083e0:	4b1a      	ldr	r3, [pc, #104]	@ (800844c <RTC_ExitInitMode+0x78>)
 80083e2:	68db      	ldr	r3, [r3, #12]
 80083e4:	4a19      	ldr	r2, [pc, #100]	@ (800844c <RTC_ExitInitMode+0x78>)
 80083e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80083ea:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80083ec:	4b17      	ldr	r3, [pc, #92]	@ (800844c <RTC_ExitInitMode+0x78>)
 80083ee:	699b      	ldr	r3, [r3, #24]
 80083f0:	f003 0320 	and.w	r3, r3, #32
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d10c      	bne.n	8008412 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f7ff ff91 	bl	8008320 <HAL_RTC_WaitForSynchro>
 80083fe:	4603      	mov	r3, r0
 8008400:	2b00      	cmp	r3, #0
 8008402:	d01e      	beq.n	8008442 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2203      	movs	r2, #3
 8008408:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800840c:	2303      	movs	r3, #3
 800840e:	73fb      	strb	r3, [r7, #15]
 8008410:	e017      	b.n	8008442 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008412:	4b0e      	ldr	r3, [pc, #56]	@ (800844c <RTC_ExitInitMode+0x78>)
 8008414:	699b      	ldr	r3, [r3, #24]
 8008416:	4a0d      	ldr	r2, [pc, #52]	@ (800844c <RTC_ExitInitMode+0x78>)
 8008418:	f023 0320 	bic.w	r3, r3, #32
 800841c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f7ff ff7e 	bl	8008320 <HAL_RTC_WaitForSynchro>
 8008424:	4603      	mov	r3, r0
 8008426:	2b00      	cmp	r3, #0
 8008428:	d005      	beq.n	8008436 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2203      	movs	r2, #3
 800842e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8008432:	2303      	movs	r3, #3
 8008434:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008436:	4b05      	ldr	r3, [pc, #20]	@ (800844c <RTC_ExitInitMode+0x78>)
 8008438:	699b      	ldr	r3, [r3, #24]
 800843a:	4a04      	ldr	r2, [pc, #16]	@ (800844c <RTC_ExitInitMode+0x78>)
 800843c:	f043 0320 	orr.w	r3, r3, #32
 8008440:	6193      	str	r3, [r2, #24]
  }

  return status;
 8008442:	7bfb      	ldrb	r3, [r7, #15]
}
 8008444:	4618      	mov	r0, r3
 8008446:	3710      	adds	r7, #16
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}
 800844c:	40002800 	.word	0x40002800

08008450 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008450:	b480      	push	{r7}
 8008452:	b085      	sub	sp, #20
 8008454:	af00      	add	r7, sp, #0
 8008456:	4603      	mov	r3, r0
 8008458:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800845a:	2300      	movs	r3, #0
 800845c:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 800845e:	79fb      	ldrb	r3, [r7, #7]
 8008460:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8008462:	e005      	b.n	8008470 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	3301      	adds	r3, #1
 8008468:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 800846a:	7afb      	ldrb	r3, [r7, #11]
 800846c:	3b0a      	subs	r3, #10
 800846e:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8008470:	7afb      	ldrb	r3, [r7, #11]
 8008472:	2b09      	cmp	r3, #9
 8008474:	d8f6      	bhi.n	8008464 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	b2db      	uxtb	r3, r3
 800847a:	011b      	lsls	r3, r3, #4
 800847c:	b2da      	uxtb	r2, r3
 800847e:	7afb      	ldrb	r3, [r7, #11]
 8008480:	4313      	orrs	r3, r2
 8008482:	b2db      	uxtb	r3, r3
}
 8008484:	4618      	mov	r0, r3
 8008486:	3714      	adds	r7, #20
 8008488:	46bd      	mov	sp, r7
 800848a:	bc80      	pop	{r7}
 800848c:	4770      	bx	lr
	...

08008490 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8008490:	b480      	push	{r7}
 8008492:	b083      	sub	sp, #12
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800849e:	2b01      	cmp	r3, #1
 80084a0:	d101      	bne.n	80084a6 <HAL_RTCEx_EnableBypassShadow+0x16>
 80084a2:	2302      	movs	r3, #2
 80084a4:	e01f      	b.n	80084e6 <HAL_RTCEx_EnableBypassShadow+0x56>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2201      	movs	r2, #1
 80084aa:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2202      	movs	r2, #2
 80084b2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80084b6:	4b0e      	ldr	r3, [pc, #56]	@ (80084f0 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80084b8:	22ca      	movs	r2, #202	@ 0xca
 80084ba:	625a      	str	r2, [r3, #36]	@ 0x24
 80084bc:	4b0c      	ldr	r3, [pc, #48]	@ (80084f0 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80084be:	2253      	movs	r2, #83	@ 0x53
 80084c0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80084c2:	4b0b      	ldr	r3, [pc, #44]	@ (80084f0 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80084c4:	699b      	ldr	r3, [r3, #24]
 80084c6:	4a0a      	ldr	r2, [pc, #40]	@ (80084f0 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80084c8:	f043 0320 	orr.w	r3, r3, #32
 80084cc:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80084ce:	4b08      	ldr	r3, [pc, #32]	@ (80084f0 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80084d0:	22ff      	movs	r2, #255	@ 0xff
 80084d2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2201      	movs	r2, #1
 80084d8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2200      	movs	r2, #0
 80084e0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80084e4:	2300      	movs	r3, #0
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	370c      	adds	r7, #12
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bc80      	pop	{r7}
 80084ee:	4770      	bx	lr
 80084f0:	40002800 	.word	0x40002800

080084f4 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 80084f4:	b480      	push	{r7}
 80084f6:	b083      	sub	sp, #12
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8008502:	2b01      	cmp	r3, #1
 8008504:	d101      	bne.n	800850a <HAL_RTCEx_SetSSRU_IT+0x16>
 8008506:	2302      	movs	r3, #2
 8008508:	e027      	b.n	800855a <HAL_RTCEx_SetSSRU_IT+0x66>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2201      	movs	r2, #1
 800850e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2202      	movs	r2, #2
 8008516:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800851a:	4b12      	ldr	r3, [pc, #72]	@ (8008564 <HAL_RTCEx_SetSSRU_IT+0x70>)
 800851c:	22ca      	movs	r2, #202	@ 0xca
 800851e:	625a      	str	r2, [r3, #36]	@ 0x24
 8008520:	4b10      	ldr	r3, [pc, #64]	@ (8008564 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8008522:	2253      	movs	r2, #83	@ 0x53
 8008524:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8008526:	4b0f      	ldr	r3, [pc, #60]	@ (8008564 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8008528:	699b      	ldr	r3, [r3, #24]
 800852a:	4a0e      	ldr	r2, [pc, #56]	@ (8008564 <HAL_RTCEx_SetSSRU_IT+0x70>)
 800852c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008530:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8008532:	4b0d      	ldr	r3, [pc, #52]	@ (8008568 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8008534:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008538:	4a0b      	ldr	r2, [pc, #44]	@ (8008568 <HAL_RTCEx_SetSSRU_IT+0x74>)
 800853a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800853e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008542:	4b08      	ldr	r3, [pc, #32]	@ (8008564 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8008544:	22ff      	movs	r2, #255	@ 0xff
 8008546:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2201      	movs	r2, #1
 800854c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2200      	movs	r2, #0
 8008554:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8008558:	2300      	movs	r3, #0
}
 800855a:	4618      	mov	r0, r3
 800855c:	370c      	adds	r7, #12
 800855e:	46bd      	mov	sp, r7
 8008560:	bc80      	pop	{r7}
 8008562:	4770      	bx	lr
 8008564:	40002800 	.word	0x40002800
 8008568:	58000800 	.word	0x58000800

0800856c <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b082      	sub	sp, #8
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8008574:	4b09      	ldr	r3, [pc, #36]	@ (800859c <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8008576:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008578:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800857c:	2b00      	cmp	r3, #0
 800857e:	d005      	beq.n	800858c <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 8008580:	4b06      	ldr	r3, [pc, #24]	@ (800859c <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8008582:	2240      	movs	r2, #64	@ 0x40
 8008584:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f7fa fbf5 	bl	8002d76 <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2201      	movs	r2, #1
 8008590:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 8008594:	bf00      	nop
 8008596:	3708      	adds	r7, #8
 8008598:	46bd      	mov	sp, r7
 800859a:	bd80      	pop	{r7, pc}
 800859c:	40002800 	.word	0x40002800

080085a0 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b083      	sub	sp, #12
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80085a8:	bf00      	nop
 80085aa:	370c      	adds	r7, #12
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bc80      	pop	{r7}
 80085b0:	4770      	bx	lr
	...

080085b4 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b087      	sub	sp, #28
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	60f8      	str	r0, [r7, #12]
 80085bc:	60b9      	str	r1, [r7, #8]
 80085be:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 80085c0:	4b07      	ldr	r3, [pc, #28]	@ (80085e0 <HAL_RTCEx_BKUPWrite+0x2c>)
 80085c2:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	009b      	lsls	r3, r3, #2
 80085c8:	697a      	ldr	r2, [r7, #20]
 80085ca:	4413      	add	r3, r2
 80085cc:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	687a      	ldr	r2, [r7, #4]
 80085d2:	601a      	str	r2, [r3, #0]
}
 80085d4:	bf00      	nop
 80085d6:	371c      	adds	r7, #28
 80085d8:	46bd      	mov	sp, r7
 80085da:	bc80      	pop	{r7}
 80085dc:	4770      	bx	lr
 80085de:	bf00      	nop
 80085e0:	4000b100 	.word	0x4000b100

080085e4 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80085e4:	b480      	push	{r7}
 80085e6:	b085      	sub	sp, #20
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
 80085ec:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 80085ee:	4b07      	ldr	r3, [pc, #28]	@ (800860c <HAL_RTCEx_BKUPRead+0x28>)
 80085f0:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	009b      	lsls	r3, r3, #2
 80085f6:	68fa      	ldr	r2, [r7, #12]
 80085f8:	4413      	add	r3, r2
 80085fa:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
}
 8008600:	4618      	mov	r0, r3
 8008602:	3714      	adds	r7, #20
 8008604:	46bd      	mov	sp, r7
 8008606:	bc80      	pop	{r7}
 8008608:	4770      	bx	lr
 800860a:	bf00      	nop
 800860c:	4000b100 	.word	0x4000b100

08008610 <LL_PWR_SetRadioBusyTrigger>:
{
 8008610:	b480      	push	{r7}
 8008612:	b083      	sub	sp, #12
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8008618:	4b06      	ldr	r3, [pc, #24]	@ (8008634 <LL_PWR_SetRadioBusyTrigger+0x24>)
 800861a:	689b      	ldr	r3, [r3, #8]
 800861c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008620:	4904      	ldr	r1, [pc, #16]	@ (8008634 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	4313      	orrs	r3, r2
 8008626:	608b      	str	r3, [r1, #8]
}
 8008628:	bf00      	nop
 800862a:	370c      	adds	r7, #12
 800862c:	46bd      	mov	sp, r7
 800862e:	bc80      	pop	{r7}
 8008630:	4770      	bx	lr
 8008632:	bf00      	nop
 8008634:	58000400 	.word	0x58000400

08008638 <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 8008638:	b480      	push	{r7}
 800863a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800863c:	4b05      	ldr	r3, [pc, #20]	@ (8008654 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 800863e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008642:	4a04      	ldr	r2, [pc, #16]	@ (8008654 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8008644:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008648:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800864c:	bf00      	nop
 800864e:	46bd      	mov	sp, r7
 8008650:	bc80      	pop	{r7}
 8008652:	4770      	bx	lr
 8008654:	58000400 	.word	0x58000400

08008658 <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 8008658:	b480      	push	{r7}
 800865a:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800865c:	4b05      	ldr	r3, [pc, #20]	@ (8008674 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 800865e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008662:	4a04      	ldr	r2, [pc, #16]	@ (8008674 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8008664:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008668:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800866c:	bf00      	nop
 800866e:	46bd      	mov	sp, r7
 8008670:	bc80      	pop	{r7}
 8008672:	4770      	bx	lr
 8008674:	58000400 	.word	0x58000400

08008678 <LL_PWR_ClearFlag_RFBUSY>:
{
 8008678:	b480      	push	{r7}
 800867a:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 800867c:	4b03      	ldr	r3, [pc, #12]	@ (800868c <LL_PWR_ClearFlag_RFBUSY+0x14>)
 800867e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008682:	619a      	str	r2, [r3, #24]
}
 8008684:	bf00      	nop
 8008686:	46bd      	mov	sp, r7
 8008688:	bc80      	pop	{r7}
 800868a:	4770      	bx	lr
 800868c:	58000400 	.word	0x58000400

08008690 <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 8008690:	b480      	push	{r7}
 8008692:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8008694:	4b06      	ldr	r3, [pc, #24]	@ (80086b0 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8008696:	695b      	ldr	r3, [r3, #20]
 8008698:	f003 0302 	and.w	r3, r3, #2
 800869c:	2b02      	cmp	r3, #2
 800869e:	d101      	bne.n	80086a4 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 80086a0:	2301      	movs	r3, #1
 80086a2:	e000      	b.n	80086a6 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 80086a4:	2300      	movs	r3, #0
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bc80      	pop	{r7}
 80086ac:	4770      	bx	lr
 80086ae:	bf00      	nop
 80086b0:	58000400 	.word	0x58000400

080086b4 <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 80086b4:	b480      	push	{r7}
 80086b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 80086b8:	4b06      	ldr	r3, [pc, #24]	@ (80086d4 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 80086ba:	695b      	ldr	r3, [r3, #20]
 80086bc:	f003 0304 	and.w	r3, r3, #4
 80086c0:	2b04      	cmp	r3, #4
 80086c2:	d101      	bne.n	80086c8 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 80086c4:	2301      	movs	r3, #1
 80086c6:	e000      	b.n	80086ca <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 80086c8:	2300      	movs	r3, #0
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bc80      	pop	{r7}
 80086d0:	4770      	bx	lr
 80086d2:	bf00      	nop
 80086d4:	58000400 	.word	0x58000400

080086d8 <LL_RCC_RF_DisableReset>:
{
 80086d8:	b480      	push	{r7}
 80086da:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 80086dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80086e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80086e4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80086e8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80086ec:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80086f0:	bf00      	nop
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bc80      	pop	{r7}
 80086f6:	4770      	bx	lr

080086f8 <LL_RCC_IsRFUnderReset>:
{
 80086f8:	b480      	push	{r7}
 80086fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 80086fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008700:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008704:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008708:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800870c:	d101      	bne.n	8008712 <LL_RCC_IsRFUnderReset+0x1a>
 800870e:	2301      	movs	r3, #1
 8008710:	e000      	b.n	8008714 <LL_RCC_IsRFUnderReset+0x1c>
 8008712:	2300      	movs	r3, #0
}
 8008714:	4618      	mov	r0, r3
 8008716:	46bd      	mov	sp, r7
 8008718:	bc80      	pop	{r7}
 800871a:	4770      	bx	lr

0800871c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 800871c:	b480      	push	{r7}
 800871e:	b083      	sub	sp, #12
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8008724:	4b06      	ldr	r3, [pc, #24]	@ (8008740 <LL_EXTI_EnableIT_32_63+0x24>)
 8008726:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800872a:	4905      	ldr	r1, [pc, #20]	@ (8008740 <LL_EXTI_EnableIT_32_63+0x24>)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	4313      	orrs	r3, r2
 8008730:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8008734:	bf00      	nop
 8008736:	370c      	adds	r7, #12
 8008738:	46bd      	mov	sp, r7
 800873a:	bc80      	pop	{r7}
 800873c:	4770      	bx	lr
 800873e:	bf00      	nop
 8008740:	58000800 	.word	0x58000800

08008744 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b084      	sub	sp, #16
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d103      	bne.n	800875a <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8008752:	2301      	movs	r3, #1
 8008754:	73fb      	strb	r3, [r7, #15]
    return status;
 8008756:	7bfb      	ldrb	r3, [r7, #15]
 8008758:	e052      	b.n	8008800 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 800875a:	2300      	movs	r3, #0
 800875c:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	799b      	ldrb	r3, [r3, #6]
 8008762:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8008764:	7bbb      	ldrb	r3, [r7, #14]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d002      	beq.n	8008770 <HAL_SUBGHZ_Init+0x2c>
 800876a:	7bbb      	ldrb	r3, [r7, #14]
 800876c:	2b03      	cmp	r3, #3
 800876e:	d109      	bne.n	8008784 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2200      	movs	r2, #0
 8008774:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f7f9 ff0c 	bl	8002594 <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 800877c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8008780:	f7ff ffcc 	bl	800871c <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8008784:	7bbb      	ldrb	r3, [r7, #14]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d126      	bne.n	80087d8 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2202      	movs	r2, #2
 800878e:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 8008790:	f7ff ffa2 	bl	80086d8 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8008794:	4b1c      	ldr	r3, [pc, #112]	@ (8008808 <HAL_SUBGHZ_Init+0xc4>)
 8008796:	681a      	ldr	r2, [r3, #0]
 8008798:	4613      	mov	r3, r2
 800879a:	00db      	lsls	r3, r3, #3
 800879c:	1a9b      	subs	r3, r3, r2
 800879e:	009b      	lsls	r3, r3, #2
 80087a0:	0cdb      	lsrs	r3, r3, #19
 80087a2:	2264      	movs	r2, #100	@ 0x64
 80087a4:	fb02 f303 	mul.w	r3, r2, r3
 80087a8:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d105      	bne.n	80087bc <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 80087b0:	2301      	movs	r3, #1
 80087b2:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2201      	movs	r2, #1
 80087b8:	609a      	str	r2, [r3, #8]
        break;
 80087ba:	e007      	b.n	80087cc <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	3b01      	subs	r3, #1
 80087c0:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 80087c2:	f7ff ff99 	bl	80086f8 <LL_RCC_IsRFUnderReset>
 80087c6:	4603      	mov	r3, r0
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d1ee      	bne.n	80087aa <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80087cc:	f7ff ff34 	bl	8008638 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 80087d0:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80087d4:	f7ff ff1c 	bl	8008610 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 80087d8:	f7ff ff4e 	bl	8008678 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 80087dc:	7bfb      	ldrb	r3, [r7, #15]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d10a      	bne.n	80087f8 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	4618      	mov	r0, r3
 80087e8:	f000 faac 	bl	8008d44 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2201      	movs	r2, #1
 80087f0:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2200      	movs	r2, #0
 80087f6:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2201      	movs	r2, #1
 80087fc:	719a      	strb	r2, [r3, #6]

  return status;
 80087fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008800:	4618      	mov	r0, r3
 8008802:	3710      	adds	r7, #16
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}
 8008808:	20000004 	.word	0x20000004

0800880c <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b086      	sub	sp, #24
 8008810:	af00      	add	r7, sp, #0
 8008812:	60f8      	str	r0, [r7, #12]
 8008814:	607a      	str	r2, [r7, #4]
 8008816:	461a      	mov	r2, r3
 8008818:	460b      	mov	r3, r1
 800881a:	817b      	strh	r3, [r7, #10]
 800881c:	4613      	mov	r3, r2
 800881e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	799b      	ldrb	r3, [r3, #6]
 8008824:	b2db      	uxtb	r3, r3
 8008826:	2b01      	cmp	r3, #1
 8008828:	d14a      	bne.n	80088c0 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	795b      	ldrb	r3, [r3, #5]
 800882e:	2b01      	cmp	r3, #1
 8008830:	d101      	bne.n	8008836 <HAL_SUBGHZ_WriteRegisters+0x2a>
 8008832:	2302      	movs	r3, #2
 8008834:	e045      	b.n	80088c2 <HAL_SUBGHZ_WriteRegisters+0xb6>
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	2201      	movs	r2, #1
 800883a:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	2202      	movs	r2, #2
 8008840:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8008842:	68f8      	ldr	r0, [r7, #12]
 8008844:	f000 fb4c 	bl	8008ee0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008848:	f7ff ff06 	bl	8008658 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 800884c:	210d      	movs	r1, #13
 800884e:	68f8      	ldr	r0, [r7, #12]
 8008850:	f000 fa98 	bl	8008d84 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8008854:	897b      	ldrh	r3, [r7, #10]
 8008856:	0a1b      	lsrs	r3, r3, #8
 8008858:	b29b      	uxth	r3, r3
 800885a:	b2db      	uxtb	r3, r3
 800885c:	4619      	mov	r1, r3
 800885e:	68f8      	ldr	r0, [r7, #12]
 8008860:	f000 fa90 	bl	8008d84 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8008864:	897b      	ldrh	r3, [r7, #10]
 8008866:	b2db      	uxtb	r3, r3
 8008868:	4619      	mov	r1, r3
 800886a:	68f8      	ldr	r0, [r7, #12]
 800886c:	f000 fa8a 	bl	8008d84 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8008870:	2300      	movs	r3, #0
 8008872:	82bb      	strh	r3, [r7, #20]
 8008874:	e00a      	b.n	800888c <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8008876:	8abb      	ldrh	r3, [r7, #20]
 8008878:	687a      	ldr	r2, [r7, #4]
 800887a:	4413      	add	r3, r2
 800887c:	781b      	ldrb	r3, [r3, #0]
 800887e:	4619      	mov	r1, r3
 8008880:	68f8      	ldr	r0, [r7, #12]
 8008882:	f000 fa7f 	bl	8008d84 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8008886:	8abb      	ldrh	r3, [r7, #20]
 8008888:	3301      	adds	r3, #1
 800888a:	82bb      	strh	r3, [r7, #20]
 800888c:	8aba      	ldrh	r2, [r7, #20]
 800888e:	893b      	ldrh	r3, [r7, #8]
 8008890:	429a      	cmp	r2, r3
 8008892:	d3f0      	bcc.n	8008876 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008894:	f7ff fed0 	bl	8008638 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008898:	68f8      	ldr	r0, [r7, #12]
 800889a:	f000 fb45 	bl	8008f28 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	689b      	ldr	r3, [r3, #8]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d002      	beq.n	80088ac <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 80088a6:	2301      	movs	r3, #1
 80088a8:	75fb      	strb	r3, [r7, #23]
 80088aa:	e001      	b.n	80088b0 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 80088ac:	2300      	movs	r3, #0
 80088ae:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	2201      	movs	r2, #1
 80088b4:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2200      	movs	r2, #0
 80088ba:	715a      	strb	r2, [r3, #5]

    return status;
 80088bc:	7dfb      	ldrb	r3, [r7, #23]
 80088be:	e000      	b.n	80088c2 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 80088c0:	2302      	movs	r3, #2
  }
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	3718      	adds	r7, #24
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}

080088ca <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 80088ca:	b580      	push	{r7, lr}
 80088cc:	b088      	sub	sp, #32
 80088ce:	af00      	add	r7, sp, #0
 80088d0:	60f8      	str	r0, [r7, #12]
 80088d2:	607a      	str	r2, [r7, #4]
 80088d4:	461a      	mov	r2, r3
 80088d6:	460b      	mov	r3, r1
 80088d8:	817b      	strh	r3, [r7, #10]
 80088da:	4613      	mov	r3, r2
 80088dc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	799b      	ldrb	r3, [r3, #6]
 80088e6:	b2db      	uxtb	r3, r3
 80088e8:	2b01      	cmp	r3, #1
 80088ea:	d14a      	bne.n	8008982 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	795b      	ldrb	r3, [r3, #5]
 80088f0:	2b01      	cmp	r3, #1
 80088f2:	d101      	bne.n	80088f8 <HAL_SUBGHZ_ReadRegisters+0x2e>
 80088f4:	2302      	movs	r3, #2
 80088f6:	e045      	b.n	8008984 <HAL_SUBGHZ_ReadRegisters+0xba>
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2201      	movs	r2, #1
 80088fc:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80088fe:	68f8      	ldr	r0, [r7, #12]
 8008900:	f000 faee 	bl	8008ee0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008904:	f7ff fea8 	bl	8008658 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8008908:	211d      	movs	r1, #29
 800890a:	68f8      	ldr	r0, [r7, #12]
 800890c:	f000 fa3a 	bl	8008d84 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8008910:	897b      	ldrh	r3, [r7, #10]
 8008912:	0a1b      	lsrs	r3, r3, #8
 8008914:	b29b      	uxth	r3, r3
 8008916:	b2db      	uxtb	r3, r3
 8008918:	4619      	mov	r1, r3
 800891a:	68f8      	ldr	r0, [r7, #12]
 800891c:	f000 fa32 	bl	8008d84 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8008920:	897b      	ldrh	r3, [r7, #10]
 8008922:	b2db      	uxtb	r3, r3
 8008924:	4619      	mov	r1, r3
 8008926:	68f8      	ldr	r0, [r7, #12]
 8008928:	f000 fa2c 	bl	8008d84 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 800892c:	2100      	movs	r1, #0
 800892e:	68f8      	ldr	r0, [r7, #12]
 8008930:	f000 fa28 	bl	8008d84 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8008934:	2300      	movs	r3, #0
 8008936:	82fb      	strh	r3, [r7, #22]
 8008938:	e009      	b.n	800894e <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800893a:	69b9      	ldr	r1, [r7, #24]
 800893c:	68f8      	ldr	r0, [r7, #12]
 800893e:	f000 fa77 	bl	8008e30 <SUBGHZSPI_Receive>
      pData++;
 8008942:	69bb      	ldr	r3, [r7, #24]
 8008944:	3301      	adds	r3, #1
 8008946:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8008948:	8afb      	ldrh	r3, [r7, #22]
 800894a:	3301      	adds	r3, #1
 800894c:	82fb      	strh	r3, [r7, #22]
 800894e:	8afa      	ldrh	r2, [r7, #22]
 8008950:	893b      	ldrh	r3, [r7, #8]
 8008952:	429a      	cmp	r2, r3
 8008954:	d3f1      	bcc.n	800893a <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008956:	f7ff fe6f 	bl	8008638 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800895a:	68f8      	ldr	r0, [r7, #12]
 800895c:	f000 fae4 	bl	8008f28 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	689b      	ldr	r3, [r3, #8]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d002      	beq.n	800896e <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8008968:	2301      	movs	r3, #1
 800896a:	77fb      	strb	r3, [r7, #31]
 800896c:	e001      	b.n	8008972 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 800896e:	2300      	movs	r3, #0
 8008970:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	2201      	movs	r2, #1
 8008976:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	2200      	movs	r2, #0
 800897c:	715a      	strb	r2, [r3, #5]

    return status;
 800897e:	7ffb      	ldrb	r3, [r7, #31]
 8008980:	e000      	b.n	8008984 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8008982:	2302      	movs	r3, #2
  }
}
 8008984:	4618      	mov	r0, r3
 8008986:	3720      	adds	r7, #32
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}

0800898c <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b086      	sub	sp, #24
 8008990:	af00      	add	r7, sp, #0
 8008992:	60f8      	str	r0, [r7, #12]
 8008994:	607a      	str	r2, [r7, #4]
 8008996:	461a      	mov	r2, r3
 8008998:	460b      	mov	r3, r1
 800899a:	72fb      	strb	r3, [r7, #11]
 800899c:	4613      	mov	r3, r2
 800899e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	799b      	ldrb	r3, [r3, #6]
 80089a4:	b2db      	uxtb	r3, r3
 80089a6:	2b01      	cmp	r3, #1
 80089a8:	d14a      	bne.n	8008a40 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	795b      	ldrb	r3, [r3, #5]
 80089ae:	2b01      	cmp	r3, #1
 80089b0:	d101      	bne.n	80089b6 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 80089b2:	2302      	movs	r3, #2
 80089b4:	e045      	b.n	8008a42 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	2201      	movs	r2, #1
 80089ba:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80089bc:	68f8      	ldr	r0, [r7, #12]
 80089be:	f000 fa8f 	bl	8008ee0 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 80089c2:	7afb      	ldrb	r3, [r7, #11]
 80089c4:	2b84      	cmp	r3, #132	@ 0x84
 80089c6:	d002      	beq.n	80089ce <HAL_SUBGHZ_ExecSetCmd+0x42>
 80089c8:	7afb      	ldrb	r3, [r7, #11]
 80089ca:	2b94      	cmp	r3, #148	@ 0x94
 80089cc:	d103      	bne.n	80089d6 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	2201      	movs	r2, #1
 80089d2:	711a      	strb	r2, [r3, #4]
 80089d4:	e002      	b.n	80089dc <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	2200      	movs	r2, #0
 80089da:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80089dc:	f7ff fe3c 	bl	8008658 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80089e0:	7afb      	ldrb	r3, [r7, #11]
 80089e2:	4619      	mov	r1, r3
 80089e4:	68f8      	ldr	r0, [r7, #12]
 80089e6:	f000 f9cd 	bl	8008d84 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80089ea:	2300      	movs	r3, #0
 80089ec:	82bb      	strh	r3, [r7, #20]
 80089ee:	e00a      	b.n	8008a06 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80089f0:	8abb      	ldrh	r3, [r7, #20]
 80089f2:	687a      	ldr	r2, [r7, #4]
 80089f4:	4413      	add	r3, r2
 80089f6:	781b      	ldrb	r3, [r3, #0]
 80089f8:	4619      	mov	r1, r3
 80089fa:	68f8      	ldr	r0, [r7, #12]
 80089fc:	f000 f9c2 	bl	8008d84 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8008a00:	8abb      	ldrh	r3, [r7, #20]
 8008a02:	3301      	adds	r3, #1
 8008a04:	82bb      	strh	r3, [r7, #20]
 8008a06:	8aba      	ldrh	r2, [r7, #20]
 8008a08:	893b      	ldrh	r3, [r7, #8]
 8008a0a:	429a      	cmp	r2, r3
 8008a0c:	d3f0      	bcc.n	80089f0 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008a0e:	f7ff fe13 	bl	8008638 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8008a12:	7afb      	ldrb	r3, [r7, #11]
 8008a14:	2b84      	cmp	r3, #132	@ 0x84
 8008a16:	d002      	beq.n	8008a1e <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008a18:	68f8      	ldr	r0, [r7, #12]
 8008a1a:	f000 fa85 	bl	8008f28 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	689b      	ldr	r3, [r3, #8]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d002      	beq.n	8008a2c <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8008a26:	2301      	movs	r3, #1
 8008a28:	75fb      	strb	r3, [r7, #23]
 8008a2a:	e001      	b.n	8008a30 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	2201      	movs	r2, #1
 8008a34:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	715a      	strb	r2, [r3, #5]

    return status;
 8008a3c:	7dfb      	ldrb	r3, [r7, #23]
 8008a3e:	e000      	b.n	8008a42 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8008a40:	2302      	movs	r3, #2
  }
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3718      	adds	r7, #24
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}

08008a4a <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8008a4a:	b580      	push	{r7, lr}
 8008a4c:	b088      	sub	sp, #32
 8008a4e:	af00      	add	r7, sp, #0
 8008a50:	60f8      	str	r0, [r7, #12]
 8008a52:	607a      	str	r2, [r7, #4]
 8008a54:	461a      	mov	r2, r3
 8008a56:	460b      	mov	r3, r1
 8008a58:	72fb      	strb	r3, [r7, #11]
 8008a5a:	4613      	mov	r3, r2
 8008a5c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	799b      	ldrb	r3, [r3, #6]
 8008a66:	b2db      	uxtb	r3, r3
 8008a68:	2b01      	cmp	r3, #1
 8008a6a:	d13d      	bne.n	8008ae8 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	795b      	ldrb	r3, [r3, #5]
 8008a70:	2b01      	cmp	r3, #1
 8008a72:	d101      	bne.n	8008a78 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8008a74:	2302      	movs	r3, #2
 8008a76:	e038      	b.n	8008aea <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8008a7e:	68f8      	ldr	r0, [r7, #12]
 8008a80:	f000 fa2e 	bl	8008ee0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008a84:	f7ff fde8 	bl	8008658 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8008a88:	7afb      	ldrb	r3, [r7, #11]
 8008a8a:	4619      	mov	r1, r3
 8008a8c:	68f8      	ldr	r0, [r7, #12]
 8008a8e:	f000 f979 	bl	8008d84 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8008a92:	2100      	movs	r1, #0
 8008a94:	68f8      	ldr	r0, [r7, #12]
 8008a96:	f000 f975 	bl	8008d84 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	82fb      	strh	r3, [r7, #22]
 8008a9e:	e009      	b.n	8008ab4 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8008aa0:	69b9      	ldr	r1, [r7, #24]
 8008aa2:	68f8      	ldr	r0, [r7, #12]
 8008aa4:	f000 f9c4 	bl	8008e30 <SUBGHZSPI_Receive>
      pData++;
 8008aa8:	69bb      	ldr	r3, [r7, #24]
 8008aaa:	3301      	adds	r3, #1
 8008aac:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8008aae:	8afb      	ldrh	r3, [r7, #22]
 8008ab0:	3301      	adds	r3, #1
 8008ab2:	82fb      	strh	r3, [r7, #22]
 8008ab4:	8afa      	ldrh	r2, [r7, #22]
 8008ab6:	893b      	ldrh	r3, [r7, #8]
 8008ab8:	429a      	cmp	r2, r3
 8008aba:	d3f1      	bcc.n	8008aa0 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008abc:	f7ff fdbc 	bl	8008638 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008ac0:	68f8      	ldr	r0, [r7, #12]
 8008ac2:	f000 fa31 	bl	8008f28 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	689b      	ldr	r3, [r3, #8]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d002      	beq.n	8008ad4 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8008ace:	2301      	movs	r3, #1
 8008ad0:	77fb      	strb	r3, [r7, #31]
 8008ad2:	e001      	b.n	8008ad8 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	2201      	movs	r2, #1
 8008adc:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	715a      	strb	r2, [r3, #5]

    return status;
 8008ae4:	7ffb      	ldrb	r3, [r7, #31]
 8008ae6:	e000      	b.n	8008aea <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008ae8:	2302      	movs	r3, #2
  }
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	3720      	adds	r7, #32
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}

08008af2 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8008af2:	b580      	push	{r7, lr}
 8008af4:	b086      	sub	sp, #24
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	60f8      	str	r0, [r7, #12]
 8008afa:	607a      	str	r2, [r7, #4]
 8008afc:	461a      	mov	r2, r3
 8008afe:	460b      	mov	r3, r1
 8008b00:	72fb      	strb	r3, [r7, #11]
 8008b02:	4613      	mov	r3, r2
 8008b04:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	799b      	ldrb	r3, [r3, #6]
 8008b0a:	b2db      	uxtb	r3, r3
 8008b0c:	2b01      	cmp	r3, #1
 8008b0e:	d13e      	bne.n	8008b8e <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	795b      	ldrb	r3, [r3, #5]
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	d101      	bne.n	8008b1c <HAL_SUBGHZ_WriteBuffer+0x2a>
 8008b18:	2302      	movs	r3, #2
 8008b1a:	e039      	b.n	8008b90 <HAL_SUBGHZ_WriteBuffer+0x9e>
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	2201      	movs	r2, #1
 8008b20:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8008b22:	68f8      	ldr	r0, [r7, #12]
 8008b24:	f000 f9dc 	bl	8008ee0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008b28:	f7ff fd96 	bl	8008658 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8008b2c:	210e      	movs	r1, #14
 8008b2e:	68f8      	ldr	r0, [r7, #12]
 8008b30:	f000 f928 	bl	8008d84 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8008b34:	7afb      	ldrb	r3, [r7, #11]
 8008b36:	4619      	mov	r1, r3
 8008b38:	68f8      	ldr	r0, [r7, #12]
 8008b3a:	f000 f923 	bl	8008d84 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8008b3e:	2300      	movs	r3, #0
 8008b40:	82bb      	strh	r3, [r7, #20]
 8008b42:	e00a      	b.n	8008b5a <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8008b44:	8abb      	ldrh	r3, [r7, #20]
 8008b46:	687a      	ldr	r2, [r7, #4]
 8008b48:	4413      	add	r3, r2
 8008b4a:	781b      	ldrb	r3, [r3, #0]
 8008b4c:	4619      	mov	r1, r3
 8008b4e:	68f8      	ldr	r0, [r7, #12]
 8008b50:	f000 f918 	bl	8008d84 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8008b54:	8abb      	ldrh	r3, [r7, #20]
 8008b56:	3301      	adds	r3, #1
 8008b58:	82bb      	strh	r3, [r7, #20]
 8008b5a:	8aba      	ldrh	r2, [r7, #20]
 8008b5c:	893b      	ldrh	r3, [r7, #8]
 8008b5e:	429a      	cmp	r2, r3
 8008b60:	d3f0      	bcc.n	8008b44 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008b62:	f7ff fd69 	bl	8008638 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008b66:	68f8      	ldr	r0, [r7, #12]
 8008b68:	f000 f9de 	bl	8008f28 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	689b      	ldr	r3, [r3, #8]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d002      	beq.n	8008b7a <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8008b74:	2301      	movs	r3, #1
 8008b76:	75fb      	strb	r3, [r7, #23]
 8008b78:	e001      	b.n	8008b7e <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	2201      	movs	r2, #1
 8008b82:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	2200      	movs	r2, #0
 8008b88:	715a      	strb	r2, [r3, #5]

    return status;
 8008b8a:	7dfb      	ldrb	r3, [r7, #23]
 8008b8c:	e000      	b.n	8008b90 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8008b8e:	2302      	movs	r3, #2
  }
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	3718      	adds	r7, #24
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}

08008b98 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b088      	sub	sp, #32
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	60f8      	str	r0, [r7, #12]
 8008ba0:	607a      	str	r2, [r7, #4]
 8008ba2:	461a      	mov	r2, r3
 8008ba4:	460b      	mov	r3, r1
 8008ba6:	72fb      	strb	r3, [r7, #11]
 8008ba8:	4613      	mov	r3, r2
 8008baa:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	799b      	ldrb	r3, [r3, #6]
 8008bb4:	b2db      	uxtb	r3, r3
 8008bb6:	2b01      	cmp	r3, #1
 8008bb8:	d141      	bne.n	8008c3e <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	795b      	ldrb	r3, [r3, #5]
 8008bbe:	2b01      	cmp	r3, #1
 8008bc0:	d101      	bne.n	8008bc6 <HAL_SUBGHZ_ReadBuffer+0x2e>
 8008bc2:	2302      	movs	r3, #2
 8008bc4:	e03c      	b.n	8008c40 <HAL_SUBGHZ_ReadBuffer+0xa8>
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	2201      	movs	r2, #1
 8008bca:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8008bcc:	68f8      	ldr	r0, [r7, #12]
 8008bce:	f000 f987 	bl	8008ee0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008bd2:	f7ff fd41 	bl	8008658 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8008bd6:	211e      	movs	r1, #30
 8008bd8:	68f8      	ldr	r0, [r7, #12]
 8008bda:	f000 f8d3 	bl	8008d84 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8008bde:	7afb      	ldrb	r3, [r7, #11]
 8008be0:	4619      	mov	r1, r3
 8008be2:	68f8      	ldr	r0, [r7, #12]
 8008be4:	f000 f8ce 	bl	8008d84 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8008be8:	2100      	movs	r1, #0
 8008bea:	68f8      	ldr	r0, [r7, #12]
 8008bec:	f000 f8ca 	bl	8008d84 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	82fb      	strh	r3, [r7, #22]
 8008bf4:	e009      	b.n	8008c0a <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8008bf6:	69b9      	ldr	r1, [r7, #24]
 8008bf8:	68f8      	ldr	r0, [r7, #12]
 8008bfa:	f000 f919 	bl	8008e30 <SUBGHZSPI_Receive>
      pData++;
 8008bfe:	69bb      	ldr	r3, [r7, #24]
 8008c00:	3301      	adds	r3, #1
 8008c02:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8008c04:	8afb      	ldrh	r3, [r7, #22]
 8008c06:	3301      	adds	r3, #1
 8008c08:	82fb      	strh	r3, [r7, #22]
 8008c0a:	8afa      	ldrh	r2, [r7, #22]
 8008c0c:	893b      	ldrh	r3, [r7, #8]
 8008c0e:	429a      	cmp	r2, r3
 8008c10:	d3f1      	bcc.n	8008bf6 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008c12:	f7ff fd11 	bl	8008638 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008c16:	68f8      	ldr	r0, [r7, #12]
 8008c18:	f000 f986 	bl	8008f28 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	689b      	ldr	r3, [r3, #8]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d002      	beq.n	8008c2a <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8008c24:	2301      	movs	r3, #1
 8008c26:	77fb      	strb	r3, [r7, #31]
 8008c28:	e001      	b.n	8008c2e <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	2201      	movs	r2, #1
 8008c32:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	2200      	movs	r2, #0
 8008c38:	715a      	strb	r2, [r3, #5]

    return status;
 8008c3a:	7ffb      	ldrb	r3, [r7, #31]
 8008c3c:	e000      	b.n	8008c40 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8008c3e:	2302      	movs	r3, #2
  }
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3720      	adds	r7, #32
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}

08008c48 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b084      	sub	sp, #16
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8008c50:	2300      	movs	r3, #0
 8008c52:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8008c54:	f107 020c 	add.w	r2, r7, #12
 8008c58:	2302      	movs	r3, #2
 8008c5a:	2112      	movs	r1, #18
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f7ff fef4 	bl	8008a4a <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8008c62:	7b3b      	ldrb	r3, [r7, #12]
 8008c64:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8008c66:	89fb      	ldrh	r3, [r7, #14]
 8008c68:	021b      	lsls	r3, r3, #8
 8008c6a:	b21a      	sxth	r2, r3
 8008c6c:	7b7b      	ldrb	r3, [r7, #13]
 8008c6e:	b21b      	sxth	r3, r3
 8008c70:	4313      	orrs	r3, r2
 8008c72:	b21b      	sxth	r3, r3
 8008c74:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8008c76:	f107 020c 	add.w	r2, r7, #12
 8008c7a:	2302      	movs	r3, #2
 8008c7c:	2102      	movs	r1, #2
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f7ff fe84 	bl	800898c <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8008c84:	89fb      	ldrh	r3, [r7, #14]
 8008c86:	f003 0301 	and.w	r3, r3, #1
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d002      	beq.n	8008c94 <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f014 fae4 	bl	801d25c <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8008c94:	89fb      	ldrh	r3, [r7, #14]
 8008c96:	f003 0302 	and.w	r3, r3, #2
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d002      	beq.n	8008ca4 <HAL_SUBGHZ_IRQHandler+0x5c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f014 faea 	bl	801d278 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8008ca4:	89fb      	ldrh	r3, [r7, #14]
 8008ca6:	f003 0304 	and.w	r3, r3, #4
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d002      	beq.n	8008cb4 <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f014 fb3a 	bl	801d328 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8008cb4:	89fb      	ldrh	r3, [r7, #14]
 8008cb6:	f003 0308 	and.w	r3, r3, #8
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d002      	beq.n	8008cc4 <HAL_SUBGHZ_IRQHandler+0x7c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f014 fb40 	bl	801d344 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8008cc4:	89fb      	ldrh	r3, [r7, #14]
 8008cc6:	f003 0310 	and.w	r3, r3, #16
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d002      	beq.n	8008cd4 <HAL_SUBGHZ_IRQHandler+0x8c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f014 fb46 	bl	801d360 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8008cd4:	89fb      	ldrh	r3, [r7, #14]
 8008cd6:	f003 0320 	and.w	r3, r3, #32
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d002      	beq.n	8008ce4 <HAL_SUBGHZ_IRQHandler+0x9c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f014 fb14 	bl	801d30c <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8008ce4:	89fb      	ldrh	r3, [r7, #14]
 8008ce6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d002      	beq.n	8008cf4 <HAL_SUBGHZ_IRQHandler+0xac>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f014 fad0 	bl	801d294 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8008cf4:	89fb      	ldrh	r3, [r7, #14]
 8008cf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d00d      	beq.n	8008d1a <HAL_SUBGHZ_IRQHandler+0xd2>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8008cfe:	89fb      	ldrh	r3, [r7, #14]
 8008d00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d004      	beq.n	8008d12 <HAL_SUBGHZ_IRQHandler+0xca>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8008d08:	2101      	movs	r1, #1
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f014 fad0 	bl	801d2b0 <HAL_SUBGHZ_CADStatusCallback>
 8008d10:	e003      	b.n	8008d1a <HAL_SUBGHZ_IRQHandler+0xd2>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8008d12:	2100      	movs	r1, #0
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f014 facb 	bl	801d2b0 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8008d1a:	89fb      	ldrh	r3, [r7, #14]
 8008d1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d002      	beq.n	8008d2a <HAL_SUBGHZ_IRQHandler+0xe2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f014 fae1 	bl	801d2ec <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8008d2a:	89fb      	ldrh	r3, [r7, #14]
 8008d2c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d002      	beq.n	8008d3a <HAL_SUBGHZ_IRQHandler+0xf2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f014 fb21 	bl	801d37c <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 8008d3a:	bf00      	nop
 8008d3c:	3710      	adds	r7, #16
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd80      	pop	{r7, pc}
	...

08008d44 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b083      	sub	sp, #12
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8008d4c:	4b0c      	ldr	r3, [pc, #48]	@ (8008d80 <SUBGHZSPI_Init+0x3c>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	4a0b      	ldr	r2, [pc, #44]	@ (8008d80 <SUBGHZSPI_Init+0x3c>)
 8008d52:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d56:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8008d58:	4a09      	ldr	r2, [pc, #36]	@ (8008d80 <SUBGHZSPI_Init+0x3c>)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 8008d60:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8008d62:	4b07      	ldr	r3, [pc, #28]	@ (8008d80 <SUBGHZSPI_Init+0x3c>)
 8008d64:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 8008d68:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8008d6a:	4b05      	ldr	r3, [pc, #20]	@ (8008d80 <SUBGHZSPI_Init+0x3c>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	4a04      	ldr	r2, [pc, #16]	@ (8008d80 <SUBGHZSPI_Init+0x3c>)
 8008d70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d74:	6013      	str	r3, [r2, #0]
}
 8008d76:	bf00      	nop
 8008d78:	370c      	adds	r7, #12
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bc80      	pop	{r7}
 8008d7e:	4770      	bx	lr
 8008d80:	58010000 	.word	0x58010000

08008d84 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8008d84:	b480      	push	{r7}
 8008d86:	b087      	sub	sp, #28
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
 8008d8c:	460b      	mov	r3, r1
 8008d8e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8008d90:	2300      	movs	r3, #0
 8008d92:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8008d94:	4b23      	ldr	r3, [pc, #140]	@ (8008e24 <SUBGHZSPI_Transmit+0xa0>)
 8008d96:	681a      	ldr	r2, [r3, #0]
 8008d98:	4613      	mov	r3, r2
 8008d9a:	00db      	lsls	r3, r3, #3
 8008d9c:	1a9b      	subs	r3, r3, r2
 8008d9e:	009b      	lsls	r3, r3, #2
 8008da0:	0cdb      	lsrs	r3, r3, #19
 8008da2:	2264      	movs	r2, #100	@ 0x64
 8008da4:	fb02 f303 	mul.w	r3, r2, r3
 8008da8:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d105      	bne.n	8008dbc <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8008db0:	2301      	movs	r3, #1
 8008db2:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2201      	movs	r2, #1
 8008db8:	609a      	str	r2, [r3, #8]
      break;
 8008dba:	e008      	b.n	8008dce <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	3b01      	subs	r3, #1
 8008dc0:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8008dc2:	4b19      	ldr	r3, [pc, #100]	@ (8008e28 <SUBGHZSPI_Transmit+0xa4>)
 8008dc4:	689b      	ldr	r3, [r3, #8]
 8008dc6:	f003 0302 	and.w	r3, r3, #2
 8008dca:	2b02      	cmp	r3, #2
 8008dcc:	d1ed      	bne.n	8008daa <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8008dce:	4b17      	ldr	r3, [pc, #92]	@ (8008e2c <SUBGHZSPI_Transmit+0xa8>)
 8008dd0:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8008dd2:	693b      	ldr	r3, [r7, #16]
 8008dd4:	78fa      	ldrb	r2, [r7, #3]
 8008dd6:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8008dd8:	4b12      	ldr	r3, [pc, #72]	@ (8008e24 <SUBGHZSPI_Transmit+0xa0>)
 8008dda:	681a      	ldr	r2, [r3, #0]
 8008ddc:	4613      	mov	r3, r2
 8008dde:	00db      	lsls	r3, r3, #3
 8008de0:	1a9b      	subs	r3, r3, r2
 8008de2:	009b      	lsls	r3, r3, #2
 8008de4:	0cdb      	lsrs	r3, r3, #19
 8008de6:	2264      	movs	r2, #100	@ 0x64
 8008de8:	fb02 f303 	mul.w	r3, r2, r3
 8008dec:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d105      	bne.n	8008e00 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8008df4:	2301      	movs	r3, #1
 8008df6:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2201      	movs	r2, #1
 8008dfc:	609a      	str	r2, [r3, #8]
      break;
 8008dfe:	e008      	b.n	8008e12 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	3b01      	subs	r3, #1
 8008e04:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8008e06:	4b08      	ldr	r3, [pc, #32]	@ (8008e28 <SUBGHZSPI_Transmit+0xa4>)
 8008e08:	689b      	ldr	r3, [r3, #8]
 8008e0a:	f003 0301 	and.w	r3, r3, #1
 8008e0e:	2b01      	cmp	r3, #1
 8008e10:	d1ed      	bne.n	8008dee <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8008e12:	4b05      	ldr	r3, [pc, #20]	@ (8008e28 <SUBGHZSPI_Transmit+0xa4>)
 8008e14:	68db      	ldr	r3, [r3, #12]

  return status;
 8008e16:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	371c      	adds	r7, #28
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bc80      	pop	{r7}
 8008e20:	4770      	bx	lr
 8008e22:	bf00      	nop
 8008e24:	20000004 	.word	0x20000004
 8008e28:	58010000 	.word	0x58010000
 8008e2c:	5801000c 	.word	0x5801000c

08008e30 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8008e30:	b480      	push	{r7}
 8008e32:	b087      	sub	sp, #28
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
 8008e38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8008e3e:	4b25      	ldr	r3, [pc, #148]	@ (8008ed4 <SUBGHZSPI_Receive+0xa4>)
 8008e40:	681a      	ldr	r2, [r3, #0]
 8008e42:	4613      	mov	r3, r2
 8008e44:	00db      	lsls	r3, r3, #3
 8008e46:	1a9b      	subs	r3, r3, r2
 8008e48:	009b      	lsls	r3, r3, #2
 8008e4a:	0cdb      	lsrs	r3, r3, #19
 8008e4c:	2264      	movs	r2, #100	@ 0x64
 8008e4e:	fb02 f303 	mul.w	r3, r2, r3
 8008e52:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d105      	bne.n	8008e66 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2201      	movs	r2, #1
 8008e62:	609a      	str	r2, [r3, #8]
      break;
 8008e64:	e008      	b.n	8008e78 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	3b01      	subs	r3, #1
 8008e6a:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8008e6c:	4b1a      	ldr	r3, [pc, #104]	@ (8008ed8 <SUBGHZSPI_Receive+0xa8>)
 8008e6e:	689b      	ldr	r3, [r3, #8]
 8008e70:	f003 0302 	and.w	r3, r3, #2
 8008e74:	2b02      	cmp	r3, #2
 8008e76:	d1ed      	bne.n	8008e54 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8008e78:	4b18      	ldr	r3, [pc, #96]	@ (8008edc <SUBGHZSPI_Receive+0xac>)
 8008e7a:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8008e7c:	693b      	ldr	r3, [r7, #16]
 8008e7e:	22ff      	movs	r2, #255	@ 0xff
 8008e80:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8008e82:	4b14      	ldr	r3, [pc, #80]	@ (8008ed4 <SUBGHZSPI_Receive+0xa4>)
 8008e84:	681a      	ldr	r2, [r3, #0]
 8008e86:	4613      	mov	r3, r2
 8008e88:	00db      	lsls	r3, r3, #3
 8008e8a:	1a9b      	subs	r3, r3, r2
 8008e8c:	009b      	lsls	r3, r3, #2
 8008e8e:	0cdb      	lsrs	r3, r3, #19
 8008e90:	2264      	movs	r2, #100	@ 0x64
 8008e92:	fb02 f303 	mul.w	r3, r2, r3
 8008e96:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d105      	bne.n	8008eaa <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2201      	movs	r2, #1
 8008ea6:	609a      	str	r2, [r3, #8]
      break;
 8008ea8:	e008      	b.n	8008ebc <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	3b01      	subs	r3, #1
 8008eae:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8008eb0:	4b09      	ldr	r3, [pc, #36]	@ (8008ed8 <SUBGHZSPI_Receive+0xa8>)
 8008eb2:	689b      	ldr	r3, [r3, #8]
 8008eb4:	f003 0301 	and.w	r3, r3, #1
 8008eb8:	2b01      	cmp	r3, #1
 8008eba:	d1ed      	bne.n	8008e98 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8008ebc:	4b06      	ldr	r3, [pc, #24]	@ (8008ed8 <SUBGHZSPI_Receive+0xa8>)
 8008ebe:	68db      	ldr	r3, [r3, #12]
 8008ec0:	b2da      	uxtb	r2, r3
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	701a      	strb	r2, [r3, #0]

  return status;
 8008ec6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	371c      	adds	r7, #28
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bc80      	pop	{r7}
 8008ed0:	4770      	bx	lr
 8008ed2:	bf00      	nop
 8008ed4:	20000004 	.word	0x20000004
 8008ed8:	58010000 	.word	0x58010000
 8008edc:	5801000c 	.word	0x5801000c

08008ee0 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b084      	sub	sp, #16
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	791b      	ldrb	r3, [r3, #4]
 8008eec:	2b01      	cmp	r3, #1
 8008eee:	d111      	bne.n	8008f14 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8008ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8008f24 <SUBGHZ_CheckDeviceReady+0x44>)
 8008ef2:	681a      	ldr	r2, [r3, #0]
 8008ef4:	4613      	mov	r3, r2
 8008ef6:	005b      	lsls	r3, r3, #1
 8008ef8:	4413      	add	r3, r2
 8008efa:	00db      	lsls	r3, r3, #3
 8008efc:	0c1b      	lsrs	r3, r3, #16
 8008efe:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008f00:	f7ff fbaa 	bl	8008658 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	3b01      	subs	r3, #1
 8008f08:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d1f9      	bne.n	8008f04 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008f10:	f7ff fb92 	bl	8008638 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f000 f807 	bl	8008f28 <SUBGHZ_WaitOnBusy>
 8008f1a:	4603      	mov	r3, r0
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	3710      	adds	r7, #16
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}
 8008f24:	20000004 	.word	0x20000004

08008f28 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b086      	sub	sp, #24
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8008f30:	2300      	movs	r3, #0
 8008f32:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8008f34:	4b12      	ldr	r3, [pc, #72]	@ (8008f80 <SUBGHZ_WaitOnBusy+0x58>)
 8008f36:	681a      	ldr	r2, [r3, #0]
 8008f38:	4613      	mov	r3, r2
 8008f3a:	005b      	lsls	r3, r3, #1
 8008f3c:	4413      	add	r3, r2
 8008f3e:	00db      	lsls	r3, r3, #3
 8008f40:	0d1b      	lsrs	r3, r3, #20
 8008f42:	2264      	movs	r2, #100	@ 0x64
 8008f44:	fb02 f303 	mul.w	r3, r2, r3
 8008f48:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8008f4a:	f7ff fbb3 	bl	80086b4 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8008f4e:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d105      	bne.n	8008f62 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8008f56:	2301      	movs	r3, #1
 8008f58:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2202      	movs	r2, #2
 8008f5e:	609a      	str	r2, [r3, #8]
      break;
 8008f60:	e009      	b.n	8008f76 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	3b01      	subs	r3, #1
 8008f66:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8008f68:	f7ff fb92 	bl	8008690 <LL_PWR_IsActiveFlag_RFBUSYS>
 8008f6c:	4602      	mov	r2, r0
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	4013      	ands	r3, r2
 8008f72:	2b01      	cmp	r3, #1
 8008f74:	d0e9      	beq.n	8008f4a <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8008f76:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3718      	adds	r7, #24
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}
 8008f80:	20000004 	.word	0x20000004

08008f84 <LL_RCC_GetUSARTClockSource>:
{
 8008f84:	b480      	push	{r7}
 8008f86:	b083      	sub	sp, #12
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8008f8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008f90:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	401a      	ands	r2, r3
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	041b      	lsls	r3, r3, #16
 8008f9c:	4313      	orrs	r3, r2
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	370c      	adds	r7, #12
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bc80      	pop	{r7}
 8008fa6:	4770      	bx	lr

08008fa8 <LL_RCC_GetLPUARTClockSource>:
{
 8008fa8:	b480      	push	{r7}
 8008faa:	b083      	sub	sp, #12
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8008fb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008fb4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	4013      	ands	r3, r2
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	370c      	adds	r7, #12
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bc80      	pop	{r7}
 8008fc4:	4770      	bx	lr

08008fc6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008fc6:	b580      	push	{r7, lr}
 8008fc8:	b082      	sub	sp, #8
 8008fca:	af00      	add	r7, sp, #0
 8008fcc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d101      	bne.n	8008fd8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	e042      	b.n	800905e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d106      	bne.n	8008ff0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f7fa f828 	bl	8003040 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2224      	movs	r2, #36	@ 0x24
 8008ff4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	681a      	ldr	r2, [r3, #0]
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f022 0201 	bic.w	r2, r2, #1
 8009006:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f000 fc3b 	bl	8009884 <UART_SetConfig>
 800900e:	4603      	mov	r3, r0
 8009010:	2b01      	cmp	r3, #1
 8009012:	d101      	bne.n	8009018 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009014:	2301      	movs	r3, #1
 8009016:	e022      	b.n	800905e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800901c:	2b00      	cmp	r3, #0
 800901e:	d002      	beq.n	8009026 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	f000 fea3 	bl	8009d6c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	685a      	ldr	r2, [r3, #4]
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009034:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	689a      	ldr	r2, [r3, #8]
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009044:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	681a      	ldr	r2, [r3, #0]
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f042 0201 	orr.w	r2, r2, #1
 8009054:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f000 ff29 	bl	8009eae <UART_CheckIdleState>
 800905c:	4603      	mov	r3, r0
}
 800905e:	4618      	mov	r0, r3
 8009060:	3708      	adds	r7, #8
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}
	...

08009068 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b08a      	sub	sp, #40	@ 0x28
 800906c:	af00      	add	r7, sp, #0
 800906e:	60f8      	str	r0, [r7, #12]
 8009070:	60b9      	str	r1, [r7, #8]
 8009072:	4613      	mov	r3, r2
 8009074:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800907c:	2b20      	cmp	r3, #32
 800907e:	d137      	bne.n	80090f0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d002      	beq.n	800908c <HAL_UART_Receive_IT+0x24>
 8009086:	88fb      	ldrh	r3, [r7, #6]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d101      	bne.n	8009090 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800908c:	2301      	movs	r3, #1
 800908e:	e030      	b.n	80090f2 <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	2200      	movs	r2, #0
 8009094:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	4a18      	ldr	r2, [pc, #96]	@ (80090fc <HAL_UART_Receive_IT+0x94>)
 800909c:	4293      	cmp	r3, r2
 800909e:	d01f      	beq.n	80090e0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	685b      	ldr	r3, [r3, #4]
 80090a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d018      	beq.n	80090e0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090b4:	697b      	ldr	r3, [r7, #20]
 80090b6:	e853 3f00 	ldrex	r3, [r3]
 80090ba:	613b      	str	r3, [r7, #16]
   return(result);
 80090bc:	693b      	ldr	r3, [r7, #16]
 80090be:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80090c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	461a      	mov	r2, r3
 80090ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090cc:	623b      	str	r3, [r7, #32]
 80090ce:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090d0:	69f9      	ldr	r1, [r7, #28]
 80090d2:	6a3a      	ldr	r2, [r7, #32]
 80090d4:	e841 2300 	strex	r3, r2, [r1]
 80090d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80090da:	69bb      	ldr	r3, [r7, #24]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d1e6      	bne.n	80090ae <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80090e0:	88fb      	ldrh	r3, [r7, #6]
 80090e2:	461a      	mov	r2, r3
 80090e4:	68b9      	ldr	r1, [r7, #8]
 80090e6:	68f8      	ldr	r0, [r7, #12]
 80090e8:	f000 fff8 	bl	800a0dc <UART_Start_Receive_IT>
 80090ec:	4603      	mov	r3, r0
 80090ee:	e000      	b.n	80090f2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80090f0:	2302      	movs	r3, #2
  }
}
 80090f2:	4618      	mov	r0, r3
 80090f4:	3728      	adds	r7, #40	@ 0x28
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd80      	pop	{r7, pc}
 80090fa:	bf00      	nop
 80090fc:	40008000 	.word	0x40008000

08009100 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b08a      	sub	sp, #40	@ 0x28
 8009104:	af00      	add	r7, sp, #0
 8009106:	60f8      	str	r0, [r7, #12]
 8009108:	60b9      	str	r1, [r7, #8]
 800910a:	4613      	mov	r3, r2
 800910c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009114:	2b20      	cmp	r3, #32
 8009116:	d167      	bne.n	80091e8 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d002      	beq.n	8009124 <HAL_UART_Transmit_DMA+0x24>
 800911e:	88fb      	ldrh	r3, [r7, #6]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d101      	bne.n	8009128 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8009124:	2301      	movs	r3, #1
 8009126:	e060      	b.n	80091ea <HAL_UART_Transmit_DMA+0xea>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->pTxBuffPtr  = pData;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	68ba      	ldr	r2, [r7, #8]
 800912c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	88fa      	ldrh	r2, [r7, #6]
 8009132:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	88fa      	ldrh	r2, [r7, #6]
 800913a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	2200      	movs	r2, #0
 8009142:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	2221      	movs	r2, #33	@ 0x21
 800914a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009152:	2b00      	cmp	r3, #0
 8009154:	d028      	beq.n	80091a8 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800915a:	4a26      	ldr	r2, [pc, #152]	@ (80091f4 <HAL_UART_Transmit_DMA+0xf4>)
 800915c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009162:	4a25      	ldr	r2, [pc, #148]	@ (80091f8 <HAL_UART_Transmit_DMA+0xf8>)
 8009164:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800916a:	4a24      	ldr	r2, [pc, #144]	@ (80091fc <HAL_UART_Transmit_DMA+0xfc>)
 800916c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009172:	2200      	movs	r2, #0
 8009174:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800917e:	4619      	mov	r1, r3
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	3328      	adds	r3, #40	@ 0x28
 8009186:	461a      	mov	r2, r3
 8009188:	88fb      	ldrh	r3, [r7, #6]
 800918a:	f7fb fd25 	bl	8004bd8 <HAL_DMA_Start_IT>
 800918e:	4603      	mov	r3, r0
 8009190:	2b00      	cmp	r3, #0
 8009192:	d009      	beq.n	80091a8 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	2210      	movs	r2, #16
 8009198:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	2220      	movs	r2, #32
 80091a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 80091a4:	2301      	movs	r3, #1
 80091a6:	e020      	b.n	80091ea <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	2240      	movs	r2, #64	@ 0x40
 80091ae:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	3308      	adds	r3, #8
 80091b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091b8:	697b      	ldr	r3, [r7, #20]
 80091ba:	e853 3f00 	ldrex	r3, [r3]
 80091be:	613b      	str	r3, [r7, #16]
   return(result);
 80091c0:	693b      	ldr	r3, [r7, #16]
 80091c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	3308      	adds	r3, #8
 80091ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80091d0:	623a      	str	r2, [r7, #32]
 80091d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091d4:	69f9      	ldr	r1, [r7, #28]
 80091d6:	6a3a      	ldr	r2, [r7, #32]
 80091d8:	e841 2300 	strex	r3, r2, [r1]
 80091dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80091de:	69bb      	ldr	r3, [r7, #24]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d1e5      	bne.n	80091b0 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80091e4:	2300      	movs	r3, #0
 80091e6:	e000      	b.n	80091ea <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80091e8:	2302      	movs	r3, #2
  }
}
 80091ea:	4618      	mov	r0, r3
 80091ec:	3728      	adds	r7, #40	@ 0x28
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bd80      	pop	{r7, pc}
 80091f2:	bf00      	nop
 80091f4:	0800a467 	.word	0x0800a467
 80091f8:	0800a501 	.word	0x0800a501
 80091fc:	0800a51d 	.word	0x0800a51d

08009200 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b0ba      	sub	sp, #232	@ 0xe8
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	69db      	ldr	r3, [r3, #28]
 800920e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	689b      	ldr	r3, [r3, #8]
 8009222:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009226:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800922a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800922e:	4013      	ands	r3, r2
 8009230:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009234:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009238:	2b00      	cmp	r3, #0
 800923a:	d11b      	bne.n	8009274 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800923c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009240:	f003 0320 	and.w	r3, r3, #32
 8009244:	2b00      	cmp	r3, #0
 8009246:	d015      	beq.n	8009274 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009248:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800924c:	f003 0320 	and.w	r3, r3, #32
 8009250:	2b00      	cmp	r3, #0
 8009252:	d105      	bne.n	8009260 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009254:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009258:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800925c:	2b00      	cmp	r3, #0
 800925e:	d009      	beq.n	8009274 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009264:	2b00      	cmp	r3, #0
 8009266:	f000 82e3 	beq.w	8009830 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	4798      	blx	r3
      }
      return;
 8009272:	e2dd      	b.n	8009830 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009274:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009278:	2b00      	cmp	r3, #0
 800927a:	f000 8123 	beq.w	80094c4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800927e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009282:	4b8d      	ldr	r3, [pc, #564]	@ (80094b8 <HAL_UART_IRQHandler+0x2b8>)
 8009284:	4013      	ands	r3, r2
 8009286:	2b00      	cmp	r3, #0
 8009288:	d106      	bne.n	8009298 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800928a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800928e:	4b8b      	ldr	r3, [pc, #556]	@ (80094bc <HAL_UART_IRQHandler+0x2bc>)
 8009290:	4013      	ands	r3, r2
 8009292:	2b00      	cmp	r3, #0
 8009294:	f000 8116 	beq.w	80094c4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009298:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800929c:	f003 0301 	and.w	r3, r3, #1
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d011      	beq.n	80092c8 <HAL_UART_IRQHandler+0xc8>
 80092a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d00b      	beq.n	80092c8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	2201      	movs	r2, #1
 80092b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092be:	f043 0201 	orr.w	r2, r3, #1
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80092c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092cc:	f003 0302 	and.w	r3, r3, #2
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d011      	beq.n	80092f8 <HAL_UART_IRQHandler+0xf8>
 80092d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80092d8:	f003 0301 	and.w	r3, r3, #1
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d00b      	beq.n	80092f8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	2202      	movs	r2, #2
 80092e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092ee:	f043 0204 	orr.w	r2, r3, #4
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80092f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092fc:	f003 0304 	and.w	r3, r3, #4
 8009300:	2b00      	cmp	r3, #0
 8009302:	d011      	beq.n	8009328 <HAL_UART_IRQHandler+0x128>
 8009304:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009308:	f003 0301 	and.w	r3, r3, #1
 800930c:	2b00      	cmp	r3, #0
 800930e:	d00b      	beq.n	8009328 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	2204      	movs	r2, #4
 8009316:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800931e:	f043 0202 	orr.w	r2, r3, #2
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009328:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800932c:	f003 0308 	and.w	r3, r3, #8
 8009330:	2b00      	cmp	r3, #0
 8009332:	d017      	beq.n	8009364 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009334:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009338:	f003 0320 	and.w	r3, r3, #32
 800933c:	2b00      	cmp	r3, #0
 800933e:	d105      	bne.n	800934c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009340:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009344:	4b5c      	ldr	r3, [pc, #368]	@ (80094b8 <HAL_UART_IRQHandler+0x2b8>)
 8009346:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009348:	2b00      	cmp	r3, #0
 800934a:	d00b      	beq.n	8009364 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	2208      	movs	r2, #8
 8009352:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800935a:	f043 0208 	orr.w	r2, r3, #8
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009364:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009368:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800936c:	2b00      	cmp	r3, #0
 800936e:	d012      	beq.n	8009396 <HAL_UART_IRQHandler+0x196>
 8009370:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009374:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009378:	2b00      	cmp	r3, #0
 800937a:	d00c      	beq.n	8009396 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009384:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800938c:	f043 0220 	orr.w	r2, r3, #32
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800939c:	2b00      	cmp	r3, #0
 800939e:	f000 8249 	beq.w	8009834 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80093a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093a6:	f003 0320 	and.w	r3, r3, #32
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d013      	beq.n	80093d6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80093ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80093b2:	f003 0320 	and.w	r3, r3, #32
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d105      	bne.n	80093c6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80093ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80093be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d007      	beq.n	80093d6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d003      	beq.n	80093d6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093dc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	689b      	ldr	r3, [r3, #8]
 80093e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093ea:	2b40      	cmp	r3, #64	@ 0x40
 80093ec:	d005      	beq.n	80093fa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80093ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80093f2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d054      	beq.n	80094a4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f000 ffce 	bl	800a39c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	689b      	ldr	r3, [r3, #8]
 8009406:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800940a:	2b40      	cmp	r3, #64	@ 0x40
 800940c:	d146      	bne.n	800949c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	3308      	adds	r3, #8
 8009414:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009418:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800941c:	e853 3f00 	ldrex	r3, [r3]
 8009420:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009424:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009428:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800942c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	3308      	adds	r3, #8
 8009436:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800943a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800943e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009442:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009446:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800944a:	e841 2300 	strex	r3, r2, [r1]
 800944e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009452:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009456:	2b00      	cmp	r3, #0
 8009458:	d1d9      	bne.n	800940e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009460:	2b00      	cmp	r3, #0
 8009462:	d017      	beq.n	8009494 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800946a:	4a15      	ldr	r2, [pc, #84]	@ (80094c0 <HAL_UART_IRQHandler+0x2c0>)
 800946c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009474:	4618      	mov	r0, r3
 8009476:	f7fb fc8b 	bl	8004d90 <HAL_DMA_Abort_IT>
 800947a:	4603      	mov	r3, r0
 800947c:	2b00      	cmp	r3, #0
 800947e:	d019      	beq.n	80094b4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009486:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009488:	687a      	ldr	r2, [r7, #4]
 800948a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800948e:	4610      	mov	r0, r2
 8009490:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009492:	e00f      	b.n	80094b4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f000 f9e0 	bl	800985a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800949a:	e00b      	b.n	80094b4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	f000 f9dc 	bl	800985a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094a2:	e007      	b.n	80094b4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f000 f9d8 	bl	800985a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2200      	movs	r2, #0
 80094ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80094b2:	e1bf      	b.n	8009834 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094b4:	bf00      	nop
    return;
 80094b6:	e1bd      	b.n	8009834 <HAL_UART_IRQHandler+0x634>
 80094b8:	10000001 	.word	0x10000001
 80094bc:	04000120 	.word	0x04000120
 80094c0:	0800a59d 	.word	0x0800a59d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80094c8:	2b01      	cmp	r3, #1
 80094ca:	f040 8153 	bne.w	8009774 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80094ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094d2:	f003 0310 	and.w	r3, r3, #16
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	f000 814c 	beq.w	8009774 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80094dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80094e0:	f003 0310 	and.w	r3, r3, #16
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	f000 8145 	beq.w	8009774 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	2210      	movs	r2, #16
 80094f0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	689b      	ldr	r3, [r3, #8]
 80094f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094fc:	2b40      	cmp	r3, #64	@ 0x40
 80094fe:	f040 80bb 	bne.w	8009678 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	685b      	ldr	r3, [r3, #4]
 800950c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009510:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009514:	2b00      	cmp	r3, #0
 8009516:	f000 818f 	beq.w	8009838 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009520:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009524:	429a      	cmp	r2, r3
 8009526:	f080 8187 	bcs.w	8009838 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009530:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f003 0320 	and.w	r3, r3, #32
 8009542:	2b00      	cmp	r3, #0
 8009544:	f040 8087 	bne.w	8009656 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009550:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009554:	e853 3f00 	ldrex	r3, [r3]
 8009558:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800955c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009560:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009564:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	461a      	mov	r2, r3
 800956e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009572:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009576:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800957a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800957e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009582:	e841 2300 	strex	r3, r2, [r1]
 8009586:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800958a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800958e:	2b00      	cmp	r3, #0
 8009590:	d1da      	bne.n	8009548 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	3308      	adds	r3, #8
 8009598:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800959a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800959c:	e853 3f00 	ldrex	r3, [r3]
 80095a0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80095a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80095a4:	f023 0301 	bic.w	r3, r3, #1
 80095a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	3308      	adds	r3, #8
 80095b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80095b6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80095ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095bc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80095be:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80095c2:	e841 2300 	strex	r3, r2, [r1]
 80095c6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80095c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d1e1      	bne.n	8009592 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	3308      	adds	r3, #8
 80095d4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80095d8:	e853 3f00 	ldrex	r3, [r3]
 80095dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80095de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80095e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80095e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	3308      	adds	r3, #8
 80095ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80095f2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80095f4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095f6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80095f8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80095fa:	e841 2300 	strex	r3, r2, [r1]
 80095fe:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009600:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009602:	2b00      	cmp	r3, #0
 8009604:	d1e3      	bne.n	80095ce <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2220      	movs	r2, #32
 800960a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2200      	movs	r2, #0
 8009612:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800961a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800961c:	e853 3f00 	ldrex	r3, [r3]
 8009620:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009622:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009624:	f023 0310 	bic.w	r3, r3, #16
 8009628:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	461a      	mov	r2, r3
 8009632:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009636:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009638:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800963a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800963c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800963e:	e841 2300 	strex	r3, r2, [r1]
 8009642:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009644:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009646:	2b00      	cmp	r3, #0
 8009648:	d1e4      	bne.n	8009614 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009650:	4618      	mov	r0, r3
 8009652:	f7fb fb3f 	bl	8004cd4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2202      	movs	r2, #2
 800965a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009668:	b29b      	uxth	r3, r3
 800966a:	1ad3      	subs	r3, r2, r3
 800966c:	b29b      	uxth	r3, r3
 800966e:	4619      	mov	r1, r3
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f000 f8fb 	bl	800986c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009676:	e0df      	b.n	8009838 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009684:	b29b      	uxth	r3, r3
 8009686:	1ad3      	subs	r3, r2, r3
 8009688:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009692:	b29b      	uxth	r3, r3
 8009694:	2b00      	cmp	r3, #0
 8009696:	f000 80d1 	beq.w	800983c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800969a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800969e:	2b00      	cmp	r3, #0
 80096a0:	f000 80cc 	beq.w	800983c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096ac:	e853 3f00 	ldrex	r3, [r3]
 80096b0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80096b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80096b8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	461a      	mov	r2, r3
 80096c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80096c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80096c8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096ca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80096cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80096ce:	e841 2300 	strex	r3, r2, [r1]
 80096d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80096d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d1e4      	bne.n	80096a4 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	3308      	adds	r3, #8
 80096e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096e4:	e853 3f00 	ldrex	r3, [r3]
 80096e8:	623b      	str	r3, [r7, #32]
   return(result);
 80096ea:	6a3b      	ldr	r3, [r7, #32]
 80096ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80096f0:	f023 0301 	bic.w	r3, r3, #1
 80096f4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	3308      	adds	r3, #8
 80096fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009702:	633a      	str	r2, [r7, #48]	@ 0x30
 8009704:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009706:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009708:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800970a:	e841 2300 	strex	r3, r2, [r1]
 800970e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009712:	2b00      	cmp	r3, #0
 8009714:	d1e1      	bne.n	80096da <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2220      	movs	r2, #32
 800971a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2200      	movs	r2, #0
 8009722:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2200      	movs	r2, #0
 8009728:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009730:	693b      	ldr	r3, [r7, #16]
 8009732:	e853 3f00 	ldrex	r3, [r3]
 8009736:	60fb      	str	r3, [r7, #12]
   return(result);
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	f023 0310 	bic.w	r3, r3, #16
 800973e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	461a      	mov	r2, r3
 8009748:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800974c:	61fb      	str	r3, [r7, #28]
 800974e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009750:	69b9      	ldr	r1, [r7, #24]
 8009752:	69fa      	ldr	r2, [r7, #28]
 8009754:	e841 2300 	strex	r3, r2, [r1]
 8009758:	617b      	str	r3, [r7, #20]
   return(result);
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d1e4      	bne.n	800972a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2202      	movs	r2, #2
 8009764:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009766:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800976a:	4619      	mov	r1, r3
 800976c:	6878      	ldr	r0, [r7, #4]
 800976e:	f000 f87d 	bl	800986c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009772:	e063      	b.n	800983c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009774:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009778:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800977c:	2b00      	cmp	r3, #0
 800977e:	d00e      	beq.n	800979e <HAL_UART_IRQHandler+0x59e>
 8009780:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009784:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009788:	2b00      	cmp	r3, #0
 800978a:	d008      	beq.n	800979e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009794:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f001 fc5e 	bl	800b058 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800979c:	e051      	b.n	8009842 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800979e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d014      	beq.n	80097d4 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80097aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80097ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d105      	bne.n	80097c2 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80097b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80097ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d008      	beq.n	80097d4 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d03a      	beq.n	8009840 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	4798      	blx	r3
    }
    return;
 80097d2:	e035      	b.n	8009840 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80097d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d009      	beq.n	80097f4 <HAL_UART_IRQHandler+0x5f4>
 80097e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80097e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d003      	beq.n	80097f4 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	f000 feeb 	bl	800a5c8 <UART_EndTransmit_IT>
    return;
 80097f2:	e026      	b.n	8009842 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80097f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d009      	beq.n	8009814 <HAL_UART_IRQHandler+0x614>
 8009800:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009804:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009808:	2b00      	cmp	r3, #0
 800980a:	d003      	beq.n	8009814 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f001 fc35 	bl	800b07c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009812:	e016      	b.n	8009842 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009814:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009818:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800981c:	2b00      	cmp	r3, #0
 800981e:	d010      	beq.n	8009842 <HAL_UART_IRQHandler+0x642>
 8009820:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009824:	2b00      	cmp	r3, #0
 8009826:	da0c      	bge.n	8009842 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	f001 fc1e 	bl	800b06a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800982e:	e008      	b.n	8009842 <HAL_UART_IRQHandler+0x642>
      return;
 8009830:	bf00      	nop
 8009832:	e006      	b.n	8009842 <HAL_UART_IRQHandler+0x642>
    return;
 8009834:	bf00      	nop
 8009836:	e004      	b.n	8009842 <HAL_UART_IRQHandler+0x642>
      return;
 8009838:	bf00      	nop
 800983a:	e002      	b.n	8009842 <HAL_UART_IRQHandler+0x642>
      return;
 800983c:	bf00      	nop
 800983e:	e000      	b.n	8009842 <HAL_UART_IRQHandler+0x642>
    return;
 8009840:	bf00      	nop
  }
}
 8009842:	37e8      	adds	r7, #232	@ 0xe8
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}

08009848 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009848:	b480      	push	{r7}
 800984a:	b083      	sub	sp, #12
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009850:	bf00      	nop
 8009852:	370c      	adds	r7, #12
 8009854:	46bd      	mov	sp, r7
 8009856:	bc80      	pop	{r7}
 8009858:	4770      	bx	lr

0800985a <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800985a:	b480      	push	{r7}
 800985c:	b083      	sub	sp, #12
 800985e:	af00      	add	r7, sp, #0
 8009860:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009862:	bf00      	nop
 8009864:	370c      	adds	r7, #12
 8009866:	46bd      	mov	sp, r7
 8009868:	bc80      	pop	{r7}
 800986a:	4770      	bx	lr

0800986c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800986c:	b480      	push	{r7}
 800986e:	b083      	sub	sp, #12
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
 8009874:	460b      	mov	r3, r1
 8009876:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009878:	bf00      	nop
 800987a:	370c      	adds	r7, #12
 800987c:	46bd      	mov	sp, r7
 800987e:	bc80      	pop	{r7}
 8009880:	4770      	bx	lr
	...

08009884 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009884:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009888:	b08c      	sub	sp, #48	@ 0x30
 800988a:	af00      	add	r7, sp, #0
 800988c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800988e:	2300      	movs	r3, #0
 8009890:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009894:	697b      	ldr	r3, [r7, #20]
 8009896:	689a      	ldr	r2, [r3, #8]
 8009898:	697b      	ldr	r3, [r7, #20]
 800989a:	691b      	ldr	r3, [r3, #16]
 800989c:	431a      	orrs	r2, r3
 800989e:	697b      	ldr	r3, [r7, #20]
 80098a0:	695b      	ldr	r3, [r3, #20]
 80098a2:	431a      	orrs	r2, r3
 80098a4:	697b      	ldr	r3, [r7, #20]
 80098a6:	69db      	ldr	r3, [r3, #28]
 80098a8:	4313      	orrs	r3, r2
 80098aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80098ac:	697b      	ldr	r3, [r7, #20]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	681a      	ldr	r2, [r3, #0]
 80098b2:	4b94      	ldr	r3, [pc, #592]	@ (8009b04 <UART_SetConfig+0x280>)
 80098b4:	4013      	ands	r3, r2
 80098b6:	697a      	ldr	r2, [r7, #20]
 80098b8:	6812      	ldr	r2, [r2, #0]
 80098ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80098bc:	430b      	orrs	r3, r1
 80098be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80098c0:	697b      	ldr	r3, [r7, #20]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	685b      	ldr	r3, [r3, #4]
 80098c6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80098ca:	697b      	ldr	r3, [r7, #20]
 80098cc:	68da      	ldr	r2, [r3, #12]
 80098ce:	697b      	ldr	r3, [r7, #20]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	430a      	orrs	r2, r1
 80098d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80098d6:	697b      	ldr	r3, [r7, #20]
 80098d8:	699b      	ldr	r3, [r3, #24]
 80098da:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	4a89      	ldr	r2, [pc, #548]	@ (8009b08 <UART_SetConfig+0x284>)
 80098e2:	4293      	cmp	r3, r2
 80098e4:	d004      	beq.n	80098f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80098e6:	697b      	ldr	r3, [r7, #20]
 80098e8:	6a1b      	ldr	r3, [r3, #32]
 80098ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80098ec:	4313      	orrs	r3, r2
 80098ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80098f0:	697b      	ldr	r3, [r7, #20]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	689b      	ldr	r3, [r3, #8]
 80098f6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80098fa:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80098fe:	697a      	ldr	r2, [r7, #20]
 8009900:	6812      	ldr	r2, [r2, #0]
 8009902:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009904:	430b      	orrs	r3, r1
 8009906:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009908:	697b      	ldr	r3, [r7, #20]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800990e:	f023 010f 	bic.w	r1, r3, #15
 8009912:	697b      	ldr	r3, [r7, #20]
 8009914:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009916:	697b      	ldr	r3, [r7, #20]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	430a      	orrs	r2, r1
 800991c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800991e:	697b      	ldr	r3, [r7, #20]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	4a7a      	ldr	r2, [pc, #488]	@ (8009b0c <UART_SetConfig+0x288>)
 8009924:	4293      	cmp	r3, r2
 8009926:	d127      	bne.n	8009978 <UART_SetConfig+0xf4>
 8009928:	2003      	movs	r0, #3
 800992a:	f7ff fb2b 	bl	8008f84 <LL_RCC_GetUSARTClockSource>
 800992e:	4603      	mov	r3, r0
 8009930:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 8009934:	2b03      	cmp	r3, #3
 8009936:	d81b      	bhi.n	8009970 <UART_SetConfig+0xec>
 8009938:	a201      	add	r2, pc, #4	@ (adr r2, 8009940 <UART_SetConfig+0xbc>)
 800993a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800993e:	bf00      	nop
 8009940:	08009951 	.word	0x08009951
 8009944:	08009961 	.word	0x08009961
 8009948:	08009959 	.word	0x08009959
 800994c:	08009969 	.word	0x08009969
 8009950:	2301      	movs	r3, #1
 8009952:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009956:	e080      	b.n	8009a5a <UART_SetConfig+0x1d6>
 8009958:	2302      	movs	r3, #2
 800995a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800995e:	e07c      	b.n	8009a5a <UART_SetConfig+0x1d6>
 8009960:	2304      	movs	r3, #4
 8009962:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009966:	e078      	b.n	8009a5a <UART_SetConfig+0x1d6>
 8009968:	2308      	movs	r3, #8
 800996a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800996e:	e074      	b.n	8009a5a <UART_SetConfig+0x1d6>
 8009970:	2310      	movs	r3, #16
 8009972:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009976:	e070      	b.n	8009a5a <UART_SetConfig+0x1d6>
 8009978:	697b      	ldr	r3, [r7, #20]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	4a64      	ldr	r2, [pc, #400]	@ (8009b10 <UART_SetConfig+0x28c>)
 800997e:	4293      	cmp	r3, r2
 8009980:	d138      	bne.n	80099f4 <UART_SetConfig+0x170>
 8009982:	200c      	movs	r0, #12
 8009984:	f7ff fafe 	bl	8008f84 <LL_RCC_GetUSARTClockSource>
 8009988:	4603      	mov	r3, r0
 800998a:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 800998e:	2b0c      	cmp	r3, #12
 8009990:	d82c      	bhi.n	80099ec <UART_SetConfig+0x168>
 8009992:	a201      	add	r2, pc, #4	@ (adr r2, 8009998 <UART_SetConfig+0x114>)
 8009994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009998:	080099cd 	.word	0x080099cd
 800999c:	080099ed 	.word	0x080099ed
 80099a0:	080099ed 	.word	0x080099ed
 80099a4:	080099ed 	.word	0x080099ed
 80099a8:	080099dd 	.word	0x080099dd
 80099ac:	080099ed 	.word	0x080099ed
 80099b0:	080099ed 	.word	0x080099ed
 80099b4:	080099ed 	.word	0x080099ed
 80099b8:	080099d5 	.word	0x080099d5
 80099bc:	080099ed 	.word	0x080099ed
 80099c0:	080099ed 	.word	0x080099ed
 80099c4:	080099ed 	.word	0x080099ed
 80099c8:	080099e5 	.word	0x080099e5
 80099cc:	2300      	movs	r3, #0
 80099ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099d2:	e042      	b.n	8009a5a <UART_SetConfig+0x1d6>
 80099d4:	2302      	movs	r3, #2
 80099d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099da:	e03e      	b.n	8009a5a <UART_SetConfig+0x1d6>
 80099dc:	2304      	movs	r3, #4
 80099de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099e2:	e03a      	b.n	8009a5a <UART_SetConfig+0x1d6>
 80099e4:	2308      	movs	r3, #8
 80099e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099ea:	e036      	b.n	8009a5a <UART_SetConfig+0x1d6>
 80099ec:	2310      	movs	r3, #16
 80099ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80099f2:	e032      	b.n	8009a5a <UART_SetConfig+0x1d6>
 80099f4:	697b      	ldr	r3, [r7, #20]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	4a43      	ldr	r2, [pc, #268]	@ (8009b08 <UART_SetConfig+0x284>)
 80099fa:	4293      	cmp	r3, r2
 80099fc:	d12a      	bne.n	8009a54 <UART_SetConfig+0x1d0>
 80099fe:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8009a02:	f7ff fad1 	bl	8008fa8 <LL_RCC_GetLPUARTClockSource>
 8009a06:	4603      	mov	r3, r0
 8009a08:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009a0c:	d01a      	beq.n	8009a44 <UART_SetConfig+0x1c0>
 8009a0e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009a12:	d81b      	bhi.n	8009a4c <UART_SetConfig+0x1c8>
 8009a14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009a18:	d00c      	beq.n	8009a34 <UART_SetConfig+0x1b0>
 8009a1a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009a1e:	d815      	bhi.n	8009a4c <UART_SetConfig+0x1c8>
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d003      	beq.n	8009a2c <UART_SetConfig+0x1a8>
 8009a24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009a28:	d008      	beq.n	8009a3c <UART_SetConfig+0x1b8>
 8009a2a:	e00f      	b.n	8009a4c <UART_SetConfig+0x1c8>
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a32:	e012      	b.n	8009a5a <UART_SetConfig+0x1d6>
 8009a34:	2302      	movs	r3, #2
 8009a36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a3a:	e00e      	b.n	8009a5a <UART_SetConfig+0x1d6>
 8009a3c:	2304      	movs	r3, #4
 8009a3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a42:	e00a      	b.n	8009a5a <UART_SetConfig+0x1d6>
 8009a44:	2308      	movs	r3, #8
 8009a46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a4a:	e006      	b.n	8009a5a <UART_SetConfig+0x1d6>
 8009a4c:	2310      	movs	r3, #16
 8009a4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a52:	e002      	b.n	8009a5a <UART_SetConfig+0x1d6>
 8009a54:	2310      	movs	r3, #16
 8009a56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009a5a:	697b      	ldr	r3, [r7, #20]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	4a2a      	ldr	r2, [pc, #168]	@ (8009b08 <UART_SetConfig+0x284>)
 8009a60:	4293      	cmp	r3, r2
 8009a62:	f040 80a4 	bne.w	8009bae <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009a66:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009a6a:	2b08      	cmp	r3, #8
 8009a6c:	d823      	bhi.n	8009ab6 <UART_SetConfig+0x232>
 8009a6e:	a201      	add	r2, pc, #4	@ (adr r2, 8009a74 <UART_SetConfig+0x1f0>)
 8009a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a74:	08009a99 	.word	0x08009a99
 8009a78:	08009ab7 	.word	0x08009ab7
 8009a7c:	08009aa1 	.word	0x08009aa1
 8009a80:	08009ab7 	.word	0x08009ab7
 8009a84:	08009aa7 	.word	0x08009aa7
 8009a88:	08009ab7 	.word	0x08009ab7
 8009a8c:	08009ab7 	.word	0x08009ab7
 8009a90:	08009ab7 	.word	0x08009ab7
 8009a94:	08009aaf 	.word	0x08009aaf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009a98:	f7fd ff4a 	bl	8007930 <HAL_RCC_GetPCLK1Freq>
 8009a9c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009a9e:	e010      	b.n	8009ac2 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009aa0:	4b1c      	ldr	r3, [pc, #112]	@ (8009b14 <UART_SetConfig+0x290>)
 8009aa2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009aa4:	e00d      	b.n	8009ac2 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009aa6:	f7fd fe8f 	bl	80077c8 <HAL_RCC_GetSysClockFreq>
 8009aaa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009aac:	e009      	b.n	8009ac2 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009aae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009ab2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009ab4:	e005      	b.n	8009ac2 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009aba:	2301      	movs	r3, #1
 8009abc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009ac0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	f000 8137 	beq.w	8009d38 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ace:	4a12      	ldr	r2, [pc, #72]	@ (8009b18 <UART_SetConfig+0x294>)
 8009ad0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ad4:	461a      	mov	r2, r3
 8009ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ad8:	fbb3 f3f2 	udiv	r3, r3, r2
 8009adc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009ade:	697b      	ldr	r3, [r7, #20]
 8009ae0:	685a      	ldr	r2, [r3, #4]
 8009ae2:	4613      	mov	r3, r2
 8009ae4:	005b      	lsls	r3, r3, #1
 8009ae6:	4413      	add	r3, r2
 8009ae8:	69ba      	ldr	r2, [r7, #24]
 8009aea:	429a      	cmp	r2, r3
 8009aec:	d305      	bcc.n	8009afa <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009aee:	697b      	ldr	r3, [r7, #20]
 8009af0:	685b      	ldr	r3, [r3, #4]
 8009af2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009af4:	69ba      	ldr	r2, [r7, #24]
 8009af6:	429a      	cmp	r2, r3
 8009af8:	d910      	bls.n	8009b1c <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8009afa:	2301      	movs	r3, #1
 8009afc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009b00:	e11a      	b.n	8009d38 <UART_SetConfig+0x4b4>
 8009b02:	bf00      	nop
 8009b04:	cfff69f3 	.word	0xcfff69f3
 8009b08:	40008000 	.word	0x40008000
 8009b0c:	40013800 	.word	0x40013800
 8009b10:	40004400 	.word	0x40004400
 8009b14:	00f42400 	.word	0x00f42400
 8009b18:	0801f854 	.word	0x0801f854
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b1e:	2200      	movs	r2, #0
 8009b20:	60bb      	str	r3, [r7, #8]
 8009b22:	60fa      	str	r2, [r7, #12]
 8009b24:	697b      	ldr	r3, [r7, #20]
 8009b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b28:	4a8e      	ldr	r2, [pc, #568]	@ (8009d64 <UART_SetConfig+0x4e0>)
 8009b2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b2e:	b29b      	uxth	r3, r3
 8009b30:	2200      	movs	r2, #0
 8009b32:	603b      	str	r3, [r7, #0]
 8009b34:	607a      	str	r2, [r7, #4]
 8009b36:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b3a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009b3e:	f7f7 fb0b 	bl	8001158 <__aeabi_uldivmod>
 8009b42:	4602      	mov	r2, r0
 8009b44:	460b      	mov	r3, r1
 8009b46:	4610      	mov	r0, r2
 8009b48:	4619      	mov	r1, r3
 8009b4a:	f04f 0200 	mov.w	r2, #0
 8009b4e:	f04f 0300 	mov.w	r3, #0
 8009b52:	020b      	lsls	r3, r1, #8
 8009b54:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009b58:	0202      	lsls	r2, r0, #8
 8009b5a:	6979      	ldr	r1, [r7, #20]
 8009b5c:	6849      	ldr	r1, [r1, #4]
 8009b5e:	0849      	lsrs	r1, r1, #1
 8009b60:	2000      	movs	r0, #0
 8009b62:	460c      	mov	r4, r1
 8009b64:	4605      	mov	r5, r0
 8009b66:	eb12 0804 	adds.w	r8, r2, r4
 8009b6a:	eb43 0905 	adc.w	r9, r3, r5
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	685b      	ldr	r3, [r3, #4]
 8009b72:	2200      	movs	r2, #0
 8009b74:	469a      	mov	sl, r3
 8009b76:	4693      	mov	fp, r2
 8009b78:	4652      	mov	r2, sl
 8009b7a:	465b      	mov	r3, fp
 8009b7c:	4640      	mov	r0, r8
 8009b7e:	4649      	mov	r1, r9
 8009b80:	f7f7 faea 	bl	8001158 <__aeabi_uldivmod>
 8009b84:	4602      	mov	r2, r0
 8009b86:	460b      	mov	r3, r1
 8009b88:	4613      	mov	r3, r2
 8009b8a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009b8c:	6a3b      	ldr	r3, [r7, #32]
 8009b8e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009b92:	d308      	bcc.n	8009ba6 <UART_SetConfig+0x322>
 8009b94:	6a3b      	ldr	r3, [r7, #32]
 8009b96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009b9a:	d204      	bcs.n	8009ba6 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8009b9c:	697b      	ldr	r3, [r7, #20]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	6a3a      	ldr	r2, [r7, #32]
 8009ba2:	60da      	str	r2, [r3, #12]
 8009ba4:	e0c8      	b.n	8009d38 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009bac:	e0c4      	b.n	8009d38 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009bae:	697b      	ldr	r3, [r7, #20]
 8009bb0:	69db      	ldr	r3, [r3, #28]
 8009bb2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009bb6:	d167      	bne.n	8009c88 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8009bb8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009bbc:	2b08      	cmp	r3, #8
 8009bbe:	d828      	bhi.n	8009c12 <UART_SetConfig+0x38e>
 8009bc0:	a201      	add	r2, pc, #4	@ (adr r2, 8009bc8 <UART_SetConfig+0x344>)
 8009bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bc6:	bf00      	nop
 8009bc8:	08009bed 	.word	0x08009bed
 8009bcc:	08009bf5 	.word	0x08009bf5
 8009bd0:	08009bfd 	.word	0x08009bfd
 8009bd4:	08009c13 	.word	0x08009c13
 8009bd8:	08009c03 	.word	0x08009c03
 8009bdc:	08009c13 	.word	0x08009c13
 8009be0:	08009c13 	.word	0x08009c13
 8009be4:	08009c13 	.word	0x08009c13
 8009be8:	08009c0b 	.word	0x08009c0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009bec:	f7fd fea0 	bl	8007930 <HAL_RCC_GetPCLK1Freq>
 8009bf0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009bf2:	e014      	b.n	8009c1e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009bf4:	f7fd feae 	bl	8007954 <HAL_RCC_GetPCLK2Freq>
 8009bf8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009bfa:	e010      	b.n	8009c1e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009bfc:	4b5a      	ldr	r3, [pc, #360]	@ (8009d68 <UART_SetConfig+0x4e4>)
 8009bfe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009c00:	e00d      	b.n	8009c1e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009c02:	f7fd fde1 	bl	80077c8 <HAL_RCC_GetSysClockFreq>
 8009c06:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009c08:	e009      	b.n	8009c1e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009c0e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009c10:	e005      	b.n	8009c1e <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8009c12:	2300      	movs	r3, #0
 8009c14:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009c16:	2301      	movs	r3, #1
 8009c18:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009c1c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	f000 8089 	beq.w	8009d38 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c26:	697b      	ldr	r3, [r7, #20]
 8009c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c2a:	4a4e      	ldr	r2, [pc, #312]	@ (8009d64 <UART_SetConfig+0x4e0>)
 8009c2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c30:	461a      	mov	r2, r3
 8009c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c34:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c38:	005a      	lsls	r2, r3, #1
 8009c3a:	697b      	ldr	r3, [r7, #20]
 8009c3c:	685b      	ldr	r3, [r3, #4]
 8009c3e:	085b      	lsrs	r3, r3, #1
 8009c40:	441a      	add	r2, r3
 8009c42:	697b      	ldr	r3, [r7, #20]
 8009c44:	685b      	ldr	r3, [r3, #4]
 8009c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c4a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009c4c:	6a3b      	ldr	r3, [r7, #32]
 8009c4e:	2b0f      	cmp	r3, #15
 8009c50:	d916      	bls.n	8009c80 <UART_SetConfig+0x3fc>
 8009c52:	6a3b      	ldr	r3, [r7, #32]
 8009c54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009c58:	d212      	bcs.n	8009c80 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009c5a:	6a3b      	ldr	r3, [r7, #32]
 8009c5c:	b29b      	uxth	r3, r3
 8009c5e:	f023 030f 	bic.w	r3, r3, #15
 8009c62:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009c64:	6a3b      	ldr	r3, [r7, #32]
 8009c66:	085b      	lsrs	r3, r3, #1
 8009c68:	b29b      	uxth	r3, r3
 8009c6a:	f003 0307 	and.w	r3, r3, #7
 8009c6e:	b29a      	uxth	r2, r3
 8009c70:	8bfb      	ldrh	r3, [r7, #30]
 8009c72:	4313      	orrs	r3, r2
 8009c74:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009c76:	697b      	ldr	r3, [r7, #20]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	8bfa      	ldrh	r2, [r7, #30]
 8009c7c:	60da      	str	r2, [r3, #12]
 8009c7e:	e05b      	b.n	8009d38 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8009c80:	2301      	movs	r3, #1
 8009c82:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009c86:	e057      	b.n	8009d38 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009c88:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009c8c:	2b08      	cmp	r3, #8
 8009c8e:	d828      	bhi.n	8009ce2 <UART_SetConfig+0x45e>
 8009c90:	a201      	add	r2, pc, #4	@ (adr r2, 8009c98 <UART_SetConfig+0x414>)
 8009c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c96:	bf00      	nop
 8009c98:	08009cbd 	.word	0x08009cbd
 8009c9c:	08009cc5 	.word	0x08009cc5
 8009ca0:	08009ccd 	.word	0x08009ccd
 8009ca4:	08009ce3 	.word	0x08009ce3
 8009ca8:	08009cd3 	.word	0x08009cd3
 8009cac:	08009ce3 	.word	0x08009ce3
 8009cb0:	08009ce3 	.word	0x08009ce3
 8009cb4:	08009ce3 	.word	0x08009ce3
 8009cb8:	08009cdb 	.word	0x08009cdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009cbc:	f7fd fe38 	bl	8007930 <HAL_RCC_GetPCLK1Freq>
 8009cc0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009cc2:	e014      	b.n	8009cee <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009cc4:	f7fd fe46 	bl	8007954 <HAL_RCC_GetPCLK2Freq>
 8009cc8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009cca:	e010      	b.n	8009cee <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009ccc:	4b26      	ldr	r3, [pc, #152]	@ (8009d68 <UART_SetConfig+0x4e4>)
 8009cce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009cd0:	e00d      	b.n	8009cee <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009cd2:	f7fd fd79 	bl	80077c8 <HAL_RCC_GetSysClockFreq>
 8009cd6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009cd8:	e009      	b.n	8009cee <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009cda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009cde:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009ce0:	e005      	b.n	8009cee <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009ce6:	2301      	movs	r3, #1
 8009ce8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009cec:	bf00      	nop
    }

    if (pclk != 0U)
 8009cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d021      	beq.n	8009d38 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009cf4:	697b      	ldr	r3, [r7, #20]
 8009cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cf8:	4a1a      	ldr	r2, [pc, #104]	@ (8009d64 <UART_SetConfig+0x4e0>)
 8009cfa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009cfe:	461a      	mov	r2, r3
 8009d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d02:	fbb3 f2f2 	udiv	r2, r3, r2
 8009d06:	697b      	ldr	r3, [r7, #20]
 8009d08:	685b      	ldr	r3, [r3, #4]
 8009d0a:	085b      	lsrs	r3, r3, #1
 8009d0c:	441a      	add	r2, r3
 8009d0e:	697b      	ldr	r3, [r7, #20]
 8009d10:	685b      	ldr	r3, [r3, #4]
 8009d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d16:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009d18:	6a3b      	ldr	r3, [r7, #32]
 8009d1a:	2b0f      	cmp	r3, #15
 8009d1c:	d909      	bls.n	8009d32 <UART_SetConfig+0x4ae>
 8009d1e:	6a3b      	ldr	r3, [r7, #32]
 8009d20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d24:	d205      	bcs.n	8009d32 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009d26:	6a3b      	ldr	r3, [r7, #32]
 8009d28:	b29a      	uxth	r2, r3
 8009d2a:	697b      	ldr	r3, [r7, #20]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	60da      	str	r2, [r3, #12]
 8009d30:	e002      	b.n	8009d38 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8009d32:	2301      	movs	r3, #1
 8009d34:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009d38:	697b      	ldr	r3, [r7, #20]
 8009d3a:	2201      	movs	r2, #1
 8009d3c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009d40:	697b      	ldr	r3, [r7, #20]
 8009d42:	2201      	movs	r2, #1
 8009d44:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009d48:	697b      	ldr	r3, [r7, #20]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009d4e:	697b      	ldr	r3, [r7, #20]
 8009d50:	2200      	movs	r2, #0
 8009d52:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009d54:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8009d58:	4618      	mov	r0, r3
 8009d5a:	3730      	adds	r7, #48	@ 0x30
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009d62:	bf00      	nop
 8009d64:	0801f854 	.word	0x0801f854
 8009d68:	00f42400 	.word	0x00f42400

08009d6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009d6c:	b480      	push	{r7}
 8009d6e:	b083      	sub	sp, #12
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d78:	f003 0301 	and.w	r3, r3, #1
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d00a      	beq.n	8009d96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	685b      	ldr	r3, [r3, #4]
 8009d86:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	430a      	orrs	r2, r1
 8009d94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d9a:	f003 0302 	and.w	r3, r3, #2
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d00a      	beq.n	8009db8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	685b      	ldr	r3, [r3, #4]
 8009da8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	430a      	orrs	r2, r1
 8009db6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dbc:	f003 0304 	and.w	r3, r3, #4
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d00a      	beq.n	8009dda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	685b      	ldr	r3, [r3, #4]
 8009dca:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	430a      	orrs	r2, r1
 8009dd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dde:	f003 0308 	and.w	r3, r3, #8
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d00a      	beq.n	8009dfc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	685b      	ldr	r3, [r3, #4]
 8009dec:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	430a      	orrs	r2, r1
 8009dfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e00:	f003 0310 	and.w	r3, r3, #16
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d00a      	beq.n	8009e1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	689b      	ldr	r3, [r3, #8]
 8009e0e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	430a      	orrs	r2, r1
 8009e1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e22:	f003 0320 	and.w	r3, r3, #32
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d00a      	beq.n	8009e40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	689b      	ldr	r3, [r3, #8]
 8009e30:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	430a      	orrs	r2, r1
 8009e3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d01a      	beq.n	8009e82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	685b      	ldr	r3, [r3, #4]
 8009e52:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	430a      	orrs	r2, r1
 8009e60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009e6a:	d10a      	bne.n	8009e82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	685b      	ldr	r3, [r3, #4]
 8009e72:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	430a      	orrs	r2, r1
 8009e80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d00a      	beq.n	8009ea4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	685b      	ldr	r3, [r3, #4]
 8009e94:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	430a      	orrs	r2, r1
 8009ea2:	605a      	str	r2, [r3, #4]
  }
}
 8009ea4:	bf00      	nop
 8009ea6:	370c      	adds	r7, #12
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bc80      	pop	{r7}
 8009eac:	4770      	bx	lr

08009eae <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009eae:	b580      	push	{r7, lr}
 8009eb0:	b086      	sub	sp, #24
 8009eb2:	af02      	add	r7, sp, #8
 8009eb4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2200      	movs	r2, #0
 8009eba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009ebe:	f7f8 fd11 	bl	80028e4 <HAL_GetTick>
 8009ec2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f003 0308 	and.w	r3, r3, #8
 8009ece:	2b08      	cmp	r3, #8
 8009ed0:	d10e      	bne.n	8009ef0 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009ed2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009ed6:	9300      	str	r3, [sp, #0]
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	2200      	movs	r2, #0
 8009edc:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009ee0:	6878      	ldr	r0, [r7, #4]
 8009ee2:	f000 f832 	bl	8009f4a <UART_WaitOnFlagUntilTimeout>
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d001      	beq.n	8009ef0 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009eec:	2303      	movs	r3, #3
 8009eee:	e028      	b.n	8009f42 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	f003 0304 	and.w	r3, r3, #4
 8009efa:	2b04      	cmp	r3, #4
 8009efc:	d10e      	bne.n	8009f1c <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009efe:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009f02:	9300      	str	r3, [sp, #0]
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	2200      	movs	r2, #0
 8009f08:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f000 f81c 	bl	8009f4a <UART_WaitOnFlagUntilTimeout>
 8009f12:	4603      	mov	r3, r0
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d001      	beq.n	8009f1c <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009f18:	2303      	movs	r3, #3
 8009f1a:	e012      	b.n	8009f42 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2220      	movs	r2, #32
 8009f20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2220      	movs	r2, #32
 8009f28:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2200      	movs	r2, #0
 8009f36:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009f40:	2300      	movs	r3, #0
}
 8009f42:	4618      	mov	r0, r3
 8009f44:	3710      	adds	r7, #16
 8009f46:	46bd      	mov	sp, r7
 8009f48:	bd80      	pop	{r7, pc}

08009f4a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009f4a:	b580      	push	{r7, lr}
 8009f4c:	b09c      	sub	sp, #112	@ 0x70
 8009f4e:	af00      	add	r7, sp, #0
 8009f50:	60f8      	str	r0, [r7, #12]
 8009f52:	60b9      	str	r1, [r7, #8]
 8009f54:	603b      	str	r3, [r7, #0]
 8009f56:	4613      	mov	r3, r2
 8009f58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f5a:	e0a9      	b.n	800a0b0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f5c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f62:	f000 80a5 	beq.w	800a0b0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f66:	f7f8 fcbd 	bl	80028e4 <HAL_GetTick>
 8009f6a:	4602      	mov	r2, r0
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	1ad3      	subs	r3, r2, r3
 8009f70:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8009f72:	429a      	cmp	r2, r3
 8009f74:	d302      	bcc.n	8009f7c <UART_WaitOnFlagUntilTimeout+0x32>
 8009f76:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d140      	bne.n	8009ffe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f84:	e853 3f00 	ldrex	r3, [r3]
 8009f88:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009f8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f8c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8009f90:	667b      	str	r3, [r7, #100]	@ 0x64
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	461a      	mov	r2, r3
 8009f98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009f9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009f9c:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f9e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009fa0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009fa2:	e841 2300 	strex	r3, r2, [r1]
 8009fa6:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8009fa8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d1e6      	bne.n	8009f7c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	3308      	adds	r3, #8
 8009fb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fb8:	e853 3f00 	ldrex	r3, [r3]
 8009fbc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009fbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fc0:	f023 0301 	bic.w	r3, r3, #1
 8009fc4:	663b      	str	r3, [r7, #96]	@ 0x60
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	3308      	adds	r3, #8
 8009fcc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009fce:	64ba      	str	r2, [r7, #72]	@ 0x48
 8009fd0:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fd2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009fd4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009fd6:	e841 2300 	strex	r3, r2, [r1]
 8009fda:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009fdc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d1e5      	bne.n	8009fae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	2220      	movs	r2, #32
 8009fe6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	2220      	movs	r2, #32
 8009fee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 8009ffa:	2303      	movs	r3, #3
 8009ffc:	e069      	b.n	800a0d2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f003 0304 	and.w	r3, r3, #4
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d051      	beq.n	800a0b0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	69db      	ldr	r3, [r3, #28]
 800a012:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a016:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a01a:	d149      	bne.n	800a0b0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a024:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a02c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a02e:	e853 3f00 	ldrex	r3, [r3]
 800a032:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a036:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800a03a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	461a      	mov	r2, r3
 800a042:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a044:	637b      	str	r3, [r7, #52]	@ 0x34
 800a046:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a048:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a04a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a04c:	e841 2300 	strex	r3, r2, [r1]
 800a050:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a052:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a054:	2b00      	cmp	r3, #0
 800a056:	d1e6      	bne.n	800a026 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	3308      	adds	r3, #8
 800a05e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a060:	697b      	ldr	r3, [r7, #20]
 800a062:	e853 3f00 	ldrex	r3, [r3]
 800a066:	613b      	str	r3, [r7, #16]
   return(result);
 800a068:	693b      	ldr	r3, [r7, #16]
 800a06a:	f023 0301 	bic.w	r3, r3, #1
 800a06e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	3308      	adds	r3, #8
 800a076:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800a078:	623a      	str	r2, [r7, #32]
 800a07a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a07c:	69f9      	ldr	r1, [r7, #28]
 800a07e:	6a3a      	ldr	r2, [r7, #32]
 800a080:	e841 2300 	strex	r3, r2, [r1]
 800a084:	61bb      	str	r3, [r7, #24]
   return(result);
 800a086:	69bb      	ldr	r3, [r7, #24]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d1e5      	bne.n	800a058 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	2220      	movs	r2, #32
 800a090:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	2220      	movs	r2, #32
 800a098:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	2220      	movs	r2, #32
 800a0a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a0ac:	2303      	movs	r3, #3
 800a0ae:	e010      	b.n	800a0d2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	69da      	ldr	r2, [r3, #28]
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	4013      	ands	r3, r2
 800a0ba:	68ba      	ldr	r2, [r7, #8]
 800a0bc:	429a      	cmp	r2, r3
 800a0be:	bf0c      	ite	eq
 800a0c0:	2301      	moveq	r3, #1
 800a0c2:	2300      	movne	r3, #0
 800a0c4:	b2db      	uxtb	r3, r3
 800a0c6:	461a      	mov	r2, r3
 800a0c8:	79fb      	ldrb	r3, [r7, #7]
 800a0ca:	429a      	cmp	r2, r3
 800a0cc:	f43f af46 	beq.w	8009f5c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a0d0:	2300      	movs	r3, #0
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	3770      	adds	r7, #112	@ 0x70
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}
	...

0800a0dc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a0dc:	b480      	push	{r7}
 800a0de:	b0a3      	sub	sp, #140	@ 0x8c
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	60f8      	str	r0, [r7, #12]
 800a0e4:	60b9      	str	r1, [r7, #8]
 800a0e6:	4613      	mov	r3, r2
 800a0e8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	68ba      	ldr	r2, [r7, #8]
 800a0ee:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	88fa      	ldrh	r2, [r7, #6]
 800a0f4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	88fa      	ldrh	r2, [r7, #6]
 800a0fc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	2200      	movs	r2, #0
 800a104:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	689b      	ldr	r3, [r3, #8]
 800a10a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a10e:	d10e      	bne.n	800a12e <UART_Start_Receive_IT+0x52>
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	691b      	ldr	r3, [r3, #16]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d105      	bne.n	800a124 <UART_Start_Receive_IT+0x48>
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800a11e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a122:	e02d      	b.n	800a180 <UART_Start_Receive_IT+0xa4>
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	22ff      	movs	r2, #255	@ 0xff
 800a128:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a12c:	e028      	b.n	800a180 <UART_Start_Receive_IT+0xa4>
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	689b      	ldr	r3, [r3, #8]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d10d      	bne.n	800a152 <UART_Start_Receive_IT+0x76>
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	691b      	ldr	r3, [r3, #16]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d104      	bne.n	800a148 <UART_Start_Receive_IT+0x6c>
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	22ff      	movs	r2, #255	@ 0xff
 800a142:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a146:	e01b      	b.n	800a180 <UART_Start_Receive_IT+0xa4>
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	227f      	movs	r2, #127	@ 0x7f
 800a14c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a150:	e016      	b.n	800a180 <UART_Start_Receive_IT+0xa4>
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	689b      	ldr	r3, [r3, #8]
 800a156:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a15a:	d10d      	bne.n	800a178 <UART_Start_Receive_IT+0x9c>
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	691b      	ldr	r3, [r3, #16]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d104      	bne.n	800a16e <UART_Start_Receive_IT+0x92>
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	227f      	movs	r2, #127	@ 0x7f
 800a168:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a16c:	e008      	b.n	800a180 <UART_Start_Receive_IT+0xa4>
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	223f      	movs	r2, #63	@ 0x3f
 800a172:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a176:	e003      	b.n	800a180 <UART_Start_Receive_IT+0xa4>
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	2200      	movs	r2, #0
 800a17c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	2200      	movs	r2, #0
 800a184:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	2222      	movs	r2, #34	@ 0x22
 800a18c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	3308      	adds	r3, #8
 800a196:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a198:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a19a:	e853 3f00 	ldrex	r3, [r3]
 800a19e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800a1a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a1a2:	f043 0301 	orr.w	r3, r3, #1
 800a1a6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	3308      	adds	r3, #8
 800a1b0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800a1b4:	673a      	str	r2, [r7, #112]	@ 0x70
 800a1b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1b8:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800a1ba:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800a1bc:	e841 2300 	strex	r3, r2, [r1]
 800a1c0:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800a1c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d1e3      	bne.n	800a190 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a1cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a1d0:	d14f      	bne.n	800a272 <UART_Start_Receive_IT+0x196>
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a1d8:	88fa      	ldrh	r2, [r7, #6]
 800a1da:	429a      	cmp	r2, r3
 800a1dc:	d349      	bcc.n	800a272 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	689b      	ldr	r3, [r3, #8]
 800a1e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a1e6:	d107      	bne.n	800a1f8 <UART_Start_Receive_IT+0x11c>
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	691b      	ldr	r3, [r3, #16]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d103      	bne.n	800a1f8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	4a46      	ldr	r2, [pc, #280]	@ (800a30c <UART_Start_Receive_IT+0x230>)
 800a1f4:	675a      	str	r2, [r3, #116]	@ 0x74
 800a1f6:	e002      	b.n	800a1fe <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	4a45      	ldr	r2, [pc, #276]	@ (800a310 <UART_Start_Receive_IT+0x234>)
 800a1fc:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	691b      	ldr	r3, [r3, #16]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d01a      	beq.n	800a23c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a20c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a20e:	e853 3f00 	ldrex	r3, [r3]
 800a212:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a214:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a216:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a21a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	461a      	mov	r2, r3
 800a224:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a228:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a22a:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a22c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a22e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a230:	e841 2300 	strex	r3, r2, [r1]
 800a234:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800a236:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d1e4      	bne.n	800a206 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	3308      	adds	r3, #8
 800a242:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a244:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a246:	e853 3f00 	ldrex	r3, [r3]
 800a24a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a24c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a24e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a252:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	3308      	adds	r3, #8
 800a25a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800a25c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800a25e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a260:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a262:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a264:	e841 2300 	strex	r3, r2, [r1]
 800a268:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a26a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d1e5      	bne.n	800a23c <UART_Start_Receive_IT+0x160>
 800a270:	e046      	b.n	800a300 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	689b      	ldr	r3, [r3, #8]
 800a276:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a27a:	d107      	bne.n	800a28c <UART_Start_Receive_IT+0x1b0>
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	691b      	ldr	r3, [r3, #16]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d103      	bne.n	800a28c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	4a23      	ldr	r2, [pc, #140]	@ (800a314 <UART_Start_Receive_IT+0x238>)
 800a288:	675a      	str	r2, [r3, #116]	@ 0x74
 800a28a:	e002      	b.n	800a292 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	4a22      	ldr	r2, [pc, #136]	@ (800a318 <UART_Start_Receive_IT+0x23c>)
 800a290:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	691b      	ldr	r3, [r3, #16]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d019      	beq.n	800a2ce <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2a2:	e853 3f00 	ldrex	r3, [r3]
 800a2a6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a2a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2aa:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800a2ae:	677b      	str	r3, [r7, #116]	@ 0x74
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	461a      	mov	r2, r3
 800a2b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a2b8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2ba:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2bc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a2be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a2c0:	e841 2300 	strex	r3, r2, [r1]
 800a2c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a2c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d1e6      	bne.n	800a29a <UART_Start_Receive_IT+0x1be>
 800a2cc:	e018      	b.n	800a300 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2d4:	697b      	ldr	r3, [r7, #20]
 800a2d6:	e853 3f00 	ldrex	r3, [r3]
 800a2da:	613b      	str	r3, [r7, #16]
   return(result);
 800a2dc:	693b      	ldr	r3, [r7, #16]
 800a2de:	f043 0320 	orr.w	r3, r3, #32
 800a2e2:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	461a      	mov	r2, r3
 800a2ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a2ec:	623b      	str	r3, [r7, #32]
 800a2ee:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2f0:	69f9      	ldr	r1, [r7, #28]
 800a2f2:	6a3a      	ldr	r2, [r7, #32]
 800a2f4:	e841 2300 	strex	r3, r2, [r1]
 800a2f8:	61bb      	str	r3, [r7, #24]
   return(result);
 800a2fa:	69bb      	ldr	r3, [r7, #24]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d1e6      	bne.n	800a2ce <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800a300:	2300      	movs	r3, #0
}
 800a302:	4618      	mov	r0, r3
 800a304:	378c      	adds	r7, #140	@ 0x8c
 800a306:	46bd      	mov	sp, r7
 800a308:	bc80      	pop	{r7}
 800a30a:	4770      	bx	lr
 800a30c:	0800acf1 	.word	0x0800acf1
 800a310:	0800a991 	.word	0x0800a991
 800a314:	0800a7d9 	.word	0x0800a7d9
 800a318:	0800a621 	.word	0x0800a621

0800a31c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a31c:	b480      	push	{r7}
 800a31e:	b08f      	sub	sp, #60	@ 0x3c
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a32a:	6a3b      	ldr	r3, [r7, #32]
 800a32c:	e853 3f00 	ldrex	r3, [r3]
 800a330:	61fb      	str	r3, [r7, #28]
   return(result);
 800a332:	69fb      	ldr	r3, [r7, #28]
 800a334:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a338:	637b      	str	r3, [r7, #52]	@ 0x34
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	461a      	mov	r2, r3
 800a340:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a342:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a344:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a346:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a348:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a34a:	e841 2300 	strex	r3, r2, [r1]
 800a34e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a352:	2b00      	cmp	r3, #0
 800a354:	d1e6      	bne.n	800a324 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	3308      	adds	r3, #8
 800a35c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	e853 3f00 	ldrex	r3, [r3]
 800a364:	60bb      	str	r3, [r7, #8]
   return(result);
 800a366:	68bb      	ldr	r3, [r7, #8]
 800a368:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a36c:	633b      	str	r3, [r7, #48]	@ 0x30
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	3308      	adds	r3, #8
 800a374:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a376:	61ba      	str	r2, [r7, #24]
 800a378:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a37a:	6979      	ldr	r1, [r7, #20]
 800a37c:	69ba      	ldr	r2, [r7, #24]
 800a37e:	e841 2300 	strex	r3, r2, [r1]
 800a382:	613b      	str	r3, [r7, #16]
   return(result);
 800a384:	693b      	ldr	r3, [r7, #16]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d1e5      	bne.n	800a356 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2220      	movs	r2, #32
 800a38e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800a392:	bf00      	nop
 800a394:	373c      	adds	r7, #60	@ 0x3c
 800a396:	46bd      	mov	sp, r7
 800a398:	bc80      	pop	{r7}
 800a39a:	4770      	bx	lr

0800a39c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a39c:	b480      	push	{r7}
 800a39e:	b095      	sub	sp, #84	@ 0x54
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3ac:	e853 3f00 	ldrex	r3, [r3]
 800a3b0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a3b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a3b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	461a      	mov	r2, r3
 800a3c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a3c2:	643b      	str	r3, [r7, #64]	@ 0x40
 800a3c4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3c6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a3c8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a3ca:	e841 2300 	strex	r3, r2, [r1]
 800a3ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a3d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d1e6      	bne.n	800a3a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	3308      	adds	r3, #8
 800a3dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3de:	6a3b      	ldr	r3, [r7, #32]
 800a3e0:	e853 3f00 	ldrex	r3, [r3]
 800a3e4:	61fb      	str	r3, [r7, #28]
   return(result);
 800a3e6:	69fb      	ldr	r3, [r7, #28]
 800a3e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a3ec:	f023 0301 	bic.w	r3, r3, #1
 800a3f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	3308      	adds	r3, #8
 800a3f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a3fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a3fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a400:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a402:	e841 2300 	strex	r3, r2, [r1]
 800a406:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d1e3      	bne.n	800a3d6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a412:	2b01      	cmp	r3, #1
 800a414:	d118      	bne.n	800a448 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	e853 3f00 	ldrex	r3, [r3]
 800a422:	60bb      	str	r3, [r7, #8]
   return(result);
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	f023 0310 	bic.w	r3, r3, #16
 800a42a:	647b      	str	r3, [r7, #68]	@ 0x44
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	461a      	mov	r2, r3
 800a432:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a434:	61bb      	str	r3, [r7, #24]
 800a436:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a438:	6979      	ldr	r1, [r7, #20]
 800a43a:	69ba      	ldr	r2, [r7, #24]
 800a43c:	e841 2300 	strex	r3, r2, [r1]
 800a440:	613b      	str	r3, [r7, #16]
   return(result);
 800a442:	693b      	ldr	r3, [r7, #16]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d1e6      	bne.n	800a416 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2220      	movs	r2, #32
 800a44c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2200      	movs	r2, #0
 800a454:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	2200      	movs	r2, #0
 800a45a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a45c:	bf00      	nop
 800a45e:	3754      	adds	r7, #84	@ 0x54
 800a460:	46bd      	mov	sp, r7
 800a462:	bc80      	pop	{r7}
 800a464:	4770      	bx	lr

0800a466 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a466:	b580      	push	{r7, lr}
 800a468:	b090      	sub	sp, #64	@ 0x40
 800a46a:	af00      	add	r7, sp, #0
 800a46c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a472:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	f003 0320 	and.w	r3, r3, #32
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d137      	bne.n	800a4f2 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800a482:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a484:	2200      	movs	r2, #0
 800a486:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a48a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	3308      	adds	r3, #8
 800a490:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a494:	e853 3f00 	ldrex	r3, [r3]
 800a498:	623b      	str	r3, [r7, #32]
   return(result);
 800a49a:	6a3b      	ldr	r3, [r7, #32]
 800a49c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a4a0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a4a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	3308      	adds	r3, #8
 800a4a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a4aa:	633a      	str	r2, [r7, #48]	@ 0x30
 800a4ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a4b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a4b2:	e841 2300 	strex	r3, r2, [r1]
 800a4b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a4b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d1e5      	bne.n	800a48a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a4be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4c4:	693b      	ldr	r3, [r7, #16]
 800a4c6:	e853 3f00 	ldrex	r3, [r3]
 800a4ca:	60fb      	str	r3, [r7, #12]
   return(result);
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a4d2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a4d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	461a      	mov	r2, r3
 800a4da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4dc:	61fb      	str	r3, [r7, #28]
 800a4de:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4e0:	69b9      	ldr	r1, [r7, #24]
 800a4e2:	69fa      	ldr	r2, [r7, #28]
 800a4e4:	e841 2300 	strex	r3, r2, [r1]
 800a4e8:	617b      	str	r3, [r7, #20]
   return(result);
 800a4ea:	697b      	ldr	r3, [r7, #20]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d1e6      	bne.n	800a4be <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a4f0:	e002      	b.n	800a4f8 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800a4f2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a4f4:	f7f8 ff10 	bl	8003318 <HAL_UART_TxCpltCallback>
}
 800a4f8:	bf00      	nop
 800a4fa:	3740      	adds	r7, #64	@ 0x40
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd80      	pop	{r7, pc}

0800a500 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b084      	sub	sp, #16
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a50c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a50e:	68f8      	ldr	r0, [r7, #12]
 800a510:	f7ff f99a 	bl	8009848 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a514:	bf00      	nop
 800a516:	3710      	adds	r7, #16
 800a518:	46bd      	mov	sp, r7
 800a51a:	bd80      	pop	{r7, pc}

0800a51c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b086      	sub	sp, #24
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a528:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a52a:	697b      	ldr	r3, [r7, #20]
 800a52c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a530:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a532:	697b      	ldr	r3, [r7, #20]
 800a534:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a538:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a53a:	697b      	ldr	r3, [r7, #20]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	689b      	ldr	r3, [r3, #8]
 800a540:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a544:	2b80      	cmp	r3, #128	@ 0x80
 800a546:	d109      	bne.n	800a55c <UART_DMAError+0x40>
 800a548:	693b      	ldr	r3, [r7, #16]
 800a54a:	2b21      	cmp	r3, #33	@ 0x21
 800a54c:	d106      	bne.n	800a55c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a54e:	697b      	ldr	r3, [r7, #20]
 800a550:	2200      	movs	r2, #0
 800a552:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800a556:	6978      	ldr	r0, [r7, #20]
 800a558:	f7ff fee0 	bl	800a31c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a55c:	697b      	ldr	r3, [r7, #20]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	689b      	ldr	r3, [r3, #8]
 800a562:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a566:	2b40      	cmp	r3, #64	@ 0x40
 800a568:	d109      	bne.n	800a57e <UART_DMAError+0x62>
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	2b22      	cmp	r3, #34	@ 0x22
 800a56e:	d106      	bne.n	800a57e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a570:	697b      	ldr	r3, [r7, #20]
 800a572:	2200      	movs	r2, #0
 800a574:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800a578:	6978      	ldr	r0, [r7, #20]
 800a57a:	f7ff ff0f 	bl	800a39c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a57e:	697b      	ldr	r3, [r7, #20]
 800a580:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a584:	f043 0210 	orr.w	r2, r3, #16
 800a588:	697b      	ldr	r3, [r7, #20]
 800a58a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a58e:	6978      	ldr	r0, [r7, #20]
 800a590:	f7ff f963 	bl	800985a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a594:	bf00      	nop
 800a596:	3718      	adds	r7, #24
 800a598:	46bd      	mov	sp, r7
 800a59a:	bd80      	pop	{r7, pc}

0800a59c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b084      	sub	sp, #16
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a5ba:	68f8      	ldr	r0, [r7, #12]
 800a5bc:	f7ff f94d 	bl	800985a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a5c0:	bf00      	nop
 800a5c2:	3710      	adds	r7, #16
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bd80      	pop	{r7, pc}

0800a5c8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b088      	sub	sp, #32
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	e853 3f00 	ldrex	r3, [r3]
 800a5dc:	60bb      	str	r3, [r7, #8]
   return(result);
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a5e4:	61fb      	str	r3, [r7, #28]
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	461a      	mov	r2, r3
 800a5ec:	69fb      	ldr	r3, [r7, #28]
 800a5ee:	61bb      	str	r3, [r7, #24]
 800a5f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5f2:	6979      	ldr	r1, [r7, #20]
 800a5f4:	69ba      	ldr	r2, [r7, #24]
 800a5f6:	e841 2300 	strex	r3, r2, [r1]
 800a5fa:	613b      	str	r3, [r7, #16]
   return(result);
 800a5fc:	693b      	ldr	r3, [r7, #16]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d1e6      	bne.n	800a5d0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2220      	movs	r2, #32
 800a606:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2200      	movs	r2, #0
 800a60e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a610:	6878      	ldr	r0, [r7, #4]
 800a612:	f7f8 fe81 	bl	8003318 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a616:	bf00      	nop
 800a618:	3720      	adds	r7, #32
 800a61a:	46bd      	mov	sp, r7
 800a61c:	bd80      	pop	{r7, pc}
	...

0800a620 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b09c      	sub	sp, #112	@ 0x70
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a62e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a638:	2b22      	cmp	r3, #34	@ 0x22
 800a63a:	f040 80be 	bne.w	800a7ba <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a644:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a648:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a64c:	b2d9      	uxtb	r1, r3
 800a64e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a652:	b2da      	uxtb	r2, r3
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a658:	400a      	ands	r2, r1
 800a65a:	b2d2      	uxtb	r2, r2
 800a65c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a662:	1c5a      	adds	r2, r3, #1
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a66e:	b29b      	uxth	r3, r3
 800a670:	3b01      	subs	r3, #1
 800a672:	b29a      	uxth	r2, r3
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a680:	b29b      	uxth	r3, r3
 800a682:	2b00      	cmp	r3, #0
 800a684:	f040 80a1 	bne.w	800a7ca <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a68e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a690:	e853 3f00 	ldrex	r3, [r3]
 800a694:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a696:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a698:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a69c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	461a      	mov	r2, r3
 800a6a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a6a6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a6a8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6aa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a6ac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a6ae:	e841 2300 	strex	r3, r2, [r1]
 800a6b2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a6b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d1e6      	bne.n	800a688 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	3308      	adds	r3, #8
 800a6c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6c4:	e853 3f00 	ldrex	r3, [r3]
 800a6c8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a6ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6cc:	f023 0301 	bic.w	r3, r3, #1
 800a6d0:	667b      	str	r3, [r7, #100]	@ 0x64
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	3308      	adds	r3, #8
 800a6d8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a6da:	647a      	str	r2, [r7, #68]	@ 0x44
 800a6dc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6de:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a6e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a6e2:	e841 2300 	strex	r3, r2, [r1]
 800a6e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a6e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d1e5      	bne.n	800a6ba <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2220      	movs	r2, #32
 800a6f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	2200      	movs	r2, #0
 800a700:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	4a33      	ldr	r2, [pc, #204]	@ (800a7d4 <UART_RxISR_8BIT+0x1b4>)
 800a708:	4293      	cmp	r3, r2
 800a70a:	d01f      	beq.n	800a74c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	685b      	ldr	r3, [r3, #4]
 800a712:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a716:	2b00      	cmp	r3, #0
 800a718:	d018      	beq.n	800a74c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a722:	e853 3f00 	ldrex	r3, [r3]
 800a726:	623b      	str	r3, [r7, #32]
   return(result);
 800a728:	6a3b      	ldr	r3, [r7, #32]
 800a72a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a72e:	663b      	str	r3, [r7, #96]	@ 0x60
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	461a      	mov	r2, r3
 800a736:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a738:	633b      	str	r3, [r7, #48]	@ 0x30
 800a73a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a73c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a73e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a740:	e841 2300 	strex	r3, r2, [r1]
 800a744:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d1e6      	bne.n	800a71a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a750:	2b01      	cmp	r3, #1
 800a752:	d12e      	bne.n	800a7b2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2200      	movs	r2, #0
 800a758:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a760:	693b      	ldr	r3, [r7, #16]
 800a762:	e853 3f00 	ldrex	r3, [r3]
 800a766:	60fb      	str	r3, [r7, #12]
   return(result);
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	f023 0310 	bic.w	r3, r3, #16
 800a76e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	461a      	mov	r2, r3
 800a776:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a778:	61fb      	str	r3, [r7, #28]
 800a77a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a77c:	69b9      	ldr	r1, [r7, #24]
 800a77e:	69fa      	ldr	r2, [r7, #28]
 800a780:	e841 2300 	strex	r3, r2, [r1]
 800a784:	617b      	str	r3, [r7, #20]
   return(result);
 800a786:	697b      	ldr	r3, [r7, #20]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d1e6      	bne.n	800a75a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	69db      	ldr	r3, [r3, #28]
 800a792:	f003 0310 	and.w	r3, r3, #16
 800a796:	2b10      	cmp	r3, #16
 800a798:	d103      	bne.n	800a7a2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	2210      	movs	r2, #16
 800a7a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a7a8:	4619      	mov	r1, r3
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	f7ff f85e 	bl	800986c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a7b0:	e00b      	b.n	800a7ca <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800a7b2:	6878      	ldr	r0, [r7, #4]
 800a7b4:	f7f8 fdc6 	bl	8003344 <HAL_UART_RxCpltCallback>
}
 800a7b8:	e007      	b.n	800a7ca <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	699a      	ldr	r2, [r3, #24]
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	f042 0208 	orr.w	r2, r2, #8
 800a7c8:	619a      	str	r2, [r3, #24]
}
 800a7ca:	bf00      	nop
 800a7cc:	3770      	adds	r7, #112	@ 0x70
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}
 800a7d2:	bf00      	nop
 800a7d4:	40008000 	.word	0x40008000

0800a7d8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b09c      	sub	sp, #112	@ 0x70
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a7e6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a7f0:	2b22      	cmp	r3, #34	@ 0x22
 800a7f2:	f040 80be 	bne.w	800a972 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7fc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a804:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800a806:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800a80a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a80e:	4013      	ands	r3, r2
 800a810:	b29a      	uxth	r2, r3
 800a812:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a814:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a81a:	1c9a      	adds	r2, r3, #2
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a826:	b29b      	uxth	r3, r3
 800a828:	3b01      	subs	r3, #1
 800a82a:	b29a      	uxth	r2, r3
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a838:	b29b      	uxth	r3, r3
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	f040 80a1 	bne.w	800a982 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a846:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a848:	e853 3f00 	ldrex	r3, [r3]
 800a84c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a84e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a850:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a854:	667b      	str	r3, [r7, #100]	@ 0x64
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	461a      	mov	r2, r3
 800a85c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a85e:	657b      	str	r3, [r7, #84]	@ 0x54
 800a860:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a862:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a864:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a866:	e841 2300 	strex	r3, r2, [r1]
 800a86a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a86c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d1e6      	bne.n	800a840 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	3308      	adds	r3, #8
 800a878:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a87a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a87c:	e853 3f00 	ldrex	r3, [r3]
 800a880:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a884:	f023 0301 	bic.w	r3, r3, #1
 800a888:	663b      	str	r3, [r7, #96]	@ 0x60
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	3308      	adds	r3, #8
 800a890:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a892:	643a      	str	r2, [r7, #64]	@ 0x40
 800a894:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a896:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a898:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a89a:	e841 2300 	strex	r3, r2, [r1]
 800a89e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a8a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d1e5      	bne.n	800a872 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2220      	movs	r2, #32
 800a8aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	4a33      	ldr	r2, [pc, #204]	@ (800a98c <UART_RxISR_16BIT+0x1b4>)
 800a8c0:	4293      	cmp	r3, r2
 800a8c2:	d01f      	beq.n	800a904 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	685b      	ldr	r3, [r3, #4]
 800a8ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d018      	beq.n	800a904 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8d8:	6a3b      	ldr	r3, [r7, #32]
 800a8da:	e853 3f00 	ldrex	r3, [r3]
 800a8de:	61fb      	str	r3, [r7, #28]
   return(result);
 800a8e0:	69fb      	ldr	r3, [r7, #28]
 800a8e2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a8e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	461a      	mov	r2, r3
 800a8ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a8f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a8f2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a8f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a8f8:	e841 2300 	strex	r3, r2, [r1]
 800a8fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a8fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a900:	2b00      	cmp	r3, #0
 800a902:	d1e6      	bne.n	800a8d2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a908:	2b01      	cmp	r3, #1
 800a90a:	d12e      	bne.n	800a96a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2200      	movs	r2, #0
 800a910:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	e853 3f00 	ldrex	r3, [r3]
 800a91e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a920:	68bb      	ldr	r3, [r7, #8]
 800a922:	f023 0310 	bic.w	r3, r3, #16
 800a926:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	461a      	mov	r2, r3
 800a92e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a930:	61bb      	str	r3, [r7, #24]
 800a932:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a934:	6979      	ldr	r1, [r7, #20]
 800a936:	69ba      	ldr	r2, [r7, #24]
 800a938:	e841 2300 	strex	r3, r2, [r1]
 800a93c:	613b      	str	r3, [r7, #16]
   return(result);
 800a93e:	693b      	ldr	r3, [r7, #16]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d1e6      	bne.n	800a912 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	69db      	ldr	r3, [r3, #28]
 800a94a:	f003 0310 	and.w	r3, r3, #16
 800a94e:	2b10      	cmp	r3, #16
 800a950:	d103      	bne.n	800a95a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	2210      	movs	r2, #16
 800a958:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a960:	4619      	mov	r1, r3
 800a962:	6878      	ldr	r0, [r7, #4]
 800a964:	f7fe ff82 	bl	800986c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a968:	e00b      	b.n	800a982 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800a96a:	6878      	ldr	r0, [r7, #4]
 800a96c:	f7f8 fcea 	bl	8003344 <HAL_UART_RxCpltCallback>
}
 800a970:	e007      	b.n	800a982 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	699a      	ldr	r2, [r3, #24]
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	f042 0208 	orr.w	r2, r2, #8
 800a980:	619a      	str	r2, [r3, #24]
}
 800a982:	bf00      	nop
 800a984:	3770      	adds	r7, #112	@ 0x70
 800a986:	46bd      	mov	sp, r7
 800a988:	bd80      	pop	{r7, pc}
 800a98a:	bf00      	nop
 800a98c:	40008000 	.word	0x40008000

0800a990 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b0ac      	sub	sp, #176	@ 0xb0
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a99e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	69db      	ldr	r3, [r3, #28]
 800a9a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	689b      	ldr	r3, [r3, #8]
 800a9bc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a9c6:	2b22      	cmp	r3, #34	@ 0x22
 800a9c8:	f040 8182 	bne.w	800acd0 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a9d2:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a9d6:	e125      	b.n	800ac24 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9de:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a9e2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800a9e6:	b2d9      	uxtb	r1, r3
 800a9e8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800a9ec:	b2da      	uxtb	r2, r3
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a9f2:	400a      	ands	r2, r1
 800a9f4:	b2d2      	uxtb	r2, r2
 800a9f6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a9fc:	1c5a      	adds	r2, r3, #1
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800aa08:	b29b      	uxth	r3, r3
 800aa0a:	3b01      	subs	r3, #1
 800aa0c:	b29a      	uxth	r2, r3
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	69db      	ldr	r3, [r3, #28]
 800aa1a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800aa1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aa22:	f003 0307 	and.w	r3, r3, #7
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d053      	beq.n	800aad2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800aa2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aa2e:	f003 0301 	and.w	r3, r3, #1
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d011      	beq.n	800aa5a <UART_RxISR_8BIT_FIFOEN+0xca>
 800aa36:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800aa3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d00b      	beq.n	800aa5a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	2201      	movs	r2, #1
 800aa48:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa50:	f043 0201 	orr.w	r2, r3, #1
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aa5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aa5e:	f003 0302 	and.w	r3, r3, #2
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d011      	beq.n	800aa8a <UART_RxISR_8BIT_FIFOEN+0xfa>
 800aa66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800aa6a:	f003 0301 	and.w	r3, r3, #1
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d00b      	beq.n	800aa8a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	2202      	movs	r2, #2
 800aa78:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa80:	f043 0204 	orr.w	r2, r3, #4
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aa8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aa8e:	f003 0304 	and.w	r3, r3, #4
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d011      	beq.n	800aaba <UART_RxISR_8BIT_FIFOEN+0x12a>
 800aa96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800aa9a:	f003 0301 	and.w	r3, r3, #1
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d00b      	beq.n	800aaba <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	2204      	movs	r2, #4
 800aaa8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aab0:	f043 0202 	orr.w	r2, r3, #2
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d006      	beq.n	800aad2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800aac4:	6878      	ldr	r0, [r7, #4]
 800aac6:	f7fe fec8 	bl	800985a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	2200      	movs	r2, #0
 800aace:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800aad8:	b29b      	uxth	r3, r3
 800aada:	2b00      	cmp	r3, #0
 800aadc:	f040 80a2 	bne.w	800ac24 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aae6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800aae8:	e853 3f00 	ldrex	r3, [r3]
 800aaec:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800aaee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aaf0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aaf4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	461a      	mov	r2, r3
 800aafe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ab02:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ab04:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab06:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800ab08:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800ab0a:	e841 2300 	strex	r3, r2, [r1]
 800ab0e:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800ab10:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d1e4      	bne.n	800aae0 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	3308      	adds	r3, #8
 800ab1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ab20:	e853 3f00 	ldrex	r3, [r3]
 800ab24:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800ab26:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ab28:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ab2c:	f023 0301 	bic.w	r3, r3, #1
 800ab30:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	3308      	adds	r3, #8
 800ab3a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ab3e:	66ba      	str	r2, [r7, #104]	@ 0x68
 800ab40:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab42:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800ab44:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800ab46:	e841 2300 	strex	r3, r2, [r1]
 800ab4a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800ab4c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d1e1      	bne.n	800ab16 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	2220      	movs	r2, #32
 800ab56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	2200      	movs	r2, #0
 800ab64:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	4a5f      	ldr	r2, [pc, #380]	@ (800ace8 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800ab6c:	4293      	cmp	r3, r2
 800ab6e:	d021      	beq.n	800abb4 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	685b      	ldr	r3, [r3, #4]
 800ab76:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d01a      	beq.n	800abb4 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ab86:	e853 3f00 	ldrex	r3, [r3]
 800ab8a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800ab8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ab8e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ab92:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	461a      	mov	r2, r3
 800ab9c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800aba0:	657b      	str	r3, [r7, #84]	@ 0x54
 800aba2:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aba4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800aba6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800aba8:	e841 2300 	strex	r3, r2, [r1]
 800abac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800abae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d1e4      	bne.n	800ab7e <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800abb8:	2b01      	cmp	r3, #1
 800abba:	d130      	bne.n	800ac1e <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2200      	movs	r2, #0
 800abc0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800abca:	e853 3f00 	ldrex	r3, [r3]
 800abce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800abd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abd2:	f023 0310 	bic.w	r3, r3, #16
 800abd6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	461a      	mov	r2, r3
 800abe0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800abe4:	643b      	str	r3, [r7, #64]	@ 0x40
 800abe6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abe8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800abea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800abec:	e841 2300 	strex	r3, r2, [r1]
 800abf0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800abf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d1e4      	bne.n	800abc2 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	69db      	ldr	r3, [r3, #28]
 800abfe:	f003 0310 	and.w	r3, r3, #16
 800ac02:	2b10      	cmp	r3, #16
 800ac04:	d103      	bne.n	800ac0e <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	2210      	movs	r2, #16
 800ac0c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ac14:	4619      	mov	r1, r3
 800ac16:	6878      	ldr	r0, [r7, #4]
 800ac18:	f7fe fe28 	bl	800986c <HAL_UARTEx_RxEventCallback>
 800ac1c:	e002      	b.n	800ac24 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800ac1e:	6878      	ldr	r0, [r7, #4]
 800ac20:	f7f8 fb90 	bl	8003344 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ac24:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d006      	beq.n	800ac3a <UART_RxISR_8BIT_FIFOEN+0x2aa>
 800ac2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ac30:	f003 0320 	and.w	r3, r3, #32
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	f47f aecf 	bne.w	800a9d8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ac40:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ac44:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d049      	beq.n	800ace0 <UART_RxISR_8BIT_FIFOEN+0x350>
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ac52:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800ac56:	429a      	cmp	r2, r3
 800ac58:	d242      	bcs.n	800ace0 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	3308      	adds	r3, #8
 800ac60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac62:	6a3b      	ldr	r3, [r7, #32]
 800ac64:	e853 3f00 	ldrex	r3, [r3]
 800ac68:	61fb      	str	r3, [r7, #28]
   return(result);
 800ac6a:	69fb      	ldr	r3, [r7, #28]
 800ac6c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ac70:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	3308      	adds	r3, #8
 800ac7a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800ac7e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ac80:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac82:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ac84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ac86:	e841 2300 	strex	r3, r2, [r1]
 800ac8a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ac8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d1e3      	bne.n	800ac5a <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	4a15      	ldr	r2, [pc, #84]	@ (800acec <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800ac96:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	e853 3f00 	ldrex	r3, [r3]
 800aca4:	60bb      	str	r3, [r7, #8]
   return(result);
 800aca6:	68bb      	ldr	r3, [r7, #8]
 800aca8:	f043 0320 	orr.w	r3, r3, #32
 800acac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	461a      	mov	r2, r3
 800acb6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800acba:	61bb      	str	r3, [r7, #24]
 800acbc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acbe:	6979      	ldr	r1, [r7, #20]
 800acc0:	69ba      	ldr	r2, [r7, #24]
 800acc2:	e841 2300 	strex	r3, r2, [r1]
 800acc6:	613b      	str	r3, [r7, #16]
   return(result);
 800acc8:	693b      	ldr	r3, [r7, #16]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d1e4      	bne.n	800ac98 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800acce:	e007      	b.n	800ace0 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	699a      	ldr	r2, [r3, #24]
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	f042 0208 	orr.w	r2, r2, #8
 800acde:	619a      	str	r2, [r3, #24]
}
 800ace0:	bf00      	nop
 800ace2:	37b0      	adds	r7, #176	@ 0xb0
 800ace4:	46bd      	mov	sp, r7
 800ace6:	bd80      	pop	{r7, pc}
 800ace8:	40008000 	.word	0x40008000
 800acec:	0800a621 	.word	0x0800a621

0800acf0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b0ae      	sub	sp, #184	@ 0xb8
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800acfe:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	69db      	ldr	r3, [r3, #28]
 800ad08:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	689b      	ldr	r3, [r3, #8]
 800ad1c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ad26:	2b22      	cmp	r3, #34	@ 0x22
 800ad28:	f040 8186 	bne.w	800b038 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ad32:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ad36:	e129      	b.n	800af8c <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad3e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ad46:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800ad4a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800ad4e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800ad52:	4013      	ands	r3, r2
 800ad54:	b29a      	uxth	r2, r3
 800ad56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ad5a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ad60:	1c9a      	adds	r2, r3, #2
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ad6c:	b29b      	uxth	r3, r3
 800ad6e:	3b01      	subs	r3, #1
 800ad70:	b29a      	uxth	r2, r3
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	69db      	ldr	r3, [r3, #28]
 800ad7e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ad82:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ad86:	f003 0307 	and.w	r3, r3, #7
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d053      	beq.n	800ae36 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ad8e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ad92:	f003 0301 	and.w	r3, r3, #1
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d011      	beq.n	800adbe <UART_RxISR_16BIT_FIFOEN+0xce>
 800ad9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ad9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d00b      	beq.n	800adbe <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	2201      	movs	r2, #1
 800adac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800adb4:	f043 0201 	orr.w	r2, r3, #1
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800adbe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800adc2:	f003 0302 	and.w	r3, r3, #2
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d011      	beq.n	800adee <UART_RxISR_16BIT_FIFOEN+0xfe>
 800adca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800adce:	f003 0301 	and.w	r3, r3, #1
 800add2:	2b00      	cmp	r3, #0
 800add4:	d00b      	beq.n	800adee <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	2202      	movs	r2, #2
 800addc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ade4:	f043 0204 	orr.w	r2, r3, #4
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800adee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800adf2:	f003 0304 	and.w	r3, r3, #4
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d011      	beq.n	800ae1e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800adfa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800adfe:	f003 0301 	and.w	r3, r3, #1
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d00b      	beq.n	800ae1e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	2204      	movs	r2, #4
 800ae0c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae14:	f043 0202 	orr.w	r2, r3, #2
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d006      	beq.n	800ae36 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ae28:	6878      	ldr	r0, [r7, #4]
 800ae2a:	f7fe fd16 	bl	800985a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	2200      	movs	r2, #0
 800ae32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ae3c:	b29b      	uxth	r3, r3
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	f040 80a4 	bne.w	800af8c <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae4a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ae4c:	e853 3f00 	ldrex	r3, [r3]
 800ae50:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ae52:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ae54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ae58:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	461a      	mov	r2, r3
 800ae62:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ae66:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ae6a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae6c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800ae6e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ae72:	e841 2300 	strex	r3, r2, [r1]
 800ae76:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ae78:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d1e2      	bne.n	800ae44 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	3308      	adds	r3, #8
 800ae84:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae86:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ae88:	e853 3f00 	ldrex	r3, [r3]
 800ae8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ae8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ae90:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ae94:	f023 0301 	bic.w	r3, r3, #1
 800ae98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	3308      	adds	r3, #8
 800aea2:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800aea6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800aea8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeaa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800aeac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800aeae:	e841 2300 	strex	r3, r2, [r1]
 800aeb2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800aeb4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d1e1      	bne.n	800ae7e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	2220      	movs	r2, #32
 800aebe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	2200      	movs	r2, #0
 800aec6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2200      	movs	r2, #0
 800aecc:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	4a5f      	ldr	r2, [pc, #380]	@ (800b050 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800aed4:	4293      	cmp	r3, r2
 800aed6:	d021      	beq.n	800af1c <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	685b      	ldr	r3, [r3, #4]
 800aede:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d01a      	beq.n	800af1c <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aeee:	e853 3f00 	ldrex	r3, [r3]
 800aef2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800aef4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aef6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800aefa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	461a      	mov	r2, r3
 800af04:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800af08:	65bb      	str	r3, [r7, #88]	@ 0x58
 800af0a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af0c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800af0e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800af10:	e841 2300 	strex	r3, r2, [r1]
 800af14:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800af16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d1e4      	bne.n	800aee6 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af20:	2b01      	cmp	r3, #1
 800af22:	d130      	bne.n	800af86 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2200      	movs	r2, #0
 800af28:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af32:	e853 3f00 	ldrex	r3, [r3]
 800af36:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800af38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af3a:	f023 0310 	bic.w	r3, r3, #16
 800af3e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	461a      	mov	r2, r3
 800af48:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800af4c:	647b      	str	r3, [r7, #68]	@ 0x44
 800af4e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af50:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800af52:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800af54:	e841 2300 	strex	r3, r2, [r1]
 800af58:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800af5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d1e4      	bne.n	800af2a <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	69db      	ldr	r3, [r3, #28]
 800af66:	f003 0310 	and.w	r3, r3, #16
 800af6a:	2b10      	cmp	r3, #16
 800af6c:	d103      	bne.n	800af76 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	2210      	movs	r2, #16
 800af74:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800af7c:	4619      	mov	r1, r3
 800af7e:	6878      	ldr	r0, [r7, #4]
 800af80:	f7fe fc74 	bl	800986c <HAL_UARTEx_RxEventCallback>
 800af84:	e002      	b.n	800af8c <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800af86:	6878      	ldr	r0, [r7, #4]
 800af88:	f7f8 f9dc 	bl	8003344 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800af8c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800af90:	2b00      	cmp	r3, #0
 800af92:	d006      	beq.n	800afa2 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 800af94:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800af98:	f003 0320 	and.w	r3, r3, #32
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	f47f aecb 	bne.w	800ad38 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800afa8:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800afac:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d049      	beq.n	800b048 <UART_RxISR_16BIT_FIFOEN+0x358>
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800afba:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800afbe:	429a      	cmp	r2, r3
 800afc0:	d242      	bcs.n	800b048 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	3308      	adds	r3, #8
 800afc8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afcc:	e853 3f00 	ldrex	r3, [r3]
 800afd0:	623b      	str	r3, [r7, #32]
   return(result);
 800afd2:	6a3b      	ldr	r3, [r7, #32]
 800afd4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800afd8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	3308      	adds	r3, #8
 800afe2:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800afe6:	633a      	str	r2, [r7, #48]	@ 0x30
 800afe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800afec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800afee:	e841 2300 	strex	r3, r2, [r1]
 800aff2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800aff4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d1e3      	bne.n	800afc2 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	4a15      	ldr	r2, [pc, #84]	@ (800b054 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800affe:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b006:	693b      	ldr	r3, [r7, #16]
 800b008:	e853 3f00 	ldrex	r3, [r3]
 800b00c:	60fb      	str	r3, [r7, #12]
   return(result);
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	f043 0320 	orr.w	r3, r3, #32
 800b014:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	461a      	mov	r2, r3
 800b01e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b022:	61fb      	str	r3, [r7, #28]
 800b024:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b026:	69b9      	ldr	r1, [r7, #24]
 800b028:	69fa      	ldr	r2, [r7, #28]
 800b02a:	e841 2300 	strex	r3, r2, [r1]
 800b02e:	617b      	str	r3, [r7, #20]
   return(result);
 800b030:	697b      	ldr	r3, [r7, #20]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d1e4      	bne.n	800b000 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b036:	e007      	b.n	800b048 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	699a      	ldr	r2, [r3, #24]
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	f042 0208 	orr.w	r2, r2, #8
 800b046:	619a      	str	r2, [r3, #24]
}
 800b048:	bf00      	nop
 800b04a:	37b8      	adds	r7, #184	@ 0xb8
 800b04c:	46bd      	mov	sp, r7
 800b04e:	bd80      	pop	{r7, pc}
 800b050:	40008000 	.word	0x40008000
 800b054:	0800a7d9 	.word	0x0800a7d9

0800b058 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b058:	b480      	push	{r7}
 800b05a:	b083      	sub	sp, #12
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b060:	bf00      	nop
 800b062:	370c      	adds	r7, #12
 800b064:	46bd      	mov	sp, r7
 800b066:	bc80      	pop	{r7}
 800b068:	4770      	bx	lr

0800b06a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b06a:	b480      	push	{r7}
 800b06c:	b083      	sub	sp, #12
 800b06e:	af00      	add	r7, sp, #0
 800b070:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b072:	bf00      	nop
 800b074:	370c      	adds	r7, #12
 800b076:	46bd      	mov	sp, r7
 800b078:	bc80      	pop	{r7}
 800b07a:	4770      	bx	lr

0800b07c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b07c:	b480      	push	{r7}
 800b07e:	b083      	sub	sp, #12
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b084:	bf00      	nop
 800b086:	370c      	adds	r7, #12
 800b088:	46bd      	mov	sp, r7
 800b08a:	bc80      	pop	{r7}
 800b08c:	4770      	bx	lr

0800b08e <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800b08e:	b580      	push	{r7, lr}
 800b090:	b088      	sub	sp, #32
 800b092:	af02      	add	r7, sp, #8
 800b094:	60f8      	str	r0, [r7, #12]
 800b096:	1d3b      	adds	r3, r7, #4
 800b098:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 800b09c:	2300      	movs	r3, #0
 800b09e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b0a6:	2b01      	cmp	r3, #1
 800b0a8:	d101      	bne.n	800b0ae <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 800b0aa:	2302      	movs	r3, #2
 800b0ac:	e046      	b.n	800b13c <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	2201      	movs	r2, #1
 800b0b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	2224      	movs	r2, #36	@ 0x24
 800b0ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	681a      	ldr	r2, [r3, #0]
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	f022 0201 	bic.w	r2, r2, #1
 800b0cc:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	689b      	ldr	r3, [r3, #8]
 800b0d4:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800b0d8:	687a      	ldr	r2, [r7, #4]
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	430a      	orrs	r2, r1
 800b0e0:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d105      	bne.n	800b0f4 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800b0e8:	1d3b      	adds	r3, r7, #4
 800b0ea:	e893 0006 	ldmia.w	r3, {r1, r2}
 800b0ee:	68f8      	ldr	r0, [r7, #12]
 800b0f0:	f000 f911 	bl	800b316 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	681a      	ldr	r2, [r3, #0]
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	f042 0201 	orr.w	r2, r2, #1
 800b102:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b104:	f7f7 fbee 	bl	80028e4 <HAL_GetTick>
 800b108:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b10a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b10e:	9300      	str	r3, [sp, #0]
 800b110:	693b      	ldr	r3, [r7, #16]
 800b112:	2200      	movs	r2, #0
 800b114:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b118:	68f8      	ldr	r0, [r7, #12]
 800b11a:	f7fe ff16 	bl	8009f4a <UART_WaitOnFlagUntilTimeout>
 800b11e:	4603      	mov	r3, r0
 800b120:	2b00      	cmp	r3, #0
 800b122:	d002      	beq.n	800b12a <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 800b124:	2303      	movs	r3, #3
 800b126:	75fb      	strb	r3, [r7, #23]
 800b128:	e003      	b.n	800b132 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	2220      	movs	r2, #32
 800b12e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	2200      	movs	r2, #0
 800b136:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return status;
 800b13a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b13c:	4618      	mov	r0, r3
 800b13e:	3718      	adds	r7, #24
 800b140:	46bd      	mov	sp, r7
 800b142:	bd80      	pop	{r7, pc}

0800b144 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 800b144:	b480      	push	{r7}
 800b146:	b089      	sub	sp, #36	@ 0x24
 800b148:	af00      	add	r7, sp, #0
 800b14a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b152:	2b01      	cmp	r3, #1
 800b154:	d101      	bne.n	800b15a <HAL_UARTEx_EnableStopMode+0x16>
 800b156:	2302      	movs	r3, #2
 800b158:	e021      	b.n	800b19e <HAL_UARTEx_EnableStopMode+0x5a>
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	2201      	movs	r2, #1
 800b15e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	e853 3f00 	ldrex	r3, [r3]
 800b16e:	60bb      	str	r3, [r7, #8]
   return(result);
 800b170:	68bb      	ldr	r3, [r7, #8]
 800b172:	f043 0302 	orr.w	r3, r3, #2
 800b176:	61fb      	str	r3, [r7, #28]
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	461a      	mov	r2, r3
 800b17e:	69fb      	ldr	r3, [r7, #28]
 800b180:	61bb      	str	r3, [r7, #24]
 800b182:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b184:	6979      	ldr	r1, [r7, #20]
 800b186:	69ba      	ldr	r2, [r7, #24]
 800b188:	e841 2300 	strex	r3, r2, [r1]
 800b18c:	613b      	str	r3, [r7, #16]
   return(result);
 800b18e:	693b      	ldr	r3, [r7, #16]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d1e6      	bne.n	800b162 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2200      	movs	r2, #0
 800b198:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b19c:	2300      	movs	r3, #0
}
 800b19e:	4618      	mov	r0, r3
 800b1a0:	3724      	adds	r7, #36	@ 0x24
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	bc80      	pop	{r7}
 800b1a6:	4770      	bx	lr

0800b1a8 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b084      	sub	sp, #16
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b1b6:	2b01      	cmp	r3, #1
 800b1b8:	d101      	bne.n	800b1be <HAL_UARTEx_EnableFifoMode+0x16>
 800b1ba:	2302      	movs	r3, #2
 800b1bc:	e02b      	b.n	800b216 <HAL_UARTEx_EnableFifoMode+0x6e>
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	2201      	movs	r2, #1
 800b1c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	2224      	movs	r2, #36	@ 0x24
 800b1ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	681a      	ldr	r2, [r3, #0]
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	f022 0201 	bic.w	r2, r2, #1
 800b1e4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b1ec:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800b1f4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	68fa      	ldr	r2, [r7, #12]
 800b1fc:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b1fe:	6878      	ldr	r0, [r7, #4]
 800b200:	f000 f8ac 	bl	800b35c <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2220      	movs	r2, #32
 800b208:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2200      	movs	r2, #0
 800b210:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b214:	2300      	movs	r3, #0
}
 800b216:	4618      	mov	r0, r3
 800b218:	3710      	adds	r7, #16
 800b21a:	46bd      	mov	sp, r7
 800b21c:	bd80      	pop	{r7, pc}

0800b21e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b21e:	b580      	push	{r7, lr}
 800b220:	b084      	sub	sp, #16
 800b222:	af00      	add	r7, sp, #0
 800b224:	6078      	str	r0, [r7, #4]
 800b226:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b22e:	2b01      	cmp	r3, #1
 800b230:	d101      	bne.n	800b236 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b232:	2302      	movs	r3, #2
 800b234:	e02d      	b.n	800b292 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	2201      	movs	r2, #1
 800b23a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	2224      	movs	r2, #36	@ 0x24
 800b242:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	681a      	ldr	r2, [r3, #0]
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	f022 0201 	bic.w	r2, r2, #1
 800b25c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	689b      	ldr	r3, [r3, #8]
 800b264:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	683a      	ldr	r2, [r7, #0]
 800b26e:	430a      	orrs	r2, r1
 800b270:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b272:	6878      	ldr	r0, [r7, #4]
 800b274:	f000 f872 	bl	800b35c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	68fa      	ldr	r2, [r7, #12]
 800b27e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	2220      	movs	r2, #32
 800b284:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	2200      	movs	r2, #0
 800b28c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b290:	2300      	movs	r3, #0
}
 800b292:	4618      	mov	r0, r3
 800b294:	3710      	adds	r7, #16
 800b296:	46bd      	mov	sp, r7
 800b298:	bd80      	pop	{r7, pc}

0800b29a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b29a:	b580      	push	{r7, lr}
 800b29c:	b084      	sub	sp, #16
 800b29e:	af00      	add	r7, sp, #0
 800b2a0:	6078      	str	r0, [r7, #4]
 800b2a2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b2aa:	2b01      	cmp	r3, #1
 800b2ac:	d101      	bne.n	800b2b2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b2ae:	2302      	movs	r3, #2
 800b2b0:	e02d      	b.n	800b30e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	2201      	movs	r2, #1
 800b2b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	2224      	movs	r2, #36	@ 0x24
 800b2be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	681a      	ldr	r2, [r3, #0]
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	f022 0201 	bic.w	r2, r2, #1
 800b2d8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	689b      	ldr	r3, [r3, #8]
 800b2e0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	683a      	ldr	r2, [r7, #0]
 800b2ea:	430a      	orrs	r2, r1
 800b2ec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b2ee:	6878      	ldr	r0, [r7, #4]
 800b2f0:	f000 f834 	bl	800b35c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	68fa      	ldr	r2, [r7, #12]
 800b2fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	2220      	movs	r2, #32
 800b300:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2200      	movs	r2, #0
 800b308:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b30c:	2300      	movs	r3, #0
}
 800b30e:	4618      	mov	r0, r3
 800b310:	3710      	adds	r7, #16
 800b312:	46bd      	mov	sp, r7
 800b314:	bd80      	pop	{r7, pc}

0800b316 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800b316:	b480      	push	{r7}
 800b318:	b085      	sub	sp, #20
 800b31a:	af00      	add	r7, sp, #0
 800b31c:	60f8      	str	r0, [r7, #12]
 800b31e:	1d3b      	adds	r3, r7, #4
 800b320:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	685b      	ldr	r3, [r3, #4]
 800b32a:	f023 0210 	bic.w	r2, r3, #16
 800b32e:	893b      	ldrh	r3, [r7, #8]
 800b330:	4619      	mov	r1, r3
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	430a      	orrs	r2, r1
 800b338:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	685b      	ldr	r3, [r3, #4]
 800b340:	f023 417f 	bic.w	r1, r3, #4278190080	@ 0xff000000
 800b344:	7abb      	ldrb	r3, [r7, #10]
 800b346:	061a      	lsls	r2, r3, #24
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	430a      	orrs	r2, r1
 800b34e:	605a      	str	r2, [r3, #4]
}
 800b350:	bf00      	nop
 800b352:	3714      	adds	r7, #20
 800b354:	46bd      	mov	sp, r7
 800b356:	bc80      	pop	{r7}
 800b358:	4770      	bx	lr
	...

0800b35c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b35c:	b480      	push	{r7}
 800b35e:	b085      	sub	sp, #20
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d108      	bne.n	800b37e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2201      	movs	r2, #1
 800b370:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	2201      	movs	r2, #1
 800b378:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b37c:	e031      	b.n	800b3e2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b37e:	2308      	movs	r3, #8
 800b380:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b382:	2308      	movs	r3, #8
 800b384:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	689b      	ldr	r3, [r3, #8]
 800b38c:	0e5b      	lsrs	r3, r3, #25
 800b38e:	b2db      	uxtb	r3, r3
 800b390:	f003 0307 	and.w	r3, r3, #7
 800b394:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	689b      	ldr	r3, [r3, #8]
 800b39c:	0f5b      	lsrs	r3, r3, #29
 800b39e:	b2db      	uxtb	r3, r3
 800b3a0:	f003 0307 	and.w	r3, r3, #7
 800b3a4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b3a6:	7bbb      	ldrb	r3, [r7, #14]
 800b3a8:	7b3a      	ldrb	r2, [r7, #12]
 800b3aa:	4910      	ldr	r1, [pc, #64]	@ (800b3ec <UARTEx_SetNbDataToProcess+0x90>)
 800b3ac:	5c8a      	ldrb	r2, [r1, r2]
 800b3ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b3b2:	7b3a      	ldrb	r2, [r7, #12]
 800b3b4:	490e      	ldr	r1, [pc, #56]	@ (800b3f0 <UARTEx_SetNbDataToProcess+0x94>)
 800b3b6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b3b8:	fb93 f3f2 	sdiv	r3, r3, r2
 800b3bc:	b29a      	uxth	r2, r3
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b3c4:	7bfb      	ldrb	r3, [r7, #15]
 800b3c6:	7b7a      	ldrb	r2, [r7, #13]
 800b3c8:	4908      	ldr	r1, [pc, #32]	@ (800b3ec <UARTEx_SetNbDataToProcess+0x90>)
 800b3ca:	5c8a      	ldrb	r2, [r1, r2]
 800b3cc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b3d0:	7b7a      	ldrb	r2, [r7, #13]
 800b3d2:	4907      	ldr	r1, [pc, #28]	@ (800b3f0 <UARTEx_SetNbDataToProcess+0x94>)
 800b3d4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b3d6:	fb93 f3f2 	sdiv	r3, r3, r2
 800b3da:	b29a      	uxth	r2, r3
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b3e2:	bf00      	nop
 800b3e4:	3714      	adds	r7, #20
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	bc80      	pop	{r7}
 800b3ea:	4770      	bx	lr
 800b3ec:	0801f86c 	.word	0x0801f86c
 800b3f0:	0801f874 	.word	0x0801f874

0800b3f4 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 800b3f8:	f7f7 f914 	bl	8002624 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800b3fc:	f000 f820 	bl	800b440 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800b400:	bf00      	nop
 800b402:	bd80      	pop	{r7, pc}

0800b404 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 800b404:	b580      	push	{r7, lr}
 800b406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800b408:	f04f 30ff 	mov.w	r0, #4294967295
 800b40c:	f012 fda6 	bl	801df5c <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 800b410:	bf00      	nop
 800b412:	bd80      	pop	{r7, pc}

0800b414 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800b414:	b480      	push	{r7}
 800b416:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800b418:	f3bf 8f4f 	dsb	sy
}
 800b41c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800b41e:	4b06      	ldr	r3, [pc, #24]	@ (800b438 <__NVIC_SystemReset+0x24>)
 800b420:	68db      	ldr	r3, [r3, #12]
 800b422:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800b426:	4904      	ldr	r1, [pc, #16]	@ (800b438 <__NVIC_SystemReset+0x24>)
 800b428:	4b04      	ldr	r3, [pc, #16]	@ (800b43c <__NVIC_SystemReset+0x28>)
 800b42a:	4313      	orrs	r3, r2
 800b42c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800b42e:	f3bf 8f4f 	dsb	sy
}
 800b432:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800b434:	bf00      	nop
 800b436:	e7fd      	b.n	800b434 <__NVIC_SystemReset+0x20>
 800b438:	e000ed00 	.word	0xe000ed00
 800b43c:	05fa0004 	.word	0x05fa0004

0800b440 <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b086      	sub	sp, #24
 800b444:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN LoRaWAN_Init_LV */
  uint32_t feature_version = 0UL;
 800b446:	2300      	movs	r3, #0
 800b448:	607b      	str	r3, [r7, #4]
  /* USER CODE END LoRaWAN_Init_LV */

  /* USER CODE BEGIN LoRaWAN_Init_1 */

  /* Get LoRaWAN APP version*/
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 800b44a:	2300      	movs	r3, #0
 800b44c:	9302      	str	r3, [sp, #8]
 800b44e:	2303      	movs	r3, #3
 800b450:	9301      	str	r3, [sp, #4]
 800b452:	2301      	movs	r3, #1
 800b454:	9300      	str	r3, [sp, #0]
 800b456:	4b59      	ldr	r3, [pc, #356]	@ (800b5bc <LoRaWAN_Init+0x17c>)
 800b458:	2200      	movs	r2, #0
 800b45a:	2100      	movs	r1, #0
 800b45c:	2002      	movs	r0, #2
 800b45e:	f013 f9c9 	bl	801e7f4 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(APP_VERSION_MAIN),
          (uint8_t)(APP_VERSION_SUB1),
          (uint8_t)(APP_VERSION_SUB2));

  /* Get MW LoRaWAN info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION:  V%X.%X.%X\r\n",
 800b462:	2300      	movs	r3, #0
 800b464:	9302      	str	r3, [sp, #8]
 800b466:	2305      	movs	r3, #5
 800b468:	9301      	str	r3, [sp, #4]
 800b46a:	2302      	movs	r3, #2
 800b46c:	9300      	str	r3, [sp, #0]
 800b46e:	4b54      	ldr	r3, [pc, #336]	@ (800b5c0 <LoRaWAN_Init+0x180>)
 800b470:	2200      	movs	r2, #0
 800b472:	2100      	movs	r1, #0
 800b474:	2002      	movs	r0, #2
 800b476:	f013 f9bd 	bl	801e7f4 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(LORAWAN_VERSION_MAIN),
          (uint8_t)(LORAWAN_VERSION_SUB1),
          (uint8_t)(LORAWAN_VERSION_SUB2));

  /* Get MW SubGhz_Phy info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 800b47a:	2300      	movs	r3, #0
 800b47c:	9302      	str	r3, [sp, #8]
 800b47e:	2303      	movs	r3, #3
 800b480:	9301      	str	r3, [sp, #4]
 800b482:	2301      	movs	r3, #1
 800b484:	9300      	str	r3, [sp, #0]
 800b486:	4b4f      	ldr	r3, [pc, #316]	@ (800b5c4 <LoRaWAN_Init+0x184>)
 800b488:	2200      	movs	r2, #0
 800b48a:	2100      	movs	r1, #0
 800b48c:	2002      	movs	r0, #2
 800b48e:	f013 f9b1 	bl	801e7f4 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(SUBGHZ_PHY_VERSION_MAIN),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB1),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB2));

  /* Get LoRaWAN Link Layer info */
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 800b492:	1d3b      	adds	r3, r7, #4
 800b494:	4619      	mov	r1, r3
 800b496:	2000      	movs	r0, #0
 800b498:	f003 fa44 	bl	800e924 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	0e1b      	lsrs	r3, r3, #24
 800b4a0:	b2db      	uxtb	r3, r3
 800b4a2:	461a      	mov	r2, r3
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	0c1b      	lsrs	r3, r3, #16
 800b4a8:	b2db      	uxtb	r3, r3
 800b4aa:	4619      	mov	r1, r3
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	0a1b      	lsrs	r3, r3, #8
 800b4b0:	b2db      	uxtb	r3, r3
 800b4b2:	9302      	str	r3, [sp, #8]
 800b4b4:	9101      	str	r1, [sp, #4]
 800b4b6:	9200      	str	r2, [sp, #0]
 800b4b8:	4b43      	ldr	r3, [pc, #268]	@ (800b5c8 <LoRaWAN_Init+0x188>)
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	2100      	movs	r1, #0
 800b4be:	2002      	movs	r0, #2
 800b4c0:	f013 f998 	bl	801e7f4 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8));

  /* Get LoRaWAN Regional Parameters info */
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 800b4c4:	1d3b      	adds	r3, r7, #4
 800b4c6:	4619      	mov	r1, r3
 800b4c8:	2001      	movs	r0, #1
 800b4ca:	f003 fa2b 	bl	800e924 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	0e1b      	lsrs	r3, r3, #24
 800b4d2:	b2db      	uxtb	r3, r3
 800b4d4:	461a      	mov	r2, r3
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	0c1b      	lsrs	r3, r3, #16
 800b4da:	b2db      	uxtb	r3, r3
 800b4dc:	4619      	mov	r1, r3
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	0a1b      	lsrs	r3, r3, #8
 800b4e2:	b2db      	uxtb	r3, r3
 800b4e4:	6878      	ldr	r0, [r7, #4]
 800b4e6:	b2c0      	uxtb	r0, r0
 800b4e8:	9003      	str	r0, [sp, #12]
 800b4ea:	9302      	str	r3, [sp, #8]
 800b4ec:	9101      	str	r1, [sp, #4]
 800b4ee:	9200      	str	r2, [sp, #0]
 800b4f0:	4b36      	ldr	r3, [pc, #216]	@ (800b5cc <LoRaWAN_Init+0x18c>)
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	2100      	movs	r1, #0
 800b4f6:	2002      	movs	r0, #2
 800b4f8:	f013 f97c 	bl	801e7f4 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8),
          (uint8_t)(feature_version));

  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	9300      	str	r3, [sp, #0]
 800b500:	4b33      	ldr	r3, [pc, #204]	@ (800b5d0 <LoRaWAN_Init+0x190>)
 800b502:	2200      	movs	r2, #0
 800b504:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800b508:	4832      	ldr	r0, [pc, #200]	@ (800b5d4 <LoRaWAN_Init+0x194>)
 800b50a:	f012 fec5 	bl	801e298 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 800b50e:	2300      	movs	r3, #0
 800b510:	9300      	str	r3, [sp, #0]
 800b512:	4b31      	ldr	r3, [pc, #196]	@ (800b5d8 <LoRaWAN_Init+0x198>)
 800b514:	2200      	movs	r2, #0
 800b516:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800b51a:	4830      	ldr	r0, [pc, #192]	@ (800b5dc <LoRaWAN_Init+0x19c>)
 800b51c:	f012 febc 	bl	801e298 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 800b520:	2300      	movs	r3, #0
 800b522:	9300      	str	r3, [sp, #0]
 800b524:	4b2e      	ldr	r3, [pc, #184]	@ (800b5e0 <LoRaWAN_Init+0x1a0>)
 800b526:	2201      	movs	r2, #1
 800b528:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800b52c:	482d      	ldr	r0, [pc, #180]	@ (800b5e4 <LoRaWAN_Init+0x1a4>)
 800b52e:	f012 feb3 	bl	801e298 <UTIL_TIMER_Create>

  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 800b532:	2300      	movs	r3, #0
 800b534:	9300      	str	r3, [sp, #0]
 800b536:	4b2c      	ldr	r3, [pc, #176]	@ (800b5e8 <LoRaWAN_Init+0x1a8>)
 800b538:	2200      	movs	r2, #0
 800b53a:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800b53e:	482b      	ldr	r0, [pc, #172]	@ (800b5ec <LoRaWAN_Init+0x1ac>)
 800b540:	f012 feaa 	bl	801e298 <UTIL_TIMER_Create>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 800b544:	4a2a      	ldr	r2, [pc, #168]	@ (800b5f0 <LoRaWAN_Init+0x1b0>)
 800b546:	2100      	movs	r1, #0
 800b548:	2001      	movs	r0, #1
 800b54a:	f012 fe03 	bl	801e154 <UTIL_SEQ_RegTask>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 800b54e:	4a29      	ldr	r2, [pc, #164]	@ (800b5f4 <LoRaWAN_Init+0x1b4>)
 800b550:	2100      	movs	r1, #0
 800b552:	2002      	movs	r0, #2
 800b554:	f012 fdfe 	bl	801e154 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 800b558:	4a27      	ldr	r2, [pc, #156]	@ (800b5f8 <LoRaWAN_Init+0x1b8>)
 800b55a:	2100      	movs	r1, #0
 800b55c:	2004      	movs	r0, #4
 800b55e:	f012 fdf9 	bl	801e154 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 800b562:	4a26      	ldr	r2, [pc, #152]	@ (800b5fc <LoRaWAN_Init+0x1bc>)
 800b564:	2100      	movs	r1, #0
 800b566:	2008      	movs	r0, #8
 800b568:	f012 fdf4 	bl	801e154 <UTIL_SEQ_RegTask>

  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 800b56c:	f000 fd32 	bl	800bfd4 <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 800b570:	4923      	ldr	r1, [pc, #140]	@ (800b600 <LoRaWAN_Init+0x1c0>)
 800b572:	4824      	ldr	r0, [pc, #144]	@ (800b604 <LoRaWAN_Init+0x1c4>)
 800b574:	f002 fa48 	bl	800da08 <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 800b578:	4823      	ldr	r0, [pc, #140]	@ (800b608 <LoRaWAN_Init+0x1c8>)
 800b57a:	f002 fab3 	bl	800dae4 <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  UTIL_TIMER_Start(&JoinLedTimer);
 800b57e:	4819      	ldr	r0, [pc, #100]	@ (800b5e4 <LoRaWAN_Init+0x1a4>)
 800b580:	f012 fec0 	bl	801e304 <UTIL_TIMER_Start>

  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType, ForceRejoin);
 800b584:	4b21      	ldr	r3, [pc, #132]	@ (800b60c <LoRaWAN_Init+0x1cc>)
 800b586:	781b      	ldrb	r3, [r3, #0]
 800b588:	4a21      	ldr	r2, [pc, #132]	@ (800b610 <LoRaWAN_Init+0x1d0>)
 800b58a:	7812      	ldrb	r2, [r2, #0]
 800b58c:	4611      	mov	r1, r2
 800b58e:	4618      	mov	r0, r3
 800b590:	f002 fc00 	bl	800dd94 <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 800b594:	4b1f      	ldr	r3, [pc, #124]	@ (800b614 <LoRaWAN_Init+0x1d4>)
 800b596:	781b      	ldrb	r3, [r3, #0]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d10b      	bne.n	800b5b4 <LoRaWAN_Init+0x174>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 800b59c:	4b1e      	ldr	r3, [pc, #120]	@ (800b618 <LoRaWAN_Init+0x1d8>)
 800b59e:	6819      	ldr	r1, [r3, #0]
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	9300      	str	r3, [sp, #0]
 800b5a4:	4b1d      	ldr	r3, [pc, #116]	@ (800b61c <LoRaWAN_Init+0x1dc>)
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	481d      	ldr	r0, [pc, #116]	@ (800b620 <LoRaWAN_Init+0x1e0>)
 800b5aa:	f012 fe75 	bl	801e298 <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 800b5ae:	481c      	ldr	r0, [pc, #112]	@ (800b620 <LoRaWAN_Init+0x1e0>)
 800b5b0:	f012 fea8 	bl	801e304 <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 800b5b4:	bf00      	nop
 800b5b6:	3708      	adds	r7, #8
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	bd80      	pop	{r7, pc}
 800b5bc:	0801eef0 	.word	0x0801eef0
 800b5c0:	0801ef14 	.word	0x0801ef14
 800b5c4:	0801ef38 	.word	0x0801ef38
 800b5c8:	0801ef5c 	.word	0x0801ef5c
 800b5cc:	0801ef80 	.word	0x0801ef80
 800b5d0:	0800baf5 	.word	0x0800baf5
 800b5d4:	200004b0 	.word	0x200004b0
 800b5d8:	0800bb07 	.word	0x0800bb07
 800b5dc:	200004c8 	.word	0x200004c8
 800b5e0:	0800bb19 	.word	0x0800bb19
 800b5e4:	200004e0 	.word	0x200004e0
 800b5e8:	0800bed5 	.word	0x0800bed5
 800b5ec:	200003a4 	.word	0x200003a4
 800b5f0:	0800dd29 	.word	0x0800dd29
 800b5f4:	0800b795 	.word	0x0800b795
 800b5f8:	0800bef9 	.word	0x0800bef9
 800b5fc:	0800be55 	.word	0x0800be55
 800b600:	01030000 	.word	0x01030000
 800b604:	20000028 	.word	0x20000028
 800b608:	20000074 	.word	0x20000074
 800b60c:	20000024 	.word	0x20000024
 800b610:	20000025 	.word	0x20000025
 800b614:	20000388 	.word	0x20000388
 800b618:	2000008c 	.word	0x2000008c
 800b61c:	0800bad1 	.word	0x0800bad1
 800b620:	2000038c 	.word	0x2000038c

0800b624 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN PB_Callbacks */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b082      	sub	sp, #8
 800b628:	af00      	add	r7, sp, #0
 800b62a:	4603      	mov	r3, r0
 800b62c:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 800b62e:	88fb      	ldrh	r3, [r7, #6]
 800b630:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b634:	d104      	bne.n	800b640 <HAL_GPIO_EXTI_Callback+0x1c>
  {
    case  BUT1_Pin:
    	// XXX: always initialized
      if (EventType == TX_ON_EVENT || 1)
      {
        UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800b636:	2100      	movs	r1, #0
 800b638:	2002      	movs	r0, #2
 800b63a:	f012 fdad 	bl	801e198 <UTIL_SEQ_SetTask>
      }
      break;
 800b63e:	e000      	b.n	800b642 <HAL_GPIO_EXTI_Callback+0x1e>
    default:
      break;
 800b640:	bf00      	nop
  }
}
 800b642:	bf00      	nop
 800b644:	3708      	adds	r7, #8
 800b646:	46bd      	mov	sp, r7
 800b648:	bd80      	pop	{r7, pc}
	...

0800b64c <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 800b64c:	b5b0      	push	{r4, r5, r7, lr}
 800b64e:	b08a      	sub	sp, #40	@ 0x28
 800b650:	af06      	add	r7, sp, #24
 800b652:	6078      	str	r0, [r7, #4]
 800b654:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
  uint8_t RxPort = 0;
 800b656:	2300      	movs	r3, #0
 800b658:	73fb      	strb	r3, [r7, #15]

  if (params != NULL)
 800b65a:	683b      	ldr	r3, [r7, #0]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	f000 8086 	beq.w	800b76e <OnRxData+0x122>
  {
#if 0   // XXX:
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
#endif

    UTIL_TIMER_Start(&RxLedTimer);
 800b662:	4845      	ldr	r0, [pc, #276]	@ (800b778 <OnRxData+0x12c>)
 800b664:	f012 fe4e 	bl	801e304 <UTIL_TIMER_Start>

    if (params->IsMcpsIndication)
 800b668:	683b      	ldr	r3, [r7, #0]
 800b66a:	781b      	ldrb	r3, [r3, #0]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d05a      	beq.n	800b726 <OnRxData+0xda>
    {
      if (appData != NULL)
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d057      	beq.n	800b726 <OnRxData+0xda>
      {
        RxPort = appData->Port;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	781b      	ldrb	r3, [r3, #0]
 800b67a:	73fb      	strb	r3, [r7, #15]
        if (appData->Buffer != NULL)
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	685b      	ldr	r3, [r3, #4]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d050      	beq.n	800b726 <OnRxData+0xda>
        {
          switch (appData->Port)
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	781b      	ldrb	r3, [r3, #0]
 800b688:	2b02      	cmp	r3, #2
 800b68a:	d01f      	beq.n	800b6cc <OnRxData+0x80>
 800b68c:	2b03      	cmp	r3, #3
 800b68e:	d145      	bne.n	800b71c <OnRxData+0xd0>
          {
            case LORAWAN_SWITCH_CLASS_PORT:
              /*this port switches the class*/
              if (appData->BufferSize == 1)
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	785b      	ldrb	r3, [r3, #1]
 800b694:	2b01      	cmp	r3, #1
 800b696:	d143      	bne.n	800b720 <OnRxData+0xd4>
              {
                switch (appData->Buffer[0])
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	685b      	ldr	r3, [r3, #4]
 800b69c:	781b      	ldrb	r3, [r3, #0]
 800b69e:	2b02      	cmp	r3, #2
 800b6a0:	d00e      	beq.n	800b6c0 <OnRxData+0x74>
 800b6a2:	2b02      	cmp	r3, #2
 800b6a4:	dc10      	bgt.n	800b6c8 <OnRxData+0x7c>
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d002      	beq.n	800b6b0 <OnRxData+0x64>
 800b6aa:	2b01      	cmp	r3, #1
 800b6ac:	d004      	beq.n	800b6b8 <OnRxData+0x6c>
                  {
                    LmHandlerRequestClass(CLASS_C);
                    break;
                  }
                  default:
                    break;
 800b6ae:	e00b      	b.n	800b6c8 <OnRxData+0x7c>
                    LmHandlerRequestClass(CLASS_A);
 800b6b0:	2000      	movs	r0, #0
 800b6b2:	f002 fd23 	bl	800e0fc <LmHandlerRequestClass>
                    break;
 800b6b6:	e008      	b.n	800b6ca <OnRxData+0x7e>
                    LmHandlerRequestClass(CLASS_B);
 800b6b8:	2001      	movs	r0, #1
 800b6ba:	f002 fd1f 	bl	800e0fc <LmHandlerRequestClass>
                    break;
 800b6be:	e004      	b.n	800b6ca <OnRxData+0x7e>
                    LmHandlerRequestClass(CLASS_C);
 800b6c0:	2002      	movs	r0, #2
 800b6c2:	f002 fd1b 	bl	800e0fc <LmHandlerRequestClass>
                    break;
 800b6c6:	e000      	b.n	800b6ca <OnRxData+0x7e>
                    break;
 800b6c8:	bf00      	nop
                }
              }
              break;
 800b6ca:	e029      	b.n	800b720 <OnRxData+0xd4>
            case LORAWAN_USER_APP_PORT:
              if (appData->BufferSize == 1)
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	785b      	ldrb	r3, [r3, #1]
 800b6d0:	2b01      	cmp	r3, #1
 800b6d2:	d127      	bne.n	800b724 <OnRxData+0xd8>
              {
                AppLedStateOn = appData->Buffer[0] & 0x01;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	685b      	ldr	r3, [r3, #4]
 800b6d8:	781b      	ldrb	r3, [r3, #0]
 800b6da:	f003 0301 	and.w	r3, r3, #1
 800b6de:	b2da      	uxtb	r2, r3
 800b6e0:	4b26      	ldr	r3, [pc, #152]	@ (800b77c <OnRxData+0x130>)
 800b6e2:	701a      	strb	r2, [r3, #0]
                if (AppLedStateOn == RESET)
 800b6e4:	4b25      	ldr	r3, [pc, #148]	@ (800b77c <OnRxData+0x130>)
 800b6e6:	781b      	ldrb	r3, [r3, #0]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d10b      	bne.n	800b704 <OnRxData+0xb8>
                {
                  APP_LOG(TS_OFF, VLEVEL_H, "LED OFF\r\n");
 800b6ec:	4b24      	ldr	r3, [pc, #144]	@ (800b780 <OnRxData+0x134>)
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	2100      	movs	r1, #0
 800b6f2:	2003      	movs	r0, #3
 800b6f4:	f013 f87e 	bl	801e7f4 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_RED */
 800b6f8:	2201      	movs	r2, #1
 800b6fa:	2120      	movs	r1, #32
 800b6fc:	4821      	ldr	r0, [pc, #132]	@ (800b784 <OnRxData+0x138>)
 800b6fe:	f7fa f95f 	bl	80059c0 <HAL_GPIO_WritePin>
                {
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
                }
              }
              break;
 800b702:	e00f      	b.n	800b724 <OnRxData+0xd8>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 800b704:	4b20      	ldr	r3, [pc, #128]	@ (800b788 <OnRxData+0x13c>)
 800b706:	2200      	movs	r2, #0
 800b708:	2100      	movs	r1, #0
 800b70a:	2003      	movs	r0, #3
 800b70c:	f013 f872 	bl	801e7f4 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
 800b710:	2200      	movs	r2, #0
 800b712:	2120      	movs	r1, #32
 800b714:	481b      	ldr	r0, [pc, #108]	@ (800b784 <OnRxData+0x138>)
 800b716:	f7fa f953 	bl	80059c0 <HAL_GPIO_WritePin>
              break;
 800b71a:	e003      	b.n	800b724 <OnRxData+0xd8>

            default:

              break;
 800b71c:	bf00      	nop
 800b71e:	e002      	b.n	800b726 <OnRxData+0xda>
              break;
 800b720:	bf00      	nop
 800b722:	e000      	b.n	800b726 <OnRxData+0xda>
              break;
 800b724:	bf00      	nop
          }
        }
      }
    }
    if (params->RxSlot < RX_SLOT_NONE)
 800b726:	683b      	ldr	r3, [r7, #0]
 800b728:	7c1b      	ldrb	r3, [r3, #16]
 800b72a:	2b05      	cmp	r3, #5
 800b72c:	d81f      	bhi.n	800b76e <OnRxData+0x122>
    {
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
 800b72e:	683b      	ldr	r3, [r7, #0]
 800b730:	68db      	ldr	r3, [r3, #12]
 800b732:	7bfa      	ldrb	r2, [r7, #15]
 800b734:	6839      	ldr	r1, [r7, #0]
 800b736:	f991 1008 	ldrsb.w	r1, [r1, #8]
 800b73a:	460c      	mov	r4, r1
 800b73c:	6839      	ldr	r1, [r7, #0]
 800b73e:	7c09      	ldrb	r1, [r1, #16]
 800b740:	4608      	mov	r0, r1
 800b742:	4912      	ldr	r1, [pc, #72]	@ (800b78c <OnRxData+0x140>)
 800b744:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800b748:	6838      	ldr	r0, [r7, #0]
 800b74a:	f990 0009 	ldrsb.w	r0, [r0, #9]
 800b74e:	4605      	mov	r5, r0
 800b750:	6838      	ldr	r0, [r7, #0]
 800b752:	f990 000a 	ldrsb.w	r0, [r0, #10]
 800b756:	9005      	str	r0, [sp, #20]
 800b758:	9504      	str	r5, [sp, #16]
 800b75a:	9103      	str	r1, [sp, #12]
 800b75c:	9402      	str	r4, [sp, #8]
 800b75e:	9201      	str	r2, [sp, #4]
 800b760:	9300      	str	r3, [sp, #0]
 800b762:	4b0b      	ldr	r3, [pc, #44]	@ (800b790 <OnRxData+0x144>)
 800b764:	2200      	movs	r2, #0
 800b766:	2100      	movs	r1, #0
 800b768:	2003      	movs	r0, #3
 800b76a:	f013 f843 	bl	801e7f4 <UTIL_ADV_TRACE_COND_FSend>
              params->DownlinkCounter, RxPort, params->Datarate, slotStrings[params->RxSlot], params->Rssi, params->Snr);
    }
  }
  /* USER CODE END OnRxData_1 */
}
 800b76e:	bf00      	nop
 800b770:	3710      	adds	r7, #16
 800b772:	46bd      	mov	sp, r7
 800b774:	bdb0      	pop	{r4, r5, r7, pc}
 800b776:	bf00      	nop
 800b778:	200004c8 	.word	0x200004c8
 800b77c:	200004ae 	.word	0x200004ae
 800b780:	0801efa4 	.word	0x0801efa4
 800b784:	48000400 	.word	0x48000400
 800b788:	0801efb0 	.word	0x0801efb0
 800b78c:	2000000c 	.word	0x2000000c
 800b790:	0801efbc 	.word	0x0801efbc

0800b794 <SendTxData>:

static void SendTxData(void)
{
 800b794:	b590      	push	{r4, r7, lr}
 800b796:	b091      	sub	sp, #68	@ 0x44
 800b798:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SendTxData_1 */
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800b79a:	23ff      	movs	r3, #255	@ 0xff
 800b79c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint8_t batteryLevel = GetBatteryLevel();
 800b7a0:	f7f6 ff70 	bl	8002684 <GetBatteryLevel>
 800b7a4:	4603      	mov	r3, r0
 800b7a6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sensor_t sensor_data;
  UTIL_TIMER_Time_t nextTxIn = 0;
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	637b      	str	r3, [r7, #52]	@ 0x34

#ifdef CAYENNE_LPP
  uint8_t channel = 0;
#else
  uint16_t pressure = 0;
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  int16_t temperature = 0;
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	857b      	strh	r3, [r7, #42]	@ 0x2a
  uint16_t humidity = 0;
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	853b      	strh	r3, [r7, #40]	@ 0x28
  uint32_t i = 0;
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	633b      	str	r3, [r7, #48]	@ 0x30
  int32_t latitude = 0;
 800b7be:	2300      	movs	r3, #0
 800b7c0:	627b      	str	r3, [r7, #36]	@ 0x24
  int32_t longitude = 0;
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	623b      	str	r3, [r7, #32]
  uint16_t altitudeGps = 0;
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	83fb      	strh	r3, [r7, #30]
#endif /* CAYENNE_LPP */

  EnvSensors_Read(&sensor_data);
 800b7ca:	1d3b      	adds	r3, r7, #4
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	f7f7 f91d 	bl	8002a0c <EnvSensors_Read>

  APP_LOG(TS_ON, VLEVEL_M, "VDDA: %d\r\n", batteryLevel);
 800b7d2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b7d6:	9300      	str	r3, [sp, #0]
 800b7d8:	4b97      	ldr	r3, [pc, #604]	@ (800ba38 <SendTxData+0x2a4>)
 800b7da:	2201      	movs	r2, #1
 800b7dc:	2100      	movs	r1, #0
 800b7de:	2002      	movs	r0, #2
 800b7e0:	f013 f808 	bl	801e7f4 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "temp: %d\r\n", (int16_t)(sensor_data.temperature));
 800b7e4:	68bb      	ldr	r3, [r7, #8]
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	f7f5 fc70 	bl	80010cc <__aeabi_f2iz>
 800b7ec:	4603      	mov	r3, r0
 800b7ee:	b21b      	sxth	r3, r3
 800b7f0:	9300      	str	r3, [sp, #0]
 800b7f2:	4b92      	ldr	r3, [pc, #584]	@ (800ba3c <SendTxData+0x2a8>)
 800b7f4:	2201      	movs	r2, #1
 800b7f6:	2100      	movs	r1, #0
 800b7f8:	2002      	movs	r0, #2
 800b7fa:	f012 fffb 	bl	801e7f4 <UTIL_ADV_TRACE_COND_FSend>

  AppData.Port = LORAWAN_USER_APP_PORT;
 800b7fe:	4b90      	ldr	r3, [pc, #576]	@ (800ba40 <SendTxData+0x2ac>)
 800b800:	2202      	movs	r2, #2
 800b802:	701a      	strb	r2, [r3, #0]
  }

  CayenneLppCopy(AppData.Buffer);
  AppData.BufferSize = CayenneLppGetSize();
#else  /* not CAYENNE_LPP */
  humidity    = (uint16_t)(sensor_data.humidity * 100);            /* in %*10     */
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	498f      	ldr	r1, [pc, #572]	@ (800ba44 <SendTxData+0x2b0>)
 800b808:	4618      	mov	r0, r3
 800b80a:	f7f5 fa99 	bl	8000d40 <__aeabi_fmul>
 800b80e:	4603      	mov	r3, r0
 800b810:	4618      	mov	r0, r3
 800b812:	f7f5 fc81 	bl	8001118 <__aeabi_f2uiz>
 800b816:	4603      	mov	r3, r0
 800b818:	853b      	strh	r3, [r7, #40]	@ 0x28
  temperature = (int16_t)(sensor_data.temperature * 100);
 800b81a:	68bb      	ldr	r3, [r7, #8]
 800b81c:	4989      	ldr	r1, [pc, #548]	@ (800ba44 <SendTxData+0x2b0>)
 800b81e:	4618      	mov	r0, r3
 800b820:	f7f5 fa8e 	bl	8000d40 <__aeabi_fmul>
 800b824:	4603      	mov	r3, r0
 800b826:	4618      	mov	r0, r3
 800b828:	f7f5 fc50 	bl	80010cc <__aeabi_f2iz>
 800b82c:	4603      	mov	r3, r0
 800b82e:	857b      	strh	r3, [r7, #42]	@ 0x2a
  pressure = (uint16_t)(sensor_data.pressure * 100 / 10); /* in hPa / 10 */
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	4984      	ldr	r1, [pc, #528]	@ (800ba44 <SendTxData+0x2b0>)
 800b834:	4618      	mov	r0, r3
 800b836:	f7f5 fa83 	bl	8000d40 <__aeabi_fmul>
 800b83a:	4603      	mov	r3, r0
 800b83c:	4982      	ldr	r1, [pc, #520]	@ (800ba48 <SendTxData+0x2b4>)
 800b83e:	4618      	mov	r0, r3
 800b840:	f7f5 fb32 	bl	8000ea8 <__aeabi_fdiv>
 800b844:	4603      	mov	r3, r0
 800b846:	4618      	mov	r0, r3
 800b848:	f7f5 fc66 	bl	8001118 <__aeabi_f2uiz>
 800b84c:	4603      	mov	r3, r0
 800b84e:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  AppData.Buffer[i++] = AppLedStateOn;
 800b850:	4b7b      	ldr	r3, [pc, #492]	@ (800ba40 <SendTxData+0x2ac>)
 800b852:	685a      	ldr	r2, [r3, #4]
 800b854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b856:	1c59      	adds	r1, r3, #1
 800b858:	6339      	str	r1, [r7, #48]	@ 0x30
 800b85a:	4413      	add	r3, r2
 800b85c:	4a7b      	ldr	r2, [pc, #492]	@ (800ba4c <SendTxData+0x2b8>)
 800b85e:	7812      	ldrb	r2, [r2, #0]
 800b860:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((pressure >> 8) & 0xFF);
 800b862:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800b864:	0a1b      	lsrs	r3, r3, #8
 800b866:	b298      	uxth	r0, r3
 800b868:	4b75      	ldr	r3, [pc, #468]	@ (800ba40 <SendTxData+0x2ac>)
 800b86a:	685a      	ldr	r2, [r3, #4]
 800b86c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b86e:	1c59      	adds	r1, r3, #1
 800b870:	6339      	str	r1, [r7, #48]	@ 0x30
 800b872:	4413      	add	r3, r2
 800b874:	b2c2      	uxtb	r2, r0
 800b876:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(pressure & 0xFF);
 800b878:	4b71      	ldr	r3, [pc, #452]	@ (800ba40 <SendTxData+0x2ac>)
 800b87a:	685a      	ldr	r2, [r3, #4]
 800b87c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b87e:	1c59      	adds	r1, r3, #1
 800b880:	6339      	str	r1, [r7, #48]	@ 0x30
 800b882:	4413      	add	r3, r2
 800b884:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800b886:	b2d2      	uxtb	r2, r2
 800b888:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((temperature >> 8) & 0xFF);
 800b88a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 800b88e:	121b      	asrs	r3, r3, #8
 800b890:	b218      	sxth	r0, r3
 800b892:	4b6b      	ldr	r3, [pc, #428]	@ (800ba40 <SendTxData+0x2ac>)
 800b894:	685a      	ldr	r2, [r3, #4]
 800b896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b898:	1c59      	adds	r1, r3, #1
 800b89a:	6339      	str	r1, [r7, #48]	@ 0x30
 800b89c:	4413      	add	r3, r2
 800b89e:	b2c2      	uxtb	r2, r0
 800b8a0:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(temperature & 0xFF);
 800b8a2:	4b67      	ldr	r3, [pc, #412]	@ (800ba40 <SendTxData+0x2ac>)
 800b8a4:	685a      	ldr	r2, [r3, #4]
 800b8a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8a8:	1c59      	adds	r1, r3, #1
 800b8aa:	6339      	str	r1, [r7, #48]	@ 0x30
 800b8ac:	4413      	add	r3, r2
 800b8ae:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800b8b0:	b2d2      	uxtb	r2, r2
 800b8b2:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((humidity >> 8) & 0xFF);
 800b8b4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b8b6:	0a1b      	lsrs	r3, r3, #8
 800b8b8:	b298      	uxth	r0, r3
 800b8ba:	4b61      	ldr	r3, [pc, #388]	@ (800ba40 <SendTxData+0x2ac>)
 800b8bc:	685a      	ldr	r2, [r3, #4]
 800b8be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8c0:	1c59      	adds	r1, r3, #1
 800b8c2:	6339      	str	r1, [r7, #48]	@ 0x30
 800b8c4:	4413      	add	r3, r2
 800b8c6:	b2c2      	uxtb	r2, r0
 800b8c8:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(humidity & 0xFF);
 800b8ca:	4b5d      	ldr	r3, [pc, #372]	@ (800ba40 <SendTxData+0x2ac>)
 800b8cc:	685a      	ldr	r2, [r3, #4]
 800b8ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8d0:	1c59      	adds	r1, r3, #1
 800b8d2:	6339      	str	r1, [r7, #48]	@ 0x30
 800b8d4:	4413      	add	r3, r2
 800b8d6:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800b8d8:	b2d2      	uxtb	r2, r2
 800b8da:	701a      	strb	r2, [r3, #0]

  if ((LmHandlerParams.ActiveRegion == LORAMAC_REGION_US915) || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AU915)
 800b8dc:	4b5c      	ldr	r3, [pc, #368]	@ (800ba50 <SendTxData+0x2bc>)
 800b8de:	781b      	ldrb	r3, [r3, #0]
 800b8e0:	2b08      	cmp	r3, #8
 800b8e2:	d007      	beq.n	800b8f4 <SendTxData+0x160>
 800b8e4:	4b5a      	ldr	r3, [pc, #360]	@ (800ba50 <SendTxData+0x2bc>)
 800b8e6:	781b      	ldrb	r3, [r3, #0]
 800b8e8:	2b01      	cmp	r3, #1
 800b8ea:	d003      	beq.n	800b8f4 <SendTxData+0x160>
      || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AS923))
 800b8ec:	4b58      	ldr	r3, [pc, #352]	@ (800ba50 <SendTxData+0x2bc>)
 800b8ee:	781b      	ldrb	r3, [r3, #0]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d120      	bne.n	800b936 <SendTxData+0x1a2>
  {
    AppData.Buffer[i++] = 0;
 800b8f4:	4b52      	ldr	r3, [pc, #328]	@ (800ba40 <SendTxData+0x2ac>)
 800b8f6:	685a      	ldr	r2, [r3, #4]
 800b8f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8fa:	1c59      	adds	r1, r3, #1
 800b8fc:	6339      	str	r1, [r7, #48]	@ 0x30
 800b8fe:	4413      	add	r3, r2
 800b900:	2200      	movs	r2, #0
 800b902:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800b904:	4b4e      	ldr	r3, [pc, #312]	@ (800ba40 <SendTxData+0x2ac>)
 800b906:	685a      	ldr	r2, [r3, #4]
 800b908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b90a:	1c59      	adds	r1, r3, #1
 800b90c:	6339      	str	r1, [r7, #48]	@ 0x30
 800b90e:	4413      	add	r3, r2
 800b910:	2200      	movs	r2, #0
 800b912:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800b914:	4b4a      	ldr	r3, [pc, #296]	@ (800ba40 <SendTxData+0x2ac>)
 800b916:	685a      	ldr	r2, [r3, #4]
 800b918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b91a:	1c59      	adds	r1, r3, #1
 800b91c:	6339      	str	r1, [r7, #48]	@ 0x30
 800b91e:	4413      	add	r3, r2
 800b920:	2200      	movs	r2, #0
 800b922:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800b924:	4b46      	ldr	r3, [pc, #280]	@ (800ba40 <SendTxData+0x2ac>)
 800b926:	685a      	ldr	r2, [r3, #4]
 800b928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b92a:	1c59      	adds	r1, r3, #1
 800b92c:	6339      	str	r1, [r7, #48]	@ 0x30
 800b92e:	4413      	add	r3, r2
 800b930:	2200      	movs	r2, #0
 800b932:	701a      	strb	r2, [r3, #0]
 800b934:	e05b      	b.n	800b9ee <SendTxData+0x25a>
  }
  else
  {
    latitude = sensor_data.latitude;
 800b936:	693b      	ldr	r3, [r7, #16]
 800b938:	627b      	str	r3, [r7, #36]	@ 0x24
    longitude = sensor_data.longitude;
 800b93a:	697b      	ldr	r3, [r7, #20]
 800b93c:	623b      	str	r3, [r7, #32]

    AppData.Buffer[i++] = GetBatteryLevel();        /* 1 (very low) to 254 (fully charged) */
 800b93e:	4b40      	ldr	r3, [pc, #256]	@ (800ba40 <SendTxData+0x2ac>)
 800b940:	685a      	ldr	r2, [r3, #4]
 800b942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b944:	1c59      	adds	r1, r3, #1
 800b946:	6339      	str	r1, [r7, #48]	@ 0x30
 800b948:	18d4      	adds	r4, r2, r3
 800b94a:	f7f6 fe9b 	bl	8002684 <GetBatteryLevel>
 800b94e:	4603      	mov	r3, r0
 800b950:	7023      	strb	r3, [r4, #0]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 16) & 0xFF);
 800b952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b954:	1418      	asrs	r0, r3, #16
 800b956:	4b3a      	ldr	r3, [pc, #232]	@ (800ba40 <SendTxData+0x2ac>)
 800b958:	685a      	ldr	r2, [r3, #4]
 800b95a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b95c:	1c59      	adds	r1, r3, #1
 800b95e:	6339      	str	r1, [r7, #48]	@ 0x30
 800b960:	4413      	add	r3, r2
 800b962:	b2c2      	uxtb	r2, r0
 800b964:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 8) & 0xFF);
 800b966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b968:	1218      	asrs	r0, r3, #8
 800b96a:	4b35      	ldr	r3, [pc, #212]	@ (800ba40 <SendTxData+0x2ac>)
 800b96c:	685a      	ldr	r2, [r3, #4]
 800b96e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b970:	1c59      	adds	r1, r3, #1
 800b972:	6339      	str	r1, [r7, #48]	@ 0x30
 800b974:	4413      	add	r3, r2
 800b976:	b2c2      	uxtb	r2, r0
 800b978:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(latitude & 0xFF);
 800b97a:	4b31      	ldr	r3, [pc, #196]	@ (800ba40 <SendTxData+0x2ac>)
 800b97c:	685a      	ldr	r2, [r3, #4]
 800b97e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b980:	1c59      	adds	r1, r3, #1
 800b982:	6339      	str	r1, [r7, #48]	@ 0x30
 800b984:	4413      	add	r3, r2
 800b986:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b988:	b2d2      	uxtb	r2, r2
 800b98a:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 16) & 0xFF);
 800b98c:	6a3b      	ldr	r3, [r7, #32]
 800b98e:	1418      	asrs	r0, r3, #16
 800b990:	4b2b      	ldr	r3, [pc, #172]	@ (800ba40 <SendTxData+0x2ac>)
 800b992:	685a      	ldr	r2, [r3, #4]
 800b994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b996:	1c59      	adds	r1, r3, #1
 800b998:	6339      	str	r1, [r7, #48]	@ 0x30
 800b99a:	4413      	add	r3, r2
 800b99c:	b2c2      	uxtb	r2, r0
 800b99e:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 8) & 0xFF);
 800b9a0:	6a3b      	ldr	r3, [r7, #32]
 800b9a2:	1218      	asrs	r0, r3, #8
 800b9a4:	4b26      	ldr	r3, [pc, #152]	@ (800ba40 <SendTxData+0x2ac>)
 800b9a6:	685a      	ldr	r2, [r3, #4]
 800b9a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9aa:	1c59      	adds	r1, r3, #1
 800b9ac:	6339      	str	r1, [r7, #48]	@ 0x30
 800b9ae:	4413      	add	r3, r2
 800b9b0:	b2c2      	uxtb	r2, r0
 800b9b2:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(longitude & 0xFF);
 800b9b4:	4b22      	ldr	r3, [pc, #136]	@ (800ba40 <SendTxData+0x2ac>)
 800b9b6:	685a      	ldr	r2, [r3, #4]
 800b9b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9ba:	1c59      	adds	r1, r3, #1
 800b9bc:	6339      	str	r1, [r7, #48]	@ 0x30
 800b9be:	4413      	add	r3, r2
 800b9c0:	6a3a      	ldr	r2, [r7, #32]
 800b9c2:	b2d2      	uxtb	r2, r2
 800b9c4:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((altitudeGps >> 8) & 0xFF);
 800b9c6:	8bfb      	ldrh	r3, [r7, #30]
 800b9c8:	0a1b      	lsrs	r3, r3, #8
 800b9ca:	b298      	uxth	r0, r3
 800b9cc:	4b1c      	ldr	r3, [pc, #112]	@ (800ba40 <SendTxData+0x2ac>)
 800b9ce:	685a      	ldr	r2, [r3, #4]
 800b9d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9d2:	1c59      	adds	r1, r3, #1
 800b9d4:	6339      	str	r1, [r7, #48]	@ 0x30
 800b9d6:	4413      	add	r3, r2
 800b9d8:	b2c2      	uxtb	r2, r0
 800b9da:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(altitudeGps & 0xFF);
 800b9dc:	4b18      	ldr	r3, [pc, #96]	@ (800ba40 <SendTxData+0x2ac>)
 800b9de:	685a      	ldr	r2, [r3, #4]
 800b9e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9e2:	1c59      	adds	r1, r3, #1
 800b9e4:	6339      	str	r1, [r7, #48]	@ 0x30
 800b9e6:	4413      	add	r3, r2
 800b9e8:	8bfa      	ldrh	r2, [r7, #30]
 800b9ea:	b2d2      	uxtb	r2, r2
 800b9ec:	701a      	strb	r2, [r3, #0]
  }

  AppData.BufferSize = i;
 800b9ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9f0:	b2da      	uxtb	r2, r3
 800b9f2:	4b13      	ldr	r3, [pc, #76]	@ (800ba40 <SendTxData+0x2ac>)
 800b9f4:	705a      	strb	r2, [r3, #1]
#endif /* CAYENNE_LPP */

  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800b9f6:	4b17      	ldr	r3, [pc, #92]	@ (800ba54 <SendTxData+0x2c0>)
 800b9f8:	7a5b      	ldrb	r3, [r3, #9]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d007      	beq.n	800ba0e <SendTxData+0x27a>
 800b9fe:	f002 fa6b 	bl	800ded8 <LmHandlerJoinStatus>
 800ba02:	4603      	mov	r3, r0
 800ba04:	2b01      	cmp	r3, #1
 800ba06:	d102      	bne.n	800ba0e <SendTxData+0x27a>
  {
    UTIL_TIMER_Stop(&JoinLedTimer);
 800ba08:	4812      	ldr	r0, [pc, #72]	@ (800ba54 <SendTxData+0x2c0>)
 800ba0a:	f012 fce9 	bl	801e3e0 <UTIL_TIMER_Stop>
#if 0   // XXX:
    HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
#endif
  }

  status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 800ba0e:	4b10      	ldr	r3, [pc, #64]	@ (800ba50 <SendTxData+0x2bc>)
 800ba10:	78db      	ldrb	r3, [r3, #3]
 800ba12:	2200      	movs	r2, #0
 800ba14:	4619      	mov	r1, r3
 800ba16:	480a      	ldr	r0, [pc, #40]	@ (800ba40 <SendTxData+0x2ac>)
 800ba18:	f002 fa7a 	bl	800df10 <LmHandlerSend>
 800ba1c:	4603      	mov	r3, r0
 800ba1e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (LORAMAC_HANDLER_SUCCESS == status)
 800ba22:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d118      	bne.n	800ba5c <SendTxData+0x2c8>
  {
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 800ba2a:	4b0b      	ldr	r3, [pc, #44]	@ (800ba58 <SendTxData+0x2c4>)
 800ba2c:	2201      	movs	r2, #1
 800ba2e:	2100      	movs	r1, #0
 800ba30:	2001      	movs	r0, #1
 800ba32:	f012 fedf 	bl	801e7f4 <UTIL_ADV_TRACE_COND_FSend>
 800ba36:	e028      	b.n	800ba8a <SendTxData+0x2f6>
 800ba38:	0801f004 	.word	0x0801f004
 800ba3c:	0801f010 	.word	0x0801f010
 800ba40:	20000090 	.word	0x20000090
 800ba44:	42c80000 	.word	0x42c80000
 800ba48:	41200000 	.word	0x41200000
 800ba4c:	200004ae 	.word	0x200004ae
 800ba50:	20000074 	.word	0x20000074
 800ba54:	200004e0 	.word	0x200004e0
 800ba58:	0801f01c 	.word	0x0801f01c
  }
  else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 800ba5c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800ba60:	f113 0f06 	cmn.w	r3, #6
 800ba64:	d111      	bne.n	800ba8a <SendTxData+0x2f6>
  {
    nextTxIn = LmHandlerGetDutyCycleWaitTime();
 800ba66:	f002 f98b 	bl	800dd80 <LmHandlerGetDutyCycleWaitTime>
 800ba6a:	6378      	str	r0, [r7, #52]	@ 0x34
    if (nextTxIn > 0)
 800ba6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d00b      	beq.n	800ba8a <SendTxData+0x2f6>
    {
      APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 800ba72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba74:	4a11      	ldr	r2, [pc, #68]	@ (800babc <SendTxData+0x328>)
 800ba76:	fba2 2303 	umull	r2, r3, r2, r3
 800ba7a:	099b      	lsrs	r3, r3, #6
 800ba7c:	9300      	str	r3, [sp, #0]
 800ba7e:	4b10      	ldr	r3, [pc, #64]	@ (800bac0 <SendTxData+0x32c>)
 800ba80:	2201      	movs	r2, #1
 800ba82:	2100      	movs	r1, #0
 800ba84:	2001      	movs	r0, #1
 800ba86:	f012 feb5 	bl	801e7f4 <UTIL_ADV_TRACE_COND_FSend>
    }
  }

  if (EventType == TX_ON_TIMER)
 800ba8a:	4b0e      	ldr	r3, [pc, #56]	@ (800bac4 <SendTxData+0x330>)
 800ba8c:	781b      	ldrb	r3, [r3, #0]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d10f      	bne.n	800bab2 <SendTxData+0x31e>
  {
    UTIL_TIMER_Stop(&TxTimer);
 800ba92:	480d      	ldr	r0, [pc, #52]	@ (800bac8 <SendTxData+0x334>)
 800ba94:	f012 fca4 	bl	801e3e0 <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 800ba98:	4b0c      	ldr	r3, [pc, #48]	@ (800bacc <SendTxData+0x338>)
 800ba9a:	681a      	ldr	r2, [r3, #0]
 800ba9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba9e:	4293      	cmp	r3, r2
 800baa0:	bf38      	it	cc
 800baa2:	4613      	movcc	r3, r2
 800baa4:	4619      	mov	r1, r3
 800baa6:	4808      	ldr	r0, [pc, #32]	@ (800bac8 <SendTxData+0x334>)
 800baa8:	f012 fd0a 	bl	801e4c0 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 800baac:	4806      	ldr	r0, [pc, #24]	@ (800bac8 <SendTxData+0x334>)
 800baae:	f012 fc29 	bl	801e304 <UTIL_TIMER_Start>
  }

  /* USER CODE END SendTxData_1 */
}
 800bab2:	bf00      	nop
 800bab4:	373c      	adds	r7, #60	@ 0x3c
 800bab6:	46bd      	mov	sp, r7
 800bab8:	bd90      	pop	{r4, r7, pc}
 800baba:	bf00      	nop
 800babc:	10624dd3 	.word	0x10624dd3
 800bac0:	0801f02c 	.word	0x0801f02c
 800bac4:	20000388 	.word	0x20000388
 800bac8:	2000038c 	.word	0x2000038c
 800bacc:	2000008c 	.word	0x2000008c

0800bad0 <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b082      	sub	sp, #8
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800bad8:	2100      	movs	r1, #0
 800bada:	2002      	movs	r0, #2
 800badc:	f012 fb5c 	bl	801e198 <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 800bae0:	4803      	ldr	r0, [pc, #12]	@ (800baf0 <OnTxTimerEvent+0x20>)
 800bae2:	f012 fc0f 	bl	801e304 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 800bae6:	bf00      	nop
 800bae8:	3708      	adds	r7, #8
 800baea:	46bd      	mov	sp, r7
 800baec:	bd80      	pop	{r7, pc}
 800baee:	bf00      	nop
 800baf0:	2000038c 	.word	0x2000038c

0800baf4 <OnTxTimerLedEvent>:

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerLedEvent(void *context)
{
 800baf4:	b480      	push	{r7}
 800baf6:	b083      	sub	sp, #12
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
#if 0	// XXX: No LED available
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
}
 800bafc:	bf00      	nop
 800bafe:	370c      	adds	r7, #12
 800bb00:	46bd      	mov	sp, r7
 800bb02:	bc80      	pop	{r7}
 800bb04:	4770      	bx	lr

0800bb06 <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{
 800bb06:	b480      	push	{r7}
 800bb08:	b083      	sub	sp, #12
 800bb0a:	af00      	add	r7, sp, #0
 800bb0c:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
#endif
}
 800bb0e:	bf00      	nop
 800bb10:	370c      	adds	r7, #12
 800bb12:	46bd      	mov	sp, r7
 800bb14:	bc80      	pop	{r7}
 800bb16:	4770      	bx	lr

0800bb18 <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{
 800bb18:	b480      	push	{r7}
 800bb1a:	b083      	sub	sp, #12
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
#endif
}
 800bb20:	bf00      	nop
 800bb22:	370c      	adds	r7, #12
 800bb24:	46bd      	mov	sp, r7
 800bb26:	bc80      	pop	{r7}
 800bb28:	4770      	bx	lr
	...

0800bb2c <OnTxData>:

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b086      	sub	sp, #24
 800bb30:	af04      	add	r7, sp, #16
 800bb32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d041      	beq.n	800bbbe <OnTxData+0x92>
  {
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	781b      	ldrb	r3, [r3, #0]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d03d      	beq.n	800bbbe <OnTxData+0x92>
    {
#if 0	// XXX: No LED available
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif
      UTIL_TIMER_Start(&TxLedTimer);
 800bb42:	4821      	ldr	r0, [pc, #132]	@ (800bbc8 <OnTxData+0x9c>)
 800bb44:	f012 fbde 	bl	801e304 <UTIL_TIMER_Start>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 800bb48:	4b20      	ldr	r3, [pc, #128]	@ (800bbcc <OnTxData+0xa0>)
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	2100      	movs	r1, #0
 800bb4e:	2002      	movs	r0, #2
 800bb50:	f012 fe50 	bl	801e7f4 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	68db      	ldr	r3, [r3, #12]
 800bb58:	687a      	ldr	r2, [r7, #4]
 800bb5a:	7c12      	ldrb	r2, [r2, #16]
 800bb5c:	4611      	mov	r1, r2
 800bb5e:	687a      	ldr	r2, [r7, #4]
 800bb60:	f992 200a 	ldrsb.w	r2, [r2, #10]
 800bb64:	4610      	mov	r0, r2
 800bb66:	687a      	ldr	r2, [r7, #4]
 800bb68:	f992 2018 	ldrsb.w	r2, [r2, #24]
 800bb6c:	9203      	str	r2, [sp, #12]
 800bb6e:	9002      	str	r0, [sp, #8]
 800bb70:	9101      	str	r1, [sp, #4]
 800bb72:	9300      	str	r3, [sp, #0]
 800bb74:	4b16      	ldr	r3, [pc, #88]	@ (800bbd0 <OnTxData+0xa4>)
 800bb76:	2200      	movs	r2, #0
 800bb78:	2100      	movs	r1, #0
 800bb7a:	2003      	movs	r0, #3
 800bb7c:	f012 fe3a 	bl	801e7f4 <UTIL_ADV_TRACE_COND_FSend>
              params->AppData.Port, params->Datarate, params->TxPower);

      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 800bb80:	4b14      	ldr	r3, [pc, #80]	@ (800bbd4 <OnTxData+0xa8>)
 800bb82:	2200      	movs	r2, #0
 800bb84:	2100      	movs	r1, #0
 800bb86:	2003      	movs	r0, #3
 800bb88:	f012 fe34 	bl	801e7f4 <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	7a1b      	ldrb	r3, [r3, #8]
 800bb90:	2b01      	cmp	r3, #1
 800bb92:	d10e      	bne.n	800bbb2 <OnTxData+0x86>
      {
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	7a5b      	ldrb	r3, [r3, #9]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d001      	beq.n	800bba0 <OnTxData+0x74>
 800bb9c:	4b0e      	ldr	r3, [pc, #56]	@ (800bbd8 <OnTxData+0xac>)
 800bb9e:	e000      	b.n	800bba2 <OnTxData+0x76>
 800bba0:	4b0e      	ldr	r3, [pc, #56]	@ (800bbdc <OnTxData+0xb0>)
 800bba2:	9300      	str	r3, [sp, #0]
 800bba4:	4b0e      	ldr	r3, [pc, #56]	@ (800bbe0 <OnTxData+0xb4>)
 800bba6:	2200      	movs	r2, #0
 800bba8:	2100      	movs	r1, #0
 800bbaa:	2003      	movs	r0, #3
 800bbac:	f012 fe22 	bl	801e7f4 <UTIL_ADV_TRACE_COND_FSend>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
      }
    }
  }
  /* USER CODE END OnTxData_1 */
}
 800bbb0:	e005      	b.n	800bbbe <OnTxData+0x92>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 800bbb2:	4b0c      	ldr	r3, [pc, #48]	@ (800bbe4 <OnTxData+0xb8>)
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	2100      	movs	r1, #0
 800bbb8:	2003      	movs	r0, #3
 800bbba:	f012 fe1b 	bl	801e7f4 <UTIL_ADV_TRACE_COND_FSend>
}
 800bbbe:	bf00      	nop
 800bbc0:	3708      	adds	r7, #8
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	bd80      	pop	{r7, pc}
 800bbc6:	bf00      	nop
 800bbc8:	200004b0 	.word	0x200004b0
 800bbcc:	0801f04c 	.word	0x0801f04c
 800bbd0:	0801f080 	.word	0x0801f080
 800bbd4:	0801f0b4 	.word	0x0801f0b4
 800bbd8:	0801f0c4 	.word	0x0801f0c4
 800bbdc:	0801f0c8 	.word	0x0801f0c8
 800bbe0:	0801f0d0 	.word	0x0801f0d0
 800bbe4:	0801f0e4 	.word	0x0801f0e4

0800bbe8 <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b082      	sub	sp, #8
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  if (joinParams != NULL)
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d039      	beq.n	800bc6a <OnJoinRequest+0x82>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d11e      	bne.n	800bc3e <OnJoinRequest+0x56>
    {
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), CFG_SEQ_Prio_0);
 800bc00:	2100      	movs	r1, #0
 800bc02:	2004      	movs	r0, #4
 800bc04:	f012 fac8 	bl	801e198 <UTIL_SEQ_SetTask>

      UTIL_TIMER_Stop(&JoinLedTimer);
 800bc08:	481a      	ldr	r0, [pc, #104]	@ (800bc74 <OnJoinRequest+0x8c>)
 800bc0a:	f012 fbe9 	bl	801e3e0 <UTIL_TIMER_Stop>
#if 0   // XXX:
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
#endif

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 800bc0e:	4b1a      	ldr	r3, [pc, #104]	@ (800bc78 <OnJoinRequest+0x90>)
 800bc10:	2200      	movs	r2, #0
 800bc12:	2100      	movs	r1, #0
 800bc14:	2002      	movs	r0, #2
 800bc16:	f012 fded 	bl	801e7f4 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	79db      	ldrb	r3, [r3, #7]
 800bc1e:	2b01      	cmp	r3, #1
 800bc20:	d106      	bne.n	800bc30 <OnJoinRequest+0x48>
      {
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 800bc22:	4b16      	ldr	r3, [pc, #88]	@ (800bc7c <OnJoinRequest+0x94>)
 800bc24:	2200      	movs	r2, #0
 800bc26:	2100      	movs	r1, #0
 800bc28:	2002      	movs	r0, #2
 800bc2a:	f012 fde3 	bl	801e7f4 <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
      }
    }
  }
  /* USER CODE END OnJoinRequest_1 */
}
 800bc2e:	e01c      	b.n	800bc6a <OnJoinRequest+0x82>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 800bc30:	4b13      	ldr	r3, [pc, #76]	@ (800bc80 <OnJoinRequest+0x98>)
 800bc32:	2200      	movs	r2, #0
 800bc34:	2100      	movs	r1, #0
 800bc36:	2002      	movs	r0, #2
 800bc38:	f012 fddc 	bl	801e7f4 <UTIL_ADV_TRACE_COND_FSend>
}
 800bc3c:	e015      	b.n	800bc6a <OnJoinRequest+0x82>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 800bc3e:	4b11      	ldr	r3, [pc, #68]	@ (800bc84 <OnJoinRequest+0x9c>)
 800bc40:	2200      	movs	r2, #0
 800bc42:	2100      	movs	r1, #0
 800bc44:	2002      	movs	r0, #2
 800bc46:	f012 fdd5 	bl	801e7f4 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_OTAA) {
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	79db      	ldrb	r3, [r3, #7]
 800bc4e:	2b02      	cmp	r3, #2
 800bc50:	d10b      	bne.n	800bc6a <OnJoinRequest+0x82>
          APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = RE-TRYING OTAA JOIN\r\n");
 800bc52:	4b0d      	ldr	r3, [pc, #52]	@ (800bc88 <OnJoinRequest+0xa0>)
 800bc54:	2200      	movs	r2, #0
 800bc56:	2100      	movs	r1, #0
 800bc58:	2002      	movs	r0, #2
 800bc5a:	f012 fdcb 	bl	801e7f4 <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
 800bc5e:	4b0b      	ldr	r3, [pc, #44]	@ (800bc8c <OnJoinRequest+0xa4>)
 800bc60:	781b      	ldrb	r3, [r3, #0]
 800bc62:	2101      	movs	r1, #1
 800bc64:	4618      	mov	r0, r3
 800bc66:	f002 f895 	bl	800dd94 <LmHandlerJoin>
}
 800bc6a:	bf00      	nop
 800bc6c:	3708      	adds	r7, #8
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	bd80      	pop	{r7, pc}
 800bc72:	bf00      	nop
 800bc74:	200004e0 	.word	0x200004e0
 800bc78:	0801f0f4 	.word	0x0801f0f4
 800bc7c:	0801f10c 	.word	0x0801f10c
 800bc80:	0801f12c 	.word	0x0801f12c
 800bc84:	0801f14c 	.word	0x0801f14c
 800bc88:	0801f168 	.word	0x0801f168
 800bc8c:	20000024 	.word	0x20000024

0800bc90 <OnBeaconStatusChange>:

static void OnBeaconStatusChange(LmHandlerBeaconParams_t *params)
{
 800bc90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc92:	b093      	sub	sp, #76	@ 0x4c
 800bc94:	af0c      	add	r7, sp, #48	@ 0x30
 800bc96:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN OnBeaconStatusChange_1 */
  if (params != NULL)
 800bc98:	697b      	ldr	r3, [r7, #20]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d056      	beq.n	800bd4c <OnBeaconStatusChange+0xbc>
  {
    switch (params->State)
 800bc9e:	697b      	ldr	r3, [r7, #20]
 800bca0:	785b      	ldrb	r3, [r3, #1]
 800bca2:	2b02      	cmp	r3, #2
 800bca4:	d008      	beq.n	800bcb8 <OnBeaconStatusChange+0x28>
 800bca6:	2b03      	cmp	r3, #3
 800bca8:	d049      	beq.n	800bd3e <OnBeaconStatusChange+0xae>
    {
      default:
      case LORAMAC_HANDLER_BEACON_LOST:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 800bcaa:	4b2a      	ldr	r3, [pc, #168]	@ (800bd54 <OnBeaconStatusChange+0xc4>)
 800bcac:	2200      	movs	r2, #0
 800bcae:	2100      	movs	r1, #0
 800bcb0:	2002      	movs	r0, #2
 800bcb2:	f012 fd9f 	bl	801e7f4 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800bcb6:	e049      	b.n	800bd4c <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_RX:
      {
        APP_LOG(TS_OFF, VLEVEL_M,
 800bcb8:	697b      	ldr	r3, [r7, #20]
 800bcba:	7c1b      	ldrb	r3, [r3, #16]
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	697b      	ldr	r3, [r7, #20]
 800bcc0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800bcc4:	461c      	mov	r4, r3
 800bcc6:	697b      	ldr	r3, [r7, #20]
 800bcc8:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800bccc:	461d      	mov	r5, r3
 800bcce:	697b      	ldr	r3, [r7, #20]
 800bcd0:	68db      	ldr	r3, [r3, #12]
 800bcd2:	697a      	ldr	r2, [r7, #20]
 800bcd4:	6852      	ldr	r2, [r2, #4]
 800bcd6:	6979      	ldr	r1, [r7, #20]
 800bcd8:	7d89      	ldrb	r1, [r1, #22]
 800bcda:	460e      	mov	r6, r1
 800bcdc:	6979      	ldr	r1, [r7, #20]
 800bcde:	7dc9      	ldrb	r1, [r1, #23]
 800bce0:	6139      	str	r1, [r7, #16]
 800bce2:	6979      	ldr	r1, [r7, #20]
 800bce4:	7e09      	ldrb	r1, [r1, #24]
 800bce6:	60f9      	str	r1, [r7, #12]
 800bce8:	6979      	ldr	r1, [r7, #20]
 800bcea:	7e49      	ldrb	r1, [r1, #25]
 800bcec:	60b9      	str	r1, [r7, #8]
 800bcee:	6979      	ldr	r1, [r7, #20]
 800bcf0:	7e89      	ldrb	r1, [r1, #26]
 800bcf2:	6079      	str	r1, [r7, #4]
 800bcf4:	6979      	ldr	r1, [r7, #20]
 800bcf6:	7ec9      	ldrb	r1, [r1, #27]
 800bcf8:	6039      	str	r1, [r7, #0]
 800bcfa:	6979      	ldr	r1, [r7, #20]
 800bcfc:	7f09      	ldrb	r1, [r1, #28]
 800bcfe:	910b      	str	r1, [sp, #44]	@ 0x2c
 800bd00:	f8d7 c000 	ldr.w	ip, [r7]
 800bd04:	f8cd c028 	str.w	ip, [sp, #40]	@ 0x28
 800bd08:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800bd0c:	f8cd c024 	str.w	ip, [sp, #36]	@ 0x24
 800bd10:	f8d7 c008 	ldr.w	ip, [r7, #8]
 800bd14:	f8cd c020 	str.w	ip, [sp, #32]
 800bd18:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 800bd1c:	f8cd c01c 	str.w	ip, [sp, #28]
 800bd20:	6939      	ldr	r1, [r7, #16]
 800bd22:	9106      	str	r1, [sp, #24]
 800bd24:	9605      	str	r6, [sp, #20]
 800bd26:	9204      	str	r2, [sp, #16]
 800bd28:	9303      	str	r3, [sp, #12]
 800bd2a:	9502      	str	r5, [sp, #8]
 800bd2c:	9401      	str	r4, [sp, #4]
 800bd2e:	9000      	str	r0, [sp, #0]
 800bd30:	4b09      	ldr	r3, [pc, #36]	@ (800bd58 <OnBeaconStatusChange+0xc8>)
 800bd32:	2200      	movs	r2, #0
 800bd34:	2100      	movs	r1, #0
 800bd36:	2002      	movs	r0, #2
 800bd38:	f012 fd5c 	bl	801e7f4 <UTIL_ADV_TRACE_COND_FSend>
                params->Info.Datarate, params->Info.Rssi, params->Info.Snr, params->Info.Frequency,
                params->Info.Time.Seconds, params->Info.GwSpecific.InfoDesc,
                params->Info.GwSpecific.Info[0], params->Info.GwSpecific.Info[1],
                params->Info.GwSpecific.Info[2], params->Info.GwSpecific.Info[3],
                params->Info.GwSpecific.Info[4], params->Info.GwSpecific.Info[5]);
        break;
 800bd3c:	e006      	b.n	800bd4c <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_NRX:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 800bd3e:	4b07      	ldr	r3, [pc, #28]	@ (800bd5c <OnBeaconStatusChange+0xcc>)
 800bd40:	2200      	movs	r2, #0
 800bd42:	2100      	movs	r1, #0
 800bd44:	2002      	movs	r0, #2
 800bd46:	f012 fd55 	bl	801e7f4 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800bd4a:	bf00      	nop
      }
    }
  }
  /* USER CODE END OnBeaconStatusChange_1 */
}
 800bd4c:	bf00      	nop
 800bd4e:	371c      	adds	r7, #28
 800bd50:	46bd      	mov	sp, r7
 800bd52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd54:	0801f18c 	.word	0x0801f18c
 800bd58:	0801f1a4 	.word	0x0801f1a4
 800bd5c:	0801f218 	.word	0x0801f218

0800bd60 <OnSysTimeUpdate>:

static void OnSysTimeUpdate(void)
{
 800bd60:	b480      	push	{r7}
 800bd62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSysTimeUpdate_1 */

  /* USER CODE END OnSysTimeUpdate_1 */
}
 800bd64:	bf00      	nop
 800bd66:	46bd      	mov	sp, r7
 800bd68:	bc80      	pop	{r7}
 800bd6a:	4770      	bx	lr

0800bd6c <OnClassChange>:

static void OnClassChange(DeviceClass_t deviceClass)
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b084      	sub	sp, #16
 800bd70:	af02      	add	r7, sp, #8
 800bd72:	4603      	mov	r3, r0
 800bd74:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnClassChange_1 */
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800bd76:	79fb      	ldrb	r3, [r7, #7]
 800bd78:	4a06      	ldr	r2, [pc, #24]	@ (800bd94 <OnClassChange+0x28>)
 800bd7a:	5cd3      	ldrb	r3, [r2, r3]
 800bd7c:	9300      	str	r3, [sp, #0]
 800bd7e:	4b06      	ldr	r3, [pc, #24]	@ (800bd98 <OnClassChange+0x2c>)
 800bd80:	2200      	movs	r2, #0
 800bd82:	2100      	movs	r1, #0
 800bd84:	2002      	movs	r0, #2
 800bd86:	f012 fd35 	bl	801e7f4 <UTIL_ADV_TRACE_COND_FSend>
  /* USER CODE END OnClassChange_1 */
}
 800bd8a:	bf00      	nop
 800bd8c:	3708      	adds	r7, #8
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	bd80      	pop	{r7, pc}
 800bd92:	bf00      	nop
 800bd94:	0801f254 	.word	0x0801f254
 800bd98:	0801f238 	.word	0x0801f238

0800bd9c <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800bda0:	2100      	movs	r1, #0
 800bda2:	2001      	movs	r0, #1
 800bda4:	f012 f9f8 	bl	801e198 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800bda8:	bf00      	nop
 800bdaa:	bd80      	pop	{r7, pc}

0800bdac <OnTxPeriodicityChanged>:

static void OnTxPeriodicityChanged(uint32_t periodicity)
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b082      	sub	sp, #8
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxPeriodicityChanged_1 */

  /* USER CODE END OnTxPeriodicityChanged_1 */
  TxPeriodicity = periodicity;
 800bdb4:	4a0d      	ldr	r2, [pc, #52]	@ (800bdec <OnTxPeriodicityChanged+0x40>)
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	6013      	str	r3, [r2, #0]

  if (TxPeriodicity == 0)
 800bdba:	4b0c      	ldr	r3, [pc, #48]	@ (800bdec <OnTxPeriodicityChanged+0x40>)
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d103      	bne.n	800bdca <OnTxPeriodicityChanged+0x1e>
  {
    /* Revert to application default periodicity */
    TxPeriodicity = APP_TX_DUTYCYCLE;
 800bdc2:	4b0a      	ldr	r3, [pc, #40]	@ (800bdec <OnTxPeriodicityChanged+0x40>)
 800bdc4:	f242 7210 	movw	r2, #10000	@ 0x2710
 800bdc8:	601a      	str	r2, [r3, #0]
  }

  /* Update timer periodicity */
  UTIL_TIMER_Stop(&TxTimer);
 800bdca:	4809      	ldr	r0, [pc, #36]	@ (800bdf0 <OnTxPeriodicityChanged+0x44>)
 800bdcc:	f012 fb08 	bl	801e3e0 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 800bdd0:	4b06      	ldr	r3, [pc, #24]	@ (800bdec <OnTxPeriodicityChanged+0x40>)
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	4619      	mov	r1, r3
 800bdd6:	4806      	ldr	r0, [pc, #24]	@ (800bdf0 <OnTxPeriodicityChanged+0x44>)
 800bdd8:	f012 fb72 	bl	801e4c0 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 800bddc:	4804      	ldr	r0, [pc, #16]	@ (800bdf0 <OnTxPeriodicityChanged+0x44>)
 800bdde:	f012 fa91 	bl	801e304 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxPeriodicityChanged_2 */

  /* USER CODE END OnTxPeriodicityChanged_2 */
}
 800bde2:	bf00      	nop
 800bde4:	3708      	adds	r7, #8
 800bde6:	46bd      	mov	sp, r7
 800bde8:	bd80      	pop	{r7, pc}
 800bdea:	bf00      	nop
 800bdec:	2000008c 	.word	0x2000008c
 800bdf0:	2000038c 	.word	0x2000038c

0800bdf4 <OnTxFrameCtrlChanged>:

static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
 800bdf4:	b480      	push	{r7}
 800bdf6:	b083      	sub	sp, #12
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	4603      	mov	r3, r0
 800bdfc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800bdfe:	4a04      	ldr	r2, [pc, #16]	@ (800be10 <OnTxFrameCtrlChanged+0x1c>)
 800be00:	79fb      	ldrb	r3, [r7, #7]
 800be02:	70d3      	strb	r3, [r2, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 800be04:	bf00      	nop
 800be06:	370c      	adds	r7, #12
 800be08:	46bd      	mov	sp, r7
 800be0a:	bc80      	pop	{r7}
 800be0c:	4770      	bx	lr
 800be0e:	bf00      	nop
 800be10:	20000074 	.word	0x20000074

0800be14 <OnPingSlotPeriodicityChanged>:

static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
 800be14:	b480      	push	{r7}
 800be16:	b083      	sub	sp, #12
 800be18:	af00      	add	r7, sp, #0
 800be1a:	4603      	mov	r3, r0
 800be1c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800be1e:	4a04      	ldr	r2, [pc, #16]	@ (800be30 <OnPingSlotPeriodicityChanged+0x1c>)
 800be20:	79fb      	ldrb	r3, [r7, #7]
 800be22:	7413      	strb	r3, [r2, #16]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 800be24:	bf00      	nop
 800be26:	370c      	adds	r7, #12
 800be28:	46bd      	mov	sp, r7
 800be2a:	bc80      	pop	{r7}
 800be2c:	4770      	bx	lr
 800be2e:	bf00      	nop
 800be30:	20000074 	.word	0x20000074

0800be34 <OnSystemReset>:

static void OnSystemReset(void)
{
 800be34:	b580      	push	{r7, lr}
 800be36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSystemReset_1 */

  /* USER CODE END OnSystemReset_1 */
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800be38:	f002 fda5 	bl	800e986 <LmHandlerHalt>
 800be3c:	4603      	mov	r3, r0
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d106      	bne.n	800be50 <OnSystemReset+0x1c>
 800be42:	f002 f849 	bl	800ded8 <LmHandlerJoinStatus>
 800be46:	4603      	mov	r3, r0
 800be48:	2b01      	cmp	r3, #1
 800be4a:	d101      	bne.n	800be50 <OnSystemReset+0x1c>
  {
    NVIC_SystemReset();
 800be4c:	f7ff fae2 	bl	800b414 <__NVIC_SystemReset>
  }
  /* USER CODE BEGIN OnSystemReset_Last */

  /* USER CODE END OnSystemReset_Last */
}
 800be50:	bf00      	nop
 800be52:	bd80      	pop	{r7, pc}

0800be54 <StopJoin>:

static void StopJoin(void)
{
 800be54:	b580      	push	{r7, lr}
 800be56:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif

  /* USER CODE END StopJoin_1 */

  UTIL_TIMER_Stop(&TxTimer);
 800be58:	4817      	ldr	r0, [pc, #92]	@ (800beb8 <StopJoin+0x64>)
 800be5a:	f012 fac1 	bl	801e3e0 <UTIL_TIMER_Stop>

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 800be5e:	f002 fd85 	bl	800e96c <LmHandlerStop>
 800be62:	4603      	mov	r3, r0
 800be64:	2b00      	cmp	r3, #0
 800be66:	d006      	beq.n	800be76 <StopJoin+0x22>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 800be68:	4b14      	ldr	r3, [pc, #80]	@ (800bebc <StopJoin+0x68>)
 800be6a:	2200      	movs	r2, #0
 800be6c:	2100      	movs	r1, #0
 800be6e:	2002      	movs	r0, #2
 800be70:	f012 fcc0 	bl	801e7f4 <UTIL_ADV_TRACE_COND_FSend>
 800be74:	e01a      	b.n	800beac <StopJoin+0x58>
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 800be76:	4b12      	ldr	r3, [pc, #72]	@ (800bec0 <StopJoin+0x6c>)
 800be78:	2200      	movs	r2, #0
 800be7a:	2100      	movs	r1, #0
 800be7c:	2002      	movs	r0, #2
 800be7e:	f012 fcb9 	bl	801e7f4 <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_OTAA;
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to OTAA mode\r\n");
    }
    else
    {
      ActivationType = ACTIVATION_TYPE_ABP;
 800be82:	4b10      	ldr	r3, [pc, #64]	@ (800bec4 <StopJoin+0x70>)
 800be84:	2201      	movs	r2, #1
 800be86:	701a      	strb	r2, [r3, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 800be88:	4b0f      	ldr	r3, [pc, #60]	@ (800bec8 <StopJoin+0x74>)
 800be8a:	2200      	movs	r2, #0
 800be8c:	2100      	movs	r1, #0
 800be8e:	2002      	movs	r0, #2
 800be90:	f012 fcb0 	bl	801e7f4 <UTIL_ADV_TRACE_COND_FSend>
    }
    LmHandlerConfigure(&LmHandlerParams);
 800be94:	480d      	ldr	r0, [pc, #52]	@ (800becc <StopJoin+0x78>)
 800be96:	f001 fe25 	bl	800dae4 <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 800be9a:	4b0a      	ldr	r3, [pc, #40]	@ (800bec4 <StopJoin+0x70>)
 800be9c:	781b      	ldrb	r3, [r3, #0]
 800be9e:	2101      	movs	r1, #1
 800bea0:	4618      	mov	r0, r3
 800bea2:	f001 ff77 	bl	800dd94 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 800bea6:	4804      	ldr	r0, [pc, #16]	@ (800beb8 <StopJoin+0x64>)
 800bea8:	f012 fa2c 	bl	801e304 <UTIL_TIMER_Start>
  }
  UTIL_TIMER_Start(&StopJoinTimer);
 800beac:	4808      	ldr	r0, [pc, #32]	@ (800bed0 <StopJoin+0x7c>)
 800beae:	f012 fa29 	bl	801e304 <UTIL_TIMER_Start>
  /* USER CODE BEGIN StopJoin_Last */

  /* USER CODE END StopJoin_Last */
}
 800beb2:	bf00      	nop
 800beb4:	bd80      	pop	{r7, pc}
 800beb6:	bf00      	nop
 800beb8:	2000038c 	.word	0x2000038c
 800bebc:	0801f258 	.word	0x0801f258
 800bec0:	0801f278 	.word	0x0801f278
 800bec4:	20000024 	.word	0x20000024
 800bec8:	0801f28c 	.word	0x0801f28c
 800becc:	20000074 	.word	0x20000074
 800bed0:	200003a4 	.word	0x200003a4

0800bed4 <OnStopJoinTimerEvent>:

static void OnStopJoinTimerEvent(void *context)
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b082      	sub	sp, #8
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnStopJoinTimerEvent_1 */

  /* USER CODE END OnStopJoinTimerEvent_1 */
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 800bedc:	4b05      	ldr	r3, [pc, #20]	@ (800bef4 <OnStopJoinTimerEvent+0x20>)
 800bede:	781b      	ldrb	r3, [r3, #0]
 800bee0:	2b02      	cmp	r3, #2
 800bee2:	d103      	bne.n	800beec <OnStopJoinTimerEvent+0x18>
  {
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 800bee4:	2100      	movs	r1, #0
 800bee6:	2008      	movs	r0, #8
 800bee8:	f012 f956 	bl	801e198 <UTIL_SEQ_SetTask>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
  /* USER CODE END OnStopJoinTimerEvent_Last */
}
 800beec:	bf00      	nop
 800beee:	3708      	adds	r7, #8
 800bef0:	46bd      	mov	sp, r7
 800bef2:	bd80      	pop	{r7, pc}
 800bef4:	20000024 	.word	0x20000024

0800bef8 <StoreContext>:

static void StoreContext(void)
{
 800bef8:	b580      	push	{r7, lr}
 800befa:	b082      	sub	sp, #8
 800befc:	af00      	add	r7, sp, #0
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800befe:	23ff      	movs	r3, #255	@ 0xff
 800bf00:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN StoreContext_1 */

  /* USER CODE END StoreContext_1 */
  status = LmHandlerNvmDataStore();
 800bf02:	f002 fd75 	bl	800e9f0 <LmHandlerNvmDataStore>
 800bf06:	4603      	mov	r3, r0
 800bf08:	71fb      	strb	r3, [r7, #7]

  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 800bf0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bf0e:	f113 0f08 	cmn.w	r3, #8
 800bf12:	d106      	bne.n	800bf22 <StoreContext+0x2a>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 800bf14:	4b0a      	ldr	r3, [pc, #40]	@ (800bf40 <StoreContext+0x48>)
 800bf16:	2200      	movs	r2, #0
 800bf18:	2100      	movs	r1, #0
 800bf1a:	2002      	movs	r0, #2
 800bf1c:	f012 fc6a 	bl	801e7f4 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
  }
  /* USER CODE BEGIN StoreContext_Last */

  /* USER CODE END StoreContext_Last */
}
 800bf20:	e00a      	b.n	800bf38 <StoreContext+0x40>
  else if (status == LORAMAC_HANDLER_ERROR)
 800bf22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bf26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf2a:	d105      	bne.n	800bf38 <StoreContext+0x40>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 800bf2c:	4b05      	ldr	r3, [pc, #20]	@ (800bf44 <StoreContext+0x4c>)
 800bf2e:	2200      	movs	r2, #0
 800bf30:	2100      	movs	r1, #0
 800bf32:	2002      	movs	r0, #2
 800bf34:	f012 fc5e 	bl	801e7f4 <UTIL_ADV_TRACE_COND_FSend>
}
 800bf38:	bf00      	nop
 800bf3a:	3708      	adds	r7, #8
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	bd80      	pop	{r7, pc}
 800bf40:	0801f2ac 	.word	0x0801f2ac
 800bf44:	0801f2c4 	.word	0x0801f2c4

0800bf48 <OnNvmDataChange>:

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b082      	sub	sp, #8
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	4603      	mov	r3, r0
 800bf50:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 800bf52:	79fb      	ldrb	r3, [r7, #7]
 800bf54:	2b01      	cmp	r3, #1
 800bf56:	d106      	bne.n	800bf66 <OnNvmDataChange+0x1e>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 800bf58:	4b08      	ldr	r3, [pc, #32]	@ (800bf7c <OnNvmDataChange+0x34>)
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	2100      	movs	r1, #0
 800bf5e:	2002      	movs	r0, #2
 800bf60:	f012 fc48 	bl	801e7f4 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 800bf64:	e005      	b.n	800bf72 <OnNvmDataChange+0x2a>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 800bf66:	4b06      	ldr	r3, [pc, #24]	@ (800bf80 <OnNvmDataChange+0x38>)
 800bf68:	2200      	movs	r2, #0
 800bf6a:	2100      	movs	r1, #0
 800bf6c:	2002      	movs	r0, #2
 800bf6e:	f012 fc41 	bl	801e7f4 <UTIL_ADV_TRACE_COND_FSend>
}
 800bf72:	bf00      	nop
 800bf74:	3708      	adds	r7, #8
 800bf76:	46bd      	mov	sp, r7
 800bf78:	bd80      	pop	{r7, pc}
 800bf7a:	bf00      	nop
 800bf7c:	0801f2dc 	.word	0x0801f2dc
 800bf80:	0801f2f0 	.word	0x0801f2f0

0800bf84 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b082      	sub	sp, #8
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
 800bf8c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (FLASH_IF_Erase(LORAWAN_NVM_BASE_ADDRESS, FLASH_PAGE_SIZE) == FLASH_IF_OK)
 800bf8e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800bf92:	4807      	ldr	r0, [pc, #28]	@ (800bfb0 <OnStoreContextRequest+0x2c>)
 800bf94:	f7f5 fd82 	bl	8001a9c <FLASH_IF_Erase>
 800bf98:	4603      	mov	r3, r0
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d104      	bne.n	800bfa8 <OnStoreContextRequest+0x24>
  {
    FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void *)nvm, nvm_size);
 800bf9e:	683a      	ldr	r2, [r7, #0]
 800bfa0:	6879      	ldr	r1, [r7, #4]
 800bfa2:	4803      	ldr	r0, [pc, #12]	@ (800bfb0 <OnStoreContextRequest+0x2c>)
 800bfa4:	f7f5 fd2a 	bl	80019fc <FLASH_IF_Write>
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 800bfa8:	bf00      	nop
 800bfaa:	3708      	adds	r7, #8
 800bfac:	46bd      	mov	sp, r7
 800bfae:	bd80      	pop	{r7, pc}
 800bfb0:	0803f000 	.word	0x0803f000

0800bfb4 <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b082      	sub	sp, #8
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
 800bfbc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  FLASH_IF_Read(nvm, LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 800bfbe:	683a      	ldr	r2, [r7, #0]
 800bfc0:	4903      	ldr	r1, [pc, #12]	@ (800bfd0 <OnRestoreContextRequest+0x1c>)
 800bfc2:	6878      	ldr	r0, [r7, #4]
 800bfc4:	f7f5 fd42 	bl	8001a4c <FLASH_IF_Read>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 800bfc8:	bf00      	nop
 800bfca:	3708      	adds	r7, #8
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	bd80      	pop	{r7, pc}
 800bfd0:	0803f000 	.word	0x0803f000

0800bfd4 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	af00      	add	r7, sp, #0
  loraInfo.ContextManagement = 0;
 800bfd8:	4b18      	ldr	r3, [pc, #96]	@ (800c03c <LoraInfo_Init+0x68>)
 800bfda:	2200      	movs	r2, #0
 800bfdc:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800bfde:	4b17      	ldr	r3, [pc, #92]	@ (800c03c <LoraInfo_Init+0x68>)
 800bfe0:	2200      	movs	r2, #0
 800bfe2:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800bfe4:	4b15      	ldr	r3, [pc, #84]	@ (800c03c <LoraInfo_Init+0x68>)
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800bfea:	4b14      	ldr	r3, [pc, #80]	@ (800c03c <LoraInfo_Init+0x68>)
 800bfec:	2200      	movs	r2, #0
 800bfee:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868);
 800bff0:	4b12      	ldr	r3, [pc, #72]	@ (800c03c <LoraInfo_Init+0x68>)
 800bff2:	685b      	ldr	r3, [r3, #4]
 800bff4:	f043 0320 	orr.w	r3, r3, #32
 800bff8:	4a10      	ldr	r2, [pc, #64]	@ (800c03c <LoraInfo_Init+0x68>)
 800bffa:	6053      	str	r3, [r2, #4]
#endif /* REGION_KR920 */
#ifdef  REGION_IN865
  loraInfo.Region |= (1 << LORAMAC_REGION_IN865);
#endif /* REGION_IN865 */
#ifdef  REGION_US915
  loraInfo.Region |= (1 << LORAMAC_REGION_US915);
 800bffc:	4b0f      	ldr	r3, [pc, #60]	@ (800c03c <LoraInfo_Init+0x68>)
 800bffe:	685b      	ldr	r3, [r3, #4]
 800c000:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c004:	4a0d      	ldr	r2, [pc, #52]	@ (800c03c <LoraInfo_Init+0x68>)
 800c006:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864);
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800c008:	4b0c      	ldr	r3, [pc, #48]	@ (800c03c <LoraInfo_Init+0x68>)
 800c00a:	685b      	ldr	r3, [r3, #4]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d10d      	bne.n	800c02c <LoraInfo_Init+0x58>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800c010:	4b0b      	ldr	r3, [pc, #44]	@ (800c040 <LoraInfo_Init+0x6c>)
 800c012:	2200      	movs	r2, #0
 800c014:	2100      	movs	r1, #0
 800c016:	2000      	movs	r0, #0
 800c018:	f012 fbec 	bl	801e7f4 <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800c01c:	bf00      	nop
 800c01e:	f012 fbd7 	bl	801e7d0 <UTIL_ADV_TRACE_IsBufferEmpty>
 800c022:	4603      	mov	r3, r0
 800c024:	2b01      	cmp	r3, #1
 800c026:	d1fa      	bne.n	800c01e <LoraInfo_Init+0x4a>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800c028:	bf00      	nop
 800c02a:	e7fd      	b.n	800c028 <LoraInfo_Init+0x54>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800c02c:	4b03      	ldr	r3, [pc, #12]	@ (800c03c <LoraInfo_Init+0x68>)
 800c02e:	2200      	movs	r2, #0
 800c030:	60da      	str	r2, [r3, #12]
#endif /* LORAWAN_KMS */

#if (!defined (CONTEXT_MANAGEMENT_ENABLED) || (CONTEXT_MANAGEMENT_ENABLED == 0))
  loraInfo.ContextManagement = 0;
#else /* CONTEXT_MANAGEMENT_ENABLED == 1 */
  loraInfo.ContextManagement = 1;
 800c032:	4b02      	ldr	r3, [pc, #8]	@ (800c03c <LoraInfo_Init+0x68>)
 800c034:	2201      	movs	r2, #1
 800c036:	601a      	str	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED */

  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800c038:	bf00      	nop
 800c03a:	bd80      	pop	{r7, pc}
 800c03c:	200004f8 	.word	0x200004f8
 800c040:	0801f304 	.word	0x0801f304

0800c044 <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800c044:	b480      	push	{r7}
 800c046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800c048:	4b02      	ldr	r3, [pc, #8]	@ (800c054 <LoraInfo_GetPtr+0x10>)
}
 800c04a:	4618      	mov	r0, r3
 800c04c:	46bd      	mov	sp, r7
 800c04e:	bc80      	pop	{r7}
 800c050:	4770      	bx	lr
 800c052:	bf00      	nop
 800c054:	200004f8 	.word	0x200004f8

0800c058 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800c05c:	f7f7 f9c3 	bl	80033e6 <BSP_RADIO_Init>
 800c060:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800c062:	4618      	mov	r0, r3
 800c064:	bd80      	pop	{r7, pc}

0800c066 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800c066:	b580      	push	{r7, lr}
 800c068:	b082      	sub	sp, #8
 800c06a:	af00      	add	r7, sp, #0
 800c06c:	4603      	mov	r3, r0
 800c06e:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800c070:	79fb      	ldrb	r3, [r7, #7]
 800c072:	4618      	mov	r0, r3
 800c074:	f7f7 f9e8 	bl	8003448 <BSP_RADIO_ConfigRFSwitch>
 800c078:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800c07a:	4618      	mov	r0, r3
 800c07c:	3708      	adds	r7, #8
 800c07e:	46bd      	mov	sp, r7
 800c080:	bd80      	pop	{r7, pc}

0800c082 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800c082:	b580      	push	{r7, lr}
 800c084:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800c086:	f7f7 fa2d 	bl	80034e4 <BSP_RADIO_GetTxConfig>
 800c08a:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800c08c:	4618      	mov	r0, r3
 800c08e:	bd80      	pop	{r7, pc}

0800c090 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800c090:	b580      	push	{r7, lr}
 800c092:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 800c094:	f7f7 fa2d 	bl	80034f2 <BSP_RADIO_IsTCXO>
 800c098:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800c09a:	4618      	mov	r0, r3
 800c09c:	bd80      	pop	{r7, pc}

0800c09e <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800c09e:	b580      	push	{r7, lr}
 800c0a0:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800c0a2:	f7f7 fa2d 	bl	8003500 <BSP_RADIO_IsDCDC>
 800c0a6:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	bd80      	pop	{r7, pc}

0800c0ac <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b082      	sub	sp, #8
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	4603      	mov	r3, r0
 800c0b4:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800c0b6:	79fb      	ldrb	r3, [r7, #7]
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	f7f7 fa28 	bl	800350e <BSP_RADIO_GetRFOMaxPowerConfig>
 800c0be:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	3708      	adds	r7, #8
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	bd80      	pop	{r7, pc}

0800c0c8 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	b082      	sub	sp, #8
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	33f1      	adds	r3, #241	@ 0xf1
 800c0d4:	2210      	movs	r2, #16
 800c0d6:	2100      	movs	r1, #0
 800c0d8:	4618      	mov	r0, r3
 800c0da:	f00e f825 	bl	801a128 <memset1>
    ctx->M_n = 0;
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	2200      	movs	r2, #0
 800c0e2:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	22f0      	movs	r2, #240	@ 0xf0
 800c0ea:	2100      	movs	r1, #0
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	f00e f81b 	bl	801a128 <memset1>
}
 800c0f2:	bf00      	nop
 800c0f4:	3708      	adds	r7, #8
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	bd80      	pop	{r7, pc}

0800c0fa <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800c0fa:	b580      	push	{r7, lr}
 800c0fc:	b082      	sub	sp, #8
 800c0fe:	af00      	add	r7, sp, #0
 800c100:	6078      	str	r0, [r7, #4]
 800c102:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	461a      	mov	r2, r3
 800c108:	2110      	movs	r1, #16
 800c10a:	6838      	ldr	r0, [r7, #0]
 800c10c:	f000 fe5c 	bl	800cdc8 <lorawan_aes_set_key>
}
 800c110:	bf00      	nop
 800c112:	3708      	adds	r7, #8
 800c114:	46bd      	mov	sp, r7
 800c116:	bd80      	pop	{r7, pc}

0800c118 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b08c      	sub	sp, #48	@ 0x30
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	60f8      	str	r0, [r7, #12]
 800c120:	60b9      	str	r1, [r7, #8]
 800c122:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	f000 80a1 	beq.w	800c272 <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800c136:	f1c3 0310 	rsb	r3, r3, #16
 800c13a:	687a      	ldr	r2, [r7, #4]
 800c13c:	4293      	cmp	r3, r2
 800c13e:	bf28      	it	cs
 800c140:	4613      	movcs	r3, r2
 800c142:	627b      	str	r3, [r7, #36]	@ 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	f203 1201 	addw	r2, r3, #257	@ 0x101
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800c150:	4413      	add	r3, r2
 800c152:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c154:	b292      	uxth	r2, r2
 800c156:	68b9      	ldr	r1, [r7, #8]
 800c158:	4618      	mov	r0, r3
 800c15a:	f00d ffaa 	bl	801a0b2 <memcpy1>
        ctx->M_n += mlen;
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	f8d3 2114 	ldr.w	r2, [r3, #276]	@ 0x114
 800c164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c166:	441a      	add	r2, r3
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
        if( ctx->M_n < 16 || len == mlen )
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800c174:	2b0f      	cmp	r3, #15
 800c176:	f240 808d 	bls.w	800c294 <AES_CMAC_Update+0x17c>
 800c17a:	687a      	ldr	r2, [r7, #4]
 800c17c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c17e:	429a      	cmp	r2, r3
 800c180:	f000 8088 	beq.w	800c294 <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800c184:	2300      	movs	r3, #0
 800c186:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c188:	e015      	b.n	800c1b6 <AES_CMAC_Update+0x9e>
 800c18a:	68fa      	ldr	r2, [r7, #12]
 800c18c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c18e:	4413      	add	r3, r2
 800c190:	33f1      	adds	r3, #241	@ 0xf1
 800c192:	781a      	ldrb	r2, [r3, #0]
 800c194:	68f9      	ldr	r1, [r7, #12]
 800c196:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c198:	440b      	add	r3, r1
 800c19a:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800c19e:	781b      	ldrb	r3, [r3, #0]
 800c1a0:	4053      	eors	r3, r2
 800c1a2:	b2d9      	uxtb	r1, r3
 800c1a4:	68fa      	ldr	r2, [r7, #12]
 800c1a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1a8:	4413      	add	r3, r2
 800c1aa:	33f1      	adds	r3, #241	@ 0xf1
 800c1ac:	460a      	mov	r2, r1
 800c1ae:	701a      	strb	r2, [r3, #0]
 800c1b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1b2:	3301      	adds	r3, #1
 800c1b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c1b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1b8:	2b0f      	cmp	r3, #15
 800c1ba:	dde6      	ble.n	800c18a <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800c1c2:	f107 0314 	add.w	r3, r7, #20
 800c1c6:	2210      	movs	r2, #16
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	f00d ff72 	bl	801a0b2 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800c1ce:	68fa      	ldr	r2, [r7, #12]
 800c1d0:	f107 0114 	add.w	r1, r7, #20
 800c1d4:	f107 0314 	add.w	r3, r7, #20
 800c1d8:	4618      	mov	r0, r3
 800c1da:	f000 fed3 	bl	800cf84 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	33f1      	adds	r3, #241	@ 0xf1
 800c1e2:	f107 0114 	add.w	r1, r7, #20
 800c1e6:	2210      	movs	r2, #16
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	f00d ff62 	bl	801a0b2 <memcpy1>

        data += mlen;
 800c1ee:	68ba      	ldr	r2, [r7, #8]
 800c1f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1f2:	4413      	add	r3, r2
 800c1f4:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800c1f6:	687a      	ldr	r2, [r7, #4]
 800c1f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1fa:	1ad3      	subs	r3, r2, r3
 800c1fc:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800c1fe:	e038      	b.n	800c272 <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800c200:	2300      	movs	r3, #0
 800c202:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c204:	e013      	b.n	800c22e <AES_CMAC_Update+0x116>
 800c206:	68fa      	ldr	r2, [r7, #12]
 800c208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c20a:	4413      	add	r3, r2
 800c20c:	33f1      	adds	r3, #241	@ 0xf1
 800c20e:	781a      	ldrb	r2, [r3, #0]
 800c210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c212:	68b9      	ldr	r1, [r7, #8]
 800c214:	440b      	add	r3, r1
 800c216:	781b      	ldrb	r3, [r3, #0]
 800c218:	4053      	eors	r3, r2
 800c21a:	b2d9      	uxtb	r1, r3
 800c21c:	68fa      	ldr	r2, [r7, #12]
 800c21e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c220:	4413      	add	r3, r2
 800c222:	33f1      	adds	r3, #241	@ 0xf1
 800c224:	460a      	mov	r2, r1
 800c226:	701a      	strb	r2, [r3, #0]
 800c228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c22a:	3301      	adds	r3, #1
 800c22c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c22e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c230:	2b0f      	cmp	r3, #15
 800c232:	dde8      	ble.n	800c206 <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800c23a:	f107 0314 	add.w	r3, r7, #20
 800c23e:	2210      	movs	r2, #16
 800c240:	4618      	mov	r0, r3
 800c242:	f00d ff36 	bl	801a0b2 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800c246:	68fa      	ldr	r2, [r7, #12]
 800c248:	f107 0114 	add.w	r1, r7, #20
 800c24c:	f107 0314 	add.w	r3, r7, #20
 800c250:	4618      	mov	r0, r3
 800c252:	f000 fe97 	bl	800cf84 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	33f1      	adds	r3, #241	@ 0xf1
 800c25a:	f107 0114 	add.w	r1, r7, #20
 800c25e:	2210      	movs	r2, #16
 800c260:	4618      	mov	r0, r3
 800c262:	f00d ff26 	bl	801a0b2 <memcpy1>

        data += 16;
 800c266:	68bb      	ldr	r3, [r7, #8]
 800c268:	3310      	adds	r3, #16
 800c26a:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	3b10      	subs	r3, #16
 800c270:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	2b10      	cmp	r3, #16
 800c276:	d8c3      	bhi.n	800c200 <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800c27e:	687a      	ldr	r2, [r7, #4]
 800c280:	b292      	uxth	r2, r2
 800c282:	68b9      	ldr	r1, [r7, #8]
 800c284:	4618      	mov	r0, r3
 800c286:	f00d ff14 	bl	801a0b2 <memcpy1>
    ctx->M_n = len;
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	687a      	ldr	r2, [r7, #4]
 800c28e:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 800c292:	e000      	b.n	800c296 <AES_CMAC_Update+0x17e>
            return;
 800c294:	bf00      	nop
}
 800c296:	3730      	adds	r7, #48	@ 0x30
 800c298:	46bd      	mov	sp, r7
 800c29a:	bd80      	pop	{r7, pc}

0800c29c <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800c29c:	b580      	push	{r7, lr}
 800c29e:	b092      	sub	sp, #72	@ 0x48
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	6078      	str	r0, [r7, #4]
 800c2a4:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800c2a6:	f107 031c 	add.w	r3, r7, #28
 800c2aa:	2210      	movs	r2, #16
 800c2ac:	2100      	movs	r1, #0
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	f00d ff3a 	bl	801a128 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800c2b4:	683a      	ldr	r2, [r7, #0]
 800c2b6:	f107 011c 	add.w	r1, r7, #28
 800c2ba:	f107 031c 	add.w	r3, r7, #28
 800c2be:	4618      	mov	r0, r3
 800c2c0:	f000 fe60 	bl	800cf84 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800c2c4:	7f3b      	ldrb	r3, [r7, #28]
 800c2c6:	b25b      	sxtb	r3, r3
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	da30      	bge.n	800c32e <AES_CMAC_Final+0x92>
    {
        LSHIFT( K, K );
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	647b      	str	r3, [r7, #68]	@ 0x44
 800c2d0:	e01b      	b.n	800c30a <AES_CMAC_Final+0x6e>
 800c2d2:	f107 021c 	add.w	r2, r7, #28
 800c2d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c2d8:	4413      	add	r3, r2
 800c2da:	781b      	ldrb	r3, [r3, #0]
 800c2dc:	005b      	lsls	r3, r3, #1
 800c2de:	b25a      	sxtb	r2, r3
 800c2e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c2e2:	3301      	adds	r3, #1
 800c2e4:	3348      	adds	r3, #72	@ 0x48
 800c2e6:	443b      	add	r3, r7
 800c2e8:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800c2ec:	09db      	lsrs	r3, r3, #7
 800c2ee:	b2db      	uxtb	r3, r3
 800c2f0:	b25b      	sxtb	r3, r3
 800c2f2:	4313      	orrs	r3, r2
 800c2f4:	b25b      	sxtb	r3, r3
 800c2f6:	b2d9      	uxtb	r1, r3
 800c2f8:	f107 021c 	add.w	r2, r7, #28
 800c2fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c2fe:	4413      	add	r3, r2
 800c300:	460a      	mov	r2, r1
 800c302:	701a      	strb	r2, [r3, #0]
 800c304:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c306:	3301      	adds	r3, #1
 800c308:	647b      	str	r3, [r7, #68]	@ 0x44
 800c30a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c30c:	2b0e      	cmp	r3, #14
 800c30e:	dde0      	ble.n	800c2d2 <AES_CMAC_Final+0x36>
 800c310:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c314:	005b      	lsls	r3, r3, #1
 800c316:	b2db      	uxtb	r3, r3
 800c318:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        K[15] ^= 0x87;
 800c31c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c320:	f083 0378 	eor.w	r3, r3, #120	@ 0x78
 800c324:	43db      	mvns	r3, r3
 800c326:	b2db      	uxtb	r3, r3
 800c328:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c32c:	e027      	b.n	800c37e <AES_CMAC_Final+0xe2>
    }
    else
        LSHIFT( K, K );
 800c32e:	2300      	movs	r3, #0
 800c330:	643b      	str	r3, [r7, #64]	@ 0x40
 800c332:	e01b      	b.n	800c36c <AES_CMAC_Final+0xd0>
 800c334:	f107 021c 	add.w	r2, r7, #28
 800c338:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c33a:	4413      	add	r3, r2
 800c33c:	781b      	ldrb	r3, [r3, #0]
 800c33e:	005b      	lsls	r3, r3, #1
 800c340:	b25a      	sxtb	r2, r3
 800c342:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c344:	3301      	adds	r3, #1
 800c346:	3348      	adds	r3, #72	@ 0x48
 800c348:	443b      	add	r3, r7
 800c34a:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800c34e:	09db      	lsrs	r3, r3, #7
 800c350:	b2db      	uxtb	r3, r3
 800c352:	b25b      	sxtb	r3, r3
 800c354:	4313      	orrs	r3, r2
 800c356:	b25b      	sxtb	r3, r3
 800c358:	b2d9      	uxtb	r1, r3
 800c35a:	f107 021c 	add.w	r2, r7, #28
 800c35e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c360:	4413      	add	r3, r2
 800c362:	460a      	mov	r2, r1
 800c364:	701a      	strb	r2, [r3, #0]
 800c366:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c368:	3301      	adds	r3, #1
 800c36a:	643b      	str	r3, [r7, #64]	@ 0x40
 800c36c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c36e:	2b0e      	cmp	r3, #14
 800c370:	dde0      	ble.n	800c334 <AES_CMAC_Final+0x98>
 800c372:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c376:	005b      	lsls	r3, r3, #1
 800c378:	b2db      	uxtb	r3, r3
 800c37a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

    if( ctx->M_n == 16 )
 800c37e:	683b      	ldr	r3, [r7, #0]
 800c380:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800c384:	2b10      	cmp	r3, #16
 800c386:	d11d      	bne.n	800c3c4 <AES_CMAC_Final+0x128>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800c388:	2300      	movs	r3, #0
 800c38a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c38c:	e016      	b.n	800c3bc <AES_CMAC_Final+0x120>
 800c38e:	683a      	ldr	r2, [r7, #0]
 800c390:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c392:	4413      	add	r3, r2
 800c394:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800c398:	781a      	ldrb	r2, [r3, #0]
 800c39a:	f107 011c 	add.w	r1, r7, #28
 800c39e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c3a0:	440b      	add	r3, r1
 800c3a2:	781b      	ldrb	r3, [r3, #0]
 800c3a4:	4053      	eors	r3, r2
 800c3a6:	b2d9      	uxtb	r1, r3
 800c3a8:	683a      	ldr	r2, [r7, #0]
 800c3aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c3ac:	4413      	add	r3, r2
 800c3ae:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800c3b2:	460a      	mov	r2, r1
 800c3b4:	701a      	strb	r2, [r3, #0]
 800c3b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c3b8:	3301      	adds	r3, #1
 800c3ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c3bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c3be:	2b0f      	cmp	r3, #15
 800c3c0:	dde5      	ble.n	800c38e <AES_CMAC_Final+0xf2>
 800c3c2:	e096      	b.n	800c4f2 <AES_CMAC_Final+0x256>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800c3c4:	7f3b      	ldrb	r3, [r7, #28]
 800c3c6:	b25b      	sxtb	r3, r3
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	da30      	bge.n	800c42e <AES_CMAC_Final+0x192>
        {
            LSHIFT( K, K );
 800c3cc:	2300      	movs	r3, #0
 800c3ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c3d0:	e01b      	b.n	800c40a <AES_CMAC_Final+0x16e>
 800c3d2:	f107 021c 	add.w	r2, r7, #28
 800c3d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3d8:	4413      	add	r3, r2
 800c3da:	781b      	ldrb	r3, [r3, #0]
 800c3dc:	005b      	lsls	r3, r3, #1
 800c3de:	b25a      	sxtb	r2, r3
 800c3e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3e2:	3301      	adds	r3, #1
 800c3e4:	3348      	adds	r3, #72	@ 0x48
 800c3e6:	443b      	add	r3, r7
 800c3e8:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800c3ec:	09db      	lsrs	r3, r3, #7
 800c3ee:	b2db      	uxtb	r3, r3
 800c3f0:	b25b      	sxtb	r3, r3
 800c3f2:	4313      	orrs	r3, r2
 800c3f4:	b25b      	sxtb	r3, r3
 800c3f6:	b2d9      	uxtb	r1, r3
 800c3f8:	f107 021c 	add.w	r2, r7, #28
 800c3fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3fe:	4413      	add	r3, r2
 800c400:	460a      	mov	r2, r1
 800c402:	701a      	strb	r2, [r3, #0]
 800c404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c406:	3301      	adds	r3, #1
 800c408:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c40a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c40c:	2b0e      	cmp	r3, #14
 800c40e:	dde0      	ble.n	800c3d2 <AES_CMAC_Final+0x136>
 800c410:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c414:	005b      	lsls	r3, r3, #1
 800c416:	b2db      	uxtb	r3, r3
 800c418:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            K[15] ^= 0x87;
 800c41c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c420:	f083 0378 	eor.w	r3, r3, #120	@ 0x78
 800c424:	43db      	mvns	r3, r3
 800c426:	b2db      	uxtb	r3, r3
 800c428:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c42c:	e027      	b.n	800c47e <AES_CMAC_Final+0x1e2>
        }
        else
            LSHIFT( K, K );
 800c42e:	2300      	movs	r3, #0
 800c430:	637b      	str	r3, [r7, #52]	@ 0x34
 800c432:	e01b      	b.n	800c46c <AES_CMAC_Final+0x1d0>
 800c434:	f107 021c 	add.w	r2, r7, #28
 800c438:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c43a:	4413      	add	r3, r2
 800c43c:	781b      	ldrb	r3, [r3, #0]
 800c43e:	005b      	lsls	r3, r3, #1
 800c440:	b25a      	sxtb	r2, r3
 800c442:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c444:	3301      	adds	r3, #1
 800c446:	3348      	adds	r3, #72	@ 0x48
 800c448:	443b      	add	r3, r7
 800c44a:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800c44e:	09db      	lsrs	r3, r3, #7
 800c450:	b2db      	uxtb	r3, r3
 800c452:	b25b      	sxtb	r3, r3
 800c454:	4313      	orrs	r3, r2
 800c456:	b25b      	sxtb	r3, r3
 800c458:	b2d9      	uxtb	r1, r3
 800c45a:	f107 021c 	add.w	r2, r7, #28
 800c45e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c460:	4413      	add	r3, r2
 800c462:	460a      	mov	r2, r1
 800c464:	701a      	strb	r2, [r3, #0]
 800c466:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c468:	3301      	adds	r3, #1
 800c46a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c46c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c46e:	2b0e      	cmp	r3, #14
 800c470:	dde0      	ble.n	800c434 <AES_CMAC_Final+0x198>
 800c472:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c476:	005b      	lsls	r3, r3, #1
 800c478:	b2db      	uxtb	r3, r3
 800c47a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800c47e:	683b      	ldr	r3, [r7, #0]
 800c480:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800c484:	683a      	ldr	r2, [r7, #0]
 800c486:	4413      	add	r3, r2
 800c488:	2280      	movs	r2, #128	@ 0x80
 800c48a:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 800c48e:	e007      	b.n	800c4a0 <AES_CMAC_Final+0x204>
            ctx->M_last[ctx->M_n] = 0;
 800c490:	683b      	ldr	r3, [r7, #0]
 800c492:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800c496:	683a      	ldr	r2, [r7, #0]
 800c498:	4413      	add	r3, r2
 800c49a:	2200      	movs	r2, #0
 800c49c:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 800c4a0:	683b      	ldr	r3, [r7, #0]
 800c4a2:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800c4a6:	1c5a      	adds	r2, r3, #1
 800c4a8:	683b      	ldr	r3, [r7, #0]
 800c4aa:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 800c4ae:	683b      	ldr	r3, [r7, #0]
 800c4b0:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800c4b4:	2b0f      	cmp	r3, #15
 800c4b6:	d9eb      	bls.n	800c490 <AES_CMAC_Final+0x1f4>

        XOR( K, ctx->M_last );
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	633b      	str	r3, [r7, #48]	@ 0x30
 800c4bc:	e016      	b.n	800c4ec <AES_CMAC_Final+0x250>
 800c4be:	683a      	ldr	r2, [r7, #0]
 800c4c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4c2:	4413      	add	r3, r2
 800c4c4:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800c4c8:	781a      	ldrb	r2, [r3, #0]
 800c4ca:	f107 011c 	add.w	r1, r7, #28
 800c4ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4d0:	440b      	add	r3, r1
 800c4d2:	781b      	ldrb	r3, [r3, #0]
 800c4d4:	4053      	eors	r3, r2
 800c4d6:	b2d9      	uxtb	r1, r3
 800c4d8:	683a      	ldr	r2, [r7, #0]
 800c4da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4dc:	4413      	add	r3, r2
 800c4de:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800c4e2:	460a      	mov	r2, r1
 800c4e4:	701a      	strb	r2, [r3, #0]
 800c4e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4e8:	3301      	adds	r3, #1
 800c4ea:	633b      	str	r3, [r7, #48]	@ 0x30
 800c4ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4ee:	2b0f      	cmp	r3, #15
 800c4f0:	dde5      	ble.n	800c4be <AES_CMAC_Final+0x222>
    }
    XOR( ctx->M_last, ctx->X );
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c4f6:	e015      	b.n	800c524 <AES_CMAC_Final+0x288>
 800c4f8:	683a      	ldr	r2, [r7, #0]
 800c4fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4fc:	4413      	add	r3, r2
 800c4fe:	33f1      	adds	r3, #241	@ 0xf1
 800c500:	781a      	ldrb	r2, [r3, #0]
 800c502:	6839      	ldr	r1, [r7, #0]
 800c504:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c506:	440b      	add	r3, r1
 800c508:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800c50c:	781b      	ldrb	r3, [r3, #0]
 800c50e:	4053      	eors	r3, r2
 800c510:	b2d9      	uxtb	r1, r3
 800c512:	683a      	ldr	r2, [r7, #0]
 800c514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c516:	4413      	add	r3, r2
 800c518:	33f1      	adds	r3, #241	@ 0xf1
 800c51a:	460a      	mov	r2, r1
 800c51c:	701a      	strb	r2, [r3, #0]
 800c51e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c520:	3301      	adds	r3, #1
 800c522:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c524:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c526:	2b0f      	cmp	r3, #15
 800c528:	dde6      	ble.n	800c4f8 <AES_CMAC_Final+0x25c>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800c52a:	683b      	ldr	r3, [r7, #0]
 800c52c:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800c530:	f107 030c 	add.w	r3, r7, #12
 800c534:	2210      	movs	r2, #16
 800c536:	4618      	mov	r0, r3
 800c538:	f00d fdbb 	bl	801a0b2 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800c53c:	683a      	ldr	r2, [r7, #0]
 800c53e:	f107 030c 	add.w	r3, r7, #12
 800c542:	6879      	ldr	r1, [r7, #4]
 800c544:	4618      	mov	r0, r3
 800c546:	f000 fd1d 	bl	800cf84 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800c54a:	f107 031c 	add.w	r3, r7, #28
 800c54e:	2210      	movs	r2, #16
 800c550:	2100      	movs	r1, #0
 800c552:	4618      	mov	r0, r3
 800c554:	f00d fde8 	bl	801a128 <memset1>
}
 800c558:	bf00      	nop
 800c55a:	3748      	adds	r7, #72	@ 0x48
 800c55c:	46bd      	mov	sp, r7
 800c55e:	bd80      	pop	{r7, pc}

0800c560 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800c560:	b480      	push	{r7}
 800c562:	b083      	sub	sp, #12
 800c564:	af00      	add	r7, sp, #0
 800c566:	6078      	str	r0, [r7, #4]
 800c568:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800c56a:	683b      	ldr	r3, [r7, #0]
 800c56c:	781a      	ldrb	r2, [r3, #0]
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	3301      	adds	r3, #1
 800c576:	683a      	ldr	r2, [r7, #0]
 800c578:	7852      	ldrb	r2, [r2, #1]
 800c57a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	3302      	adds	r3, #2
 800c580:	683a      	ldr	r2, [r7, #0]
 800c582:	7892      	ldrb	r2, [r2, #2]
 800c584:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	3303      	adds	r3, #3
 800c58a:	683a      	ldr	r2, [r7, #0]
 800c58c:	78d2      	ldrb	r2, [r2, #3]
 800c58e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	3304      	adds	r3, #4
 800c594:	683a      	ldr	r2, [r7, #0]
 800c596:	7912      	ldrb	r2, [r2, #4]
 800c598:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	3305      	adds	r3, #5
 800c59e:	683a      	ldr	r2, [r7, #0]
 800c5a0:	7952      	ldrb	r2, [r2, #5]
 800c5a2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	3306      	adds	r3, #6
 800c5a8:	683a      	ldr	r2, [r7, #0]
 800c5aa:	7992      	ldrb	r2, [r2, #6]
 800c5ac:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	3307      	adds	r3, #7
 800c5b2:	683a      	ldr	r2, [r7, #0]
 800c5b4:	79d2      	ldrb	r2, [r2, #7]
 800c5b6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	3308      	adds	r3, #8
 800c5bc:	683a      	ldr	r2, [r7, #0]
 800c5be:	7a12      	ldrb	r2, [r2, #8]
 800c5c0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	3309      	adds	r3, #9
 800c5c6:	683a      	ldr	r2, [r7, #0]
 800c5c8:	7a52      	ldrb	r2, [r2, #9]
 800c5ca:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	330a      	adds	r3, #10
 800c5d0:	683a      	ldr	r2, [r7, #0]
 800c5d2:	7a92      	ldrb	r2, [r2, #10]
 800c5d4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	330b      	adds	r3, #11
 800c5da:	683a      	ldr	r2, [r7, #0]
 800c5dc:	7ad2      	ldrb	r2, [r2, #11]
 800c5de:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	330c      	adds	r3, #12
 800c5e4:	683a      	ldr	r2, [r7, #0]
 800c5e6:	7b12      	ldrb	r2, [r2, #12]
 800c5e8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	330d      	adds	r3, #13
 800c5ee:	683a      	ldr	r2, [r7, #0]
 800c5f0:	7b52      	ldrb	r2, [r2, #13]
 800c5f2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	330e      	adds	r3, #14
 800c5f8:	683a      	ldr	r2, [r7, #0]
 800c5fa:	7b92      	ldrb	r2, [r2, #14]
 800c5fc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	330f      	adds	r3, #15
 800c602:	683a      	ldr	r2, [r7, #0]
 800c604:	7bd2      	ldrb	r2, [r2, #15]
 800c606:	701a      	strb	r2, [r3, #0]
#endif
}
 800c608:	bf00      	nop
 800c60a:	370c      	adds	r7, #12
 800c60c:	46bd      	mov	sp, r7
 800c60e:	bc80      	pop	{r7}
 800c610:	4770      	bx	lr

0800c612 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800c612:	b480      	push	{r7}
 800c614:	b085      	sub	sp, #20
 800c616:	af00      	add	r7, sp, #0
 800c618:	60f8      	str	r0, [r7, #12]
 800c61a:	60b9      	str	r1, [r7, #8]
 800c61c:	4613      	mov	r3, r2
 800c61e:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800c620:	e007      	b.n	800c632 <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800c622:	68ba      	ldr	r2, [r7, #8]
 800c624:	1c53      	adds	r3, r2, #1
 800c626:	60bb      	str	r3, [r7, #8]
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	1c59      	adds	r1, r3, #1
 800c62c:	60f9      	str	r1, [r7, #12]
 800c62e:	7812      	ldrb	r2, [r2, #0]
 800c630:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800c632:	79fb      	ldrb	r3, [r7, #7]
 800c634:	1e5a      	subs	r2, r3, #1
 800c636:	71fa      	strb	r2, [r7, #7]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d1f2      	bne.n	800c622 <copy_block_nn+0x10>
}
 800c63c:	bf00      	nop
 800c63e:	bf00      	nop
 800c640:	3714      	adds	r7, #20
 800c642:	46bd      	mov	sp, r7
 800c644:	bc80      	pop	{r7}
 800c646:	4770      	bx	lr

0800c648 <xor_block>:

static void xor_block( void *d, const void *s )
{
 800c648:	b480      	push	{r7}
 800c64a:	b083      	sub	sp, #12
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
 800c650:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	781a      	ldrb	r2, [r3, #0]
 800c656:	683b      	ldr	r3, [r7, #0]
 800c658:	781b      	ldrb	r3, [r3, #0]
 800c65a:	4053      	eors	r3, r2
 800c65c:	b2da      	uxtb	r2, r3
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	3301      	adds	r3, #1
 800c666:	7819      	ldrb	r1, [r3, #0]
 800c668:	683b      	ldr	r3, [r7, #0]
 800c66a:	3301      	adds	r3, #1
 800c66c:	781a      	ldrb	r2, [r3, #0]
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	3301      	adds	r3, #1
 800c672:	404a      	eors	r2, r1
 800c674:	b2d2      	uxtb	r2, r2
 800c676:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	3302      	adds	r3, #2
 800c67c:	7819      	ldrb	r1, [r3, #0]
 800c67e:	683b      	ldr	r3, [r7, #0]
 800c680:	3302      	adds	r3, #2
 800c682:	781a      	ldrb	r2, [r3, #0]
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	3302      	adds	r3, #2
 800c688:	404a      	eors	r2, r1
 800c68a:	b2d2      	uxtb	r2, r2
 800c68c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	3303      	adds	r3, #3
 800c692:	7819      	ldrb	r1, [r3, #0]
 800c694:	683b      	ldr	r3, [r7, #0]
 800c696:	3303      	adds	r3, #3
 800c698:	781a      	ldrb	r2, [r3, #0]
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	3303      	adds	r3, #3
 800c69e:	404a      	eors	r2, r1
 800c6a0:	b2d2      	uxtb	r2, r2
 800c6a2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	3304      	adds	r3, #4
 800c6a8:	7819      	ldrb	r1, [r3, #0]
 800c6aa:	683b      	ldr	r3, [r7, #0]
 800c6ac:	3304      	adds	r3, #4
 800c6ae:	781a      	ldrb	r2, [r3, #0]
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	3304      	adds	r3, #4
 800c6b4:	404a      	eors	r2, r1
 800c6b6:	b2d2      	uxtb	r2, r2
 800c6b8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	3305      	adds	r3, #5
 800c6be:	7819      	ldrb	r1, [r3, #0]
 800c6c0:	683b      	ldr	r3, [r7, #0]
 800c6c2:	3305      	adds	r3, #5
 800c6c4:	781a      	ldrb	r2, [r3, #0]
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	3305      	adds	r3, #5
 800c6ca:	404a      	eors	r2, r1
 800c6cc:	b2d2      	uxtb	r2, r2
 800c6ce:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	3306      	adds	r3, #6
 800c6d4:	7819      	ldrb	r1, [r3, #0]
 800c6d6:	683b      	ldr	r3, [r7, #0]
 800c6d8:	3306      	adds	r3, #6
 800c6da:	781a      	ldrb	r2, [r3, #0]
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	3306      	adds	r3, #6
 800c6e0:	404a      	eors	r2, r1
 800c6e2:	b2d2      	uxtb	r2, r2
 800c6e4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	3307      	adds	r3, #7
 800c6ea:	7819      	ldrb	r1, [r3, #0]
 800c6ec:	683b      	ldr	r3, [r7, #0]
 800c6ee:	3307      	adds	r3, #7
 800c6f0:	781a      	ldrb	r2, [r3, #0]
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	3307      	adds	r3, #7
 800c6f6:	404a      	eors	r2, r1
 800c6f8:	b2d2      	uxtb	r2, r2
 800c6fa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	3308      	adds	r3, #8
 800c700:	7819      	ldrb	r1, [r3, #0]
 800c702:	683b      	ldr	r3, [r7, #0]
 800c704:	3308      	adds	r3, #8
 800c706:	781a      	ldrb	r2, [r3, #0]
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	3308      	adds	r3, #8
 800c70c:	404a      	eors	r2, r1
 800c70e:	b2d2      	uxtb	r2, r2
 800c710:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	3309      	adds	r3, #9
 800c716:	7819      	ldrb	r1, [r3, #0]
 800c718:	683b      	ldr	r3, [r7, #0]
 800c71a:	3309      	adds	r3, #9
 800c71c:	781a      	ldrb	r2, [r3, #0]
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	3309      	adds	r3, #9
 800c722:	404a      	eors	r2, r1
 800c724:	b2d2      	uxtb	r2, r2
 800c726:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	330a      	adds	r3, #10
 800c72c:	7819      	ldrb	r1, [r3, #0]
 800c72e:	683b      	ldr	r3, [r7, #0]
 800c730:	330a      	adds	r3, #10
 800c732:	781a      	ldrb	r2, [r3, #0]
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	330a      	adds	r3, #10
 800c738:	404a      	eors	r2, r1
 800c73a:	b2d2      	uxtb	r2, r2
 800c73c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	330b      	adds	r3, #11
 800c742:	7819      	ldrb	r1, [r3, #0]
 800c744:	683b      	ldr	r3, [r7, #0]
 800c746:	330b      	adds	r3, #11
 800c748:	781a      	ldrb	r2, [r3, #0]
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	330b      	adds	r3, #11
 800c74e:	404a      	eors	r2, r1
 800c750:	b2d2      	uxtb	r2, r2
 800c752:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	330c      	adds	r3, #12
 800c758:	7819      	ldrb	r1, [r3, #0]
 800c75a:	683b      	ldr	r3, [r7, #0]
 800c75c:	330c      	adds	r3, #12
 800c75e:	781a      	ldrb	r2, [r3, #0]
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	330c      	adds	r3, #12
 800c764:	404a      	eors	r2, r1
 800c766:	b2d2      	uxtb	r2, r2
 800c768:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	330d      	adds	r3, #13
 800c76e:	7819      	ldrb	r1, [r3, #0]
 800c770:	683b      	ldr	r3, [r7, #0]
 800c772:	330d      	adds	r3, #13
 800c774:	781a      	ldrb	r2, [r3, #0]
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	330d      	adds	r3, #13
 800c77a:	404a      	eors	r2, r1
 800c77c:	b2d2      	uxtb	r2, r2
 800c77e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	330e      	adds	r3, #14
 800c784:	7819      	ldrb	r1, [r3, #0]
 800c786:	683b      	ldr	r3, [r7, #0]
 800c788:	330e      	adds	r3, #14
 800c78a:	781a      	ldrb	r2, [r3, #0]
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	330e      	adds	r3, #14
 800c790:	404a      	eors	r2, r1
 800c792:	b2d2      	uxtb	r2, r2
 800c794:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	330f      	adds	r3, #15
 800c79a:	7819      	ldrb	r1, [r3, #0]
 800c79c:	683b      	ldr	r3, [r7, #0]
 800c79e:	330f      	adds	r3, #15
 800c7a0:	781a      	ldrb	r2, [r3, #0]
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	330f      	adds	r3, #15
 800c7a6:	404a      	eors	r2, r1
 800c7a8:	b2d2      	uxtb	r2, r2
 800c7aa:	701a      	strb	r2, [r3, #0]
#endif
}
 800c7ac:	bf00      	nop
 800c7ae:	370c      	adds	r7, #12
 800c7b0:	46bd      	mov	sp, r7
 800c7b2:	bc80      	pop	{r7}
 800c7b4:	4770      	bx	lr

0800c7b6 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800c7b6:	b480      	push	{r7}
 800c7b8:	b085      	sub	sp, #20
 800c7ba:	af00      	add	r7, sp, #0
 800c7bc:	60f8      	str	r0, [r7, #12]
 800c7be:	60b9      	str	r1, [r7, #8]
 800c7c0:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800c7c2:	68bb      	ldr	r3, [r7, #8]
 800c7c4:	781a      	ldrb	r2, [r3, #0]
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	781b      	ldrb	r3, [r3, #0]
 800c7ca:	4053      	eors	r3, r2
 800c7cc:	b2da      	uxtb	r2, r3
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800c7d2:	68bb      	ldr	r3, [r7, #8]
 800c7d4:	3301      	adds	r3, #1
 800c7d6:	7819      	ldrb	r1, [r3, #0]
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	3301      	adds	r3, #1
 800c7dc:	781a      	ldrb	r2, [r3, #0]
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	3301      	adds	r3, #1
 800c7e2:	404a      	eors	r2, r1
 800c7e4:	b2d2      	uxtb	r2, r2
 800c7e6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800c7e8:	68bb      	ldr	r3, [r7, #8]
 800c7ea:	3302      	adds	r3, #2
 800c7ec:	7819      	ldrb	r1, [r3, #0]
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	3302      	adds	r3, #2
 800c7f2:	781a      	ldrb	r2, [r3, #0]
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	3302      	adds	r3, #2
 800c7f8:	404a      	eors	r2, r1
 800c7fa:	b2d2      	uxtb	r2, r2
 800c7fc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800c7fe:	68bb      	ldr	r3, [r7, #8]
 800c800:	3303      	adds	r3, #3
 800c802:	7819      	ldrb	r1, [r3, #0]
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	3303      	adds	r3, #3
 800c808:	781a      	ldrb	r2, [r3, #0]
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	3303      	adds	r3, #3
 800c80e:	404a      	eors	r2, r1
 800c810:	b2d2      	uxtb	r2, r2
 800c812:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800c814:	68bb      	ldr	r3, [r7, #8]
 800c816:	3304      	adds	r3, #4
 800c818:	7819      	ldrb	r1, [r3, #0]
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	3304      	adds	r3, #4
 800c81e:	781a      	ldrb	r2, [r3, #0]
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	3304      	adds	r3, #4
 800c824:	404a      	eors	r2, r1
 800c826:	b2d2      	uxtb	r2, r2
 800c828:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800c82a:	68bb      	ldr	r3, [r7, #8]
 800c82c:	3305      	adds	r3, #5
 800c82e:	7819      	ldrb	r1, [r3, #0]
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	3305      	adds	r3, #5
 800c834:	781a      	ldrb	r2, [r3, #0]
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	3305      	adds	r3, #5
 800c83a:	404a      	eors	r2, r1
 800c83c:	b2d2      	uxtb	r2, r2
 800c83e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800c840:	68bb      	ldr	r3, [r7, #8]
 800c842:	3306      	adds	r3, #6
 800c844:	7819      	ldrb	r1, [r3, #0]
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	3306      	adds	r3, #6
 800c84a:	781a      	ldrb	r2, [r3, #0]
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	3306      	adds	r3, #6
 800c850:	404a      	eors	r2, r1
 800c852:	b2d2      	uxtb	r2, r2
 800c854:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800c856:	68bb      	ldr	r3, [r7, #8]
 800c858:	3307      	adds	r3, #7
 800c85a:	7819      	ldrb	r1, [r3, #0]
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	3307      	adds	r3, #7
 800c860:	781a      	ldrb	r2, [r3, #0]
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	3307      	adds	r3, #7
 800c866:	404a      	eors	r2, r1
 800c868:	b2d2      	uxtb	r2, r2
 800c86a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800c86c:	68bb      	ldr	r3, [r7, #8]
 800c86e:	3308      	adds	r3, #8
 800c870:	7819      	ldrb	r1, [r3, #0]
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	3308      	adds	r3, #8
 800c876:	781a      	ldrb	r2, [r3, #0]
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	3308      	adds	r3, #8
 800c87c:	404a      	eors	r2, r1
 800c87e:	b2d2      	uxtb	r2, r2
 800c880:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800c882:	68bb      	ldr	r3, [r7, #8]
 800c884:	3309      	adds	r3, #9
 800c886:	7819      	ldrb	r1, [r3, #0]
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	3309      	adds	r3, #9
 800c88c:	781a      	ldrb	r2, [r3, #0]
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	3309      	adds	r3, #9
 800c892:	404a      	eors	r2, r1
 800c894:	b2d2      	uxtb	r2, r2
 800c896:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800c898:	68bb      	ldr	r3, [r7, #8]
 800c89a:	330a      	adds	r3, #10
 800c89c:	7819      	ldrb	r1, [r3, #0]
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	330a      	adds	r3, #10
 800c8a2:	781a      	ldrb	r2, [r3, #0]
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	330a      	adds	r3, #10
 800c8a8:	404a      	eors	r2, r1
 800c8aa:	b2d2      	uxtb	r2, r2
 800c8ac:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800c8ae:	68bb      	ldr	r3, [r7, #8]
 800c8b0:	330b      	adds	r3, #11
 800c8b2:	7819      	ldrb	r1, [r3, #0]
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	330b      	adds	r3, #11
 800c8b8:	781a      	ldrb	r2, [r3, #0]
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	330b      	adds	r3, #11
 800c8be:	404a      	eors	r2, r1
 800c8c0:	b2d2      	uxtb	r2, r2
 800c8c2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800c8c4:	68bb      	ldr	r3, [r7, #8]
 800c8c6:	330c      	adds	r3, #12
 800c8c8:	7819      	ldrb	r1, [r3, #0]
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	330c      	adds	r3, #12
 800c8ce:	781a      	ldrb	r2, [r3, #0]
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	330c      	adds	r3, #12
 800c8d4:	404a      	eors	r2, r1
 800c8d6:	b2d2      	uxtb	r2, r2
 800c8d8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800c8da:	68bb      	ldr	r3, [r7, #8]
 800c8dc:	330d      	adds	r3, #13
 800c8de:	7819      	ldrb	r1, [r3, #0]
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	330d      	adds	r3, #13
 800c8e4:	781a      	ldrb	r2, [r3, #0]
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	330d      	adds	r3, #13
 800c8ea:	404a      	eors	r2, r1
 800c8ec:	b2d2      	uxtb	r2, r2
 800c8ee:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800c8f0:	68bb      	ldr	r3, [r7, #8]
 800c8f2:	330e      	adds	r3, #14
 800c8f4:	7819      	ldrb	r1, [r3, #0]
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	330e      	adds	r3, #14
 800c8fa:	781a      	ldrb	r2, [r3, #0]
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	330e      	adds	r3, #14
 800c900:	404a      	eors	r2, r1
 800c902:	b2d2      	uxtb	r2, r2
 800c904:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800c906:	68bb      	ldr	r3, [r7, #8]
 800c908:	330f      	adds	r3, #15
 800c90a:	7819      	ldrb	r1, [r3, #0]
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	330f      	adds	r3, #15
 800c910:	781a      	ldrb	r2, [r3, #0]
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	330f      	adds	r3, #15
 800c916:	404a      	eors	r2, r1
 800c918:	b2d2      	uxtb	r2, r2
 800c91a:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800c91c:	bf00      	nop
 800c91e:	3714      	adds	r7, #20
 800c920:	46bd      	mov	sp, r7
 800c922:	bc80      	pop	{r7}
 800c924:	4770      	bx	lr

0800c926 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800c926:	b580      	push	{r7, lr}
 800c928:	b082      	sub	sp, #8
 800c92a:	af00      	add	r7, sp, #0
 800c92c:	6078      	str	r0, [r7, #4]
 800c92e:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800c930:	6839      	ldr	r1, [r7, #0]
 800c932:	6878      	ldr	r0, [r7, #4]
 800c934:	f7ff fe88 	bl	800c648 <xor_block>
}
 800c938:	bf00      	nop
 800c93a:	3708      	adds	r7, #8
 800c93c:	46bd      	mov	sp, r7
 800c93e:	bd80      	pop	{r7, pc}

0800c940 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800c940:	b480      	push	{r7}
 800c942:	b085      	sub	sp, #20
 800c944:	af00      	add	r7, sp, #0
 800c946:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	781b      	ldrb	r3, [r3, #0]
 800c94c:	461a      	mov	r2, r3
 800c94e:	4b48      	ldr	r3, [pc, #288]	@ (800ca70 <shift_sub_rows+0x130>)
 800c950:	5c9a      	ldrb	r2, [r3, r2]
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	701a      	strb	r2, [r3, #0]
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	3304      	adds	r3, #4
 800c95a:	781b      	ldrb	r3, [r3, #0]
 800c95c:	4619      	mov	r1, r3
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	3304      	adds	r3, #4
 800c962:	4a43      	ldr	r2, [pc, #268]	@ (800ca70 <shift_sub_rows+0x130>)
 800c964:	5c52      	ldrb	r2, [r2, r1]
 800c966:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	3308      	adds	r3, #8
 800c96c:	781b      	ldrb	r3, [r3, #0]
 800c96e:	4619      	mov	r1, r3
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	3308      	adds	r3, #8
 800c974:	4a3e      	ldr	r2, [pc, #248]	@ (800ca70 <shift_sub_rows+0x130>)
 800c976:	5c52      	ldrb	r2, [r2, r1]
 800c978:	701a      	strb	r2, [r3, #0]
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	330c      	adds	r3, #12
 800c97e:	781b      	ldrb	r3, [r3, #0]
 800c980:	4619      	mov	r1, r3
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	330c      	adds	r3, #12
 800c986:	4a3a      	ldr	r2, [pc, #232]	@ (800ca70 <shift_sub_rows+0x130>)
 800c988:	5c52      	ldrb	r2, [r2, r1]
 800c98a:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	785b      	ldrb	r3, [r3, #1]
 800c990:	73fb      	strb	r3, [r7, #15]
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	3305      	adds	r3, #5
 800c996:	781b      	ldrb	r3, [r3, #0]
 800c998:	4619      	mov	r1, r3
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	3301      	adds	r3, #1
 800c99e:	4a34      	ldr	r2, [pc, #208]	@ (800ca70 <shift_sub_rows+0x130>)
 800c9a0:	5c52      	ldrb	r2, [r2, r1]
 800c9a2:	701a      	strb	r2, [r3, #0]
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	3309      	adds	r3, #9
 800c9a8:	781b      	ldrb	r3, [r3, #0]
 800c9aa:	4619      	mov	r1, r3
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	3305      	adds	r3, #5
 800c9b0:	4a2f      	ldr	r2, [pc, #188]	@ (800ca70 <shift_sub_rows+0x130>)
 800c9b2:	5c52      	ldrb	r2, [r2, r1]
 800c9b4:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	330d      	adds	r3, #13
 800c9ba:	781b      	ldrb	r3, [r3, #0]
 800c9bc:	4619      	mov	r1, r3
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	3309      	adds	r3, #9
 800c9c2:	4a2b      	ldr	r2, [pc, #172]	@ (800ca70 <shift_sub_rows+0x130>)
 800c9c4:	5c52      	ldrb	r2, [r2, r1]
 800c9c6:	701a      	strb	r2, [r3, #0]
 800c9c8:	7bfa      	ldrb	r2, [r7, #15]
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	330d      	adds	r3, #13
 800c9ce:	4928      	ldr	r1, [pc, #160]	@ (800ca70 <shift_sub_rows+0x130>)
 800c9d0:	5c8a      	ldrb	r2, [r1, r2]
 800c9d2:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	789b      	ldrb	r3, [r3, #2]
 800c9d8:	73fb      	strb	r3, [r7, #15]
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	330a      	adds	r3, #10
 800c9de:	781b      	ldrb	r3, [r3, #0]
 800c9e0:	4619      	mov	r1, r3
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	3302      	adds	r3, #2
 800c9e6:	4a22      	ldr	r2, [pc, #136]	@ (800ca70 <shift_sub_rows+0x130>)
 800c9e8:	5c52      	ldrb	r2, [r2, r1]
 800c9ea:	701a      	strb	r2, [r3, #0]
 800c9ec:	7bfa      	ldrb	r2, [r7, #15]
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	330a      	adds	r3, #10
 800c9f2:	491f      	ldr	r1, [pc, #124]	@ (800ca70 <shift_sub_rows+0x130>)
 800c9f4:	5c8a      	ldrb	r2, [r1, r2]
 800c9f6:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	799b      	ldrb	r3, [r3, #6]
 800c9fc:	73fb      	strb	r3, [r7, #15]
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	330e      	adds	r3, #14
 800ca02:	781b      	ldrb	r3, [r3, #0]
 800ca04:	4619      	mov	r1, r3
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	3306      	adds	r3, #6
 800ca0a:	4a19      	ldr	r2, [pc, #100]	@ (800ca70 <shift_sub_rows+0x130>)
 800ca0c:	5c52      	ldrb	r2, [r2, r1]
 800ca0e:	701a      	strb	r2, [r3, #0]
 800ca10:	7bfa      	ldrb	r2, [r7, #15]
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	330e      	adds	r3, #14
 800ca16:	4916      	ldr	r1, [pc, #88]	@ (800ca70 <shift_sub_rows+0x130>)
 800ca18:	5c8a      	ldrb	r2, [r1, r2]
 800ca1a:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	7bdb      	ldrb	r3, [r3, #15]
 800ca20:	73fb      	strb	r3, [r7, #15]
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	330b      	adds	r3, #11
 800ca26:	781b      	ldrb	r3, [r3, #0]
 800ca28:	4619      	mov	r1, r3
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	330f      	adds	r3, #15
 800ca2e:	4a10      	ldr	r2, [pc, #64]	@ (800ca70 <shift_sub_rows+0x130>)
 800ca30:	5c52      	ldrb	r2, [r2, r1]
 800ca32:	701a      	strb	r2, [r3, #0]
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	3307      	adds	r3, #7
 800ca38:	781b      	ldrb	r3, [r3, #0]
 800ca3a:	4619      	mov	r1, r3
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	330b      	adds	r3, #11
 800ca40:	4a0b      	ldr	r2, [pc, #44]	@ (800ca70 <shift_sub_rows+0x130>)
 800ca42:	5c52      	ldrb	r2, [r2, r1]
 800ca44:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	3303      	adds	r3, #3
 800ca4a:	781b      	ldrb	r3, [r3, #0]
 800ca4c:	4619      	mov	r1, r3
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	3307      	adds	r3, #7
 800ca52:	4a07      	ldr	r2, [pc, #28]	@ (800ca70 <shift_sub_rows+0x130>)
 800ca54:	5c52      	ldrb	r2, [r2, r1]
 800ca56:	701a      	strb	r2, [r3, #0]
 800ca58:	7bfa      	ldrb	r2, [r7, #15]
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	3303      	adds	r3, #3
 800ca5e:	4904      	ldr	r1, [pc, #16]	@ (800ca70 <shift_sub_rows+0x130>)
 800ca60:	5c8a      	ldrb	r2, [r1, r2]
 800ca62:	701a      	strb	r2, [r3, #0]
}
 800ca64:	bf00      	nop
 800ca66:	3714      	adds	r7, #20
 800ca68:	46bd      	mov	sp, r7
 800ca6a:	bc80      	pop	{r7}
 800ca6c:	4770      	bx	lr
 800ca6e:	bf00      	nop
 800ca70:	0801f87c 	.word	0x0801f87c

0800ca74 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800ca74:	b580      	push	{r7, lr}
 800ca76:	b086      	sub	sp, #24
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800ca7c:	f107 0308 	add.w	r3, r7, #8
 800ca80:	6879      	ldr	r1, [r7, #4]
 800ca82:	4618      	mov	r0, r3
 800ca84:	f7ff fd6c 	bl	800c560 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800ca88:	7a3b      	ldrb	r3, [r7, #8]
 800ca8a:	461a      	mov	r2, r3
 800ca8c:	4b9a      	ldr	r3, [pc, #616]	@ (800ccf8 <mix_sub_columns+0x284>)
 800ca8e:	5c9a      	ldrb	r2, [r3, r2]
 800ca90:	7b7b      	ldrb	r3, [r7, #13]
 800ca92:	4619      	mov	r1, r3
 800ca94:	4b99      	ldr	r3, [pc, #612]	@ (800ccfc <mix_sub_columns+0x288>)
 800ca96:	5c5b      	ldrb	r3, [r3, r1]
 800ca98:	4053      	eors	r3, r2
 800ca9a:	b2da      	uxtb	r2, r3
 800ca9c:	7cbb      	ldrb	r3, [r7, #18]
 800ca9e:	4619      	mov	r1, r3
 800caa0:	4b97      	ldr	r3, [pc, #604]	@ (800cd00 <mix_sub_columns+0x28c>)
 800caa2:	5c5b      	ldrb	r3, [r3, r1]
 800caa4:	4053      	eors	r3, r2
 800caa6:	b2da      	uxtb	r2, r3
 800caa8:	7dfb      	ldrb	r3, [r7, #23]
 800caaa:	4619      	mov	r1, r3
 800caac:	4b94      	ldr	r3, [pc, #592]	@ (800cd00 <mix_sub_columns+0x28c>)
 800caae:	5c5b      	ldrb	r3, [r3, r1]
 800cab0:	4053      	eors	r3, r2
 800cab2:	b2da      	uxtb	r2, r3
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800cab8:	7a3b      	ldrb	r3, [r7, #8]
 800caba:	461a      	mov	r2, r3
 800cabc:	4b90      	ldr	r3, [pc, #576]	@ (800cd00 <mix_sub_columns+0x28c>)
 800cabe:	5c9a      	ldrb	r2, [r3, r2]
 800cac0:	7b7b      	ldrb	r3, [r7, #13]
 800cac2:	4619      	mov	r1, r3
 800cac4:	4b8c      	ldr	r3, [pc, #560]	@ (800ccf8 <mix_sub_columns+0x284>)
 800cac6:	5c5b      	ldrb	r3, [r3, r1]
 800cac8:	4053      	eors	r3, r2
 800caca:	b2da      	uxtb	r2, r3
 800cacc:	7cbb      	ldrb	r3, [r7, #18]
 800cace:	4619      	mov	r1, r3
 800cad0:	4b8a      	ldr	r3, [pc, #552]	@ (800ccfc <mix_sub_columns+0x288>)
 800cad2:	5c5b      	ldrb	r3, [r3, r1]
 800cad4:	4053      	eors	r3, r2
 800cad6:	b2d9      	uxtb	r1, r3
 800cad8:	7dfb      	ldrb	r3, [r7, #23]
 800cada:	461a      	mov	r2, r3
 800cadc:	4b88      	ldr	r3, [pc, #544]	@ (800cd00 <mix_sub_columns+0x28c>)
 800cade:	5c9a      	ldrb	r2, [r3, r2]
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	3301      	adds	r3, #1
 800cae4:	404a      	eors	r2, r1
 800cae6:	b2d2      	uxtb	r2, r2
 800cae8:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800caea:	7a3b      	ldrb	r3, [r7, #8]
 800caec:	461a      	mov	r2, r3
 800caee:	4b84      	ldr	r3, [pc, #528]	@ (800cd00 <mix_sub_columns+0x28c>)
 800caf0:	5c9a      	ldrb	r2, [r3, r2]
 800caf2:	7b7b      	ldrb	r3, [r7, #13]
 800caf4:	4619      	mov	r1, r3
 800caf6:	4b82      	ldr	r3, [pc, #520]	@ (800cd00 <mix_sub_columns+0x28c>)
 800caf8:	5c5b      	ldrb	r3, [r3, r1]
 800cafa:	4053      	eors	r3, r2
 800cafc:	b2da      	uxtb	r2, r3
 800cafe:	7cbb      	ldrb	r3, [r7, #18]
 800cb00:	4619      	mov	r1, r3
 800cb02:	4b7d      	ldr	r3, [pc, #500]	@ (800ccf8 <mix_sub_columns+0x284>)
 800cb04:	5c5b      	ldrb	r3, [r3, r1]
 800cb06:	4053      	eors	r3, r2
 800cb08:	b2d9      	uxtb	r1, r3
 800cb0a:	7dfb      	ldrb	r3, [r7, #23]
 800cb0c:	461a      	mov	r2, r3
 800cb0e:	4b7b      	ldr	r3, [pc, #492]	@ (800ccfc <mix_sub_columns+0x288>)
 800cb10:	5c9a      	ldrb	r2, [r3, r2]
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	3302      	adds	r3, #2
 800cb16:	404a      	eors	r2, r1
 800cb18:	b2d2      	uxtb	r2, r2
 800cb1a:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800cb1c:	7a3b      	ldrb	r3, [r7, #8]
 800cb1e:	461a      	mov	r2, r3
 800cb20:	4b76      	ldr	r3, [pc, #472]	@ (800ccfc <mix_sub_columns+0x288>)
 800cb22:	5c9a      	ldrb	r2, [r3, r2]
 800cb24:	7b7b      	ldrb	r3, [r7, #13]
 800cb26:	4619      	mov	r1, r3
 800cb28:	4b75      	ldr	r3, [pc, #468]	@ (800cd00 <mix_sub_columns+0x28c>)
 800cb2a:	5c5b      	ldrb	r3, [r3, r1]
 800cb2c:	4053      	eors	r3, r2
 800cb2e:	b2da      	uxtb	r2, r3
 800cb30:	7cbb      	ldrb	r3, [r7, #18]
 800cb32:	4619      	mov	r1, r3
 800cb34:	4b72      	ldr	r3, [pc, #456]	@ (800cd00 <mix_sub_columns+0x28c>)
 800cb36:	5c5b      	ldrb	r3, [r3, r1]
 800cb38:	4053      	eors	r3, r2
 800cb3a:	b2d9      	uxtb	r1, r3
 800cb3c:	7dfb      	ldrb	r3, [r7, #23]
 800cb3e:	461a      	mov	r2, r3
 800cb40:	4b6d      	ldr	r3, [pc, #436]	@ (800ccf8 <mix_sub_columns+0x284>)
 800cb42:	5c9a      	ldrb	r2, [r3, r2]
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	3303      	adds	r3, #3
 800cb48:	404a      	eors	r2, r1
 800cb4a:	b2d2      	uxtb	r2, r2
 800cb4c:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800cb4e:	7b3b      	ldrb	r3, [r7, #12]
 800cb50:	461a      	mov	r2, r3
 800cb52:	4b69      	ldr	r3, [pc, #420]	@ (800ccf8 <mix_sub_columns+0x284>)
 800cb54:	5c9a      	ldrb	r2, [r3, r2]
 800cb56:	7c7b      	ldrb	r3, [r7, #17]
 800cb58:	4619      	mov	r1, r3
 800cb5a:	4b68      	ldr	r3, [pc, #416]	@ (800ccfc <mix_sub_columns+0x288>)
 800cb5c:	5c5b      	ldrb	r3, [r3, r1]
 800cb5e:	4053      	eors	r3, r2
 800cb60:	b2da      	uxtb	r2, r3
 800cb62:	7dbb      	ldrb	r3, [r7, #22]
 800cb64:	4619      	mov	r1, r3
 800cb66:	4b66      	ldr	r3, [pc, #408]	@ (800cd00 <mix_sub_columns+0x28c>)
 800cb68:	5c5b      	ldrb	r3, [r3, r1]
 800cb6a:	4053      	eors	r3, r2
 800cb6c:	b2d9      	uxtb	r1, r3
 800cb6e:	7afb      	ldrb	r3, [r7, #11]
 800cb70:	461a      	mov	r2, r3
 800cb72:	4b63      	ldr	r3, [pc, #396]	@ (800cd00 <mix_sub_columns+0x28c>)
 800cb74:	5c9a      	ldrb	r2, [r3, r2]
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	3304      	adds	r3, #4
 800cb7a:	404a      	eors	r2, r1
 800cb7c:	b2d2      	uxtb	r2, r2
 800cb7e:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800cb80:	7b3b      	ldrb	r3, [r7, #12]
 800cb82:	461a      	mov	r2, r3
 800cb84:	4b5e      	ldr	r3, [pc, #376]	@ (800cd00 <mix_sub_columns+0x28c>)
 800cb86:	5c9a      	ldrb	r2, [r3, r2]
 800cb88:	7c7b      	ldrb	r3, [r7, #17]
 800cb8a:	4619      	mov	r1, r3
 800cb8c:	4b5a      	ldr	r3, [pc, #360]	@ (800ccf8 <mix_sub_columns+0x284>)
 800cb8e:	5c5b      	ldrb	r3, [r3, r1]
 800cb90:	4053      	eors	r3, r2
 800cb92:	b2da      	uxtb	r2, r3
 800cb94:	7dbb      	ldrb	r3, [r7, #22]
 800cb96:	4619      	mov	r1, r3
 800cb98:	4b58      	ldr	r3, [pc, #352]	@ (800ccfc <mix_sub_columns+0x288>)
 800cb9a:	5c5b      	ldrb	r3, [r3, r1]
 800cb9c:	4053      	eors	r3, r2
 800cb9e:	b2d9      	uxtb	r1, r3
 800cba0:	7afb      	ldrb	r3, [r7, #11]
 800cba2:	461a      	mov	r2, r3
 800cba4:	4b56      	ldr	r3, [pc, #344]	@ (800cd00 <mix_sub_columns+0x28c>)
 800cba6:	5c9a      	ldrb	r2, [r3, r2]
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	3305      	adds	r3, #5
 800cbac:	404a      	eors	r2, r1
 800cbae:	b2d2      	uxtb	r2, r2
 800cbb0:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800cbb2:	7b3b      	ldrb	r3, [r7, #12]
 800cbb4:	461a      	mov	r2, r3
 800cbb6:	4b52      	ldr	r3, [pc, #328]	@ (800cd00 <mix_sub_columns+0x28c>)
 800cbb8:	5c9a      	ldrb	r2, [r3, r2]
 800cbba:	7c7b      	ldrb	r3, [r7, #17]
 800cbbc:	4619      	mov	r1, r3
 800cbbe:	4b50      	ldr	r3, [pc, #320]	@ (800cd00 <mix_sub_columns+0x28c>)
 800cbc0:	5c5b      	ldrb	r3, [r3, r1]
 800cbc2:	4053      	eors	r3, r2
 800cbc4:	b2da      	uxtb	r2, r3
 800cbc6:	7dbb      	ldrb	r3, [r7, #22]
 800cbc8:	4619      	mov	r1, r3
 800cbca:	4b4b      	ldr	r3, [pc, #300]	@ (800ccf8 <mix_sub_columns+0x284>)
 800cbcc:	5c5b      	ldrb	r3, [r3, r1]
 800cbce:	4053      	eors	r3, r2
 800cbd0:	b2d9      	uxtb	r1, r3
 800cbd2:	7afb      	ldrb	r3, [r7, #11]
 800cbd4:	461a      	mov	r2, r3
 800cbd6:	4b49      	ldr	r3, [pc, #292]	@ (800ccfc <mix_sub_columns+0x288>)
 800cbd8:	5c9a      	ldrb	r2, [r3, r2]
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	3306      	adds	r3, #6
 800cbde:	404a      	eors	r2, r1
 800cbe0:	b2d2      	uxtb	r2, r2
 800cbe2:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800cbe4:	7b3b      	ldrb	r3, [r7, #12]
 800cbe6:	461a      	mov	r2, r3
 800cbe8:	4b44      	ldr	r3, [pc, #272]	@ (800ccfc <mix_sub_columns+0x288>)
 800cbea:	5c9a      	ldrb	r2, [r3, r2]
 800cbec:	7c7b      	ldrb	r3, [r7, #17]
 800cbee:	4619      	mov	r1, r3
 800cbf0:	4b43      	ldr	r3, [pc, #268]	@ (800cd00 <mix_sub_columns+0x28c>)
 800cbf2:	5c5b      	ldrb	r3, [r3, r1]
 800cbf4:	4053      	eors	r3, r2
 800cbf6:	b2da      	uxtb	r2, r3
 800cbf8:	7dbb      	ldrb	r3, [r7, #22]
 800cbfa:	4619      	mov	r1, r3
 800cbfc:	4b40      	ldr	r3, [pc, #256]	@ (800cd00 <mix_sub_columns+0x28c>)
 800cbfe:	5c5b      	ldrb	r3, [r3, r1]
 800cc00:	4053      	eors	r3, r2
 800cc02:	b2d9      	uxtb	r1, r3
 800cc04:	7afb      	ldrb	r3, [r7, #11]
 800cc06:	461a      	mov	r2, r3
 800cc08:	4b3b      	ldr	r3, [pc, #236]	@ (800ccf8 <mix_sub_columns+0x284>)
 800cc0a:	5c9a      	ldrb	r2, [r3, r2]
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	3307      	adds	r3, #7
 800cc10:	404a      	eors	r2, r1
 800cc12:	b2d2      	uxtb	r2, r2
 800cc14:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800cc16:	7c3b      	ldrb	r3, [r7, #16]
 800cc18:	461a      	mov	r2, r3
 800cc1a:	4b37      	ldr	r3, [pc, #220]	@ (800ccf8 <mix_sub_columns+0x284>)
 800cc1c:	5c9a      	ldrb	r2, [r3, r2]
 800cc1e:	7d7b      	ldrb	r3, [r7, #21]
 800cc20:	4619      	mov	r1, r3
 800cc22:	4b36      	ldr	r3, [pc, #216]	@ (800ccfc <mix_sub_columns+0x288>)
 800cc24:	5c5b      	ldrb	r3, [r3, r1]
 800cc26:	4053      	eors	r3, r2
 800cc28:	b2da      	uxtb	r2, r3
 800cc2a:	7abb      	ldrb	r3, [r7, #10]
 800cc2c:	4619      	mov	r1, r3
 800cc2e:	4b34      	ldr	r3, [pc, #208]	@ (800cd00 <mix_sub_columns+0x28c>)
 800cc30:	5c5b      	ldrb	r3, [r3, r1]
 800cc32:	4053      	eors	r3, r2
 800cc34:	b2d9      	uxtb	r1, r3
 800cc36:	7bfb      	ldrb	r3, [r7, #15]
 800cc38:	461a      	mov	r2, r3
 800cc3a:	4b31      	ldr	r3, [pc, #196]	@ (800cd00 <mix_sub_columns+0x28c>)
 800cc3c:	5c9a      	ldrb	r2, [r3, r2]
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	3308      	adds	r3, #8
 800cc42:	404a      	eors	r2, r1
 800cc44:	b2d2      	uxtb	r2, r2
 800cc46:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800cc48:	7c3b      	ldrb	r3, [r7, #16]
 800cc4a:	461a      	mov	r2, r3
 800cc4c:	4b2c      	ldr	r3, [pc, #176]	@ (800cd00 <mix_sub_columns+0x28c>)
 800cc4e:	5c9a      	ldrb	r2, [r3, r2]
 800cc50:	7d7b      	ldrb	r3, [r7, #21]
 800cc52:	4619      	mov	r1, r3
 800cc54:	4b28      	ldr	r3, [pc, #160]	@ (800ccf8 <mix_sub_columns+0x284>)
 800cc56:	5c5b      	ldrb	r3, [r3, r1]
 800cc58:	4053      	eors	r3, r2
 800cc5a:	b2da      	uxtb	r2, r3
 800cc5c:	7abb      	ldrb	r3, [r7, #10]
 800cc5e:	4619      	mov	r1, r3
 800cc60:	4b26      	ldr	r3, [pc, #152]	@ (800ccfc <mix_sub_columns+0x288>)
 800cc62:	5c5b      	ldrb	r3, [r3, r1]
 800cc64:	4053      	eors	r3, r2
 800cc66:	b2d9      	uxtb	r1, r3
 800cc68:	7bfb      	ldrb	r3, [r7, #15]
 800cc6a:	461a      	mov	r2, r3
 800cc6c:	4b24      	ldr	r3, [pc, #144]	@ (800cd00 <mix_sub_columns+0x28c>)
 800cc6e:	5c9a      	ldrb	r2, [r3, r2]
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	3309      	adds	r3, #9
 800cc74:	404a      	eors	r2, r1
 800cc76:	b2d2      	uxtb	r2, r2
 800cc78:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800cc7a:	7c3b      	ldrb	r3, [r7, #16]
 800cc7c:	461a      	mov	r2, r3
 800cc7e:	4b20      	ldr	r3, [pc, #128]	@ (800cd00 <mix_sub_columns+0x28c>)
 800cc80:	5c9a      	ldrb	r2, [r3, r2]
 800cc82:	7d7b      	ldrb	r3, [r7, #21]
 800cc84:	4619      	mov	r1, r3
 800cc86:	4b1e      	ldr	r3, [pc, #120]	@ (800cd00 <mix_sub_columns+0x28c>)
 800cc88:	5c5b      	ldrb	r3, [r3, r1]
 800cc8a:	4053      	eors	r3, r2
 800cc8c:	b2da      	uxtb	r2, r3
 800cc8e:	7abb      	ldrb	r3, [r7, #10]
 800cc90:	4619      	mov	r1, r3
 800cc92:	4b19      	ldr	r3, [pc, #100]	@ (800ccf8 <mix_sub_columns+0x284>)
 800cc94:	5c5b      	ldrb	r3, [r3, r1]
 800cc96:	4053      	eors	r3, r2
 800cc98:	b2d9      	uxtb	r1, r3
 800cc9a:	7bfb      	ldrb	r3, [r7, #15]
 800cc9c:	461a      	mov	r2, r3
 800cc9e:	4b17      	ldr	r3, [pc, #92]	@ (800ccfc <mix_sub_columns+0x288>)
 800cca0:	5c9a      	ldrb	r2, [r3, r2]
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	330a      	adds	r3, #10
 800cca6:	404a      	eors	r2, r1
 800cca8:	b2d2      	uxtb	r2, r2
 800ccaa:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800ccac:	7c3b      	ldrb	r3, [r7, #16]
 800ccae:	461a      	mov	r2, r3
 800ccb0:	4b12      	ldr	r3, [pc, #72]	@ (800ccfc <mix_sub_columns+0x288>)
 800ccb2:	5c9a      	ldrb	r2, [r3, r2]
 800ccb4:	7d7b      	ldrb	r3, [r7, #21]
 800ccb6:	4619      	mov	r1, r3
 800ccb8:	4b11      	ldr	r3, [pc, #68]	@ (800cd00 <mix_sub_columns+0x28c>)
 800ccba:	5c5b      	ldrb	r3, [r3, r1]
 800ccbc:	4053      	eors	r3, r2
 800ccbe:	b2da      	uxtb	r2, r3
 800ccc0:	7abb      	ldrb	r3, [r7, #10]
 800ccc2:	4619      	mov	r1, r3
 800ccc4:	4b0e      	ldr	r3, [pc, #56]	@ (800cd00 <mix_sub_columns+0x28c>)
 800ccc6:	5c5b      	ldrb	r3, [r3, r1]
 800ccc8:	4053      	eors	r3, r2
 800ccca:	b2d9      	uxtb	r1, r3
 800cccc:	7bfb      	ldrb	r3, [r7, #15]
 800ccce:	461a      	mov	r2, r3
 800ccd0:	4b09      	ldr	r3, [pc, #36]	@ (800ccf8 <mix_sub_columns+0x284>)
 800ccd2:	5c9a      	ldrb	r2, [r3, r2]
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	330b      	adds	r3, #11
 800ccd8:	404a      	eors	r2, r1
 800ccda:	b2d2      	uxtb	r2, r2
 800ccdc:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800ccde:	7d3b      	ldrb	r3, [r7, #20]
 800cce0:	461a      	mov	r2, r3
 800cce2:	4b05      	ldr	r3, [pc, #20]	@ (800ccf8 <mix_sub_columns+0x284>)
 800cce4:	5c9a      	ldrb	r2, [r3, r2]
 800cce6:	7a7b      	ldrb	r3, [r7, #9]
 800cce8:	4619      	mov	r1, r3
 800ccea:	4b04      	ldr	r3, [pc, #16]	@ (800ccfc <mix_sub_columns+0x288>)
 800ccec:	5c5b      	ldrb	r3, [r3, r1]
 800ccee:	4053      	eors	r3, r2
 800ccf0:	b2da      	uxtb	r2, r3
 800ccf2:	7bbb      	ldrb	r3, [r7, #14]
 800ccf4:	4619      	mov	r1, r3
 800ccf6:	e005      	b.n	800cd04 <mix_sub_columns+0x290>
 800ccf8:	0801f97c 	.word	0x0801f97c
 800ccfc:	0801fa7c 	.word	0x0801fa7c
 800cd00:	0801f87c 	.word	0x0801f87c
 800cd04:	4b2d      	ldr	r3, [pc, #180]	@ (800cdbc <mix_sub_columns+0x348>)
 800cd06:	5c5b      	ldrb	r3, [r3, r1]
 800cd08:	4053      	eors	r3, r2
 800cd0a:	b2d9      	uxtb	r1, r3
 800cd0c:	7cfb      	ldrb	r3, [r7, #19]
 800cd0e:	461a      	mov	r2, r3
 800cd10:	4b2a      	ldr	r3, [pc, #168]	@ (800cdbc <mix_sub_columns+0x348>)
 800cd12:	5c9a      	ldrb	r2, [r3, r2]
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	330c      	adds	r3, #12
 800cd18:	404a      	eors	r2, r1
 800cd1a:	b2d2      	uxtb	r2, r2
 800cd1c:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800cd1e:	7d3b      	ldrb	r3, [r7, #20]
 800cd20:	461a      	mov	r2, r3
 800cd22:	4b26      	ldr	r3, [pc, #152]	@ (800cdbc <mix_sub_columns+0x348>)
 800cd24:	5c9a      	ldrb	r2, [r3, r2]
 800cd26:	7a7b      	ldrb	r3, [r7, #9]
 800cd28:	4619      	mov	r1, r3
 800cd2a:	4b25      	ldr	r3, [pc, #148]	@ (800cdc0 <mix_sub_columns+0x34c>)
 800cd2c:	5c5b      	ldrb	r3, [r3, r1]
 800cd2e:	4053      	eors	r3, r2
 800cd30:	b2da      	uxtb	r2, r3
 800cd32:	7bbb      	ldrb	r3, [r7, #14]
 800cd34:	4619      	mov	r1, r3
 800cd36:	4b23      	ldr	r3, [pc, #140]	@ (800cdc4 <mix_sub_columns+0x350>)
 800cd38:	5c5b      	ldrb	r3, [r3, r1]
 800cd3a:	4053      	eors	r3, r2
 800cd3c:	b2d9      	uxtb	r1, r3
 800cd3e:	7cfb      	ldrb	r3, [r7, #19]
 800cd40:	461a      	mov	r2, r3
 800cd42:	4b1e      	ldr	r3, [pc, #120]	@ (800cdbc <mix_sub_columns+0x348>)
 800cd44:	5c9a      	ldrb	r2, [r3, r2]
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	330d      	adds	r3, #13
 800cd4a:	404a      	eors	r2, r1
 800cd4c:	b2d2      	uxtb	r2, r2
 800cd4e:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800cd50:	7d3b      	ldrb	r3, [r7, #20]
 800cd52:	461a      	mov	r2, r3
 800cd54:	4b19      	ldr	r3, [pc, #100]	@ (800cdbc <mix_sub_columns+0x348>)
 800cd56:	5c9a      	ldrb	r2, [r3, r2]
 800cd58:	7a7b      	ldrb	r3, [r7, #9]
 800cd5a:	4619      	mov	r1, r3
 800cd5c:	4b17      	ldr	r3, [pc, #92]	@ (800cdbc <mix_sub_columns+0x348>)
 800cd5e:	5c5b      	ldrb	r3, [r3, r1]
 800cd60:	4053      	eors	r3, r2
 800cd62:	b2da      	uxtb	r2, r3
 800cd64:	7bbb      	ldrb	r3, [r7, #14]
 800cd66:	4619      	mov	r1, r3
 800cd68:	4b15      	ldr	r3, [pc, #84]	@ (800cdc0 <mix_sub_columns+0x34c>)
 800cd6a:	5c5b      	ldrb	r3, [r3, r1]
 800cd6c:	4053      	eors	r3, r2
 800cd6e:	b2d9      	uxtb	r1, r3
 800cd70:	7cfb      	ldrb	r3, [r7, #19]
 800cd72:	461a      	mov	r2, r3
 800cd74:	4b13      	ldr	r3, [pc, #76]	@ (800cdc4 <mix_sub_columns+0x350>)
 800cd76:	5c9a      	ldrb	r2, [r3, r2]
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	330e      	adds	r3, #14
 800cd7c:	404a      	eors	r2, r1
 800cd7e:	b2d2      	uxtb	r2, r2
 800cd80:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800cd82:	7d3b      	ldrb	r3, [r7, #20]
 800cd84:	461a      	mov	r2, r3
 800cd86:	4b0f      	ldr	r3, [pc, #60]	@ (800cdc4 <mix_sub_columns+0x350>)
 800cd88:	5c9a      	ldrb	r2, [r3, r2]
 800cd8a:	7a7b      	ldrb	r3, [r7, #9]
 800cd8c:	4619      	mov	r1, r3
 800cd8e:	4b0b      	ldr	r3, [pc, #44]	@ (800cdbc <mix_sub_columns+0x348>)
 800cd90:	5c5b      	ldrb	r3, [r3, r1]
 800cd92:	4053      	eors	r3, r2
 800cd94:	b2da      	uxtb	r2, r3
 800cd96:	7bbb      	ldrb	r3, [r7, #14]
 800cd98:	4619      	mov	r1, r3
 800cd9a:	4b08      	ldr	r3, [pc, #32]	@ (800cdbc <mix_sub_columns+0x348>)
 800cd9c:	5c5b      	ldrb	r3, [r3, r1]
 800cd9e:	4053      	eors	r3, r2
 800cda0:	b2d9      	uxtb	r1, r3
 800cda2:	7cfb      	ldrb	r3, [r7, #19]
 800cda4:	461a      	mov	r2, r3
 800cda6:	4b06      	ldr	r3, [pc, #24]	@ (800cdc0 <mix_sub_columns+0x34c>)
 800cda8:	5c9a      	ldrb	r2, [r3, r2]
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	330f      	adds	r3, #15
 800cdae:	404a      	eors	r2, r1
 800cdb0:	b2d2      	uxtb	r2, r2
 800cdb2:	701a      	strb	r2, [r3, #0]
  }
 800cdb4:	bf00      	nop
 800cdb6:	3718      	adds	r7, #24
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	bd80      	pop	{r7, pc}
 800cdbc:	0801f87c 	.word	0x0801f87c
 800cdc0:	0801f97c 	.word	0x0801f97c
 800cdc4:	0801fa7c 	.word	0x0801fa7c

0800cdc8 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b086      	sub	sp, #24
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	60f8      	str	r0, [r7, #12]
 800cdd0:	460b      	mov	r3, r1
 800cdd2:	607a      	str	r2, [r7, #4]
 800cdd4:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800cdd6:	7afb      	ldrb	r3, [r7, #11]
 800cdd8:	3b10      	subs	r3, #16
 800cdda:	2b10      	cmp	r3, #16
 800cddc:	bf8c      	ite	hi
 800cdde:	2201      	movhi	r2, #1
 800cde0:	2200      	movls	r2, #0
 800cde2:	b2d2      	uxtb	r2, r2
 800cde4:	2a00      	cmp	r2, #0
 800cde6:	d10b      	bne.n	800ce00 <lorawan_aes_set_key+0x38>
 800cde8:	4a64      	ldr	r2, [pc, #400]	@ (800cf7c <lorawan_aes_set_key+0x1b4>)
 800cdea:	fa22 f303 	lsr.w	r3, r2, r3
 800cdee:	f003 0301 	and.w	r3, r3, #1
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	bf14      	ite	ne
 800cdf6:	2301      	movne	r3, #1
 800cdf8:	2300      	moveq	r3, #0
 800cdfa:	b2db      	uxtb	r3, r3
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d105      	bne.n	800ce0c <lorawan_aes_set_key+0x44>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	2200      	movs	r2, #0
 800ce04:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
        return ( uint8_t )-1;
 800ce08:	23ff      	movs	r3, #255	@ 0xff
 800ce0a:	e0b2      	b.n	800cf72 <lorawan_aes_set_key+0x1aa>
        break;
 800ce0c:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	7afa      	ldrb	r2, [r7, #11]
 800ce12:	68f9      	ldr	r1, [r7, #12]
 800ce14:	4618      	mov	r0, r3
 800ce16:	f7ff fbfc 	bl	800c612 <copy_block_nn>
    hi = (keylen + 28) << 2;
 800ce1a:	7afb      	ldrb	r3, [r7, #11]
 800ce1c:	331c      	adds	r3, #28
 800ce1e:	b2db      	uxtb	r3, r3
 800ce20:	009b      	lsls	r3, r3, #2
 800ce22:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800ce24:	7c7b      	ldrb	r3, [r7, #17]
 800ce26:	091b      	lsrs	r3, r3, #4
 800ce28:	b2db      	uxtb	r3, r3
 800ce2a:	3b01      	subs	r3, #1
 800ce2c:	b2da      	uxtb	r2, r3
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800ce34:	7afb      	ldrb	r3, [r7, #11]
 800ce36:	75fb      	strb	r3, [r7, #23]
 800ce38:	2301      	movs	r3, #1
 800ce3a:	75bb      	strb	r3, [r7, #22]
 800ce3c:	e093      	b.n	800cf66 <lorawan_aes_set_key+0x19e>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800ce3e:	7dfb      	ldrb	r3, [r7, #23]
 800ce40:	3b04      	subs	r3, #4
 800ce42:	687a      	ldr	r2, [r7, #4]
 800ce44:	5cd3      	ldrb	r3, [r2, r3]
 800ce46:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800ce48:	7dfb      	ldrb	r3, [r7, #23]
 800ce4a:	3b03      	subs	r3, #3
 800ce4c:	687a      	ldr	r2, [r7, #4]
 800ce4e:	5cd3      	ldrb	r3, [r2, r3]
 800ce50:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800ce52:	7dfb      	ldrb	r3, [r7, #23]
 800ce54:	3b02      	subs	r3, #2
 800ce56:	687a      	ldr	r2, [r7, #4]
 800ce58:	5cd3      	ldrb	r3, [r2, r3]
 800ce5a:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800ce5c:	7dfb      	ldrb	r3, [r7, #23]
 800ce5e:	3b01      	subs	r3, #1
 800ce60:	687a      	ldr	r2, [r7, #4]
 800ce62:	5cd3      	ldrb	r3, [r2, r3]
 800ce64:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800ce66:	7dfb      	ldrb	r3, [r7, #23]
 800ce68:	7afa      	ldrb	r2, [r7, #11]
 800ce6a:	fbb3 f1f2 	udiv	r1, r3, r2
 800ce6e:	fb01 f202 	mul.w	r2, r1, r2
 800ce72:	1a9b      	subs	r3, r3, r2
 800ce74:	b2db      	uxtb	r3, r3
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d127      	bne.n	800ceca <lorawan_aes_set_key+0x102>
        {
            tt = t0;
 800ce7a:	7d7b      	ldrb	r3, [r7, #21]
 800ce7c:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800ce7e:	7d3b      	ldrb	r3, [r7, #20]
 800ce80:	4a3f      	ldr	r2, [pc, #252]	@ (800cf80 <lorawan_aes_set_key+0x1b8>)
 800ce82:	5cd2      	ldrb	r2, [r2, r3]
 800ce84:	7dbb      	ldrb	r3, [r7, #22]
 800ce86:	4053      	eors	r3, r2
 800ce88:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800ce8a:	7cfb      	ldrb	r3, [r7, #19]
 800ce8c:	4a3c      	ldr	r2, [pc, #240]	@ (800cf80 <lorawan_aes_set_key+0x1b8>)
 800ce8e:	5cd3      	ldrb	r3, [r2, r3]
 800ce90:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800ce92:	7cbb      	ldrb	r3, [r7, #18]
 800ce94:	4a3a      	ldr	r2, [pc, #232]	@ (800cf80 <lorawan_aes_set_key+0x1b8>)
 800ce96:	5cd3      	ldrb	r3, [r2, r3]
 800ce98:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800ce9a:	7c3b      	ldrb	r3, [r7, #16]
 800ce9c:	4a38      	ldr	r2, [pc, #224]	@ (800cf80 <lorawan_aes_set_key+0x1b8>)
 800ce9e:	5cd3      	ldrb	r3, [r2, r3]
 800cea0:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800cea2:	7dbb      	ldrb	r3, [r7, #22]
 800cea4:	005b      	lsls	r3, r3, #1
 800cea6:	b25a      	sxtb	r2, r3
 800cea8:	7dbb      	ldrb	r3, [r7, #22]
 800ceaa:	09db      	lsrs	r3, r3, #7
 800ceac:	b2db      	uxtb	r3, r3
 800ceae:	4619      	mov	r1, r3
 800ceb0:	0049      	lsls	r1, r1, #1
 800ceb2:	440b      	add	r3, r1
 800ceb4:	4619      	mov	r1, r3
 800ceb6:	00c8      	lsls	r0, r1, #3
 800ceb8:	4619      	mov	r1, r3
 800ceba:	4603      	mov	r3, r0
 800cebc:	440b      	add	r3, r1
 800cebe:	b2db      	uxtb	r3, r3
 800cec0:	b25b      	sxtb	r3, r3
 800cec2:	4053      	eors	r3, r2
 800cec4:	b25b      	sxtb	r3, r3
 800cec6:	75bb      	strb	r3, [r7, #22]
 800cec8:	e01c      	b.n	800cf04 <lorawan_aes_set_key+0x13c>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800ceca:	7afb      	ldrb	r3, [r7, #11]
 800cecc:	2b18      	cmp	r3, #24
 800cece:	d919      	bls.n	800cf04 <lorawan_aes_set_key+0x13c>
 800ced0:	7dfb      	ldrb	r3, [r7, #23]
 800ced2:	7afa      	ldrb	r2, [r7, #11]
 800ced4:	fbb3 f1f2 	udiv	r1, r3, r2
 800ced8:	fb01 f202 	mul.w	r2, r1, r2
 800cedc:	1a9b      	subs	r3, r3, r2
 800cede:	b2db      	uxtb	r3, r3
 800cee0:	2b10      	cmp	r3, #16
 800cee2:	d10f      	bne.n	800cf04 <lorawan_aes_set_key+0x13c>
        {
            t0 = s_box(t0);
 800cee4:	7d7b      	ldrb	r3, [r7, #21]
 800cee6:	4a26      	ldr	r2, [pc, #152]	@ (800cf80 <lorawan_aes_set_key+0x1b8>)
 800cee8:	5cd3      	ldrb	r3, [r2, r3]
 800ceea:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800ceec:	7d3b      	ldrb	r3, [r7, #20]
 800ceee:	4a24      	ldr	r2, [pc, #144]	@ (800cf80 <lorawan_aes_set_key+0x1b8>)
 800cef0:	5cd3      	ldrb	r3, [r2, r3]
 800cef2:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800cef4:	7cfb      	ldrb	r3, [r7, #19]
 800cef6:	4a22      	ldr	r2, [pc, #136]	@ (800cf80 <lorawan_aes_set_key+0x1b8>)
 800cef8:	5cd3      	ldrb	r3, [r2, r3]
 800cefa:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800cefc:	7cbb      	ldrb	r3, [r7, #18]
 800cefe:	4a20      	ldr	r2, [pc, #128]	@ (800cf80 <lorawan_aes_set_key+0x1b8>)
 800cf00:	5cd3      	ldrb	r3, [r2, r3]
 800cf02:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800cf04:	7dfa      	ldrb	r2, [r7, #23]
 800cf06:	7afb      	ldrb	r3, [r7, #11]
 800cf08:	1ad3      	subs	r3, r2, r3
 800cf0a:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800cf0c:	7c3b      	ldrb	r3, [r7, #16]
 800cf0e:	687a      	ldr	r2, [r7, #4]
 800cf10:	5cd1      	ldrb	r1, [r2, r3]
 800cf12:	7dfb      	ldrb	r3, [r7, #23]
 800cf14:	7d7a      	ldrb	r2, [r7, #21]
 800cf16:	404a      	eors	r2, r1
 800cf18:	b2d1      	uxtb	r1, r2
 800cf1a:	687a      	ldr	r2, [r7, #4]
 800cf1c:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800cf1e:	7c3b      	ldrb	r3, [r7, #16]
 800cf20:	3301      	adds	r3, #1
 800cf22:	687a      	ldr	r2, [r7, #4]
 800cf24:	5cd1      	ldrb	r1, [r2, r3]
 800cf26:	7dfb      	ldrb	r3, [r7, #23]
 800cf28:	3301      	adds	r3, #1
 800cf2a:	7d3a      	ldrb	r2, [r7, #20]
 800cf2c:	404a      	eors	r2, r1
 800cf2e:	b2d1      	uxtb	r1, r2
 800cf30:	687a      	ldr	r2, [r7, #4]
 800cf32:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800cf34:	7c3b      	ldrb	r3, [r7, #16]
 800cf36:	3302      	adds	r3, #2
 800cf38:	687a      	ldr	r2, [r7, #4]
 800cf3a:	5cd1      	ldrb	r1, [r2, r3]
 800cf3c:	7dfb      	ldrb	r3, [r7, #23]
 800cf3e:	3302      	adds	r3, #2
 800cf40:	7cfa      	ldrb	r2, [r7, #19]
 800cf42:	404a      	eors	r2, r1
 800cf44:	b2d1      	uxtb	r1, r2
 800cf46:	687a      	ldr	r2, [r7, #4]
 800cf48:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800cf4a:	7c3b      	ldrb	r3, [r7, #16]
 800cf4c:	3303      	adds	r3, #3
 800cf4e:	687a      	ldr	r2, [r7, #4]
 800cf50:	5cd1      	ldrb	r1, [r2, r3]
 800cf52:	7dfb      	ldrb	r3, [r7, #23]
 800cf54:	3303      	adds	r3, #3
 800cf56:	7cba      	ldrb	r2, [r7, #18]
 800cf58:	404a      	eors	r2, r1
 800cf5a:	b2d1      	uxtb	r1, r2
 800cf5c:	687a      	ldr	r2, [r7, #4]
 800cf5e:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800cf60:	7dfb      	ldrb	r3, [r7, #23]
 800cf62:	3304      	adds	r3, #4
 800cf64:	75fb      	strb	r3, [r7, #23]
 800cf66:	7dfa      	ldrb	r2, [r7, #23]
 800cf68:	7c7b      	ldrb	r3, [r7, #17]
 800cf6a:	429a      	cmp	r2, r3
 800cf6c:	f4ff af67 	bcc.w	800ce3e <lorawan_aes_set_key+0x76>
    }
    return 0;
 800cf70:	2300      	movs	r3, #0
}
 800cf72:	4618      	mov	r0, r3
 800cf74:	3718      	adds	r7, #24
 800cf76:	46bd      	mov	sp, r7
 800cf78:	bd80      	pop	{r7, pc}
 800cf7a:	bf00      	nop
 800cf7c:	00010101 	.word	0x00010101
 800cf80:	0801f87c 	.word	0x0801f87c

0800cf84 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800cf84:	b580      	push	{r7, lr}
 800cf86:	b08a      	sub	sp, #40	@ 0x28
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	60f8      	str	r0, [r7, #12]
 800cf8c:	60b9      	str	r1, [r7, #8]
 800cf8e:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d038      	beq.n	800d00c <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800cf9a:	687a      	ldr	r2, [r7, #4]
 800cf9c:	f107 0314 	add.w	r3, r7, #20
 800cfa0:	68f9      	ldr	r1, [r7, #12]
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	f7ff fc07 	bl	800c7b6 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800cfa8:	2301      	movs	r3, #1
 800cfaa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800cfae:	e014      	b.n	800cfda <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800cfb0:	f107 0314 	add.w	r3, r7, #20
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	f7ff fd5d 	bl	800ca74 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800cfc0:	0112      	lsls	r2, r2, #4
 800cfc2:	441a      	add	r2, r3
 800cfc4:	f107 0314 	add.w	r3, r7, #20
 800cfc8:	4611      	mov	r1, r2
 800cfca:	4618      	mov	r0, r3
 800cfcc:	f7ff fcab 	bl	800c926 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800cfd0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cfd4:	3301      	adds	r3, #1
 800cfd6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800cfe0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800cfe4:	429a      	cmp	r2, r3
 800cfe6:	d3e3      	bcc.n	800cfb0 <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800cfe8:	f107 0314 	add.w	r3, r7, #20
 800cfec:	4618      	mov	r0, r3
 800cfee:	f7ff fca7 	bl	800c940 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800cff8:	0112      	lsls	r2, r2, #4
 800cffa:	441a      	add	r2, r3
 800cffc:	f107 0314 	add.w	r3, r7, #20
 800d000:	4619      	mov	r1, r3
 800d002:	68b8      	ldr	r0, [r7, #8]
 800d004:	f7ff fbd7 	bl	800c7b6 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800d008:	2300      	movs	r3, #0
 800d00a:	e000      	b.n	800d00e <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800d00c:	23ff      	movs	r3, #255	@ 0xff
}
 800d00e:	4618      	mov	r0, r3
 800d010:	3728      	adds	r7, #40	@ 0x28
 800d012:	46bd      	mov	sp, r7
 800d014:	bd80      	pop	{r7, pc}
	...

0800d018 <PrintKey>:
static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac );

/* Private functions ---------------------------------------------------------*/
static void PrintKey( KeyIdentifier_t keyID )
{
 800d018:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d01a:	b0a1      	sub	sp, #132	@ 0x84
 800d01c:	af12      	add	r7, sp, #72	@ 0x48
 800d01e:	4603      	mov	r3, r0
 800d020:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
#if (KEY_EXTRACTABLE == 1)
#if (LORAWAN_KMS == 0)
    Key_t *keyItem;
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, &keyItem ) )
 800d024:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800d028:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d02c:	4611      	mov	r1, r2
 800d02e:	4618      	mov	r0, r3
 800d030:	f000 fa12 	bl	800d458 <SecureElementGetKeyByID>
 800d034:	4603      	mov	r3, r0
 800d036:	2b00      	cmp	r3, #0
 800d038:	d174      	bne.n	800d124 <PrintKey+0x10c>
#else
    uint8_t extractable_key[SE_KEY_SIZE] = {0};
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, ( uint8_t * )extractable_key ) )
#endif /* LORAWAN_KMS */
    {
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800d03a:	2300      	movs	r3, #0
 800d03c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800d040:	e06c      	b.n	800d11c <PrintKey+0x104>
        {
            if( KeyLabel[i].keyID == keyID )
 800d042:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800d046:	4939      	ldr	r1, [pc, #228]	@ (800d12c <PrintKey+0x114>)
 800d048:	4613      	mov	r3, r2
 800d04a:	005b      	lsls	r3, r3, #1
 800d04c:	4413      	add	r3, r2
 800d04e:	009b      	lsls	r3, r3, #2
 800d050:	440b      	add	r3, r1
 800d052:	781b      	ldrb	r3, [r3, #0]
 800d054:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800d058:	429a      	cmp	r2, r3
 800d05a:	d15a      	bne.n	800d112 <PrintKey+0xfa>
            {
#if (LORAWAN_KMS == 0)
                MW_LOG( TS_OFF, VLEVEL_M,
 800d05c:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800d060:	4932      	ldr	r1, [pc, #200]	@ (800d12c <PrintKey+0x114>)
 800d062:	4613      	mov	r3, r2
 800d064:	005b      	lsls	r3, r3, #1
 800d066:	4413      	add	r3, r2
 800d068:	009b      	lsls	r3, r3, #2
 800d06a:	440b      	add	r3, r1
 800d06c:	3308      	adds	r3, #8
 800d06e:	6819      	ldr	r1, [r3, #0]
 800d070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d072:	785b      	ldrb	r3, [r3, #1]
 800d074:	461d      	mov	r5, r3
 800d076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d078:	789b      	ldrb	r3, [r3, #2]
 800d07a:	461e      	mov	r6, r3
 800d07c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d07e:	78db      	ldrb	r3, [r3, #3]
 800d080:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d084:	791b      	ldrb	r3, [r3, #4]
 800d086:	627b      	str	r3, [r7, #36]	@ 0x24
 800d088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d08a:	795b      	ldrb	r3, [r3, #5]
 800d08c:	623b      	str	r3, [r7, #32]
 800d08e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d090:	799b      	ldrb	r3, [r3, #6]
 800d092:	61fb      	str	r3, [r7, #28]
 800d094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d096:	79db      	ldrb	r3, [r3, #7]
 800d098:	61bb      	str	r3, [r7, #24]
 800d09a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d09c:	7a1b      	ldrb	r3, [r3, #8]
 800d09e:	617b      	str	r3, [r7, #20]
 800d0a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0a2:	7a5b      	ldrb	r3, [r3, #9]
 800d0a4:	613b      	str	r3, [r7, #16]
 800d0a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0a8:	7a9b      	ldrb	r3, [r3, #10]
 800d0aa:	60fb      	str	r3, [r7, #12]
 800d0ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0ae:	7adb      	ldrb	r3, [r3, #11]
 800d0b0:	60bb      	str	r3, [r7, #8]
 800d0b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0b4:	7b1b      	ldrb	r3, [r3, #12]
 800d0b6:	607b      	str	r3, [r7, #4]
 800d0b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0ba:	7b5b      	ldrb	r3, [r3, #13]
 800d0bc:	461c      	mov	r4, r3
 800d0be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0c0:	7b9b      	ldrb	r3, [r3, #14]
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0c6:	7bdb      	ldrb	r3, [r3, #15]
 800d0c8:	461a      	mov	r2, r3
 800d0ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0cc:	7c1b      	ldrb	r3, [r3, #16]
 800d0ce:	9310      	str	r3, [sp, #64]	@ 0x40
 800d0d0:	920f      	str	r2, [sp, #60]	@ 0x3c
 800d0d2:	900e      	str	r0, [sp, #56]	@ 0x38
 800d0d4:	940d      	str	r4, [sp, #52]	@ 0x34
 800d0d6:	687a      	ldr	r2, [r7, #4]
 800d0d8:	920c      	str	r2, [sp, #48]	@ 0x30
 800d0da:	68ba      	ldr	r2, [r7, #8]
 800d0dc:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d0de:	68fa      	ldr	r2, [r7, #12]
 800d0e0:	920a      	str	r2, [sp, #40]	@ 0x28
 800d0e2:	693a      	ldr	r2, [r7, #16]
 800d0e4:	9209      	str	r2, [sp, #36]	@ 0x24
 800d0e6:	697a      	ldr	r2, [r7, #20]
 800d0e8:	9208      	str	r2, [sp, #32]
 800d0ea:	69ba      	ldr	r2, [r7, #24]
 800d0ec:	9207      	str	r2, [sp, #28]
 800d0ee:	69fa      	ldr	r2, [r7, #28]
 800d0f0:	9206      	str	r2, [sp, #24]
 800d0f2:	6a3a      	ldr	r2, [r7, #32]
 800d0f4:	9205      	str	r2, [sp, #20]
 800d0f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d0f8:	9204      	str	r2, [sp, #16]
 800d0fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0fc:	9303      	str	r3, [sp, #12]
 800d0fe:	9602      	str	r6, [sp, #8]
 800d100:	9501      	str	r5, [sp, #4]
 800d102:	9100      	str	r1, [sp, #0]
 800d104:	4b0a      	ldr	r3, [pc, #40]	@ (800d130 <PrintKey+0x118>)
 800d106:	2200      	movs	r2, #0
 800d108:	2100      	movs	r1, #0
 800d10a:	2002      	movs	r0, #2
 800d10c:	f011 fb72 	bl	801e7f4 <UTIL_ADV_TRACE_COND_FSend>
 800d110:	e008      	b.n	800d124 <PrintKey+0x10c>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800d112:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d116:	3301      	adds	r3, #1
 800d118:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800d11c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d120:	2b0a      	cmp	r3, #10
 800d122:	d98e      	bls.n	800d042 <PrintKey+0x2a>
                return;
            }
        }
    }
#endif /* KEY_EXTRACTABLE */
}
 800d124:	373c      	adds	r7, #60	@ 0x3c
 800d126:	46bd      	mov	sp, r7
 800d128:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d12a:	bf00      	nop
 800d12c:	0801fb7c 	.word	0x0801fb7c
 800d130:	0801f3e8 	.word	0x0801f3e8

0800d134 <PrintIds>:

static void PrintIds( ActivationType_t mode )
{
 800d134:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d136:	b091      	sub	sp, #68	@ 0x44
 800d138:	af08      	add	r7, sp, #32
 800d13a:	4603      	mov	r3, r0
 800d13c:	71fb      	strb	r3, [r7, #7]
    uint8_t joinEui[SE_EUI_SIZE];
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddr = 0;
 800d13e:	2300      	movs	r3, #0
 800d140:	60fb      	str	r3, [r7, #12]

    SecureElementGetDevEui( devEui );
 800d142:	f107 0310 	add.w	r3, r7, #16
 800d146:	4618      	mov	r0, r3
 800d148:	f000 fbda 	bl	800d900 <SecureElementGetDevEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( devEui ) );
 800d14c:	7c3b      	ldrb	r3, [r7, #16]
 800d14e:	7c7a      	ldrb	r2, [r7, #17]
 800d150:	7cb9      	ldrb	r1, [r7, #18]
 800d152:	7cf8      	ldrb	r0, [r7, #19]
 800d154:	7d3c      	ldrb	r4, [r7, #20]
 800d156:	7d7d      	ldrb	r5, [r7, #21]
 800d158:	7dbe      	ldrb	r6, [r7, #22]
 800d15a:	f897 c017 	ldrb.w	ip, [r7, #23]
 800d15e:	f8cd c01c 	str.w	ip, [sp, #28]
 800d162:	9606      	str	r6, [sp, #24]
 800d164:	9505      	str	r5, [sp, #20]
 800d166:	9404      	str	r4, [sp, #16]
 800d168:	9003      	str	r0, [sp, #12]
 800d16a:	9102      	str	r1, [sp, #8]
 800d16c:	9201      	str	r2, [sp, #4]
 800d16e:	9300      	str	r3, [sp, #0]
 800d170:	4b24      	ldr	r3, [pc, #144]	@ (800d204 <PrintIds+0xd0>)
 800d172:	2200      	movs	r2, #0
 800d174:	2100      	movs	r1, #0
 800d176:	2002      	movs	r0, #2
 800d178:	f011 fb3c 	bl	801e7f4 <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetJoinEui( joinEui );
 800d17c:	f107 0318 	add.w	r3, r7, #24
 800d180:	4618      	mov	r0, r3
 800d182:	f000 fbed 	bl	800d960 <SecureElementGetJoinEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### AppEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( joinEui ) );
 800d186:	7e3b      	ldrb	r3, [r7, #24]
 800d188:	7e7a      	ldrb	r2, [r7, #25]
 800d18a:	7eb9      	ldrb	r1, [r7, #26]
 800d18c:	7ef8      	ldrb	r0, [r7, #27]
 800d18e:	7f3c      	ldrb	r4, [r7, #28]
 800d190:	7f7d      	ldrb	r5, [r7, #29]
 800d192:	7fbe      	ldrb	r6, [r7, #30]
 800d194:	f897 c01f 	ldrb.w	ip, [r7, #31]
 800d198:	f8cd c01c 	str.w	ip, [sp, #28]
 800d19c:	9606      	str	r6, [sp, #24]
 800d19e:	9505      	str	r5, [sp, #20]
 800d1a0:	9404      	str	r4, [sp, #16]
 800d1a2:	9003      	str	r0, [sp, #12]
 800d1a4:	9102      	str	r1, [sp, #8]
 800d1a6:	9201      	str	r2, [sp, #4]
 800d1a8:	9300      	str	r3, [sp, #0]
 800d1aa:	4b17      	ldr	r3, [pc, #92]	@ (800d208 <PrintIds+0xd4>)
 800d1ac:	2200      	movs	r2, #0
 800d1ae:	2100      	movs	r1, #0
 800d1b0:	2002      	movs	r0, #2
 800d1b2:	f011 fb1f 	bl	801e7f4 <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetDevAddr( mode, &devAddr );
 800d1b6:	f107 020c 	add.w	r2, r7, #12
 800d1ba:	79fb      	ldrb	r3, [r7, #7]
 800d1bc:	4611      	mov	r1, r2
 800d1be:	4618      	mov	r0, r3
 800d1c0:	f000 fc00 	bl	800d9c4 <SecureElementGetDevAddr>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 800d1c4:	f107 030c 	add.w	r3, r7, #12
 800d1c8:	3303      	adds	r3, #3
 800d1ca:	781b      	ldrb	r3, [r3, #0]
 800d1cc:	461a      	mov	r2, r3
 800d1ce:	f107 030c 	add.w	r3, r7, #12
 800d1d2:	3302      	adds	r3, #2
 800d1d4:	781b      	ldrb	r3, [r3, #0]
 800d1d6:	4619      	mov	r1, r3
 800d1d8:	f107 030c 	add.w	r3, r7, #12
 800d1dc:	3301      	adds	r3, #1
 800d1de:	781b      	ldrb	r3, [r3, #0]
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	f107 030c 	add.w	r3, r7, #12
 800d1e6:	781b      	ldrb	r3, [r3, #0]
 800d1e8:	9303      	str	r3, [sp, #12]
 800d1ea:	9002      	str	r0, [sp, #8]
 800d1ec:	9101      	str	r1, [sp, #4]
 800d1ee:	9200      	str	r2, [sp, #0]
 800d1f0:	4b06      	ldr	r3, [pc, #24]	@ (800d20c <PrintIds+0xd8>)
 800d1f2:	2200      	movs	r2, #0
 800d1f4:	2100      	movs	r1, #0
 800d1f6:	2002      	movs	r0, #2
 800d1f8:	f011 fafc 	bl	801e7f4 <UTIL_ADV_TRACE_COND_FSend>
            ( unsigned )( ( unsigned char * )( &devAddr ) )[3],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[2],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[1],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[0] );
}
 800d1fc:	bf00      	nop
 800d1fe:	3724      	adds	r7, #36	@ 0x24
 800d200:	46bd      	mov	sp, r7
 800d202:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d204:	0801f444 	.word	0x0801f444
 800d208:	0801f484 	.word	0x0801f484
 800d20c:	0801f4c4 	.word	0x0801f4c4

0800d210 <GetKeyByID>:

#if (LORAWAN_KMS == 0)
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800d210:	b480      	push	{r7}
 800d212:	b085      	sub	sp, #20
 800d214:	af00      	add	r7, sp, #0
 800d216:	4603      	mov	r3, r0
 800d218:	6039      	str	r1, [r7, #0]
 800d21a:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800d21c:	2300      	movs	r3, #0
 800d21e:	73fb      	strb	r3, [r7, #15]
 800d220:	e01a      	b.n	800d258 <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800d222:	4b12      	ldr	r3, [pc, #72]	@ (800d26c <GetKeyByID+0x5c>)
 800d224:	6819      	ldr	r1, [r3, #0]
 800d226:	7bfa      	ldrb	r2, [r7, #15]
 800d228:	4613      	mov	r3, r2
 800d22a:	011b      	lsls	r3, r3, #4
 800d22c:	4413      	add	r3, r2
 800d22e:	440b      	add	r3, r1
 800d230:	3318      	adds	r3, #24
 800d232:	781b      	ldrb	r3, [r3, #0]
 800d234:	79fa      	ldrb	r2, [r7, #7]
 800d236:	429a      	cmp	r2, r3
 800d238:	d10b      	bne.n	800d252 <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800d23a:	4b0c      	ldr	r3, [pc, #48]	@ (800d26c <GetKeyByID+0x5c>)
 800d23c:	6819      	ldr	r1, [r3, #0]
 800d23e:	7bfa      	ldrb	r2, [r7, #15]
 800d240:	4613      	mov	r3, r2
 800d242:	011b      	lsls	r3, r3, #4
 800d244:	4413      	add	r3, r2
 800d246:	3318      	adds	r3, #24
 800d248:	18ca      	adds	r2, r1, r3
 800d24a:	683b      	ldr	r3, [r7, #0]
 800d24c:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800d24e:	2300      	movs	r3, #0
 800d250:	e006      	b.n	800d260 <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800d252:	7bfb      	ldrb	r3, [r7, #15]
 800d254:	3301      	adds	r3, #1
 800d256:	73fb      	strb	r3, [r7, #15]
 800d258:	7bfb      	ldrb	r3, [r7, #15]
 800d25a:	2b0a      	cmp	r3, #10
 800d25c:	d9e1      	bls.n	800d222 <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800d25e:	2303      	movs	r3, #3
}
 800d260:	4618      	mov	r0, r3
 800d262:	3714      	adds	r7, #20
 800d264:	46bd      	mov	sp, r7
 800d266:	bc80      	pop	{r7}
 800d268:	4770      	bx	lr
 800d26a:	bf00      	nop
 800d26c:	20000508 	.word	0x20000508

0800d270 <ComputeCmac>:
}
#endif /* LORAWAN_KMS */

static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac )
{
 800d270:	b590      	push	{r4, r7, lr}
 800d272:	b0d1      	sub	sp, #324	@ 0x144
 800d274:	af00      	add	r7, sp, #0
 800d276:	f507 74a0 	add.w	r4, r7, #320	@ 0x140
 800d27a:	f5a4 749a 	sub.w	r4, r4, #308	@ 0x134
 800d27e:	6020      	str	r0, [r4, #0]
 800d280:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 800d284:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 800d288:	6001      	str	r1, [r0, #0]
 800d28a:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 800d28e:	f5a1 719e 	sub.w	r1, r1, #316	@ 0x13c
 800d292:	600a      	str	r2, [r1, #0]
 800d294:	461a      	mov	r2, r3
 800d296:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d29a:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 800d29e:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800d2a0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d2a4:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d003      	beq.n	800d2b6 <ComputeCmac+0x46>
 800d2ae:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d101      	bne.n	800d2ba <ComputeCmac+0x4a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d2b6:	2302      	movs	r3, #2
 800d2b8:	e05d      	b.n	800d376 <ComputeCmac+0x106>

#if (LORAWAN_KMS == 0)
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800d2ba:	f107 0314 	add.w	r3, r7, #20
 800d2be:	4618      	mov	r0, r3
 800d2c0:	f7fe ff02 	bl	800c0c8 <AES_CMAC_Init>

    Key_t                *keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800d2c4:	f107 0210 	add.w	r2, r7, #16
 800d2c8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d2cc:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 800d2d0:	781b      	ldrb	r3, [r3, #0]
 800d2d2:	4611      	mov	r1, r2
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	f7ff ff9b 	bl	800d210 <GetKeyByID>
 800d2da:	4603      	mov	r3, r0
 800d2dc:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800d2e0:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d144      	bne.n	800d372 <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800d2e8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d2ec:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	1c5a      	adds	r2, r3, #1
 800d2f4:	f107 0314 	add.w	r3, r7, #20
 800d2f8:	4611      	mov	r1, r2
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	f7fe fefd 	bl	800c0fa <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800d300:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d304:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d009      	beq.n	800d322 <ComputeCmac+0xb2>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, MIC_BLOCK_BX_SIZE );
 800d30e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d312:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800d316:	f107 0014 	add.w	r0, r7, #20
 800d31a:	2210      	movs	r2, #16
 800d31c:	6819      	ldr	r1, [r3, #0]
 800d31e:	f7fe fefb 	bl	800c118 <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800d322:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d326:	f5a3 729e 	sub.w	r2, r3, #316	@ 0x13c
 800d32a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d32e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800d332:	f107 0014 	add.w	r0, r7, #20
 800d336:	6812      	ldr	r2, [r2, #0]
 800d338:	6819      	ldr	r1, [r3, #0]
 800d33a:	f7fe feed 	bl	800c118 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800d33e:	f107 0214 	add.w	r2, r7, #20
 800d342:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 800d346:	4611      	mov	r1, r2
 800d348:	4618      	mov	r0, r3
 800d34a:	f7fe ffa7 	bl	800c29c <AES_CMAC_Final>

        /* Bring into the required format */
        *cmac = GET_UINT32_LE( Cmac, 0 );
 800d34e:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 800d352:	461a      	mov	r2, r3
 800d354:	f897 312d 	ldrb.w	r3, [r7, #301]	@ 0x12d
 800d358:	021b      	lsls	r3, r3, #8
 800d35a:	431a      	orrs	r2, r3
 800d35c:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 800d360:	041b      	lsls	r3, r3, #16
 800d362:	431a      	orrs	r2, r3
 800d364:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800d368:	061b      	lsls	r3, r3, #24
 800d36a:	431a      	orrs	r2, r3
 800d36c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800d370:	601a      	str	r2, [r3, #0]
    if( rv != CKR_OK )
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800d372:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
}
 800d376:	4618      	mov	r0, r3
 800d378:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 800d37c:	46bd      	mov	sp, r7
 800d37e:	bd90      	pop	{r4, r7, pc}

0800d380 <SecureElementInit>:
/* Exported functions ---------------------------------------------------------*/
/*
 * API functions
 */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm )
{
 800d380:	b580      	push	{r7, lr}
 800d382:	b082      	sub	sp, #8
 800d384:	af00      	add	r7, sp, #0
 800d386:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d101      	bne.n	800d392 <SecureElementInit+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d38e:	2302      	movs	r3, #2
 800d390:	e00a      	b.n	800d3a8 <SecureElementInit+0x28>
    }

    /* Initialize nvm pointer */
    SeNvm = nvm;
 800d392:	4a07      	ldr	r2, [pc, #28]	@ (800d3b0 <SecureElementInit+0x30>)
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	6013      	str	r3, [r2, #0]

#if (LORAWAN_KMS == 0)
    /* Initialize data */
    memcpy1( ( uint8_t * )SeNvm, ( uint8_t * )&seNvmInit, sizeof( seNvmInit ) );
 800d398:	4b05      	ldr	r3, [pc, #20]	@ (800d3b0 <SecureElementInit+0x30>)
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	22d8      	movs	r2, #216	@ 0xd8
 800d39e:	4905      	ldr	r1, [pc, #20]	@ (800d3b4 <SecureElementInit+0x34>)
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	f00c fe86 	bl	801a0b2 <memcpy1>
        ( void )C_CloseSession( session );
    }

#endif /* LORAWAN_KMS */

    return SECURE_ELEMENT_SUCCESS;
 800d3a6:	2300      	movs	r3, #0
}
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	3708      	adds	r7, #8
 800d3ac:	46bd      	mov	sp, r7
 800d3ae:	bd80      	pop	{r7, pc}
 800d3b0:	20000508 	.word	0x20000508
 800d3b4:	0801fe1c 	.word	0x0801fe1c

0800d3b8 <SecureElementInitMcuID>:

SecureElementStatus_t SecureElementInitMcuID( SecureElementGetUniqueId_t seGetUniqueId,
                                              SecureElementGetDevAddr_t seGetDevAddr )
{
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	b086      	sub	sp, #24
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	6078      	str	r0, [r7, #4]
 800d3c0:	6039      	str	r1, [r7, #0]
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddrABP = 0;
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	60bb      	str	r3, [r7, #8]

    SecureElementGetDevEui( devEui );
 800d3c6:	f107 030c 	add.w	r3, r7, #12
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	f000 fa98 	bl	800d900 <SecureElementGetDevEui>
    SecureElementGetDevAddr( ACTIVATION_TYPE_ABP, &devAddrABP );
 800d3d0:	f107 0308 	add.w	r3, r7, #8
 800d3d4:	4619      	mov	r1, r3
 800d3d6:	2001      	movs	r0, #1
 800d3d8:	f000 faf4 	bl	800d9c4 <SecureElementGetDevAddr>

    if( seGetUniqueId != NULL )
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d024      	beq.n	800d42c <SecureElementInitMcuID+0x74>
    {
        bool id_init = false;
 800d3e2:	2300      	movs	r3, #0
 800d3e4:	75fb      	strb	r3, [r7, #23]
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	75bb      	strb	r3, [r7, #22]
 800d3ea:	e00c      	b.n	800d406 <SecureElementInitMcuID+0x4e>
        {
            if( devEui[index] != 0 )
 800d3ec:	7dbb      	ldrb	r3, [r7, #22]
 800d3ee:	3318      	adds	r3, #24
 800d3f0:	443b      	add	r3, r7
 800d3f2:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d002      	beq.n	800d400 <SecureElementInitMcuID+0x48>
            {
                id_init = true;
 800d3fa:	2301      	movs	r3, #1
 800d3fc:	75fb      	strb	r3, [r7, #23]
                break;
 800d3fe:	e005      	b.n	800d40c <SecureElementInitMcuID+0x54>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800d400:	7dbb      	ldrb	r3, [r7, #22]
 800d402:	3301      	adds	r3, #1
 800d404:	75bb      	strb	r3, [r7, #22]
 800d406:	7dbb      	ldrb	r3, [r7, #22]
 800d408:	2b07      	cmp	r3, #7
 800d40a:	d9ef      	bls.n	800d3ec <SecureElementInitMcuID+0x34>
            }
        }
        if( id_init == false )
 800d40c:	7dfb      	ldrb	r3, [r7, #23]
 800d40e:	f083 0301 	eor.w	r3, r3, #1
 800d412:	b2db      	uxtb	r3, r3
 800d414:	2b00      	cmp	r3, #0
 800d416:	d009      	beq.n	800d42c <SecureElementInitMcuID+0x74>
        {
            /* Get a DevEUI from MCU unique ID */
            seGetUniqueId( devEui );
 800d418:	f107 020c 	add.w	r2, r7, #12
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	4610      	mov	r0, r2
 800d420:	4798      	blx	r3
            SecureElementSetDevEui( devEui );
 800d422:	f107 030c 	add.w	r3, r7, #12
 800d426:	4618      	mov	r0, r3
 800d428:	f000 fa52 	bl	800d8d0 <SecureElementSetDevEui>
        }
    }

    if( ( seGetDevAddr != NULL ) && ( devAddrABP == 0 ) )
 800d42c:	683b      	ldr	r3, [r7, #0]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d00c      	beq.n	800d44c <SecureElementInitMcuID+0x94>
 800d432:	68bb      	ldr	r3, [r7, #8]
 800d434:	2b00      	cmp	r3, #0
 800d436:	d109      	bne.n	800d44c <SecureElementInitMcuID+0x94>
    {
        /* callback to dynamic DevAddr generation */
        seGetDevAddr( &devAddrABP );
 800d438:	f107 0208 	add.w	r2, r7, #8
 800d43c:	683b      	ldr	r3, [r7, #0]
 800d43e:	4610      	mov	r0, r2
 800d440:	4798      	blx	r3
        SecureElementSetDevAddr( ACTIVATION_TYPE_ABP, devAddrABP );
 800d442:	68bb      	ldr	r3, [r7, #8]
 800d444:	4619      	mov	r1, r3
 800d446:	2001      	movs	r0, #1
 800d448:	f000 faa2 	bl	800d990 <SecureElementSetDevAddr>
    }

    return SECURE_ELEMENT_SUCCESS;
 800d44c:	2300      	movs	r3, #0
}
 800d44e:	4618      	mov	r0, r3
 800d450:	3718      	adds	r7, #24
 800d452:	46bd      	mov	sp, r7
 800d454:	bd80      	pop	{r7, pc}
	...

0800d458 <SecureElementGetKeyByID>:

#if (LORAWAN_KMS == 0)
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800d458:	b480      	push	{r7}
 800d45a:	b085      	sub	sp, #20
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	4603      	mov	r3, r0
 800d460:	6039      	str	r1, [r7, #0]
 800d462:	71fb      	strb	r3, [r7, #7]
#if (KEY_EXTRACTABLE == 1)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800d464:	2300      	movs	r3, #0
 800d466:	73fb      	strb	r3, [r7, #15]
 800d468:	e01a      	b.n	800d4a0 <SecureElementGetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800d46a:	4b12      	ldr	r3, [pc, #72]	@ (800d4b4 <SecureElementGetKeyByID+0x5c>)
 800d46c:	6819      	ldr	r1, [r3, #0]
 800d46e:	7bfa      	ldrb	r2, [r7, #15]
 800d470:	4613      	mov	r3, r2
 800d472:	011b      	lsls	r3, r3, #4
 800d474:	4413      	add	r3, r2
 800d476:	440b      	add	r3, r1
 800d478:	3318      	adds	r3, #24
 800d47a:	781b      	ldrb	r3, [r3, #0]
 800d47c:	79fa      	ldrb	r2, [r7, #7]
 800d47e:	429a      	cmp	r2, r3
 800d480:	d10b      	bne.n	800d49a <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800d482:	4b0c      	ldr	r3, [pc, #48]	@ (800d4b4 <SecureElementGetKeyByID+0x5c>)
 800d484:	6819      	ldr	r1, [r3, #0]
 800d486:	7bfa      	ldrb	r2, [r7, #15]
 800d488:	4613      	mov	r3, r2
 800d48a:	011b      	lsls	r3, r3, #4
 800d48c:	4413      	add	r3, r2
 800d48e:	3318      	adds	r3, #24
 800d490:	18ca      	adds	r2, r1, r3
 800d492:	683b      	ldr	r3, [r7, #0]
 800d494:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800d496:	2300      	movs	r3, #0
 800d498:	e006      	b.n	800d4a8 <SecureElementGetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800d49a:	7bfb      	ldrb	r3, [r7, #15]
 800d49c:	3301      	adds	r3, #1
 800d49e:	73fb      	strb	r3, [r7, #15]
 800d4a0:	7bfb      	ldrb	r3, [r7, #15]
 800d4a2:	2b0a      	cmp	r3, #10
 800d4a4:	d9e1      	bls.n	800d46a <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800d4a6:	2303      	movs	r3, #3
}
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	3714      	adds	r7, #20
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	bc80      	pop	{r7}
 800d4b0:	4770      	bx	lr
 800d4b2:	bf00      	nop
 800d4b4:	20000508 	.word	0x20000508

0800d4b8 <SecureElementPrintKeys>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAWAN_KMS */

SecureElementStatus_t SecureElementPrintKeys( void )
{
 800d4b8:	b580      	push	{r7, lr}
 800d4ba:	af00      	add	r7, sp, #0
    PrintKey( APP_KEY );
 800d4bc:	2000      	movs	r0, #0
 800d4be:	f7ff fdab 	bl	800d018 <PrintKey>
    PrintKey( NWK_KEY );
 800d4c2:	2001      	movs	r0, #1
 800d4c4:	f7ff fda8 	bl	800d018 <PrintKey>
    PrintKey( APP_S_KEY );
 800d4c8:	2009      	movs	r0, #9
 800d4ca:	f7ff fda5 	bl	800d018 <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 800d4ce:	2008      	movs	r0, #8
 800d4d0:	f7ff fda2 	bl	800d018 <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintIds( ACTIVATION_TYPE_NONE );
 800d4d4:	2000      	movs	r0, #0
 800d4d6:	f7ff fe2d 	bl	800d134 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 800d4da:	2300      	movs	r3, #0
}
 800d4dc:	4618      	mov	r0, r3
 800d4de:	bd80      	pop	{r7, pc}

0800d4e0 <SecureElementPrintSessionKeys>:

SecureElementStatus_t SecureElementPrintSessionKeys( ActivationType_t mode )
{
 800d4e0:	b580      	push	{r7, lr}
 800d4e2:	b082      	sub	sp, #8
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	4603      	mov	r3, r0
 800d4e8:	71fb      	strb	r3, [r7, #7]
    PrintKey( MC_ROOT_KEY );
 800d4ea:	200b      	movs	r0, #11
 800d4ec:	f7ff fd94 	bl	800d018 <PrintKey>
    PrintKey( MC_KE_KEY );
 800d4f0:	200c      	movs	r0, #12
 800d4f2:	f7ff fd91 	bl	800d018 <PrintKey>
    PrintKey( APP_S_KEY );
 800d4f6:	2009      	movs	r0, #9
 800d4f8:	f7ff fd8e 	bl	800d018 <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 800d4fc:	2008      	movs	r0, #8
 800d4fe:	f7ff fd8b 	bl	800d018 <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintKey( DATABLOCK_INT_KEY );
 800d502:	200a      	movs	r0, #10
 800d504:	f7ff fd88 	bl	800d018 <PrintKey>
    PrintIds( mode );
 800d508:	79fb      	ldrb	r3, [r7, #7]
 800d50a:	4618      	mov	r0, r3
 800d50c:	f7ff fe12 	bl	800d134 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 800d510:	2300      	movs	r3, #0
}
 800d512:	4618      	mov	r0, r3
 800d514:	3708      	adds	r7, #8
 800d516:	46bd      	mov	sp, r7
 800d518:	bd80      	pop	{r7, pc}
	...

0800d51c <SecureElementSetKey>:
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t *key )
{
 800d51c:	b580      	push	{r7, lr}
 800d51e:	b088      	sub	sp, #32
 800d520:	af00      	add	r7, sp, #0
 800d522:	4603      	mov	r3, r0
 800d524:	6039      	str	r1, [r7, #0]
 800d526:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800d528:	683b      	ldr	r3, [r7, #0]
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d101      	bne.n	800d532 <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d52e:	2302      	movs	r3, #2
 800d530:	e04c      	b.n	800d5cc <SecureElementSetKey+0xb0>
    }

#if (LORAWAN_KMS == 0)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800d532:	2300      	movs	r3, #0
 800d534:	77fb      	strb	r3, [r7, #31]
 800d536:	e045      	b.n	800d5c4 <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800d538:	4b26      	ldr	r3, [pc, #152]	@ (800d5d4 <SecureElementSetKey+0xb8>)
 800d53a:	6819      	ldr	r1, [r3, #0]
 800d53c:	7ffa      	ldrb	r2, [r7, #31]
 800d53e:	4613      	mov	r3, r2
 800d540:	011b      	lsls	r3, r3, #4
 800d542:	4413      	add	r3, r2
 800d544:	440b      	add	r3, r1
 800d546:	3318      	adds	r3, #24
 800d548:	781b      	ldrb	r3, [r3, #0]
 800d54a:	79fa      	ldrb	r2, [r7, #7]
 800d54c:	429a      	cmp	r2, r3
 800d54e:	d136      	bne.n	800d5be <SecureElementSetKey+0xa2>
        {
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if( keyID == MC_KEY_0 )
 800d550:	79fb      	ldrb	r3, [r7, #7]
 800d552:	2b0d      	cmp	r3, #13
 800d554:	d123      	bne.n	800d59e <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            {
                /* Decrypt the key if its a Mckey */
                SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800d556:	2306      	movs	r3, #6
 800d558:	77bb      	strb	r3, [r7, #30]
                uint8_t decryptedKey[SE_KEY_SIZE] = { 0 };
 800d55a:	2300      	movs	r3, #0
 800d55c:	60fb      	str	r3, [r7, #12]
 800d55e:	f107 0310 	add.w	r3, r7, #16
 800d562:	2200      	movs	r2, #0
 800d564:	601a      	str	r2, [r3, #0]
 800d566:	605a      	str	r2, [r3, #4]
 800d568:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, SE_KEY_SIZE, MC_KE_KEY, decryptedKey );
 800d56a:	f107 030c 	add.w	r3, r7, #12
 800d56e:	220c      	movs	r2, #12
 800d570:	2110      	movs	r1, #16
 800d572:	6838      	ldr	r0, [r7, #0]
 800d574:	f000 f876 	bl	800d664 <SecureElementAesEncrypt>
 800d578:	4603      	mov	r3, r0
 800d57a:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800d57c:	4b15      	ldr	r3, [pc, #84]	@ (800d5d4 <SecureElementSetKey+0xb8>)
 800d57e:	6819      	ldr	r1, [r3, #0]
 800d580:	7ffa      	ldrb	r2, [r7, #31]
 800d582:	4613      	mov	r3, r2
 800d584:	011b      	lsls	r3, r3, #4
 800d586:	4413      	add	r3, r2
 800d588:	3318      	adds	r3, #24
 800d58a:	440b      	add	r3, r1
 800d58c:	3301      	adds	r3, #1
 800d58e:	f107 010c 	add.w	r1, r7, #12
 800d592:	2210      	movs	r2, #16
 800d594:	4618      	mov	r0, r3
 800d596:	f00c fd8c 	bl	801a0b2 <memcpy1>
                return retval;
 800d59a:	7fbb      	ldrb	r3, [r7, #30]
 800d59c:	e016      	b.n	800d5cc <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800d59e:	4b0d      	ldr	r3, [pc, #52]	@ (800d5d4 <SecureElementSetKey+0xb8>)
 800d5a0:	6819      	ldr	r1, [r3, #0]
 800d5a2:	7ffa      	ldrb	r2, [r7, #31]
 800d5a4:	4613      	mov	r3, r2
 800d5a6:	011b      	lsls	r3, r3, #4
 800d5a8:	4413      	add	r3, r2
 800d5aa:	3318      	adds	r3, #24
 800d5ac:	440b      	add	r3, r1
 800d5ae:	3301      	adds	r3, #1
 800d5b0:	2210      	movs	r2, #16
 800d5b2:	6839      	ldr	r1, [r7, #0]
 800d5b4:	4618      	mov	r0, r3
 800d5b6:	f00c fd7c 	bl	801a0b2 <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	e006      	b.n	800d5cc <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800d5be:	7ffb      	ldrb	r3, [r7, #31]
 800d5c0:	3301      	adds	r3, #1
 800d5c2:	77fb      	strb	r3, [r7, #31]
 800d5c4:	7ffb      	ldrb	r3, [r7, #31]
 800d5c6:	2b0a      	cmp	r3, #10
 800d5c8:	d9b6      	bls.n	800d538 <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800d5ca:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	3720      	adds	r7, #32
 800d5d0:	46bd      	mov	sp, r7
 800d5d2:	bd80      	pop	{r7, pc}
 800d5d4:	20000508 	.word	0x20000508

0800d5d8 <SecureElementComputeAesCmac>:
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size,
                                                   KeyIdentifier_t keyID, uint32_t *cmac )
{
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	b086      	sub	sp, #24
 800d5dc:	af02      	add	r7, sp, #8
 800d5de:	60f8      	str	r0, [r7, #12]
 800d5e0:	60b9      	str	r1, [r7, #8]
 800d5e2:	607a      	str	r2, [r7, #4]
 800d5e4:	70fb      	strb	r3, [r7, #3]
    if( keyID >= MC_KE_KEY )
 800d5e6:	78fb      	ldrb	r3, [r7, #3]
 800d5e8:	2b0b      	cmp	r3, #11
 800d5ea:	d901      	bls.n	800d5f0 <SecureElementComputeAesCmac+0x18>
    {
        /* Never accept multicast key identifier for cmac computation */
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800d5ec:	2303      	movs	r3, #3
 800d5ee:	e009      	b.n	800d604 <SecureElementComputeAesCmac+0x2c>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800d5f0:	78fa      	ldrb	r2, [r7, #3]
 800d5f2:	69bb      	ldr	r3, [r7, #24]
 800d5f4:	9300      	str	r3, [sp, #0]
 800d5f6:	4613      	mov	r3, r2
 800d5f8:	687a      	ldr	r2, [r7, #4]
 800d5fa:	68b9      	ldr	r1, [r7, #8]
 800d5fc:	68f8      	ldr	r0, [r7, #12]
 800d5fe:	f7ff fe37 	bl	800d270 <ComputeCmac>
 800d602:	4603      	mov	r3, r0
}
 800d604:	4618      	mov	r0, r3
 800d606:	3710      	adds	r7, #16
 800d608:	46bd      	mov	sp, r7
 800d60a:	bd80      	pop	{r7, pc}

0800d60c <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t *buffer, uint32_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800d60c:	b580      	push	{r7, lr}
 800d60e:	b088      	sub	sp, #32
 800d610:	af02      	add	r7, sp, #8
 800d612:	60f8      	str	r0, [r7, #12]
 800d614:	60b9      	str	r1, [r7, #8]
 800d616:	607a      	str	r2, [r7, #4]
 800d618:	70fb      	strb	r3, [r7, #3]
    if( buffer == NULL )
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d101      	bne.n	800d624 <SecureElementVerifyAesCmac+0x18>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d620:	2302      	movs	r3, #2
 800d622:	e01b      	b.n	800d65c <SecureElementVerifyAesCmac+0x50>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800d624:	2306      	movs	r3, #6
 800d626:	75fb      	strb	r3, [r7, #23]
#if (LORAWAN_KMS == 0)
    uint32_t              compCmac = 0;
 800d628:	2300      	movs	r3, #0
 800d62a:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800d62c:	78fa      	ldrb	r2, [r7, #3]
 800d62e:	f107 0310 	add.w	r3, r7, #16
 800d632:	9300      	str	r3, [sp, #0]
 800d634:	4613      	mov	r3, r2
 800d636:	68ba      	ldr	r2, [r7, #8]
 800d638:	68f9      	ldr	r1, [r7, #12]
 800d63a:	2000      	movs	r0, #0
 800d63c:	f7ff fe18 	bl	800d270 <ComputeCmac>
 800d640:	4603      	mov	r3, r0
 800d642:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800d644:	7dfb      	ldrb	r3, [r7, #23]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d001      	beq.n	800d64e <SecureElementVerifyAesCmac+0x42>
    {
        return retval;
 800d64a:	7dfb      	ldrb	r3, [r7, #23]
 800d64c:	e006      	b.n	800d65c <SecureElementVerifyAesCmac+0x50>
    }

    if( expectedCmac != compCmac )
 800d64e:	693b      	ldr	r3, [r7, #16]
 800d650:	687a      	ldr	r2, [r7, #4]
 800d652:	429a      	cmp	r2, r3
 800d654:	d001      	beq.n	800d65a <SecureElementVerifyAesCmac+0x4e>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800d656:	2301      	movs	r3, #1
 800d658:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800d65a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d65c:	4618      	mov	r0, r3
 800d65e:	3718      	adds	r7, #24
 800d660:	46bd      	mov	sp, r7
 800d662:	bd80      	pop	{r7, pc}

0800d664 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                               uint8_t *encBuffer )
{
 800d664:	b580      	push	{r7, lr}
 800d666:	b0c2      	sub	sp, #264	@ 0x108
 800d668:	af00      	add	r7, sp, #0
 800d66a:	60f8      	str	r0, [r7, #12]
 800d66c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d670:	f5a0 7080 	sub.w	r0, r0, #256	@ 0x100
 800d674:	6001      	str	r1, [r0, #0]
 800d676:	4611      	mov	r1, r2
 800d678:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800d67c:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 800d680:	6013      	str	r3, [r2, #0]
 800d682:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d686:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 800d68a:	460a      	mov	r2, r1
 800d68c:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( encBuffer == NULL ) )
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	2b00      	cmp	r3, #0
 800d692:	d006      	beq.n	800d6a2 <SecureElementAesEncrypt+0x3e>
 800d694:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d698:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d101      	bne.n	800d6a6 <SecureElementAesEncrypt+0x42>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d6a2:	2302      	movs	r3, #2
 800d6a4:	e059      	b.n	800d75a <SecureElementAesEncrypt+0xf6>
    }

    /* Check if the size is divisible by 16 */
    if( ( size % 16 ) != 0 )
 800d6a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d6aa:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	f003 030f 	and.w	r3, r3, #15
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d001      	beq.n	800d6bc <SecureElementAesEncrypt+0x58>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800d6b8:	2305      	movs	r3, #5
 800d6ba:	e04e      	b.n	800d75a <SecureElementAesEncrypt+0xf6>
    }

#if (LORAWAN_KMS == 0)
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800d6bc:	f107 0314 	add.w	r3, r7, #20
 800d6c0:	22f0      	movs	r2, #240	@ 0xf0
 800d6c2:	2100      	movs	r1, #0
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	f00c fd2f 	bl	801a128 <memset1>

    Key_t                *pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800d6ca:	f107 0210 	add.w	r2, r7, #16
 800d6ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d6d2:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 800d6d6:	781b      	ldrb	r3, [r3, #0]
 800d6d8:	4611      	mov	r1, r2
 800d6da:	4618      	mov	r0, r3
 800d6dc:	f7ff fd98 	bl	800d210 <GetKeyByID>
 800d6e0:	4603      	mov	r3, r0
 800d6e2:	f887 3106 	strb.w	r3, [r7, #262]	@ 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800d6e6:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d133      	bne.n	800d756 <SecureElementAesEncrypt+0xf2>
    {
        lorawan_aes_set_key( pItem->KeyValue, SE_KEY_SIZE, &aesContext );
 800d6ee:	693b      	ldr	r3, [r7, #16]
 800d6f0:	3301      	adds	r3, #1
 800d6f2:	f107 0214 	add.w	r2, r7, #20
 800d6f6:	2110      	movs	r1, #16
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	f7ff fb65 	bl	800cdc8 <lorawan_aes_set_key>

        uint8_t block = 0;
 800d6fe:	2300      	movs	r3, #0
 800d700:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107

        while( size != 0 )
 800d704:	e020      	b.n	800d748 <SecureElementAesEncrypt+0xe4>
        {
            lorawan_aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
 800d706:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800d70a:	68fa      	ldr	r2, [r7, #12]
 800d70c:	18d0      	adds	r0, r2, r3
 800d70e:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800d712:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800d716:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 800d71a:	6812      	ldr	r2, [r2, #0]
 800d71c:	4413      	add	r3, r2
 800d71e:	f107 0214 	add.w	r2, r7, #20
 800d722:	4619      	mov	r1, r3
 800d724:	f7ff fc2e 	bl	800cf84 <lorawan_aes_encrypt>
            block = block + 16;
 800d728:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800d72c:	3310      	adds	r3, #16
 800d72e:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
            size  = size - 16;
 800d732:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d736:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800d73a:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800d73e:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 800d742:	6812      	ldr	r2, [r2, #0]
 800d744:	3a10      	subs	r2, #16
 800d746:	601a      	str	r2, [r3, #0]
        while( size != 0 )
 800d748:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d74c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d1d7      	bne.n	800d706 <SecureElementAesEncrypt+0xa2>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800d756:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
}
 800d75a:	4618      	mov	r0, r3
 800d75c:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800d760:	46bd      	mov	sp, r7
 800d762:	bd80      	pop	{r7, pc}

0800d764 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t *input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800d764:	b580      	push	{r7, lr}
 800d766:	b088      	sub	sp, #32
 800d768:	af00      	add	r7, sp, #0
 800d76a:	6078      	str	r0, [r7, #4]
 800d76c:	460b      	mov	r3, r1
 800d76e:	70fb      	strb	r3, [r7, #3]
 800d770:	4613      	mov	r3, r2
 800d772:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	2b00      	cmp	r3, #0
 800d778:	d101      	bne.n	800d77e <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d77a:	2302      	movs	r3, #2
 800d77c:	e02e      	b.n	800d7dc <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800d77e:	2306      	movs	r3, #6
 800d780:	77fb      	strb	r3, [r7, #31]

    /* In case of MC_KE_KEY, only McRootKey can be used as root key */
    if( targetKeyID == MC_KE_KEY )
 800d782:	78bb      	ldrb	r3, [r7, #2]
 800d784:	2b0c      	cmp	r3, #12
 800d786:	d104      	bne.n	800d792 <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800d788:	78fb      	ldrb	r3, [r7, #3]
 800d78a:	2b0b      	cmp	r3, #11
 800d78c:	d001      	beq.n	800d792 <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800d78e:	2303      	movs	r3, #3
 800d790:	e024      	b.n	800d7dc <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (LORAWAN_KMS == 0)
    uint8_t key[SE_KEY_SIZE] = { 0 };
 800d792:	2300      	movs	r3, #0
 800d794:	60fb      	str	r3, [r7, #12]
 800d796:	f107 0310 	add.w	r3, r7, #16
 800d79a:	2200      	movs	r2, #0
 800d79c:	601a      	str	r2, [r3, #0]
 800d79e:	605a      	str	r2, [r3, #4]
 800d7a0:	609a      	str	r2, [r3, #8]
    /* Derive key */
    retval = SecureElementAesEncrypt( input, SE_KEY_SIZE, rootKeyID, key );
 800d7a2:	f107 030c 	add.w	r3, r7, #12
 800d7a6:	78fa      	ldrb	r2, [r7, #3]
 800d7a8:	2110      	movs	r1, #16
 800d7aa:	6878      	ldr	r0, [r7, #4]
 800d7ac:	f7ff ff5a 	bl	800d664 <SecureElementAesEncrypt>
 800d7b0:	4603      	mov	r3, r0
 800d7b2:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800d7b4:	7ffb      	ldrb	r3, [r7, #31]
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d001      	beq.n	800d7be <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 800d7ba:	7ffb      	ldrb	r3, [r7, #31]
 800d7bc:	e00e      	b.n	800d7dc <SecureElementDeriveAndStoreKey+0x78>
    }

    /* Store key */
    retval = SecureElementSetKey( targetKeyID, key );
 800d7be:	f107 020c 	add.w	r2, r7, #12
 800d7c2:	78bb      	ldrb	r3, [r7, #2]
 800d7c4:	4611      	mov	r1, r2
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	f7ff fea8 	bl	800d51c <SecureElementSetKey>
 800d7cc:	4603      	mov	r3, r0
 800d7ce:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800d7d0:	7ffb      	ldrb	r3, [r7, #31]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d001      	beq.n	800d7da <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 800d7d6:	7ffb      	ldrb	r3, [r7, #31]
 800d7d8:	e000      	b.n	800d7dc <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 800d7da:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800d7dc:	4618      	mov	r0, r3
 800d7de:	3720      	adds	r7, #32
 800d7e0:	46bd      	mov	sp, r7
 800d7e2:	bd80      	pop	{r7, pc}

0800d7e4 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t *joinEui,
                                                      uint16_t devNonce, uint8_t *encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t *decJoinAccept,
                                                      uint8_t *versionMinor )
{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b086      	sub	sp, #24
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	60b9      	str	r1, [r7, #8]
 800d7ec:	607b      	str	r3, [r7, #4]
 800d7ee:	4603      	mov	r3, r0
 800d7f0:	73fb      	strb	r3, [r7, #15]
 800d7f2:	4613      	mov	r3, r2
 800d7f4:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d005      	beq.n	800d808 <SecureElementProcessJoinAccept+0x24>
 800d7fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d002      	beq.n	800d808 <SecureElementProcessJoinAccept+0x24>
 800d802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d804:	2b00      	cmp	r3, #0
 800d806:	d101      	bne.n	800d80c <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d808:	2302      	movs	r3, #2
 800d80a:	e05c      	b.n	800d8c6 <SecureElementProcessJoinAccept+0xe2>
    }

    /* Check that frame size isn't bigger than a JoinAccept with CFList size */
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800d80c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d810:	2b21      	cmp	r3, #33	@ 0x21
 800d812:	d901      	bls.n	800d818 <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800d814:	2305      	movs	r3, #5
 800d816:	e056      	b.n	800d8c6 <SecureElementProcessJoinAccept+0xe2>
    }

    /* Determine decryption key */
    KeyIdentifier_t encKeyID = NWK_KEY;
 800d818:	2301      	movs	r3, #1
 800d81a:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* LORAMAC_VERSION */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800d81c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d820:	b29b      	uxth	r3, r3
 800d822:	461a      	mov	r2, r3
 800d824:	6879      	ldr	r1, [r7, #4]
 800d826:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d828:	f00c fc43 	bl	801a0b2 <memcpy1>

    /* Decrypt JoinAccept, skip MHDR */
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	1c58      	adds	r0, r3, #1
 800d830:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d834:	3b01      	subs	r3, #1
 800d836:	4619      	mov	r1, r3
 800d838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d83a:	3301      	adds	r3, #1
 800d83c:	7dfa      	ldrb	r2, [r7, #23]
 800d83e:	f7ff ff11 	bl	800d664 <SecureElementAesEncrypt>
 800d842:	4603      	mov	r3, r0
 800d844:	2b00      	cmp	r3, #0
 800d846:	d001      	beq.n	800d84c <SecureElementProcessJoinAccept+0x68>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800d848:	2307      	movs	r3, #7
 800d84a:	e03c      	b.n	800d8c6 <SecureElementProcessJoinAccept+0xe2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800d84c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d84e:	330b      	adds	r3, #11
 800d850:	781b      	ldrb	r3, [r3, #0]
 800d852:	09db      	lsrs	r3, r3, #7
 800d854:	b2da      	uxtb	r2, r3
 800d856:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d858:	701a      	strb	r2, [r3, #0]

    uint32_t mic = GET_UINT32_LE( decJoinAccept, encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE );
 800d85a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d85e:	3b04      	subs	r3, #4
 800d860:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d862:	4413      	add	r3, r2
 800d864:	781b      	ldrb	r3, [r3, #0]
 800d866:	4619      	mov	r1, r3
 800d868:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d86c:	3b03      	subs	r3, #3
 800d86e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d870:	4413      	add	r3, r2
 800d872:	781b      	ldrb	r3, [r3, #0]
 800d874:	021b      	lsls	r3, r3, #8
 800d876:	ea41 0203 	orr.w	r2, r1, r3
 800d87a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d87e:	3b02      	subs	r3, #2
 800d880:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d882:	440b      	add	r3, r1
 800d884:	781b      	ldrb	r3, [r3, #0]
 800d886:	041b      	lsls	r3, r3, #16
 800d888:	431a      	orrs	r2, r3
 800d88a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d88e:	3b01      	subs	r3, #1
 800d890:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d892:	440b      	add	r3, r1
 800d894:	781b      	ldrb	r3, [r3, #0]
 800d896:	061b      	lsls	r3, r3, #24
 800d898:	4313      	orrs	r3, r2
 800d89a:	613b      	str	r3, [r7, #16]
     *        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
     *        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]
     */

    /* Verify mic */
    if( *versionMinor == 0 )
 800d89c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d89e:	781b      	ldrb	r3, [r3, #0]
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d10d      	bne.n	800d8c0 <SecureElementProcessJoinAccept+0xdc>
    {
        /* For LoRaWAN 1.0.x
         *   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
         *   CFListType)
         */
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800d8a4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d8a8:	3b04      	subs	r3, #4
 800d8aa:	4619      	mov	r1, r3
 800d8ac:	2301      	movs	r3, #1
 800d8ae:	693a      	ldr	r2, [r7, #16]
 800d8b0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d8b2:	f7ff feab 	bl	800d60c <SecureElementVerifyAesCmac>
 800d8b6:	4603      	mov	r3, r0
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d003      	beq.n	800d8c4 <SecureElementProcessJoinAccept+0xe0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800d8bc:	2301      	movs	r3, #1
 800d8be:	e002      	b.n	800d8c6 <SecureElementProcessJoinAccept+0xe2>
        }
    }
#endif /* LORAMAC_VERSION */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800d8c0:	2304      	movs	r3, #4
 800d8c2:	e000      	b.n	800d8c6 <SecureElementProcessJoinAccept+0xe2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800d8c4:	2300      	movs	r3, #0
}
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	3718      	adds	r7, #24
 800d8ca:	46bd      	mov	sp, r7
 800d8cc:	bd80      	pop	{r7, pc}
	...

0800d8d0 <SecureElementSetDevEui>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t *devEui )
{
 800d8d0:	b580      	push	{r7, lr}
 800d8d2:	b082      	sub	sp, #8
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d101      	bne.n	800d8e2 <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d8de:	2302      	movs	r3, #2
 800d8e0:	e007      	b.n	800d8f2 <SecureElementSetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.DevEui, devEui, SE_EUI_SIZE );
 800d8e2:	4b06      	ldr	r3, [pc, #24]	@ (800d8fc <SecureElementSetDevEui+0x2c>)
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	2208      	movs	r2, #8
 800d8e8:	6879      	ldr	r1, [r7, #4]
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	f00c fbe1 	bl	801a0b2 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800d8f0:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.DevEui, devEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	3708      	adds	r7, #8
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	bd80      	pop	{r7, pc}
 800d8fa:	bf00      	nop
 800d8fc:	20000508 	.word	0x20000508

0800d900 <SecureElementGetDevEui>:

SecureElementStatus_t SecureElementGetDevEui( uint8_t *devEui )
{
 800d900:	b580      	push	{r7, lr}
 800d902:	b082      	sub	sp, #8
 800d904:	af00      	add	r7, sp, #0
 800d906:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d101      	bne.n	800d912 <SecureElementGetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d90e:	2302      	movs	r3, #2
 800d910:	e007      	b.n	800d922 <SecureElementGetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( devEui, SeNvm->SeNvmDevJoinKey.DevEui, SE_EUI_SIZE );
 800d912:	4b06      	ldr	r3, [pc, #24]	@ (800d92c <SecureElementGetDevEui+0x2c>)
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	2208      	movs	r2, #8
 800d918:	4619      	mov	r1, r3
 800d91a:	6878      	ldr	r0, [r7, #4]
 800d91c:	f00c fbc9 	bl	801a0b2 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800d920:	2300      	movs	r3, #0
        /* get DevEui field in KMSKeyBlob handle */
        memcpy1( devEui, KMSKeyBlob.DevEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800d922:	4618      	mov	r0, r3
 800d924:	3708      	adds	r7, #8
 800d926:	46bd      	mov	sp, r7
 800d928:	bd80      	pop	{r7, pc}
 800d92a:	bf00      	nop
 800d92c:	20000508 	.word	0x20000508

0800d930 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t *joinEui )
{
 800d930:	b580      	push	{r7, lr}
 800d932:	b082      	sub	sp, #8
 800d934:	af00      	add	r7, sp, #0
 800d936:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d101      	bne.n	800d942 <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d93e:	2302      	movs	r3, #2
 800d940:	e008      	b.n	800d954 <SecureElementSetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.JoinEui, joinEui, SE_EUI_SIZE );
 800d942:	4b06      	ldr	r3, [pc, #24]	@ (800d95c <SecureElementSetJoinEui+0x2c>)
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	3308      	adds	r3, #8
 800d948:	2208      	movs	r2, #8
 800d94a:	6879      	ldr	r1, [r7, #4]
 800d94c:	4618      	mov	r0, r3
 800d94e:	f00c fbb0 	bl	801a0b2 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800d952:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.JoinEui, joinEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800d954:	4618      	mov	r0, r3
 800d956:	3708      	adds	r7, #8
 800d958:	46bd      	mov	sp, r7
 800d95a:	bd80      	pop	{r7, pc}
 800d95c:	20000508 	.word	0x20000508

0800d960 <SecureElementGetJoinEui>:

SecureElementStatus_t SecureElementGetJoinEui( uint8_t *joinEui )
{
 800d960:	b580      	push	{r7, lr}
 800d962:	b082      	sub	sp, #8
 800d964:	af00      	add	r7, sp, #0
 800d966:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d101      	bne.n	800d972 <SecureElementGetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d96e:	2302      	movs	r3, #2
 800d970:	e008      	b.n	800d984 <SecureElementGetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( joinEui, SeNvm->SeNvmDevJoinKey.JoinEui, SE_EUI_SIZE );
 800d972:	4b06      	ldr	r3, [pc, #24]	@ (800d98c <SecureElementGetJoinEui+0x2c>)
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	3308      	adds	r3, #8
 800d978:	2208      	movs	r2, #8
 800d97a:	4619      	mov	r1, r3
 800d97c:	6878      	ldr	r0, [r7, #4]
 800d97e:	f00c fb98 	bl	801a0b2 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800d982:	2300      	movs	r3, #0
        /* get JoinEui field from KMSKeyBlob handle */
        memcpy1( joinEui, KMSKeyBlob.JoinEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800d984:	4618      	mov	r0, r3
 800d986:	3708      	adds	r7, #8
 800d988:	46bd      	mov	sp, r7
 800d98a:	bd80      	pop	{r7, pc}
 800d98c:	20000508 	.word	0x20000508

0800d990 <SecureElementSetDevAddr>:

SecureElementStatus_t SecureElementSetDevAddr( ActivationType_t mode, uint32_t devAddr )
{
 800d990:	b480      	push	{r7}
 800d992:	b083      	sub	sp, #12
 800d994:	af00      	add	r7, sp, #0
 800d996:	4603      	mov	r3, r0
 800d998:	6039      	str	r1, [r7, #0]
 800d99a:	71fb      	strb	r3, [r7, #7]
#if (LORAWAN_KMS == 0)
    if( mode == ACTIVATION_TYPE_OTAA )
 800d99c:	79fb      	ldrb	r3, [r7, #7]
 800d99e:	2b02      	cmp	r3, #2
 800d9a0:	d104      	bne.n	800d9ac <SecureElementSetDevAddr+0x1c>
    {
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
 800d9a2:	4b07      	ldr	r3, [pc, #28]	@ (800d9c0 <SecureElementSetDevAddr+0x30>)
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	683a      	ldr	r2, [r7, #0]
 800d9a8:	611a      	str	r2, [r3, #16]
 800d9aa:	e003      	b.n	800d9b4 <SecureElementSetDevAddr+0x24>
    }
    else
    {
        SeNvm->SeNvmDevJoinKey.DevAddrABP = devAddr;
 800d9ac:	4b04      	ldr	r3, [pc, #16]	@ (800d9c0 <SecureElementSetDevAddr+0x30>)
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	683a      	ldr	r2, [r7, #0]
 800d9b2:	615a      	str	r2, [r3, #20]
    }

    return SECURE_ELEMENT_SUCCESS;
 800d9b4:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	370c      	adds	r7, #12
 800d9ba:	46bd      	mov	sp, r7
 800d9bc:	bc80      	pop	{r7}
 800d9be:	4770      	bx	lr
 800d9c0:	20000508 	.word	0x20000508

0800d9c4 <SecureElementGetDevAddr>:

SecureElementStatus_t SecureElementGetDevAddr( ActivationType_t mode, uint32_t *devAddr )
{
 800d9c4:	b480      	push	{r7}
 800d9c6:	b083      	sub	sp, #12
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	4603      	mov	r3, r0
 800d9cc:	6039      	str	r1, [r7, #0]
 800d9ce:	71fb      	strb	r3, [r7, #7]
    if( devAddr == NULL )
 800d9d0:	683b      	ldr	r3, [r7, #0]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d101      	bne.n	800d9da <SecureElementGetDevAddr+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d9d6:	2302      	movs	r3, #2
 800d9d8:	e00e      	b.n	800d9f8 <SecureElementGetDevAddr+0x34>
    }
#if (LORAWAN_KMS == 0)
    /* Recover DevAddrABP or DevAddrOTAA depending on mode */
    if( mode == ACTIVATION_TYPE_OTAA )
 800d9da:	79fb      	ldrb	r3, [r7, #7]
 800d9dc:	2b02      	cmp	r3, #2
 800d9de:	d105      	bne.n	800d9ec <SecureElementGetDevAddr+0x28>
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
 800d9e0:	4b08      	ldr	r3, [pc, #32]	@ (800da04 <SecureElementGetDevAddr+0x40>)
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	691a      	ldr	r2, [r3, #16]
 800d9e6:	683b      	ldr	r3, [r7, #0]
 800d9e8:	601a      	str	r2, [r3, #0]
 800d9ea:	e004      	b.n	800d9f6 <SecureElementGetDevAddr+0x32>
    }
    else
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrABP;
 800d9ec:	4b05      	ldr	r3, [pc, #20]	@ (800da04 <SecureElementGetDevAddr+0x40>)
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	695a      	ldr	r2, [r3, #20]
 800d9f2:	683b      	ldr	r3, [r7, #0]
 800d9f4:	601a      	str	r2, [r3, #0]
    }
    return SECURE_ELEMENT_SUCCESS;
 800d9f6:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800d9f8:	4618      	mov	r0, r3
 800d9fa:	370c      	adds	r7, #12
 800d9fc:	46bd      	mov	sp, r7
 800d9fe:	bc80      	pop	{r7}
 800da00:	4770      	bx	lr
 800da02:	bf00      	nop
 800da04:	20000508 	.word	0x20000508

0800da08 <LmHandlerInit>:
static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity );
#endif /* LORAMAC_VERSION */

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks, uint32_t fwVersion )
{
 800da08:	b580      	push	{r7, lr}
 800da0a:	b082      	sub	sp, #8
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	6078      	str	r0, [r7, #4]
 800da10:	6039      	str	r1, [r7, #0]
    LmHandlerCallbacks = handlerCallbacks;
 800da12:	4a29      	ldr	r2, [pc, #164]	@ (800dab8 <LmHandlerInit+0xb0>)
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800da18:	4b28      	ldr	r3, [pc, #160]	@ (800dabc <LmHandlerInit+0xb4>)
 800da1a:	4a29      	ldr	r2, [pc, #164]	@ (800dac0 <LmHandlerInit+0xb8>)
 800da1c:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800da1e:	4b27      	ldr	r3, [pc, #156]	@ (800dabc <LmHandlerInit+0xb4>)
 800da20:	4a28      	ldr	r2, [pc, #160]	@ (800dac4 <LmHandlerInit+0xbc>)
 800da22:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800da24:	4b25      	ldr	r3, [pc, #148]	@ (800dabc <LmHandlerInit+0xb4>)
 800da26:	4a28      	ldr	r2, [pc, #160]	@ (800dac8 <LmHandlerInit+0xc0>)
 800da28:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800da2a:	4b24      	ldr	r3, [pc, #144]	@ (800dabc <LmHandlerInit+0xb4>)
 800da2c:	4a27      	ldr	r2, [pc, #156]	@ (800dacc <LmHandlerInit+0xc4>)
 800da2e:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800da30:	4b21      	ldr	r3, [pc, #132]	@ (800dab8 <LmHandlerInit+0xb0>)
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	4a26      	ldr	r2, [pc, #152]	@ (800dad0 <LmHandlerInit+0xc8>)
 800da38:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800da3a:	4b1f      	ldr	r3, [pc, #124]	@ (800dab8 <LmHandlerInit+0xb0>)
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	685b      	ldr	r3, [r3, #4]
 800da40:	4a23      	ldr	r2, [pc, #140]	@ (800dad0 <LmHandlerInit+0xc8>)
 800da42:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800da44:	4b1c      	ldr	r3, [pc, #112]	@ (800dab8 <LmHandlerInit+0xb0>)
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	689b      	ldr	r3, [r3, #8]
 800da4a:	4a21      	ldr	r2, [pc, #132]	@ (800dad0 <LmHandlerInit+0xc8>)
 800da4c:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.GetDevAddress = LmHandlerCallbacks->GetDevAddr;
 800da4e:	4b1a      	ldr	r3, [pc, #104]	@ (800dab8 <LmHandlerInit+0xb0>)
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	68db      	ldr	r3, [r3, #12]
 800da54:	4a1e      	ldr	r2, [pc, #120]	@ (800dad0 <LmHandlerInit+0xc8>)
 800da56:	60d3      	str	r3, [r2, #12]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800da58:	4b1d      	ldr	r3, [pc, #116]	@ (800dad0 <LmHandlerInit+0xc8>)
 800da5a:	4a1e      	ldr	r2, [pc, #120]	@ (800dad4 <LmHandlerInit+0xcc>)
 800da5c:	611a      	str	r2, [r3, #16]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800da5e:	4b16      	ldr	r3, [pc, #88]	@ (800dab8 <LmHandlerInit+0xb0>)
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	699b      	ldr	r3, [r3, #24]
 800da64:	4a1a      	ldr	r2, [pc, #104]	@ (800dad0 <LmHandlerInit+0xc8>)
 800da66:	6153      	str	r3, [r2, #20]

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LmhpComplianceParams.FwVersion.Value = fwVersion;
 800da68:	683b      	ldr	r3, [r7, #0]
 800da6a:	4a1b      	ldr	r2, [pc, #108]	@ (800dad8 <LmHandlerInit+0xd0>)
 800da6c:	6013      	str	r3, [r2, #0]
    LmhpComplianceParams.OnTxPeriodicityChanged = LmHandlerCallbacks->OnTxPeriodicityChanged;
 800da6e:	4b12      	ldr	r3, [pc, #72]	@ (800dab8 <LmHandlerInit+0xb0>)
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800da74:	4a18      	ldr	r2, [pc, #96]	@ (800dad8 <LmHandlerInit+0xd0>)
 800da76:	6053      	str	r3, [r2, #4]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerOnTxFrameCtrlChanged;
 800da78:	4b17      	ldr	r3, [pc, #92]	@ (800dad8 <LmHandlerInit+0xd0>)
 800da7a:	4a18      	ldr	r2, [pc, #96]	@ (800dadc <LmHandlerInit+0xd4>)
 800da7c:	609a      	str	r2, [r3, #8]
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerOnPingSlotPeriodicityChanged;
 800da7e:	4b16      	ldr	r3, [pc, #88]	@ (800dad8 <LmHandlerInit+0xd0>)
 800da80:	4a17      	ldr	r2, [pc, #92]	@ (800dae0 <LmHandlerInit+0xd8>)
 800da82:	60da      	str	r2, [r3, #12]
#endif /* LORAMAC_VERSION */

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if( LmHandlerPackageRegister( PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams ) != LORAMAC_HANDLER_SUCCESS )
 800da84:	4914      	ldr	r1, [pc, #80]	@ (800dad8 <LmHandlerInit+0xd0>)
 800da86:	2000      	movs	r0, #0
 800da88:	f000 fdb4 	bl	800e5f4 <LmHandlerPackageRegister>
 800da8c:	4603      	mov	r3, r0
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d002      	beq.n	800da98 <LmHandlerInit+0x90>
    {
        return LORAMAC_HANDLER_ERROR;
 800da92:	f04f 33ff 	mov.w	r3, #4294967295
 800da96:	e00a      	b.n	800daae <LmHandlerInit+0xa6>
    }

    if( LmhpPackagesRegistrationInit( ( Version_t * )&fwVersion ) != LORAMAC_HANDLER_SUCCESS )
 800da98:	463b      	mov	r3, r7
 800da9a:	4618      	mov	r0, r3
 800da9c:	f001 fd2a 	bl	800f4f4 <LmhpPackagesRegistrationInit>
 800daa0:	4603      	mov	r3, r0
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d002      	beq.n	800daac <LmHandlerInit+0xa4>
    {
        return LORAMAC_HANDLER_ERROR;
 800daa6:	f04f 33ff 	mov.w	r3, #4294967295
 800daaa:	e000      	b.n	800daae <LmHandlerInit+0xa6>
    }

    return LORAMAC_HANDLER_SUCCESS;
 800daac:	2300      	movs	r3, #0
}
 800daae:	4618      	mov	r0, r3
 800dab0:	3708      	adds	r7, #8
 800dab2:	46bd      	mov	sp, r7
 800dab4:	bd80      	pop	{r7, pc}
 800dab6:	bf00      	nop
 800dab8:	20000560 	.word	0x20000560
 800dabc:	20000564 	.word	0x20000564
 800dac0:	0800e2cd 	.word	0x0800e2cd
 800dac4:	0800e341 	.word	0x0800e341
 800dac8:	0800e411 	.word	0x0800e411
 800dacc:	0800e561 	.word	0x0800e561
 800dad0:	20000574 	.word	0x20000574
 800dad4:	0800eaa1 	.word	0x0800eaa1
 800dad8:	20000524 	.word	0x20000524
 800dadc:	0800e8b5 	.word	0x0800e8b5
 800dae0:	0800e8ed 	.word	0x0800e8ed

0800dae4 <LmHandlerConfigure>:
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800dae4:	b580      	push	{r7, lr}
 800dae6:	b092      	sub	sp, #72	@ 0x48
 800dae8:	af00      	add	r7, sp, #0
 800daea:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    memcpy1( ( void * )&LmHandlerParams, ( const void * )handlerParams, sizeof( LmHandlerParams_t ) );
 800daec:	2218      	movs	r2, #24
 800daee:	6879      	ldr	r1, [r7, #4]
 800daf0:	4884      	ldr	r0, [pc, #528]	@ (800dd04 <LmHandlerConfigure+0x220>)
 800daf2:	f00c fade 	bl	801a0b2 <memcpy1>

#if ( LORAMAC_CLASSB_ENABLED == 1 )
    IsClassBSwitchPending = false;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    IsUplinkTxPending = false;
 800daf6:	4b84      	ldr	r3, [pc, #528]	@ (800dd08 <LmHandlerConfigure+0x224>)
 800daf8:	2200      	movs	r2, #0
 800dafa:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    loraInfo = LoraInfo_GetPtr();
 800dafc:	f7fe faa2 	bl	800c044 <LoraInfo_GetPtr>
 800db00:	6478      	str	r0, [r7, #68]	@ 0x44

    if( 0U == ( ( 1 << ( LmHandlerParams.ActiveRegion ) ) & ( loraInfo->Region ) ) )
 800db02:	4b80      	ldr	r3, [pc, #512]	@ (800dd04 <LmHandlerConfigure+0x220>)
 800db04:	781b      	ldrb	r3, [r3, #0]
 800db06:	461a      	mov	r2, r3
 800db08:	2301      	movs	r3, #1
 800db0a:	4093      	lsls	r3, r2
 800db0c:	461a      	mov	r2, r3
 800db0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800db10:	685b      	ldr	r3, [r3, #4]
 800db12:	4013      	ands	r3, r2
 800db14:	2b00      	cmp	r3, #0
 800db16:	d107      	bne.n	800db28 <LmHandlerConfigure+0x44>
    {
        MW_LOG( TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n" );
 800db18:	4b7c      	ldr	r3, [pc, #496]	@ (800dd0c <LmHandlerConfigure+0x228>)
 800db1a:	2201      	movs	r2, #1
 800db1c:	2100      	movs	r1, #0
 800db1e:	2000      	movs	r0, #0
 800db20:	f010 fe68 	bl	801e7f4 <UTIL_ADV_TRACE_COND_FSend>
        while( 1 ) {} /* error: Region is not defined in the MW */
 800db24:	bf00      	nop
 800db26:	e7fd      	b.n	800db24 <LmHandlerConfigure+0x40>
    }

    if( LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion ) != LORAMAC_STATUS_OK )
 800db28:	4b76      	ldr	r3, [pc, #472]	@ (800dd04 <LmHandlerConfigure+0x220>)
 800db2a:	781b      	ldrb	r3, [r3, #0]
 800db2c:	461a      	mov	r2, r3
 800db2e:	4978      	ldr	r1, [pc, #480]	@ (800dd10 <LmHandlerConfigure+0x22c>)
 800db30:	4878      	ldr	r0, [pc, #480]	@ (800dd14 <LmHandlerConfigure+0x230>)
 800db32:	f004 ffdf 	bl	8012af4 <LoRaMacInitialization>
 800db36:	4603      	mov	r3, r0
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d002      	beq.n	800db42 <LmHandlerConfigure+0x5e>
    {
        return LORAMAC_HANDLER_ERROR;
 800db3c:	f04f 33ff 	mov.w	r3, #4294967295
 800db40:	e0dc      	b.n	800dcfc <LmHandlerConfigure+0x218>
    }

#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    /* Try the restore context from the Backup RAM structure if data retention is available */
    mibReq.Type = MIB_NVM_CTXS;
 800db42:	2327      	movs	r3, #39	@ 0x27
 800db44:	763b      	strb	r3, [r7, #24]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800db46:	f107 0318 	add.w	r3, r7, #24
 800db4a:	4618      	mov	r0, r3
 800db4c:	f005 fd5e 	bl	801360c <LoRaMacMibSetRequestConfirm>
 800db50:	4603      	mov	r3, r0
 800db52:	2b00      	cmp	r3, #0
 800db54:	d103      	bne.n	800db5e <LmHandlerConfigure+0x7a>
    {
        CtxRestoreDone = true;
 800db56:	4b70      	ldr	r3, [pc, #448]	@ (800dd18 <LmHandlerConfigure+0x234>)
 800db58:	2201      	movs	r2, #1
 800db5a:	701a      	strb	r2, [r3, #0]
 800db5c:	e02a      	b.n	800dbb4 <LmHandlerConfigure+0xd0>
    }
    else
    {
        /* Restore context data backup from user callback (stored in FLASH) */
        mibReq.Type = MIB_NVM_BKP_CTXS;
 800db5e:	2328      	movs	r3, #40	@ 0x28
 800db60:	763b      	strb	r3, [r7, #24]
        if( LmHandlerCallbacks->OnRestoreContextRequest != NULL )
 800db62:	4b6e      	ldr	r3, [pc, #440]	@ (800dd1c <LmHandlerConfigure+0x238>)
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	691b      	ldr	r3, [r3, #16]
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d00c      	beq.n	800db86 <LmHandlerConfigure+0xa2>
        {
            LoRaMacMibGetRequestConfirm( &mibReq );
 800db6c:	f107 0318 	add.w	r3, r7, #24
 800db70:	4618      	mov	r0, r3
 800db72:	f005 fb73 	bl	801325c <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest( mibReq.Param.BackupContexts, sizeof( LoRaMacNvmData_t ) );
 800db76:	4b69      	ldr	r3, [pc, #420]	@ (800dd1c <LmHandlerConfigure+0x238>)
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	691b      	ldr	r3, [r3, #16]
 800db7c:	69fa      	ldr	r2, [r7, #28]
 800db7e:	f240 51cc 	movw	r1, #1484	@ 0x5cc
 800db82:	4610      	mov	r0, r2
 800db84:	4798      	blx	r3
        }
        /* Restore context data from backup to main nvm structure */
        mibReq.Type = MIB_NVM_CTXS;
 800db86:	2327      	movs	r3, #39	@ 0x27
 800db88:	763b      	strb	r3, [r7, #24]
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800db8a:	f107 0318 	add.w	r3, r7, #24
 800db8e:	4618      	mov	r0, r3
 800db90:	f005 fd3c 	bl	801360c <LoRaMacMibSetRequestConfirm>
 800db94:	4603      	mov	r3, r0
 800db96:	2b00      	cmp	r3, #0
 800db98:	d10c      	bne.n	800dbb4 <LmHandlerConfigure+0xd0>
        {
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 800db9a:	2301      	movs	r3, #1
 800db9c:	763b      	strb	r3, [r7, #24]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800db9e:	f107 0318 	add.w	r3, r7, #24
 800dba2:	4618      	mov	r0, r3
 800dba4:	f005 fb5a 	bl	801325c <LoRaMacMibGetRequestConfirm>
            if( mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE )
 800dba8:	7f3b      	ldrb	r3, [r7, #28]
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d002      	beq.n	800dbb4 <LmHandlerConfigure+0xd0>
            {
                CtxRestoreDone = true;
 800dbae:	4b5a      	ldr	r3, [pc, #360]	@ (800dd18 <LmHandlerConfigure+0x234>)
 800dbb0:	2201      	movs	r2, #1
 800dbb2:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    if( CtxRestoreDone == true )
 800dbb4:	4b58      	ldr	r3, [pc, #352]	@ (800dd18 <LmHandlerConfigure+0x234>)
 800dbb6:	781b      	ldrb	r3, [r3, #0]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d022      	beq.n	800dc02 <LmHandlerConfigure+0x11e>
    {
        if( LmHandlerCallbacks->OnNvmDataChange != NULL )
 800dbbc:	4b57      	ldr	r3, [pc, #348]	@ (800dd1c <LmHandlerConfigure+0x238>)
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	69db      	ldr	r3, [r3, #28]
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d004      	beq.n	800dbd0 <LmHandlerConfigure+0xec>
        {
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 800dbc6:	4b55      	ldr	r3, [pc, #340]	@ (800dd1c <LmHandlerConfigure+0x238>)
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	69db      	ldr	r3, [r3, #28]
 800dbcc:	2000      	movs	r0, #0
 800dbce:	4798      	blx	r3
        }

        mibReq.Type = MIB_NVM_CTXS;
 800dbd0:	2327      	movs	r3, #39	@ 0x27
 800dbd2:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800dbd4:	f107 0318 	add.w	r3, r7, #24
 800dbd8:	4618      	mov	r0, r3
 800dbda:	f005 fb3f 	bl	801325c <LoRaMacMibGetRequestConfirm>
        LoRaMacNvmData_t *current_nvm = mibReq.Param.Contexts;
 800dbde:	69fb      	ldr	r3, [r7, #28]
 800dbe0:	643b      	str	r3, [r7, #64]	@ 0x40

        LmHandlerParams.ActiveRegion = current_nvm->MacGroup2.Region;
 800dbe2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dbe4:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800dbe8:	4b46      	ldr	r3, [pc, #280]	@ (800dd04 <LmHandlerConfigure+0x220>)
 800dbea:	701a      	strb	r2, [r3, #0]
        LmHandlerParams.DefaultClass = current_nvm->MacGroup2.DeviceClass;
 800dbec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dbee:	f893 2118 	ldrb.w	r2, [r3, #280]	@ 0x118
 800dbf2:	4b44      	ldr	r3, [pc, #272]	@ (800dd04 <LmHandlerConfigure+0x220>)
 800dbf4:	705a      	strb	r2, [r3, #1]
        LmHandlerParams.AdrEnable = current_nvm->MacGroup2.AdrCtrlOn;
 800dbf6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dbf8:	f893 211a 	ldrb.w	r2, [r3, #282]	@ 0x11a
 800dbfc:	4b41      	ldr	r3, [pc, #260]	@ (800dd04 <LmHandlerConfigure+0x220>)
 800dbfe:	709a      	strb	r2, [r3, #2]
 800dc00:	e008      	b.n	800dc14 <LmHandlerConfigure+0x130>
    }
    else
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
    {
        mibReq.Type = MIB_NET_ID;
 800dc02:	2305      	movs	r3, #5
 800dc04:	763b      	strb	r3, [r7, #24]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800dc06:	2300      	movs	r3, #0
 800dc08:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800dc0a:	f107 0318 	add.w	r3, r7, #24
 800dc0e:	4618      	mov	r0, r3
 800dc10:	f005 fcfc 	bl	801360c <LoRaMacMibSetRequestConfirm>
    }

    /* Restore ID struct from NVM or Init from callbacks */
    if( SecureElementInitMcuID( LoRaMacCallbacks.GetUniqueId, LoRaMacCallbacks.GetDevAddress ) != SECURE_ELEMENT_SUCCESS )
 800dc14:	4b3e      	ldr	r3, [pc, #248]	@ (800dd10 <LmHandlerConfigure+0x22c>)
 800dc16:	689b      	ldr	r3, [r3, #8]
 800dc18:	4a3d      	ldr	r2, [pc, #244]	@ (800dd10 <LmHandlerConfigure+0x22c>)
 800dc1a:	68d2      	ldr	r2, [r2, #12]
 800dc1c:	4611      	mov	r1, r2
 800dc1e:	4618      	mov	r0, r3
 800dc20:	f7ff fbca 	bl	800d3b8 <SecureElementInitMcuID>
 800dc24:	4603      	mov	r3, r0
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d002      	beq.n	800dc30 <LmHandlerConfigure+0x14c>
    {
        return LORAMAC_HANDLER_ERROR;
 800dc2a:	f04f 33ff 	mov.w	r3, #4294967295
 800dc2e:	e065      	b.n	800dcfc <LmHandlerConfigure+0x218>
    }

    /* Read secure-element DEV_EUI, JOIN_EUI and DEV_ADDR values. */
    mibReq.Type = MIB_DEV_ADDR;
 800dc30:	2306      	movs	r3, #6
 800dc32:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800dc34:	f107 0318 	add.w	r3, r7, #24
 800dc38:	4618      	mov	r0, r3
 800dc3a:	f005 fb0f 	bl	801325c <LoRaMacMibGetRequestConfirm>
    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800dc3e:	69fb      	ldr	r3, [r7, #28]
 800dc40:	4a37      	ldr	r2, [pc, #220]	@ (800dd20 <LmHandlerConfigure+0x23c>)
 800dc42:	6153      	str	r3, [r2, #20]

    /* Override DevAddress value after init from callbacks */
    LoRaMacMibSetRequestConfirm( &mibReq );
 800dc44:	f107 0318 	add.w	r3, r7, #24
 800dc48:	4618      	mov	r0, r3
 800dc4a:	f005 fcdf 	bl	801360c <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_DEV_EUI;
 800dc4e:	2302      	movs	r3, #2
 800dc50:	763b      	strb	r3, [r7, #24]
    mibReq.Param.DevEui = CommissioningParams.DevEui;
 800dc52:	4b33      	ldr	r3, [pc, #204]	@ (800dd20 <LmHandlerConfigure+0x23c>)
 800dc54:	61fb      	str	r3, [r7, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800dc56:	f107 0318 	add.w	r3, r7, #24
 800dc5a:	4618      	mov	r0, r3
 800dc5c:	f005 fafe 	bl	801325c <LoRaMacMibGetRequestConfirm>

    mibReq.Type = MIB_JOIN_EUI;
 800dc60:	2303      	movs	r3, #3
 800dc62:	763b      	strb	r3, [r7, #24]
    mibReq.Param.JoinEui = CommissioningParams.JoinEui;
 800dc64:	4b2f      	ldr	r3, [pc, #188]	@ (800dd24 <LmHandlerConfigure+0x240>)
 800dc66:	61fb      	str	r3, [r7, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800dc68:	f107 0318 	add.w	r3, r7, #24
 800dc6c:	4618      	mov	r0, r3
 800dc6e:	f005 faf5 	bl	801325c <LoRaMacMibGetRequestConfirm>

    SecureElementPrintKeys();
 800dc72:	f7ff fc21 	bl	800d4b8 <SecureElementPrintKeys>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG( TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n" );
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800dc76:	230f      	movs	r3, #15
 800dc78:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800dc7a:	2301      	movs	r3, #1
 800dc7c:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800dc7e:	f107 0318 	add.w	r3, r7, #24
 800dc82:	4618      	mov	r0, r3
 800dc84:	f005 fcc2 	bl	801360c <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800dc88:	2310      	movs	r3, #16
 800dc8a:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800dc8c:	2300      	movs	r3, #0
 800dc8e:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800dc90:	f107 0318 	add.w	r3, r7, #24
 800dc94:	4618      	mov	r0, r3
 800dc96:	f005 fcb9 	bl	801360c <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800dc9a:	2304      	movs	r3, #4
 800dc9c:	763b      	strb	r3, [r7, #24]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800dc9e:	4b19      	ldr	r3, [pc, #100]	@ (800dd04 <LmHandlerConfigure+0x220>)
 800dca0:	789b      	ldrb	r3, [r3, #2]
 800dca2:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800dca4:	f107 0318 	add.w	r3, r7, #24
 800dca8:	4618      	mov	r0, r3
 800dcaa:	f005 fcaf 	bl	801360c <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800dcae:	233a      	movs	r3, #58	@ 0x3a
 800dcb0:	763b      	strb	r3, [r7, #24]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800dcb2:	4b14      	ldr	r3, [pc, #80]	@ (800dd04 <LmHandlerConfigure+0x220>)
 800dcb4:	695b      	ldr	r3, [r3, #20]
 800dcb6:	61fb      	str	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800dcb8:	f107 0318 	add.w	r3, r7, #24
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	f005 fca5 	bl	801360c <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800dcc2:	230f      	movs	r3, #15
 800dcc4:	743b      	strb	r3, [r7, #16]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800dcc6:	4b0f      	ldr	r3, [pc, #60]	@ (800dd04 <LmHandlerConfigure+0x220>)
 800dcc8:	781b      	ldrb	r3, [r3, #0]
 800dcca:	f107 0210 	add.w	r2, r7, #16
 800dcce:	4611      	mov	r1, r2
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	f008 fbef 	bl	80164b4 <RegionGetPhyParam>
 800dcd6:	4603      	mov	r3, r0
 800dcd8:	60fb      	str	r3, [r7, #12]
    LmHandlerParams.DutyCycleEnabled = ( bool ) phyParam.Value;
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	bf14      	ite	ne
 800dce0:	2301      	movne	r3, #1
 800dce2:	2300      	moveq	r3, #0
 800dce4:	b2da      	uxtb	r2, r3
 800dce6:	4b07      	ldr	r3, [pc, #28]	@ (800dd04 <LmHandlerConfigure+0x220>)
 800dce8:	71da      	strb	r2, [r3, #7]

    /* Set system maximum tolerated rx error in milliseconds */
    LmHandlerSetSystemMaxRxError( 20 );
 800dcea:	2014      	movs	r0, #20
 800dcec:	f000 fad6 	bl	800e29c <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800dcf0:	4b04      	ldr	r3, [pc, #16]	@ (800dd04 <LmHandlerConfigure+0x220>)
 800dcf2:	79db      	ldrb	r3, [r3, #7]
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	f006 fb03 	bl	8014300 <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800dcfa:	2300      	movs	r3, #0
}
 800dcfc:	4618      	mov	r0, r3
 800dcfe:	3748      	adds	r7, #72	@ 0x48
 800dd00:	46bd      	mov	sp, r7
 800dd02:	bd80      	pop	{r7, pc}
 800dd04:	20000548 	.word	0x20000548
 800dd08:	20000590 	.word	0x20000590
 800dd0c:	0801f4f0 	.word	0x0801f4f0
 800dd10:	20000574 	.word	0x20000574
 800dd14:	20000564 	.word	0x20000564
 800dd18:	20000686 	.word	0x20000686
 800dd1c:	20000560 	.word	0x20000560
 800dd20:	2000050c 	.word	0x2000050c
 800dd24:	20000514 	.word	0x20000514

0800dd28 <LmHandlerProcess>:

    return false;
}

void LmHandlerProcess( void )
{
 800dd28:	b580      	push	{r7, lr}
 800dd2a:	b082      	sub	sp, #8
 800dd2c:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    /* Processes the LoRaMac events */
    LoRaMacProcess( );
 800dd2e:	f002 fe49 	bl	80109c4 <LoRaMacProcess>

    /* Call all packages process functions */
    LmHandlerPackagesProcess( );
 800dd32:	f000 fd8b 	bl	800e84c <LmHandlerPackagesProcess>

    /* Check if a package transmission is pending. */
    /* If it is the case exit function earlier */
    if( LmHandlerPackageIsTxPending( ) == true )
 800dd36:	f000 fd5f 	bl	800e7f8 <LmHandlerPackageIsTxPending>
 800dd3a:	4603      	mov	r3, r0
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d117      	bne.n	800dd70 <LmHandlerProcess+0x48>
        return;
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    /* If a MAC layer scheduled uplink is still pending try to send it. */
    if( IsUplinkTxPending == true )
 800dd40:	4b0d      	ldr	r3, [pc, #52]	@ (800dd78 <LmHandlerProcess+0x50>)
 800dd42:	781b      	ldrb	r3, [r3, #0]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d014      	beq.n	800dd72 <LmHandlerProcess+0x4a>
    {
        /* Send an empty message */
        LmHandlerAppData_t appData =
 800dd48:	2300      	movs	r3, #0
 800dd4a:	703b      	strb	r3, [r7, #0]
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	707b      	strb	r3, [r7, #1]
 800dd50:	2300      	movs	r3, #0
 800dd52:	607b      	str	r3, [r7, #4]
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0,
        };

        if( LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false ) == LORAMAC_HANDLER_SUCCESS )
 800dd54:	4b09      	ldr	r3, [pc, #36]	@ (800dd7c <LmHandlerProcess+0x54>)
 800dd56:	78d9      	ldrb	r1, [r3, #3]
 800dd58:	463b      	mov	r3, r7
 800dd5a:	2200      	movs	r2, #0
 800dd5c:	4618      	mov	r0, r3
 800dd5e:	f000 f8d7 	bl	800df10 <LmHandlerSend>
 800dd62:	4603      	mov	r3, r0
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d104      	bne.n	800dd72 <LmHandlerProcess+0x4a>
        {
            IsUplinkTxPending = false;
 800dd68:	4b03      	ldr	r3, [pc, #12]	@ (800dd78 <LmHandlerProcess+0x50>)
 800dd6a:	2200      	movs	r2, #0
 800dd6c:	701a      	strb	r2, [r3, #0]
 800dd6e:	e000      	b.n	800dd72 <LmHandlerProcess+0x4a>
        return;
 800dd70:	bf00      	nop
        }
    }
#endif /* LORAMAC_VERSION */
}
 800dd72:	3708      	adds	r7, #8
 800dd74:	46bd      	mov	sp, r7
 800dd76:	bd80      	pop	{r7, pc}
 800dd78:	20000590 	.word	0x20000590
 800dd7c:	20000548 	.word	0x20000548

0800dd80 <LmHandlerGetDutyCycleWaitTime>:

TimerTime_t LmHandlerGetDutyCycleWaitTime( void )
{
 800dd80:	b480      	push	{r7}
 800dd82:	af00      	add	r7, sp, #0
    return DutyCycleWaitTime;
 800dd84:	4b02      	ldr	r3, [pc, #8]	@ (800dd90 <LmHandlerGetDutyCycleWaitTime+0x10>)
 800dd86:	681b      	ldr	r3, [r3, #0]
}
 800dd88:	4618      	mov	r0, r3
 800dd8a:	46bd      	mov	sp, r7
 800dd8c:	bc80      	pop	{r7}
 800dd8e:	4770      	bx	lr
 800dd90:	2000058c 	.word	0x2000058c

0800dd94 <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode, bool forceRejoin )
{
 800dd94:	b580      	push	{r7, lr}
 800dd96:	b092      	sub	sp, #72	@ 0x48
 800dd98:	af00      	add	r7, sp, #0
 800dd9a:	4603      	mov	r3, r0
 800dd9c:	460a      	mov	r2, r1
 800dd9e:	71fb      	strb	r3, [r7, #7]
 800dda0:	4613      	mov	r3, r2
 800dda2:	71bb      	strb	r3, [r7, #6]
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_JOIN;
 800dda4:	2301      	movs	r3, #1
 800dda6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800ddaa:	4b46      	ldr	r3, [pc, #280]	@ (800dec4 <LmHandlerJoin+0x130>)
 800ddac:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800ddb0:	b2db      	uxtb	r3, r3
 800ddb2:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
    mlmeReq.Req.Join.TxPower = LmHandlerParams.TxPower;
 800ddb6:	4b43      	ldr	r3, [pc, #268]	@ (800dec4 <LmHandlerJoin+0x130>)
 800ddb8:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800ddbc:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a

    if( mode == ACTIVATION_TYPE_OTAA )
 800ddc0:	79fb      	ldrb	r3, [r7, #7]
 800ddc2:	2b02      	cmp	r3, #2
 800ddc4:	d10b      	bne.n	800ddde <LmHandlerJoin+0x4a>
    {
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800ddc6:	2302      	movs	r3, #2
 800ddc8:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800ddcc:	4b3e      	ldr	r3, [pc, #248]	@ (800dec8 <LmHandlerJoin+0x134>)
 800ddce:	2202      	movs	r2, #2
 800ddd0:	71da      	strb	r2, [r3, #7]
        JoinParams.forceRejoin = forceRejoin;
 800ddd2:	4a3d      	ldr	r2, [pc, #244]	@ (800dec8 <LmHandlerJoin+0x134>)
 800ddd4:	79bb      	ldrb	r3, [r7, #6]
 800ddd6:	7213      	strb	r3, [r2, #8]
        LoRaMacStart();
 800ddd8:	f005 f942 	bl	8013060 <LoRaMacStart>
 800dddc:	e05c      	b.n	800de98 <LmHandlerJoin+0x104>
    }
    else
    {
        MibRequestConfirm_t mibReq;

        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 800ddde:	2301      	movs	r3, #1
 800dde0:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800dde4:	4b38      	ldr	r3, [pc, #224]	@ (800dec8 <LmHandlerJoin+0x134>)
 800dde6:	2201      	movs	r2, #1
 800dde8:	71da      	strb	r2, [r3, #7]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800ddea:	4b36      	ldr	r3, [pc, #216]	@ (800dec4 <LmHandlerJoin+0x130>)
 800ddec:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800ddf0:	4b35      	ldr	r3, [pc, #212]	@ (800dec8 <LmHandlerJoin+0x134>)
 800ddf2:	711a      	strb	r2, [r3, #4]
        JoinParams.TxPower = LmHandlerParams.TxPower;
 800ddf4:	4b33      	ldr	r3, [pc, #204]	@ (800dec4 <LmHandlerJoin+0x130>)
 800ddf6:	f993 2005 	ldrsb.w	r2, [r3, #5]
 800ddfa:	4b33      	ldr	r3, [pc, #204]	@ (800dec8 <LmHandlerJoin+0x134>)
 800ddfc:	715a      	strb	r2, [r3, #5]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800ddfe:	4b32      	ldr	r3, [pc, #200]	@ (800dec8 <LmHandlerJoin+0x134>)
 800de00:	2200      	movs	r2, #0
 800de02:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 800de04:	4a30      	ldr	r2, [pc, #192]	@ (800dec8 <LmHandlerJoin+0x134>)
 800de06:	79bb      	ldrb	r3, [r7, #6]
 800de08:	7213      	strb	r3, [r2, #8]

        if( CtxRestoreDone == false )
 800de0a:	4b30      	ldr	r3, [pc, #192]	@ (800decc <LmHandlerJoin+0x138>)
 800de0c:	781b      	ldrb	r3, [r3, #0]
 800de0e:	f083 0301 	eor.w	r3, r3, #1
 800de12:	b2db      	uxtb	r3, r3
 800de14:	2b00      	cmp	r3, #0
 800de16:	d034      	beq.n	800de82 <LmHandlerJoin+0xee>
        {
            /* Configure the default datarate */
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800de18:	231f      	movs	r3, #31
 800de1a:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 800de1c:	4b29      	ldr	r3, [pc, #164]	@ (800dec4 <LmHandlerJoin+0x130>)
 800de1e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800de22:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800de24:	f107 030c 	add.w	r3, r7, #12
 800de28:	4618      	mov	r0, r3
 800de2a:	f005 fbef 	bl	801360c <LoRaMacMibSetRequestConfirm>

            mibReq.Type = MIB_CHANNELS_DATARATE;
 800de2e:	2320      	movs	r3, #32
 800de30:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 800de32:	4b24      	ldr	r3, [pc, #144]	@ (800dec4 <LmHandlerJoin+0x130>)
 800de34:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800de38:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800de3a:	f107 030c 	add.w	r3, r7, #12
 800de3e:	4618      	mov	r0, r3
 800de40:	f005 fbe4 	bl	801360c <LoRaMacMibSetRequestConfirm>

            /* Configure the default Tx Power */
            mibReq.Type = MIB_CHANNELS_DEFAULT_TX_POWER;
 800de44:	2322      	movs	r3, #34	@ 0x22
 800de46:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultTxPower = LmHandlerParams.TxPower;
 800de48:	4b1e      	ldr	r3, [pc, #120]	@ (800dec4 <LmHandlerJoin+0x130>)
 800de4a:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800de4e:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800de50:	f107 030c 	add.w	r3, r7, #12
 800de54:	4618      	mov	r0, r3
 800de56:	f005 fbd9 	bl	801360c <LoRaMacMibSetRequestConfirm>

            mibReq.Type = MIB_CHANNELS_TX_POWER;
 800de5a:	2321      	movs	r3, #33	@ 0x21
 800de5c:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsTxPower = LmHandlerParams.TxPower;
 800de5e:	4b19      	ldr	r3, [pc, #100]	@ (800dec4 <LmHandlerJoin+0x130>)
 800de60:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800de64:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800de66:	f107 030c 	add.w	r3, r7, #12
 800de6a:	4618      	mov	r0, r3
 800de6c:	f005 fbce 	bl	801360c <LoRaMacMibSetRequestConfirm>

            /* Tell the MAC layer which network server version are we connecting too. */
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800de70:	2329      	movs	r3, #41	@ 0x29
 800de72:	733b      	strb	r3, [r7, #12]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800de74:	4b16      	ldr	r3, [pc, #88]	@ (800ded0 <LmHandlerJoin+0x13c>)
 800de76:	613b      	str	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800de78:	f107 030c 	add.w	r3, r7, #12
 800de7c:	4618      	mov	r0, r3
 800de7e:	f005 fbc5 	bl	801360c <LoRaMacMibSetRequestConfirm>
        }

        LoRaMacStart();
 800de82:	f005 f8ed 	bl	8013060 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800de86:	2301      	movs	r3, #1
 800de88:	733b      	strb	r3, [r7, #12]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800de8a:	2301      	movs	r3, #1
 800de8c:	743b      	strb	r3, [r7, #16]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800de8e:	f107 030c 	add.w	r3, r7, #12
 800de92:	4618      	mov	r0, r3
 800de94:	f005 fbba 	bl	801360c <LoRaMacMibSetRequestConfirm>
        LmHandlerRequestClass( LmHandlerParams.DefaultClass );
#endif /* LORAMAC_VERSION */
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( ( CtxRestoreDone == false ) || ( forceRejoin == true ) )
 800de98:	4b0c      	ldr	r3, [pc, #48]	@ (800decc <LmHandlerJoin+0x138>)
 800de9a:	781b      	ldrb	r3, [r3, #0]
 800de9c:	f083 0301 	eor.w	r3, r3, #1
 800dea0:	b2db      	uxtb	r3, r3
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d102      	bne.n	800deac <LmHandlerJoin+0x118>
 800dea6:	79bb      	ldrb	r3, [r7, #6]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d004      	beq.n	800deb6 <LmHandlerJoin+0x122>
    {
        /* Starts the join procedure */
        LoRaMacMlmeRequest( &mlmeReq );
 800deac:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800deb0:	4618      	mov	r0, r3
 800deb2:	f005 ff55 	bl	8013d60 <LoRaMacMlmeRequest>
    }
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800deb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800deb8:	4a06      	ldr	r2, [pc, #24]	@ (800ded4 <LmHandlerJoin+0x140>)
 800deba:	6013      	str	r3, [r2, #0]
#endif /* LORAMAC_VERSION */
}
 800debc:	bf00      	nop
 800debe:	3748      	adds	r7, #72	@ 0x48
 800dec0:	46bd      	mov	sp, r7
 800dec2:	bd80      	pop	{r7, pc}
 800dec4:	20000548 	.word	0x20000548
 800dec8:	20000098 	.word	0x20000098
 800decc:	20000686 	.word	0x20000686
 800ded0:	01000400 	.word	0x01000400
 800ded4:	2000058c 	.word	0x2000058c

0800ded8 <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800ded8:	b580      	push	{r7, lr}
 800deda:	b08c      	sub	sp, #48	@ 0x30
 800dedc:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800dede:	2301      	movs	r3, #1
 800dee0:	713b      	strb	r3, [r7, #4]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800dee2:	1d3b      	adds	r3, r7, #4
 800dee4:	4618      	mov	r0, r3
 800dee6:	f005 f9b9 	bl	801325c <LoRaMacMibGetRequestConfirm>
 800deea:	4603      	mov	r3, r0
 800deec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    if( status == LORAMAC_STATUS_OK )
 800def0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800def4:	2b00      	cmp	r3, #0
 800def6:	d106      	bne.n	800df06 <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800def8:	7a3b      	ldrb	r3, [r7, #8]
 800defa:	2b00      	cmp	r3, #0
 800defc:	d101      	bne.n	800df02 <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800defe:	2300      	movs	r3, #0
 800df00:	e002      	b.n	800df08 <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800df02:	2301      	movs	r3, #1
 800df04:	e000      	b.n	800df08 <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800df06:	2300      	movs	r3, #0
    }
}
 800df08:	4618      	mov	r0, r3
 800df0a:	3730      	adds	r7, #48	@ 0x30
 800df0c:	46bd      	mov	sp, r7
 800df0e:	bd80      	pop	{r7, pc}

0800df10 <LmHandlerSend>:

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed,
                                      bool allowDelayedTx )
{
 800df10:	b580      	push	{r7, lr}
 800df12:	b08a      	sub	sp, #40	@ 0x28
 800df14:	af00      	add	r7, sp, #0
 800df16:	6078      	str	r0, [r7, #4]
 800df18:	460b      	mov	r3, r1
 800df1a:	70fb      	strb	r3, [r7, #3]
 800df1c:	4613      	mov	r3, r2
 800df1e:	70bb      	strb	r3, [r7, #2]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800df20:	23ff      	movs	r3, #255	@ 0xff
 800df22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if( LoRaMacIsBusy() == true )
 800df26:	f002 faa7 	bl	8010478 <LoRaMacIsBusy>
 800df2a:	4603      	mov	r3, r0
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d002      	beq.n	800df36 <LmHandlerSend+0x26>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800df30:	f06f 0301 	mvn.w	r3, #1
 800df34:	e0ab      	b.n	800e08e <LmHandlerSend+0x17e>
    }

    if( LoRaMacIsStopped() == true )
 800df36:	f002 fac7 	bl	80104c8 <LoRaMacIsStopped>
 800df3a:	4603      	mov	r3, r0
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d002      	beq.n	800df46 <LmHandlerSend+0x36>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800df40:	f06f 0302 	mvn.w	r3, #2
 800df44:	e0a3      	b.n	800e08e <LmHandlerSend+0x17e>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800df46:	f7ff ffc7 	bl	800ded8 <LmHandlerJoinStatus>
 800df4a:	4603      	mov	r3, r0
 800df4c:	2b01      	cmp	r3, #1
 800df4e:	d00a      	beq.n	800df66 <LmHandlerSend+0x56>
    {
        /* The network isn't joined, try again. */
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800df50:	4b51      	ldr	r3, [pc, #324]	@ (800e098 <LmHandlerSend+0x188>)
 800df52:	79db      	ldrb	r3, [r3, #7]
 800df54:	4a50      	ldr	r2, [pc, #320]	@ (800e098 <LmHandlerSend+0x188>)
 800df56:	7a12      	ldrb	r2, [r2, #8]
 800df58:	4611      	mov	r1, r2
 800df5a:	4618      	mov	r0, r3
 800df5c:	f7ff ff1a 	bl	800dd94 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800df60:	f06f 0302 	mvn.w	r3, #2
 800df64:	e093      	b.n	800e08e <LmHandlerSend+0x17e>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
    }
#endif /* LORAMAC_VERSION */

    TxParams.MsgType = isTxConfirmed;
 800df66:	4a4d      	ldr	r2, [pc, #308]	@ (800e09c <LmHandlerSend+0x18c>)
 800df68:	78fb      	ldrb	r3, [r7, #3]
 800df6a:	7213      	strb	r3, [r2, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800df6c:	78fb      	ldrb	r3, [r7, #3]
 800df6e:	2b00      	cmp	r3, #0
 800df70:	bf14      	ite	ne
 800df72:	2301      	movne	r3, #1
 800df74:	2300      	moveq	r3, #0
 800df76:	b2db      	uxtb	r3, r3
 800df78:	743b      	strb	r3, [r7, #16]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800df7a:	4b49      	ldr	r3, [pc, #292]	@ (800e0a0 <LmHandlerSend+0x190>)
 800df7c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800df80:	77bb      	strb	r3, [r7, #30]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	785b      	ldrb	r3, [r3, #1]
 800df86:	f107 020c 	add.w	r2, r7, #12
 800df8a:	4611      	mov	r1, r2
 800df8c:	4618      	mov	r0, r3
 800df8e:	f005 f8d5 	bl	801313c <LoRaMacQueryTxPossible>
 800df92:	4603      	mov	r3, r0
 800df94:	2b00      	cmp	r3, #0
 800df96:	d009      	beq.n	800dfac <LmHandlerSend+0x9c>
    {
        /* Send empty frame in order to flush MAC commands */
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800df98:	2300      	movs	r3, #0
 800df9a:	743b      	strb	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800df9c:	2300      	movs	r3, #0
 800df9e:	61bb      	str	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800dfa0:	2300      	movs	r3, #0
 800dfa2:	83bb      	strh	r3, [r7, #28]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 800dfa4:	23f9      	movs	r3, #249	@ 0xf9
 800dfa6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800dfaa:	e008      	b.n	800dfbe <LmHandlerSend+0xae>
    }
    else
    {
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	781b      	ldrb	r3, [r3, #0]
 800dfb0:	753b      	strb	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	785b      	ldrb	r3, [r3, #1]
 800dfb6:	83bb      	strh	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	685b      	ldr	r3, [r3, #4]
 800dfbc:	61bb      	str	r3, [r7, #24]
    }

    TxParams.AppData = *appData;
 800dfbe:	4b37      	ldr	r3, [pc, #220]	@ (800e09c <LmHandlerSend+0x18c>)
 800dfc0:	687a      	ldr	r2, [r7, #4]
 800dfc2:	3310      	adds	r3, #16
 800dfc4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800dfc8:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800dfcc:	4b34      	ldr	r3, [pc, #208]	@ (800e0a0 <LmHandlerSend+0x190>)
 800dfce:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800dfd2:	4b32      	ldr	r3, [pc, #200]	@ (800e09c <LmHandlerSend+0x18c>)
 800dfd4:	729a      	strb	r2, [r3, #10]

    status = LoRaMacMcpsRequest( &mcpsReq, allowDelayedTx );
 800dfd6:	78ba      	ldrb	r2, [r7, #2]
 800dfd8:	f107 0310 	add.w	r3, r7, #16
 800dfdc:	4611      	mov	r1, r2
 800dfde:	4618      	mov	r0, r3
 800dfe0:	f006 f856 	bl	8014090 <LoRaMacMcpsRequest>
 800dfe4:	4603      	mov	r3, r0
 800dfe6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800dfea:	6a3b      	ldr	r3, [r7, #32]
 800dfec:	4a2d      	ldr	r2, [pc, #180]	@ (800e0a4 <LmHandlerSend+0x194>)
 800dfee:	6013      	str	r3, [r2, #0]

    switch( status )
 800dff0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800dff4:	2b11      	cmp	r3, #17
 800dff6:	d843      	bhi.n	800e080 <LmHandlerSend+0x170>
 800dff8:	a201      	add	r2, pc, #4	@ (adr r2, 800e000 <LmHandlerSend+0xf0>)
 800dffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dffe:	bf00      	nop
 800e000:	0800e049 	.word	0x0800e049
 800e004:	0800e061 	.word	0x0800e061
 800e008:	0800e081 	.word	0x0800e081
 800e00c:	0800e081 	.word	0x0800e081
 800e010:	0800e081 	.word	0x0800e081
 800e014:	0800e081 	.word	0x0800e081
 800e018:	0800e081 	.word	0x0800e081
 800e01c:	0800e069 	.word	0x0800e069
 800e020:	0800e081 	.word	0x0800e081
 800e024:	0800e081 	.word	0x0800e081
 800e028:	0800e081 	.word	0x0800e081
 800e02c:	0800e079 	.word	0x0800e079
 800e030:	0800e081 	.word	0x0800e081
 800e034:	0800e081 	.word	0x0800e081
 800e038:	0800e061 	.word	0x0800e061
 800e03c:	0800e061 	.word	0x0800e061
 800e040:	0800e061 	.word	0x0800e061
 800e044:	0800e071 	.word	0x0800e071
    {
        case LORAMAC_STATUS_OK:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            IsUplinkTxPending = false;
 800e048:	4b17      	ldr	r3, [pc, #92]	@ (800e0a8 <LmHandlerSend+0x198>)
 800e04a:	2200      	movs	r2, #0
 800e04c:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */
            if( lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED )
 800e04e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800e052:	f113 0f07 	cmn.w	r3, #7
 800e056:	d017      	beq.n	800e088 <LmHandlerSend+0x178>
            {
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800e058:	2300      	movs	r3, #0
 800e05a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 800e05e:	e013      	b.n	800e088 <LmHandlerSend+0x178>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800e060:	23fe      	movs	r3, #254	@ 0xfe
 800e062:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800e066:	e010      	b.n	800e08a <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800e068:	23fd      	movs	r3, #253	@ 0xfd
 800e06a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800e06e:	e00c      	b.n	800e08a <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800e070:	23fb      	movs	r3, #251	@ 0xfb
 800e072:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800e076:	e008      	b.n	800e08a <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800e078:	23fa      	movs	r3, #250	@ 0xfa
 800e07a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800e07e:	e004      	b.n	800e08a <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800e080:	23ff      	movs	r3, #255	@ 0xff
 800e082:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800e086:	e000      	b.n	800e08a <LmHandlerSend+0x17a>
            break;
 800e088:	bf00      	nop
    }

    return lmhStatus;
 800e08a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800e08e:	4618      	mov	r0, r3
 800e090:	3728      	adds	r7, #40	@ 0x28
 800e092:	46bd      	mov	sp, r7
 800e094:	bd80      	pop	{r7, pc}
 800e096:	bf00      	nop
 800e098:	20000098 	.word	0x20000098
 800e09c:	200000a4 	.word	0x200000a4
 800e0a0:	20000548 	.word	0x20000548
 800e0a4:	2000058c 	.word	0x2000058c
 800e0a8:	20000590 	.word	0x20000590

0800e0ac <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800e0ac:	b580      	push	{r7, lr}
 800e0ae:	b086      	sub	sp, #24
 800e0b0:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800e0b2:	2309      	movs	r3, #9
 800e0b4:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800e0b6:	463b      	mov	r3, r7
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	f005 fe51 	bl	8013d60 <LoRaMacMlmeRequest>
 800e0be:	4603      	mov	r3, r0
 800e0c0:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800e0c2:	693b      	ldr	r3, [r7, #16]
 800e0c4:	4a06      	ldr	r2, [pc, #24]	@ (800e0e0 <LmHandlerDeviceTimeReq+0x34>)
 800e0c6:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 800e0c8:	7dfb      	ldrb	r3, [r7, #23]
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d101      	bne.n	800e0d2 <LmHandlerDeviceTimeReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800e0ce:	2300      	movs	r3, #0
 800e0d0:	e001      	b.n	800e0d6 <LmHandlerDeviceTimeReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800e0d2:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800e0d6:	4618      	mov	r0, r3
 800e0d8:	3718      	adds	r7, #24
 800e0da:	46bd      	mov	sp, r7
 800e0dc:	bd80      	pop	{r7, pc}
 800e0de:	bf00      	nop
 800e0e0:	2000058c 	.word	0x2000058c

0800e0e4 <LmHandlerPingSlotReq>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerPingSlotReq( uint8_t periodicity )
{
 800e0e4:	b480      	push	{r7}
 800e0e6:	b083      	sub	sp, #12
 800e0e8:	af00      	add	r7, sp, #0
 800e0ea:	4603      	mov	r3, r0
 800e0ec:	71fb      	strb	r3, [r7, #7]
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
    }
    else
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    {
        return LORAMAC_HANDLER_ERROR;
 800e0ee:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800e0f2:	4618      	mov	r0, r3
 800e0f4:	370c      	adds	r7, #12
 800e0f6:	46bd      	mov	sp, r7
 800e0f8:	bc80      	pop	{r7}
 800e0fa:	4770      	bx	lr

0800e0fc <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b08e      	sub	sp, #56	@ 0x38
 800e100:	af00      	add	r7, sp, #0
 800e102:	4603      	mov	r3, r0
 800e104:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800e106:	2300      	movs	r3, #0
 800e108:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( LoRaMacIsBusy() == true )
 800e10c:	f002 f9b4 	bl	8010478 <LoRaMacIsBusy>
 800e110:	4603      	mov	r3, r0
 800e112:	2b00      	cmp	r3, #0
 800e114:	d002      	beq.n	800e11c <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800e116:	f06f 0301 	mvn.w	r3, #1
 800e11a:	e071      	b.n	800e200 <LmHandlerRequestClass+0x104>
    }

    if( LmHandlerJoinStatus() != LORAMAC_HANDLER_SET )
 800e11c:	f7ff fedc 	bl	800ded8 <LmHandlerJoinStatus>
 800e120:	4603      	mov	r3, r0
 800e122:	2b01      	cmp	r3, #1
 800e124:	d002      	beq.n	800e12c <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800e126:	f06f 0302 	mvn.w	r3, #2
 800e12a:	e069      	b.n	800e200 <LmHandlerRequestClass+0x104>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800e12c:	2300      	movs	r3, #0
 800e12e:	733b      	strb	r3, [r7, #12]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800e130:	f107 030c 	add.w	r3, r7, #12
 800e134:	4618      	mov	r0, r3
 800e136:	f005 f891 	bl	801325c <LoRaMacMibGetRequestConfirm>
 800e13a:	4603      	mov	r3, r0
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d002      	beq.n	800e146 <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800e140:	f04f 33ff 	mov.w	r3, #4294967295
 800e144:	e05c      	b.n	800e200 <LmHandlerRequestClass+0x104>
    }
    currentClass = mibReq.Param.Class;
 800e146:	7c3b      	ldrb	r3, [r7, #16]
 800e148:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Attempt to switch only if class update */
    if( currentClass != newClass )
 800e14c:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 800e150:	79fb      	ldrb	r3, [r7, #7]
 800e152:	429a      	cmp	r2, r3
 800e154:	d052      	beq.n	800e1fc <LmHandlerRequestClass+0x100>
    {
        switch( newClass )
 800e156:	79fb      	ldrb	r3, [r7, #7]
 800e158:	2b02      	cmp	r3, #2
 800e15a:	d028      	beq.n	800e1ae <LmHandlerRequestClass+0xb2>
 800e15c:	2b02      	cmp	r3, #2
 800e15e:	dc48      	bgt.n	800e1f2 <LmHandlerRequestClass+0xf6>
 800e160:	2b00      	cmp	r3, #0
 800e162:	d002      	beq.n	800e16a <LmHandlerRequestClass+0x6e>
 800e164:	2b01      	cmp	r3, #1
 800e166:	d01e      	beq.n	800e1a6 <LmHandlerRequestClass+0xaa>
                        }
                    }
                }
                break;
            default:
                break;
 800e168:	e043      	b.n	800e1f2 <LmHandlerRequestClass+0xf6>
                    if( currentClass != CLASS_A )
 800e16a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d041      	beq.n	800e1f6 <LmHandlerRequestClass+0xfa>
                        mibReq.Param.Class = newClass;
 800e172:	79fb      	ldrb	r3, [r7, #7]
 800e174:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800e176:	f107 030c 	add.w	r3, r7, #12
 800e17a:	4618      	mov	r0, r3
 800e17c:	f005 fa46 	bl	801360c <LoRaMacMibSetRequestConfirm>
 800e180:	4603      	mov	r3, r0
 800e182:	2b00      	cmp	r3, #0
 800e184:	d10b      	bne.n	800e19e <LmHandlerRequestClass+0xa2>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800e186:	4b20      	ldr	r3, [pc, #128]	@ (800e208 <LmHandlerRequestClass+0x10c>)
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d032      	beq.n	800e1f6 <LmHandlerRequestClass+0xfa>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800e190:	4b1d      	ldr	r3, [pc, #116]	@ (800e208 <LmHandlerRequestClass+0x10c>)
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e196:	79fa      	ldrb	r2, [r7, #7]
 800e198:	4610      	mov	r0, r2
 800e19a:	4798      	blx	r3
                break;
 800e19c:	e02b      	b.n	800e1f6 <LmHandlerRequestClass+0xfa>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800e19e:	23ff      	movs	r3, #255	@ 0xff
 800e1a0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800e1a4:	e027      	b.n	800e1f6 <LmHandlerRequestClass+0xfa>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800e1a6:	23ff      	movs	r3, #255	@ 0xff
 800e1a8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800e1ac:	e026      	b.n	800e1fc <LmHandlerRequestClass+0x100>
                    if( currentClass != CLASS_A )
 800e1ae:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d003      	beq.n	800e1be <LmHandlerRequestClass+0xc2>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800e1b6:	23ff      	movs	r3, #255	@ 0xff
 800e1b8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800e1bc:	e01d      	b.n	800e1fa <LmHandlerRequestClass+0xfe>
                        mibReq.Param.Class = newClass;
 800e1be:	79fb      	ldrb	r3, [r7, #7]
 800e1c0:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800e1c2:	f107 030c 	add.w	r3, r7, #12
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	f005 fa20 	bl	801360c <LoRaMacMibSetRequestConfirm>
 800e1cc:	4603      	mov	r3, r0
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d10b      	bne.n	800e1ea <LmHandlerRequestClass+0xee>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800e1d2:	4b0d      	ldr	r3, [pc, #52]	@ (800e208 <LmHandlerRequestClass+0x10c>)
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d00e      	beq.n	800e1fa <LmHandlerRequestClass+0xfe>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800e1dc:	4b0a      	ldr	r3, [pc, #40]	@ (800e208 <LmHandlerRequestClass+0x10c>)
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e1e2:	79fa      	ldrb	r2, [r7, #7]
 800e1e4:	4610      	mov	r0, r2
 800e1e6:	4798      	blx	r3
                break;
 800e1e8:	e007      	b.n	800e1fa <LmHandlerRequestClass+0xfe>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800e1ea:	23ff      	movs	r3, #255	@ 0xff
 800e1ec:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800e1f0:	e003      	b.n	800e1fa <LmHandlerRequestClass+0xfe>
                break;
 800e1f2:	bf00      	nop
 800e1f4:	e002      	b.n	800e1fc <LmHandlerRequestClass+0x100>
                break;
 800e1f6:	bf00      	nop
 800e1f8:	e000      	b.n	800e1fc <LmHandlerRequestClass+0x100>
                break;
 800e1fa:	bf00      	nop
        }
    }
    return errorStatus;
 800e1fc:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800e200:	4618      	mov	r0, r3
 800e202:	3738      	adds	r7, #56	@ 0x38
 800e204:	46bd      	mov	sp, r7
 800e206:	bd80      	pop	{r7, pc}
 800e208:	20000560 	.word	0x20000560

0800e20c <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800e20c:	b580      	push	{r7, lr}
 800e20e:	b08c      	sub	sp, #48	@ 0x30
 800e210:	af00      	add	r7, sp, #0
 800e212:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( deviceClass == NULL )
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	2b00      	cmp	r3, #0
 800e218:	d102      	bne.n	800e220 <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800e21a:	f04f 33ff 	mov.w	r3, #4294967295
 800e21e:	e010      	b.n	800e242 <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800e220:	2300      	movs	r3, #0
 800e222:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800e224:	f107 0308 	add.w	r3, r7, #8
 800e228:	4618      	mov	r0, r3
 800e22a:	f005 f817 	bl	801325c <LoRaMacMibGetRequestConfirm>
 800e22e:	4603      	mov	r3, r0
 800e230:	2b00      	cmp	r3, #0
 800e232:	d002      	beq.n	800e23a <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800e234:	f04f 33ff 	mov.w	r3, #4294967295
 800e238:	e003      	b.n	800e242 <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800e23a:	7b3a      	ldrb	r2, [r7, #12]
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800e240:	2300      	movs	r3, #0
}
 800e242:	4618      	mov	r0, r3
 800e244:	3730      	adds	r7, #48	@ 0x30
 800e246:	46bd      	mov	sp, r7
 800e248:	bd80      	pop	{r7, pc}
	...

0800e24c <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800e24c:	b580      	push	{r7, lr}
 800e24e:	b08c      	sub	sp, #48	@ 0x30
 800e250:	af00      	add	r7, sp, #0
 800e252:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if( txDatarate == NULL )
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	2b00      	cmp	r3, #0
 800e258:	d102      	bne.n	800e260 <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800e25a:	f04f 33ff 	mov.w	r3, #4294967295
 800e25e:	e016      	b.n	800e28e <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800e260:	2320      	movs	r3, #32
 800e262:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK )
 800e264:	f107 0308 	add.w	r3, r7, #8
 800e268:	4618      	mov	r0, r3
 800e26a:	f004 fff7 	bl	801325c <LoRaMacMibGetRequestConfirm>
 800e26e:	4603      	mov	r3, r0
 800e270:	2b00      	cmp	r3, #0
 800e272:	d002      	beq.n	800e27a <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800e274:	f04f 33ff 	mov.w	r3, #4294967295
 800e278:	e009      	b.n	800e28e <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800e27a:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	f993 2000 	ldrsb.w	r2, [r3]
 800e288:	4b03      	ldr	r3, [pc, #12]	@ (800e298 <LmHandlerGetTxDatarate+0x4c>)
 800e28a:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 800e28c:	2300      	movs	r3, #0
}
 800e28e:	4618      	mov	r0, r3
 800e290:	3730      	adds	r7, #48	@ 0x30
 800e292:	46bd      	mov	sp, r7
 800e294:	bd80      	pop	{r7, pc}
 800e296:	bf00      	nop
 800e298:	20000548 	.word	0x20000548

0800e29c <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800e29c:	b580      	push	{r7, lr}
 800e29e:	b08c      	sub	sp, #48	@ 0x30
 800e2a0:	af00      	add	r7, sp, #0
 800e2a2:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800e2a4:	2323      	movs	r3, #35	@ 0x23
 800e2a6:	723b      	strb	r3, [r7, #8]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	60fb      	str	r3, [r7, #12]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800e2ac:	f107 0308 	add.w	r3, r7, #8
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	f005 f9ab 	bl	801360c <LoRaMacMibSetRequestConfirm>
 800e2b6:	4603      	mov	r3, r0
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d002      	beq.n	800e2c2 <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800e2bc:	f04f 33ff 	mov.w	r3, #4294967295
 800e2c0:	e000      	b.n	800e2c4 <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800e2c2:	2300      	movs	r3, #0
}
 800e2c4:	4618      	mov	r0, r3
 800e2c6:	3730      	adds	r7, #48	@ 0x30
 800e2c8:	46bd      	mov	sp, r7
 800e2ca:	bd80      	pop	{r7, pc}

0800e2cc <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800e2cc:	b580      	push	{r7, lr}
 800e2ce:	b082      	sub	sp, #8
 800e2d0:	af00      	add	r7, sp, #0
 800e2d2:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800e2d4:	4b18      	ldr	r3, [pc, #96]	@ (800e338 <McpsConfirm+0x6c>)
 800e2d6:	2201      	movs	r2, #1
 800e2d8:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	785a      	ldrb	r2, [r3, #1]
 800e2de:	4b16      	ldr	r3, [pc, #88]	@ (800e338 <McpsConfirm+0x6c>)
 800e2e0:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	789b      	ldrb	r3, [r3, #2]
 800e2e6:	b25a      	sxtb	r2, r3
 800e2e8:	4b13      	ldr	r3, [pc, #76]	@ (800e338 <McpsConfirm+0x6c>)
 800e2ea:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	68db      	ldr	r3, [r3, #12]
 800e2f0:	4a11      	ldr	r2, [pc, #68]	@ (800e338 <McpsConfirm+0x6c>)
 800e2f2:	60d3      	str	r3, [r2, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800e2fa:	4b0f      	ldr	r3, [pc, #60]	@ (800e338 <McpsConfirm+0x6c>)
 800e2fc:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	691b      	ldr	r3, [r3, #16]
 800e302:	b2da      	uxtb	r2, r3
 800e304:	4b0c      	ldr	r3, [pc, #48]	@ (800e338 <McpsConfirm+0x6c>)
 800e306:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	791b      	ldrb	r3, [r3, #4]
 800e30c:	461a      	mov	r2, r3
 800e30e:	4b0a      	ldr	r3, [pc, #40]	@ (800e338 <McpsConfirm+0x6c>)
 800e310:	725a      	strb	r2, [r3, #9]

    if( LmHandlerCallbacks->OnTxData != NULL )
 800e312:	4b0a      	ldr	r3, [pc, #40]	@ (800e33c <McpsConfirm+0x70>)
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d004      	beq.n	800e326 <McpsConfirm+0x5a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 800e31c:	4b07      	ldr	r3, [pc, #28]	@ (800e33c <McpsConfirm+0x70>)
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e322:	4805      	ldr	r0, [pc, #20]	@ (800e338 <McpsConfirm+0x6c>)
 800e324:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800e326:	6879      	ldr	r1, [r7, #4]
 800e328:	2000      	movs	r0, #0
 800e32a:	f000 f9e9 	bl	800e700 <LmHandlerPackagesNotify>
}
 800e32e:	bf00      	nop
 800e330:	3708      	adds	r7, #8
 800e332:	46bd      	mov	sp, r7
 800e334:	bd80      	pop	{r7, pc}
 800e336:	bf00      	nop
 800e338:	200000a4 	.word	0x200000a4
 800e33c:	20000560 	.word	0x20000560

0800e340 <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *rxStatus )
{
 800e340:	b580      	push	{r7, lr}
 800e342:	b086      	sub	sp, #24
 800e344:	af00      	add	r7, sp, #0
 800e346:	6078      	str	r0, [r7, #4]
 800e348:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800e34a:	2300      	movs	r3, #0
 800e34c:	73fb      	strb	r3, [r7, #15]
    RxParams.IsMcpsIndication = 1;
 800e34e:	4b2d      	ldr	r3, [pc, #180]	@ (800e404 <McpsIndication+0xc4>)
 800e350:	2201      	movs	r2, #1
 800e352:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	785a      	ldrb	r2, [r3, #1]
 800e358:	4b2a      	ldr	r3, [pc, #168]	@ (800e404 <McpsIndication+0xc4>)
 800e35a:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800e35c:	4b29      	ldr	r3, [pc, #164]	@ (800e404 <McpsIndication+0xc4>)
 800e35e:	785b      	ldrb	r3, [r3, #1]
 800e360:	2b00      	cmp	r3, #0
 800e362:	d14b      	bne.n	800e3fc <McpsIndication+0xbc>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	791b      	ldrb	r3, [r3, #4]
 800e368:	b25a      	sxtb	r2, r3
 800e36a:	4b26      	ldr	r3, [pc, #152]	@ (800e404 <McpsIndication+0xc4>)
 800e36c:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800e36e:	683b      	ldr	r3, [r7, #0]
 800e370:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e374:	b25a      	sxtb	r2, r3
 800e376:	4b23      	ldr	r3, [pc, #140]	@ (800e404 <McpsIndication+0xc4>)
 800e378:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800e37a:	683b      	ldr	r3, [r7, #0]
 800e37c:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800e380:	4b20      	ldr	r3, [pc, #128]	@ (800e404 <McpsIndication+0xc4>)
 800e382:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800e384:	683b      	ldr	r3, [r7, #0]
 800e386:	78da      	ldrb	r2, [r3, #3]
 800e388:	4b1e      	ldr	r3, [pc, #120]	@ (800e404 <McpsIndication+0xc4>)
 800e38a:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	691b      	ldr	r3, [r3, #16]
 800e390:	4a1c      	ldr	r2, [pc, #112]	@ (800e404 <McpsIndication+0xc4>)
 800e392:	60d3      	str	r3, [r2, #12]

    appData.Port = mcpsIndication->Port;
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	78db      	ldrb	r3, [r3, #3]
 800e398:	743b      	strb	r3, [r7, #16]
    appData.BufferSize = mcpsIndication->BufferSize;
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	7b1b      	ldrb	r3, [r3, #12]
 800e39e:	747b      	strb	r3, [r7, #17]
    appData.Buffer = mcpsIndication->Buffer;
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	689b      	ldr	r3, [r3, #8]
 800e3a4:	617b      	str	r3, [r7, #20]

    if( LmHandlerCallbacks->OnRxData != NULL )
 800e3a6:	4b18      	ldr	r3, [pc, #96]	@ (800e408 <McpsIndication+0xc8>)
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d007      	beq.n	800e3c0 <McpsIndication+0x80>
    {
        LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 800e3b0:	4b15      	ldr	r3, [pc, #84]	@ (800e408 <McpsIndication+0xc8>)
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3b6:	f107 0210 	add.w	r2, r7, #16
 800e3ba:	4912      	ldr	r1, [pc, #72]	@ (800e404 <McpsIndication+0xc4>)
 800e3bc:	4610      	mov	r0, r2
 800e3be:	4798      	blx	r3
    }

    if( ( LmHandlerCallbacks->OnSysTimeUpdate != NULL ) && ( mcpsIndication->DeviceTimeAnsReceived == true ) )
 800e3c0:	4b11      	ldr	r3, [pc, #68]	@ (800e408 <McpsIndication+0xc8>)
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d007      	beq.n	800e3da <McpsIndication+0x9a>
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	7e1b      	ldrb	r3, [r3, #24]
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d003      	beq.n	800e3da <McpsIndication+0x9a>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800e3d2:	4b0d      	ldr	r3, [pc, #52]	@ (800e408 <McpsIndication+0xc8>)
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e3d8:	4798      	blx	r3
    }
    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800e3da:	6879      	ldr	r1, [r7, #4]
 800e3dc:	2001      	movs	r0, #1
 800e3de:	f000 f98f 	bl	800e700 <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass( &deviceClass );
 800e3e2:	f107 030f 	add.w	r3, r7, #15
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	f7ff ff10 	bl	800e20c <LmHandlerGetCurrentClass>
            .Port = 0
        };
        LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( mcpsIndication->IsUplinkTxPending != 0 )
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	795b      	ldrb	r3, [r3, #5]
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d004      	beq.n	800e3fe <McpsIndication+0xbe>
    {
        /* The server signals that it has pending data to be sent. */
        /* We schedule an uplink as soon as possible to flush the server. */
        IsUplinkTxPending = true;
 800e3f4:	4b05      	ldr	r3, [pc, #20]	@ (800e40c <McpsIndication+0xcc>)
 800e3f6:	2201      	movs	r2, #1
 800e3f8:	701a      	strb	r2, [r3, #0]
 800e3fa:	e000      	b.n	800e3fe <McpsIndication+0xbe>
        return;
 800e3fc:	bf00      	nop
    }
#endif /* LORAMAC_VERSION */
}
 800e3fe:	3718      	adds	r7, #24
 800e400:	46bd      	mov	sp, r7
 800e402:	bd80      	pop	{r7, pc}
 800e404:	200000c0 	.word	0x200000c0
 800e408:	20000560 	.word	0x20000560
 800e40c:	20000590 	.word	0x20000590

0800e410 <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800e410:	b580      	push	{r7, lr}
 800e412:	b08c      	sub	sp, #48	@ 0x30
 800e414:	af00      	add	r7, sp, #0
 800e416:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800e418:	4b49      	ldr	r3, [pc, #292]	@ (800e540 <MlmeConfirm+0x130>)
 800e41a:	2200      	movs	r2, #0
 800e41c:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	785a      	ldrb	r2, [r3, #1]
 800e422:	4b47      	ldr	r3, [pc, #284]	@ (800e540 <MlmeConfirm+0x130>)
 800e424:	705a      	strb	r2, [r3, #1]
    if( LmHandlerCallbacks->OnTxData != NULL )
 800e426:	4b47      	ldr	r3, [pc, #284]	@ (800e544 <MlmeConfirm+0x134>)
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d004      	beq.n	800e43a <MlmeConfirm+0x2a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 800e430:	4b44      	ldr	r3, [pc, #272]	@ (800e544 <MlmeConfirm+0x134>)
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e436:	4842      	ldr	r0, [pc, #264]	@ (800e540 <MlmeConfirm+0x130>)
 800e438:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800e43a:	6879      	ldr	r1, [r7, #4]
 800e43c:	2002      	movs	r0, #2
 800e43e:	f000 f95f 	bl	800e700 <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	781b      	ldrb	r3, [r3, #0]
 800e446:	3b01      	subs	r3, #1
 800e448:	2b0b      	cmp	r3, #11
 800e44a:	d872      	bhi.n	800e532 <MlmeConfirm+0x122>
 800e44c:	a201      	add	r2, pc, #4	@ (adr r2, 800e454 <MlmeConfirm+0x44>)
 800e44e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e452:	bf00      	nop
 800e454:	0800e485 	.word	0x0800e485
 800e458:	0800e533 	.word	0x0800e533
 800e45c:	0800e533 	.word	0x0800e533
 800e460:	0800e533 	.word	0x0800e533
 800e464:	0800e501 	.word	0x0800e501
 800e468:	0800e533 	.word	0x0800e533
 800e46c:	0800e533 	.word	0x0800e533
 800e470:	0800e533 	.word	0x0800e533
 800e474:	0800e533 	.word	0x0800e533
 800e478:	0800e533 	.word	0x0800e533
 800e47c:	0800e519 	.word	0x0800e519
 800e480:	0800e533 	.word	0x0800e533
    {
        case MLME_JOIN:
            {
                MibRequestConfirm_t mibReq;
                mibReq.Type = MIB_DEV_ADDR;
 800e484:	2306      	movs	r3, #6
 800e486:	723b      	strb	r3, [r7, #8]
                LoRaMacMibGetRequestConfirm( &mibReq );
 800e488:	f107 0308 	add.w	r3, r7, #8
 800e48c:	4618      	mov	r0, r3
 800e48e:	f004 fee5 	bl	801325c <LoRaMacMibGetRequestConfirm>
                if( SecureElementSetDevAddr( JoinParams.Mode, mibReq.Param.DevAddr ) == SECURE_ELEMENT_SUCCESS )
 800e492:	4b2d      	ldr	r3, [pc, #180]	@ (800e548 <MlmeConfirm+0x138>)
 800e494:	79db      	ldrb	r3, [r3, #7]
 800e496:	68fa      	ldr	r2, [r7, #12]
 800e498:	4611      	mov	r1, r2
 800e49a:	4618      	mov	r0, r3
 800e49c:	f7ff fa78 	bl	800d990 <SecureElementSetDevAddr>
 800e4a0:	4603      	mov	r3, r0
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d102      	bne.n	800e4ac <MlmeConfirm+0x9c>
                {
                    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	4a28      	ldr	r2, [pc, #160]	@ (800e54c <MlmeConfirm+0x13c>)
 800e4aa:	6153      	str	r3, [r2, #20]
                }
                LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800e4ac:	4828      	ldr	r0, [pc, #160]	@ (800e550 <MlmeConfirm+0x140>)
 800e4ae:	f7ff fecd 	bl	800e24c <LmHandlerGetTxDatarate>
                LmHandlerGetTxPower( &JoinParams.TxPower );
 800e4b2:	4828      	ldr	r0, [pc, #160]	@ (800e554 <MlmeConfirm+0x144>)
 800e4b4:	f000 fa74 	bl	800e9a0 <LmHandlerGetTxPower>

                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800e4b8:	4b21      	ldr	r3, [pc, #132]	@ (800e540 <MlmeConfirm+0x130>)
 800e4ba:	785b      	ldrb	r3, [r3, #1]
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d108      	bne.n	800e4d2 <MlmeConfirm+0xc2>
                {
                    /* Status is OK, node has joined the network */
                    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800e4c0:	4b21      	ldr	r3, [pc, #132]	@ (800e548 <MlmeConfirm+0x138>)
 800e4c2:	2200      	movs	r2, #0
 800e4c4:	719a      	strb	r2, [r3, #6]
                    LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 800e4c6:	4b24      	ldr	r3, [pc, #144]	@ (800e558 <MlmeConfirm+0x148>)
 800e4c8:	785b      	ldrb	r3, [r3, #1]
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	f7ff fe16 	bl	800e0fc <LmHandlerRequestClass>
 800e4d0:	e002      	b.n	800e4d8 <MlmeConfirm+0xc8>
                }
                else
                {
                    /* Join was not successful. Try to join again */
                    JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800e4d2:	4b1d      	ldr	r3, [pc, #116]	@ (800e548 <MlmeConfirm+0x138>)
 800e4d4:	22ff      	movs	r2, #255	@ 0xff
 800e4d6:	719a      	strb	r2, [r3, #6]
                }
                /* Notify upper layer */
                if( LmHandlerCallbacks->OnJoinRequest != NULL )
 800e4d8:	4b1a      	ldr	r3, [pc, #104]	@ (800e544 <MlmeConfirm+0x134>)
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d004      	beq.n	800e4ec <MlmeConfirm+0xdc>
                {
                    LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800e4e2:	4b18      	ldr	r3, [pc, #96]	@ (800e544 <MlmeConfirm+0x134>)
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e4e8:	4817      	ldr	r0, [pc, #92]	@ (800e548 <MlmeConfirm+0x138>)
 800e4ea:	4798      	blx	r3
                }
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800e4ec:	4b14      	ldr	r3, [pc, #80]	@ (800e540 <MlmeConfirm+0x130>)
 800e4ee:	785b      	ldrb	r3, [r3, #1]
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d120      	bne.n	800e536 <MlmeConfirm+0x126>
                {
                    SecureElementPrintSessionKeys( JoinParams.Mode );
 800e4f4:	4b14      	ldr	r3, [pc, #80]	@ (800e548 <MlmeConfirm+0x138>)
 800e4f6:	79db      	ldrb	r3, [r3, #7]
 800e4f8:	4618      	mov	r0, r3
 800e4fa:	f7fe fff1 	bl	800d4e0 <SecureElementPrintSessionKeys>
                }
            }
            break;
 800e4fe:	e01a      	b.n	800e536 <MlmeConfirm+0x126>
        case MLME_LINK_CHECK:
            {
                RxParams.LinkCheck = true;
 800e500:	4b16      	ldr	r3, [pc, #88]	@ (800e55c <MlmeConfirm+0x14c>)
 800e502:	2201      	movs	r2, #1
 800e504:	745a      	strb	r2, [r3, #17]
                RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	7a1a      	ldrb	r2, [r3, #8]
 800e50a:	4b14      	ldr	r3, [pc, #80]	@ (800e55c <MlmeConfirm+0x14c>)
 800e50c:	749a      	strb	r2, [r3, #18]
                RxParams.NbGateways = mlmeConfirm->NbGateways;
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	7a5a      	ldrb	r2, [r3, #9]
 800e512:	4b12      	ldr	r3, [pc, #72]	@ (800e55c <MlmeConfirm+0x14c>)
 800e514:	74da      	strb	r2, [r3, #19]
            }
            break;
 800e516:	e00f      	b.n	800e538 <MlmeConfirm+0x128>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        case MLME_BEACON_ACQUISITION:
            {
                if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	785b      	ldrb	r3, [r3, #1]
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d105      	bne.n	800e52c <MlmeConfirm+0x11c>
                {
                    /* Beacon has been acquired */
                    /* Request server for ping slot */
                    LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 800e520:	4b0d      	ldr	r3, [pc, #52]	@ (800e558 <MlmeConfirm+0x148>)
 800e522:	7c1b      	ldrb	r3, [r3, #16]
 800e524:	4618      	mov	r0, r3
 800e526:	f7ff fddd 	bl	800e0e4 <LmHandlerPingSlotReq>
                    /* Beacon not acquired */
                    /* Request Device Time again. */
                    LmHandlerDeviceTimeReq( );
                }
            }
            break;
 800e52a:	e005      	b.n	800e538 <MlmeConfirm+0x128>
                    LmHandlerDeviceTimeReq( );
 800e52c:	f7ff fdbe 	bl	800e0ac <LmHandlerDeviceTimeReq>
            break;
 800e530:	e002      	b.n	800e538 <MlmeConfirm+0x128>
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 800e532:	bf00      	nop
 800e534:	e000      	b.n	800e538 <MlmeConfirm+0x128>
            break;
 800e536:	bf00      	nop
    }
}
 800e538:	bf00      	nop
 800e53a:	3730      	adds	r7, #48	@ 0x30
 800e53c:	46bd      	mov	sp, r7
 800e53e:	bd80      	pop	{r7, pc}
 800e540:	200000a4 	.word	0x200000a4
 800e544:	20000560 	.word	0x20000560
 800e548:	20000098 	.word	0x20000098
 800e54c:	2000050c 	.word	0x2000050c
 800e550:	2000009c 	.word	0x2000009c
 800e554:	2000009d 	.word	0x2000009d
 800e558:	20000548 	.word	0x20000548
 800e55c:	200000c0 	.word	0x200000c0

0800e560 <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *rxStatus )
{
 800e560:	b580      	push	{r7, lr}
 800e562:	b082      	sub	sp, #8
 800e564:	af00      	add	r7, sp, #0
 800e566:	6078      	str	r0, [r7, #4]
 800e568:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800e56a:	4b20      	ldr	r3, [pc, #128]	@ (800e5ec <MlmeIndication+0x8c>)
 800e56c:	2200      	movs	r2, #0
 800e56e:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	785a      	ldrb	r2, [r3, #1]
 800e574:	4b1d      	ldr	r3, [pc, #116]	@ (800e5ec <MlmeIndication+0x8c>)
 800e576:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	789b      	ldrb	r3, [r3, #2]
 800e57c:	b25a      	sxtb	r2, r3
 800e57e:	4b1b      	ldr	r3, [pc, #108]	@ (800e5ec <MlmeIndication+0x8c>)
 800e580:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800e582:	683b      	ldr	r3, [r7, #0]
 800e584:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e588:	b25a      	sxtb	r2, r3
 800e58a:	4b18      	ldr	r3, [pc, #96]	@ (800e5ec <MlmeIndication+0x8c>)
 800e58c:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800e58e:	683b      	ldr	r3, [r7, #0]
 800e590:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800e594:	4b15      	ldr	r3, [pc, #84]	@ (800e5ec <MlmeIndication+0x8c>)
 800e596:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800e598:	683b      	ldr	r3, [r7, #0]
 800e59a:	78da      	ldrb	r2, [r3, #3]
 800e59c:	4b13      	ldr	r3, [pc, #76]	@ (800e5ec <MlmeIndication+0x8c>)
 800e59e:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	685b      	ldr	r3, [r3, #4]
 800e5a4:	4a11      	ldr	r2, [pc, #68]	@ (800e5ec <MlmeIndication+0x8c>)
 800e5a6:	60d3      	str	r3, [r2, #12]
    if( ( LmHandlerCallbacks->OnRxData != NULL ) && ( mlmeIndication->MlmeIndication != MLME_BEACON ) && ( mlmeIndication->MlmeIndication != MLME_BEACON_LOST ) )
 800e5a8:	4b11      	ldr	r3, [pc, #68]	@ (800e5f0 <MlmeIndication+0x90>)
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d00d      	beq.n	800e5ce <MlmeIndication+0x6e>
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	781b      	ldrb	r3, [r3, #0]
 800e5b6:	2b0a      	cmp	r3, #10
 800e5b8:	d009      	beq.n	800e5ce <MlmeIndication+0x6e>
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	781b      	ldrb	r3, [r3, #0]
 800e5be:	2b0e      	cmp	r3, #14
 800e5c0:	d005      	beq.n	800e5ce <MlmeIndication+0x6e>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800e5c2:	4b0b      	ldr	r3, [pc, #44]	@ (800e5f0 <MlmeIndication+0x90>)
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e5c8:	4908      	ldr	r1, [pc, #32]	@ (800e5ec <MlmeIndication+0x8c>)
 800e5ca:	2000      	movs	r0, #0
 800e5cc:	4798      	blx	r3
    }

    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 800e5ce:	6879      	ldr	r1, [r7, #4]
 800e5d0:	2003      	movs	r0, #3
 800e5d2:	f000 f895 	bl	800e700 <LmHandlerPackagesNotify>

    switch( mlmeIndication->MlmeIndication )
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	781b      	ldrb	r3, [r3, #0]
 800e5da:	2b0a      	cmp	r3, #10
 800e5dc:	d001      	beq.n	800e5e2 <MlmeIndication+0x82>
 800e5de:	2b0e      	cmp	r3, #14
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 800e5e0:	e000      	b.n	800e5e4 <MlmeIndication+0x84>
            break;
 800e5e2:	bf00      	nop
    }
}
 800e5e4:	bf00      	nop
 800e5e6:	3708      	adds	r7, #8
 800e5e8:	46bd      	mov	sp, r7
 800e5ea:	bd80      	pop	{r7, pc}
 800e5ec:	200000c0 	.word	0x200000c0
 800e5f0:	20000560 	.word	0x20000560

0800e5f4 <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 800e5f4:	b580      	push	{r7, lr}
 800e5f6:	b084      	sub	sp, #16
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	4603      	mov	r3, r0
 800e5fc:	6039      	str	r1, [r7, #0]
 800e5fe:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 800e600:	2300      	movs	r3, #0
 800e602:	60fb      	str	r3, [r7, #12]
    switch( id )
 800e604:	79fb      	ldrb	r3, [r7, #7]
 800e606:	2b00      	cmp	r3, #0
 800e608:	d104      	bne.n	800e614 <LmHandlerPackageRegister+0x20>
    {
        case PACKAGE_ID_COMPLIANCE:
            {
                package = LmhpCompliancePackageFactory( );
 800e60a:	f000 fa8b 	bl	800eb24 <LmhpCompliancePackageFactory>
 800e60e:	4603      	mov	r3, r0
 800e610:	60fb      	str	r3, [r7, #12]
                break;
 800e612:	e00d      	b.n	800e630 <LmHandlerPackageRegister+0x3c>
            }
        default:
            {
                if( LORAMAC_HANDLER_SUCCESS != LmhpPackagesRegister( id, &package ) )
 800e614:	f107 020c 	add.w	r2, r7, #12
 800e618:	79fb      	ldrb	r3, [r7, #7]
 800e61a:	4611      	mov	r1, r2
 800e61c:	4618      	mov	r0, r3
 800e61e:	f000 ff73 	bl	800f508 <LmhpPackagesRegister>
 800e622:	4603      	mov	r3, r0
 800e624:	2b00      	cmp	r3, #0
 800e626:	d002      	beq.n	800e62e <LmHandlerPackageRegister+0x3a>
                {
                    return LORAMAC_HANDLER_ERROR;
 800e628:	f04f 33ff 	mov.w	r3, #4294967295
 800e62c:	e03b      	b.n	800e6a6 <LmHandlerPackageRegister+0xb2>
                }
                break;
 800e62e:	bf00      	nop
            }
    }
    if( package != NULL )
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	2b00      	cmp	r3, #0
 800e634:	d035      	beq.n	800e6a2 <LmHandlerPackageRegister+0xae>
    {
        LmHandlerPackages[id] = package;
 800e636:	79fb      	ldrb	r3, [r7, #7]
 800e638:	68fa      	ldr	r2, [r7, #12]
 800e63a:	491d      	ldr	r1, [pc, #116]	@ (800e6b0 <LmHandlerPackageRegister+0xbc>)
 800e63c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800e640:	79fb      	ldrb	r3, [r7, #7]
 800e642:	4a1b      	ldr	r2, [pc, #108]	@ (800e6b0 <LmHandlerPackageRegister+0xbc>)
 800e644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e648:	4a1a      	ldr	r2, [pc, #104]	@ (800e6b4 <LmHandlerPackageRegister+0xc0>)
 800e64a:	629a      	str	r2, [r3, #40]	@ 0x28
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
 800e64c:	4b1a      	ldr	r3, [pc, #104]	@ (800e6b8 <LmHandlerPackageRegister+0xc4>)
 800e64e:	681a      	ldr	r2, [r3, #0]
 800e650:	79fb      	ldrb	r3, [r7, #7]
 800e652:	4917      	ldr	r1, [pc, #92]	@ (800e6b0 <LmHandlerPackageRegister+0xbc>)
 800e654:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800e658:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800e65a:	631a      	str	r2, [r3, #48]	@ 0x30
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
 800e65c:	4b16      	ldr	r3, [pc, #88]	@ (800e6b8 <LmHandlerPackageRegister+0xc4>)
 800e65e:	681a      	ldr	r2, [r3, #0]
 800e660:	79fb      	ldrb	r3, [r7, #7]
 800e662:	4913      	ldr	r1, [pc, #76]	@ (800e6b0 <LmHandlerPackageRegister+0xbc>)
 800e664:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800e668:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800e66a:	635a      	str	r2, [r3, #52]	@ 0x34
#endif /* LORAMAC_VERSION */
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800e66c:	79fb      	ldrb	r3, [r7, #7]
 800e66e:	4a10      	ldr	r2, [pc, #64]	@ (800e6b0 <LmHandlerPackageRegister+0xbc>)
 800e670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e674:	4a11      	ldr	r2, [pc, #68]	@ (800e6bc <LmHandlerPackageRegister+0xc8>)
 800e676:	62da      	str	r2, [r3, #44]	@ 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800e678:	4b0f      	ldr	r3, [pc, #60]	@ (800e6b8 <LmHandlerPackageRegister+0xc4>)
 800e67a:	681a      	ldr	r2, [r3, #0]
 800e67c:	79fb      	ldrb	r3, [r7, #7]
 800e67e:	490c      	ldr	r1, [pc, #48]	@ (800e6b0 <LmHandlerPackageRegister+0xbc>)
 800e680:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800e684:	6992      	ldr	r2, [r2, #24]
 800e686:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800e688:	79fb      	ldrb	r3, [r7, #7]
 800e68a:	4a09      	ldr	r2, [pc, #36]	@ (800e6b0 <LmHandlerPackageRegister+0xbc>)
 800e68c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e690:	685b      	ldr	r3, [r3, #4]
 800e692:	4a0b      	ldr	r2, [pc, #44]	@ (800e6c0 <LmHandlerPackageRegister+0xcc>)
 800e694:	6851      	ldr	r1, [r2, #4]
 800e696:	4a0a      	ldr	r2, [pc, #40]	@ (800e6c0 <LmHandlerPackageRegister+0xcc>)
 800e698:	7852      	ldrb	r2, [r2, #1]
 800e69a:	6838      	ldr	r0, [r7, #0]
 800e69c:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 800e69e:	2300      	movs	r3, #0
 800e6a0:	e001      	b.n	800e6a6 <LmHandlerPackageRegister+0xb2>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800e6a2:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800e6a6:	4618      	mov	r0, r3
 800e6a8:	3710      	adds	r7, #16
 800e6aa:	46bd      	mov	sp, r7
 800e6ac:	bd80      	pop	{r7, pc}
 800e6ae:	bf00      	nop
 800e6b0:	20000534 	.word	0x20000534
 800e6b4:	0800dd95 	.word	0x0800dd95
 800e6b8:	20000560 	.word	0x20000560
 800e6bc:	0800e0ad 	.word	0x0800e0ad
 800e6c0:	200000d4 	.word	0x200000d4

0800e6c4 <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 800e6c4:	b580      	push	{r7, lr}
 800e6c6:	b082      	sub	sp, #8
 800e6c8:	af00      	add	r7, sp, #0
 800e6ca:	4603      	mov	r3, r0
 800e6cc:	71fb      	strb	r3, [r7, #7]
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 800e6ce:	79fb      	ldrb	r3, [r7, #7]
 800e6d0:	2b04      	cmp	r3, #4
 800e6d2:	d80e      	bhi.n	800e6f2 <LmHandlerPackageIsInitialized+0x2e>
 800e6d4:	79fb      	ldrb	r3, [r7, #7]
 800e6d6:	4a09      	ldr	r2, [pc, #36]	@ (800e6fc <LmHandlerPackageIsInitialized+0x38>)
 800e6d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e6dc:	689b      	ldr	r3, [r3, #8]
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d007      	beq.n	800e6f2 <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800e6e2:	79fb      	ldrb	r3, [r7, #7]
 800e6e4:	4a05      	ldr	r2, [pc, #20]	@ (800e6fc <LmHandlerPackageIsInitialized+0x38>)
 800e6e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e6ea:	689b      	ldr	r3, [r3, #8]
 800e6ec:	4798      	blx	r3
 800e6ee:	4603      	mov	r3, r0
 800e6f0:	e000      	b.n	800e6f4 <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 800e6f2:	2300      	movs	r3, #0
    }
}
 800e6f4:	4618      	mov	r0, r3
 800e6f6:	3708      	adds	r7, #8
 800e6f8:	46bd      	mov	sp, r7
 800e6fa:	bd80      	pop	{r7, pc}
 800e6fc:	20000534 	.word	0x20000534

0800e700 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800e700:	b580      	push	{r7, lr}
 800e702:	b084      	sub	sp, #16
 800e704:	af00      	add	r7, sp, #0
 800e706:	4603      	mov	r3, r0
 800e708:	6039      	str	r1, [r7, #0]
 800e70a:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800e70c:	2300      	movs	r3, #0
 800e70e:	73fb      	strb	r3, [r7, #15]
 800e710:	e067      	b.n	800e7e2 <LmHandlerPackagesNotify+0xe2>
    {
        if( LmHandlerPackages[i] != NULL )
 800e712:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e716:	4a37      	ldr	r2, [pc, #220]	@ (800e7f4 <LmHandlerPackagesNotify+0xf4>)
 800e718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d05a      	beq.n	800e7d6 <LmHandlerPackagesNotify+0xd6>
        {
            switch( notifyType )
 800e720:	79fb      	ldrb	r3, [r7, #7]
 800e722:	2b03      	cmp	r3, #3
 800e724:	d84e      	bhi.n	800e7c4 <LmHandlerPackagesNotify+0xc4>
 800e726:	a201      	add	r2, pc, #4	@ (adr r2, 800e72c <LmHandlerPackagesNotify+0x2c>)
 800e728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e72c:	0800e73d 	.word	0x0800e73d
 800e730:	0800e75f 	.word	0x0800e75f
 800e734:	0800e781 	.word	0x0800e781
 800e738:	0800e7a3 	.word	0x0800e7a3
            {
                case PACKAGE_MCPS_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800e73c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e740:	4a2c      	ldr	r2, [pc, #176]	@ (800e7f4 <LmHandlerPackagesNotify+0xf4>)
 800e742:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e746:	699b      	ldr	r3, [r3, #24]
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d03d      	beq.n	800e7c8 <LmHandlerPackagesNotify+0xc8>
                        {
                            LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t * ) params );
 800e74c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e750:	4a28      	ldr	r2, [pc, #160]	@ (800e7f4 <LmHandlerPackagesNotify+0xf4>)
 800e752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e756:	699b      	ldr	r3, [r3, #24]
 800e758:	6838      	ldr	r0, [r7, #0]
 800e75a:	4798      	blx	r3
                        }
                        break;
 800e75c:	e034      	b.n	800e7c8 <LmHandlerPackagesNotify+0xc8>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
                              ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ) ) ) )
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                        if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
 800e75e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e762:	4a24      	ldr	r2, [pc, #144]	@ (800e7f4 <LmHandlerPackagesNotify+0xf4>)
 800e764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e768:	69db      	ldr	r3, [r3, #28]
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d02e      	beq.n	800e7cc <LmHandlerPackagesNotify+0xcc>
#endif /* LORAMAC_VERSION */
                        {
                            LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t * )params );
 800e76e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e772:	4a20      	ldr	r2, [pc, #128]	@ (800e7f4 <LmHandlerPackagesNotify+0xf4>)
 800e774:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e778:	69db      	ldr	r3, [r3, #28]
 800e77a:	6838      	ldr	r0, [r7, #0]
 800e77c:	4798      	blx	r3
                        }
                        break;
 800e77e:	e025      	b.n	800e7cc <LmHandlerPackagesNotify+0xcc>
                    }
                case PACKAGE_MLME_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800e780:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e784:	4a1b      	ldr	r2, [pc, #108]	@ (800e7f4 <LmHandlerPackagesNotify+0xf4>)
 800e786:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e78a:	6a1b      	ldr	r3, [r3, #32]
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d01f      	beq.n	800e7d0 <LmHandlerPackagesNotify+0xd0>
                        {
                            LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t * )params );
 800e790:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e794:	4a17      	ldr	r2, [pc, #92]	@ (800e7f4 <LmHandlerPackagesNotify+0xf4>)
 800e796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e79a:	6a1b      	ldr	r3, [r3, #32]
 800e79c:	6838      	ldr	r0, [r7, #0]
 800e79e:	4798      	blx	r3
                        }
                        break;
 800e7a0:	e016      	b.n	800e7d0 <LmHandlerPackagesNotify+0xd0>
                    }
                case PACKAGE_MLME_INDICATION:
                    {
                        if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 800e7a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e7a6:	4a13      	ldr	r2, [pc, #76]	@ (800e7f4 <LmHandlerPackagesNotify+0xf4>)
 800e7a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e7ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d010      	beq.n	800e7d4 <LmHandlerPackagesNotify+0xd4>
                        {
                            LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 800e7b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e7b6:	4a0f      	ldr	r2, [pc, #60]	@ (800e7f4 <LmHandlerPackagesNotify+0xf4>)
 800e7b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e7bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e7be:	6838      	ldr	r0, [r7, #0]
 800e7c0:	4798      	blx	r3
                        }
                        break;
 800e7c2:	e007      	b.n	800e7d4 <LmHandlerPackagesNotify+0xd4>
                    }
                default:
                    {
                        break;
 800e7c4:	bf00      	nop
 800e7c6:	e006      	b.n	800e7d6 <LmHandlerPackagesNotify+0xd6>
                        break;
 800e7c8:	bf00      	nop
 800e7ca:	e004      	b.n	800e7d6 <LmHandlerPackagesNotify+0xd6>
                        break;
 800e7cc:	bf00      	nop
 800e7ce:	e002      	b.n	800e7d6 <LmHandlerPackagesNotify+0xd6>
                        break;
 800e7d0:	bf00      	nop
 800e7d2:	e000      	b.n	800e7d6 <LmHandlerPackagesNotify+0xd6>
                        break;
 800e7d4:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800e7d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e7da:	b2db      	uxtb	r3, r3
 800e7dc:	3301      	adds	r3, #1
 800e7de:	b2db      	uxtb	r3, r3
 800e7e0:	73fb      	strb	r3, [r7, #15]
 800e7e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e7e6:	2b04      	cmp	r3, #4
 800e7e8:	dd93      	ble.n	800e712 <LmHandlerPackagesNotify+0x12>
                    }
            }
        }
    }
}
 800e7ea:	bf00      	nop
 800e7ec:	bf00      	nop
 800e7ee:	3710      	adds	r7, #16
 800e7f0:	46bd      	mov	sp, r7
 800e7f2:	bd80      	pop	{r7, pc}
 800e7f4:	20000534 	.word	0x20000534

0800e7f8 <LmHandlerPackageIsTxPending>:

static bool LmHandlerPackageIsTxPending( void )
{
 800e7f8:	b580      	push	{r7, lr}
 800e7fa:	b082      	sub	sp, #8
 800e7fc:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800e7fe:	2300      	movs	r3, #0
 800e800:	71fb      	strb	r3, [r7, #7]
 800e802:	e018      	b.n	800e836 <LmHandlerPackageIsTxPending+0x3e>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        if( ( LmHandlerPackages[i] != NULL ) && ( i != PACKAGE_ID_COMPLIANCE ) )
#else
        if( LmHandlerPackages[i] != NULL )
 800e804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e808:	4a0f      	ldr	r2, [pc, #60]	@ (800e848 <LmHandlerPackageIsTxPending+0x50>)
 800e80a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d00b      	beq.n	800e82a <LmHandlerPackageIsTxPending+0x32>
#endif /* LORAMAC_VERSION */
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 800e812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e816:	4a0c      	ldr	r2, [pc, #48]	@ (800e848 <LmHandlerPackageIsTxPending+0x50>)
 800e818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e81c:	68db      	ldr	r3, [r3, #12]
 800e81e:	4798      	blx	r3
 800e820:	4603      	mov	r3, r0
 800e822:	2b00      	cmp	r3, #0
 800e824:	d001      	beq.n	800e82a <LmHandlerPackageIsTxPending+0x32>
            {
                return true;
 800e826:	2301      	movs	r3, #1
 800e828:	e00a      	b.n	800e840 <LmHandlerPackageIsTxPending+0x48>
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800e82a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e82e:	b2db      	uxtb	r3, r3
 800e830:	3301      	adds	r3, #1
 800e832:	b2db      	uxtb	r3, r3
 800e834:	71fb      	strb	r3, [r7, #7]
 800e836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e83a:	2b04      	cmp	r3, #4
 800e83c:	dde2      	ble.n	800e804 <LmHandlerPackageIsTxPending+0xc>
            }
        }
    }
    return false;
 800e83e:	2300      	movs	r3, #0
}
 800e840:	4618      	mov	r0, r3
 800e842:	3708      	adds	r7, #8
 800e844:	46bd      	mov	sp, r7
 800e846:	bd80      	pop	{r7, pc}
 800e848:	20000534 	.word	0x20000534

0800e84c <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 800e84c:	b580      	push	{r7, lr}
 800e84e:	b082      	sub	sp, #8
 800e850:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800e852:	2300      	movs	r3, #0
 800e854:	71fb      	strb	r3, [r7, #7]
 800e856:	e022      	b.n	800e89e <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800e858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e85c:	4a14      	ldr	r2, [pc, #80]	@ (800e8b0 <LmHandlerPackagesProcess+0x64>)
 800e85e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e862:	2b00      	cmp	r3, #0
 800e864:	d015      	beq.n	800e892 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800e866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e86a:	4a11      	ldr	r2, [pc, #68]	@ (800e8b0 <LmHandlerPackagesProcess+0x64>)
 800e86c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e870:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800e872:	2b00      	cmp	r3, #0
 800e874:	d00d      	beq.n	800e892 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800e876:	79fb      	ldrb	r3, [r7, #7]
 800e878:	4618      	mov	r0, r3
 800e87a:	f7ff ff23 	bl	800e6c4 <LmHandlerPackageIsInitialized>
 800e87e:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800e880:	2b00      	cmp	r3, #0
 800e882:	d006      	beq.n	800e892 <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 800e884:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e888:	4a09      	ldr	r2, [pc, #36]	@ (800e8b0 <LmHandlerPackagesProcess+0x64>)
 800e88a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e88e:	691b      	ldr	r3, [r3, #16]
 800e890:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800e892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e896:	b2db      	uxtb	r3, r3
 800e898:	3301      	adds	r3, #1
 800e89a:	b2db      	uxtb	r3, r3
 800e89c:	71fb      	strb	r3, [r7, #7]
 800e89e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e8a2:	2b04      	cmp	r3, #4
 800e8a4:	ddd8      	ble.n	800e858 <LmHandlerPackagesProcess+0xc>
        }
    }
}
 800e8a6:	bf00      	nop
 800e8a8:	bf00      	nop
 800e8aa:	3708      	adds	r7, #8
 800e8ac:	46bd      	mov	sp, r7
 800e8ae:	bd80      	pop	{r7, pc}
 800e8b0:	20000534 	.word	0x20000534

0800e8b4 <LmHandlerOnTxFrameCtrlChanged>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static void LmHandlerOnTxFrameCtrlChanged( LmHandlerMsgTypes_t isTxConfirmed )
{
 800e8b4:	b580      	push	{r7, lr}
 800e8b6:	b082      	sub	sp, #8
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	4603      	mov	r3, r0
 800e8bc:	71fb      	strb	r3, [r7, #7]
    LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800e8be:	4a09      	ldr	r2, [pc, #36]	@ (800e8e4 <LmHandlerOnTxFrameCtrlChanged+0x30>)
 800e8c0:	79fb      	ldrb	r3, [r7, #7]
 800e8c2:	70d3      	strb	r3, [r2, #3]

    if (LmHandlerCallbacks->OnTxFrameCtrlChanged != NULL)
 800e8c4:	4b08      	ldr	r3, [pc, #32]	@ (800e8e8 <LmHandlerOnTxFrameCtrlChanged+0x34>)
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d005      	beq.n	800e8da <LmHandlerOnTxFrameCtrlChanged+0x26>
    {
        LmHandlerCallbacks->OnTxFrameCtrlChanged( isTxConfirmed );
 800e8ce:	4b06      	ldr	r3, [pc, #24]	@ (800e8e8 <LmHandlerOnTxFrameCtrlChanged+0x34>)
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e8d4:	79fa      	ldrb	r2, [r7, #7]
 800e8d6:	4610      	mov	r0, r2
 800e8d8:	4798      	blx	r3
    }
}
 800e8da:	bf00      	nop
 800e8dc:	3708      	adds	r7, #8
 800e8de:	46bd      	mov	sp, r7
 800e8e0:	bd80      	pop	{r7, pc}
 800e8e2:	bf00      	nop
 800e8e4:	20000548 	.word	0x20000548
 800e8e8:	20000560 	.word	0x20000560

0800e8ec <LmHandlerOnPingSlotPeriodicityChanged>:

static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity )
{
 800e8ec:	b580      	push	{r7, lr}
 800e8ee:	b082      	sub	sp, #8
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	4603      	mov	r3, r0
 800e8f4:	71fb      	strb	r3, [r7, #7]
    LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800e8f6:	4a09      	ldr	r2, [pc, #36]	@ (800e91c <LmHandlerOnPingSlotPeriodicityChanged+0x30>)
 800e8f8:	79fb      	ldrb	r3, [r7, #7]
 800e8fa:	7413      	strb	r3, [r2, #16]

    if (LmHandlerCallbacks->OnPingSlotPeriodicityChanged != NULL)
 800e8fc:	4b08      	ldr	r3, [pc, #32]	@ (800e920 <LmHandlerOnPingSlotPeriodicityChanged+0x34>)
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e902:	2b00      	cmp	r3, #0
 800e904:	d005      	beq.n	800e912 <LmHandlerOnPingSlotPeriodicityChanged+0x26>
    {
        LmHandlerCallbacks->OnPingSlotPeriodicityChanged( pingSlotPeriodicity );
 800e906:	4b06      	ldr	r3, [pc, #24]	@ (800e920 <LmHandlerOnPingSlotPeriodicityChanged+0x34>)
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e90c:	79fa      	ldrb	r2, [r7, #7]
 800e90e:	4610      	mov	r0, r2
 800e910:	4798      	blx	r3
    }
}
 800e912:	bf00      	nop
 800e914:	3708      	adds	r7, #8
 800e916:	46bd      	mov	sp, r7
 800e918:	bd80      	pop	{r7, pc}
 800e91a:	bf00      	nop
 800e91c:	20000548 	.word	0x20000548
 800e920:	20000560 	.word	0x20000560

0800e924 <LmHandlerGetVersion>:
 * ST ADDITIONAL FUNCTIONS
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion( LmHandlerVersionType_t lmhType, uint32_t *featureVersion )
{
 800e924:	b480      	push	{r7}
 800e926:	b083      	sub	sp, #12
 800e928:	af00      	add	r7, sp, #0
 800e92a:	4603      	mov	r3, r0
 800e92c:	6039      	str	r1, [r7, #0]
 800e92e:	71fb      	strb	r3, [r7, #7]
    if( featureVersion == NULL )
 800e930:	683b      	ldr	r3, [r7, #0]
 800e932:	2b00      	cmp	r3, #0
 800e934:	d102      	bne.n	800e93c <LmHandlerGetVersion+0x18>
    {
        return LORAMAC_HANDLER_ERROR;
 800e936:	f04f 33ff 	mov.w	r3, #4294967295
 800e93a:	e00e      	b.n	800e95a <LmHandlerGetVersion+0x36>
    }

    switch( lmhType )
 800e93c:	79fb      	ldrb	r3, [r7, #7]
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d002      	beq.n	800e948 <LmHandlerGetVersion+0x24>
 800e942:	2b01      	cmp	r3, #1
 800e944:	d004      	beq.n	800e950 <LmHandlerGetVersion+0x2c>
            break;
        case LORAMAC_HANDLER_REGION_VERSION:
            *featureVersion = REGION_VERSION;
            break;
        default:
            break;
 800e946:	e007      	b.n	800e958 <LmHandlerGetVersion+0x34>
            *featureVersion = LORAMAC_VERSION;
 800e948:	683b      	ldr	r3, [r7, #0]
 800e94a:	4a06      	ldr	r2, [pc, #24]	@ (800e964 <LmHandlerGetVersion+0x40>)
 800e94c:	601a      	str	r2, [r3, #0]
            break;
 800e94e:	e003      	b.n	800e958 <LmHandlerGetVersion+0x34>
            *featureVersion = REGION_VERSION;
 800e950:	683b      	ldr	r3, [r7, #0]
 800e952:	4a05      	ldr	r2, [pc, #20]	@ (800e968 <LmHandlerGetVersion+0x44>)
 800e954:	601a      	str	r2, [r3, #0]
            break;
 800e956:	bf00      	nop
    }

    return LORAMAC_HANDLER_SUCCESS;
 800e958:	2300      	movs	r3, #0
}
 800e95a:	4618      	mov	r0, r3
 800e95c:	370c      	adds	r7, #12
 800e95e:	46bd      	mov	sp, r7
 800e960:	bc80      	pop	{r7}
 800e962:	4770      	bx	lr
 800e964:	01000400 	.word	0x01000400
 800e968:	02010001 	.word	0x02010001

0800e96c <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop( void )
{
 800e96c:	b580      	push	{r7, lr}
 800e96e:	af00      	add	r7, sp, #0
    if( LoRaMacDeInitialization() == LORAMAC_STATUS_OK )
 800e970:	f005 fcec 	bl	801434c <LoRaMacDeInitialization>
 800e974:	4603      	mov	r3, r0
 800e976:	2b00      	cmp	r3, #0
 800e978:	d101      	bne.n	800e97e <LmHandlerStop+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800e97a:	2300      	movs	r3, #0
 800e97c:	e001      	b.n	800e982 <LmHandlerStop+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800e97e:	f06f 0301 	mvn.w	r3, #1
    }
}
 800e982:	4618      	mov	r0, r3
 800e984:	bd80      	pop	{r7, pc}

0800e986 <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt( void )
{
 800e986:	b580      	push	{r7, lr}
 800e988:	af00      	add	r7, sp, #0
    if( LoRaMacHalt() == LORAMAC_STATUS_OK )
 800e98a:	f004 fb9f 	bl	80130cc <LoRaMacHalt>
 800e98e:	4603      	mov	r3, r0
 800e990:	2b00      	cmp	r3, #0
 800e992:	d101      	bne.n	800e998 <LmHandlerHalt+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800e994:	2300      	movs	r3, #0
 800e996:	e001      	b.n	800e99c <LmHandlerHalt+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800e998:	f06f 0301 	mvn.w	r3, #1
    }
}
 800e99c:	4618      	mov	r0, r3
 800e99e:	bd80      	pop	{r7, pc}

0800e9a0 <LmHandlerGetTxPower>:
    rxParams->Datarate = mibReq.Param.Rx2Channel.Datarate;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerGetTxPower( int8_t *txPower )
{
 800e9a0:	b580      	push	{r7, lr}
 800e9a2:	b08c      	sub	sp, #48	@ 0x30
 800e9a4:	af00      	add	r7, sp, #0
 800e9a6:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( txPower == NULL )
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d102      	bne.n	800e9b4 <LmHandlerGetTxPower+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800e9ae:	f04f 33ff 	mov.w	r3, #4294967295
 800e9b2:	e016      	b.n	800e9e2 <LmHandlerGetTxPower+0x42>
    }

    mibReq.Type = MIB_CHANNELS_TX_POWER;
 800e9b4:	2321      	movs	r3, #33	@ 0x21
 800e9b6:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800e9b8:	f107 0308 	add.w	r3, r7, #8
 800e9bc:	4618      	mov	r0, r3
 800e9be:	f004 fc4d 	bl	801325c <LoRaMacMibGetRequestConfirm>
 800e9c2:	4603      	mov	r3, r0
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d002      	beq.n	800e9ce <LmHandlerGetTxPower+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800e9c8:	f04f 33ff 	mov.w	r3, #4294967295
 800e9cc:	e009      	b.n	800e9e2 <LmHandlerGetTxPower+0x42>
    }

    *txPower = mibReq.Param.ChannelsTxPower;
 800e9ce:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxPower = *txPower;
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	f993 2000 	ldrsb.w	r2, [r3]
 800e9dc:	4b03      	ldr	r3, [pc, #12]	@ (800e9ec <LmHandlerGetTxPower+0x4c>)
 800e9de:	715a      	strb	r2, [r3, #5]
    return LORAMAC_HANDLER_SUCCESS;
 800e9e0:	2300      	movs	r3, #0
}
 800e9e2:	4618      	mov	r0, r3
 800e9e4:	3730      	adds	r7, #48	@ 0x30
 800e9e6:	46bd      	mov	sp, r7
 800e9e8:	bd80      	pop	{r7, pc}
 800e9ea:	bf00      	nop
 800e9ec:	20000548 	.word	0x20000548

0800e9f0 <LmHandlerNvmDataStore>:

    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 800e9f0:	b580      	push	{r7, lr}
 800e9f2:	b08e      	sub	sp, #56	@ 0x38
 800e9f4:	af00      	add	r7, sp, #0
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800e9f6:	2300      	movs	r3, #0
 800e9f8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    int32_t status = NVM_DATA_OK;
 800e9fc:	2300      	movs	r3, #0
 800e9fe:	633b      	str	r3, [r7, #48]	@ 0x30

    lmhStatus = LmHandlerHalt();
 800ea00:	f7ff ffc1 	bl	800e986 <LmHandlerHalt>
 800ea04:	4603      	mov	r3, r0
 800ea06:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( lmhStatus == LORAMAC_HANDLER_SUCCESS )
 800ea0a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d12f      	bne.n	800ea72 <LmHandlerNvmDataStore+0x82>
    {
        status = NvmDataMgmtStoreBegin();
 800ea12:	f000 f859 	bl	800eac8 <NvmDataMgmtStoreBegin>
 800ea16:	6338      	str	r0, [r7, #48]	@ 0x30

        if( status == NVM_DATA_NO_UPDATED_DATA )
 800ea18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea1a:	f113 0f02 	cmn.w	r3, #2
 800ea1e:	d103      	bne.n	800ea28 <LmHandlerNvmDataStore+0x38>
        {
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 800ea20:	23f8      	movs	r3, #248	@ 0xf8
 800ea22:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800ea26:	e01c      	b.n	800ea62 <LmHandlerNvmDataStore+0x72>
        }
        else if( ( status != NVM_DATA_OK ) || ( LmHandlerCallbacks->OnStoreContextRequest == NULL ) )
 800ea28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d104      	bne.n	800ea38 <LmHandlerNvmDataStore+0x48>
 800ea2e:	4b1b      	ldr	r3, [pc, #108]	@ (800ea9c <LmHandlerNvmDataStore+0xac>)
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	695b      	ldr	r3, [r3, #20]
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d103      	bne.n	800ea40 <LmHandlerNvmDataStore+0x50>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800ea38:	23ff      	movs	r3, #255	@ 0xff
 800ea3a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800ea3e:	e010      	b.n	800ea62 <LmHandlerNvmDataStore+0x72>
        }
        else
        {
            MibRequestConfirm_t mibReq;
            mibReq.Type = MIB_NVM_CTXS;
 800ea40:	2327      	movs	r3, #39	@ 0x27
 800ea42:	703b      	strb	r3, [r7, #0]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800ea44:	463b      	mov	r3, r7
 800ea46:	4618      	mov	r0, r3
 800ea48:	f004 fc08 	bl	801325c <LoRaMacMibGetRequestConfirm>
            nvm = ( LoRaMacNvmData_t * )mibReq.Param.Contexts;
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            nvm_size = ( ( sizeof( LoRaMacNvmData_t ) + 7 ) & ~0x07 );
 800ea50:	f44f 63ba 	mov.w	r3, #1488	@ 0x5d0
 800ea54:	62bb      	str	r3, [r7, #40]	@ 0x28
            LmHandlerCallbacks->OnStoreContextRequest( nvm, nvm_size );
 800ea56:	4b11      	ldr	r3, [pc, #68]	@ (800ea9c <LmHandlerNvmDataStore+0xac>)
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	695b      	ldr	r3, [r3, #20]
 800ea5c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ea5e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ea60:	4798      	blx	r3
        }

        if( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 800ea62:	f000 f847 	bl	800eaf4 <NvmDataMgmtStoreEnd>
 800ea66:	4603      	mov	r3, r0
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d002      	beq.n	800ea72 <LmHandlerNvmDataStore+0x82>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800ea6c:	23ff      	movs	r3, #255	@ 0xff
 800ea6e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
    }

    if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) && ( LmHandlerCallbacks->OnNvmDataChange != NULL ) )
 800ea72:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d109      	bne.n	800ea8e <LmHandlerNvmDataStore+0x9e>
 800ea7a:	4b08      	ldr	r3, [pc, #32]	@ (800ea9c <LmHandlerNvmDataStore+0xac>)
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	69db      	ldr	r3, [r3, #28]
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d004      	beq.n	800ea8e <LmHandlerNvmDataStore+0x9e>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 800ea84:	4b05      	ldr	r3, [pc, #20]	@ (800ea9c <LmHandlerNvmDataStore+0xac>)
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	69db      	ldr	r3, [r3, #28]
 800ea8a:	2001      	movs	r0, #1
 800ea8c:	4798      	blx	r3
    }

    return lmhStatus;
 800ea8e:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
#else
    return LORAMAC_HANDLER_ERROR;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800ea92:	4618      	mov	r0, r3
 800ea94:	3738      	adds	r7, #56	@ 0x38
 800ea96:	46bd      	mov	sp, r7
 800ea98:	bd80      	pop	{r7, pc}
 800ea9a:	bf00      	nop
 800ea9c:	20000560 	.word	0x20000560

0800eaa0 <NvmDataMgmtEvent>:
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
static uint16_t NvmNotifyFlags = 0;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 800eaa0:	b480      	push	{r7}
 800eaa2:	b083      	sub	sp, #12
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	4603      	mov	r3, r0
 800eaa8:	80fb      	strh	r3, [r7, #6]
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
 800eaaa:	4b06      	ldr	r3, [pc, #24]	@ (800eac4 <NvmDataMgmtEvent+0x24>)
 800eaac:	881a      	ldrh	r2, [r3, #0]
 800eaae:	88fb      	ldrh	r3, [r7, #6]
 800eab0:	4313      	orrs	r3, r2
 800eab2:	b29a      	uxth	r2, r3
 800eab4:	4b03      	ldr	r3, [pc, #12]	@ (800eac4 <NvmDataMgmtEvent+0x24>)
 800eab6:	801a      	strh	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800eab8:	bf00      	nop
 800eaba:	370c      	adds	r7, #12
 800eabc:	46bd      	mov	sp, r7
 800eabe:	bc80      	pop	{r7}
 800eac0:	4770      	bx	lr
 800eac2:	bf00      	nop
 800eac4:	20000688 	.word	0x20000688

0800eac8 <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 800eac8:	b580      	push	{r7, lr}
 800eaca:	af00      	add	r7, sp, #0
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Input checks */
    if( NvmNotifyFlags == LORAMAC_NVM_NOTIFY_FLAG_NONE )
 800eacc:	4b08      	ldr	r3, [pc, #32]	@ (800eaf0 <NvmDataMgmtStoreBegin+0x28>)
 800eace:	881b      	ldrh	r3, [r3, #0]
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d102      	bne.n	800eada <NvmDataMgmtStoreBegin+0x12>
    {
        /* There was no update. */
        return NVM_DATA_NO_UPDATED_DATA;
 800ead4:	f06f 0301 	mvn.w	r3, #1
 800ead8:	e008      	b.n	800eaec <NvmDataMgmtStoreBegin+0x24>
    }
    if( LoRaMacStop( ) != LORAMAC_STATUS_OK )
 800eada:	f004 facf 	bl	801307c <LoRaMacStop>
 800eade:	4603      	mov	r3, r0
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d002      	beq.n	800eaea <NvmDataMgmtStoreBegin+0x22>
    {
        return NVM_DATA_NOT_AVAILABLE;
 800eae4:	f06f 0302 	mvn.w	r3, #2
 800eae8:	e000      	b.n	800eaec <NvmDataMgmtStoreBegin+0x24>
    }
    return NVM_DATA_OK;
 800eaea:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800eaec:	4618      	mov	r0, r3
 800eaee:	bd80      	pop	{r7, pc}
 800eaf0:	20000688 	.word	0x20000688

0800eaf4 <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 800eaf4:	b580      	push	{r7, lr}
 800eaf6:	af00      	add	r7, sp, #0
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Reset notification flags */
    NvmNotifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800eaf8:	4b03      	ldr	r3, [pc, #12]	@ (800eb08 <NvmDataMgmtStoreEnd+0x14>)
 800eafa:	2200      	movs	r2, #0
 800eafc:	801a      	strh	r2, [r3, #0]

    /* Resume LoRaMac */
    LoRaMacStart( );
 800eafe:	f004 faaf 	bl	8013060 <LoRaMacStart>
    return NVM_DATA_OK;
 800eb02:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800eb04:	4618      	mov	r0, r3
 800eb06:	bd80      	pop	{r7, pc}
 800eb08:	20000688 	.word	0x20000688

0800eb0c <ClassBStatusReset>:

/*!
 * Reset Beacon status structure
 */
static inline void ClassBStatusReset( void )
{
 800eb0c:	b580      	push	{r7, lr}
 800eb0e:	af00      	add	r7, sp, #0
    memset1( ( uint8_t * ) &ComplianceTestState.ClassBStatus, 0, sizeof( ClassBStatus_t ) / sizeof( uint8_t ) );
 800eb10:	2220      	movs	r2, #32
 800eb12:	2100      	movs	r1, #0
 800eb14:	4802      	ldr	r0, [pc, #8]	@ (800eb20 <ClassBStatusReset+0x14>)
 800eb16:	f00b fb07 	bl	801a128 <memset1>
}
 800eb1a:	bf00      	nop
 800eb1c:	bd80      	pop	{r7, pc}
 800eb1e:	bf00      	nop
 800eb20:	200006a0 	.word	0x200006a0

0800eb24 <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate         = NULL,  /* To be initialized by LmHandler */
    .OnSystemReset           = NULL,  /* To be initialized by LmHandler */
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 800eb24:	b480      	push	{r7}
 800eb26:	af00      	add	r7, sp, #0
    return &CompliancePackage;
 800eb28:	4b02      	ldr	r3, [pc, #8]	@ (800eb34 <LmhpCompliancePackageFactory+0x10>)
}
 800eb2a:	4618      	mov	r0, r3
 800eb2c:	46bd      	mov	sp, r7
 800eb2e:	bc80      	pop	{r7}
 800eb30:	4770      	bx	lr
 800eb32:	bf00      	nop
 800eb34:	200000dc 	.word	0x200000dc

0800eb38 <LmhpComplianceInit>:

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 800eb38:	b580      	push	{r7, lr}
 800eb3a:	b086      	sub	sp, #24
 800eb3c:	af02      	add	r7, sp, #8
 800eb3e:	60f8      	str	r0, [r7, #12]
 800eb40:	60b9      	str	r1, [r7, #8]
 800eb42:	4613      	mov	r3, r2
 800eb44:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d018      	beq.n	800eb7e <LmhpComplianceInit+0x46>
 800eb4c:	68bb      	ldr	r3, [r7, #8]
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d015      	beq.n	800eb7e <LmhpComplianceInit+0x46>
    {
        ComplianceParams                      = ( LmhpComplianceParams_t * ) params;
 800eb52:	4a19      	ldr	r2, [pc, #100]	@ (800ebb8 <LmhpComplianceInit+0x80>)
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer        = dataBuffer;
 800eb58:	4a18      	ldr	r2, [pc, #96]	@ (800ebbc <LmhpComplianceInit+0x84>)
 800eb5a:	68bb      	ldr	r3, [r7, #8]
 800eb5c:	60d3      	str	r3, [r2, #12]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800eb5e:	4a17      	ldr	r2, [pc, #92]	@ (800ebbc <LmhpComplianceInit+0x84>)
 800eb60:	79fb      	ldrb	r3, [r7, #7]
 800eb62:	7253      	strb	r3, [r2, #9]
        ComplianceTestState.Initialized       = true;
 800eb64:	4b15      	ldr	r3, [pc, #84]	@ (800ebbc <LmhpComplianceInit+0x84>)
 800eb66:	2201      	movs	r2, #1
 800eb68:	701a      	strb	r2, [r3, #0]
        TimerInit( &ProcessTimer, OnProcessTimer );
 800eb6a:	2300      	movs	r3, #0
 800eb6c:	9300      	str	r3, [sp, #0]
 800eb6e:	4b14      	ldr	r3, [pc, #80]	@ (800ebc0 <LmhpComplianceInit+0x88>)
 800eb70:	2200      	movs	r2, #0
 800eb72:	f04f 31ff 	mov.w	r1, #4294967295
 800eb76:	4813      	ldr	r0, [pc, #76]	@ (800ebc4 <LmhpComplianceInit+0x8c>)
 800eb78:	f00f fb8e 	bl	801e298 <UTIL_TIMER_Create>
 800eb7c:	e005      	b.n	800eb8a <LmhpComplianceInit+0x52>
    }
    else
    {
        ComplianceParams                = NULL;
 800eb7e:	4b0e      	ldr	r3, [pc, #56]	@ (800ebb8 <LmhpComplianceInit+0x80>)
 800eb80:	2200      	movs	r2, #0
 800eb82:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 800eb84:	4b0d      	ldr	r3, [pc, #52]	@ (800ebbc <LmhpComplianceInit+0x84>)
 800eb86:	2200      	movs	r2, #0
 800eb88:	701a      	strb	r2, [r3, #0]
    }
    ComplianceTestState.RxAppCnt = 0;
 800eb8a:	4b0c      	ldr	r3, [pc, #48]	@ (800ebbc <LmhpComplianceInit+0x84>)
 800eb8c:	2200      	movs	r2, #0
 800eb8e:	821a      	strh	r2, [r3, #16]
    ClassBStatusReset( );
 800eb90:	f7ff ffbc 	bl	800eb0c <ClassBStatusReset>
    ComplianceTestState.IsTxPending = false;
 800eb94:	4b09      	ldr	r3, [pc, #36]	@ (800ebbc <LmhpComplianceInit+0x84>)
 800eb96:	2200      	movs	r2, #0
 800eb98:	705a      	strb	r2, [r3, #1]
    ComplianceTestState.IsBeaconRxStatusIndOn = false;
 800eb9a:	4b08      	ldr	r3, [pc, #32]	@ (800ebbc <LmhpComplianceInit+0x84>)
 800eb9c:	2200      	movs	r2, #0
 800eb9e:	749a      	strb	r2, [r3, #18]
    ComplianceTestState.IsResetCmdPending = false;
 800eba0:	4b06      	ldr	r3, [pc, #24]	@ (800ebbc <LmhpComplianceInit+0x84>)
 800eba2:	2200      	movs	r2, #0
 800eba4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    ComplianceTestState.IsClassReqCmdPending = false;
 800eba8:	4b04      	ldr	r3, [pc, #16]	@ (800ebbc <LmhpComplianceInit+0x84>)
 800ebaa:	2200      	movs	r2, #0
 800ebac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
}
 800ebb0:	bf00      	nop
 800ebb2:	3710      	adds	r7, #16
 800ebb4:	46bd      	mov	sp, r7
 800ebb6:	bd80      	pop	{r7, pc}
 800ebb8:	200006c4 	.word	0x200006c4
 800ebbc:	2000068c 	.word	0x2000068c
 800ebc0:	0800f4c1 	.word	0x0800f4c1
 800ebc4:	200006c8 	.word	0x200006c8

0800ebc8 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 800ebc8:	b480      	push	{r7}
 800ebca:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 800ebcc:	4b02      	ldr	r3, [pc, #8]	@ (800ebd8 <LmhpComplianceIsInitialized+0x10>)
 800ebce:	781b      	ldrb	r3, [r3, #0]
}
 800ebd0:	4618      	mov	r0, r3
 800ebd2:	46bd      	mov	sp, r7
 800ebd4:	bc80      	pop	{r7}
 800ebd6:	4770      	bx	lr
 800ebd8:	2000068c 	.word	0x2000068c

0800ebdc <LmhpComplianceIsTxPending>:

static bool LmhpComplianceIsTxPending( void )
{
 800ebdc:	b480      	push	{r7}
 800ebde:	af00      	add	r7, sp, #0
    return ComplianceTestState.IsTxPending;
 800ebe0:	4b02      	ldr	r3, [pc, #8]	@ (800ebec <LmhpComplianceIsTxPending+0x10>)
 800ebe2:	785b      	ldrb	r3, [r3, #1]
}
 800ebe4:	4618      	mov	r0, r3
 800ebe6:	46bd      	mov	sp, r7
 800ebe8:	bc80      	pop	{r7}
 800ebea:	4770      	bx	lr
 800ebec:	2000068c 	.word	0x2000068c

0800ebf0 <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 800ebf0:	b590      	push	{r4, r7, lr}
 800ebf2:	b085      	sub	sp, #20
 800ebf4:	af00      	add	r7, sp, #0
    if( ComplianceTestState.IsTxPending == true )
 800ebf6:	4b33      	ldr	r3, [pc, #204]	@ (800ecc4 <LmhpComplianceProcess+0xd4>)
 800ebf8:	785b      	ldrb	r3, [r3, #1]
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d03e      	beq.n	800ec7c <LmhpComplianceProcess+0x8c>
    {
        TimerTime_t now = TimerGetCurrentTime( );
 800ebfe:	f00f fd09 	bl	801e614 <UTIL_TIMER_GetCurrentTime>
 800ec02:	60f8      	str	r0, [r7, #12]
        if( now > ( ComplianceTestState.TxPendingTimestamp + LmHandlerGetDutyCycleWaitTime( ) ) )
 800ec04:	4b2f      	ldr	r3, [pc, #188]	@ (800ecc4 <LmhpComplianceProcess+0xd4>)
 800ec06:	685c      	ldr	r4, [r3, #4]
 800ec08:	f7ff f8ba 	bl	800dd80 <LmHandlerGetDutyCycleWaitTime>
 800ec0c:	4603      	mov	r3, r0
 800ec0e:	4423      	add	r3, r4
 800ec10:	68fa      	ldr	r2, [r7, #12]
 800ec12:	429a      	cmp	r2, r3
 800ec14:	d941      	bls.n	800ec9a <LmhpComplianceProcess+0xaa>
        {
            if( ComplianceTestState.DataBufferSize != 0 )
 800ec16:	4b2b      	ldr	r3, [pc, #172]	@ (800ecc4 <LmhpComplianceProcess+0xd4>)
 800ec18:	7a9b      	ldrb	r3, [r3, #10]
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d03d      	beq.n	800ec9a <LmhpComplianceProcess+0xaa>
            {
                /* Answer commands */
                LmHandlerAppData_t appData =
 800ec1e:	23e0      	movs	r3, #224	@ 0xe0
 800ec20:	703b      	strb	r3, [r7, #0]
                {
                    .Buffer     = ComplianceTestState.DataBuffer,
                    .BufferSize = ComplianceTestState.DataBufferSize,
 800ec22:	4b28      	ldr	r3, [pc, #160]	@ (800ecc4 <LmhpComplianceProcess+0xd4>)
 800ec24:	7a9b      	ldrb	r3, [r3, #10]
                LmHandlerAppData_t appData =
 800ec26:	707b      	strb	r3, [r7, #1]
                    .Buffer     = ComplianceTestState.DataBuffer,
 800ec28:	4b26      	ldr	r3, [pc, #152]	@ (800ecc4 <LmhpComplianceProcess+0xd4>)
 800ec2a:	68db      	ldr	r3, [r3, #12]
                LmHandlerAppData_t appData =
 800ec2c:	607b      	str	r3, [r7, #4]
                    .Port       = COMPLIANCE_PORT,
                };

                LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800ec2e:	23ff      	movs	r3, #255	@ 0xff
 800ec30:	72fb      	strb	r3, [r7, #11]
                lmhStatus = LmHandlerSend( &appData, ComplianceTestState.IsTxConfirmed, true );
 800ec32:	4b24      	ldr	r3, [pc, #144]	@ (800ecc4 <LmhpComplianceProcess+0xd4>)
 800ec34:	7a19      	ldrb	r1, [r3, #8]
 800ec36:	463b      	mov	r3, r7
 800ec38:	2201      	movs	r2, #1
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	f7ff f968 	bl	800df10 <LmHandlerSend>
 800ec40:	4603      	mov	r3, r0
 800ec42:	72fb      	strb	r3, [r7, #11]
                if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) || ( lmhStatus == LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED ) )
 800ec44:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d004      	beq.n	800ec56 <LmhpComplianceProcess+0x66>
 800ec4c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800ec50:	f113 0f07 	cmn.w	r3, #7
 800ec54:	d106      	bne.n	800ec64 <LmhpComplianceProcess+0x74>
                {
                    ComplianceTestState.IsTxPending = false;
 800ec56:	4b1b      	ldr	r3, [pc, #108]	@ (800ecc4 <LmhpComplianceProcess+0xd4>)
 800ec58:	2200      	movs	r2, #0
 800ec5a:	705a      	strb	r2, [r3, #1]
                    ComplianceTestState.DataBufferSize = 0;
 800ec5c:	4b19      	ldr	r3, [pc, #100]	@ (800ecc4 <LmhpComplianceProcess+0xd4>)
 800ec5e:	2200      	movs	r2, #0
 800ec60:	729a      	strb	r2, [r3, #10]
 800ec62:	e007      	b.n	800ec74 <LmhpComplianceProcess+0x84>
                }
                else
                {
                    /* try to send the message again */
                    TimerSetValue( &ProcessTimer, 1500 );
 800ec64:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 800ec68:	4817      	ldr	r0, [pc, #92]	@ (800ecc8 <LmhpComplianceProcess+0xd8>)
 800ec6a:	f00f fc29 	bl	801e4c0 <UTIL_TIMER_SetPeriod>
                    TimerStart( &ProcessTimer );
 800ec6e:	4816      	ldr	r0, [pc, #88]	@ (800ecc8 <LmhpComplianceProcess+0xd8>)
 800ec70:	f00f fb48 	bl	801e304 <UTIL_TIMER_Start>
                }

                ComplianceTestState.TxPendingTimestamp = now;
 800ec74:	4a13      	ldr	r2, [pc, #76]	@ (800ecc4 <LmhpComplianceProcess+0xd4>)
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	6053      	str	r3, [r2, #4]
 800ec7a:	e00e      	b.n	800ec9a <LmhpComplianceProcess+0xaa>
        }
    }
    else
    {
        /* If no Tx is pending process other commands */
        if( ComplianceTestState.IsClassReqCmdPending == true )
 800ec7c:	4b11      	ldr	r3, [pc, #68]	@ (800ecc4 <LmhpComplianceProcess+0xd4>)
 800ec7e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d009      	beq.n	800ec9a <LmhpComplianceProcess+0xaa>
        {
            ComplianceTestState.IsClassReqCmdPending = false;
 800ec86:	4b0f      	ldr	r3, [pc, #60]	@ (800ecc4 <LmhpComplianceProcess+0xd4>)
 800ec88:	2200      	movs	r2, #0
 800ec8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
            LmHandlerRequestClass( ComplianceTestState.NewClass );
 800ec8e:	4b0d      	ldr	r3, [pc, #52]	@ (800ecc4 <LmhpComplianceProcess+0xd4>)
 800ec90:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800ec94:	4618      	mov	r0, r3
 800ec96:	f7ff fa31 	bl	800e0fc <LmHandlerRequestClass>
        }
    }

    if( ComplianceTestState.IsResetCmdPending == true )
 800ec9a:	4b0a      	ldr	r3, [pc, #40]	@ (800ecc4 <LmhpComplianceProcess+0xd4>)
 800ec9c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d00a      	beq.n	800ecba <LmhpComplianceProcess+0xca>
    {
        ComplianceTestState.IsResetCmdPending = false;
 800eca4:	4b07      	ldr	r3, [pc, #28]	@ (800ecc4 <LmhpComplianceProcess+0xd4>)
 800eca6:	2200      	movs	r2, #0
 800eca8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        /* Call platform MCU reset API */
        if( CompliancePackage.OnSystemReset != NULL )
 800ecac:	4b07      	ldr	r3, [pc, #28]	@ (800eccc <LmhpComplianceProcess+0xdc>)
 800ecae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d002      	beq.n	800ecba <LmhpComplianceProcess+0xca>
        {
            CompliancePackage.OnSystemReset( );
 800ecb4:	4b05      	ldr	r3, [pc, #20]	@ (800eccc <LmhpComplianceProcess+0xdc>)
 800ecb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ecb8:	4798      	blx	r3
        }
    }
}
 800ecba:	bf00      	nop
 800ecbc:	3714      	adds	r7, #20
 800ecbe:	46bd      	mov	sp, r7
 800ecc0:	bd90      	pop	{r4, r7, pc}
 800ecc2:	bf00      	nop
 800ecc4:	2000068c 	.word	0x2000068c
 800ecc8:	200006c8 	.word	0x200006c8
 800eccc:	200000dc 	.word	0x200000dc

0800ecd0 <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t *mcpsIndication )
{
 800ecd0:	b5b0      	push	{r4, r5, r7, lr}
 800ecd2:	b0a4      	sub	sp, #144	@ 0x90
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	6078      	str	r0, [r7, #4]
    uint8_t cmdIndex        = 0;
 800ecd8:	2300      	movs	r3, #0
 800ecda:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    MibRequestConfirm_t mibReq;

    if( ComplianceTestState.Initialized == false )
 800ecde:	4bd0      	ldr	r3, [pc, #832]	@ (800f020 <LmhpComplianceOnMcpsIndication+0x350>)
 800ece0:	781b      	ldrb	r3, [r3, #0]
 800ece2:	f083 0301 	eor.w	r3, r3, #1
 800ece6:	b2db      	uxtb	r3, r3
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	f040 83bf 	bne.w	800f46c <LmhpComplianceOnMcpsIndication+0x79c>
        return;
    }

    /* Increment the compliance certification protocol downlink counter */
    /* Not counting downlinks on FPort 0 */
    if( ( mcpsIndication->Port > 0 ) || ( mcpsIndication->AckReceived == true ) )
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	78db      	ldrb	r3, [r3, #3]
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d103      	bne.n	800ecfe <LmhpComplianceOnMcpsIndication+0x2e>
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	7b9b      	ldrb	r3, [r3, #14]
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d005      	beq.n	800ed0a <LmhpComplianceOnMcpsIndication+0x3a>
    {
        ComplianceTestState.RxAppCnt++;
 800ecfe:	4bc8      	ldr	r3, [pc, #800]	@ (800f020 <LmhpComplianceOnMcpsIndication+0x350>)
 800ed00:	8a1b      	ldrh	r3, [r3, #16]
 800ed02:	3301      	adds	r3, #1
 800ed04:	b29a      	uxth	r2, r3
 800ed06:	4bc6      	ldr	r3, [pc, #792]	@ (800f020 <LmhpComplianceOnMcpsIndication+0x350>)
 800ed08:	821a      	strh	r2, [r3, #16]
    }

    if( mcpsIndication->RxData == false )
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	7b5b      	ldrb	r3, [r3, #13]
 800ed0e:	f083 0301 	eor.w	r3, r3, #1
 800ed12:	b2db      	uxtb	r3, r3
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	f040 83ab 	bne.w	800f470 <LmhpComplianceOnMcpsIndication+0x7a0>
    {
        return;
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	78db      	ldrb	r3, [r3, #3]
 800ed1e:	2be0      	cmp	r3, #224	@ 0xe0
 800ed20:	f040 83a8 	bne.w	800f474 <LmhpComplianceOnMcpsIndication+0x7a4>
    {
        return;
    }

    ComplianceTestState.DataBufferSize = 0;
 800ed24:	4bbe      	ldr	r3, [pc, #760]	@ (800f020 <LmhpComplianceOnMcpsIndication+0x350>)
 800ed26:	2200      	movs	r2, #0
 800ed28:	729a      	strb	r2, [r3, #10]

    switch( mcpsIndication->Buffer[cmdIndex++] )
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	689a      	ldr	r2, [r3, #8]
 800ed2e:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800ed32:	1c59      	adds	r1, r3, #1
 800ed34:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800ed38:	4413      	add	r3, r2
 800ed3a:	781b      	ldrb	r3, [r3, #0]
 800ed3c:	2b7f      	cmp	r3, #127	@ 0x7f
 800ed3e:	f200 8372 	bhi.w	800f426 <LmhpComplianceOnMcpsIndication+0x756>
 800ed42:	a201      	add	r2, pc, #4	@ (adr r2, 800ed48 <LmhpComplianceOnMcpsIndication+0x78>)
 800ed44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed48:	0800ef49 	.word	0x0800ef49
 800ed4c:	0800ef8d 	.word	0x0800ef8d
 800ed50:	0800ef97 	.word	0x0800ef97
 800ed54:	0800efad 	.word	0x0800efad
 800ed58:	0800efcf 	.word	0x0800efcf
 800ed5c:	0800effd 	.word	0x0800effd
 800ed60:	0800f029 	.word	0x0800f029
 800ed64:	0800f087 	.word	0x0800f087
 800ed68:	0800f0df 	.word	0x0800f0df
 800ed6c:	0800f14b 	.word	0x0800f14b
 800ed70:	0800f19b 	.word	0x0800f19b
 800ed74:	0800f427 	.word	0x0800f427
 800ed78:	0800f427 	.word	0x0800f427
 800ed7c:	0800f427 	.word	0x0800f427
 800ed80:	0800f427 	.word	0x0800f427
 800ed84:	0800f427 	.word	0x0800f427
 800ed88:	0800f427 	.word	0x0800f427
 800ed8c:	0800f427 	.word	0x0800f427
 800ed90:	0800f427 	.word	0x0800f427
 800ed94:	0800f427 	.word	0x0800f427
 800ed98:	0800f427 	.word	0x0800f427
 800ed9c:	0800f427 	.word	0x0800f427
 800eda0:	0800f427 	.word	0x0800f427
 800eda4:	0800f427 	.word	0x0800f427
 800eda8:	0800f427 	.word	0x0800f427
 800edac:	0800f427 	.word	0x0800f427
 800edb0:	0800f427 	.word	0x0800f427
 800edb4:	0800f427 	.word	0x0800f427
 800edb8:	0800f427 	.word	0x0800f427
 800edbc:	0800f427 	.word	0x0800f427
 800edc0:	0800f427 	.word	0x0800f427
 800edc4:	0800f427 	.word	0x0800f427
 800edc8:	0800f1a3 	.word	0x0800f1a3
 800edcc:	0800f1b5 	.word	0x0800f1b5
 800edd0:	0800f1bd 	.word	0x0800f1bd
 800edd4:	0800f427 	.word	0x0800f427
 800edd8:	0800f427 	.word	0x0800f427
 800eddc:	0800f427 	.word	0x0800f427
 800ede0:	0800f427 	.word	0x0800f427
 800ede4:	0800f427 	.word	0x0800f427
 800ede8:	0800f427 	.word	0x0800f427
 800edec:	0800f427 	.word	0x0800f427
 800edf0:	0800f427 	.word	0x0800f427
 800edf4:	0800f427 	.word	0x0800f427
 800edf8:	0800f427 	.word	0x0800f427
 800edfc:	0800f427 	.word	0x0800f427
 800ee00:	0800f427 	.word	0x0800f427
 800ee04:	0800f427 	.word	0x0800f427
 800ee08:	0800f427 	.word	0x0800f427
 800ee0c:	0800f427 	.word	0x0800f427
 800ee10:	0800f427 	.word	0x0800f427
 800ee14:	0800f427 	.word	0x0800f427
 800ee18:	0800f427 	.word	0x0800f427
 800ee1c:	0800f427 	.word	0x0800f427
 800ee20:	0800f427 	.word	0x0800f427
 800ee24:	0800f427 	.word	0x0800f427
 800ee28:	0800f427 	.word	0x0800f427
 800ee2c:	0800f427 	.word	0x0800f427
 800ee30:	0800f427 	.word	0x0800f427
 800ee34:	0800f427 	.word	0x0800f427
 800ee38:	0800f427 	.word	0x0800f427
 800ee3c:	0800f427 	.word	0x0800f427
 800ee40:	0800f427 	.word	0x0800f427
 800ee44:	0800f427 	.word	0x0800f427
 800ee48:	0800f427 	.word	0x0800f427
 800ee4c:	0800f427 	.word	0x0800f427
 800ee50:	0800f427 	.word	0x0800f427
 800ee54:	0800f427 	.word	0x0800f427
 800ee58:	0800f427 	.word	0x0800f427
 800ee5c:	0800f427 	.word	0x0800f427
 800ee60:	0800f427 	.word	0x0800f427
 800ee64:	0800f427 	.word	0x0800f427
 800ee68:	0800f427 	.word	0x0800f427
 800ee6c:	0800f427 	.word	0x0800f427
 800ee70:	0800f427 	.word	0x0800f427
 800ee74:	0800f427 	.word	0x0800f427
 800ee78:	0800f427 	.word	0x0800f427
 800ee7c:	0800f427 	.word	0x0800f427
 800ee80:	0800f427 	.word	0x0800f427
 800ee84:	0800f427 	.word	0x0800f427
 800ee88:	0800f427 	.word	0x0800f427
 800ee8c:	0800f427 	.word	0x0800f427
 800ee90:	0800f427 	.word	0x0800f427
 800ee94:	0800f427 	.word	0x0800f427
 800ee98:	0800f427 	.word	0x0800f427
 800ee9c:	0800f427 	.word	0x0800f427
 800eea0:	0800f427 	.word	0x0800f427
 800eea4:	0800f427 	.word	0x0800f427
 800eea8:	0800f427 	.word	0x0800f427
 800eeac:	0800f427 	.word	0x0800f427
 800eeb0:	0800f427 	.word	0x0800f427
 800eeb4:	0800f427 	.word	0x0800f427
 800eeb8:	0800f427 	.word	0x0800f427
 800eebc:	0800f427 	.word	0x0800f427
 800eec0:	0800f427 	.word	0x0800f427
 800eec4:	0800f427 	.word	0x0800f427
 800eec8:	0800f427 	.word	0x0800f427
 800eecc:	0800f427 	.word	0x0800f427
 800eed0:	0800f427 	.word	0x0800f427
 800eed4:	0800f427 	.word	0x0800f427
 800eed8:	0800f427 	.word	0x0800f427
 800eedc:	0800f427 	.word	0x0800f427
 800eee0:	0800f427 	.word	0x0800f427
 800eee4:	0800f427 	.word	0x0800f427
 800eee8:	0800f427 	.word	0x0800f427
 800eeec:	0800f427 	.word	0x0800f427
 800eef0:	0800f427 	.word	0x0800f427
 800eef4:	0800f427 	.word	0x0800f427
 800eef8:	0800f427 	.word	0x0800f427
 800eefc:	0800f427 	.word	0x0800f427
 800ef00:	0800f427 	.word	0x0800f427
 800ef04:	0800f427 	.word	0x0800f427
 800ef08:	0800f427 	.word	0x0800f427
 800ef0c:	0800f427 	.word	0x0800f427
 800ef10:	0800f427 	.word	0x0800f427
 800ef14:	0800f427 	.word	0x0800f427
 800ef18:	0800f427 	.word	0x0800f427
 800ef1c:	0800f427 	.word	0x0800f427
 800ef20:	0800f427 	.word	0x0800f427
 800ef24:	0800f427 	.word	0x0800f427
 800ef28:	0800f427 	.word	0x0800f427
 800ef2c:	0800f427 	.word	0x0800f427
 800ef30:	0800f427 	.word	0x0800f427
 800ef34:	0800f427 	.word	0x0800f427
 800ef38:	0800f427 	.word	0x0800f427
 800ef3c:	0800f1ef 	.word	0x0800f1ef
 800ef40:	0800f29f 	.word	0x0800f29f
 800ef44:	0800f2d1 	.word	0x0800f2d1
    {
        case COMPLIANCE_PKG_VERSION_REQ:
            {
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_PKG_VERSION_ANS;
 800ef48:	4b35      	ldr	r3, [pc, #212]	@ (800f020 <LmhpComplianceOnMcpsIndication+0x350>)
 800ef4a:	68da      	ldr	r2, [r3, #12]
 800ef4c:	4b34      	ldr	r3, [pc, #208]	@ (800f020 <LmhpComplianceOnMcpsIndication+0x350>)
 800ef4e:	7a9b      	ldrb	r3, [r3, #10]
 800ef50:	1c59      	adds	r1, r3, #1
 800ef52:	b2c8      	uxtb	r0, r1
 800ef54:	4932      	ldr	r1, [pc, #200]	@ (800f020 <LmhpComplianceOnMcpsIndication+0x350>)
 800ef56:	7288      	strb	r0, [r1, #10]
 800ef58:	4413      	add	r3, r2
 800ef5a:	2200      	movs	r2, #0
 800ef5c:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ID;
 800ef5e:	4b30      	ldr	r3, [pc, #192]	@ (800f020 <LmhpComplianceOnMcpsIndication+0x350>)
 800ef60:	68da      	ldr	r2, [r3, #12]
 800ef62:	4b2f      	ldr	r3, [pc, #188]	@ (800f020 <LmhpComplianceOnMcpsIndication+0x350>)
 800ef64:	7a9b      	ldrb	r3, [r3, #10]
 800ef66:	1c59      	adds	r1, r3, #1
 800ef68:	b2c8      	uxtb	r0, r1
 800ef6a:	492d      	ldr	r1, [pc, #180]	@ (800f020 <LmhpComplianceOnMcpsIndication+0x350>)
 800ef6c:	7288      	strb	r0, [r1, #10]
 800ef6e:	4413      	add	r3, r2
 800ef70:	2206      	movs	r2, #6
 800ef72:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_VERSION;
 800ef74:	4b2a      	ldr	r3, [pc, #168]	@ (800f020 <LmhpComplianceOnMcpsIndication+0x350>)
 800ef76:	68da      	ldr	r2, [r3, #12]
 800ef78:	4b29      	ldr	r3, [pc, #164]	@ (800f020 <LmhpComplianceOnMcpsIndication+0x350>)
 800ef7a:	7a9b      	ldrb	r3, [r3, #10]
 800ef7c:	1c59      	adds	r1, r3, #1
 800ef7e:	b2c8      	uxtb	r0, r1
 800ef80:	4927      	ldr	r1, [pc, #156]	@ (800f020 <LmhpComplianceOnMcpsIndication+0x350>)
 800ef82:	7288      	strb	r0, [r1, #10]
 800ef84:	4413      	add	r3, r2
 800ef86:	2201      	movs	r2, #1
 800ef88:	701a      	strb	r2, [r3, #0]
                break;
 800ef8a:	e257      	b.n	800f43c <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_DUT_RESET_REQ:
            {
                ComplianceTestState.IsResetCmdPending = true;
 800ef8c:	4b24      	ldr	r3, [pc, #144]	@ (800f020 <LmhpComplianceOnMcpsIndication+0x350>)
 800ef8e:	2201      	movs	r2, #1
 800ef90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                break;
 800ef94:	e252      	b.n	800f43c <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_DUT_JOIN_REQ:
            {
                if( CompliancePackage.OnJoinRequest != NULL )
 800ef96:	4b23      	ldr	r3, [pc, #140]	@ (800f024 <LmhpComplianceOnMcpsIndication+0x354>)
 800ef98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	f000 8245 	beq.w	800f42a <LmhpComplianceOnMcpsIndication+0x75a>
                {
                    CompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 800efa0:	4b20      	ldr	r3, [pc, #128]	@ (800f024 <LmhpComplianceOnMcpsIndication+0x354>)
 800efa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800efa4:	2101      	movs	r1, #1
 800efa6:	2002      	movs	r0, #2
 800efa8:	4798      	blx	r3
                }
                break;
 800efaa:	e23e      	b.n	800f42a <LmhpComplianceOnMcpsIndication+0x75a>
            }
        case COMPLIANCE_SWITCH_CLASS_REQ:
            {
                /* CLASS_A = 0, CLASS_B = 1, CLASS_C = 2 */
                ComplianceTestState.NewClass = ( DeviceClass_t ) mcpsIndication->Buffer[cmdIndex++];
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	689a      	ldr	r2, [r3, #8]
 800efb0:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800efb4:	1c59      	adds	r1, r3, #1
 800efb6:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800efba:	4413      	add	r3, r2
 800efbc:	781a      	ldrb	r2, [r3, #0]
 800efbe:	4b18      	ldr	r3, [pc, #96]	@ (800f020 <LmhpComplianceOnMcpsIndication+0x350>)
 800efc0:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
                ComplianceTestState.IsClassReqCmdPending = true;
 800efc4:	4b16      	ldr	r3, [pc, #88]	@ (800f020 <LmhpComplianceOnMcpsIndication+0x350>)
 800efc6:	2201      	movs	r2, #1
 800efc8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
                break;
 800efcc:	e236      	b.n	800f43c <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_ADR_BIT_CHANGE_REQ:
            {
                MibRequestConfirm_t mibReq;
                mibReq.Type            = MIB_ADR;
 800efce:	2304      	movs	r3, #4
 800efd0:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = mcpsIndication->Buffer[cmdIndex++];
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	689a      	ldr	r2, [r3, #8]
 800efd6:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800efda:	1c59      	adds	r1, r3, #1
 800efdc:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800efe0:	4413      	add	r3, r2
 800efe2:	781b      	ldrb	r3, [r3, #0]
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	bf14      	ite	ne
 800efe8:	2301      	movne	r3, #1
 800efea:	2300      	moveq	r3, #0
 800efec:	b2db      	uxtb	r3, r3
 800efee:	733b      	strb	r3, [r7, #12]

                LoRaMacMibSetRequestConfirm( &mibReq );
 800eff0:	f107 0308 	add.w	r3, r7, #8
 800eff4:	4618      	mov	r0, r3
 800eff6:	f004 fb09 	bl	801360c <LoRaMacMibSetRequestConfirm>
                break;
 800effa:	e21f      	b.n	800f43c <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_REGIONAL_DUTY_CYCLE_CTRL_REQ:
            {
                LoRaMacTestSetDutyCycleOn( mcpsIndication->Buffer[cmdIndex++] );
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	689a      	ldr	r2, [r3, #8]
 800f000:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800f004:	1c59      	adds	r1, r3, #1
 800f006:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800f00a:	4413      	add	r3, r2
 800f00c:	781b      	ldrb	r3, [r3, #0]
 800f00e:	2b00      	cmp	r3, #0
 800f010:	bf14      	ite	ne
 800f012:	2301      	movne	r3, #1
 800f014:	2300      	moveq	r3, #0
 800f016:	b2db      	uxtb	r3, r3
 800f018:	4618      	mov	r0, r3
 800f01a:	f005 f971 	bl	8014300 <LoRaMacTestSetDutyCycleOn>
                break;
 800f01e:	e20d      	b.n	800f43c <LmhpComplianceOnMcpsIndication+0x76c>
 800f020:	2000068c 	.word	0x2000068c
 800f024:	200000dc 	.word	0x200000dc
            }
        case COMPLIANCE_TX_PERIODICITY_CHANGE_REQ:
            {
                /* Periodicity in milli-seconds */
                uint32_t periodicity[] = { 0, 5000, 10000, 20000, 30000, 40000, 50000, 60000, 120000, 240000, 480000 };
 800f028:	4ba5      	ldr	r3, [pc, #660]	@ (800f2c0 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800f02a:	f107 0408 	add.w	r4, r7, #8
 800f02e:	461d      	mov	r5, r3
 800f030:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f032:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f034:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f036:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f038:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800f03c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
                uint8_t  index         = mcpsIndication->Buffer[cmdIndex++];
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	689a      	ldr	r2, [r3, #8]
 800f044:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800f048:	1c59      	adds	r1, r3, #1
 800f04a:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800f04e:	4413      	add	r3, r2
 800f050:	781b      	ldrb	r3, [r3, #0]
 800f052:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c

                if( index < ( sizeof( periodicity ) / sizeof( uint32_t ) ) )
 800f056:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 800f05a:	2b0a      	cmp	r3, #10
 800f05c:	f200 81e7 	bhi.w	800f42e <LmhpComplianceOnMcpsIndication+0x75e>
                {
                    if( ComplianceParams->OnTxPeriodicityChanged != NULL )
 800f060:	4b98      	ldr	r3, [pc, #608]	@ (800f2c4 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	685b      	ldr	r3, [r3, #4]
 800f066:	2b00      	cmp	r3, #0
 800f068:	f000 81e1 	beq.w	800f42e <LmhpComplianceOnMcpsIndication+0x75e>
                    {
                        ComplianceParams->OnTxPeriodicityChanged( periodicity[index] );
 800f06c:	4b95      	ldr	r3, [pc, #596]	@ (800f2c4 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	685a      	ldr	r2, [r3, #4]
 800f072:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 800f076:	009b      	lsls	r3, r3, #2
 800f078:	3390      	adds	r3, #144	@ 0x90
 800f07a:	443b      	add	r3, r7
 800f07c:	f853 3c88 	ldr.w	r3, [r3, #-136]
 800f080:	4618      	mov	r0, r3
 800f082:	4790      	blx	r2
                    }
                }
                break;
 800f084:	e1d3      	b.n	800f42e <LmhpComplianceOnMcpsIndication+0x75e>
            }
        case COMPLIANCE_TX_FRAMES_CTRL_REQ:
            {
                uint8_t frameType = mcpsIndication->Buffer[cmdIndex++];
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	689a      	ldr	r2, [r3, #8]
 800f08a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800f08e:	1c59      	adds	r1, r3, #1
 800f090:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800f094:	4413      	add	r3, r2
 800f096:	781b      	ldrb	r3, [r3, #0]
 800f098:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d

                if( ( frameType == 1 ) || ( frameType == 2 ) )
 800f09c:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800f0a0:	2b01      	cmp	r3, #1
 800f0a2:	d004      	beq.n	800f0ae <LmhpComplianceOnMcpsIndication+0x3de>
 800f0a4:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800f0a8:	2b02      	cmp	r3, #2
 800f0aa:	f040 81c2 	bne.w	800f432 <LmhpComplianceOnMcpsIndication+0x762>
                {
                    ComplianceTestState.IsTxConfirmed = ( frameType != 1 ) ? LORAMAC_HANDLER_CONFIRMED_MSG : LORAMAC_HANDLER_UNCONFIRMED_MSG;
 800f0ae:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800f0b2:	2b01      	cmp	r3, #1
 800f0b4:	bf14      	ite	ne
 800f0b6:	2301      	movne	r3, #1
 800f0b8:	2300      	moveq	r3, #0
 800f0ba:	b2db      	uxtb	r3, r3
 800f0bc:	461a      	mov	r2, r3
 800f0be:	4b82      	ldr	r3, [pc, #520]	@ (800f2c8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f0c0:	721a      	strb	r2, [r3, #8]

                    if( ComplianceParams->OnTxFrameCtrlChanged != NULL )
 800f0c2:	4b80      	ldr	r3, [pc, #512]	@ (800f2c4 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	689b      	ldr	r3, [r3, #8]
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	f000 81b2 	beq.w	800f432 <LmhpComplianceOnMcpsIndication+0x762>
                    {
                        ComplianceParams->OnTxFrameCtrlChanged( ComplianceTestState.IsTxConfirmed );
 800f0ce:	4b7d      	ldr	r3, [pc, #500]	@ (800f2c4 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	689b      	ldr	r3, [r3, #8]
 800f0d4:	4a7c      	ldr	r2, [pc, #496]	@ (800f2c8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f0d6:	7a12      	ldrb	r2, [r2, #8]
 800f0d8:	4610      	mov	r0, r2
 800f0da:	4798      	blx	r3
                    }
                }
                break;
 800f0dc:	e1a9      	b.n	800f432 <LmhpComplianceOnMcpsIndication+0x762>
            }
        case COMPLIANCE_ECHO_PAYLOAD_REQ:
            {
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ECHO_PAYLOAD_ANS;
 800f0de:	4b7a      	ldr	r3, [pc, #488]	@ (800f2c8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f0e0:	68da      	ldr	r2, [r3, #12]
 800f0e2:	4b79      	ldr	r3, [pc, #484]	@ (800f2c8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f0e4:	7a9b      	ldrb	r3, [r3, #10]
 800f0e6:	1c59      	adds	r1, r3, #1
 800f0e8:	b2c8      	uxtb	r0, r1
 800f0ea:	4977      	ldr	r1, [pc, #476]	@ (800f2c8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f0ec:	7288      	strb	r0, [r1, #10]
 800f0ee:	4413      	add	r3, r2
 800f0f0:	2208      	movs	r2, #8
 800f0f2:	701a      	strb	r2, [r3, #0]

                for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800f0f4:	2301      	movs	r3, #1
 800f0f6:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
 800f0fa:	e019      	b.n	800f130 <LmhpComplianceOnMcpsIndication+0x460>
                     i++ )
                {
                    ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	689a      	ldr	r2, [r3, #8]
 800f100:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800f104:	1c59      	adds	r1, r3, #1
 800f106:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800f10a:	4413      	add	r3, r2
 800f10c:	781a      	ldrb	r2, [r3, #0]
 800f10e:	4b6e      	ldr	r3, [pc, #440]	@ (800f2c8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f110:	68d9      	ldr	r1, [r3, #12]
 800f112:	4b6d      	ldr	r3, [pc, #436]	@ (800f2c8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f114:	7a9b      	ldrb	r3, [r3, #10]
 800f116:	1c58      	adds	r0, r3, #1
 800f118:	b2c4      	uxtb	r4, r0
 800f11a:	486b      	ldr	r0, [pc, #428]	@ (800f2c8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f11c:	7284      	strb	r4, [r0, #10]
 800f11e:	440b      	add	r3, r1
 800f120:	3201      	adds	r2, #1
 800f122:	b2d2      	uxtb	r2, r2
 800f124:	701a      	strb	r2, [r3, #0]
                     i++ )
 800f126:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 800f12a:	3301      	adds	r3, #1
 800f12c:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
                for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800f130:	4b65      	ldr	r3, [pc, #404]	@ (800f2c8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f132:	7a5a      	ldrb	r2, [r3, #9]
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	7b1b      	ldrb	r3, [r3, #12]
 800f138:	4293      	cmp	r3, r2
 800f13a:	bf28      	it	cs
 800f13c:	4613      	movcs	r3, r2
 800f13e:	b2db      	uxtb	r3, r3
 800f140:	f897 208e 	ldrb.w	r2, [r7, #142]	@ 0x8e
 800f144:	429a      	cmp	r2, r3
 800f146:	d3d9      	bcc.n	800f0fc <LmhpComplianceOnMcpsIndication+0x42c>
                }
                break;
 800f148:	e178      	b.n	800f43c <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_RX_APP_CNT_REQ:
            {
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_RX_APP_CNT_ANS;
 800f14a:	4b5f      	ldr	r3, [pc, #380]	@ (800f2c8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f14c:	68da      	ldr	r2, [r3, #12]
 800f14e:	4b5e      	ldr	r3, [pc, #376]	@ (800f2c8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f150:	7a9b      	ldrb	r3, [r3, #10]
 800f152:	1c59      	adds	r1, r3, #1
 800f154:	b2c8      	uxtb	r0, r1
 800f156:	495c      	ldr	r1, [pc, #368]	@ (800f2c8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f158:	7288      	strb	r0, [r1, #10]
 800f15a:	4413      	add	r3, r2
 800f15c:	2209      	movs	r2, #9
 800f15e:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt;
 800f160:	4b59      	ldr	r3, [pc, #356]	@ (800f2c8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f162:	8a18      	ldrh	r0, [r3, #16]
 800f164:	4b58      	ldr	r3, [pc, #352]	@ (800f2c8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f166:	68da      	ldr	r2, [r3, #12]
 800f168:	4b57      	ldr	r3, [pc, #348]	@ (800f2c8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f16a:	7a9b      	ldrb	r3, [r3, #10]
 800f16c:	1c59      	adds	r1, r3, #1
 800f16e:	b2cc      	uxtb	r4, r1
 800f170:	4955      	ldr	r1, [pc, #340]	@ (800f2c8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f172:	728c      	strb	r4, [r1, #10]
 800f174:	4413      	add	r3, r2
 800f176:	b2c2      	uxtb	r2, r0
 800f178:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt >> 8;
 800f17a:	4b53      	ldr	r3, [pc, #332]	@ (800f2c8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f17c:	8a1b      	ldrh	r3, [r3, #16]
 800f17e:	0a1b      	lsrs	r3, r3, #8
 800f180:	b298      	uxth	r0, r3
 800f182:	4b51      	ldr	r3, [pc, #324]	@ (800f2c8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f184:	68da      	ldr	r2, [r3, #12]
 800f186:	4b50      	ldr	r3, [pc, #320]	@ (800f2c8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f188:	7a9b      	ldrb	r3, [r3, #10]
 800f18a:	1c59      	adds	r1, r3, #1
 800f18c:	b2cc      	uxtb	r4, r1
 800f18e:	494e      	ldr	r1, [pc, #312]	@ (800f2c8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f190:	728c      	strb	r4, [r1, #10]
 800f192:	4413      	add	r3, r2
 800f194:	b2c2      	uxtb	r2, r0
 800f196:	701a      	strb	r2, [r3, #0]
                break;
 800f198:	e150      	b.n	800f43c <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_RX_APP_CNT_RESET_REQ:
            {
                ComplianceTestState.RxAppCnt = 0;
 800f19a:	4b4b      	ldr	r3, [pc, #300]	@ (800f2c8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f19c:	2200      	movs	r2, #0
 800f19e:	821a      	strh	r2, [r3, #16]
                break;
 800f1a0:	e14c      	b.n	800f43c <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_LINK_CHECK_REQ:
            {
                MlmeReq_t mlmeReq;
                mlmeReq.Type = MLME_LINK_CHECK;
 800f1a2:	2305      	movs	r3, #5
 800f1a4:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50

                LoRaMacMlmeRequest( &mlmeReq );
 800f1a8:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800f1ac:	4618      	mov	r0, r3
 800f1ae:	f004 fdd7 	bl	8013d60 <LoRaMacMlmeRequest>
                break;
 800f1b2:	e143      	b.n	800f43c <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_DEVICE_TIME_REQ:
            {
                CompliancePackage.OnDeviceTimeRequest( );
 800f1b4:	4b45      	ldr	r3, [pc, #276]	@ (800f2cc <LmhpComplianceOnMcpsIndication+0x5fc>)
 800f1b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f1b8:	4798      	blx	r3
                break;
 800f1ba:	e13f      	b.n	800f43c <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_PING_SLOT_INFO_REQ:
            {
                ComplianceTestState.ClassBStatus.PingSlotPeriodicity = mcpsIndication->Buffer[cmdIndex++];
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	689a      	ldr	r2, [r3, #8]
 800f1c0:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800f1c4:	1c59      	adds	r1, r3, #1
 800f1c6:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800f1ca:	4413      	add	r3, r2
 800f1cc:	781a      	ldrb	r2, [r3, #0]
 800f1ce:	4b3e      	ldr	r3, [pc, #248]	@ (800f2c8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f1d0:	755a      	strb	r2, [r3, #21]
                if( ComplianceParams->OnPingSlotPeriodicityChanged != NULL )
 800f1d2:	4b3c      	ldr	r3, [pc, #240]	@ (800f2c4 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	68db      	ldr	r3, [r3, #12]
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	f000 812c 	beq.w	800f436 <LmhpComplianceOnMcpsIndication+0x766>
                {
                    ComplianceParams->OnPingSlotPeriodicityChanged( ComplianceTestState.ClassBStatus.PingSlotPeriodicity );
 800f1de:	4b39      	ldr	r3, [pc, #228]	@ (800f2c4 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	68db      	ldr	r3, [r3, #12]
 800f1e4:	4a38      	ldr	r2, [pc, #224]	@ (800f2c8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f1e6:	7d52      	ldrb	r2, [r2, #21]
 800f1e8:	4610      	mov	r0, r2
 800f1ea:	4798      	blx	r3
                }
                break;
 800f1ec:	e123      	b.n	800f436 <LmhpComplianceOnMcpsIndication+0x766>
            }
#endif /* CLASS_B not available */
        case COMPLIANCE_TX_CW_REQ:
            {
                MlmeReq_t mlmeReq;
                if( mcpsIndication->BufferSize == 7 )
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	7b1b      	ldrb	r3, [r3, #12]
 800f1f2:	2b07      	cmp	r3, #7
 800f1f4:	f040 8121 	bne.w	800f43a <LmhpComplianceOnMcpsIndication+0x76a>
                {
                    mlmeReq.Type = MLME_TXCW;
 800f1f8:	2306      	movs	r3, #6
 800f1fa:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
                    mlmeReq.Req.TxCw.Timeout =
                        ( uint16_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) );
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	689a      	ldr	r2, [r3, #8]
 800f202:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800f206:	4413      	add	r3, r2
 800f208:	781b      	ldrb	r3, [r3, #0]
 800f20a:	b21a      	sxth	r2, r3
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	6899      	ldr	r1, [r3, #8]
 800f210:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800f214:	3301      	adds	r3, #1
 800f216:	440b      	add	r3, r1
 800f218:	781b      	ldrb	r3, [r3, #0]
 800f21a:	021b      	lsls	r3, r3, #8
 800f21c:	b21b      	sxth	r3, r3
 800f21e:	4313      	orrs	r3, r2
 800f220:	b21b      	sxth	r3, r3
 800f222:	b29b      	uxth	r3, r3
                    mlmeReq.Req.TxCw.Timeout =
 800f224:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                    cmdIndex += 2;
 800f228:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800f22c:	3302      	adds	r3, #2
 800f22e:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
                    mlmeReq.Req.TxCw.Frequency =
                        ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	689a      	ldr	r2, [r3, #8]
 800f236:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800f23a:	4413      	add	r3, r2
 800f23c:	781b      	ldrb	r3, [r3, #0]
 800f23e:	4619      	mov	r1, r3
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	689a      	ldr	r2, [r3, #8]
 800f244:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800f248:	3301      	adds	r3, #1
 800f24a:	4413      	add	r3, r2
 800f24c:	781b      	ldrb	r3, [r3, #0]
 800f24e:	021b      	lsls	r3, r3, #8
 800f250:	ea41 0203 	orr.w	r2, r1, r3
                                      ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	6899      	ldr	r1, [r3, #8]
 800f258:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800f25c:	3302      	adds	r3, #2
 800f25e:	440b      	add	r3, r1
 800f260:	781b      	ldrb	r3, [r3, #0]
 800f262:	041b      	lsls	r3, r3, #16
                        ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800f264:	4313      	orrs	r3, r2
 800f266:	461a      	mov	r2, r3
                                      ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800f268:	2364      	movs	r3, #100	@ 0x64
 800f26a:	fb02 f303 	mul.w	r3, r2, r3
                    mlmeReq.Req.TxCw.Frequency =
 800f26e:	647b      	str	r3, [r7, #68]	@ 0x44
                        100;
                    cmdIndex += 3;
 800f270:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800f274:	3303      	adds	r3, #3
 800f276:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[cmdIndex++];
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	689a      	ldr	r2, [r3, #8]
 800f27e:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800f282:	1c59      	adds	r1, r3, #1
 800f284:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800f288:	4413      	add	r3, r2
 800f28a:	781b      	ldrb	r3, [r3, #0]
 800f28c:	b25b      	sxtb	r3, r3
 800f28e:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48

                    LoRaMacMlmeRequest( &mlmeReq );
 800f292:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800f296:	4618      	mov	r0, r3
 800f298:	f004 fd62 	bl	8013d60 <LoRaMacMlmeRequest>
                }
                break;
 800f29c:	e0cd      	b.n	800f43a <LmhpComplianceOnMcpsIndication+0x76a>
            }
        case COMPLIANCE_DUT_FPORT_224_DISABLE_REQ:
            {
                mibReq.Type = MIB_IS_CERT_FPORT_ON;
 800f29e:	233b      	movs	r3, #59	@ 0x3b
 800f2a0:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
                mibReq.Param.IsCertPortOn = false;
 800f2a4:	2300      	movs	r3, #0
 800f2a6:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                LoRaMacMibSetRequestConfirm( &mibReq );
 800f2aa:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800f2ae:	4618      	mov	r0, r3
 800f2b0:	f004 f9ac 	bl	801360c <LoRaMacMibSetRequestConfirm>

                ComplianceTestState.IsResetCmdPending = true;
 800f2b4:	4b04      	ldr	r3, [pc, #16]	@ (800f2c8 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f2b6:	2201      	movs	r2, #1
 800f2b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                break;
 800f2bc:	e0be      	b.n	800f43c <LmhpComplianceOnMcpsIndication+0x76c>
 800f2be:	bf00      	nop
 800f2c0:	0801f53c 	.word	0x0801f53c
 800f2c4:	200006c4 	.word	0x200006c4
 800f2c8:	2000068c 	.word	0x2000068c
 800f2cc:	200000dc 	.word	0x200000dc
            {
                Version_t           lrwanVersion;
                Version_t           lrwanRpVersion;
                MibRequestConfirm_t mibReq;

                mibReq.Type = MIB_LORAWAN_VERSION;
 800f2d0:	232a      	movs	r3, #42	@ 0x2a
 800f2d2:	723b      	strb	r3, [r7, #8]

                LoRaMacMibGetRequestConfirm( &mibReq );
 800f2d4:	f107 0308 	add.w	r3, r7, #8
 800f2d8:	4618      	mov	r0, r3
 800f2da:	f003 ffbf 	bl	801325c <LoRaMacMibGetRequestConfirm>
                lrwanVersion   = mibReq.Param.LrWanVersion.LoRaWan;
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	63bb      	str	r3, [r7, #56]	@ 0x38
                lrwanRpVersion = mibReq.Param.LrWanVersion.LoRaWanRegion;
 800f2e2:	693b      	ldr	r3, [r7, #16]
 800f2e4:	637b      	str	r3, [r7, #52]	@ 0x34

                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_DUT_VERSION_ANS;
 800f2e6:	4b65      	ldr	r3, [pc, #404]	@ (800f47c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f2e8:	68da      	ldr	r2, [r3, #12]
 800f2ea:	4b64      	ldr	r3, [pc, #400]	@ (800f47c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f2ec:	7a9b      	ldrb	r3, [r3, #10]
 800f2ee:	1c59      	adds	r1, r3, #1
 800f2f0:	b2c8      	uxtb	r0, r1
 800f2f2:	4962      	ldr	r1, [pc, #392]	@ (800f47c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f2f4:	7288      	strb	r0, [r1, #10]
 800f2f6:	4413      	add	r3, r2
 800f2f8:	227f      	movs	r2, #127	@ 0x7f
 800f2fa:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Major;
 800f2fc:	4b60      	ldr	r3, [pc, #384]	@ (800f480 <LmhpComplianceOnMcpsIndication+0x7b0>)
 800f2fe:	681a      	ldr	r2, [r3, #0]
 800f300:	4b5e      	ldr	r3, [pc, #376]	@ (800f47c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f302:	68d9      	ldr	r1, [r3, #12]
 800f304:	4b5d      	ldr	r3, [pc, #372]	@ (800f47c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f306:	7a9b      	ldrb	r3, [r3, #10]
 800f308:	1c58      	adds	r0, r3, #1
 800f30a:	b2c4      	uxtb	r4, r0
 800f30c:	485b      	ldr	r0, [pc, #364]	@ (800f47c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f30e:	7284      	strb	r4, [r0, #10]
 800f310:	440b      	add	r3, r1
 800f312:	78d2      	ldrb	r2, [r2, #3]
 800f314:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Minor;
 800f316:	4b5a      	ldr	r3, [pc, #360]	@ (800f480 <LmhpComplianceOnMcpsIndication+0x7b0>)
 800f318:	681a      	ldr	r2, [r3, #0]
 800f31a:	4b58      	ldr	r3, [pc, #352]	@ (800f47c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f31c:	68d9      	ldr	r1, [r3, #12]
 800f31e:	4b57      	ldr	r3, [pc, #348]	@ (800f47c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f320:	7a9b      	ldrb	r3, [r3, #10]
 800f322:	1c58      	adds	r0, r3, #1
 800f324:	b2c4      	uxtb	r4, r0
 800f326:	4855      	ldr	r0, [pc, #340]	@ (800f47c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f328:	7284      	strb	r4, [r0, #10]
 800f32a:	440b      	add	r3, r1
 800f32c:	7892      	ldrb	r2, [r2, #2]
 800f32e:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Patch;
 800f330:	4b53      	ldr	r3, [pc, #332]	@ (800f480 <LmhpComplianceOnMcpsIndication+0x7b0>)
 800f332:	681a      	ldr	r2, [r3, #0]
 800f334:	4b51      	ldr	r3, [pc, #324]	@ (800f47c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f336:	68d9      	ldr	r1, [r3, #12]
 800f338:	4b50      	ldr	r3, [pc, #320]	@ (800f47c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f33a:	7a9b      	ldrb	r3, [r3, #10]
 800f33c:	1c58      	adds	r0, r3, #1
 800f33e:	b2c4      	uxtb	r4, r0
 800f340:	484e      	ldr	r0, [pc, #312]	@ (800f47c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f342:	7284      	strb	r4, [r0, #10]
 800f344:	440b      	add	r3, r1
 800f346:	7852      	ldrb	r2, [r2, #1]
 800f348:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Revision;
 800f34a:	4b4d      	ldr	r3, [pc, #308]	@ (800f480 <LmhpComplianceOnMcpsIndication+0x7b0>)
 800f34c:	681a      	ldr	r2, [r3, #0]
 800f34e:	4b4b      	ldr	r3, [pc, #300]	@ (800f47c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f350:	68d9      	ldr	r1, [r3, #12]
 800f352:	4b4a      	ldr	r3, [pc, #296]	@ (800f47c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f354:	7a9b      	ldrb	r3, [r3, #10]
 800f356:	1c58      	adds	r0, r3, #1
 800f358:	b2c4      	uxtb	r4, r0
 800f35a:	4848      	ldr	r0, [pc, #288]	@ (800f47c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f35c:	7284      	strb	r4, [r0, #10]
 800f35e:	440b      	add	r3, r1
 800f360:	7812      	ldrb	r2, [r2, #0]
 800f362:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Major;
 800f364:	4b45      	ldr	r3, [pc, #276]	@ (800f47c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f366:	68da      	ldr	r2, [r3, #12]
 800f368:	4b44      	ldr	r3, [pc, #272]	@ (800f47c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f36a:	7a9b      	ldrb	r3, [r3, #10]
 800f36c:	1c59      	adds	r1, r3, #1
 800f36e:	b2c8      	uxtb	r0, r1
 800f370:	4942      	ldr	r1, [pc, #264]	@ (800f47c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f372:	7288      	strb	r0, [r1, #10]
 800f374:	4413      	add	r3, r2
 800f376:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 800f37a:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Minor;
 800f37c:	4b3f      	ldr	r3, [pc, #252]	@ (800f47c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f37e:	68da      	ldr	r2, [r3, #12]
 800f380:	4b3e      	ldr	r3, [pc, #248]	@ (800f47c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f382:	7a9b      	ldrb	r3, [r3, #10]
 800f384:	1c59      	adds	r1, r3, #1
 800f386:	b2c8      	uxtb	r0, r1
 800f388:	493c      	ldr	r1, [pc, #240]	@ (800f47c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f38a:	7288      	strb	r0, [r1, #10]
 800f38c:	4413      	add	r3, r2
 800f38e:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 800f392:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Patch;
 800f394:	4b39      	ldr	r3, [pc, #228]	@ (800f47c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f396:	68da      	ldr	r2, [r3, #12]
 800f398:	4b38      	ldr	r3, [pc, #224]	@ (800f47c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f39a:	7a9b      	ldrb	r3, [r3, #10]
 800f39c:	1c59      	adds	r1, r3, #1
 800f39e:	b2c8      	uxtb	r0, r1
 800f3a0:	4936      	ldr	r1, [pc, #216]	@ (800f47c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f3a2:	7288      	strb	r0, [r1, #10]
 800f3a4:	4413      	add	r3, r2
 800f3a6:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800f3aa:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Revision;
 800f3ac:	4b33      	ldr	r3, [pc, #204]	@ (800f47c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f3ae:	68da      	ldr	r2, [r3, #12]
 800f3b0:	4b32      	ldr	r3, [pc, #200]	@ (800f47c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f3b2:	7a9b      	ldrb	r3, [r3, #10]
 800f3b4:	1c59      	adds	r1, r3, #1
 800f3b6:	b2c8      	uxtb	r0, r1
 800f3b8:	4930      	ldr	r1, [pc, #192]	@ (800f47c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f3ba:	7288      	strb	r0, [r1, #10]
 800f3bc:	4413      	add	r3, r2
 800f3be:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800f3c2:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Major;
 800f3c4:	4b2d      	ldr	r3, [pc, #180]	@ (800f47c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f3c6:	68da      	ldr	r2, [r3, #12]
 800f3c8:	4b2c      	ldr	r3, [pc, #176]	@ (800f47c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f3ca:	7a9b      	ldrb	r3, [r3, #10]
 800f3cc:	1c59      	adds	r1, r3, #1
 800f3ce:	b2c8      	uxtb	r0, r1
 800f3d0:	492a      	ldr	r1, [pc, #168]	@ (800f47c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f3d2:	7288      	strb	r0, [r1, #10]
 800f3d4:	4413      	add	r3, r2
 800f3d6:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800f3da:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Minor;
 800f3dc:	4b27      	ldr	r3, [pc, #156]	@ (800f47c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f3de:	68da      	ldr	r2, [r3, #12]
 800f3e0:	4b26      	ldr	r3, [pc, #152]	@ (800f47c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f3e2:	7a9b      	ldrb	r3, [r3, #10]
 800f3e4:	1c59      	adds	r1, r3, #1
 800f3e6:	b2c8      	uxtb	r0, r1
 800f3e8:	4924      	ldr	r1, [pc, #144]	@ (800f47c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f3ea:	7288      	strb	r0, [r1, #10]
 800f3ec:	4413      	add	r3, r2
 800f3ee:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 800f3f2:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Patch;
 800f3f4:	4b21      	ldr	r3, [pc, #132]	@ (800f47c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f3f6:	68da      	ldr	r2, [r3, #12]
 800f3f8:	4b20      	ldr	r3, [pc, #128]	@ (800f47c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f3fa:	7a9b      	ldrb	r3, [r3, #10]
 800f3fc:	1c59      	adds	r1, r3, #1
 800f3fe:	b2c8      	uxtb	r0, r1
 800f400:	491e      	ldr	r1, [pc, #120]	@ (800f47c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f402:	7288      	strb	r0, [r1, #10]
 800f404:	4413      	add	r3, r2
 800f406:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 800f40a:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Revision;
 800f40c:	4b1b      	ldr	r3, [pc, #108]	@ (800f47c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f40e:	68da      	ldr	r2, [r3, #12]
 800f410:	4b1a      	ldr	r3, [pc, #104]	@ (800f47c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f412:	7a9b      	ldrb	r3, [r3, #10]
 800f414:	1c59      	adds	r1, r3, #1
 800f416:	b2c8      	uxtb	r0, r1
 800f418:	4918      	ldr	r1, [pc, #96]	@ (800f47c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f41a:	7288      	strb	r0, [r1, #10]
 800f41c:	4413      	add	r3, r2
 800f41e:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 800f422:	701a      	strb	r2, [r3, #0]
                break;
 800f424:	e00a      	b.n	800f43c <LmhpComplianceOnMcpsIndication+0x76c>
            }
        default:
            {
                break;
 800f426:	bf00      	nop
 800f428:	e008      	b.n	800f43c <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 800f42a:	bf00      	nop
 800f42c:	e006      	b.n	800f43c <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 800f42e:	bf00      	nop
 800f430:	e004      	b.n	800f43c <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 800f432:	bf00      	nop
 800f434:	e002      	b.n	800f43c <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 800f436:	bf00      	nop
 800f438:	e000      	b.n	800f43c <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 800f43a:	bf00      	nop
            }
    }

    if( ComplianceTestState.DataBufferSize != 0 )
 800f43c:	4b0f      	ldr	r3, [pc, #60]	@ (800f47c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f43e:	7a9b      	ldrb	r3, [r3, #10]
 800f440:	2b00      	cmp	r3, #0
 800f442:	d00c      	beq.n	800f45e <LmhpComplianceOnMcpsIndication+0x78e>
    {
        if( ProcessTimer.IsRunning == 0U)
 800f444:	4b0f      	ldr	r3, [pc, #60]	@ (800f484 <LmhpComplianceOnMcpsIndication+0x7b4>)
 800f446:	7a5b      	ldrb	r3, [r3, #9]
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d114      	bne.n	800f476 <LmhpComplianceOnMcpsIndication+0x7a6>
        {
            TimerSetValue( &ProcessTimer, 1000 );
 800f44c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800f450:	480c      	ldr	r0, [pc, #48]	@ (800f484 <LmhpComplianceOnMcpsIndication+0x7b4>)
 800f452:	f00f f835 	bl	801e4c0 <UTIL_TIMER_SetPeriod>
            TimerStart( &ProcessTimer );
 800f456:	480b      	ldr	r0, [pc, #44]	@ (800f484 <LmhpComplianceOnMcpsIndication+0x7b4>)
 800f458:	f00e ff54 	bl	801e304 <UTIL_TIMER_Start>
 800f45c:	e00b      	b.n	800f476 <LmhpComplianceOnMcpsIndication+0x7a6>
        }
    }
    else
    {
        /* Abort any pending Tx as a new command has been processed */
        TimerStop( &ProcessTimer );
 800f45e:	4809      	ldr	r0, [pc, #36]	@ (800f484 <LmhpComplianceOnMcpsIndication+0x7b4>)
 800f460:	f00e ffbe 	bl	801e3e0 <UTIL_TIMER_Stop>
        ComplianceTestState.IsTxPending = false;
 800f464:	4b05      	ldr	r3, [pc, #20]	@ (800f47c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800f466:	2200      	movs	r2, #0
 800f468:	705a      	strb	r2, [r3, #1]
 800f46a:	e004      	b.n	800f476 <LmhpComplianceOnMcpsIndication+0x7a6>
        return;
 800f46c:	bf00      	nop
 800f46e:	e002      	b.n	800f476 <LmhpComplianceOnMcpsIndication+0x7a6>
        return;
 800f470:	bf00      	nop
 800f472:	e000      	b.n	800f476 <LmhpComplianceOnMcpsIndication+0x7a6>
        return;
 800f474:	bf00      	nop
    }
}
 800f476:	3790      	adds	r7, #144	@ 0x90
 800f478:	46bd      	mov	sp, r7
 800f47a:	bdb0      	pop	{r4, r5, r7, pc}
 800f47c:	2000068c 	.word	0x2000068c
 800f480:	200006c4 	.word	0x200006c4
 800f484:	200006c8 	.word	0x200006c8

0800f488 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800f488:	b480      	push	{r7}
 800f48a:	b083      	sub	sp, #12
 800f48c:	af00      	add	r7, sp, #0
 800f48e:	6078      	str	r0, [r7, #4]
                }
                break;
            }
#endif /* CLASS_B not available */
        default:
            break;
 800f490:	bf00      	nop
    }
}
 800f492:	bf00      	nop
 800f494:	370c      	adds	r7, #12
 800f496:	46bd      	mov	sp, r7
 800f498:	bc80      	pop	{r7}
 800f49a:	4770      	bx	lr

0800f49c <LmhpComplianceOnMlmeIndication>:

static void LmhpComplianceOnMlmeIndication( MlmeIndication_t *mlmeIndication )
{
 800f49c:	b480      	push	{r7}
 800f49e:	b083      	sub	sp, #12
 800f4a0:	af00      	add	r7, sp, #0
 800f4a2:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800f4a4:	4b05      	ldr	r3, [pc, #20]	@ (800f4bc <LmhpComplianceOnMlmeIndication+0x20>)
 800f4a6:	781b      	ldrb	r3, [r3, #0]
 800f4a8:	f083 0301 	eor.w	r3, r3, #1
 800f4ac:	b2db      	uxtb	r3, r3
 800f4ae:	2b00      	cmp	r3, #0
    {
        return;
 800f4b0:	bf00      	nop
            }
#endif /* CLASS_B not available */
        default:
            break;
    }
}
 800f4b2:	370c      	adds	r7, #12
 800f4b4:	46bd      	mov	sp, r7
 800f4b6:	bc80      	pop	{r7}
 800f4b8:	4770      	bx	lr
 800f4ba:	bf00      	nop
 800f4bc:	2000068c 	.word	0x2000068c

0800f4c0 <OnProcessTimer>:
    }
}
#endif /* CLASS_B not available */

static void OnProcessTimer( void *context )
{
 800f4c0:	b580      	push	{r7, lr}
 800f4c2:	b082      	sub	sp, #8
 800f4c4:	af00      	add	r7, sp, #0
 800f4c6:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.DataBufferSize != 0 )
 800f4c8:	4b08      	ldr	r3, [pc, #32]	@ (800f4ec <OnProcessTimer+0x2c>)
 800f4ca:	7a9b      	ldrb	r3, [r3, #10]
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d002      	beq.n	800f4d6 <OnProcessTimer+0x16>
    {
        ComplianceTestState.IsTxPending = true;
 800f4d0:	4b06      	ldr	r3, [pc, #24]	@ (800f4ec <OnProcessTimer+0x2c>)
 800f4d2:	2201      	movs	r2, #1
 800f4d4:	705a      	strb	r2, [r3, #1]
    }
    if( CompliancePackage.OnPackageProcessEvent != NULL )
 800f4d6:	4b06      	ldr	r3, [pc, #24]	@ (800f4f0 <OnProcessTimer+0x30>)
 800f4d8:	695b      	ldr	r3, [r3, #20]
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d002      	beq.n	800f4e4 <OnProcessTimer+0x24>
    {
        CompliancePackage.OnPackageProcessEvent();
 800f4de:	4b04      	ldr	r3, [pc, #16]	@ (800f4f0 <OnProcessTimer+0x30>)
 800f4e0:	695b      	ldr	r3, [r3, #20]
 800f4e2:	4798      	blx	r3
    }
}
 800f4e4:	bf00      	nop
 800f4e6:	3708      	adds	r7, #8
 800f4e8:	46bd      	mov	sp, r7
 800f4ea:	bd80      	pop	{r7, pc}
 800f4ec:	2000068c 	.word	0x2000068c
 800f4f0:	200000dc 	.word	0x200000dc

0800f4f4 <LmhpPackagesRegistrationInit>:

/* Private variables ---------------------------------------------------------*/

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmhpPackagesRegistrationInit( Version_t *fwVersion )
{
 800f4f4:	b480      	push	{r7}
 800f4f6:	b083      	sub	sp, #12
 800f4f8:	af00      	add	r7, sp, #0
 800f4fa:	6078      	str	r0, [r7, #4]
        return LORAMAC_HANDLER_ERROR;
    }
#endif /* LORAWAN_PACKAGES_VERSION */
#endif /* LORAWAN_DATA_DISTRIB_MGT */

    return LORAMAC_HANDLER_SUCCESS;
 800f4fc:	2300      	movs	r3, #0
}
 800f4fe:	4618      	mov	r0, r3
 800f500:	370c      	adds	r7, #12
 800f502:	46bd      	mov	sp, r7
 800f504:	bc80      	pop	{r7}
 800f506:	4770      	bx	lr

0800f508 <LmhpPackagesRegister>:

LmHandlerErrorStatus_t LmhpPackagesRegister( uint8_t id, LmhPackage_t **package )
{
 800f508:	b480      	push	{r7}
 800f50a:	b083      	sub	sp, #12
 800f50c:	af00      	add	r7, sp, #0
 800f50e:	4603      	mov	r3, r0
 800f510:	6039      	str	r1, [r7, #0]
 800f512:	71fb      	strb	r3, [r7, #7]
                break;
            }
    }
    return LORAMAC_HANDLER_SUCCESS;
#else
    return LORAMAC_HANDLER_ERROR;
 800f514:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* LORAWAN_DATA_DISTRIB_MGT */
}
 800f518:	4618      	mov	r0, r3
 800f51a:	370c      	adds	r7, #12
 800f51c:	46bd      	mov	sp, r7
 800f51e:	bc80      	pop	{r7}
 800f520:	4770      	bx	lr
	...

0800f524 <OnRadioTxDone>:
}RxDoneParams_t;

static RxDoneParams_t RxDoneParams;

static void OnRadioTxDone( void )
{
 800f524:	b590      	push	{r4, r7, lr}
 800f526:	b083      	sub	sp, #12
 800f528:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800f52a:	f00f f873 	bl	801e614 <UTIL_TIMER_GetCurrentTime>
 800f52e:	4603      	mov	r3, r0
 800f530:	4a0f      	ldr	r2, [pc, #60]	@ (800f570 <OnRadioTxDone+0x4c>)
 800f532:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800f534:	4c0f      	ldr	r4, [pc, #60]	@ (800f574 <OnRadioTxDone+0x50>)
 800f536:	463b      	mov	r3, r7
 800f538:	4618      	mov	r0, r3
 800f53a:	f00e f9eb 	bl	801d914 <SysTimeGet>
 800f53e:	f504 734e 	add.w	r3, r4, #824	@ 0x338
 800f542:	463a      	mov	r2, r7
 800f544:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f548:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800f54c:	4a0a      	ldr	r2, [pc, #40]	@ (800f578 <OnRadioTxDone+0x54>)
 800f54e:	7813      	ldrb	r3, [r2, #0]
 800f550:	f043 0320 	orr.w	r3, r3, #32
 800f554:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800f556:	f003 fa7d 	bl	8012a54 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800f55a:	4b08      	ldr	r3, [pc, #32]	@ (800f57c <OnRadioTxDone+0x58>)
 800f55c:	2201      	movs	r2, #1
 800f55e:	2100      	movs	r1, #0
 800f560:	2002      	movs	r0, #2
 800f562:	f00f f947 	bl	801e7f4 <UTIL_ADV_TRACE_COND_FSend>
}
 800f566:	bf00      	nop
 800f568:	370c      	adds	r7, #12
 800f56a:	46bd      	mov	sp, r7
 800f56c:	bd90      	pop	{r4, r7, pc}
 800f56e:	bf00      	nop
 800f570:	20001828 	.word	0x20001828
 800f574:	200006e0 	.word	0x200006e0
 800f578:	20001824 	.word	0x20001824
 800f57c:	0801f568 	.word	0x0801f568

0800f580 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800f580:	b580      	push	{r7, lr}
 800f582:	b084      	sub	sp, #16
 800f584:	af00      	add	r7, sp, #0
 800f586:	60f8      	str	r0, [r7, #12]
 800f588:	4608      	mov	r0, r1
 800f58a:	4611      	mov	r1, r2
 800f58c:	461a      	mov	r2, r3
 800f58e:	4603      	mov	r3, r0
 800f590:	817b      	strh	r3, [r7, #10]
 800f592:	460b      	mov	r3, r1
 800f594:	813b      	strh	r3, [r7, #8]
 800f596:	4613      	mov	r3, r2
 800f598:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800f59a:	f00f f83b 	bl	801e614 <UTIL_TIMER_GetCurrentTime>
 800f59e:	4603      	mov	r3, r0
 800f5a0:	4a11      	ldr	r2, [pc, #68]	@ (800f5e8 <OnRadioRxDone+0x68>)
 800f5a2:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 800f5a4:	4a10      	ldr	r2, [pc, #64]	@ (800f5e8 <OnRadioRxDone+0x68>)
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 800f5aa:	4a0f      	ldr	r2, [pc, #60]	@ (800f5e8 <OnRadioRxDone+0x68>)
 800f5ac:	897b      	ldrh	r3, [r7, #10]
 800f5ae:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 800f5b0:	4a0d      	ldr	r2, [pc, #52]	@ (800f5e8 <OnRadioRxDone+0x68>)
 800f5b2:	893b      	ldrh	r3, [r7, #8]
 800f5b4:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 800f5b6:	4a0c      	ldr	r2, [pc, #48]	@ (800f5e8 <OnRadioRxDone+0x68>)
 800f5b8:	79fb      	ldrb	r3, [r7, #7]
 800f5ba:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800f5bc:	4a0b      	ldr	r2, [pc, #44]	@ (800f5ec <OnRadioRxDone+0x6c>)
 800f5be:	7813      	ldrb	r3, [r2, #0]
 800f5c0:	f043 0310 	orr.w	r3, r3, #16
 800f5c4:	7013      	strb	r3, [r2, #0]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 800f5c6:	4a09      	ldr	r2, [pc, #36]	@ (800f5ec <OnRadioRxDone+0x6c>)
 800f5c8:	7813      	ldrb	r3, [r2, #0]
 800f5ca:	f043 0301 	orr.w	r3, r3, #1
 800f5ce:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    OnMacProcessNotify( );
 800f5d0:	f003 fa40 	bl	8012a54 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800f5d4:	4b06      	ldr	r3, [pc, #24]	@ (800f5f0 <OnRadioRxDone+0x70>)
 800f5d6:	2201      	movs	r2, #1
 800f5d8:	2100      	movs	r1, #0
 800f5da:	2002      	movs	r0, #2
 800f5dc:	f00f f90a 	bl	801e7f4 <UTIL_ADV_TRACE_COND_FSend>
}
 800f5e0:	bf00      	nop
 800f5e2:	3710      	adds	r7, #16
 800f5e4:	46bd      	mov	sp, r7
 800f5e6:	bd80      	pop	{r7, pc}
 800f5e8:	2000182c 	.word	0x2000182c
 800f5ec:	20001824 	.word	0x20001824
 800f5f0:	0801f578 	.word	0x0801f578

0800f5f4 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800f5f4:	b580      	push	{r7, lr}
 800f5f6:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800f5f8:	4a07      	ldr	r2, [pc, #28]	@ (800f618 <OnRadioTxTimeout+0x24>)
 800f5fa:	7813      	ldrb	r3, [r2, #0]
 800f5fc:	f043 0308 	orr.w	r3, r3, #8
 800f600:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800f602:	f003 fa27 	bl	8012a54 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800f606:	4b05      	ldr	r3, [pc, #20]	@ (800f61c <OnRadioTxTimeout+0x28>)
 800f608:	2201      	movs	r2, #1
 800f60a:	2100      	movs	r1, #0
 800f60c:	2002      	movs	r0, #2
 800f60e:	f00f f8f1 	bl	801e7f4 <UTIL_ADV_TRACE_COND_FSend>
}
 800f612:	bf00      	nop
 800f614:	bd80      	pop	{r7, pc}
 800f616:	bf00      	nop
 800f618:	20001824 	.word	0x20001824
 800f61c:	0801f588 	.word	0x0801f588

0800f620 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800f620:	b580      	push	{r7, lr}
 800f622:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800f624:	4a04      	ldr	r2, [pc, #16]	@ (800f638 <OnRadioRxError+0x18>)
 800f626:	7813      	ldrb	r3, [r2, #0]
 800f628:	f043 0304 	orr.w	r3, r3, #4
 800f62c:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800f62e:	f003 fa11 	bl	8012a54 <OnMacProcessNotify>
}
 800f632:	bf00      	nop
 800f634:	bd80      	pop	{r7, pc}
 800f636:	bf00      	nop
 800f638:	20001824 	.word	0x20001824

0800f63c <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800f63c:	b580      	push	{r7, lr}
 800f63e:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800f640:	4a07      	ldr	r2, [pc, #28]	@ (800f660 <OnRadioRxTimeout+0x24>)
 800f642:	7813      	ldrb	r3, [r2, #0]
 800f644:	f043 0302 	orr.w	r3, r3, #2
 800f648:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800f64a:	f003 fa03 	bl	8012a54 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800f64e:	4b05      	ldr	r3, [pc, #20]	@ (800f664 <OnRadioRxTimeout+0x28>)
 800f650:	2201      	movs	r2, #1
 800f652:	2100      	movs	r1, #0
 800f654:	2002      	movs	r0, #2
 800f656:	f00f f8cd 	bl	801e7f4 <UTIL_ADV_TRACE_COND_FSend>
}
 800f65a:	bf00      	nop
 800f65c:	bd80      	pop	{r7, pc}
 800f65e:	bf00      	nop
 800f660:	20001824 	.word	0x20001824
 800f664:	0801f598 	.word	0x0801f598

0800f668 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800f668:	b480      	push	{r7}
 800f66a:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800f66c:	4b08      	ldr	r3, [pc, #32]	@ (800f690 <UpdateRxSlotIdleState+0x28>)
 800f66e:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800f672:	2b02      	cmp	r3, #2
 800f674:	d004      	beq.n	800f680 <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800f676:	4b07      	ldr	r3, [pc, #28]	@ (800f694 <UpdateRxSlotIdleState+0x2c>)
 800f678:	2206      	movs	r2, #6
 800f67a:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800f67e:	e003      	b.n	800f688 <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800f680:	4b04      	ldr	r3, [pc, #16]	@ (800f694 <UpdateRxSlotIdleState+0x2c>)
 800f682:	2202      	movs	r2, #2
 800f684:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490
}
 800f688:	bf00      	nop
 800f68a:	46bd      	mov	sp, r7
 800f68c:	bc80      	pop	{r7}
 800f68e:	4770      	bx	lr
 800f690:	20000bfc 	.word	0x20000bfc
 800f694:	200006e0 	.word	0x200006e0

0800f698 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800f698:	b580      	push	{r7, lr}
 800f69a:	b092      	sub	sp, #72	@ 0x48
 800f69c:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800f69e:	4b4a      	ldr	r3, [pc, #296]	@ (800f7c8 <ProcessRadioTxDone+0x130>)
 800f6a0:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800f6a4:	2b02      	cmp	r3, #2
 800f6a6:	d002      	beq.n	800f6ae <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 800f6a8:	4b48      	ldr	r3, [pc, #288]	@ (800f7cc <ProcessRadioTxDone+0x134>)
 800f6aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f6ac:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f6ae:	f3ef 8310 	mrs	r3, PRIMASK
 800f6b2:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800f6b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    }
#if ( !defined(DISABLE_LORAWAN_RX_WINDOW) || (DISABLE_LORAWAN_RX_WINDOW == 0) )
    // Setup timers
    CRITICAL_SECTION_BEGIN( );
 800f6b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("cpsid i" : : : "memory");
 800f6b8:	b672      	cpsid	i
}
 800f6ba:	bf00      	nop
    uint32_t offset = TimerGetCurrentTime( ) - TxDoneParams.CurTime;
 800f6bc:	f00e ffaa 	bl	801e614 <UTIL_TIMER_GetCurrentTime>
 800f6c0:	4602      	mov	r2, r0
 800f6c2:	4b43      	ldr	r3, [pc, #268]	@ (800f7d0 <ProcessRadioTxDone+0x138>)
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	1ad3      	subs	r3, r2, r3
 800f6c8:	63bb      	str	r3, [r7, #56]	@ 0x38
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay - offset );
 800f6ca:	4b42      	ldr	r3, [pc, #264]	@ (800f7d4 <ProcessRadioTxDone+0x13c>)
 800f6cc:	f8d3 23b0 	ldr.w	r2, [r3, #944]	@ 0x3b0
 800f6d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6d2:	1ad3      	subs	r3, r2, r3
 800f6d4:	4619      	mov	r1, r3
 800f6d6:	4840      	ldr	r0, [pc, #256]	@ (800f7d8 <ProcessRadioTxDone+0x140>)
 800f6d8:	f00e fef2 	bl	801e4c0 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800f6dc:	483e      	ldr	r0, [pc, #248]	@ (800f7d8 <ProcessRadioTxDone+0x140>)
 800f6de:	f00e fe11 	bl	801e304 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay - offset );
 800f6e2:	4b3c      	ldr	r3, [pc, #240]	@ (800f7d4 <ProcessRadioTxDone+0x13c>)
 800f6e4:	f8d3 23b4 	ldr.w	r2, [r3, #948]	@ 0x3b4
 800f6e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6ea:	1ad3      	subs	r3, r2, r3
 800f6ec:	4619      	mov	r1, r3
 800f6ee:	483b      	ldr	r0, [pc, #236]	@ (800f7dc <ProcessRadioTxDone+0x144>)
 800f6f0:	f00e fee6 	bl	801e4c0 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800f6f4:	4839      	ldr	r0, [pc, #228]	@ (800f7dc <ProcessRadioTxDone+0x144>)
 800f6f6:	f00e fe05 	bl	801e304 <UTIL_TIMER_Start>
 800f6fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f6fc:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f6fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f700:	f383 8810 	msr	PRIMASK, r3
}
 800f704:	bf00      	nop
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
        TimerStart( &MacCtx.AckTimeoutTimer );
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( MacCtx.NodeAckRequested == true )
 800f706:	4b33      	ldr	r3, [pc, #204]	@ (800f7d4 <ProcessRadioTxDone+0x13c>)
 800f708:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d01a      	beq.n	800f746 <ProcessRadioTxDone+0xae>
    {
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
 800f710:	2315      	movs	r3, #21
 800f712:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800f716:	4b2c      	ldr	r3, [pc, #176]	@ (800f7c8 <ProcessRadioTxDone+0x130>)
 800f718:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800f71c:	f107 0220 	add.w	r2, r7, #32
 800f720:	4611      	mov	r1, r2
 800f722:	4618      	mov	r0, r3
 800f724:	f006 fec6 	bl	80164b4 <RegionGetPhyParam>
 800f728:	4603      	mov	r3, r0
 800f72a:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800f72c:	4b29      	ldr	r3, [pc, #164]	@ (800f7d4 <ProcessRadioTxDone+0x13c>)
 800f72e:	f8d3 23b4 	ldr.w	r2, [r3, #948]	@ 0x3b4
 800f732:	69fb      	ldr	r3, [r7, #28]
 800f734:	4413      	add	r3, r2
 800f736:	4619      	mov	r1, r3
 800f738:	4829      	ldr	r0, [pc, #164]	@ (800f7e0 <ProcessRadioTxDone+0x148>)
 800f73a:	f00e fec1 	bl	801e4c0 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.RetransmitTimeoutTimer );
 800f73e:	4828      	ldr	r0, [pc, #160]	@ (800f7e0 <ProcessRadioTxDone+0x148>)
 800f740:	f00e fde0 	bl	801e304 <UTIL_TIMER_Start>
 800f744:	e003      	b.n	800f74e <ProcessRadioTxDone+0xb6>
    }
    else
    {
        // Transmission successful, setup status directly
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800f746:	4b23      	ldr	r3, [pc, #140]	@ (800f7d4 <ProcessRadioTxDone+0x13c>)
 800f748:	2200      	movs	r2, #0
 800f74a:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441
    }
#endif /* LORAMAC_VERSION */

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800f74e:	4b20      	ldr	r3, [pc, #128]	@ (800f7d0 <ProcessRadioTxDone+0x138>)
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	4a1d      	ldr	r2, [pc, #116]	@ (800f7c8 <ProcessRadioTxDone+0x130>)
 800f754:	62d3      	str	r3, [r2, #44]	@ 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800f756:	4b1f      	ldr	r3, [pc, #124]	@ (800f7d4 <ProcessRadioTxDone+0x13c>)
 800f758:	f893 341b 	ldrb.w	r3, [r3, #1051]	@ 0x41b
 800f75c:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800f75e:	4b1c      	ldr	r3, [pc, #112]	@ (800f7d0 <ProcessRadioTxDone+0x138>)
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800f764:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f768:	4618      	mov	r0, r3
 800f76a:	f00e f90b 	bl	801d984 <SysTimeGetMcuTime>
 800f76e:	4638      	mov	r0, r7
 800f770:	4b15      	ldr	r3, [pc, #84]	@ (800f7c8 <ProcessRadioTxDone+0x130>)
 800f772:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
 800f776:	9200      	str	r2, [sp, #0]
 800f778:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800f77c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800f780:	ca06      	ldmia	r2, {r1, r2}
 800f782:	f00e f860 	bl	801d846 <SysTimeSub>
 800f786:	f107 0314 	add.w	r3, r7, #20
 800f78a:	463a      	mov	r2, r7
 800f78c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f790:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800f794:	4b0f      	ldr	r3, [pc, #60]	@ (800f7d4 <ProcessRadioTxDone+0x13c>)
 800f796:	f8d3 341c 	ldr.w	r3, [r3, #1052]	@ 0x41c
 800f79a:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 800f79c:	2301      	movs	r3, #1
 800f79e:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800f7a0:	4b09      	ldr	r3, [pc, #36]	@ (800f7c8 <ProcessRadioTxDone+0x130>)
 800f7a2:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d101      	bne.n	800f7ae <ProcessRadioTxDone+0x116>
    {
        txDone.Joined  = false;
 800f7aa:	2300      	movs	r3, #0
 800f7ac:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800f7ae:	4b06      	ldr	r3, [pc, #24]	@ (800f7c8 <ProcessRadioTxDone+0x130>)
 800f7b0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800f7b4:	f107 0208 	add.w	r2, r7, #8
 800f7b8:	4611      	mov	r1, r2
 800f7ba:	4618      	mov	r0, r3
 800f7bc:	f006 fe9b 	bl	80164f6 <RegionSetBandTxDone>
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    }
#endif /* LORAMAC_VERSION */
}
 800f7c0:	bf00      	nop
 800f7c2:	3740      	adds	r7, #64	@ 0x40
 800f7c4:	46bd      	mov	sp, r7
 800f7c6:	bd80      	pop	{r7, pc}
 800f7c8:	20000bfc 	.word	0x20000bfc
 800f7cc:	0801fccc 	.word	0x0801fccc
 800f7d0:	20001828 	.word	0x20001828
 800f7d4:	200006e0 	.word	0x200006e0
 800f7d8:	20000a60 	.word	0x20000a60
 800f7dc:	20000a78 	.word	0x20000a78
 800f7e0:	20000ae0 	.word	0x20000ae0

0800f7e4 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800f7e4:	b580      	push	{r7, lr}
 800f7e6:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800f7e8:	4b10      	ldr	r3, [pc, #64]	@ (800f82c <PrepareRxDoneAbort+0x48>)
 800f7ea:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f7ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f7f2:	4a0e      	ldr	r2, [pc, #56]	@ (800f82c <PrepareRxDoneAbort+0x48>)
 800f7f4:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    if( MacCtx.NodeAckRequested == true )
 800f7f8:	4b0c      	ldr	r3, [pc, #48]	@ (800f82c <PrepareRxDoneAbort+0x48>)
 800f7fa:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d002      	beq.n	800f808 <PrepareRxDoneAbort+0x24>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        OnAckTimeoutTimerEvent( NULL );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        OnRetransmitTimeoutTimerEvent( NULL );
 800f802:	2000      	movs	r0, #0
 800f804:	f001 f9fa 	bl	8010bfc <OnRetransmitTimeoutTimerEvent>
#endif /* LORAMAC_VERSION */
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800f808:	4a08      	ldr	r2, [pc, #32]	@ (800f82c <PrepareRxDoneAbort+0x48>)
 800f80a:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800f80e:	f043 0302 	orr.w	r3, r3, #2
 800f812:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    MacCtx.MacFlags.Bits.MacDone = 1;
 800f816:	4a05      	ldr	r2, [pc, #20]	@ (800f82c <PrepareRxDoneAbort+0x48>)
 800f818:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800f81c:	f043 0310 	orr.w	r3, r3, #16
 800f820:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491

    UpdateRxSlotIdleState( );
 800f824:	f7ff ff20 	bl	800f668 <UpdateRxSlotIdleState>
}
 800f828:	bf00      	nop
 800f82a:	bd80      	pop	{r7, pc}
 800f82c:	200006e0 	.word	0x200006e0

0800f830 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800f830:	b590      	push	{r4, r7, lr}
 800f832:	b0ab      	sub	sp, #172	@ 0xac
 800f834:	af02      	add	r7, sp, #8
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800f836:	2312      	movs	r3, #18
 800f838:	f887 3098 	strb.w	r3, [r7, #152]	@ 0x98

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800f83c:	4b81      	ldr	r3, [pc, #516]	@ (800fa44 <ProcessRadioRxDone+0x214>)
 800f83e:	685b      	ldr	r3, [r3, #4]
 800f840:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    uint16_t size = RxDoneParams.Size;
 800f844:	4b7f      	ldr	r3, [pc, #508]	@ (800fa44 <ProcessRadioRxDone+0x214>)
 800f846:	891b      	ldrh	r3, [r3, #8]
 800f848:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
    int16_t rssi = RxDoneParams.Rssi;
 800f84c:	4b7d      	ldr	r3, [pc, #500]	@ (800fa44 <ProcessRadioRxDone+0x214>)
 800f84e:	895b      	ldrh	r3, [r3, #10]
 800f850:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
    int8_t snr = RxDoneParams.Snr;
 800f854:	4b7b      	ldr	r3, [pc, #492]	@ (800fa44 <ProcessRadioRxDone+0x214>)
 800f856:	7b1b      	ldrb	r3, [r3, #12]
 800f858:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f

    uint8_t pktHeaderLen = 0;
 800f85c:	2300      	movs	r3, #0
 800f85e:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e

    uint32_t downLinkCounter = 0;
 800f862:	2300      	movs	r3, #0
 800f864:	617b      	str	r3, [r7, #20]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800f866:	4b78      	ldr	r3, [pc, #480]	@ (800fa48 <ProcessRadioRxDone+0x218>)
 800f868:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800f86c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    uint8_t multicast = 0;
 800f870:	2300      	movs	r3, #0
 800f872:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800f876:	2301      	movs	r3, #1
 800f878:	f887 309a 	strb.w	r3, [r7, #154]	@ 0x9a
    FCntIdentifier_t fCntID;
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    uint8_t macCmdPayload[2] = { 0 };
#endif /* LORAMAC_VERSION */
    Mlme_t joinType = MLME_JOIN;
 800f87c:	2301      	movs	r3, #1
 800f87e:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 800f882:	4a72      	ldr	r2, [pc, #456]	@ (800fa4c <ProcessRadioRxDone+0x21c>)
 800f884:	7813      	ldrb	r3, [r2, #0]
 800f886:	f36f 0300 	bfc	r3, #0, #1
 800f88a:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    MacCtx.McpsConfirm.AckReceived = false;
 800f88c:	4b70      	ldr	r3, [pc, #448]	@ (800fa50 <ProcessRadioRxDone+0x220>)
 800f88e:	2200      	movs	r2, #0
 800f890:	f883 2444 	strb.w	r2, [r3, #1092]	@ 0x444
    MacCtx.RxStatus.Rssi = rssi;
 800f894:	4a6e      	ldr	r2, [pc, #440]	@ (800fa50 <ProcessRadioRxDone+0x220>)
 800f896:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 800f89a:	f8a2 348c 	strh.w	r3, [r2, #1164]	@ 0x48c
    MacCtx.RxStatus.Snr = snr;
 800f89e:	4a6c      	ldr	r2, [pc, #432]	@ (800fa50 <ProcessRadioRxDone+0x220>)
 800f8a0:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800f8a4:	f882 348e 	strb.w	r3, [r2, #1166]	@ 0x48e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800f8a8:	4b69      	ldr	r3, [pc, #420]	@ (800fa50 <ProcessRadioRxDone+0x220>)
 800f8aa:	f893 2490 	ldrb.w	r2, [r3, #1168]	@ 0x490
 800f8ae:	4b68      	ldr	r3, [pc, #416]	@ (800fa50 <ProcessRadioRxDone+0x220>)
 800f8b0:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
    MacCtx.McpsIndication.Port = 0;
 800f8b4:	4b66      	ldr	r3, [pc, #408]	@ (800fa50 <ProcessRadioRxDone+0x220>)
 800f8b6:	2200      	movs	r2, #0
 800f8b8:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
    MacCtx.McpsIndication.Multicast = 0;
 800f8bc:	4b64      	ldr	r3, [pc, #400]	@ (800fa50 <ProcessRadioRxDone+0x220>)
 800f8be:	2200      	movs	r2, #0
 800f8c0:	f883 2422 	strb.w	r2, [r3, #1058]	@ 0x422
    MacCtx.McpsIndication.IsUplinkTxPending = 0;
 800f8c4:	4b62      	ldr	r3, [pc, #392]	@ (800fa50 <ProcessRadioRxDone+0x220>)
 800f8c6:	2200      	movs	r2, #0
 800f8c8:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
    MacCtx.McpsIndication.Buffer = NULL;
 800f8cc:	4b60      	ldr	r3, [pc, #384]	@ (800fa50 <ProcessRadioRxDone+0x220>)
 800f8ce:	2200      	movs	r2, #0
 800f8d0:	f8c3 2428 	str.w	r2, [r3, #1064]	@ 0x428
    MacCtx.McpsIndication.BufferSize = 0;
 800f8d4:	4b5e      	ldr	r3, [pc, #376]	@ (800fa50 <ProcessRadioRxDone+0x220>)
 800f8d6:	2200      	movs	r2, #0
 800f8d8:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c
    MacCtx.McpsIndication.RxData = false;
 800f8dc:	4b5c      	ldr	r3, [pc, #368]	@ (800fa50 <ProcessRadioRxDone+0x220>)
 800f8de:	2200      	movs	r2, #0
 800f8e0:	f883 242d 	strb.w	r2, [r3, #1069]	@ 0x42d
    MacCtx.McpsIndication.AckReceived = false;
 800f8e4:	4b5a      	ldr	r3, [pc, #360]	@ (800fa50 <ProcessRadioRxDone+0x220>)
 800f8e6:	2200      	movs	r2, #0
 800f8e8:	f883 242e 	strb.w	r2, [r3, #1070]	@ 0x42e
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800f8ec:	4b58      	ldr	r3, [pc, #352]	@ (800fa50 <ProcessRadioRxDone+0x220>)
 800f8ee:	2200      	movs	r2, #0
 800f8f0:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800f8f4:	4b56      	ldr	r3, [pc, #344]	@ (800fa50 <ProcessRadioRxDone+0x220>)
 800f8f6:	2200      	movs	r2, #0
 800f8f8:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
    MacCtx.McpsIndication.DevAddress = 0;
 800f8fc:	4b54      	ldr	r3, [pc, #336]	@ (800fa50 <ProcessRadioRxDone+0x220>)
 800f8fe:	2200      	movs	r2, #0
 800f900:	f8c3 2434 	str.w	r2, [r3, #1076]	@ 0x434
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800f904:	4b52      	ldr	r3, [pc, #328]	@ (800fa50 <ProcessRadioRxDone+0x220>)
 800f906:	2200      	movs	r2, #0
 800f908:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.McpsIndication.ResponseTimeout = 0;
 800f90c:	4b50      	ldr	r3, [pc, #320]	@ (800fa50 <ProcessRadioRxDone+0x220>)
 800f90e:	2200      	movs	r2, #0
 800f910:	f8c3 243c 	str.w	r2, [r3, #1084]	@ 0x43c
#endif /* LORAMAC_VERSION */

    Radio.Sleep( );
 800f914:	4b4f      	ldr	r3, [pc, #316]	@ (800fa54 <ProcessRadioRxDone+0x224>)
 800f916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f918:	4798      	blx	r3

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.RxWindowTimer2 );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 800f91a:	4b4d      	ldr	r3, [pc, #308]	@ (800fa50 <ProcessRadioRxDone+0x220>)
 800f91c:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800f920:	2b00      	cmp	r3, #0
 800f922:	d102      	bne.n	800f92a <ProcessRadioRxDone+0xfa>
    {
        TimerStop( &MacCtx.RxWindowTimer2 );
 800f924:	484c      	ldr	r0, [pc, #304]	@ (800fa58 <ProcessRadioRxDone+0x228>)
 800f926:	f00e fd5b 	bl	801e3e0 <UTIL_TIMER_Stop>
    }
#endif /* LORAMAC_VERSION */

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800f92a:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800f92e:	4619      	mov	r1, r3
 800f930:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 800f934:	f004 fe34 	bl	80145a0 <LoRaMacClassBRxBeacon>
 800f938:	4603      	mov	r3, r0
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d00b      	beq.n	800f956 <ProcessRadioRxDone+0x126>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800f93e:	4a44      	ldr	r2, [pc, #272]	@ (800fa50 <ProcessRadioRxDone+0x220>)
 800f940:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 800f944:	f8a2 347e 	strh.w	r3, [r2, #1150]	@ 0x47e
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800f948:	4a41      	ldr	r2, [pc, #260]	@ (800fa50 <ProcessRadioRxDone+0x220>)
 800f94a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800f94e:	f882 3480 	strb.w	r3, [r2, #1152]	@ 0x480
        return;
 800f952:	f000 bc75 	b.w	8010240 <ProcessRadioRxDone+0xa10>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800f956:	4b3c      	ldr	r3, [pc, #240]	@ (800fa48 <ProcessRadioRxDone+0x218>)
 800f958:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800f95c:	2b01      	cmp	r3, #1
 800f95e:	d11e      	bne.n	800f99e <ProcessRadioRxDone+0x16e>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800f960:	f004 fe31 	bl	80145c6 <LoRaMacClassBIsPingExpected>
 800f964:	4603      	mov	r3, r0
 800f966:	2b00      	cmp	r3, #0
 800f968:	d00a      	beq.n	800f980 <ProcessRadioRxDone+0x150>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800f96a:	2000      	movs	r0, #0
 800f96c:	f004 fde2 	bl	8014534 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800f970:	2000      	movs	r0, #0
 800f972:	f004 fe03 	bl	801457c <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800f976:	4b36      	ldr	r3, [pc, #216]	@ (800fa50 <ProcessRadioRxDone+0x220>)
 800f978:	2204      	movs	r2, #4
 800f97a:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
 800f97e:	e00e      	b.n	800f99e <ProcessRadioRxDone+0x16e>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800f980:	f004 fe28 	bl	80145d4 <LoRaMacClassBIsMulticastExpected>
 800f984:	4603      	mov	r3, r0
 800f986:	2b00      	cmp	r3, #0
 800f988:	d009      	beq.n	800f99e <ProcessRadioRxDone+0x16e>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800f98a:	2000      	movs	r0, #0
 800f98c:	f004 fddc 	bl	8014548 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800f990:	2000      	movs	r0, #0
 800f992:	f004 fdfc 	bl	801458e <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800f996:	4b2e      	ldr	r3, [pc, #184]	@ (800fa50 <ProcessRadioRxDone+0x220>)
 800f998:	2205      	movs	r2, #5
 800f99a:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
        }
    }

    // Abort on empty radio frames
    if( size == 0 )
 800f99e:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d107      	bne.n	800f9b6 <ProcessRadioRxDone+0x186>
    {
        MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f9a6:	4b2a      	ldr	r3, [pc, #168]	@ (800fa50 <ProcessRadioRxDone+0x220>)
 800f9a8:	2201      	movs	r2, #1
 800f9aa:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
        PrepareRxDoneAbort( );
 800f9ae:	f7ff ff19 	bl	800f7e4 <PrepareRxDoneAbort>
        return;
 800f9b2:	f000 bc45 	b.w	8010240 <ProcessRadioRxDone+0xa10>
    }

    macHdr.Value = payload[pktHeaderLen++];
 800f9b6:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 800f9ba:	1c5a      	adds	r2, r3, #1
 800f9bc:	f887 208e 	strb.w	r2, [r7, #142]	@ 0x8e
 800f9c0:	461a      	mov	r2, r3
 800f9c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800f9c6:	4413      	add	r3, r2
 800f9c8:	781b      	ldrb	r3, [r3, #0]
 800f9ca:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
        PrepareRxDoneAbort( );
        return;
    }
#endif /* LORAMAC_VERSION */

    switch( macHdr.Bits.MType )
 800f9ce:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 800f9d2:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800f9d6:	b2db      	uxtb	r3, r3
 800f9d8:	3b01      	subs	r3, #1
 800f9da:	2b06      	cmp	r3, #6
 800f9dc:	f200 8403 	bhi.w	80101e6 <ProcessRadioRxDone+0x9b6>
 800f9e0:	a201      	add	r2, pc, #4	@ (adr r2, 800f9e8 <ProcessRadioRxDone+0x1b8>)
 800f9e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9e6:	bf00      	nop
 800f9e8:	0800fa05 	.word	0x0800fa05
 800f9ec:	080101e7 	.word	0x080101e7
 800f9f0:	0800fc03 	.word	0x0800fc03
 800f9f4:	080101e7 	.word	0x080101e7
 800f9f8:	0800fbfb 	.word	0x0800fbfb
 800f9fc:	080101e7 	.word	0x080101e7
 800fa00:	0801018b 	.word	0x0801018b
    {
        case FRAME_TYPE_JOIN_ACCEPT:
        {
            uint8_t joinEui[SE_EUI_SIZE];
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800fa04:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800fa08:	2b10      	cmp	r3, #16
 800fa0a:	d807      	bhi.n	800fa1c <ProcessRadioRxDone+0x1ec>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fa0c:	4b10      	ldr	r3, [pc, #64]	@ (800fa50 <ProcessRadioRxDone+0x220>)
 800fa0e:	2201      	movs	r2, #1
 800fa10:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800fa14:	f7ff fee6 	bl	800f7e4 <PrepareRxDoneAbort>
                return;
 800fa18:	f000 bc12 	b.w	8010240 <ProcessRadioRxDone+0xa10>
            }
            macMsgJoinAccept.Buffer = payload;
 800fa1c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800fa20:	61bb      	str	r3, [r7, #24]
            macMsgJoinAccept.BufSize = size;
 800fa22:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800fa26:	b2db      	uxtb	r3, r3
 800fa28:	773b      	strb	r3, [r7, #28]

            // Abort in case if the device is already joined and no rejoin request is ongoing.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
            if( ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) && ( Nvm.MacGroup2.IsRejoinAcceptPending == false ) )
#else
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800fa2a:	4b07      	ldr	r3, [pc, #28]	@ (800fa48 <ProcessRadioRxDone+0x218>)
 800fa2c:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d013      	beq.n	800fa5c <ProcessRadioRxDone+0x22c>
#endif /* LORAMAC_VERSION */
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fa34:	4b06      	ldr	r3, [pc, #24]	@ (800fa50 <ProcessRadioRxDone+0x220>)
 800fa36:	2201      	movs	r2, #1
 800fa38:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800fa3c:	f7ff fed2 	bl	800f7e4 <PrepareRxDoneAbort>
                return;
 800fa40:	e3fe      	b.n	8010240 <ProcessRadioRxDone+0xa10>
 800fa42:	bf00      	nop
 800fa44:	2000182c 	.word	0x2000182c
 800fa48:	20000bfc 	.word	0x20000bfc
 800fa4c:	20001824 	.word	0x20001824
 800fa50:	200006e0 	.word	0x200006e0
 800fa54:	0801fccc 	.word	0x0801fccc
 800fa58:	20000a78 	.word	0x20000a78
            }

            SecureElementGetJoinEui( joinEui );
 800fa5c:	f107 0308 	add.w	r3, r7, #8
 800fa60:	4618      	mov	r0, r3
 800fa62:	f7fd ff7d 	bl	800d960 <SecureElementGetJoinEui>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, joinEui, &macMsgJoinAccept );
 800fa66:	f107 0218 	add.w	r2, r7, #24
 800fa6a:	f107 0308 	add.w	r3, r7, #8
 800fa6e:	4619      	mov	r1, r3
 800fa70:	20ff      	movs	r0, #255	@ 0xff
 800fa72:	f005 ffa1 	bl	80159b8 <LoRaMacCryptoHandleJoinAccept>
 800fa76:	4603      	mov	r3, r0
 800fa78:	f887 3098 	strb.w	r3, [r7, #152]	@ 0x98
                joinType = MLME_REJOIN_2;
            }
#endif /* LORAMAC_VERSION */

            VerifyParams_t verifyRxDr;
            bool rxDrValid = false;
 800fa7c:	2300      	movs	r3, #0
 800fa7e:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
            verifyRxDr.DatarateParams.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800fa82:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800fa86:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800fa8a:	b2db      	uxtb	r3, r3
 800fa8c:	b25b      	sxtb	r3, r3
 800fa8e:	713b      	strb	r3, [r7, #4]
            verifyRxDr.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800fa90:	4bb1      	ldr	r3, [pc, #708]	@ (800fd58 <ProcessRadioRxDone+0x528>)
 800fa92:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800fa96:	717b      	strb	r3, [r7, #5]
            rxDrValid = RegionVerify( Nvm.MacGroup2.Region, &verifyRxDr, PHY_RX_DR );
 800fa98:	4baf      	ldr	r3, [pc, #700]	@ (800fd58 <ProcessRadioRxDone+0x528>)
 800fa9a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800fa9e:	1d39      	adds	r1, r7, #4
 800faa0:	2207      	movs	r2, #7
 800faa2:	4618      	mov	r0, r3
 800faa4:	f006 fd54 	bl	8016550 <RegionVerify>
 800faa8:	4603      	mov	r3, r0
 800faaa:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c

            if( ( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus ) && ( rxDrValid == true ) )
 800faae:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	f040 8095 	bne.w	800fbe2 <ProcessRadioRxDone+0x3b2>
 800fab8:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	f000 8090 	beq.w	800fbe2 <ProcessRadioRxDone+0x3b2>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800fac2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800fac6:	461a      	mov	r2, r3
 800fac8:	4ba3      	ldr	r3, [pc, #652]	@ (800fd58 <ProcessRadioRxDone+0x528>)
 800faca:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800face:	4ba2      	ldr	r3, [pc, #648]	@ (800fd58 <ProcessRadioRxDone+0x528>)
 800fad0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800fad4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800fad8:	021b      	lsls	r3, r3, #8
 800fada:	4313      	orrs	r3, r2
 800fadc:	4a9e      	ldr	r2, [pc, #632]	@ (800fd58 <ProcessRadioRxDone+0x528>)
 800fade:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800fae2:	4b9d      	ldr	r3, [pc, #628]	@ (800fd58 <ProcessRadioRxDone+0x528>)
 800fae4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800fae8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800faec:	041b      	lsls	r3, r3, #16
 800faee:	4313      	orrs	r3, r2
 800faf0:	4a99      	ldr	r2, [pc, #612]	@ (800fd58 <ProcessRadioRxDone+0x528>)
 800faf2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800faf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800faf8:	4a97      	ldr	r2, [pc, #604]	@ (800fd58 <ProcessRadioRxDone+0x528>)
 800fafa:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                // Update NVM DevAddrOTAA with network value
                SecureElementSetDevAddr( ACTIVATION_TYPE_OTAA, Nvm.MacGroup2.DevAddr );
 800fafe:	4b96      	ldr	r3, [pc, #600]	@ (800fd58 <ProcessRadioRxDone+0x528>)
 800fb00:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800fb04:	4619      	mov	r1, r3
 800fb06:	2002      	movs	r0, #2
 800fb08:	f7fd ff42 	bl	800d990 <SecureElementSetDevAddr>

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800fb0c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800fb10:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800fb14:	b2db      	uxtb	r3, r3
 800fb16:	461a      	mov	r2, r3
 800fb18:	4b8f      	ldr	r3, [pc, #572]	@ (800fd58 <ProcessRadioRxDone+0x528>)
 800fb1a:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800fb1e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800fb22:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800fb26:	b2db      	uxtb	r3, r3
 800fb28:	461a      	mov	r2, r3
 800fb2a:	4b8b      	ldr	r3, [pc, #556]	@ (800fd58 <ProcessRadioRxDone+0x528>)
 800fb2c:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800fb30:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800fb34:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800fb38:	b2db      	uxtb	r3, r3
 800fb3a:	461a      	mov	r2, r3
 800fb3c:	4b86      	ldr	r3, [pc, #536]	@ (800fd58 <ProcessRadioRxDone+0x528>)
 800fb3e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800fb42:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800fb46:	461a      	mov	r2, r3
 800fb48:	4b83      	ldr	r3, [pc, #524]	@ (800fd58 <ProcessRadioRxDone+0x528>)
 800fb4a:	659a      	str	r2, [r3, #88]	@ 0x58
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800fb4c:	4b82      	ldr	r3, [pc, #520]	@ (800fd58 <ProcessRadioRxDone+0x528>)
 800fb4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d102      	bne.n	800fb5a <ProcessRadioRxDone+0x32a>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800fb54:	4b80      	ldr	r3, [pc, #512]	@ (800fd58 <ProcessRadioRxDone+0x528>)
 800fb56:	2201      	movs	r2, #1
 800fb58:	659a      	str	r2, [r3, #88]	@ 0x58
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800fb5a:	4b7f      	ldr	r3, [pc, #508]	@ (800fd58 <ProcessRadioRxDone+0x528>)
 800fb5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fb5e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800fb62:	fb02 f303 	mul.w	r3, r2, r3
 800fb66:	4a7c      	ldr	r2, [pc, #496]	@ (800fd58 <ProcessRadioRxDone+0x528>)
 800fb68:	6593      	str	r3, [r2, #88]	@ 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800fb6a:	4b7b      	ldr	r3, [pc, #492]	@ (800fd58 <ProcessRadioRxDone+0x528>)
 800fb6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fb6e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800fb72:	4a79      	ldr	r2, [pc, #484]	@ (800fd58 <ProcessRadioRxDone+0x528>)
 800fb74:	65d3      	str	r3, [r2, #92]	@ 0x5c

                // Reset NbTrans to default value
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = 1;
 800fb76:	4b78      	ldr	r3, [pc, #480]	@ (800fd58 <ProcessRadioRxDone+0x528>)
 800fb78:	2201      	movs	r2, #1
 800fb7a:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
                else
                {
                    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
                }
#else
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800fb7e:	4b76      	ldr	r3, [pc, #472]	@ (800fd58 <ProcessRadioRxDone+0x528>)
 800fb80:	2200      	movs	r2, #0
 800fb82:	f883 212e 	strb.w	r2, [r3, #302]	@ 0x12e
#endif /* LORAMAC_VERSION */

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800fb86:	f107 0318 	add.w	r3, r7, #24
 800fb8a:	3312      	adds	r3, #18
 800fb8c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800fb90:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800fb94:	b2db      	uxtb	r3, r3
 800fb96:	3b11      	subs	r3, #17
 800fb98:	b2db      	uxtb	r3, r3
 800fb9a:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                // Apply the last tx channel
                applyCFList.JoinChannel = MacCtx.Channel;
 800fb9e:	4b6f      	ldr	r3, [pc, #444]	@ (800fd5c <ProcessRadioRxDone+0x52c>)
 800fba0:	f893 341b 	ldrb.w	r3, [r3, #1051]	@ 0x41b
 800fba4:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
#endif /* LORAMAC_VERSION */

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800fba8:	4b6b      	ldr	r3, [pc, #428]	@ (800fd58 <ProcessRadioRxDone+0x528>)
 800fbaa:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800fbae:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 800fbb2:	4611      	mov	r1, r2
 800fbb4:	4618      	mov	r0, r3
 800fbb6:	f006 fcec 	bl	8016592 <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800fbba:	4b67      	ldr	r3, [pc, #412]	@ (800fd58 <ProcessRadioRxDone+0x528>)
 800fbbc:	2202      	movs	r2, #2
 800fbbe:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    LoRaMacCommandsAddCmd( MOTE_MAC_REKEY_IND, macCmdPayload, 1 );
                }
#endif /* LORAMAC_VERSION */

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 800fbc2:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800fbc6:	4618      	mov	r0, r3
 800fbc8:	f005 fa00 	bl	8014fcc <LoRaMacConfirmQueueIsCmdActive>
 800fbcc:	4603      	mov	r3, r0
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	f000 8311 	beq.w	80101f6 <ProcessRadioRxDone+0x9c6>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, joinType );
 800fbd4:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800fbd8:	4619      	mov	r1, r3
 800fbda:	2000      	movs	r0, #0
 800fbdc:	f005 f96a 	bl	8014eb4 <LoRaMacConfirmQueueSetStatus>
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 800fbe0:	e309      	b.n	80101f6 <ProcessRadioRxDone+0x9c6>
#endif /* LORAMAC_VERSION */
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800fbe2:	2001      	movs	r0, #1
 800fbe4:	f005 f9f2 	bl	8014fcc <LoRaMacConfirmQueueIsCmdActive>
 800fbe8:	4603      	mov	r3, r0
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	f000 8302 	beq.w	80101f4 <ProcessRadioRxDone+0x9c4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800fbf0:	2101      	movs	r1, #1
 800fbf2:	2007      	movs	r0, #7
 800fbf4:	f005 f95e 	bl	8014eb4 <LoRaMacConfirmQueueSetStatus>
                }
            }

            break;
 800fbf8:	e2fc      	b.n	80101f4 <ProcessRadioRxDone+0x9c4>
        }
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800fbfa:	4b58      	ldr	r3, [pc, #352]	@ (800fd5c <ProcessRadioRxDone+0x52c>)
 800fbfc:	2201      	movs	r2, #1
 800fbfe:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800fc02:	4b55      	ldr	r3, [pc, #340]	@ (800fd58 <ProcessRadioRxDone+0x528>)
 800fc04:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800fc08:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800fc0c:	4b53      	ldr	r3, [pc, #332]	@ (800fd5c <ProcessRadioRxDone+0x52c>)
 800fc0e:	f893 3424 	ldrb.w	r3, [r3, #1060]	@ 0x424
 800fc12:	b25b      	sxtb	r3, r3
 800fc14:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800fc18:	230d      	movs	r3, #13
 800fc1a:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74

            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800fc1e:	4b4e      	ldr	r3, [pc, #312]	@ (800fd58 <ProcessRadioRxDone+0x528>)
 800fc20:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d002      	beq.n	800fc2e <ProcessRadioRxDone+0x3fe>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800fc28:	230e      	movs	r3, #14
 800fc2a:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
            }

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800fc2e:	4b4a      	ldr	r3, [pc, #296]	@ (800fd58 <ProcessRadioRxDone+0x528>)
 800fc30:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800fc34:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 800fc38:	4611      	mov	r1, r2
 800fc3a:	4618      	mov	r0, r3
 800fc3c:	f006 fc3a 	bl	80164b4 <RegionGetPhyParam>
 800fc40:	4603      	mov	r3, r0
 800fc42:	673b      	str	r3, [r7, #112]	@ 0x70
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800fc44:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800fc48:	3b0d      	subs	r3, #13
 800fc4a:	b29b      	uxth	r3, r3
 800fc4c:	b21b      	sxth	r3, r3
 800fc4e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800fc52:	b21a      	sxth	r2, r3
 800fc54:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800fc56:	b21b      	sxth	r3, r3
 800fc58:	429a      	cmp	r2, r3
 800fc5a:	dc03      	bgt.n	800fc64 <ProcessRadioRxDone+0x434>
 800fc5c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800fc60:	2b0b      	cmp	r3, #11
 800fc62:	d806      	bhi.n	800fc72 <ProcessRadioRxDone+0x442>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fc64:	4b3d      	ldr	r3, [pc, #244]	@ (800fd5c <ProcessRadioRxDone+0x52c>)
 800fc66:	2201      	movs	r2, #1
 800fc68:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800fc6c:	f7ff fdba 	bl	800f7e4 <PrepareRxDoneAbort>
                return;
 800fc70:	e2e6      	b.n	8010240 <ProcessRadioRxDone+0xa10>
            }
            macMsgData.Buffer = payload;
 800fc72:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800fc76:	643b      	str	r3, [r7, #64]	@ 0x40
            macMsgData.BufSize = size;
 800fc78:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800fc7c:	b2db      	uxtb	r3, r3
 800fc7e:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800fc82:	4b37      	ldr	r3, [pc, #220]	@ (800fd60 <ProcessRadioRxDone+0x530>)
 800fc84:	667b      	str	r3, [r7, #100]	@ 0x64
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800fc86:	23ff      	movs	r3, #255	@ 0xff
 800fc88:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800fc8c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800fc90:	4618      	mov	r0, r3
 800fc92:	f006 f991 	bl	8015fb8 <LoRaMacParserData>
 800fc96:	4603      	mov	r3, r0
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d006      	beq.n	800fcaa <ProcessRadioRxDone+0x47a>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fc9c:	4b2f      	ldr	r3, [pc, #188]	@ (800fd5c <ProcessRadioRxDone+0x52c>)
 800fc9e:	2201      	movs	r2, #1
 800fca0:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800fca4:	f7ff fd9e 	bl	800f7e4 <PrepareRxDoneAbort>
                return;
 800fca8:	e2ca      	b.n	8010240 <ProcessRadioRxDone+0xa10>
            }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            // Handle Class B
            // Check if we expect a ping or a multicast slot.
            if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800fcaa:	4b2b      	ldr	r3, [pc, #172]	@ (800fd58 <ProcessRadioRxDone+0x528>)
 800fcac:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800fcb0:	2b01      	cmp	r3, #1
 800fcb2:	d132      	bne.n	800fd1a <ProcessRadioRxDone+0x4ea>
            {
                if( LoRaMacClassBIsPingExpected( ) == true )
 800fcb4:	f004 fc87 	bl	80145c6 <LoRaMacClassBIsPingExpected>
 800fcb8:	4603      	mov	r3, r0
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d014      	beq.n	800fce8 <ProcessRadioRxDone+0x4b8>
                {
                    LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800fcbe:	2000      	movs	r0, #0
 800fcc0:	f004 fc38 	bl	8014534 <LoRaMacClassBSetPingSlotState>
                    LoRaMacClassBPingSlotTimerEvent( NULL );
 800fcc4:	2000      	movs	r0, #0
 800fcc6:	f004 fc59 	bl	801457c <LoRaMacClassBPingSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800fcca:	4b24      	ldr	r3, [pc, #144]	@ (800fd5c <ProcessRadioRxDone+0x52c>)
 800fccc:	2204      	movs	r2, #4
 800fcce:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800fcd2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fcd4:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800fcd8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800fcdc:	b2db      	uxtb	r3, r3
 800fcde:	4619      	mov	r1, r3
 800fce0:	4610      	mov	r0, r2
 800fce2:	f004 fcf9 	bl	80146d8 <LoRaMacClassBSetFPendingBit>
 800fce6:	e018      	b.n	800fd1a <ProcessRadioRxDone+0x4ea>
                }
                else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800fce8:	f004 fc74 	bl	80145d4 <LoRaMacClassBIsMulticastExpected>
 800fcec:	4603      	mov	r3, r0
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d013      	beq.n	800fd1a <ProcessRadioRxDone+0x4ea>
                {
                    LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800fcf2:	2000      	movs	r0, #0
 800fcf4:	f004 fc28 	bl	8014548 <LoRaMacClassBSetMulticastSlotState>
                    LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800fcf8:	2000      	movs	r0, #0
 800fcfa:	f004 fc48 	bl	801458e <LoRaMacClassBMulticastSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800fcfe:	4b17      	ldr	r3, [pc, #92]	@ (800fd5c <ProcessRadioRxDone+0x52c>)
 800fd00:	2205      	movs	r2, #5
 800fd02:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800fd06:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fd08:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800fd0c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800fd10:	b2db      	uxtb	r3, r3
 800fd12:	4619      	mov	r1, r3
 800fd14:	4610      	mov	r0, r2
 800fd16:	f004 fcdf 	bl	80146d8 <LoRaMacClassBSetFPendingBit>
                }
            }
#endif /* LORAMAC_VERSION */

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800fd1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fd1c:	4a0f      	ldr	r2, [pc, #60]	@ (800fd5c <ProcessRadioRxDone+0x52c>)
 800fd1e:	f8c2 3434 	str.w	r3, [r2, #1076]	@ 0x434

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800fd22:	f107 0212 	add.w	r2, r7, #18
 800fd26:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800fd2a:	4611      	mov	r1, r2
 800fd2c:	4618      	mov	r0, r3
 800fd2e:	f002 fd8d 	bl	801284c <DetermineFrameType>
 800fd32:	4603      	mov	r3, r0
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d006      	beq.n	800fd46 <ProcessRadioRxDone+0x516>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fd38:	4b08      	ldr	r3, [pc, #32]	@ (800fd5c <ProcessRadioRxDone+0x52c>)
 800fd3a:	2201      	movs	r2, #1
 800fd3c:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800fd40:	f7ff fd50 	bl	800f7e4 <PrepareRxDoneAbort>
                return;
 800fd44:	e27c      	b.n	8010240 <ProcessRadioRxDone+0xa10>
            }

            //Check if it is a multicast message
            multicast = 0;
 800fd46:	2300      	movs	r3, #0
 800fd48:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b
            downLinkCounter = 0;
 800fd4c:	2300      	movs	r3, #0
 800fd4e:	617b      	str	r3, [r7, #20]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800fd50:	2300      	movs	r3, #0
 800fd52:	f887 3099 	strb.w	r3, [r7, #153]	@ 0x99
 800fd56:	e055      	b.n	800fe04 <ProcessRadioRxDone+0x5d4>
 800fd58:	20000bfc 	.word	0x20000bfc
 800fd5c:	200006e0 	.word	0x200006e0
 800fd60:	20000918 	.word	0x20000918
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800fd64:	f897 2099 	ldrb.w	r2, [r7, #153]	@ 0x99
 800fd68:	499f      	ldr	r1, [pc, #636]	@ (800ffe8 <ProcessRadioRxDone+0x7b8>)
 800fd6a:	4613      	mov	r3, r2
 800fd6c:	005b      	lsls	r3, r3, #1
 800fd6e:	4413      	add	r3, r2
 800fd70:	011b      	lsls	r3, r3, #4
 800fd72:	440b      	add	r3, r1
 800fd74:	33ec      	adds	r3, #236	@ 0xec
 800fd76:	681a      	ldr	r2, [r3, #0]
 800fd78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fd7a:	429a      	cmp	r2, r3
 800fd7c:	d13d      	bne.n	800fdfa <ProcessRadioRxDone+0x5ca>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800fd7e:	f897 2099 	ldrb.w	r2, [r7, #153]	@ 0x99
 800fd82:	4999      	ldr	r1, [pc, #612]	@ (800ffe8 <ProcessRadioRxDone+0x7b8>)
 800fd84:	4613      	mov	r3, r2
 800fd86:	005b      	lsls	r3, r3, #1
 800fd88:	4413      	add	r3, r2
 800fd8a:	011b      	lsls	r3, r3, #4
 800fd8c:	440b      	add	r3, r1
 800fd8e:	33e9      	adds	r3, #233	@ 0xe9
 800fd90:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d031      	beq.n	800fdfa <ProcessRadioRxDone+0x5ca>
                {
                    multicast = 1;
 800fd96:	2301      	movs	r3, #1
 800fd98:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800fd9c:	f897 2099 	ldrb.w	r2, [r7, #153]	@ 0x99
 800fda0:	4991      	ldr	r1, [pc, #580]	@ (800ffe8 <ProcessRadioRxDone+0x7b8>)
 800fda2:	4613      	mov	r3, r2
 800fda4:	005b      	lsls	r3, r3, #1
 800fda6:	4413      	add	r3, r2
 800fda8:	011b      	lsls	r3, r3, #4
 800fdaa:	440b      	add	r3, r1
 800fdac:	33ea      	adds	r3, #234	@ 0xea
 800fdae:	781b      	ldrb	r3, [r3, #0]
 800fdb0:	f887 309a 	strb.w	r3, [r7, #154]	@ 0x9a
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800fdb4:	f897 2099 	ldrb.w	r2, [r7, #153]	@ 0x99
 800fdb8:	498b      	ldr	r1, [pc, #556]	@ (800ffe8 <ProcessRadioRxDone+0x7b8>)
 800fdba:	4613      	mov	r3, r2
 800fdbc:	005b      	lsls	r3, r3, #1
 800fdbe:	4413      	add	r3, r2
 800fdc0:	011b      	lsls	r3, r3, #4
 800fdc2:	440b      	add	r3, r1
 800fdc4:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	617b      	str	r3, [r7, #20]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800fdce:	f897 2099 	ldrb.w	r2, [r7, #153]	@ 0x99
 800fdd2:	4985      	ldr	r1, [pc, #532]	@ (800ffe8 <ProcessRadioRxDone+0x7b8>)
 800fdd4:	4613      	mov	r3, r2
 800fdd6:	005b      	lsls	r3, r3, #1
 800fdd8:	4413      	add	r3, r2
 800fdda:	011b      	lsls	r3, r3, #4
 800fddc:	440b      	add	r3, r1
 800fdde:	33ec      	adds	r3, #236	@ 0xec
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800fde6:	4b80      	ldr	r3, [pc, #512]	@ (800ffe8 <ProcessRadioRxDone+0x7b8>)
 800fde8:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800fdec:	2b02      	cmp	r3, #2
 800fdee:	d10e      	bne.n	800fe0e <ProcessRadioRxDone+0x5de>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800fdf0:	4b7e      	ldr	r3, [pc, #504]	@ (800ffec <ProcessRadioRxDone+0x7bc>)
 800fdf2:	2203      	movs	r2, #3
 800fdf4:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
                    }
                    break;
 800fdf8:	e009      	b.n	800fe0e <ProcessRadioRxDone+0x5de>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800fdfa:	f897 3099 	ldrb.w	r3, [r7, #153]	@ 0x99
 800fdfe:	3301      	adds	r3, #1
 800fe00:	f887 3099 	strb.w	r3, [r7, #153]	@ 0x99
 800fe04:	f897 3099 	ldrb.w	r3, [r7, #153]	@ 0x99
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d0ab      	beq.n	800fd64 <ProcessRadioRxDone+0x534>
 800fe0c:	e000      	b.n	800fe10 <ProcessRadioRxDone+0x5e0>
                    break;
 800fe0e:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800fe10:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 800fe14:	2b01      	cmp	r3, #1
 800fe16:	d117      	bne.n	800fe48 <ProcessRadioRxDone+0x618>
 800fe18:	7cbb      	ldrb	r3, [r7, #18]
 800fe1a:	2b03      	cmp	r3, #3
 800fe1c:	d10d      	bne.n	800fe3a <ProcessRadioRxDone+0x60a>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800fe1e:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800fe22:	f003 0320 	and.w	r3, r3, #32
 800fe26:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d106      	bne.n	800fe3a <ProcessRadioRxDone+0x60a>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 800fe2c:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800fe30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fe34:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d006      	beq.n	800fe48 <ProcessRadioRxDone+0x618>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fe3a:	4b6c      	ldr	r3, [pc, #432]	@ (800ffec <ProcessRadioRxDone+0x7bc>)
 800fe3c:	2201      	movs	r2, #1
 800fe3e:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800fe42:	f7ff fccf 	bl	800f7e4 <PrepareRxDoneAbort>
                return;
 800fe46:	e1fb      	b.n	8010240 <ProcessRadioRxDone+0xa10>
                PrepareRxDoneAbort( );
                return;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
 800fe48:	7cb9      	ldrb	r1, [r7, #18]
 800fe4a:	4c67      	ldr	r4, [pc, #412]	@ (800ffe8 <ProcessRadioRxDone+0x7b8>)
 800fe4c:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800fe50:	f897 009a 	ldrb.w	r0, [r7, #154]	@ 0x9a
 800fe54:	f107 0314 	add.w	r3, r7, #20
 800fe58:	9301      	str	r3, [sp, #4]
 800fe5a:	f107 0313 	add.w	r3, r7, #19
 800fe5e:	9300      	str	r3, [sp, #0]
 800fe60:	f8d4 312c 	ldr.w	r3, [r4, #300]	@ 0x12c
 800fe64:	f000 fee4 	bl	8010c30 <GetFCntDown>
 800fe68:	4603      	mov	r3, r0
 800fe6a:	f887 3098 	strb.w	r3, [r7, #152]	@ 0x98
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800fe6e:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d017      	beq.n	800fea6 <ProcessRadioRxDone+0x676>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800fe76:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 800fe7a:	2b07      	cmp	r3, #7
 800fe7c:	d104      	bne.n	800fe88 <ProcessRadioRxDone+0x658>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800fe7e:	4b5b      	ldr	r3, [pc, #364]	@ (800ffec <ProcessRadioRxDone+0x7bc>)
 800fe80:	2208      	movs	r2, #8
 800fe82:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
 800fe86:	e003      	b.n	800fe90 <ProcessRadioRxDone+0x660>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fe88:	4b58      	ldr	r3, [pc, #352]	@ (800ffec <ProcessRadioRxDone+0x7bc>)
 800fe8a:	2201      	movs	r2, #1
 800fe8c:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800fe90:	697b      	ldr	r3, [r7, #20]
 800fe92:	4a56      	ldr	r2, [pc, #344]	@ (800ffec <ProcessRadioRxDone+0x7bc>)
 800fe94:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800fe98:	697b      	ldr	r3, [r7, #20]
 800fe9a:	4a54      	ldr	r2, [pc, #336]	@ (800ffec <ProcessRadioRxDone+0x7bc>)
 800fe9c:	f8c2 346c 	str.w	r3, [r2, #1132]	@ 0x46c
                PrepareRxDoneAbort( );
 800fea0:	f7ff fca0 	bl	800f7e4 <PrepareRxDoneAbort>
                return;
 800fea4:	e1cc      	b.n	8010240 <ProcessRadioRxDone+0xa10>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800fea6:	7cfa      	ldrb	r2, [r7, #19]
 800fea8:	6979      	ldr	r1, [r7, #20]
 800feaa:	f897 009a 	ldrb.w	r0, [r7, #154]	@ 0x9a
 800feae:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800feb2:	9300      	str	r3, [sp, #0]
 800feb4:	460b      	mov	r3, r1
 800feb6:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 800feba:	f005 fedf 	bl	8015c7c <LoRaMacCryptoUnsecureMessage>
 800febe:	4603      	mov	r3, r0
 800fec0:	f887 3098 	strb.w	r3, [r7, #152]	@ 0x98
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800fec4:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d00f      	beq.n	800feec <ProcessRadioRxDone+0x6bc>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800fecc:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 800fed0:	2b02      	cmp	r3, #2
 800fed2:	d104      	bne.n	800fede <ProcessRadioRxDone+0x6ae>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800fed4:	4b45      	ldr	r3, [pc, #276]	@ (800ffec <ProcessRadioRxDone+0x7bc>)
 800fed6:	220a      	movs	r2, #10
 800fed8:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
 800fedc:	e003      	b.n	800fee6 <ProcessRadioRxDone+0x6b6>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800fede:	4b43      	ldr	r3, [pc, #268]	@ (800ffec <ProcessRadioRxDone+0x7bc>)
 800fee0:	220b      	movs	r2, #11
 800fee2:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                }
                PrepareRxDoneAbort( );
 800fee6:	f7ff fc7d 	bl	800f7e4 <PrepareRxDoneAbort>
                return;
 800feea:	e1a9      	b.n	8010240 <ProcessRadioRxDone+0xa10>
            }
#endif /* LORAMAC_VERSION */

            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800feec:	4b3f      	ldr	r3, [pc, #252]	@ (800ffec <ProcessRadioRxDone+0x7bc>)
 800feee:	2200      	movs	r2, #0
 800fef0:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
            MacCtx.McpsIndication.Multicast = multicast;
 800fef4:	4a3d      	ldr	r2, [pc, #244]	@ (800ffec <ProcessRadioRxDone+0x7bc>)
 800fef6:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 800fefa:	f882 3422 	strb.w	r3, [r2, #1058]	@ 0x422
            MacCtx.McpsIndication.Buffer = NULL;
 800fefe:	4b3b      	ldr	r3, [pc, #236]	@ (800ffec <ProcessRadioRxDone+0x7bc>)
 800ff00:	2200      	movs	r2, #0
 800ff02:	f8c3 2428 	str.w	r2, [r3, #1064]	@ 0x428
            MacCtx.McpsIndication.BufferSize = 0;
 800ff06:	4b39      	ldr	r3, [pc, #228]	@ (800ffec <ProcessRadioRxDone+0x7bc>)
 800ff08:	2200      	movs	r2, #0
 800ff0a:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800ff0e:	697b      	ldr	r3, [r7, #20]
 800ff10:	4a36      	ldr	r2, [pc, #216]	@ (800ffec <ProcessRadioRxDone+0x7bc>)
 800ff12:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800ff16:	697b      	ldr	r3, [r7, #20]
 800ff18:	4a34      	ldr	r2, [pc, #208]	@ (800ffec <ProcessRadioRxDone+0x7bc>)
 800ff1a:	f8c2 346c 	str.w	r3, [r2, #1132]	@ 0x46c
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800ff1e:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800ff22:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800ff26:	b2db      	uxtb	r3, r3
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	bf14      	ite	ne
 800ff2c:	2301      	movne	r3, #1
 800ff2e:	2300      	moveq	r3, #0
 800ff30:	b2da      	uxtb	r2, r3
 800ff32:	4b2e      	ldr	r3, [pc, #184]	@ (800ffec <ProcessRadioRxDone+0x7bc>)
 800ff34:	f883 242e 	strb.w	r2, [r3, #1070]	@ 0x42e

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800ff38:	4b2c      	ldr	r3, [pc, #176]	@ (800ffec <ProcessRadioRxDone+0x7bc>)
 800ff3a:	2200      	movs	r2, #0
 800ff3c:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800ff40:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800ff44:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800ff48:	b2db      	uxtb	r3, r3
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	bf14      	ite	ne
 800ff4e:	2301      	movne	r3, #1
 800ff50:	2300      	moveq	r3, #0
 800ff52:	b2da      	uxtb	r2, r3
 800ff54:	4b25      	ldr	r3, [pc, #148]	@ (800ffec <ProcessRadioRxDone+0x7bc>)
 800ff56:	f883 2444 	strb.w	r2, [r3, #1092]	@ 0x444

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800ff5a:	4b24      	ldr	r3, [pc, #144]	@ (800ffec <ProcessRadioRxDone+0x7bc>)
 800ff5c:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d004      	beq.n	800ff6e <ProcessRadioRxDone+0x73e>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800ff64:	4b21      	ldr	r3, [pc, #132]	@ (800ffec <ProcessRadioRxDone+0x7bc>)
 800ff66:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800ff6a:	2b01      	cmp	r3, #1
 800ff6c:	d106      	bne.n	800ff7c <ProcessRadioRxDone+0x74c>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 800ff6e:	4b1e      	ldr	r3, [pc, #120]	@ (800ffe8 <ProcessRadioRxDone+0x7b8>)
 800ff70:	2200      	movs	r2, #0
 800ff72:	629a      	str	r2, [r3, #40]	@ 0x28
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                Nvm.MacGroup2.DownlinkReceived = true;
 800ff74:	4b1c      	ldr	r3, [pc, #112]	@ (800ffe8 <ProcessRadioRxDone+0x7b8>)
 800ff76:	2201      	movs	r2, #1
 800ff78:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
#endif /* LORAMAC_VERSION */
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800ff7c:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 800ff80:	2b01      	cmp	r3, #1
 800ff82:	d104      	bne.n	800ff8e <ProcessRadioRxDone+0x75e>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800ff84:	4b19      	ldr	r3, [pc, #100]	@ (800ffec <ProcessRadioRxDone+0x7bc>)
 800ff86:	2202      	movs	r2, #2
 800ff88:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
 800ff8c:	e03a      	b.n	8010004 <ProcessRadioRxDone+0x7d4>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800ff8e:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 800ff92:	f023 031f 	bic.w	r3, r3, #31
 800ff96:	b2db      	uxtb	r3, r3
 800ff98:	2ba0      	cmp	r3, #160	@ 0xa0
 800ff9a:	d12b      	bne.n	800fff4 <ProcessRadioRxDone+0x7c4>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 800ff9c:	4b12      	ldr	r3, [pc, #72]	@ (800ffe8 <ProcessRadioRxDone+0x7b8>)
 800ff9e:	2201      	movs	r2, #1
 800ffa0:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800ffa4:	4b10      	ldr	r3, [pc, #64]	@ (800ffe8 <ProcessRadioRxDone+0x7b8>)
 800ffa6:	f893 312e 	ldrb.w	r3, [r3, #302]	@ 0x12e
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d102      	bne.n	800ffb4 <ProcessRadioRxDone+0x784>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800ffae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ffb0:	4a0d      	ldr	r2, [pc, #52]	@ (800ffe8 <ProcessRadioRxDone+0x7b8>)
 800ffb2:	6353      	str	r3, [r2, #52]	@ 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800ffb4:	4b0d      	ldr	r3, [pc, #52]	@ (800ffec <ProcessRadioRxDone+0x7bc>)
 800ffb6:	2201      	movs	r2, #1
 800ffb8:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                    // Handle response timeout for class c and class b downlinks
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800ffbc:	4b0b      	ldr	r3, [pc, #44]	@ (800ffec <ProcessRadioRxDone+0x7bc>)
 800ffbe:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	d01e      	beq.n	8010004 <ProcessRadioRxDone+0x7d4>
                        ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) )
 800ffc6:	4b09      	ldr	r3, [pc, #36]	@ (800ffec <ProcessRadioRxDone+0x7bc>)
 800ffc8:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800ffcc:	2b01      	cmp	r3, #1
 800ffce:	d019      	beq.n	8010004 <ProcessRadioRxDone+0x7d4>
                    {
                        // Calculate timeout
                        MacCtx.McpsIndication.ResponseTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800ffd0:	4b05      	ldr	r3, [pc, #20]	@ (800ffe8 <ProcessRadioRxDone+0x7b8>)
 800ffd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ffd6:	4a05      	ldr	r2, [pc, #20]	@ (800ffec <ProcessRadioRxDone+0x7bc>)
 800ffd8:	f8c2 343c 	str.w	r3, [r2, #1084]	@ 0x43c
                        MacCtx.ResponseTimeoutStartTime = RxDoneParams.LastRxDone;
 800ffdc:	4b04      	ldr	r3, [pc, #16]	@ (800fff0 <ProcessRadioRxDone+0x7c0>)
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	4a02      	ldr	r2, [pc, #8]	@ (800ffec <ProcessRadioRxDone+0x7bc>)
 800ffe2:	f8c2 3498 	str.w	r3, [r2, #1176]	@ 0x498
 800ffe6:	e00d      	b.n	8010004 <ProcessRadioRxDone+0x7d4>
 800ffe8:	20000bfc 	.word	0x20000bfc
 800ffec:	200006e0 	.word	0x200006e0
 800fff0:	2000182c 	.word	0x2000182c
                    }
#endif /* LORAMAC_VERSION */
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 800fff4:	4b94      	ldr	r3, [pc, #592]	@ (8010248 <ProcessRadioRxDone+0xa18>)
 800fff6:	2200      	movs	r2, #0
 800fff8:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800fffc:	4b93      	ldr	r3, [pc, #588]	@ (801024c <ProcessRadioRxDone+0xa1c>)
 800fffe:	2200      	movs	r2, #0
 8010000:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
            }

            // Set the pending status
            /* if( ( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) ) ||
                ( MacCtx.McpsIndication.ResponseTimeout > 0 ) ) */
            if( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) )
 8010004:	4b90      	ldr	r3, [pc, #576]	@ (8010248 <ProcessRadioRxDone+0xa18>)
 8010006:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 801000a:	2b00      	cmp	r3, #0
 801000c:	d106      	bne.n	801001c <ProcessRadioRxDone+0x7ec>
 801000e:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8010012:	f003 0310 	and.w	r3, r3, #16
 8010016:	b2db      	uxtb	r3, r3
 8010018:	2b00      	cmp	r3, #0
 801001a:	d008      	beq.n	801002e <ProcessRadioRxDone+0x7fe>
 801001c:	4b8a      	ldr	r3, [pc, #552]	@ (8010248 <ProcessRadioRxDone+0xa18>)
 801001e:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8010022:	2b00      	cmp	r3, #0
 8010024:	d103      	bne.n	801002e <ProcessRadioRxDone+0x7fe>
            {
                MacCtx.McpsIndication.IsUplinkTxPending = 1;
 8010026:	4b89      	ldr	r3, [pc, #548]	@ (801024c <ProcessRadioRxDone+0xa1c>)
 8010028:	2201      	movs	r2, #1
 801002a:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 801002e:	4b87      	ldr	r3, [pc, #540]	@ (801024c <ProcessRadioRxDone+0xa1c>)
 8010030:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 8010034:	4a85      	ldr	r2, [pc, #532]	@ (801024c <ProcessRadioRxDone+0xa1c>)
 8010036:	f892 2440 	ldrb.w	r2, [r2, #1088]	@ 0x440
 801003a:	f897 104c 	ldrb.w	r1, [r7, #76]	@ 0x4c
 801003e:	4618      	mov	r0, r3
 8010040:	f001 ff98 	bl	8011f74 <RemoveMacCommands>

            switch( fType )
 8010044:	7cbb      	ldrb	r3, [r7, #18]
 8010046:	2b03      	cmp	r3, #3
 8010048:	d873      	bhi.n	8010132 <ProcessRadioRxDone+0x902>
 801004a:	a201      	add	r2, pc, #4	@ (adr r2, 8010050 <ProcessRadioRxDone+0x820>)
 801004c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010050:	08010061 	.word	0x08010061
 8010054:	080100b1 	.word	0x080100b1
 8010058:	080100e7 	.word	0x080100e7
 801005c:	0801010d 	.word	0x0801010d
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 8010060:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8010064:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8010068:	b2db      	uxtb	r3, r3
 801006a:	461c      	mov	r4, r3
 801006c:	4b77      	ldr	r3, [pc, #476]	@ (801024c <ProcessRadioRxDone+0xa1c>)
 801006e:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 8010072:	f997 108f 	ldrsb.w	r1, [r7, #143]	@ 0x8f
 8010076:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 801007a:	f102 0010 	add.w	r0, r2, #16
 801007e:	9300      	str	r3, [sp, #0]
 8010080:	460b      	mov	r3, r1
 8010082:	4622      	mov	r2, r4
 8010084:	2100      	movs	r1, #0
 8010086:	f000 ff4f 	bl	8010f28 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 801008a:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 801008e:	4b6f      	ldr	r3, [pc, #444]	@ (801024c <ProcessRadioRxDone+0xa1c>)
 8010090:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8010094:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010096:	4a6d      	ldr	r2, [pc, #436]	@ (801024c <ProcessRadioRxDone+0xa1c>)
 8010098:	f8c2 3428 	str.w	r3, [r2, #1064]	@ 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 801009c:	f897 2068 	ldrb.w	r2, [r7, #104]	@ 0x68
 80100a0:	4b6a      	ldr	r3, [pc, #424]	@ (801024c <ProcessRadioRxDone+0xa1c>)
 80100a2:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c
                    MacCtx.McpsIndication.RxData = true;
 80100a6:	4b69      	ldr	r3, [pc, #420]	@ (801024c <ProcessRadioRxDone+0xa1c>)
 80100a8:	2201      	movs	r2, #1
 80100aa:	f883 242d 	strb.w	r2, [r3, #1069]	@ 0x42d
                    break;
 80100ae:	e047      	b.n	8010140 <ProcessRadioRxDone+0x910>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 80100b0:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80100b4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80100b8:	b2db      	uxtb	r3, r3
 80100ba:	461c      	mov	r4, r3
 80100bc:	4b63      	ldr	r3, [pc, #396]	@ (801024c <ProcessRadioRxDone+0xa1c>)
 80100be:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 80100c2:	f997 108f 	ldrsb.w	r1, [r7, #143]	@ 0x8f
 80100c6:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80100ca:	f102 0010 	add.w	r0, r2, #16
 80100ce:	9300      	str	r3, [sp, #0]
 80100d0:	460b      	mov	r3, r1
 80100d2:	4622      	mov	r2, r4
 80100d4:	2100      	movs	r1, #0
 80100d6:	f000 ff27 	bl	8010f28 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 80100da:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 80100de:	4b5b      	ldr	r3, [pc, #364]	@ (801024c <ProcessRadioRxDone+0xa1c>)
 80100e0:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
                    break;
 80100e4:	e02c      	b.n	8010140 <ProcessRadioRxDone+0x910>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 80100e6:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 80100e8:	f897 2068 	ldrb.w	r2, [r7, #104]	@ 0x68
 80100ec:	4b57      	ldr	r3, [pc, #348]	@ (801024c <ProcessRadioRxDone+0xa1c>)
 80100ee:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 80100f2:	f997 108f 	ldrsb.w	r1, [r7, #143]	@ 0x8f
 80100f6:	9300      	str	r3, [sp, #0]
 80100f8:	460b      	mov	r3, r1
 80100fa:	2100      	movs	r1, #0
 80100fc:	f000 ff14 	bl	8010f28 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8010100:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 8010104:	4b51      	ldr	r3, [pc, #324]	@ (801024c <ProcessRadioRxDone+0xa1c>)
 8010106:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
                    break;
 801010a:	e019      	b.n	8010140 <ProcessRadioRxDone+0x910>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 801010c:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 8010110:	4b4e      	ldr	r3, [pc, #312]	@ (801024c <ProcessRadioRxDone+0xa1c>)
 8010112:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8010116:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010118:	4a4c      	ldr	r2, [pc, #304]	@ (801024c <ProcessRadioRxDone+0xa1c>)
 801011a:	f8c2 3428 	str.w	r3, [r2, #1064]	@ 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 801011e:	f897 2068 	ldrb.w	r2, [r7, #104]	@ 0x68
 8010122:	4b4a      	ldr	r3, [pc, #296]	@ (801024c <ProcessRadioRxDone+0xa1c>)
 8010124:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c
                    MacCtx.McpsIndication.RxData = true;
 8010128:	4b48      	ldr	r3, [pc, #288]	@ (801024c <ProcessRadioRxDone+0xa1c>)
 801012a:	2201      	movs	r2, #1
 801012c:	f883 242d 	strb.w	r2, [r3, #1069]	@ 0x42d
                    break;
 8010130:	e006      	b.n	8010140 <ProcessRadioRxDone+0x910>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010132:	4b46      	ldr	r3, [pc, #280]	@ (801024c <ProcessRadioRxDone+0xa1c>)
 8010134:	2201      	movs	r2, #1
 8010136:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                    PrepareRxDoneAbort( );
 801013a:	f7ff fb53 	bl	800f7e4 <PrepareRxDoneAbort>
                    break;
 801013e:	bf00      	nop
                }
            }
#endif /* LORAMAC_VERSION */

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 8010140:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 8010144:	2be0      	cmp	r3, #224	@ 0xe0
 8010146:	d118      	bne.n	801017a <ProcessRadioRxDone+0x94a>
 8010148:	4b3f      	ldr	r3, [pc, #252]	@ (8010248 <ProcessRadioRxDone+0xa18>)
 801014a:	f893 311f 	ldrb.w	r3, [r3, #287]	@ 0x11f
 801014e:	f083 0301 	eor.w	r3, r3, #1
 8010152:	b2db      	uxtb	r3, r3
 8010154:	2b00      	cmp	r3, #0
 8010156:	d010      	beq.n	801017a <ProcessRadioRxDone+0x94a>
            { // Do not notify the upper layer of data reception on FPort LORAMAC_CERT_FPORT if the port
              // handling is disabled.
                MacCtx.McpsIndication.Port = macMsgData.FPort;
 8010158:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 801015c:	4b3b      	ldr	r3, [pc, #236]	@ (801024c <ProcessRadioRxDone+0xa1c>)
 801015e:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
                MacCtx.McpsIndication.Buffer = NULL;
 8010162:	4b3a      	ldr	r3, [pc, #232]	@ (801024c <ProcessRadioRxDone+0xa1c>)
 8010164:	2200      	movs	r2, #0
 8010166:	f8c3 2428 	str.w	r2, [r3, #1064]	@ 0x428
                MacCtx.McpsIndication.BufferSize = 0;
 801016a:	4b38      	ldr	r3, [pc, #224]	@ (801024c <ProcessRadioRxDone+0xa1c>)
 801016c:	2200      	movs	r2, #0
 801016e:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c
                MacCtx.McpsIndication.RxData = false;
 8010172:	4b36      	ldr	r3, [pc, #216]	@ (801024c <ProcessRadioRxDone+0xa1c>)
 8010174:	2200      	movs	r2, #0
 8010176:	f883 242d 	strb.w	r2, [r3, #1069]	@ 0x42d
            }
#endif /* LORAMAC_VERSION */

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 801017a:	4a34      	ldr	r2, [pc, #208]	@ (801024c <ProcessRadioRxDone+0xa1c>)
 801017c:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8010180:	f043 0302 	orr.w	r3, r3, #2
 8010184:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491

            break;
 8010188:	e035      	b.n	80101f6 <ProcessRadioRxDone+0x9c6>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 801018a:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 801018e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8010192:	18d1      	adds	r1, r2, r3
 8010194:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 8010198:	b29b      	uxth	r3, r3
 801019a:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 801019e:	1ad3      	subs	r3, r2, r3
 80101a0:	b29b      	uxth	r3, r3
 80101a2:	461a      	mov	r2, r3
 80101a4:	482a      	ldr	r0, [pc, #168]	@ (8010250 <ProcessRadioRxDone+0xa20>)
 80101a6:	f009 ff84 	bl	801a0b2 <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 80101aa:	4b28      	ldr	r3, [pc, #160]	@ (801024c <ProcessRadioRxDone+0xa1c>)
 80101ac:	2203      	movs	r2, #3
 80101ae:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80101b2:	4b26      	ldr	r3, [pc, #152]	@ (801024c <ProcessRadioRxDone+0xa1c>)
 80101b4:	2200      	movs	r2, #0
 80101b6:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 80101ba:	4b24      	ldr	r3, [pc, #144]	@ (801024c <ProcessRadioRxDone+0xa1c>)
 80101bc:	4a24      	ldr	r2, [pc, #144]	@ (8010250 <ProcessRadioRxDone+0xa20>)
 80101be:	f8c3 2428 	str.w	r2, [r3, #1064]	@ 0x428
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 80101c2:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80101c6:	b2da      	uxtb	r2, r3
 80101c8:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 80101cc:	1ad3      	subs	r3, r2, r3
 80101ce:	b2da      	uxtb	r2, r3
 80101d0:	4b1e      	ldr	r3, [pc, #120]	@ (801024c <ProcessRadioRxDone+0xa1c>)
 80101d2:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c

            MacCtx.MacFlags.Bits.McpsInd = 1;
 80101d6:	4a1d      	ldr	r2, [pc, #116]	@ (801024c <ProcessRadioRxDone+0xa1c>)
 80101d8:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 80101dc:	f043 0302 	orr.w	r3, r3, #2
 80101e0:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
            break;
 80101e4:	e007      	b.n	80101f6 <ProcessRadioRxDone+0x9c6>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80101e6:	4b19      	ldr	r3, [pc, #100]	@ (801024c <ProcessRadioRxDone+0xa1c>)
 80101e8:	2201      	movs	r2, #1
 80101ea:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
            PrepareRxDoneAbort( );
 80101ee:	f7ff faf9 	bl	800f7e4 <PrepareRxDoneAbort>
            break;
 80101f2:	e000      	b.n	80101f6 <ProcessRadioRxDone+0x9c6>
            break;
 80101f4:	bf00      	nop
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Verify if we need to disable the RetransmitTimeoutTimer
    // Only applies if downlink is received on Rx1 or Rx2 windows.
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 80101f6:	4b15      	ldr	r3, [pc, #84]	@ (801024c <ProcessRadioRxDone+0xa1c>)
 80101f8:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d004      	beq.n	801020a <ProcessRadioRxDone+0x9da>
        ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 8010200:	4b12      	ldr	r3, [pc, #72]	@ (801024c <ProcessRadioRxDone+0xa1c>)
 8010202:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8010206:	2b01      	cmp	r3, #1
 8010208:	d10c      	bne.n	8010224 <ProcessRadioRxDone+0x9f4>
    {
        if( MacCtx.NodeAckRequested == true )
 801020a:	4b10      	ldr	r3, [pc, #64]	@ (801024c <ProcessRadioRxDone+0xa1c>)
 801020c:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 8010210:	2b00      	cmp	r3, #0
 8010212:	d007      	beq.n	8010224 <ProcessRadioRxDone+0x9f4>
        {
            if( MacCtx.McpsConfirm.AckReceived == true )
 8010214:	4b0d      	ldr	r3, [pc, #52]	@ (801024c <ProcessRadioRxDone+0xa1c>)
 8010216:	f893 3444 	ldrb.w	r3, [r3, #1092]	@ 0x444
 801021a:	2b00      	cmp	r3, #0
 801021c:	d002      	beq.n	8010224 <ProcessRadioRxDone+0x9f4>
            {
                OnRetransmitTimeoutTimerEvent( NULL );
 801021e:	2000      	movs	r0, #0
 8010220:	f000 fcec 	bl	8010bfc <OnRetransmitTimeoutTimerEvent>
            }
        }
    }

    if( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_CLASS_C )
 8010224:	4b09      	ldr	r3, [pc, #36]	@ (801024c <ProcessRadioRxDone+0xa1c>)
 8010226:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 801022a:	2b02      	cmp	r3, #2
 801022c:	d006      	beq.n	801023c <ProcessRadioRxDone+0xa0c>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 801022e:	4a07      	ldr	r2, [pc, #28]	@ (801024c <ProcessRadioRxDone+0xa1c>)
 8010230:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8010234:	f043 0310 	orr.w	r3, r3, #16
 8010238:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    }
#endif /* LORAMAC_VERSION */

    UpdateRxSlotIdleState( );
 801023c:	f7ff fa14 	bl	800f668 <UpdateRxSlotIdleState>
}
 8010240:	37a4      	adds	r7, #164	@ 0xa4
 8010242:	46bd      	mov	sp, r7
 8010244:	bd90      	pop	{r4, r7, pc}
 8010246:	bf00      	nop
 8010248:	20000bfc 	.word	0x20000bfc
 801024c:	200006e0 	.word	0x200006e0
 8010250:	20000918 	.word	0x20000918

08010254 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 8010254:	b580      	push	{r7, lr}
 8010256:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8010258:	4b11      	ldr	r3, [pc, #68]	@ (80102a0 <ProcessRadioTxTimeout+0x4c>)
 801025a:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 801025e:	2b02      	cmp	r3, #2
 8010260:	d002      	beq.n	8010268 <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 8010262:	4b10      	ldr	r3, [pc, #64]	@ (80102a4 <ProcessRadioTxTimeout+0x50>)
 8010264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010266:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 8010268:	f7ff f9fe 	bl	800f668 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 801026c:	4b0e      	ldr	r3, [pc, #56]	@ (80102a8 <ProcessRadioTxTimeout+0x54>)
 801026e:	2202      	movs	r2, #2
 8010270:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 8010274:	2002      	movs	r0, #2
 8010276:	f004 fe75 	bl	8014f64 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 801027a:	4b0b      	ldr	r3, [pc, #44]	@ (80102a8 <ProcessRadioTxTimeout+0x54>)
 801027c:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 8010280:	2b00      	cmp	r3, #0
 8010282:	d003      	beq.n	801028c <ProcessRadioTxTimeout+0x38>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        MacCtx.AckTimeoutRetry = true;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        MacCtx.RetransmitTimeoutRetry = true;
 8010284:	4b08      	ldr	r3, [pc, #32]	@ (80102a8 <ProcessRadioTxTimeout+0x54>)
 8010286:	2201      	movs	r2, #1
 8010288:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
#endif /* LORAMAC_VERSION */
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 801028c:	4a06      	ldr	r2, [pc, #24]	@ (80102a8 <ProcessRadioTxTimeout+0x54>)
 801028e:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8010292:	f043 0310 	orr.w	r3, r3, #16
 8010296:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
}
 801029a:	bf00      	nop
 801029c:	bd80      	pop	{r7, pc}
 801029e:	bf00      	nop
 80102a0:	20000bfc 	.word	0x20000bfc
 80102a4:	0801fccc 	.word	0x0801fccc
 80102a8:	200006e0 	.word	0x200006e0

080102ac <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 80102ac:	b580      	push	{r7, lr}
 80102ae:	b084      	sub	sp, #16
 80102b0:	af00      	add	r7, sp, #0
 80102b2:	4603      	mov	r3, r0
 80102b4:	460a      	mov	r2, r1
 80102b6:	71fb      	strb	r3, [r7, #7]
 80102b8:	4613      	mov	r3, r2
 80102ba:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 80102bc:	2300      	movs	r3, #0
 80102be:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80102c0:	4b3d      	ldr	r3, [pc, #244]	@ (80103b8 <HandleRadioRxErrorTimeout+0x10c>)
 80102c2:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 80102c6:	2b02      	cmp	r3, #2
 80102c8:	d002      	beq.n	80102d0 <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 80102ca:	4b3c      	ldr	r3, [pc, #240]	@ (80103bc <HandleRadioRxErrorTimeout+0x110>)
 80102cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80102ce:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 80102d0:	f004 f972 	bl	80145b8 <LoRaMacClassBIsBeaconExpected>
 80102d4:	4603      	mov	r3, r0
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d007      	beq.n	80102ea <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 80102da:	2002      	movs	r0, #2
 80102dc:	f004 f920 	bl	8014520 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 80102e0:	2000      	movs	r0, #0
 80102e2:	f004 f942 	bl	801456a <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 80102e6:	2301      	movs	r3, #1
 80102e8:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80102ea:	4b33      	ldr	r3, [pc, #204]	@ (80103b8 <HandleRadioRxErrorTimeout+0x10c>)
 80102ec:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 80102f0:	2b01      	cmp	r3, #1
 80102f2:	d119      	bne.n	8010328 <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 80102f4:	f004 f967 	bl	80145c6 <LoRaMacClassBIsPingExpected>
 80102f8:	4603      	mov	r3, r0
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d007      	beq.n	801030e <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80102fe:	2000      	movs	r0, #0
 8010300:	f004 f918 	bl	8014534 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8010304:	2000      	movs	r0, #0
 8010306:	f004 f939 	bl	801457c <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 801030a:	2301      	movs	r3, #1
 801030c:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 801030e:	f004 f961 	bl	80145d4 <LoRaMacClassBIsMulticastExpected>
 8010312:	4603      	mov	r3, r0
 8010314:	2b00      	cmp	r3, #0
 8010316:	d007      	beq.n	8010328 <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8010318:	2000      	movs	r0, #0
 801031a:	f004 f915 	bl	8014548 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 801031e:	2000      	movs	r0, #0
 8010320:	f004 f935 	bl	801458e <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 8010324:	2301      	movs	r3, #1
 8010326:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 8010328:	7bfb      	ldrb	r3, [r7, #15]
 801032a:	f083 0301 	eor.w	r3, r3, #1
 801032e:	b2db      	uxtb	r3, r3
 8010330:	2b00      	cmp	r3, #0
 8010332:	d03b      	beq.n	80103ac <HandleRadioRxErrorTimeout+0x100>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8010334:	4b22      	ldr	r3, [pc, #136]	@ (80103c0 <HandleRadioRxErrorTimeout+0x114>)
 8010336:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 801033a:	2b00      	cmp	r3, #0
 801033c:	d122      	bne.n	8010384 <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 801033e:	4b20      	ldr	r3, [pc, #128]	@ (80103c0 <HandleRadioRxErrorTimeout+0x114>)
 8010340:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 8010344:	2b00      	cmp	r3, #0
 8010346:	d003      	beq.n	8010350 <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 8010348:	4a1d      	ldr	r2, [pc, #116]	@ (80103c0 <HandleRadioRxErrorTimeout+0x114>)
 801034a:	79fb      	ldrb	r3, [r7, #7]
 801034c:	f882 3441 	strb.w	r3, [r2, #1089]	@ 0x441
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 8010350:	79fb      	ldrb	r3, [r7, #7]
 8010352:	4618      	mov	r0, r3
 8010354:	f004 fe06 	bl	8014f64 <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 8010358:	4b17      	ldr	r3, [pc, #92]	@ (80103b8 <HandleRadioRxErrorTimeout+0x10c>)
 801035a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801035c:	4618      	mov	r0, r3
 801035e:	f00e f96b 	bl	801e638 <UTIL_TIMER_GetElapsedTime>
 8010362:	4602      	mov	r2, r0
 8010364:	4b16      	ldr	r3, [pc, #88]	@ (80103c0 <HandleRadioRxErrorTimeout+0x114>)
 8010366:	f8d3 33b4 	ldr.w	r3, [r3, #948]	@ 0x3b4
 801036a:	429a      	cmp	r2, r3
 801036c:	d31e      	bcc.n	80103ac <HandleRadioRxErrorTimeout+0x100>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 801036e:	4815      	ldr	r0, [pc, #84]	@ (80103c4 <HandleRadioRxErrorTimeout+0x118>)
 8010370:	f00e f836 	bl	801e3e0 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 8010374:	4a12      	ldr	r2, [pc, #72]	@ (80103c0 <HandleRadioRxErrorTimeout+0x114>)
 8010376:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 801037a:	f043 0310 	orr.w	r3, r3, #16
 801037e:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
 8010382:	e013      	b.n	80103ac <HandleRadioRxErrorTimeout+0x100>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 8010384:	4b0e      	ldr	r3, [pc, #56]	@ (80103c0 <HandleRadioRxErrorTimeout+0x114>)
 8010386:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 801038a:	2b00      	cmp	r3, #0
 801038c:	d003      	beq.n	8010396 <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 801038e:	4a0c      	ldr	r2, [pc, #48]	@ (80103c0 <HandleRadioRxErrorTimeout+0x114>)
 8010390:	79bb      	ldrb	r3, [r7, #6]
 8010392:	f882 3441 	strb.w	r3, [r2, #1089]	@ 0x441
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 8010396:	79bb      	ldrb	r3, [r7, #6]
 8010398:	4618      	mov	r0, r3
 801039a:	f004 fde3 	bl	8014f64 <LoRaMacConfirmQueueSetStatusCmn>
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.MacFlags.Bits.MacDone = 1;
 801039e:	4a08      	ldr	r2, [pc, #32]	@ (80103c0 <HandleRadioRxErrorTimeout+0x114>)
 80103a0:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 80103a4:	f043 0310 	orr.w	r3, r3, #16
 80103a8:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
#endif /* LORAMAC_VERSION */
        }
    }

    UpdateRxSlotIdleState( );
 80103ac:	f7ff f95c 	bl	800f668 <UpdateRxSlotIdleState>
}
 80103b0:	bf00      	nop
 80103b2:	3710      	adds	r7, #16
 80103b4:	46bd      	mov	sp, r7
 80103b6:	bd80      	pop	{r7, pc}
 80103b8:	20000bfc 	.word	0x20000bfc
 80103bc:	0801fccc 	.word	0x0801fccc
 80103c0:	200006e0 	.word	0x200006e0
 80103c4:	20000a78 	.word	0x20000a78

080103c8 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 80103c8:	b580      	push	{r7, lr}
 80103ca:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 80103cc:	2106      	movs	r1, #6
 80103ce:	2005      	movs	r0, #5
 80103d0:	f7ff ff6c 	bl	80102ac <HandleRadioRxErrorTimeout>
}
 80103d4:	bf00      	nop
 80103d6:	bd80      	pop	{r7, pc}

080103d8 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 80103d8:	b580      	push	{r7, lr}
 80103da:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 80103dc:	2104      	movs	r1, #4
 80103de:	2003      	movs	r0, #3
 80103e0:	f7ff ff64 	bl	80102ac <HandleRadioRxErrorTimeout>
}
 80103e4:	bf00      	nop
 80103e6:	bd80      	pop	{r7, pc}

080103e8 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 80103e8:	b580      	push	{r7, lr}
 80103ea:	b084      	sub	sp, #16
 80103ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80103ee:	f3ef 8310 	mrs	r3, PRIMASK
 80103f2:	607b      	str	r3, [r7, #4]
  return(result);
 80103f4:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 80103f6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80103f8:	b672      	cpsid	i
}
 80103fa:	bf00      	nop
    events = LoRaMacRadioEvents;
 80103fc:	4b1d      	ldr	r3, [pc, #116]	@ (8010474 <LoRaMacHandleIrqEvents+0x8c>)
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 8010402:	4b1c      	ldr	r3, [pc, #112]	@ (8010474 <LoRaMacHandleIrqEvents+0x8c>)
 8010404:	2200      	movs	r2, #0
 8010406:	601a      	str	r2, [r3, #0]
 8010408:	68fb      	ldr	r3, [r7, #12]
 801040a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801040c:	68bb      	ldr	r3, [r7, #8]
 801040e:	f383 8810 	msr	PRIMASK, r3
}
 8010412:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 8010414:	683b      	ldr	r3, [r7, #0]
 8010416:	2b00      	cmp	r3, #0
 8010418:	d027      	beq.n	801046a <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 801041a:	783b      	ldrb	r3, [r7, #0]
 801041c:	f003 0320 	and.w	r3, r3, #32
 8010420:	b2db      	uxtb	r3, r3
 8010422:	2b00      	cmp	r3, #0
 8010424:	d001      	beq.n	801042a <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 8010426:	f7ff f937 	bl	800f698 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 801042a:	783b      	ldrb	r3, [r7, #0]
 801042c:	f003 0310 	and.w	r3, r3, #16
 8010430:	b2db      	uxtb	r3, r3
 8010432:	2b00      	cmp	r3, #0
 8010434:	d001      	beq.n	801043a <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 8010436:	f7ff f9fb 	bl	800f830 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 801043a:	783b      	ldrb	r3, [r7, #0]
 801043c:	f003 0308 	and.w	r3, r3, #8
 8010440:	b2db      	uxtb	r3, r3
 8010442:	2b00      	cmp	r3, #0
 8010444:	d001      	beq.n	801044a <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 8010446:	f7ff ff05 	bl	8010254 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 801044a:	783b      	ldrb	r3, [r7, #0]
 801044c:	f003 0304 	and.w	r3, r3, #4
 8010450:	b2db      	uxtb	r3, r3
 8010452:	2b00      	cmp	r3, #0
 8010454:	d001      	beq.n	801045a <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 8010456:	f7ff ffb7 	bl	80103c8 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 801045a:	783b      	ldrb	r3, [r7, #0]
 801045c:	f003 0302 	and.w	r3, r3, #2
 8010460:	b2db      	uxtb	r3, r3
 8010462:	2b00      	cmp	r3, #0
 8010464:	d001      	beq.n	801046a <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 8010466:	f7ff ffb7 	bl	80103d8 <ProcessRadioRxTimeout>
        }
    }
}
 801046a:	bf00      	nop
 801046c:	3710      	adds	r7, #16
 801046e:	46bd      	mov	sp, r7
 8010470:	bd80      	pop	{r7, pc}
 8010472:	bf00      	nop
 8010474:	20001824 	.word	0x20001824

08010478 <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 8010478:	b480      	push	{r7}
 801047a:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 801047c:	4b10      	ldr	r3, [pc, #64]	@ (80104c0 <LoRaMacIsBusy+0x48>)
 801047e:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010482:	2b01      	cmp	r3, #1
 8010484:	d101      	bne.n	801048a <LoRaMacIsBusy+0x12>
    {
        return false;
 8010486:	2300      	movs	r3, #0
 8010488:	e015      	b.n	80104b6 <LoRaMacIsBusy+0x3e>
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
 801048a:	4b0e      	ldr	r3, [pc, #56]	@ (80104c4 <LoRaMacIsBusy+0x4c>)
 801048c:	781b      	ldrb	r3, [r3, #0]
 801048e:	f003 0301 	and.w	r3, r3, #1
 8010492:	b2db      	uxtb	r3, r3
 8010494:	2b00      	cmp	r3, #0
 8010496:	d001      	beq.n	801049c <LoRaMacIsBusy+0x24>
    {
        return true;
 8010498:	2301      	movs	r3, #1
 801049a:	e00c      	b.n	80104b6 <LoRaMacIsBusy+0x3e>
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 801049c:	4b08      	ldr	r3, [pc, #32]	@ (80104c0 <LoRaMacIsBusy+0x48>)
 801049e:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d106      	bne.n	80104b4 <LoRaMacIsBusy+0x3c>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 80104a6:	4b06      	ldr	r3, [pc, #24]	@ (80104c0 <LoRaMacIsBusy+0x48>)
 80104a8:	f893 3492 	ldrb.w	r3, [r3, #1170]	@ 0x492
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 80104ac:	2b01      	cmp	r3, #1
 80104ae:	d101      	bne.n	80104b4 <LoRaMacIsBusy+0x3c>
    {
        return false;
 80104b0:	2300      	movs	r3, #0
 80104b2:	e000      	b.n	80104b6 <LoRaMacIsBusy+0x3e>
    }
    return true;
 80104b4:	2301      	movs	r3, #1
}
 80104b6:	4618      	mov	r0, r3
 80104b8:	46bd      	mov	sp, r7
 80104ba:	bc80      	pop	{r7}
 80104bc:	4770      	bx	lr
 80104be:	bf00      	nop
 80104c0:	200006e0 	.word	0x200006e0
 80104c4:	20001824 	.word	0x20001824

080104c8 <LoRaMacIsStopped>:

bool LoRaMacIsStopped( void )
{
 80104c8:	b480      	push	{r7}
 80104ca:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 80104cc:	4b05      	ldr	r3, [pc, #20]	@ (80104e4 <LoRaMacIsStopped+0x1c>)
 80104ce:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80104d2:	2b01      	cmp	r3, #1
 80104d4:	d101      	bne.n	80104da <LoRaMacIsStopped+0x12>
    {
        return true;
 80104d6:	2301      	movs	r3, #1
 80104d8:	e000      	b.n	80104dc <LoRaMacIsStopped+0x14>
    }
    return false;
 80104da:	2300      	movs	r3, #0
}
 80104dc:	4618      	mov	r0, r3
 80104de:	46bd      	mov	sp, r7
 80104e0:	bc80      	pop	{r7}
 80104e2:	4770      	bx	lr
 80104e4:	200006e0 	.word	0x200006e0

080104e8 <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 80104e8:	b480      	push	{r7}
 80104ea:	b083      	sub	sp, #12
 80104ec:	af00      	add	r7, sp, #0
 80104ee:	4603      	mov	r3, r0
 80104f0:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 80104f2:	4a04      	ldr	r2, [pc, #16]	@ (8010504 <LoRaMacEnableRequests+0x1c>)
 80104f4:	79fb      	ldrb	r3, [r7, #7]
 80104f6:	f882 3492 	strb.w	r3, [r2, #1170]	@ 0x492
}
 80104fa:	bf00      	nop
 80104fc:	370c      	adds	r7, #12
 80104fe:	46bd      	mov	sp, r7
 8010500:	bc80      	pop	{r7}
 8010502:	4770      	bx	lr
 8010504:	200006e0 	.word	0x200006e0

08010508 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 8010508:	b580      	push	{r7, lr}
 801050a:	b082      	sub	sp, #8
 801050c:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 801050e:	4b2c      	ldr	r3, [pc, #176]	@ (80105c0 <LoRaMacHandleRequestEvents+0xb8>)
 8010510:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8010514:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 8010516:	4b2a      	ldr	r3, [pc, #168]	@ (80105c0 <LoRaMacHandleRequestEvents+0xb8>)
 8010518:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 801051c:	2b00      	cmp	r3, #0
 801051e:	d14a      	bne.n	80105b6 <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8010520:	4b27      	ldr	r3, [pc, #156]	@ (80105c0 <LoRaMacHandleRequestEvents+0xb8>)
 8010522:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8010526:	f003 0301 	and.w	r3, r3, #1
 801052a:	b2db      	uxtb	r3, r3
 801052c:	2b00      	cmp	r3, #0
 801052e:	d006      	beq.n	801053e <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 8010530:	4a23      	ldr	r2, [pc, #140]	@ (80105c0 <LoRaMacHandleRequestEvents+0xb8>)
 8010532:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8010536:	f36f 0300 	bfc	r3, #0, #1
 801053a:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 801053e:	4b20      	ldr	r3, [pc, #128]	@ (80105c0 <LoRaMacHandleRequestEvents+0xb8>)
 8010540:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8010544:	f003 0304 	and.w	r3, r3, #4
 8010548:	b2db      	uxtb	r3, r3
 801054a:	2b00      	cmp	r3, #0
 801054c:	d006      	beq.n	801055c <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 801054e:	4a1c      	ldr	r2, [pc, #112]	@ (80105c0 <LoRaMacHandleRequestEvents+0xb8>)
 8010550:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8010554:	f36f 0382 	bfc	r3, #2, #1
 8010558:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 801055c:	2001      	movs	r0, #1
 801055e:	f7ff ffc3 	bl	80104e8 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 8010562:	793b      	ldrb	r3, [r7, #4]
 8010564:	f003 0301 	and.w	r3, r3, #1
 8010568:	b2db      	uxtb	r3, r3
 801056a:	2b00      	cmp	r3, #0
 801056c:	d005      	beq.n	801057a <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 801056e:	4b14      	ldr	r3, [pc, #80]	@ (80105c0 <LoRaMacHandleRequestEvents+0xb8>)
 8010570:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 8010574:	681b      	ldr	r3, [r3, #0]
 8010576:	4813      	ldr	r0, [pc, #76]	@ (80105c4 <LoRaMacHandleRequestEvents+0xbc>)
 8010578:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 801057a:	793b      	ldrb	r3, [r7, #4]
 801057c:	f003 0304 	and.w	r3, r3, #4
 8010580:	b2db      	uxtb	r3, r3
 8010582:	2b00      	cmp	r3, #0
 8010584:	d00e      	beq.n	80105a4 <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 8010586:	4810      	ldr	r0, [pc, #64]	@ (80105c8 <LoRaMacHandleRequestEvents+0xc0>)
 8010588:	f004 fd3a 	bl	8015000 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 801058c:	f004 fd8a 	bl	80150a4 <LoRaMacConfirmQueueGetCnt>
 8010590:	4603      	mov	r3, r0
 8010592:	2b00      	cmp	r3, #0
 8010594:	d006      	beq.n	80105a4 <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 8010596:	4a0a      	ldr	r2, [pc, #40]	@ (80105c0 <LoRaMacHandleRequestEvents+0xb8>)
 8010598:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 801059c:	f043 0304 	orr.w	r3, r3, #4
 80105a0:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 80105a4:	f004 f834 	bl	8014610 <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 80105a8:	4a05      	ldr	r2, [pc, #20]	@ (80105c0 <LoRaMacHandleRequestEvents+0xb8>)
 80105aa:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 80105ae:	f36f 1304 	bfc	r3, #4, #1
 80105b2:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    }
}
 80105b6:	bf00      	nop
 80105b8:	3708      	adds	r7, #8
 80105ba:	46bd      	mov	sp, r7
 80105bc:	bd80      	pop	{r7, pc}
 80105be:	bf00      	nop
 80105c0:	200006e0 	.word	0x200006e0
 80105c4:	20000b20 	.word	0x20000b20
 80105c8:	20000b34 	.word	0x20000b34

080105cc <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 80105cc:	b580      	push	{r7, lr}
 80105ce:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 80105d0:	4b16      	ldr	r3, [pc, #88]	@ (801062c <LoRaMacHandleIndicationEvents+0x60>)
 80105d2:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 80105d6:	f003 0308 	and.w	r3, r3, #8
 80105da:	b2db      	uxtb	r3, r3
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d00d      	beq.n	80105fc <LoRaMacHandleIndicationEvents+0x30>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 80105e0:	4a12      	ldr	r2, [pc, #72]	@ (801062c <LoRaMacHandleIndicationEvents+0x60>)
 80105e2:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 80105e6:	f36f 03c3 	bfc	r3, #3, #1
 80105ea:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 80105ee:	4b0f      	ldr	r3, [pc, #60]	@ (801062c <LoRaMacHandleIndicationEvents+0x60>)
 80105f0:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 80105f4:	68db      	ldr	r3, [r3, #12]
 80105f6:	490e      	ldr	r1, [pc, #56]	@ (8010630 <LoRaMacHandleIndicationEvents+0x64>)
 80105f8:	480e      	ldr	r0, [pc, #56]	@ (8010634 <LoRaMacHandleIndicationEvents+0x68>)
 80105fa:	4798      	blx	r3
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80105fc:	4b0b      	ldr	r3, [pc, #44]	@ (801062c <LoRaMacHandleIndicationEvents+0x60>)
 80105fe:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8010602:	f003 0302 	and.w	r3, r3, #2
 8010606:	b2db      	uxtb	r3, r3
 8010608:	2b00      	cmp	r3, #0
 801060a:	d00d      	beq.n	8010628 <LoRaMacHandleIndicationEvents+0x5c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 801060c:	4a07      	ldr	r2, [pc, #28]	@ (801062c <LoRaMacHandleIndicationEvents+0x60>)
 801060e:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8010612:	f36f 0341 	bfc	r3, #1, #1
 8010616:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 801061a:	4b04      	ldr	r3, [pc, #16]	@ (801062c <LoRaMacHandleIndicationEvents+0x60>)
 801061c:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 8010620:	685b      	ldr	r3, [r3, #4]
 8010622:	4903      	ldr	r1, [pc, #12]	@ (8010630 <LoRaMacHandleIndicationEvents+0x64>)
 8010624:	4804      	ldr	r0, [pc, #16]	@ (8010638 <LoRaMacHandleIndicationEvents+0x6c>)
 8010626:	4798      	blx	r3
    }
}
 8010628:	bf00      	nop
 801062a:	bd80      	pop	{r7, pc}
 801062c:	200006e0 	.word	0x200006e0
 8010630:	20000b6c 	.word	0x20000b6c
 8010634:	20000b48 	.word	0x20000b48
 8010638:	20000b00 	.word	0x20000b00

0801063c <LoRaMacHandleMcpsRequest>:
    }
}
#endif /* LORAMAC_VERSION */

static void LoRaMacHandleMcpsRequest( void )
{
 801063c:	b580      	push	{r7, lr}
 801063e:	b082      	sub	sp, #8
 8010640:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8010642:	4b2a      	ldr	r3, [pc, #168]	@ (80106ec <LoRaMacHandleMcpsRequest+0xb0>)
 8010644:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8010648:	f003 0301 	and.w	r3, r3, #1
 801064c:	b2db      	uxtb	r3, r3
 801064e:	2b00      	cmp	r3, #0
 8010650:	d048      	beq.n	80106e4 <LoRaMacHandleMcpsRequest+0xa8>
    {
        bool stopRetransmission = false;
 8010652:	2300      	movs	r3, #0
 8010654:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 8010656:	2300      	movs	r3, #0
 8010658:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 801065a:	4b24      	ldr	r3, [pc, #144]	@ (80106ec <LoRaMacHandleMcpsRequest+0xb0>)
 801065c:	f893 3440 	ldrb.w	r3, [r3, #1088]	@ 0x440
 8010660:	2b00      	cmp	r3, #0
 8010662:	d004      	beq.n	801066e <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 8010664:	4b21      	ldr	r3, [pc, #132]	@ (80106ec <LoRaMacHandleMcpsRequest+0xb0>)
 8010666:	f893 3440 	ldrb.w	r3, [r3, #1088]	@ 0x440
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 801066a:	2b03      	cmp	r3, #3
 801066c:	d104      	bne.n	8010678 <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 801066e:	f002 f94f 	bl	8012910 <CheckRetransUnconfirmedUplink>
 8010672:	4603      	mov	r3, r0
 8010674:	71fb      	strb	r3, [r7, #7]
 8010676:	e010      	b.n	801069a <LoRaMacHandleMcpsRequest+0x5e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 8010678:	4b1c      	ldr	r3, [pc, #112]	@ (80106ec <LoRaMacHandleMcpsRequest+0xb0>)
 801067a:	f893 3440 	ldrb.w	r3, [r3, #1088]	@ 0x440
 801067e:	2b01      	cmp	r3, #1
 8010680:	d10b      	bne.n	801069a <LoRaMacHandleMcpsRequest+0x5e>
            else
            {
                waitForRetransmission = true;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( MacCtx.RetransmitTimeoutRetry == true )
 8010682:	4b1a      	ldr	r3, [pc, #104]	@ (80106ec <LoRaMacHandleMcpsRequest+0xb0>)
 8010684:	f893 3419 	ldrb.w	r3, [r3, #1049]	@ 0x419
 8010688:	2b00      	cmp	r3, #0
 801068a:	d004      	beq.n	8010696 <LoRaMacHandleMcpsRequest+0x5a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 801068c:	f002 f96c 	bl	8012968 <CheckRetransConfirmedUplink>
 8010690:	4603      	mov	r3, r0
 8010692:	71fb      	strb	r3, [r7, #7]
 8010694:	e001      	b.n	801069a <LoRaMacHandleMcpsRequest+0x5e>
            }
            else
            {
                waitForRetransmission = true;
 8010696:	2301      	movs	r3, #1
 8010698:	71bb      	strb	r3, [r7, #6]
            }
#endif /* LORAMAC_VERSION */
        }

        if( stopRetransmission == true )
 801069a:	79fb      	ldrb	r3, [r7, #7]
 801069c:	2b00      	cmp	r3, #0
 801069e:	d00d      	beq.n	80106bc <LoRaMacHandleMcpsRequest+0x80>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 80106a0:	4813      	ldr	r0, [pc, #76]	@ (80106f0 <LoRaMacHandleMcpsRequest+0xb4>)
 80106a2:	f00d fe9d 	bl	801e3e0 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 80106a6:	4b11      	ldr	r3, [pc, #68]	@ (80106ec <LoRaMacHandleMcpsRequest+0xb0>)
 80106a8:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80106ac:	f023 0320 	bic.w	r3, r3, #32
 80106b0:	4a0e      	ldr	r2, [pc, #56]	@ (80106ec <LoRaMacHandleMcpsRequest+0xb0>)
 80106b2:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
            StopRetransmission( );
 80106b6:	f002 f991 	bl	80129dc <StopRetransmission>
#endif /* LORAMAC_VERSION */
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 80106ba:	e013      	b.n	80106e4 <LoRaMacHandleMcpsRequest+0xa8>
        else if( waitForRetransmission == false )
 80106bc:	79bb      	ldrb	r3, [r7, #6]
 80106be:	f083 0301 	eor.w	r3, r3, #1
 80106c2:	b2db      	uxtb	r3, r3
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d00d      	beq.n	80106e4 <LoRaMacHandleMcpsRequest+0xa8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 80106c8:	4a08      	ldr	r2, [pc, #32]	@ (80106ec <LoRaMacHandleMcpsRequest+0xb0>)
 80106ca:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 80106ce:	f36f 1304 	bfc	r3, #4, #1
 80106d2:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
            MacCtx.RetransmitTimeoutRetry = false;
 80106d6:	4b05      	ldr	r3, [pc, #20]	@ (80106ec <LoRaMacHandleMcpsRequest+0xb0>)
 80106d8:	2200      	movs	r2, #0
 80106da:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
            OnTxDelayedTimerEvent( NULL );
 80106de:	2000      	movs	r0, #0
 80106e0:	f000 f9c8 	bl	8010a74 <OnTxDelayedTimerEvent>
}
 80106e4:	bf00      	nop
 80106e6:	3708      	adds	r7, #8
 80106e8:	46bd      	mov	sp, r7
 80106ea:	bd80      	pop	{r7, pc}
 80106ec:	200006e0 	.word	0x200006e0
 80106f0:	20000a48 	.word	0x20000a48

080106f4 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 80106f4:	b580      	push	{r7, lr}
 80106f6:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 80106f8:	4b18      	ldr	r3, [pc, #96]	@ (801075c <LoRaMacHandleMlmeRequest+0x68>)
 80106fa:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 80106fe:	f003 0304 	and.w	r3, r3, #4
 8010702:	b2db      	uxtb	r3, r3
 8010704:	2b00      	cmp	r3, #0
 8010706:	d026      	beq.n	8010756 <LoRaMacHandleMlmeRequest+0x62>
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_1 ) == true ) ||
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_2 ) == true ) )
        {
            MacCtx.ChannelsNbTransCounter = 0;
#else
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8010708:	2001      	movs	r0, #1
 801070a:	f004 fc5f 	bl	8014fcc <LoRaMacConfirmQueueIsCmdActive>
 801070e:	4603      	mov	r3, r0
 8010710:	2b00      	cmp	r3, #0
 8010712:	d012      	beq.n	801073a <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 8010714:	2001      	movs	r0, #1
 8010716:	f004 fbfb 	bl	8014f10 <LoRaMacConfirmQueueGetStatus>
 801071a:	4603      	mov	r3, r0
 801071c:	2b00      	cmp	r3, #0
 801071e:	d103      	bne.n	8010728 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 8010720:	4b0e      	ldr	r3, [pc, #56]	@ (801075c <LoRaMacHandleMlmeRequest+0x68>)
 8010722:	2200      	movs	r2, #0
 8010724:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
            }
#endif /* LORAMAC_VERSION */
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8010728:	4b0c      	ldr	r3, [pc, #48]	@ (801075c <LoRaMacHandleMlmeRequest+0x68>)
 801072a:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 801072e:	f023 0302 	bic.w	r3, r3, #2
 8010732:	4a0a      	ldr	r2, [pc, #40]	@ (801075c <LoRaMacHandleMlmeRequest+0x68>)
 8010734:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
#endif /* LORAMAC_VERSION */
    }
}
 8010738:	e00d      	b.n	8010756 <LoRaMacHandleMlmeRequest+0x62>
        else if( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true )
 801073a:	2006      	movs	r0, #6
 801073c:	f004 fc46 	bl	8014fcc <LoRaMacConfirmQueueIsCmdActive>
 8010740:	4603      	mov	r3, r0
 8010742:	2b00      	cmp	r3, #0
 8010744:	d007      	beq.n	8010756 <LoRaMacHandleMlmeRequest+0x62>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8010746:	4b05      	ldr	r3, [pc, #20]	@ (801075c <LoRaMacHandleMlmeRequest+0x68>)
 8010748:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 801074c:	f023 0302 	bic.w	r3, r3, #2
 8010750:	4a02      	ldr	r2, [pc, #8]	@ (801075c <LoRaMacHandleMlmeRequest+0x68>)
 8010752:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
}
 8010756:	bf00      	nop
 8010758:	bd80      	pop	{r7, pc}
 801075a:	bf00      	nop
 801075c:	200006e0 	.word	0x200006e0

08010760 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 8010760:	b580      	push	{r7, lr}
 8010762:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8010764:	200b      	movs	r0, #11
 8010766:	f004 fc31 	bl	8014fcc <LoRaMacConfirmQueueIsCmdActive>
 801076a:	4603      	mov	r3, r0
 801076c:	2b00      	cmp	r3, #0
 801076e:	d019      	beq.n	80107a4 <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 8010770:	4b0e      	ldr	r3, [pc, #56]	@ (80107ac <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8010772:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8010776:	f003 0301 	and.w	r3, r3, #1
 801077a:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 801077c:	2b00      	cmp	r3, #0
 801077e:	d111      	bne.n	80107a4 <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8010780:	4b0a      	ldr	r3, [pc, #40]	@ (80107ac <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8010782:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8010786:	f003 0304 	and.w	r3, r3, #4
 801078a:	b2db      	uxtb	r3, r3
 801078c:	2b00      	cmp	r3, #0
 801078e:	d009      	beq.n	80107a4 <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8010790:	4b06      	ldr	r3, [pc, #24]	@ (80107ac <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8010792:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010796:	f023 0302 	bic.w	r3, r3, #2
 801079a:	4a04      	ldr	r2, [pc, #16]	@ (80107ac <LoRaMacCheckForBeaconAcquisition+0x4c>)
 801079c:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
            return 0x01;
 80107a0:	2301      	movs	r3, #1
 80107a2:	e000      	b.n	80107a6 <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 80107a4:	2300      	movs	r3, #0
}
 80107a6:	4618      	mov	r0, r3
 80107a8:	bd80      	pop	{r7, pc}
 80107aa:	bf00      	nop
 80107ac:	200006e0 	.word	0x200006e0

080107b0 <CheckForMinimumAbpDatarate>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckForMinimumAbpDatarate( bool adr, ActivationType_t activation, bool datarateChanged )
{
 80107b0:	b480      	push	{r7}
 80107b2:	b083      	sub	sp, #12
 80107b4:	af00      	add	r7, sp, #0
 80107b6:	4603      	mov	r3, r0
 80107b8:	71fb      	strb	r3, [r7, #7]
 80107ba:	460b      	mov	r3, r1
 80107bc:	71bb      	strb	r3, [r7, #6]
 80107be:	4613      	mov	r3, r2
 80107c0:	717b      	strb	r3, [r7, #5]
    if( ( adr == true ) &&
 80107c2:	79fb      	ldrb	r3, [r7, #7]
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d00a      	beq.n	80107de <CheckForMinimumAbpDatarate+0x2e>
 80107c8:	79bb      	ldrb	r3, [r7, #6]
 80107ca:	2b01      	cmp	r3, #1
 80107cc:	d107      	bne.n	80107de <CheckForMinimumAbpDatarate+0x2e>
        ( activation == ACTIVATION_TYPE_ABP ) &&
        ( datarateChanged == false ) )
 80107ce:	797b      	ldrb	r3, [r7, #5]
 80107d0:	f083 0301 	eor.w	r3, r3, #1
 80107d4:	b2db      	uxtb	r3, r3
        ( activation == ACTIVATION_TYPE_ABP ) &&
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d001      	beq.n	80107de <CheckForMinimumAbpDatarate+0x2e>
    {
        return true;
 80107da:	2301      	movs	r3, #1
 80107dc:	e000      	b.n	80107e0 <CheckForMinimumAbpDatarate+0x30>
    }
    return false;
 80107de:	2300      	movs	r3, #0
}
 80107e0:	4618      	mov	r0, r3
 80107e2:	370c      	adds	r7, #12
 80107e4:	46bd      	mov	sp, r7
 80107e6:	bc80      	pop	{r7}
 80107e8:	4770      	bx	lr
	...

080107ec <LoRaMacCheckForRxAbort>:
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
 80107ec:	b480      	push	{r7}
 80107ee:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 80107f0:	4b0d      	ldr	r3, [pc, #52]	@ (8010828 <LoRaMacCheckForRxAbort+0x3c>)
 80107f2:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80107f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d00f      	beq.n	801081e <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 80107fe:	4b0a      	ldr	r3, [pc, #40]	@ (8010828 <LoRaMacCheckForRxAbort+0x3c>)
 8010800:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010804:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010808:	4a07      	ldr	r2, [pc, #28]	@ (8010828 <LoRaMacCheckForRxAbort+0x3c>)
 801080a:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 801080e:	4b06      	ldr	r3, [pc, #24]	@ (8010828 <LoRaMacCheckForRxAbort+0x3c>)
 8010810:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010814:	f023 0302 	bic.w	r3, r3, #2
 8010818:	4a03      	ldr	r2, [pc, #12]	@ (8010828 <LoRaMacCheckForRxAbort+0x3c>)
 801081a:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
    }
}
 801081e:	bf00      	nop
 8010820:	46bd      	mov	sp, r7
 8010822:	bc80      	pop	{r7}
 8010824:	4770      	bx	lr
 8010826:	bf00      	nop
 8010828:	200006e0 	.word	0x200006e0

0801082c <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 801082c:	b580      	push	{r7, lr}
 801082e:	b084      	sub	sp, #16
 8010830:	af00      	add	r7, sp, #0
 8010832:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 8010834:	2300      	movs	r3, #0
 8010836:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 8010838:	2300      	movs	r3, #0
 801083a:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 801083c:	4b51      	ldr	r3, [pc, #324]	@ (8010984 <LoRaMacHandleNvm+0x158>)
 801083e:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010842:	2b00      	cmp	r3, #0
 8010844:	f040 8099 	bne.w	801097a <LoRaMacHandleNvm+0x14e>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	2124      	movs	r1, #36	@ 0x24
 801084c:	4618      	mov	r0, r3
 801084e:	f009 fc85 	bl	801a15c <Crc32>
 8010852:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010858:	68ba      	ldr	r2, [r7, #8]
 801085a:	429a      	cmp	r2, r3
 801085c:	d006      	beq.n	801086c <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	68ba      	ldr	r2, [r7, #8]
 8010862:	625a      	str	r2, [r3, #36]	@ 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 8010864:	89fb      	ldrh	r3, [r7, #14]
 8010866:	f043 0301 	orr.w	r3, r3, #1
 801086a:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	3328      	adds	r3, #40	@ 0x28
 8010870:	211c      	movs	r1, #28
 8010872:	4618      	mov	r0, r3
 8010874:	f009 fc72 	bl	801a15c <Crc32>
 8010878:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801087e:	68ba      	ldr	r2, [r7, #8]
 8010880:	429a      	cmp	r2, r3
 8010882:	d006      	beq.n	8010892 <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	68ba      	ldr	r2, [r7, #8]
 8010888:	645a      	str	r2, [r3, #68]	@ 0x44
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 801088a:	89fb      	ldrh	r3, [r7, #14]
 801088c:	f043 0302 	orr.w	r3, r3, #2
 8010890:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	3348      	adds	r3, #72	@ 0x48
 8010896:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801089a:	4618      	mov	r0, r3
 801089c:	f009 fc5e 	bl	801a15c <Crc32>
 80108a0:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80108a8:	68ba      	ldr	r2, [r7, #8]
 80108aa:	429a      	cmp	r2, r3
 80108ac:	d007      	beq.n	80108be <LoRaMacHandleNvm+0x92>
    {
        nvmData->MacGroup2.Crc32 = crc;
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	68ba      	ldr	r2, [r7, #8]
 80108b2:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 80108b6:	89fb      	ldrh	r3, [r7, #14]
 80108b8:	f043 0304 	orr.w	r3, r3, #4
 80108bc:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 80108c4:	21d4      	movs	r1, #212	@ 0xd4
 80108c6:	4618      	mov	r0, r3
 80108c8:	f009 fc48 	bl	801a15c <Crc32>
 80108cc:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 80108d4:	68ba      	ldr	r2, [r7, #8]
 80108d6:	429a      	cmp	r2, r3
 80108d8:	d007      	beq.n	80108ea <LoRaMacHandleNvm+0xbe>
    {
        nvmData->SecureElement.Crc32 = crc;
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	68ba      	ldr	r2, [r7, #8]
 80108de:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 80108e2:	89fb      	ldrh	r3, [r7, #14]
 80108e4:	f043 0308 	orr.w	r3, r3, #8
 80108e8:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	f503 7309 	add.w	r3, r3, #548	@ 0x224
 80108f0:	2110      	movs	r1, #16
 80108f2:	4618      	mov	r0, r3
 80108f4:	f009 fc32 	bl	801a15c <Crc32>
 80108f8:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8010900:	68ba      	ldr	r2, [r7, #8]
 8010902:	429a      	cmp	r2, r3
 8010904:	d007      	beq.n	8010916 <LoRaMacHandleNvm+0xea>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	68ba      	ldr	r2, [r7, #8]
 801090a:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 801090e:	89fb      	ldrh	r3, [r7, #14]
 8010910:	f043 0310 	orr.w	r3, r3, #16
 8010914:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 801091c:	f44f 715e 	mov.w	r1, #888	@ 0x378
 8010920:	4618      	mov	r0, r3
 8010922:	f009 fc1b 	bl	801a15c <Crc32>
 8010926:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	f8d3 35b0 	ldr.w	r3, [r3, #1456]	@ 0x5b0
 801092e:	68ba      	ldr	r2, [r7, #8]
 8010930:	429a      	cmp	r2, r3
 8010932:	d007      	beq.n	8010944 <LoRaMacHandleNvm+0x118>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	68ba      	ldr	r2, [r7, #8]
 8010938:	f8c3 25b0 	str.w	r2, [r3, #1456]	@ 0x5b0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 801093c:	89fb      	ldrh	r3, [r7, #14]
 801093e:	f043 0320 	orr.w	r3, r3, #32
 8010942:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	f203 53b4 	addw	r3, r3, #1460	@ 0x5b4
 801094a:	2114      	movs	r1, #20
 801094c:	4618      	mov	r0, r3
 801094e:	f009 fc05 	bl	801a15c <Crc32>
 8010952:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	f8d3 35c8 	ldr.w	r3, [r3, #1480]	@ 0x5c8
 801095a:	68ba      	ldr	r2, [r7, #8]
 801095c:	429a      	cmp	r2, r3
 801095e:	d007      	beq.n	8010970 <LoRaMacHandleNvm+0x144>
    {
        nvmData->ClassB.Crc32 = crc;
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	68ba      	ldr	r2, [r7, #8]
 8010964:	f8c3 25c8 	str.w	r2, [r3, #1480]	@ 0x5c8
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 8010968:	89fb      	ldrh	r3, [r7, #14]
 801096a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801096e:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 8010970:	89fb      	ldrh	r3, [r7, #14]
 8010972:	4618      	mov	r0, r3
 8010974:	f002 f884 	bl	8012a80 <CallNvmDataChangeCallback>
 8010978:	e000      	b.n	801097c <LoRaMacHandleNvm+0x150>
        return;
 801097a:	bf00      	nop
}
 801097c:	3710      	adds	r7, #16
 801097e:	46bd      	mov	sp, r7
 8010980:	bd80      	pop	{r7, pc}
 8010982:	bf00      	nop
 8010984:	200006e0 	.word	0x200006e0

08010988 <LoRaMacHandleResponseTimeout>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool LoRaMacHandleResponseTimeout( TimerTime_t timeoutInMs, TimerTime_t startTimeInMs )
{
 8010988:	b580      	push	{r7, lr}
 801098a:	b084      	sub	sp, #16
 801098c:	af00      	add	r7, sp, #0
 801098e:	6078      	str	r0, [r7, #4]
 8010990:	6039      	str	r1, [r7, #0]
    if( startTimeInMs != 0 )
 8010992:	683b      	ldr	r3, [r7, #0]
 8010994:	2b00      	cmp	r3, #0
 8010996:	d00d      	beq.n	80109b4 <LoRaMacHandleResponseTimeout+0x2c>
    {
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
 8010998:	6838      	ldr	r0, [r7, #0]
 801099a:	f00d fe4d 	bl	801e638 <UTIL_TIMER_GetElapsedTime>
 801099e:	60f8      	str	r0, [r7, #12]
        if( elapsedTime > timeoutInMs )
 80109a0:	68fa      	ldr	r2, [r7, #12]
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	429a      	cmp	r2, r3
 80109a6:	d905      	bls.n	80109b4 <LoRaMacHandleResponseTimeout+0x2c>
        {
            Nvm.MacGroup1.SrvAckRequested = false;
 80109a8:	4b05      	ldr	r3, [pc, #20]	@ (80109c0 <LoRaMacHandleResponseTimeout+0x38>)
 80109aa:	2200      	movs	r2, #0
 80109ac:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
            return true;
 80109b0:	2301      	movs	r3, #1
 80109b2:	e000      	b.n	80109b6 <LoRaMacHandleResponseTimeout+0x2e>
        }
    }
    return false;
 80109b4:	2300      	movs	r3, #0
}
 80109b6:	4618      	mov	r0, r3
 80109b8:	3710      	adds	r7, #16
 80109ba:	46bd      	mov	sp, r7
 80109bc:	bd80      	pop	{r7, pc}
 80109be:	bf00      	nop
 80109c0:	20000bfc 	.word	0x20000bfc

080109c4 <LoRaMacProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacProcess( void )
{
 80109c4:	b580      	push	{r7, lr}
 80109c6:	b082      	sub	sp, #8
 80109c8:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 80109ca:	2300      	movs	r3, #0
 80109cc:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 80109ce:	f7ff fd0b 	bl	80103e8 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 80109d2:	f003 fe8c 	bl	80146ee <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 80109d6:	4b25      	ldr	r3, [pc, #148]	@ (8010a6c <LoRaMacProcess+0xa8>)
 80109d8:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 80109dc:	f003 0310 	and.w	r3, r3, #16
 80109e0:	b2db      	uxtb	r3, r3
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d023      	beq.n	8010a2e <LoRaMacProcess+0x6a>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 80109e6:	2000      	movs	r0, #0
 80109e8:	f7ff fd7e 	bl	80104e8 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 80109ec:	f7ff fefe 	bl	80107ec <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 80109f0:	f002 f864 	bl	8012abc <IsRequestPending>
 80109f4:	4603      	mov	r3, r0
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d006      	beq.n	8010a08 <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 80109fa:	f7ff feb1 	bl	8010760 <LoRaMacCheckForBeaconAcquisition>
 80109fe:	4603      	mov	r3, r0
 8010a00:	461a      	mov	r2, r3
 8010a02:	79fb      	ldrb	r3, [r7, #7]
 8010a04:	4313      	orrs	r3, r2
 8010a06:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 8010a08:	79fb      	ldrb	r3, [r7, #7]
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d103      	bne.n	8010a16 <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 8010a0e:	f7ff fe71 	bl	80106f4 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 8010a12:	f7ff fe13 	bl	801063c <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 8010a16:	f7ff fd77 	bl	8010508 <LoRaMacHandleRequestEvents>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8010a1a:	2001      	movs	r0, #1
 8010a1c:	f7ff fd64 	bl	80104e8 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8010a20:	4a12      	ldr	r2, [pc, #72]	@ (8010a6c <LoRaMacProcess+0xa8>)
 8010a22:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8010a26:	f043 0320 	orr.w	r3, r3, #32
 8010a2a:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    }
    LoRaMacHandleIndicationEvents( );
 8010a2e:	f7ff fdcd 	bl	80105cc <LoRaMacHandleIndicationEvents>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    LoRaMacHandleRejoinEvents( );
#endif /* LORAMAC_VERSION */

    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 8010a32:	4b0e      	ldr	r3, [pc, #56]	@ (8010a6c <LoRaMacProcess+0xa8>)
 8010a34:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 8010a38:	2b02      	cmp	r3, #2
 8010a3a:	d101      	bne.n	8010a40 <LoRaMacProcess+0x7c>
    {
        OpenContinuousRxCWindow( );
 8010a3c:	f001 fc28 	bl	8012290 <OpenContinuousRxCWindow>
    }
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 8010a40:	4b0a      	ldr	r3, [pc, #40]	@ (8010a6c <LoRaMacProcess+0xa8>)
 8010a42:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8010a46:	f003 0320 	and.w	r3, r3, #32
 8010a4a:	b2db      	uxtb	r3, r3
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d009      	beq.n	8010a64 <LoRaMacProcess+0xa0>
    {
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 8010a50:	4a06      	ldr	r2, [pc, #24]	@ (8010a6c <LoRaMacProcess+0xa8>)
 8010a52:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8010a56:	f36f 1345 	bfc	r3, #5, #1
 8010a5a:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        LoRaMacHandleNvm( &Nvm );
 8010a5e:	4804      	ldr	r0, [pc, #16]	@ (8010a70 <LoRaMacProcess+0xac>)
 8010a60:	f7ff fee4 	bl	801082c <LoRaMacHandleNvm>
    }
}
 8010a64:	bf00      	nop
 8010a66:	3708      	adds	r7, #8
 8010a68:	46bd      	mov	sp, r7
 8010a6a:	bd80      	pop	{r7, pc}
 8010a6c:	200006e0 	.word	0x200006e0
 8010a70:	20000bfc 	.word	0x20000bfc

08010a74 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 8010a74:	b580      	push	{r7, lr}
 8010a76:	b082      	sub	sp, #8
 8010a78:	af00      	add	r7, sp, #0
 8010a7a:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 8010a7c:	481e      	ldr	r0, [pc, #120]	@ (8010af8 <OnTxDelayedTimerEvent+0x84>)
 8010a7e:	f00d fcaf 	bl	801e3e0 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8010a82:	4b1e      	ldr	r3, [pc, #120]	@ (8010afc <OnTxDelayedTimerEvent+0x88>)
 8010a84:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010a88:	f023 0320 	bic.w	r3, r3, #32
 8010a8c:	4a1b      	ldr	r2, [pc, #108]	@ (8010afc <OnTxDelayedTimerEvent+0x88>)
 8010a8e:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 8010a92:	4b1b      	ldr	r3, [pc, #108]	@ (8010b00 <OnTxDelayedTimerEvent+0x8c>)
 8010a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010a98:	4a18      	ldr	r2, [pc, #96]	@ (8010afc <OnTxDelayedTimerEvent+0x88>)
 8010a9a:	f8d2 2498 	ldr.w	r2, [r2, #1176]	@ 0x498
 8010a9e:	4611      	mov	r1, r2
 8010aa0:	4618      	mov	r0, r3
 8010aa2:	f7ff ff71 	bl	8010988 <LoRaMacHandleResponseTimeout>
 8010aa6:	4603      	mov	r3, r0
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d11e      	bne.n	8010aea <OnTxDelayedTimerEvent+0x76>
        return;
    }
#endif /* LORAMAC_VERSION */

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 8010aac:	2001      	movs	r0, #1
 8010aae:	f001 f939 	bl	8011d24 <ScheduleTx>
 8010ab2:	4603      	mov	r3, r0
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d01a      	beq.n	8010aee <OnTxDelayedTimerEvent+0x7a>
 8010ab8:	2b0b      	cmp	r3, #11
 8010aba:	d018      	beq.n	8010aee <OnTxDelayedTimerEvent+0x7a>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010abc:	4b10      	ldr	r3, [pc, #64]	@ (8010b00 <OnTxDelayedTimerEvent+0x8c>)
 8010abe:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8010ac2:	b2da      	uxtb	r2, r3
 8010ac4:	4b0d      	ldr	r3, [pc, #52]	@ (8010afc <OnTxDelayedTimerEvent+0x88>)
 8010ac6:	f883 2442 	strb.w	r2, [r3, #1090]	@ 0x442
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 8010aca:	4b0c      	ldr	r3, [pc, #48]	@ (8010afc <OnTxDelayedTimerEvent+0x88>)
 8010acc:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8010ad0:	4b0a      	ldr	r3, [pc, #40]	@ (8010afc <OnTxDelayedTimerEvent+0x88>)
 8010ad2:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8010ad6:	4b09      	ldr	r3, [pc, #36]	@ (8010afc <OnTxDelayedTimerEvent+0x88>)
 8010ad8:	2209      	movs	r2, #9
 8010ada:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 8010ade:	2009      	movs	r0, #9
 8010ae0:	f004 fa40 	bl	8014f64 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 8010ae4:	f001 ff7a 	bl	80129dc <StopRetransmission>
            break;
 8010ae8:	e002      	b.n	8010af0 <OnTxDelayedTimerEvent+0x7c>
        return;
 8010aea:	bf00      	nop
 8010aec:	e000      	b.n	8010af0 <OnTxDelayedTimerEvent+0x7c>
            break;
 8010aee:	bf00      	nop
        }
    }
}
 8010af0:	3708      	adds	r7, #8
 8010af2:	46bd      	mov	sp, r7
 8010af4:	bd80      	pop	{r7, pc}
 8010af6:	bf00      	nop
 8010af8:	20000a48 	.word	0x20000a48
 8010afc:	200006e0 	.word	0x200006e0
 8010b00:	20000bfc 	.word	0x20000bfc

08010b04 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 8010b04:	b580      	push	{r7, lr}
 8010b06:	b082      	sub	sp, #8
 8010b08:	af00      	add	r7, sp, #0
 8010b0a:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 8010b0c:	4b17      	ldr	r3, [pc, #92]	@ (8010b6c <OnRxWindow1TimerEvent+0x68>)
 8010b0e:	f893 241b 	ldrb.w	r2, [r3, #1051]	@ 0x41b
 8010b12:	4b16      	ldr	r3, [pc, #88]	@ (8010b6c <OnRxWindow1TimerEvent+0x68>)
 8010b14:	f883 23b8 	strb.w	r2, [r3, #952]	@ 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 8010b18:	4b15      	ldr	r3, [pc, #84]	@ (8010b70 <OnRxWindow1TimerEvent+0x6c>)
 8010b1a:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8010b1e:	b25a      	sxtb	r2, r3
 8010b20:	4b12      	ldr	r3, [pc, #72]	@ (8010b6c <OnRxWindow1TimerEvent+0x68>)
 8010b22:	f883 23bb 	strb.w	r2, [r3, #955]	@ 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010b26:	4b12      	ldr	r3, [pc, #72]	@ (8010b70 <OnRxWindow1TimerEvent+0x6c>)
 8010b28:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 8010b2c:	4b0f      	ldr	r3, [pc, #60]	@ (8010b6c <OnRxWindow1TimerEvent+0x68>)
 8010b2e:	f883 23c8 	strb.w	r2, [r3, #968]	@ 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8010b32:	4b0f      	ldr	r3, [pc, #60]	@ (8010b70 <OnRxWindow1TimerEvent+0x6c>)
 8010b34:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 8010b38:	4b0c      	ldr	r3, [pc, #48]	@ (8010b6c <OnRxWindow1TimerEvent+0x68>)
 8010b3a:	f883 23c9 	strb.w	r2, [r3, #969]	@ 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 8010b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8010b6c <OnRxWindow1TimerEvent+0x68>)
 8010b40:	2200      	movs	r2, #0
 8010b42:	f883 23ca 	strb.w	r2, [r3, #970]	@ 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 8010b46:	4b09      	ldr	r3, [pc, #36]	@ (8010b6c <OnRxWindow1TimerEvent+0x68>)
 8010b48:	2200      	movs	r2, #0
 8010b4a:	f883 23cb 	strb.w	r2, [r3, #971]	@ 0x3cb
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8010b4e:	4b08      	ldr	r3, [pc, #32]	@ (8010b70 <OnRxWindow1TimerEvent+0x6c>)
 8010b50:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 8010b54:	4b05      	ldr	r3, [pc, #20]	@ (8010b6c <OnRxWindow1TimerEvent+0x68>)
 8010b56:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 8010b5a:	4906      	ldr	r1, [pc, #24]	@ (8010b74 <OnRxWindow1TimerEvent+0x70>)
 8010b5c:	4806      	ldr	r0, [pc, #24]	@ (8010b78 <OnRxWindow1TimerEvent+0x74>)
 8010b5e:	f001 fb63 	bl	8012228 <RxWindowSetup>
}
 8010b62:	bf00      	nop
 8010b64:	3708      	adds	r7, #8
 8010b66:	46bd      	mov	sp, r7
 8010b68:	bd80      	pop	{r7, pc}
 8010b6a:	bf00      	nop
 8010b6c:	200006e0 	.word	0x200006e0
 8010b70:	20000bfc 	.word	0x20000bfc
 8010b74:	20000a98 	.word	0x20000a98
 8010b78:	20000a60 	.word	0x20000a60

08010b7c <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 8010b7c:	b580      	push	{r7, lr}
 8010b7e:	b082      	sub	sp, #8
 8010b80:	af00      	add	r7, sp, #0
 8010b82:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8010b84:	4b19      	ldr	r3, [pc, #100]	@ (8010bec <OnRxWindow2TimerEvent+0x70>)
 8010b86:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d029      	beq.n	8010be2 <OnRxWindow2TimerEvent+0x66>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8010b8e:	4b17      	ldr	r3, [pc, #92]	@ (8010bec <OnRxWindow2TimerEvent+0x70>)
 8010b90:	f893 241b 	ldrb.w	r2, [r3, #1051]	@ 0x41b
 8010b94:	4b15      	ldr	r3, [pc, #84]	@ (8010bec <OnRxWindow2TimerEvent+0x70>)
 8010b96:	f883 23d0 	strb.w	r2, [r3, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8010b9a:	4b15      	ldr	r3, [pc, #84]	@ (8010bf0 <OnRxWindow2TimerEvent+0x74>)
 8010b9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010b9e:	4a13      	ldr	r2, [pc, #76]	@ (8010bec <OnRxWindow2TimerEvent+0x70>)
 8010ba0:	f8c2 33d4 	str.w	r3, [r2, #980]	@ 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010ba4:	4b12      	ldr	r3, [pc, #72]	@ (8010bf0 <OnRxWindow2TimerEvent+0x74>)
 8010ba6:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 8010baa:	4b10      	ldr	r3, [pc, #64]	@ (8010bec <OnRxWindow2TimerEvent+0x70>)
 8010bac:	f883 23e0 	strb.w	r2, [r3, #992]	@ 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8010bb0:	4b0f      	ldr	r3, [pc, #60]	@ (8010bf0 <OnRxWindow2TimerEvent+0x74>)
 8010bb2:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 8010bb6:	4b0d      	ldr	r3, [pc, #52]	@ (8010bec <OnRxWindow2TimerEvent+0x70>)
 8010bb8:	f883 23e1 	strb.w	r2, [r3, #993]	@ 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 8010bbc:	4b0b      	ldr	r3, [pc, #44]	@ (8010bec <OnRxWindow2TimerEvent+0x70>)
 8010bbe:	2200      	movs	r2, #0
 8010bc0:	f883 23e2 	strb.w	r2, [r3, #994]	@ 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8010bc4:	4b09      	ldr	r3, [pc, #36]	@ (8010bec <OnRxWindow2TimerEvent+0x70>)
 8010bc6:	2201      	movs	r2, #1
 8010bc8:	f883 23e3 	strb.w	r2, [r3, #995]	@ 0x3e3
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8010bcc:	4b08      	ldr	r3, [pc, #32]	@ (8010bf0 <OnRxWindow2TimerEvent+0x74>)
 8010bce:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 8010bd2:	4b06      	ldr	r3, [pc, #24]	@ (8010bec <OnRxWindow2TimerEvent+0x70>)
 8010bd4:	f883 23e4 	strb.w	r2, [r3, #996]	@ 0x3e4
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 8010bd8:	4906      	ldr	r1, [pc, #24]	@ (8010bf4 <OnRxWindow2TimerEvent+0x78>)
 8010bda:	4807      	ldr	r0, [pc, #28]	@ (8010bf8 <OnRxWindow2TimerEvent+0x7c>)
 8010bdc:	f001 fb24 	bl	8012228 <RxWindowSetup>
 8010be0:	e000      	b.n	8010be4 <OnRxWindow2TimerEvent+0x68>
        return;
 8010be2:	bf00      	nop
}
 8010be4:	3708      	adds	r7, #8
 8010be6:	46bd      	mov	sp, r7
 8010be8:	bd80      	pop	{r7, pc}
 8010bea:	bf00      	nop
 8010bec:	200006e0 	.word	0x200006e0
 8010bf0:	20000bfc 	.word	0x20000bfc
 8010bf4:	20000ab0 	.word	0x20000ab0
 8010bf8:	20000a78 	.word	0x20000a78

08010bfc <OnRetransmitTimeoutTimerEvent>:

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static void OnRetransmitTimeoutTimerEvent( void* context )
{
 8010bfc:	b580      	push	{r7, lr}
 8010bfe:	b082      	sub	sp, #8
 8010c00:	af00      	add	r7, sp, #0
 8010c02:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 8010c04:	4808      	ldr	r0, [pc, #32]	@ (8010c28 <OnRetransmitTimeoutTimerEvent+0x2c>)
 8010c06:	f00d fbeb 	bl	801e3e0 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 8010c0a:	4b08      	ldr	r3, [pc, #32]	@ (8010c2c <OnRetransmitTimeoutTimerEvent+0x30>)
 8010c0c:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	d003      	beq.n	8010c1c <OnRetransmitTimeoutTimerEvent+0x20>
    {
        MacCtx.RetransmitTimeoutRetry = true;
 8010c14:	4b05      	ldr	r3, [pc, #20]	@ (8010c2c <OnRetransmitTimeoutTimerEvent+0x30>)
 8010c16:	2201      	movs	r2, #1
 8010c18:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
    }
    OnMacProcessNotify( );
 8010c1c:	f001 ff1a 	bl	8012a54 <OnMacProcessNotify>
}
 8010c20:	bf00      	nop
 8010c22:	3708      	adds	r7, #8
 8010c24:	46bd      	mov	sp, r7
 8010c26:	bd80      	pop	{r7, pc}
 8010c28:	20000ae0 	.word	0x20000ae0
 8010c2c:	200006e0 	.word	0x200006e0

08010c30 <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 8010c30:	b580      	push	{r7, lr}
 8010c32:	b084      	sub	sp, #16
 8010c34:	af00      	add	r7, sp, #0
 8010c36:	60ba      	str	r2, [r7, #8]
 8010c38:	607b      	str	r3, [r7, #4]
 8010c3a:	4603      	mov	r3, r0
 8010c3c:	73fb      	strb	r3, [r7, #15]
 8010c3e:	460b      	mov	r3, r1
 8010c40:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 8010c42:	68bb      	ldr	r3, [r7, #8]
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d005      	beq.n	8010c54 <GetFCntDown+0x24>
 8010c48:	69bb      	ldr	r3, [r7, #24]
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d002      	beq.n	8010c54 <GetFCntDown+0x24>
 8010c4e:	69fb      	ldr	r3, [r7, #28]
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d101      	bne.n	8010c58 <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8010c54:	2309      	movs	r3, #9
 8010c56:	e028      	b.n	8010caa <GetFCntDown+0x7a>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 8010c58:	7bfb      	ldrb	r3, [r7, #15]
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d016      	beq.n	8010c8c <GetFCntDown+0x5c>
 8010c5e:	2b01      	cmp	r3, #1
 8010c60:	d118      	bne.n	8010c94 <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 8010c62:	79bb      	ldrb	r3, [r7, #6]
 8010c64:	2b01      	cmp	r3, #1
 8010c66:	d10d      	bne.n	8010c84 <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 8010c68:	7bbb      	ldrb	r3, [r7, #14]
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d002      	beq.n	8010c74 <GetFCntDown+0x44>
 8010c6e:	7bbb      	ldrb	r3, [r7, #14]
 8010c70:	2b03      	cmp	r3, #3
 8010c72:	d103      	bne.n	8010c7c <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 8010c74:	69bb      	ldr	r3, [r7, #24]
 8010c76:	2202      	movs	r2, #2
 8010c78:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 8010c7a:	e00d      	b.n	8010c98 <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 8010c7c:	69bb      	ldr	r3, [r7, #24]
 8010c7e:	2201      	movs	r2, #1
 8010c80:	701a      	strb	r2, [r3, #0]
            break;
 8010c82:	e009      	b.n	8010c98 <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 8010c84:	69bb      	ldr	r3, [r7, #24]
 8010c86:	2203      	movs	r2, #3
 8010c88:	701a      	strb	r2, [r3, #0]
            break;
 8010c8a:	e005      	b.n	8010c98 <GetFCntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 8010c8c:	69bb      	ldr	r3, [r7, #24]
 8010c8e:	2204      	movs	r2, #4
 8010c90:	701a      	strb	r2, [r3, #0]
            break;
 8010c92:	e001      	b.n	8010c98 <GetFCntDown+0x68>
        case MULTICAST_3_ADDR:
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8010c94:	2305      	movs	r3, #5
 8010c96:	e008      	b.n	8010caa <GetFCntDown+0x7a>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
 8010c98:	69bb      	ldr	r3, [r7, #24]
 8010c9a:	7818      	ldrb	r0, [r3, #0]
 8010c9c:	68bb      	ldr	r3, [r7, #8]
 8010c9e:	89db      	ldrh	r3, [r3, #14]
 8010ca0:	69fa      	ldr	r2, [r7, #28]
 8010ca2:	4619      	mov	r1, r3
 8010ca4:	f004 fd9c 	bl	80157e0 <LoRaMacCryptoGetFCntDown>
 8010ca8:	4603      	mov	r3, r0
}
 8010caa:	4618      	mov	r0, r3
 8010cac:	3710      	adds	r7, #16
 8010cae:	46bd      	mov	sp, r7
 8010cb0:	bd80      	pop	{r7, pc}
	...

08010cb4 <SwitchClass>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 8010cb4:	b5b0      	push	{r4, r5, r7, lr}
 8010cb6:	b084      	sub	sp, #16
 8010cb8:	af00      	add	r7, sp, #0
 8010cba:	4603      	mov	r3, r0
 8010cbc:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010cbe:	2303      	movs	r3, #3
 8010cc0:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 8010cc2:	4b6e      	ldr	r3, [pc, #440]	@ (8010e7c <SwitchClass+0x1c8>)
 8010cc4:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8010cc8:	2b02      	cmp	r3, #2
 8010cca:	f000 80bb 	beq.w	8010e44 <SwitchClass+0x190>
 8010cce:	2b02      	cmp	r3, #2
 8010cd0:	f300 80ce 	bgt.w	8010e70 <SwitchClass+0x1bc>
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d003      	beq.n	8010ce0 <SwitchClass+0x2c>
 8010cd8:	2b01      	cmp	r3, #1
 8010cda:	f000 80a5 	beq.w	8010e28 <SwitchClass+0x174>
 8010cde:	e0c7      	b.n	8010e70 <SwitchClass+0x1bc>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 8010ce0:	79fb      	ldrb	r3, [r7, #7]
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d109      	bne.n	8010cfa <SwitchClass+0x46>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8010ce6:	4b65      	ldr	r3, [pc, #404]	@ (8010e7c <SwitchClass+0x1c8>)
 8010ce8:	4a64      	ldr	r2, [pc, #400]	@ (8010e7c <SwitchClass+0x1c8>)
 8010cea:	3374      	adds	r3, #116	@ 0x74
 8010cec:	326c      	adds	r2, #108	@ 0x6c
 8010cee:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010cf2:	e883 0003 	stmia.w	r3, {r0, r1}

                status = LORAMAC_STATUS_OK;
 8010cf6:	2300      	movs	r3, #0
 8010cf8:	73fb      	strb	r3, [r7, #15]
            }
            if( deviceClass == CLASS_B )
 8010cfa:	79fb      	ldrb	r3, [r7, #7]
 8010cfc:	2b01      	cmp	r3, #1
 8010cfe:	d10c      	bne.n	8010d1a <SwitchClass+0x66>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 8010d00:	79fb      	ldrb	r3, [r7, #7]
 8010d02:	4618      	mov	r0, r3
 8010d04:	f003 fc8a 	bl	801461c <LoRaMacClassBSwitchClass>
 8010d08:	4603      	mov	r3, r0
 8010d0a:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 8010d0c:	7bfb      	ldrb	r3, [r7, #15]
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d103      	bne.n	8010d1a <SwitchClass+0x66>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 8010d12:	4a5a      	ldr	r2, [pc, #360]	@ (8010e7c <SwitchClass+0x1c8>)
 8010d14:	79fb      	ldrb	r3, [r7, #7]
 8010d16:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118
                }
            }

            if( deviceClass == CLASS_C )
 8010d1a:	79fb      	ldrb	r3, [r7, #7]
 8010d1c:	2b02      	cmp	r3, #2
 8010d1e:	f040 80a2 	bne.w	8010e66 <SwitchClass+0x1b2>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8010d22:	4a56      	ldr	r2, [pc, #344]	@ (8010e7c <SwitchClass+0x1c8>)
 8010d24:	79fb      	ldrb	r3, [r7, #7]
 8010d26:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8010d2a:	4a55      	ldr	r2, [pc, #340]	@ (8010e80 <SwitchClass+0x1cc>)
 8010d2c:	4b54      	ldr	r3, [pc, #336]	@ (8010e80 <SwitchClass+0x1cc>)
 8010d2e:	f502 747a 	add.w	r4, r2, #1000	@ 0x3e8
 8010d32:	f503 7574 	add.w	r5, r3, #976	@ 0x3d0
 8010d36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010d38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010d3a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010d3e:	e884 0003 	stmia.w	r4, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8010d42:	4b4f      	ldr	r3, [pc, #316]	@ (8010e80 <SwitchClass+0x1cc>)
 8010d44:	2202      	movs	r2, #2
 8010d46:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8010d4a:	2300      	movs	r3, #0
 8010d4c:	73bb      	strb	r3, [r7, #14]
 8010d4e:	e05b      	b.n	8010e08 <SwitchClass+0x154>
                {
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 8010d50:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8010d54:	4949      	ldr	r1, [pc, #292]	@ (8010e7c <SwitchClass+0x1c8>)
 8010d56:	4613      	mov	r3, r2
 8010d58:	005b      	lsls	r3, r3, #1
 8010d5a:	4413      	add	r3, r2
 8010d5c:	011b      	lsls	r3, r3, #4
 8010d5e:	440b      	add	r3, r1
 8010d60:	33e9      	adds	r3, #233	@ 0xe9
 8010d62:	781b      	ldrb	r3, [r3, #0]
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d049      	beq.n	8010dfc <SwitchClass+0x148>
                        ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Class == CLASS_C ) )
 8010d68:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8010d6c:	4943      	ldr	r1, [pc, #268]	@ (8010e7c <SwitchClass+0x1c8>)
 8010d6e:	4613      	mov	r3, r2
 8010d70:	005b      	lsls	r3, r3, #1
 8010d72:	4413      	add	r3, r2
 8010d74:	011b      	lsls	r3, r3, #4
 8010d76:	440b      	add	r3, r1
 8010d78:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8010d7c:	781b      	ldrb	r3, [r3, #0]
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 8010d7e:	2b02      	cmp	r3, #2
 8010d80:	d13c      	bne.n	8010dfc <SwitchClass+0x148>
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Frequency;
 8010d82:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8010d86:	493d      	ldr	r1, [pc, #244]	@ (8010e7c <SwitchClass+0x1c8>)
 8010d88:	4613      	mov	r3, r2
 8010d8a:	005b      	lsls	r3, r3, #1
 8010d8c:	4413      	add	r3, r2
 8010d8e:	011b      	lsls	r3, r3, #4
 8010d90:	440b      	add	r3, r1
 8010d92:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 8010d96:	681b      	ldr	r3, [r3, #0]
 8010d98:	4a38      	ldr	r2, [pc, #224]	@ (8010e7c <SwitchClass+0x1c8>)
 8010d9a:	6753      	str	r3, [r2, #116]	@ 0x74
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Datarate;
 8010d9c:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8010da0:	4936      	ldr	r1, [pc, #216]	@ (8010e7c <SwitchClass+0x1c8>)
 8010da2:	4613      	mov	r3, r2
 8010da4:	005b      	lsls	r3, r3, #1
 8010da6:	4413      	add	r3, r2
 8010da8:	011b      	lsls	r3, r3, #4
 8010daa:	440b      	add	r3, r1
 8010dac:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8010db0:	f993 3000 	ldrsb.w	r3, [r3]
 8010db4:	b2da      	uxtb	r2, r3
 8010db6:	4b31      	ldr	r3, [pc, #196]	@ (8010e7c <SwitchClass+0x1c8>)
 8010db8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8010dbc:	4b30      	ldr	r3, [pc, #192]	@ (8010e80 <SwitchClass+0x1cc>)
 8010dbe:	f893 241b 	ldrb.w	r2, [r3, #1051]	@ 0x41b
 8010dc2:	4b2f      	ldr	r3, [pc, #188]	@ (8010e80 <SwitchClass+0x1cc>)
 8010dc4:	f883 23e8 	strb.w	r2, [r3, #1000]	@ 0x3e8
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8010dc8:	4b2c      	ldr	r3, [pc, #176]	@ (8010e7c <SwitchClass+0x1c8>)
 8010dca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010dcc:	4a2c      	ldr	r2, [pc, #176]	@ (8010e80 <SwitchClass+0x1cc>)
 8010dce:	f8c2 33ec 	str.w	r3, [r2, #1004]	@ 0x3ec
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010dd2:	4b2a      	ldr	r3, [pc, #168]	@ (8010e7c <SwitchClass+0x1c8>)
 8010dd4:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 8010dd8:	4b29      	ldr	r3, [pc, #164]	@ (8010e80 <SwitchClass+0x1cc>)
 8010dda:	f883 23f8 	strb.w	r2, [r3, #1016]	@ 0x3f8
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8010dde:	4b27      	ldr	r3, [pc, #156]	@ (8010e7c <SwitchClass+0x1c8>)
 8010de0:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 8010de4:	4b26      	ldr	r3, [pc, #152]	@ (8010e80 <SwitchClass+0x1cc>)
 8010de6:	f883 23f9 	strb.w	r2, [r3, #1017]	@ 0x3f9
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8010dea:	4b25      	ldr	r3, [pc, #148]	@ (8010e80 <SwitchClass+0x1cc>)
 8010dec:	2203      	movs	r2, #3
 8010dee:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 8010df2:	4b23      	ldr	r3, [pc, #140]	@ (8010e80 <SwitchClass+0x1cc>)
 8010df4:	2201      	movs	r2, #1
 8010df6:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
                        break;
 8010dfa:	e009      	b.n	8010e10 <SwitchClass+0x15c>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8010dfc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010e00:	b2db      	uxtb	r3, r3
 8010e02:	3301      	adds	r3, #1
 8010e04:	b2db      	uxtb	r3, r3
 8010e06:	73bb      	strb	r3, [r7, #14]
 8010e08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	dd9f      	ble.n	8010d50 <SwitchClass+0x9c>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 8010e10:	4b1b      	ldr	r3, [pc, #108]	@ (8010e80 <SwitchClass+0x1cc>)
 8010e12:	2200      	movs	r2, #0
 8010e14:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 8010e18:	4b1a      	ldr	r3, [pc, #104]	@ (8010e84 <SwitchClass+0x1d0>)
 8010e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010e1c:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 8010e1e:	f001 fa37 	bl	8012290 <OpenContinuousRxCWindow>
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */

                status = LORAMAC_STATUS_OK;
 8010e22:	2300      	movs	r3, #0
 8010e24:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8010e26:	e01e      	b.n	8010e66 <SwitchClass+0x1b2>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 8010e28:	79fb      	ldrb	r3, [r7, #7]
 8010e2a:	4618      	mov	r0, r3
 8010e2c:	f003 fbf6 	bl	801461c <LoRaMacClassBSwitchClass>
 8010e30:	4603      	mov	r3, r0
 8010e32:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 8010e34:	7bfb      	ldrb	r3, [r7, #15]
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d117      	bne.n	8010e6a <SwitchClass+0x1b6>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8010e3a:	4a10      	ldr	r2, [pc, #64]	@ (8010e7c <SwitchClass+0x1c8>)
 8010e3c:	79fb      	ldrb	r3, [r7, #7]
 8010e3e:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118
            }
            break;
 8010e42:	e012      	b.n	8010e6a <SwitchClass+0x1b6>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 8010e44:	79fb      	ldrb	r3, [r7, #7]
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d111      	bne.n	8010e6e <SwitchClass+0x1ba>
            {
                // Reset RxSlot to NONE
                MacCtx.RxSlot = RX_SLOT_NONE;
 8010e4a:	4b0d      	ldr	r3, [pc, #52]	@ (8010e80 <SwitchClass+0x1cc>)
 8010e4c:	2206      	movs	r2, #6
 8010e4e:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490

                Nvm.MacGroup2.DeviceClass = deviceClass;
 8010e52:	4a0a      	ldr	r2, [pc, #40]	@ (8010e7c <SwitchClass+0x1c8>)
 8010e54:	79fb      	ldrb	r3, [r7, #7]
 8010e56:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 8010e5a:	4b0a      	ldr	r3, [pc, #40]	@ (8010e84 <SwitchClass+0x1d0>)
 8010e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010e5e:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 8010e60:	2300      	movs	r3, #0
 8010e62:	73fb      	strb	r3, [r7, #15]
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */
            }
            break;
 8010e64:	e003      	b.n	8010e6e <SwitchClass+0x1ba>
            break;
 8010e66:	bf00      	nop
 8010e68:	e002      	b.n	8010e70 <SwitchClass+0x1bc>
            break;
 8010e6a:	bf00      	nop
 8010e6c:	e000      	b.n	8010e70 <SwitchClass+0x1bc>
            break;
 8010e6e:	bf00      	nop
        }
    }

    return status;
 8010e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e72:	4618      	mov	r0, r3
 8010e74:	3710      	adds	r7, #16
 8010e76:	46bd      	mov	sp, r7
 8010e78:	bdb0      	pop	{r4, r5, r7, pc}
 8010e7a:	bf00      	nop
 8010e7c:	20000bfc 	.word	0x20000bfc
 8010e80:	200006e0 	.word	0x200006e0
 8010e84:	0801fccc 	.word	0x0801fccc

08010e88 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 8010e88:	b580      	push	{r7, lr}
 8010e8a:	b086      	sub	sp, #24
 8010e8c:	af00      	add	r7, sp, #0
 8010e8e:	4603      	mov	r3, r0
 8010e90:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8010e92:	4b10      	ldr	r3, [pc, #64]	@ (8010ed4 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8010e94:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8010e98:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 8010e9a:	79fb      	ldrb	r3, [r7, #7]
 8010e9c:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 8010e9e:	230d      	movs	r3, #13
 8010ea0:	743b      	strb	r3, [r7, #16]

    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8010ea2:	4b0c      	ldr	r3, [pc, #48]	@ (8010ed4 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8010ea4:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d001      	beq.n	8010eb0 <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8010eac:	230e      	movs	r3, #14
 8010eae:	743b      	strb	r3, [r7, #16]
    }
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010eb0:	4b08      	ldr	r3, [pc, #32]	@ (8010ed4 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8010eb2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010eb6:	f107 0210 	add.w	r2, r7, #16
 8010eba:	4611      	mov	r1, r2
 8010ebc:	4618      	mov	r0, r3
 8010ebe:	f005 faf9 	bl	80164b4 <RegionGetPhyParam>
 8010ec2:	4603      	mov	r3, r0
 8010ec4:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 8010ec6:	68fb      	ldr	r3, [r7, #12]
 8010ec8:	b2db      	uxtb	r3, r3
}
 8010eca:	4618      	mov	r0, r3
 8010ecc:	3718      	adds	r7, #24
 8010ece:	46bd      	mov	sp, r7
 8010ed0:	bd80      	pop	{r7, pc}
 8010ed2:	bf00      	nop
 8010ed4:	20000bfc 	.word	0x20000bfc

08010ed8 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 8010ed8:	b580      	push	{r7, lr}
 8010eda:	b084      	sub	sp, #16
 8010edc:	af00      	add	r7, sp, #0
 8010ede:	4603      	mov	r3, r0
 8010ee0:	71fb      	strb	r3, [r7, #7]
 8010ee2:	460b      	mov	r3, r1
 8010ee4:	71bb      	strb	r3, [r7, #6]
 8010ee6:	4613      	mov	r3, r2
 8010ee8:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 8010eea:	2300      	movs	r3, #0
 8010eec:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 8010eee:	2300      	movs	r3, #0
 8010ef0:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8010ef2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8010ef6:	4618      	mov	r0, r3
 8010ef8:	f7ff ffc6 	bl	8010e88 <GetMaxAppPayloadWithoutFOptsLength>
 8010efc:	4603      	mov	r3, r0
 8010efe:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 8010f00:	79fb      	ldrb	r3, [r7, #7]
 8010f02:	b29a      	uxth	r2, r3
 8010f04:	797b      	ldrb	r3, [r7, #5]
 8010f06:	b29b      	uxth	r3, r3
 8010f08:	4413      	add	r3, r2
 8010f0a:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8010f0c:	89ba      	ldrh	r2, [r7, #12]
 8010f0e:	89fb      	ldrh	r3, [r7, #14]
 8010f10:	429a      	cmp	r2, r3
 8010f12:	d804      	bhi.n	8010f1e <ValidatePayloadLength+0x46>
 8010f14:	89bb      	ldrh	r3, [r7, #12]
 8010f16:	2bff      	cmp	r3, #255	@ 0xff
 8010f18:	d801      	bhi.n	8010f1e <ValidatePayloadLength+0x46>
    {
        return true;
 8010f1a:	2301      	movs	r3, #1
 8010f1c:	e000      	b.n	8010f20 <ValidatePayloadLength+0x48>
    }
    return false;
 8010f1e:	2300      	movs	r3, #0
}
 8010f20:	4618      	mov	r0, r3
 8010f22:	3710      	adds	r7, #16
 8010f24:	46bd      	mov	sp, r7
 8010f26:	bd80      	pop	{r7, pc}

08010f28 <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 8010f28:	b590      	push	{r4, r7, lr}
 8010f2a:	b0a5      	sub	sp, #148	@ 0x94
 8010f2c:	af02      	add	r7, sp, #8
 8010f2e:	6078      	str	r0, [r7, #4]
 8010f30:	4608      	mov	r0, r1
 8010f32:	4611      	mov	r1, r2
 8010f34:	461a      	mov	r2, r3
 8010f36:	4603      	mov	r3, r0
 8010f38:	70fb      	strb	r3, [r7, #3]
 8010f3a:	460b      	mov	r3, r1
 8010f3c:	70bb      	strb	r3, [r7, #2]
 8010f3e:	4613      	mov	r3, r2
 8010f40:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 8010f42:	2300      	movs	r3, #0
 8010f44:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
    bool adrBlockFound = false;
 8010f48:	2300      	movs	r3, #0
 8010f4a:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8010f4e:	2300      	movs	r3, #0
 8010f50:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    MacCommand_t* macCmd;
#endif /* LORAMAC_VERSION */

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
 8010f54:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	f000 84b9 	beq.w	80118d0 <ProcessMacCommands+0x9a8>
 8010f5e:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 8010f62:	2b01      	cmp	r3, #1
 8010f64:	f040 84ba 	bne.w	80118dc <ProcessMacCommands+0x9b4>
        // Do only parse MAC commands for Class A RX windows
        return;
    }
#endif /* LORAMAC_VERSION */

    while( macIndex < commandsSize )
 8010f68:	f000 bcb2 	b.w	80118d0 <ProcessMacCommands+0x9a8>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 8010f6c:	78fb      	ldrb	r3, [r7, #3]
 8010f6e:	687a      	ldr	r2, [r7, #4]
 8010f70:	4413      	add	r3, r2
 8010f72:	781b      	ldrb	r3, [r3, #0]
 8010f74:	4618      	mov	r0, r3
 8010f76:	f003 fe51 	bl	8014c1c <LoRaMacCommandsGetCmdSize>
 8010f7a:	4603      	mov	r3, r0
 8010f7c:	461a      	mov	r2, r3
 8010f7e:	78fb      	ldrb	r3, [r7, #3]
 8010f80:	441a      	add	r2, r3
 8010f82:	78bb      	ldrb	r3, [r7, #2]
 8010f84:	429a      	cmp	r2, r3
 8010f86:	f300 84ab 	bgt.w	80118e0 <ProcessMacCommands+0x9b8>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 8010f8a:	78fb      	ldrb	r3, [r7, #3]
 8010f8c:	1c5a      	adds	r2, r3, #1
 8010f8e:	70fa      	strb	r2, [r7, #3]
 8010f90:	461a      	mov	r2, r3
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	4413      	add	r3, r2
 8010f96:	781b      	ldrb	r3, [r3, #0]
 8010f98:	3b02      	subs	r3, #2
 8010f9a:	2b11      	cmp	r3, #17
 8010f9c:	f200 84a2 	bhi.w	80118e4 <ProcessMacCommands+0x9bc>
 8010fa0:	a201      	add	r2, pc, #4	@ (adr r2, 8010fa8 <ProcessMacCommands+0x80>)
 8010fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010fa6:	bf00      	nop
 8010fa8:	08010ff1 	.word	0x08010ff1
 8010fac:	08011033 	.word	0x08011033
 8010fb0:	080111af 	.word	0x080111af
 8010fb4:	080111ed 	.word	0x080111ed
 8010fb8:	080112e5 	.word	0x080112e5
 8010fbc:	08011335 	.word	0x08011335
 8010fc0:	080113f1 	.word	0x080113f1
 8010fc4:	08011447 	.word	0x08011447
 8010fc8:	0801152d 	.word	0x0801152d
 8010fcc:	080118e5 	.word	0x080118e5
 8010fd0:	080118e5 	.word	0x080118e5
 8010fd4:	080115d5 	.word	0x080115d5
 8010fd8:	080118e5 	.word	0x080118e5
 8010fdc:	080118e5 	.word	0x080118e5
 8010fe0:	080116f5 	.word	0x080116f5
 8010fe4:	08011729 	.word	0x08011729
 8010fe8:	080117b9 	.word	0x080117b9
 8010fec:	08011831 	.word	0x08011831
                break;
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 8010ff0:	2005      	movs	r0, #5
 8010ff2:	f003 ffeb 	bl	8014fcc <LoRaMacConfirmQueueIsCmdActive>
 8010ff6:	4603      	mov	r3, r0
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	f000 845c 	beq.w	80118b6 <ProcessMacCommands+0x98e>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 8010ffe:	2105      	movs	r1, #5
 8011000:	2000      	movs	r0, #0
 8011002:	f003 ff57 	bl	8014eb4 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 8011006:	78fb      	ldrb	r3, [r7, #3]
 8011008:	1c5a      	adds	r2, r3, #1
 801100a:	70fa      	strb	r2, [r7, #3]
 801100c:	461a      	mov	r2, r3
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	4413      	add	r3, r2
 8011012:	781a      	ldrb	r2, [r3, #0]
 8011014:	4bb0      	ldr	r3, [pc, #704]	@ (80112d8 <ProcessMacCommands+0x3b0>)
 8011016:	f883 245c 	strb.w	r2, [r3, #1116]	@ 0x45c
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 801101a:	78fb      	ldrb	r3, [r7, #3]
 801101c:	1c5a      	adds	r2, r3, #1
 801101e:	70fa      	strb	r2, [r7, #3]
 8011020:	461a      	mov	r2, r3
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	4413      	add	r3, r2
 8011026:	781a      	ldrb	r2, [r3, #0]
 8011028:	4bab      	ldr	r3, [pc, #684]	@ (80112d8 <ProcessMacCommands+0x3b0>)
 801102a:	f883 245d 	strb.w	r2, [r3, #1117]	@ 0x45d
                }
                break;
 801102e:	f000 bc42 	b.w	80118b6 <ProcessMacCommands+0x98e>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 8011032:	2300      	movs	r3, #0
 8011034:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 8011038:	2300      	movs	r3, #0
 801103a:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
                uint8_t linkAdrNbRep = 0;
 801103e:	2300      	movs	r3, #0
 8011040:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 8011044:	2300      	movs	r3, #0
 8011046:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
                }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                if( adrBlockFound == false )
 801104a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 801104e:	f083 0301 	eor.w	r3, r3, #1
 8011052:	b2db      	uxtb	r3, r3
 8011054:	2b00      	cmp	r3, #0
 8011056:	f000 80a6 	beq.w	80111a6 <ProcessMacCommands+0x27e>
                {
                    adrBlockFound = true;
 801105a:	2301      	movs	r3, #1
 801105c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

                    do
                    {
                        // Fill parameter structure
                        linkAdrReq.Payload = &payload[macIndex - 1];
 8011060:	78fb      	ldrb	r3, [r7, #3]
 8011062:	3b01      	subs	r3, #1
 8011064:	687a      	ldr	r2, [r7, #4]
 8011066:	4413      	add	r3, r2
 8011068:	65fb      	str	r3, [r7, #92]	@ 0x5c
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 801106a:	4b9c      	ldr	r3, [pc, #624]	@ (80112dc <ProcessMacCommands+0x3b4>)
 801106c:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 8011070:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011074:	4b99      	ldr	r3, [pc, #612]	@ (80112dc <ProcessMacCommands+0x3b4>)
 8011076:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 801107a:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 801107e:	4b97      	ldr	r3, [pc, #604]	@ (80112dc <ProcessMacCommands+0x3b4>)
 8011080:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8011084:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8011088:	4b94      	ldr	r3, [pc, #592]	@ (80112dc <ProcessMacCommands+0x3b4>)
 801108a:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 801108e:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8011092:	4b92      	ldr	r3, [pc, #584]	@ (80112dc <ProcessMacCommands+0x3b4>)
 8011094:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8011098:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
 801109c:	4b8f      	ldr	r3, [pc, #572]	@ (80112dc <ProcessMacCommands+0x3b4>)
 801109e:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 80110a2:	65bb      	str	r3, [r7, #88]	@ 0x58

                        // There is a fundamental difference in reporting the status
                        // of the LinkAdrRequests when ADR is on or off. When ADR is on, every
                        // LinkAdrAns contains the same value. This does not hold when ADR is off,
                        // where every LinkAdrAns requires an individual status.
                        if( Nvm.MacGroup2.AdrCtrlOn == true )
 80110a4:	4b8d      	ldr	r3, [pc, #564]	@ (80112dc <ProcessMacCommands+0x3b4>)
 80110a6:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d008      	beq.n	80110c0 <ProcessMacCommands+0x198>
                        {
                            // When ADR is on, the function RegionLinkAdrReq will take care
                            // about the parsing and interpretation of the LinkAdrRequest block and
                            // it provides one status which shall be applied to every LinkAdrAns
                            linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 80110ae:	78ba      	ldrb	r2, [r7, #2]
 80110b0:	78fb      	ldrb	r3, [r7, #3]
 80110b2:	1ad3      	subs	r3, r2, r3
 80110b4:	b2db      	uxtb	r3, r3
 80110b6:	3301      	adds	r3, #1
 80110b8:	b2db      	uxtb	r3, r3
 80110ba:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
 80110be:	e002      	b.n	80110c6 <ProcessMacCommands+0x19e>
                            // When ADR is off, this function will loop over the individual LinkAdrRequests
                            // and will call RegionLinkAdrReq for each individually, as every request
                            // requires an individual answer.
                            // When ADR is off, the function RegionLinkAdrReq ignores the new values for
                            // ChannelsDatarate, ChannelsTxPower and ChannelsNbTrans.
                            linkAdrReq.PayloadSize = 5;
 80110c0:	2305      	movs	r3, #5
 80110c2:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
                        }

                        // Process the ADR requests
                        status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 80110c6:	4b85      	ldr	r3, [pc, #532]	@ (80112dc <ProcessMacCommands+0x3b4>)
 80110c8:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 80110cc:	f107 0456 	add.w	r4, r7, #86	@ 0x56
 80110d0:	f107 0257 	add.w	r2, r7, #87	@ 0x57
 80110d4:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 80110d8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80110dc:	9301      	str	r3, [sp, #4]
 80110de:	f107 0355 	add.w	r3, r7, #85	@ 0x55
 80110e2:	9300      	str	r3, [sp, #0]
 80110e4:	4623      	mov	r3, r4
 80110e6:	f005 fae8 	bl	80166ba <RegionLinkAdrReq>
 80110ea:	4603      	mov	r3, r0
 80110ec:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
                                                &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                        if( ( status & 0x07 ) == 0x07 )
 80110f0:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80110f4:	f003 0307 	and.w	r3, r3, #7
 80110f8:	2b07      	cmp	r3, #7
 80110fa:	d119      	bne.n	8011130 <ProcessMacCommands+0x208>
                        {
                            // Set the status that the datarate has been increased
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
 80110fc:	4b77      	ldr	r3, [pc, #476]	@ (80112dc <ProcessMacCommands+0x3b4>)
 80110fe:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
 8011102:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8011106:	429a      	cmp	r2, r3
 8011108:	da03      	bge.n	8011112 <ProcessMacCommands+0x1ea>
                            {
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
 801110a:	4b74      	ldr	r3, [pc, #464]	@ (80112dc <ProcessMacCommands+0x3b4>)
 801110c:	2201      	movs	r2, #1
 801110e:	f883 211d 	strb.w	r2, [r3, #285]	@ 0x11d
                            }
                            Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 8011112:	f997 2057 	ldrsb.w	r2, [r7, #87]	@ 0x57
 8011116:	4b71      	ldr	r3, [pc, #452]	@ (80112dc <ProcessMacCommands+0x3b4>)
 8011118:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 801111c:	f997 2056 	ldrsb.w	r2, [r7, #86]	@ 0x56
 8011120:	4b6e      	ldr	r3, [pc, #440]	@ (80112dc <ProcessMacCommands+0x3b4>)
 8011122:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 8011126:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 801112a:	4b6c      	ldr	r3, [pc, #432]	@ (80112dc <ProcessMacCommands+0x3b4>)
 801112c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
                        }

                        // Add the answers to the buffer
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8011130:	2300      	movs	r3, #0
 8011132:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 8011136:	e00b      	b.n	8011150 <ProcessMacCommands+0x228>
                        {
                            LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 8011138:	f107 036b 	add.w	r3, r7, #107	@ 0x6b
 801113c:	2201      	movs	r2, #1
 801113e:	4619      	mov	r1, r3
 8011140:	2003      	movs	r0, #3
 8011142:	f003 fc0b 	bl	801495c <LoRaMacCommandsAddCmd>
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8011146:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 801114a:	3301      	adds	r3, #1
 801114c:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 8011150:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8011154:	4a62      	ldr	r2, [pc, #392]	@ (80112e0 <ProcessMacCommands+0x3b8>)
 8011156:	fba2 2303 	umull	r2, r3, r2, r3
 801115a:	089b      	lsrs	r3, r3, #2
 801115c:	b2db      	uxtb	r3, r3
 801115e:	f897 2086 	ldrb.w	r2, [r7, #134]	@ 0x86
 8011162:	429a      	cmp	r2, r3
 8011164:	d3e8      	bcc.n	8011138 <ProcessMacCommands+0x210>
                        }
                        // Update MAC index
                        macIndex += linkAdrNbBytesParsed - 1;
 8011166:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 801116a:	78fb      	ldrb	r3, [r7, #3]
 801116c:	4413      	add	r3, r2
 801116e:	b2db      	uxtb	r3, r3
 8011170:	3b01      	subs	r3, #1
 8011172:	70fb      	strb	r3, [r7, #3]

                        // Check to prevent invalid access
                        if( macIndex >= commandsSize )
 8011174:	78fa      	ldrb	r2, [r7, #3]
 8011176:	78bb      	ldrb	r3, [r7, #2]
 8011178:	429a      	cmp	r2, r3
 801117a:	d20a      	bcs.n	8011192 <ProcessMacCommands+0x26a>
                            break;

                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 801117c:	78fb      	ldrb	r3, [r7, #3]
 801117e:	1c5a      	adds	r2, r3, #1
 8011180:	70fa      	strb	r2, [r7, #3]
 8011182:	461a      	mov	r2, r3
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	4413      	add	r3, r2
 8011188:	781b      	ldrb	r3, [r3, #0]
 801118a:	2b03      	cmp	r3, #3
 801118c:	f43f af68 	beq.w	8011060 <ProcessMacCommands+0x138>
 8011190:	e000      	b.n	8011194 <ProcessMacCommands+0x26c>
                            break;
 8011192:	bf00      	nop

                    if( macIndex < commandsSize )
 8011194:	78fa      	ldrb	r2, [r7, #3]
 8011196:	78bb      	ldrb	r3, [r7, #2]
 8011198:	429a      	cmp	r2, r3
 801119a:	f080 838e 	bcs.w	80118ba <ProcessMacCommands+0x992>
                    {
                        // Decrease the index such that it points to the next MAC command
                        macIndex--;
 801119e:	78fb      	ldrb	r3, [r7, #3]
 80111a0:	3b01      	subs	r3, #1
 80111a2:	70fb      	strb	r3, [r7, #3]
                {
                    // Increase the index by the MAC command size (without command)
                    macIndex += 4;
                }
#endif /* LORAMAC_VERSION */
                break;
 80111a4:	e389      	b.n	80118ba <ProcessMacCommands+0x992>
                    macIndex += 4;
 80111a6:	78fb      	ldrb	r3, [r7, #3]
 80111a8:	3304      	adds	r3, #4
 80111aa:	70fb      	strb	r3, [r7, #3]
                break;
 80111ac:	e385      	b.n	80118ba <ProcessMacCommands+0x992>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 80111ae:	78fb      	ldrb	r3, [r7, #3]
 80111b0:	1c5a      	adds	r2, r3, #1
 80111b2:	70fa      	strb	r2, [r7, #3]
 80111b4:	461a      	mov	r2, r3
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	4413      	add	r3, r2
 80111ba:	781b      	ldrb	r3, [r3, #0]
 80111bc:	f003 030f 	and.w	r3, r3, #15
 80111c0:	b2da      	uxtb	r2, r3
 80111c2:	4b46      	ldr	r3, [pc, #280]	@ (80112dc <ProcessMacCommands+0x3b4>)
 80111c4:	f883 211b 	strb.w	r2, [r3, #283]	@ 0x11b
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 80111c8:	4b44      	ldr	r3, [pc, #272]	@ (80112dc <ProcessMacCommands+0x3b4>)
 80111ca:	f893 311b 	ldrb.w	r3, [r3, #283]	@ 0x11b
 80111ce:	461a      	mov	r2, r3
 80111d0:	2301      	movs	r3, #1
 80111d2:	4093      	lsls	r3, r2
 80111d4:	b29a      	uxth	r2, r3
 80111d6:	4b41      	ldr	r3, [pc, #260]	@ (80112dc <ProcessMacCommands+0x3b4>)
 80111d8:	f8a3 2120 	strh.w	r2, [r3, #288]	@ 0x120
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 80111dc:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80111e0:	2200      	movs	r2, #0
 80111e2:	4619      	mov	r1, r3
 80111e4:	2004      	movs	r0, #4
 80111e6:	f003 fbb9 	bl	801495c <LoRaMacCommandsAddCmd>
                break;
 80111ea:	e371      	b.n	80118d0 <ProcessMacCommands+0x9a8>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 80111ec:	2307      	movs	r3, #7
 80111ee:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 80111f2:	78fb      	ldrb	r3, [r7, #3]
 80111f4:	687a      	ldr	r2, [r7, #4]
 80111f6:	4413      	add	r3, r2
 80111f8:	781b      	ldrb	r3, [r3, #0]
 80111fa:	091b      	lsrs	r3, r3, #4
 80111fc:	b2db      	uxtb	r3, r3
 80111fe:	b25b      	sxtb	r3, r3
 8011200:	f003 0307 	and.w	r3, r3, #7
 8011204:	b25b      	sxtb	r3, r3
 8011206:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 801120a:	78fb      	ldrb	r3, [r7, #3]
 801120c:	687a      	ldr	r2, [r7, #4]
 801120e:	4413      	add	r3, r2
 8011210:	781b      	ldrb	r3, [r3, #0]
 8011212:	b25b      	sxtb	r3, r3
 8011214:	f003 030f 	and.w	r3, r3, #15
 8011218:	b25b      	sxtb	r3, r3
 801121a:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
                macIndex++;
 801121e:	78fb      	ldrb	r3, [r7, #3]
 8011220:	3301      	adds	r3, #1
 8011222:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8011224:	78fb      	ldrb	r3, [r7, #3]
 8011226:	1c5a      	adds	r2, r3, #1
 8011228:	70fa      	strb	r2, [r7, #3]
 801122a:	461a      	mov	r2, r3
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	4413      	add	r3, r2
 8011230:	781b      	ldrb	r3, [r3, #0]
 8011232:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8011234:	78fb      	ldrb	r3, [r7, #3]
 8011236:	1c5a      	adds	r2, r3, #1
 8011238:	70fa      	strb	r2, [r7, #3]
 801123a:	461a      	mov	r2, r3
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	4413      	add	r3, r2
 8011240:	781b      	ldrb	r3, [r3, #0]
 8011242:	021a      	lsls	r2, r3, #8
 8011244:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011246:	4313      	orrs	r3, r2
 8011248:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 801124a:	78fb      	ldrb	r3, [r7, #3]
 801124c:	1c5a      	adds	r2, r3, #1
 801124e:	70fa      	strb	r2, [r7, #3]
 8011250:	461a      	mov	r2, r3
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	4413      	add	r3, r2
 8011256:	781b      	ldrb	r3, [r3, #0]
 8011258:	041a      	lsls	r2, r3, #16
 801125a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801125c:	4313      	orrs	r3, r2
 801125e:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency *= 100;
 8011260:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011262:	2264      	movs	r2, #100	@ 0x64
 8011264:	fb02 f303 	mul.w	r3, r2, r3
 8011268:	653b      	str	r3, [r7, #80]	@ 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 801126a:	4b1c      	ldr	r3, [pc, #112]	@ (80112dc <ProcessMacCommands+0x3b4>)
 801126c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011270:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8011274:	4611      	mov	r1, r2
 8011276:	4618      	mov	r0, r3
 8011278:	f005 fa46 	bl	8016708 <RegionRxParamSetupReq>
 801127c:	4603      	mov	r3, r0
 801127e:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( status & 0x07 ) == 0x07 )
 8011282:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8011286:	f003 0307 	and.w	r3, r3, #7
 801128a:	2b07      	cmp	r3, #7
 801128c:	d117      	bne.n	80112be <ProcessMacCommands+0x396>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 801128e:	f997 304c 	ldrsb.w	r3, [r7, #76]	@ 0x4c
 8011292:	b2da      	uxtb	r2, r3
 8011294:	4b11      	ldr	r3, [pc, #68]	@ (80112dc <ProcessMacCommands+0x3b4>)
 8011296:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 801129a:	f997 304c 	ldrsb.w	r3, [r7, #76]	@ 0x4c
 801129e:	b2da      	uxtb	r2, r3
 80112a0:	4b0e      	ldr	r3, [pc, #56]	@ (80112dc <ProcessMacCommands+0x3b4>)
 80112a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 80112a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80112a8:	4a0c      	ldr	r2, [pc, #48]	@ (80112dc <ProcessMacCommands+0x3b4>)
 80112aa:	66d3      	str	r3, [r2, #108]	@ 0x6c
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 80112ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80112ae:	4a0b      	ldr	r2, [pc, #44]	@ (80112dc <ProcessMacCommands+0x3b4>)
 80112b0:	6753      	str	r3, [r2, #116]	@ 0x74
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 80112b2:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 80112b6:	b2da      	uxtb	r2, r3
 80112b8:	4b08      	ldr	r3, [pc, #32]	@ (80112dc <ProcessMacCommands+0x3b4>)
 80112ba:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
                }
                macCmdPayload[0] = status;
 80112be:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80112c2:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 80112c6:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80112ca:	2201      	movs	r2, #1
 80112cc:	4619      	mov	r1, r3
 80112ce:	2005      	movs	r0, #5
 80112d0:	f003 fb44 	bl	801495c <LoRaMacCommandsAddCmd>
                break;
 80112d4:	e2fc      	b.n	80118d0 <ProcessMacCommands+0x9a8>
 80112d6:	bf00      	nop
 80112d8:	200006e0 	.word	0x200006e0
 80112dc:	20000bfc 	.word	0x20000bfc
 80112e0:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 80112e4:	23ff      	movs	r3, #255	@ 0xff
 80112e6:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 80112ea:	4bb7      	ldr	r3, [pc, #732]	@ (80115c8 <ProcessMacCommands+0x6a0>)
 80112ec:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d00d      	beq.n	8011310 <ProcessMacCommands+0x3e8>
 80112f4:	4bb4      	ldr	r3, [pc, #720]	@ (80115c8 <ProcessMacCommands+0x6a0>)
 80112f6:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80112fa:	681b      	ldr	r3, [r3, #0]
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	d007      	beq.n	8011310 <ProcessMacCommands+0x3e8>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 8011300:	4bb1      	ldr	r3, [pc, #708]	@ (80115c8 <ProcessMacCommands+0x6a0>)
 8011302:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8011306:	681b      	ldr	r3, [r3, #0]
 8011308:	4798      	blx	r3
 801130a:	4603      	mov	r3, r0
 801130c:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
                }
                macCmdPayload[0] = batteryLevel;
 8011310:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 8011314:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8011318:	787b      	ldrb	r3, [r7, #1]
 801131a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801131e:	b2db      	uxtb	r3, r3
 8011320:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 8011324:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8011328:	2202      	movs	r2, #2
 801132a:	4619      	mov	r1, r3
 801132c:	2006      	movs	r0, #6
 801132e:	f003 fb15 	bl	801495c <LoRaMacCommandsAddCmd>
                break;
 8011332:	e2cd      	b.n	80118d0 <ProcessMacCommands+0x9a8>
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 8011334:	2303      	movs	r3, #3
 8011336:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 801133a:	78fb      	ldrb	r3, [r7, #3]
 801133c:	1c5a      	adds	r2, r3, #1
 801133e:	70fa      	strb	r2, [r7, #3]
 8011340:	461a      	mov	r2, r3
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	4413      	add	r3, r2
 8011346:	781b      	ldrb	r3, [r3, #0]
 8011348:	b25b      	sxtb	r3, r3
 801134a:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
                newChannelReq.NewChannel = &chParam;
 801134e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8011352:	647b      	str	r3, [r7, #68]	@ 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8011354:	78fb      	ldrb	r3, [r7, #3]
 8011356:	1c5a      	adds	r2, r3, #1
 8011358:	70fa      	strb	r2, [r7, #3]
 801135a:	461a      	mov	r2, r3
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	4413      	add	r3, r2
 8011360:	781b      	ldrb	r3, [r3, #0]
 8011362:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8011364:	78fb      	ldrb	r3, [r7, #3]
 8011366:	1c5a      	adds	r2, r3, #1
 8011368:	70fa      	strb	r2, [r7, #3]
 801136a:	461a      	mov	r2, r3
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	4413      	add	r3, r2
 8011370:	781b      	ldrb	r3, [r3, #0]
 8011372:	021a      	lsls	r2, r3, #8
 8011374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011376:	4313      	orrs	r3, r2
 8011378:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 801137a:	78fb      	ldrb	r3, [r7, #3]
 801137c:	1c5a      	adds	r2, r3, #1
 801137e:	70fa      	strb	r2, [r7, #3]
 8011380:	461a      	mov	r2, r3
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	4413      	add	r3, r2
 8011386:	781b      	ldrb	r3, [r3, #0]
 8011388:	041a      	lsls	r2, r3, #16
 801138a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801138c:	4313      	orrs	r3, r2
 801138e:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency *= 100;
 8011390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011392:	2264      	movs	r2, #100	@ 0x64
 8011394:	fb02 f303 	mul.w	r3, r2, r3
 8011398:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Rx1Frequency = 0;
 801139a:	2300      	movs	r3, #0
 801139c:	63fb      	str	r3, [r7, #60]	@ 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 801139e:	78fb      	ldrb	r3, [r7, #3]
 80113a0:	1c5a      	adds	r2, r3, #1
 80113a2:	70fa      	strb	r2, [r7, #3]
 80113a4:	461a      	mov	r2, r3
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	4413      	add	r3, r2
 80113aa:	781b      	ldrb	r3, [r3, #0]
 80113ac:	b25b      	sxtb	r3, r3
 80113ae:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 80113b2:	4b86      	ldr	r3, [pc, #536]	@ (80115cc <ProcessMacCommands+0x6a4>)
 80113b4:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80113b8:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 80113bc:	4611      	mov	r1, r2
 80113be:	4618      	mov	r0, r3
 80113c0:	f005 f9bd 	bl	801673e <RegionNewChannelReq>
 80113c4:	4603      	mov	r3, r0
 80113c6:	b2db      	uxtb	r3, r3
 80113c8:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( int8_t )status >= 0 )
 80113cc:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80113d0:	b25b      	sxtb	r3, r3
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	f2c0 8273 	blt.w	80118be <ProcessMacCommands+0x996>
                {
                    macCmdPayload[0] = status;
 80113d8:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80113dc:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 80113e0:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80113e4:	2201      	movs	r2, #1
 80113e6:	4619      	mov	r1, r3
 80113e8:	2007      	movs	r0, #7
 80113ea:	f003 fab7 	bl	801495c <LoRaMacCommandsAddCmd>
                }
                break;
 80113ee:	e266      	b.n	80118be <ProcessMacCommands+0x996>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 80113f0:	78fb      	ldrb	r3, [r7, #3]
 80113f2:	1c5a      	adds	r2, r3, #1
 80113f4:	70fa      	strb	r2, [r7, #3]
 80113f6:	461a      	mov	r2, r3
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	4413      	add	r3, r2
 80113fc:	781b      	ldrb	r3, [r3, #0]
 80113fe:	f003 030f 	and.w	r3, r3, #15
 8011402:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84

                if( delay == 0 )
 8011406:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 801140a:	2b00      	cmp	r3, #0
 801140c:	d104      	bne.n	8011418 <ProcessMacCommands+0x4f0>
                {
                    delay++;
 801140e:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8011412:	3301      	adds	r3, #1
 8011414:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 8011418:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 801141c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8011420:	fb02 f303 	mul.w	r3, r2, r3
 8011424:	461a      	mov	r2, r3
 8011426:	4b69      	ldr	r3, [pc, #420]	@ (80115cc <ProcessMacCommands+0x6a4>)
 8011428:	659a      	str	r2, [r3, #88]	@ 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 801142a:	4b68      	ldr	r3, [pc, #416]	@ (80115cc <ProcessMacCommands+0x6a4>)
 801142c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801142e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8011432:	4a66      	ldr	r2, [pc, #408]	@ (80115cc <ProcessMacCommands+0x6a4>)
 8011434:	65d3      	str	r3, [r2, #92]	@ 0x5c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 8011436:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 801143a:	2200      	movs	r2, #0
 801143c:	4619      	mov	r1, r3
 801143e:	2008      	movs	r0, #8
 8011440:	f003 fa8c 	bl	801495c <LoRaMacCommandsAddCmd>
                break;
 8011444:	e244      	b.n	80118d0 <ProcessMacCommands+0x9a8>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 8011446:	78fb      	ldrb	r3, [r7, #3]
 8011448:	1c5a      	adds	r2, r3, #1
 801144a:	70fa      	strb	r2, [r7, #3]
 801144c:	461a      	mov	r2, r3
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	4413      	add	r3, r2
 8011452:	781b      	ldrb	r3, [r3, #0]
 8011454:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 8011458:	2300      	movs	r3, #0
 801145a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 801145e:	2300      	movs	r3, #0
 8011460:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8011464:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8011468:	f003 0320 	and.w	r3, r3, #32
 801146c:	2b00      	cmp	r3, #0
 801146e:	d002      	beq.n	8011476 <ProcessMacCommands+0x54e>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 8011470:	2301      	movs	r3, #1
 8011472:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 8011476:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 801147a:	f003 0310 	and.w	r3, r3, #16
 801147e:	2b00      	cmp	r3, #0
 8011480:	d002      	beq.n	8011488 <ProcessMacCommands+0x560>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 8011482:	2301      	movs	r3, #1
 8011484:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8011488:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 801148c:	f003 030f 	and.w	r3, r3, #15
 8011490:	b2db      	uxtb	r3, r3
 8011492:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 8011496:	4b4d      	ldr	r3, [pc, #308]	@ (80115cc <ProcessMacCommands+0x6a4>)
 8011498:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801149c:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80114a0:	4611      	mov	r1, r2
 80114a2:	4618      	mov	r0, r3
 80114a4:	f005 f966 	bl	8016774 <RegionTxParamSetupReq>
 80114a8:	4603      	mov	r3, r0
 80114aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80114ae:	f000 8208 	beq.w	80118c2 <ProcessMacCommands+0x99a>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 80114b2:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 80114b6:	4b45      	ldr	r3, [pc, #276]	@ (80115cc <ProcessMacCommands+0x6a4>)
 80114b8:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 80114bc:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 80114c0:	4b42      	ldr	r3, [pc, #264]	@ (80115cc <ProcessMacCommands+0x6a4>)
 80114c2:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 80114c6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80114ca:	461a      	mov	r2, r3
 80114cc:	4b40      	ldr	r3, [pc, #256]	@ (80115d0 <ProcessMacCommands+0x6a8>)
 80114ce:	5c9b      	ldrb	r3, [r3, r2]
 80114d0:	4618      	mov	r0, r3
 80114d2:	f7ef fbdd 	bl	8000c90 <__aeabi_ui2f>
 80114d6:	4603      	mov	r3, r0
 80114d8:	4a3c      	ldr	r2, [pc, #240]	@ (80115cc <ProcessMacCommands+0x6a4>)
 80114da:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 80114de:	2302      	movs	r3, #2
 80114e0:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80114e4:	4b39      	ldr	r3, [pc, #228]	@ (80115cc <ProcessMacCommands+0x6a4>)
 80114e6:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80114ea:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80114ee:	4b37      	ldr	r3, [pc, #220]	@ (80115cc <ProcessMacCommands+0x6a4>)
 80114f0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80114f4:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80114f8:	4611      	mov	r1, r2
 80114fa:	4618      	mov	r0, r3
 80114fc:	f004 ffda 	bl	80164b4 <RegionGetPhyParam>
 8011500:	4603      	mov	r3, r0
 8011502:	62bb      	str	r3, [r7, #40]	@ 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 8011504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011506:	b25a      	sxtb	r2, r3
 8011508:	4b30      	ldr	r3, [pc, #192]	@ (80115cc <ProcessMacCommands+0x6a4>)
 801150a:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 801150e:	4293      	cmp	r3, r2
 8011510:	bfb8      	it	lt
 8011512:	4613      	movlt	r3, r2
 8011514:	b25a      	sxtb	r2, r3
 8011516:	4b2d      	ldr	r3, [pc, #180]	@ (80115cc <ProcessMacCommands+0x6a4>)
 8011518:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 801151c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8011520:	2200      	movs	r2, #0
 8011522:	4619      	mov	r1, r3
 8011524:	2009      	movs	r0, #9
 8011526:	f003 fa19 	bl	801495c <LoRaMacCommandsAddCmd>
                }
                break;
 801152a:	e1ca      	b.n	80118c2 <ProcessMacCommands+0x99a>
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 801152c:	2303      	movs	r3, #3
 801152e:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 8011532:	78fb      	ldrb	r3, [r7, #3]
 8011534:	1c5a      	adds	r2, r3, #1
 8011536:	70fa      	strb	r2, [r7, #3]
 8011538:	461a      	mov	r2, r3
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	4413      	add	r3, r2
 801153e:	781b      	ldrb	r3, [r3, #0]
 8011540:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8011544:	78fb      	ldrb	r3, [r7, #3]
 8011546:	1c5a      	adds	r2, r3, #1
 8011548:	70fa      	strb	r2, [r7, #3]
 801154a:	461a      	mov	r2, r3
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	4413      	add	r3, r2
 8011550:	781b      	ldrb	r3, [r3, #0]
 8011552:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8011554:	78fb      	ldrb	r3, [r7, #3]
 8011556:	1c5a      	adds	r2, r3, #1
 8011558:	70fa      	strb	r2, [r7, #3]
 801155a:	461a      	mov	r2, r3
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	4413      	add	r3, r2
 8011560:	781b      	ldrb	r3, [r3, #0]
 8011562:	021a      	lsls	r2, r3, #8
 8011564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011566:	4313      	orrs	r3, r2
 8011568:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 801156a:	78fb      	ldrb	r3, [r7, #3]
 801156c:	1c5a      	adds	r2, r3, #1
 801156e:	70fa      	strb	r2, [r7, #3]
 8011570:	461a      	mov	r2, r3
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	4413      	add	r3, r2
 8011576:	781b      	ldrb	r3, [r3, #0]
 8011578:	041a      	lsls	r2, r3, #16
 801157a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801157c:	4313      	orrs	r3, r2
 801157e:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency *= 100;
 8011580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011582:	2264      	movs	r2, #100	@ 0x64
 8011584:	fb02 f303 	mul.w	r3, r2, r3
 8011588:	627b      	str	r3, [r7, #36]	@ 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 801158a:	4b10      	ldr	r3, [pc, #64]	@ (80115cc <ProcessMacCommands+0x6a4>)
 801158c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011590:	f107 0220 	add.w	r2, r7, #32
 8011594:	4611      	mov	r1, r2
 8011596:	4618      	mov	r0, r3
 8011598:	f005 f907 	bl	80167aa <RegionDlChannelReq>
 801159c:	4603      	mov	r3, r0
 801159e:	b2db      	uxtb	r3, r3
 80115a0:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( int8_t )status >= 0 )
 80115a4:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80115a8:	b25b      	sxtb	r3, r3
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	f2c0 818b 	blt.w	80118c6 <ProcessMacCommands+0x99e>
                {
                    macCmdPayload[0] = status;
 80115b0:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80115b4:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 80115b8:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80115bc:	2201      	movs	r2, #1
 80115be:	4619      	mov	r1, r3
 80115c0:	200a      	movs	r0, #10
 80115c2:	f003 f9cb 	bl	801495c <LoRaMacCommandsAddCmd>
                }
                break;
 80115c6:	e17e      	b.n	80118c6 <ProcessMacCommands+0x99e>
 80115c8:	200006e0 	.word	0x200006e0
 80115cc:	20000bfc 	.word	0x20000bfc
 80115d0:	0801fc00 	.word	0x0801fc00
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                // The mote time can be updated only when the time is received in classA
                // receive windows only.
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 80115d4:	2009      	movs	r0, #9
 80115d6:	f003 fcf9 	bl	8014fcc <LoRaMacConfirmQueueIsCmdActive>
 80115da:	4603      	mov	r3, r0
 80115dc:	2b00      	cmp	r3, #0
 80115de:	f000 8084 	beq.w	80116ea <ProcessMacCommands+0x7c2>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 80115e2:	2109      	movs	r1, #9
 80115e4:	2000      	movs	r0, #0
 80115e6:	f003 fc65 	bl	8014eb4 <LoRaMacConfirmQueueSetStatus>

                    SysTime_t gpsEpochTime = { 0 };
 80115ea:	f107 0318 	add.w	r3, r7, #24
 80115ee:	2200      	movs	r2, #0
 80115f0:	601a      	str	r2, [r3, #0]
 80115f2:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 80115f4:	f107 0310 	add.w	r3, r7, #16
 80115f8:	2200      	movs	r2, #0
 80115fa:	601a      	str	r2, [r3, #0]
 80115fc:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 80115fe:	f107 0308 	add.w	r3, r7, #8
 8011602:	2200      	movs	r2, #0
 8011604:	601a      	str	r2, [r3, #0]
 8011606:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8011608:	78fb      	ldrb	r3, [r7, #3]
 801160a:	1c5a      	adds	r2, r3, #1
 801160c:	70fa      	strb	r2, [r7, #3]
 801160e:	461a      	mov	r2, r3
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	4413      	add	r3, r2
 8011614:	781b      	ldrb	r3, [r3, #0]
 8011616:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8011618:	78fb      	ldrb	r3, [r7, #3]
 801161a:	1c5a      	adds	r2, r3, #1
 801161c:	70fa      	strb	r2, [r7, #3]
 801161e:	461a      	mov	r2, r3
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	4413      	add	r3, r2
 8011624:	781b      	ldrb	r3, [r3, #0]
 8011626:	021a      	lsls	r2, r3, #8
 8011628:	69bb      	ldr	r3, [r7, #24]
 801162a:	4313      	orrs	r3, r2
 801162c:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 801162e:	78fb      	ldrb	r3, [r7, #3]
 8011630:	1c5a      	adds	r2, r3, #1
 8011632:	70fa      	strb	r2, [r7, #3]
 8011634:	461a      	mov	r2, r3
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	4413      	add	r3, r2
 801163a:	781b      	ldrb	r3, [r3, #0]
 801163c:	041a      	lsls	r2, r3, #16
 801163e:	69bb      	ldr	r3, [r7, #24]
 8011640:	4313      	orrs	r3, r2
 8011642:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8011644:	78fb      	ldrb	r3, [r7, #3]
 8011646:	1c5a      	adds	r2, r3, #1
 8011648:	70fa      	strb	r2, [r7, #3]
 801164a:	461a      	mov	r2, r3
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	4413      	add	r3, r2
 8011650:	781b      	ldrb	r3, [r3, #0]
 8011652:	061a      	lsls	r2, r3, #24
 8011654:	69bb      	ldr	r3, [r7, #24]
 8011656:	4313      	orrs	r3, r2
 8011658:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 801165a:	78fb      	ldrb	r3, [r7, #3]
 801165c:	1c5a      	adds	r2, r3, #1
 801165e:	70fa      	strb	r2, [r7, #3]
 8011660:	461a      	mov	r2, r3
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	4413      	add	r3, r2
 8011666:	781b      	ldrb	r3, [r3, #0]
 8011668:	b21b      	sxth	r3, r3
 801166a:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 801166c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8011670:	461a      	mov	r2, r3
 8011672:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011676:	fb02 f303 	mul.w	r3, r2, r3
 801167a:	121b      	asrs	r3, r3, #8
 801167c:	b21b      	sxth	r3, r3
 801167e:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 8011680:	f107 0310 	add.w	r3, r7, #16
 8011684:	f107 0218 	add.w	r2, r7, #24
 8011688:	e892 0003 	ldmia.w	r2, {r0, r1}
 801168c:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epoch offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 8011690:	693a      	ldr	r2, [r7, #16]
 8011692:	4b96      	ldr	r3, [pc, #600]	@ (80118ec <ProcessMacCommands+0x9c4>)
 8011694:	4413      	add	r3, r2
 8011696:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 8011698:	f107 0308 	add.w	r3, r7, #8
 801169c:	4618      	mov	r0, r3
 801169e:	f00c f939 	bl	801d914 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 80116a2:	f107 006c 	add.w	r0, r7, #108	@ 0x6c
 80116a6:	4b92      	ldr	r3, [pc, #584]	@ (80118f0 <ProcessMacCommands+0x9c8>)
 80116a8:	f8d3 233c 	ldr.w	r2, [r3, #828]	@ 0x33c
 80116ac:	9200      	str	r2, [sp, #0]
 80116ae:	f8d3 3338 	ldr.w	r3, [r3, #824]	@ 0x338
 80116b2:	f107 0210 	add.w	r2, r7, #16
 80116b6:	ca06      	ldmia	r2, {r1, r2}
 80116b8:	f00c f8c5 	bl	801d846 <SysTimeSub>
 80116bc:	f107 0010 	add.w	r0, r7, #16
 80116c0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80116c2:	9300      	str	r3, [sp, #0]
 80116c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80116c6:	f107 0208 	add.w	r2, r7, #8
 80116ca:	ca06      	ldmia	r2, {r1, r2}
 80116cc:	f00c f882 	bl	801d7d4 <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 80116d0:	f107 0310 	add.w	r3, r7, #16
 80116d4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80116d8:	f00c f8ee 	bl	801d8b8 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 80116dc:	f002 ffdc 	bl	8014698 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 80116e0:	4b83      	ldr	r3, [pc, #524]	@ (80118f0 <ProcessMacCommands+0x9c8>)
 80116e2:	2201      	movs	r2, #1
 80116e4:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                    // In case of other receive windows the Device Time Answer is not received.
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
#endif /* LORAMAC_VERSION */
                }
                break;
 80116e8:	e0f2      	b.n	80118d0 <ProcessMacCommands+0x9a8>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 80116ea:	4b81      	ldr	r3, [pc, #516]	@ (80118f0 <ProcessMacCommands+0x9c8>)
 80116ec:	2200      	movs	r2, #0
 80116ee:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
                break;
 80116f2:	e0ed      	b.n	80118d0 <ProcessMacCommands+0x9a8>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 80116f4:	200c      	movs	r0, #12
 80116f6:	f003 fc69 	bl	8014fcc <LoRaMacConfirmQueueIsCmdActive>
 80116fa:	4603      	mov	r3, r0
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	f000 80e4 	beq.w	80118ca <ProcessMacCommands+0x9a2>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 8011702:	210c      	movs	r1, #12
 8011704:	2000      	movs	r0, #0
 8011706:	f003 fbd5 	bl	8014eb4 <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 801170a:	4b79      	ldr	r3, [pc, #484]	@ (80118f0 <ProcessMacCommands+0x9c8>)
 801170c:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 8011710:	2b04      	cmp	r3, #4
 8011712:	f000 80da 	beq.w	80118ca <ProcessMacCommands+0x9a2>
 8011716:	4b76      	ldr	r3, [pc, #472]	@ (80118f0 <ProcessMacCommands+0x9c8>)
 8011718:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 801171c:	2b05      	cmp	r3, #5
 801171e:	f000 80d4 	beq.w	80118ca <ProcessMacCommands+0x9a2>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 8011722:	f002 ff9a 	bl	801465a <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 8011726:	e0d0      	b.n	80118ca <ProcessMacCommands+0x9a2>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 8011728:	2303      	movs	r3, #3
 801172a:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
                uint32_t frequency = 0;
 801172e:	2300      	movs	r3, #0
 8011730:	67bb      	str	r3, [r7, #120]	@ 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 8011732:	78fb      	ldrb	r3, [r7, #3]
 8011734:	1c5a      	adds	r2, r3, #1
 8011736:	70fa      	strb	r2, [r7, #3]
 8011738:	461a      	mov	r2, r3
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	4413      	add	r3, r2
 801173e:	781b      	ldrb	r3, [r3, #0]
 8011740:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8011742:	78fb      	ldrb	r3, [r7, #3]
 8011744:	1c5a      	adds	r2, r3, #1
 8011746:	70fa      	strb	r2, [r7, #3]
 8011748:	461a      	mov	r2, r3
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	4413      	add	r3, r2
 801174e:	781b      	ldrb	r3, [r3, #0]
 8011750:	021b      	lsls	r3, r3, #8
 8011752:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8011754:	4313      	orrs	r3, r2
 8011756:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8011758:	78fb      	ldrb	r3, [r7, #3]
 801175a:	1c5a      	adds	r2, r3, #1
 801175c:	70fa      	strb	r2, [r7, #3]
 801175e:	461a      	mov	r2, r3
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	4413      	add	r3, r2
 8011764:	781b      	ldrb	r3, [r3, #0]
 8011766:	041b      	lsls	r3, r3, #16
 8011768:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 801176a:	4313      	orrs	r3, r2
 801176c:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency *= 100;
 801176e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011770:	2264      	movs	r2, #100	@ 0x64
 8011772:	fb02 f303 	mul.w	r3, r2, r3
 8011776:	67bb      	str	r3, [r7, #120]	@ 0x78
                datarate = payload[macIndex++] & 0x0F;
 8011778:	78fb      	ldrb	r3, [r7, #3]
 801177a:	1c5a      	adds	r2, r3, #1
 801177c:	70fa      	strb	r2, [r7, #3]
 801177e:	461a      	mov	r2, r3
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	4413      	add	r3, r2
 8011784:	781b      	ldrb	r3, [r3, #0]
 8011786:	f003 030f 	and.w	r3, r3, #15
 801178a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 801178e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8011792:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8011794:	4618      	mov	r0, r3
 8011796:	f002 ff66 	bl	8014666 <LoRaMacClassBPingSlotChannelReq>
 801179a:	4603      	mov	r3, r0
 801179c:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
                macCmdPayload[0] = status;
 80117a0:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 80117a4:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
 80117a8:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80117ac:	2201      	movs	r2, #1
 80117ae:	4619      	mov	r1, r3
 80117b0:	2011      	movs	r0, #17
 80117b2:	f003 f8d3 	bl	801495c <LoRaMacCommandsAddCmd>
#endif /* LORAMAC_VERSION */
                break;
 80117b6:	e08b      	b.n	80118d0 <ProcessMacCommands+0x9a8>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 80117b8:	200d      	movs	r0, #13
 80117ba:	f003 fc07 	bl	8014fcc <LoRaMacConfirmQueueIsCmdActive>
 80117be:	4603      	mov	r3, r0
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	f000 8084 	beq.w	80118ce <ProcessMacCommands+0x9a6>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 80117c6:	210d      	movs	r1, #13
 80117c8:	2000      	movs	r0, #0
 80117ca:	f003 fb73 	bl	8014eb4 <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 80117ce:	2300      	movs	r3, #0
 80117d0:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    uint8_t beaconTimingChannel = 0;
 80117d4:	2300      	movs	r3, #0
 80117d6:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 80117da:	78fb      	ldrb	r3, [r7, #3]
 80117dc:	1c5a      	adds	r2, r3, #1
 80117de:	70fa      	strb	r2, [r7, #3]
 80117e0:	461a      	mov	r2, r3
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	4413      	add	r3, r2
 80117e6:	781b      	ldrb	r3, [r3, #0]
 80117e8:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 80117ec:	78fb      	ldrb	r3, [r7, #3]
 80117ee:	1c5a      	adds	r2, r3, #1
 80117f0:	70fa      	strb	r2, [r7, #3]
 80117f2:	461a      	mov	r2, r3
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	4413      	add	r3, r2
 80117f8:	781b      	ldrb	r3, [r3, #0]
 80117fa:	021b      	lsls	r3, r3, #8
 80117fc:	b21a      	sxth	r2, r3
 80117fe:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	@ 0x7e
 8011802:	4313      	orrs	r3, r2
 8011804:	b21b      	sxth	r3, r3
 8011806:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    beaconTimingChannel = payload[macIndex++];
 801180a:	78fb      	ldrb	r3, [r7, #3]
 801180c:	1c5a      	adds	r2, r3, #1
 801180e:	70fa      	strb	r2, [r7, #3]
 8011810:	461a      	mov	r2, r3
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	4413      	add	r3, r2
 8011816:	781b      	ldrb	r3, [r3, #0]
 8011818:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 801181c:	4b35      	ldr	r3, [pc, #212]	@ (80118f4 <ProcessMacCommands+0x9cc>)
 801181e:	681a      	ldr	r2, [r3, #0]
 8011820:	f897 107d 	ldrb.w	r1, [r7, #125]	@ 0x7d
 8011824:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8011828:	4618      	mov	r0, r3
 801182a:	f002 ff28 	bl	801467e <LoRaMacClassBBeaconTimingAns>
                }
                break;
 801182e:	e04e      	b.n	80118ce <ProcessMacCommands+0x9a6>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 8011830:	2300      	movs	r3, #0
 8011832:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 8011836:	78fb      	ldrb	r3, [r7, #3]
 8011838:	1c5a      	adds	r2, r3, #1
 801183a:	70fa      	strb	r2, [r7, #3]
 801183c:	461a      	mov	r2, r3
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	4413      	add	r3, r2
 8011842:	781b      	ldrb	r3, [r3, #0]
 8011844:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8011848:	78fb      	ldrb	r3, [r7, #3]
 801184a:	1c5a      	adds	r2, r3, #1
 801184c:	70fa      	strb	r2, [r7, #3]
 801184e:	461a      	mov	r2, r3
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	4413      	add	r3, r2
 8011854:	781b      	ldrb	r3, [r3, #0]
 8011856:	021b      	lsls	r3, r3, #8
 8011858:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801185c:	4313      	orrs	r3, r2
 801185e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8011862:	78fb      	ldrb	r3, [r7, #3]
 8011864:	1c5a      	adds	r2, r3, #1
 8011866:	70fa      	strb	r2, [r7, #3]
 8011868:	461a      	mov	r2, r3
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	4413      	add	r3, r2
 801186e:	781b      	ldrb	r3, [r3, #0]
 8011870:	041b      	lsls	r3, r3, #16
 8011872:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8011876:	4313      	orrs	r3, r2
 8011878:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency *= 100;
 801187c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8011880:	2264      	movs	r2, #100	@ 0x64
 8011882:	fb02 f303 	mul.w	r3, r2, r3
 8011886:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 801188a:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 801188e:	f002 ff09 	bl	80146a4 <LoRaMacClassBBeaconFreqReq>
 8011892:	4603      	mov	r3, r0
 8011894:	2b00      	cmp	r3, #0
 8011896:	d003      	beq.n	80118a0 <ProcessMacCommands+0x978>
                    {
                        macCmdPayload[0] = 1;
 8011898:	2301      	movs	r3, #1
 801189a:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
 801189e:	e002      	b.n	80118a6 <ProcessMacCommands+0x97e>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 80118a0:	2300      	movs	r3, #0
 80118a2:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 80118a6:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80118aa:	2201      	movs	r2, #1
 80118ac:	4619      	mov	r1, r3
 80118ae:	2013      	movs	r0, #19
 80118b0:	f003 f854 	bl	801495c <LoRaMacCommandsAddCmd>
                }
                break;
 80118b4:	e00c      	b.n	80118d0 <ProcessMacCommands+0x9a8>
                break;
 80118b6:	bf00      	nop
 80118b8:	e00a      	b.n	80118d0 <ProcessMacCommands+0x9a8>
                break;
 80118ba:	bf00      	nop
 80118bc:	e008      	b.n	80118d0 <ProcessMacCommands+0x9a8>
                break;
 80118be:	bf00      	nop
 80118c0:	e006      	b.n	80118d0 <ProcessMacCommands+0x9a8>
                break;
 80118c2:	bf00      	nop
 80118c4:	e004      	b.n	80118d0 <ProcessMacCommands+0x9a8>
                break;
 80118c6:	bf00      	nop
 80118c8:	e002      	b.n	80118d0 <ProcessMacCommands+0x9a8>
                break;
 80118ca:	bf00      	nop
 80118cc:	e000      	b.n	80118d0 <ProcessMacCommands+0x9a8>
                break;
 80118ce:	bf00      	nop
    while( macIndex < commandsSize )
 80118d0:	78fa      	ldrb	r2, [r7, #3]
 80118d2:	78bb      	ldrb	r3, [r7, #2]
 80118d4:	429a      	cmp	r2, r3
 80118d6:	f4ff ab49 	bcc.w	8010f6c <ProcessMacCommands+0x44>
 80118da:	e004      	b.n	80118e6 <ProcessMacCommands+0x9be>
        return;
 80118dc:	bf00      	nop
 80118de:	e002      	b.n	80118e6 <ProcessMacCommands+0x9be>
            return;
 80118e0:	bf00      	nop
 80118e2:	e000      	b.n	80118e6 <ProcessMacCommands+0x9be>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 80118e4:	bf00      	nop
        }
    }
}
 80118e6:	378c      	adds	r7, #140	@ 0x8c
 80118e8:	46bd      	mov	sp, r7
 80118ea:	bd90      	pop	{r4, r7, pc}
 80118ec:	12d53d80 	.word	0x12d53d80
 80118f0:	200006e0 	.word	0x200006e0
 80118f4:	2000182c 	.word	0x2000182c

080118f8 <Send>:

static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 80118f8:	b580      	push	{r7, lr}
 80118fa:	b08e      	sub	sp, #56	@ 0x38
 80118fc:	af02      	add	r7, sp, #8
 80118fe:	60f8      	str	r0, [r7, #12]
 8011900:	607a      	str	r2, [r7, #4]
 8011902:	461a      	mov	r2, r3
 8011904:	460b      	mov	r3, r1
 8011906:	72fb      	strb	r3, [r7, #11]
 8011908:	4613      	mov	r3, r2
 801190a:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 801190c:	2303      	movs	r3, #3
 801190e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 8011912:	4b66      	ldr	r3, [pc, #408]	@ (8011aac <Send+0x1b4>)
 8011914:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8011918:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 801191c:	4b63      	ldr	r3, [pc, #396]	@ (8011aac <Send+0x1b4>)
 801191e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8011922:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8011926:	4b61      	ldr	r3, [pc, #388]	@ (8011aac <Send+0x1b4>)
 8011928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801192a:	62bb      	str	r3, [r7, #40]	@ 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 801192c:	4b5f      	ldr	r3, [pc, #380]	@ (8011aac <Send+0x1b4>)
 801192e:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8011932:	2b00      	cmp	r3, #0
 8011934:	d101      	bne.n	801193a <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 8011936:	2307      	movs	r3, #7
 8011938:	e0b4      	b.n	8011aa4 <Send+0x1ac>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 801193a:	4b5c      	ldr	r3, [pc, #368]	@ (8011aac <Send+0x1b4>)
 801193c:	f893 311b 	ldrb.w	r3, [r3, #283]	@ 0x11b
 8011940:	2b00      	cmp	r3, #0
 8011942:	d102      	bne.n	801194a <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 8011944:	4b59      	ldr	r3, [pc, #356]	@ (8011aac <Send+0x1b4>)
 8011946:	2200      	movs	r2, #0
 8011948:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    fCtrl.Value = 0;
 801194a:	2300      	movs	r3, #0
 801194c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 8011950:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8011954:	f36f 0303 	bfc	r3, #0, #4
 8011958:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 801195c:	4b53      	ldr	r3, [pc, #332]	@ (8011aac <Send+0x1b4>)
 801195e:	f893 211a 	ldrb.w	r2, [r3, #282]	@ 0x11a
 8011962:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8011966:	f362 13c7 	bfi	r3, r2, #7, #1
 801196a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 801196e:	4b4f      	ldr	r3, [pc, #316]	@ (8011aac <Send+0x1b4>)
 8011970:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8011974:	2b01      	cmp	r3, #1
 8011976:	d106      	bne.n	8011986 <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 8011978:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 801197c:	f043 0310 	orr.w	r3, r3, #16
 8011980:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8011984:	e005      	b.n	8011992 <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 8011986:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 801198a:	f36f 1304 	bfc	r3, #4, #1
 801198e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 8011992:	4b46      	ldr	r3, [pc, #280]	@ (8011aac <Send+0x1b4>)
 8011994:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8011998:	2b00      	cmp	r3, #0
 801199a:	d005      	beq.n	80119a8 <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 801199c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80119a0:	f043 0320 	orr.w	r3, r3, #32
 80119a4:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    }

    // ADR next request
    adrNext.UpdateChanMask = true;
 80119a8:	2301      	movs	r3, #1
 80119aa:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 80119ac:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80119b0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80119b4:	b2db      	uxtb	r3, r3
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	bf14      	ite	ne
 80119ba:	2301      	movne	r3, #1
 80119bc:	2300      	moveq	r3, #0
 80119be:	b2db      	uxtb	r3, r3
 80119c0:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80119c2:	4b3a      	ldr	r3, [pc, #232]	@ (8011aac <Send+0x1b4>)
 80119c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80119c6:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 80119c8:	4b38      	ldr	r3, [pc, #224]	@ (8011aac <Send+0x1b4>)
 80119ca:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 80119ce:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 80119d0:	4b36      	ldr	r3, [pc, #216]	@ (8011aac <Send+0x1b4>)
 80119d2:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 80119d6:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80119d8:	4b34      	ldr	r3, [pc, #208]	@ (8011aac <Send+0x1b4>)
 80119da:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 80119de:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80119e2:	4b32      	ldr	r3, [pc, #200]	@ (8011aac <Send+0x1b4>)
 80119e4:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 80119e8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80119ec:	4b2f      	ldr	r3, [pc, #188]	@ (8011aac <Send+0x1b4>)
 80119ee:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80119f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 80119f6:	4b2d      	ldr	r3, [pc, #180]	@ (8011aac <Send+0x1b4>)
 80119f8:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80119fc:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
                                               &Nvm.MacGroup1.ChannelsTxPower, &adrAckCounter );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8011a00:	4b2a      	ldr	r3, [pc, #168]	@ (8011aac <Send+0x1b4>)
 8011a02:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8011a06:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 8011a0a:	f107 0014 	add.w	r0, r7, #20
 8011a0e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8011a12:	9300      	str	r3, [sp, #0]
 8011a14:	4b26      	ldr	r3, [pc, #152]	@ (8011ab0 <Send+0x1b8>)
 8011a16:	4a27      	ldr	r2, [pc, #156]	@ (8011ab4 <Send+0x1bc>)
 8011a18:	4927      	ldr	r1, [pc, #156]	@ (8011ab8 <Send+0x1c0>)
 8011a1a:	f002 fcbd 	bl	8014398 <LoRaMacAdrCalcNext>
 8011a1e:	4603      	mov	r3, r0
 8011a20:	461a      	mov	r2, r3
 8011a22:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8011a26:	f362 1386 	bfi	r3, r2, #6, #1
 8011a2a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower,
                                               &Nvm.MacGroup2.MacParams.ChannelsNbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 8011a2e:	7afa      	ldrb	r2, [r7, #11]
 8011a30:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8011a34:	893b      	ldrh	r3, [r7, #8]
 8011a36:	9300      	str	r3, [sp, #0]
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	68f8      	ldr	r0, [r7, #12]
 8011a3c:	f000 fc72 	bl	8012324 <PrepareFrame>
 8011a40:	4603      	mov	r3, r0
 8011a42:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 8011a46:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	d003      	beq.n	8011a56 <Send+0x15e>
 8011a4e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011a52:	2b0a      	cmp	r3, #10
 8011a54:	d107      	bne.n	8011a66 <Send+0x16e>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx );
 8011a56:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8011a5a:	4618      	mov	r0, r3
 8011a5c:	f000 f962 	bl	8011d24 <ScheduleTx>
 8011a60:	4603      	mov	r3, r0
 8011a62:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 8011a66:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	d00a      	beq.n	8011a84 <Send+0x18c>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 8011a6e:	4a0f      	ldr	r2, [pc, #60]	@ (8011aac <Send+0x1b4>)
 8011a70:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8011a74:	f882 3039 	strb.w	r3, [r2, #57]	@ 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 8011a78:	4a0c      	ldr	r2, [pc, #48]	@ (8011aac <Send+0x1b4>)
 8011a7a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8011a7e:	f882 3038 	strb.w	r3, [r2, #56]	@ 0x38
 8011a82:	e00d      	b.n	8011aa0 <Send+0x1a8>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 8011a84:	4b09      	ldr	r3, [pc, #36]	@ (8011aac <Send+0x1b4>)
 8011a86:	2200      	movs	r2, #0
 8011a88:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 8011a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a8e:	4a07      	ldr	r2, [pc, #28]	@ (8011aac <Send+0x1b4>)
 8011a90:	6293      	str	r3, [r2, #40]	@ 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 8011a92:	f003 f809 	bl	8014aa8 <LoRaMacCommandsRemoveNoneStickyCmds>
 8011a96:	4603      	mov	r3, r0
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d001      	beq.n	8011aa0 <Send+0x1a8>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011a9c:	2313      	movs	r3, #19
 8011a9e:	e001      	b.n	8011aa4 <Send+0x1ac>
        }
    }
    return status;
 8011aa0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8011aa4:	4618      	mov	r0, r3
 8011aa6:	3730      	adds	r7, #48	@ 0x30
 8011aa8:	46bd      	mov	sp, r7
 8011aaa:	bd80      	pop	{r7, pc}
 8011aac:	20000bfc 	.word	0x20000bfc
 8011ab0:	20000c64 	.word	0x20000c64
 8011ab4:	20000c34 	.word	0x20000c34
 8011ab8:	20000c35 	.word	0x20000c35

08011abc <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 8011abc:	b580      	push	{r7, lr}
 8011abe:	b084      	sub	sp, #16
 8011ac0:	af00      	add	r7, sp, #0
 8011ac2:	4603      	mov	r3, r0
 8011ac4:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8011ac6:	2300      	movs	r3, #0
 8011ac8:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 8011aca:	2300      	movs	r3, #0
 8011acc:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 8011ace:	2301      	movs	r3, #1
 8011ad0:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 8011ad2:	79fb      	ldrb	r3, [r7, #7]
 8011ad4:	2bff      	cmp	r3, #255	@ 0xff
 8011ad6:	d11f      	bne.n	8011b18 <SendReJoinReq+0x5c>
            break;
        }
#endif /* LORAMAC_VERSION */
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 8011ad8:	2000      	movs	r0, #0
 8011ada:	f7ff f8eb 	bl	8010cb4 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 8011ade:	4b15      	ldr	r3, [pc, #84]	@ (8011b34 <SendReJoinReq+0x78>)
 8011ae0:	2200      	movs	r2, #0
 8011ae2:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 8011ae6:	4b13      	ldr	r3, [pc, #76]	@ (8011b34 <SendReJoinReq+0x78>)
 8011ae8:	4a13      	ldr	r2, [pc, #76]	@ (8011b38 <SendReJoinReq+0x7c>)
 8011aea:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8011aee:	4b11      	ldr	r3, [pc, #68]	@ (8011b34 <SendReJoinReq+0x78>)
 8011af0:	22ff      	movs	r2, #255	@ 0xff
 8011af2:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 8011af6:	7b3b      	ldrb	r3, [r7, #12]
 8011af8:	f36f 1347 	bfc	r3, #5, #3
 8011afc:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 8011afe:	7b3a      	ldrb	r2, [r7, #12]
 8011b00:	4b0c      	ldr	r3, [pc, #48]	@ (8011b34 <SendReJoinReq+0x78>)
 8011b02:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d

            SecureElementGetJoinEui( MacCtx.TxMsg.Message.JoinReq.JoinEUI );
 8011b06:	480d      	ldr	r0, [pc, #52]	@ (8011b3c <SendReJoinReq+0x80>)
 8011b08:	f7fb ff2a 	bl	800d960 <SecureElementGetJoinEui>
            SecureElementGetDevEui( MacCtx.TxMsg.Message.JoinReq.DevEUI );
 8011b0c:	480c      	ldr	r0, [pc, #48]	@ (8011b40 <SendReJoinReq+0x84>)
 8011b0e:	f7fb fef7 	bl	800d900 <SecureElementGetDevEui>

            allowDelayedTx = false;
 8011b12:	2300      	movs	r3, #0
 8011b14:	73fb      	strb	r3, [r7, #15]

            break;
 8011b16:	e002      	b.n	8011b1e <SendReJoinReq+0x62>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011b18:	2302      	movs	r3, #2
 8011b1a:	73bb      	strb	r3, [r7, #14]
            break;
 8011b1c:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 8011b1e:	7bfb      	ldrb	r3, [r7, #15]
 8011b20:	4618      	mov	r0, r3
 8011b22:	f000 f8ff 	bl	8011d24 <ScheduleTx>
 8011b26:	4603      	mov	r3, r0
 8011b28:	73bb      	strb	r3, [r7, #14]
    return status;
 8011b2a:	7bbb      	ldrb	r3, [r7, #14]
}
 8011b2c:	4618      	mov	r0, r3
 8011b2e:	3710      	adds	r7, #16
 8011b30:	46bd      	mov	sp, r7
 8011b32:	bd80      	pop	{r7, pc}
 8011b34:	200006e0 	.word	0x200006e0
 8011b38:	200006e2 	.word	0x200006e2
 8011b3c:	200007ee 	.word	0x200007ee
 8011b40:	200007f6 	.word	0x200007f6

08011b44 <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 8011b44:	b580      	push	{r7, lr}
 8011b46:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8011b48:	f002 fd36 	bl	80145b8 <LoRaMacClassBIsBeaconExpected>
 8011b4c:	4603      	mov	r3, r0
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	d001      	beq.n	8011b56 <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8011b52:	230e      	movs	r3, #14
 8011b54:	e013      	b.n	8011b7e <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8011b56:	4b0b      	ldr	r3, [pc, #44]	@ (8011b84 <CheckForClassBCollision+0x40>)
 8011b58:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8011b5c:	2b01      	cmp	r3, #1
 8011b5e:	d10d      	bne.n	8011b7c <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8011b60:	f002 fd31 	bl	80145c6 <LoRaMacClassBIsPingExpected>
 8011b64:	4603      	mov	r3, r0
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d001      	beq.n	8011b6e <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8011b6a:	230f      	movs	r3, #15
 8011b6c:	e007      	b.n	8011b7e <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8011b6e:	f002 fd31 	bl	80145d4 <LoRaMacClassBIsMulticastExpected>
 8011b72:	4603      	mov	r3, r0
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	d001      	beq.n	8011b7c <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8011b78:	230f      	movs	r3, #15
 8011b7a:	e000      	b.n	8011b7e <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 8011b7c:	2300      	movs	r3, #0
}
 8011b7e:	4618      	mov	r0, r3
 8011b80:	bd80      	pop	{r7, pc}
 8011b82:	bf00      	nop
 8011b84:	20000bfc 	.word	0x20000bfc

08011b88 <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 8011b88:	b590      	push	{r4, r7, lr}
 8011b8a:	b083      	sub	sp, #12
 8011b8c:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8011b8e:	4b2d      	ldr	r3, [pc, #180]	@ (8011c44 <ComputeRxWindowParameters+0xbc>)
 8011b90:	f893 4048 	ldrb.w	r4, [r3, #72]	@ 0x48
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8011b94:	4b2b      	ldr	r3, [pc, #172]	@ (8011c44 <ComputeRxWindowParameters+0xbc>)
 8011b96:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 8011b9a:	4b2a      	ldr	r3, [pc, #168]	@ (8011c44 <ComputeRxWindowParameters+0xbc>)
 8011b9c:	f893 107d 	ldrb.w	r1, [r3, #125]	@ 0x7d
 8011ba0:	4b28      	ldr	r3, [pc, #160]	@ (8011c44 <ComputeRxWindowParameters+0xbc>)
 8011ba2:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 8011ba6:	4b27      	ldr	r3, [pc, #156]	@ (8011c44 <ComputeRxWindowParameters+0xbc>)
 8011ba8:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8011bac:	b25b      	sxtb	r3, r3
 8011bae:	f004 fe60 	bl	8016872 <RegionApplyDrOffset>
 8011bb2:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8011bb4:	b259      	sxtb	r1, r3
 8011bb6:	4b23      	ldr	r3, [pc, #140]	@ (8011c44 <ComputeRxWindowParameters+0xbc>)
 8011bb8:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 8011bbc:	4b21      	ldr	r3, [pc, #132]	@ (8011c44 <ComputeRxWindowParameters+0xbc>)
 8011bbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011bc0:	4821      	ldr	r0, [pc, #132]	@ (8011c48 <ComputeRxWindowParameters+0xc0>)
 8011bc2:	9000      	str	r0, [sp, #0]
 8011bc4:	4620      	mov	r0, r4
 8011bc6:	f004 fd16 	bl	80165f6 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8011bca:	4b1e      	ldr	r3, [pc, #120]	@ (8011c44 <ComputeRxWindowParameters+0xbc>)
 8011bcc:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 8011bd0:	4b1c      	ldr	r3, [pc, #112]	@ (8011c44 <ComputeRxWindowParameters+0xbc>)
 8011bd2:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8011bd6:	b259      	sxtb	r1, r3
 8011bd8:	4b1a      	ldr	r3, [pc, #104]	@ (8011c44 <ComputeRxWindowParameters+0xbc>)
 8011bda:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 8011bde:	4b19      	ldr	r3, [pc, #100]	@ (8011c44 <ComputeRxWindowParameters+0xbc>)
 8011be0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011be2:	4c1a      	ldr	r4, [pc, #104]	@ (8011c4c <ComputeRxWindowParameters+0xc4>)
 8011be4:	9400      	str	r4, [sp, #0]
 8011be6:	f004 fd06 	bl	80165f6 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8011bea:	4b16      	ldr	r3, [pc, #88]	@ (8011c44 <ComputeRxWindowParameters+0xbc>)
 8011bec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011bee:	4a18      	ldr	r2, [pc, #96]	@ (8011c50 <ComputeRxWindowParameters+0xc8>)
 8011bf0:	f8d2 23c4 	ldr.w	r2, [r2, #964]	@ 0x3c4
 8011bf4:	4413      	add	r3, r2
 8011bf6:	4a16      	ldr	r2, [pc, #88]	@ (8011c50 <ComputeRxWindowParameters+0xc8>)
 8011bf8:	f8c2 33b0 	str.w	r3, [r2, #944]	@ 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8011bfc:	4b11      	ldr	r3, [pc, #68]	@ (8011c44 <ComputeRxWindowParameters+0xbc>)
 8011bfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011c00:	4a13      	ldr	r2, [pc, #76]	@ (8011c50 <ComputeRxWindowParameters+0xc8>)
 8011c02:	f8d2 23dc 	ldr.w	r2, [r2, #988]	@ 0x3dc
 8011c06:	4413      	add	r3, r2
 8011c08:	4a11      	ldr	r2, [pc, #68]	@ (8011c50 <ComputeRxWindowParameters+0xc8>)
 8011c0a:	f8c2 33b4 	str.w	r3, [r2, #948]	@ 0x3b4

    if( MacCtx.TxMsg.Type != LORAMAC_MSG_TYPE_DATA )
 8011c0e:	4b10      	ldr	r3, [pc, #64]	@ (8011c50 <ComputeRxWindowParameters+0xc8>)
 8011c10:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8011c14:	2b04      	cmp	r3, #4
 8011c16:	d011      	beq.n	8011c3c <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8011c18:	4b0a      	ldr	r3, [pc, #40]	@ (8011c44 <ComputeRxWindowParameters+0xbc>)
 8011c1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011c1c:	4a0c      	ldr	r2, [pc, #48]	@ (8011c50 <ComputeRxWindowParameters+0xc8>)
 8011c1e:	f8d2 23c4 	ldr.w	r2, [r2, #964]	@ 0x3c4
 8011c22:	4413      	add	r3, r2
 8011c24:	4a0a      	ldr	r2, [pc, #40]	@ (8011c50 <ComputeRxWindowParameters+0xc8>)
 8011c26:	f8c2 33b0 	str.w	r3, [r2, #944]	@ 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8011c2a:	4b06      	ldr	r3, [pc, #24]	@ (8011c44 <ComputeRxWindowParameters+0xbc>)
 8011c2c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011c2e:	4a08      	ldr	r2, [pc, #32]	@ (8011c50 <ComputeRxWindowParameters+0xc8>)
 8011c30:	f8d2 23dc 	ldr.w	r2, [r2, #988]	@ 0x3dc
 8011c34:	4413      	add	r3, r2
 8011c36:	4a06      	ldr	r2, [pc, #24]	@ (8011c50 <ComputeRxWindowParameters+0xc8>)
 8011c38:	f8c2 33b4 	str.w	r3, [r2, #948]	@ 0x3b4
    }
}
 8011c3c:	bf00      	nop
 8011c3e:	3704      	adds	r7, #4
 8011c40:	46bd      	mov	sp, r7
 8011c42:	bd90      	pop	{r4, r7, pc}
 8011c44:	20000bfc 	.word	0x20000bfc
 8011c48:	20000a98 	.word	0x20000a98
 8011c4c:	20000ab0 	.word	0x20000ab0
 8011c50:	200006e0 	.word	0x200006e0

08011c54 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 8011c54:	b580      	push	{r7, lr}
 8011c56:	b082      	sub	sp, #8
 8011c58:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 8011c5a:	2300      	movs	r3, #0
 8011c5c:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8011c5e:	4b13      	ldr	r3, [pc, #76]	@ (8011cac <VerifyTxFrame+0x58>)
 8011c60:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	d01b      	beq.n	8011ca0 <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8011c68:	1d3b      	adds	r3, r7, #4
 8011c6a:	4618      	mov	r0, r3
 8011c6c:	f002 ff6c 	bl	8014b48 <LoRaMacCommandsGetSizeSerializedCmds>
 8011c70:	4603      	mov	r3, r0
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d001      	beq.n	8011c7a <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011c76:	2313      	movs	r3, #19
 8011c78:	e013      	b.n	8011ca2 <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 8011c7a:	4b0d      	ldr	r3, [pc, #52]	@ (8011cb0 <VerifyTxFrame+0x5c>)
 8011c7c:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8011c80:	4a0a      	ldr	r2, [pc, #40]	@ (8011cac <VerifyTxFrame+0x58>)
 8011c82:	f992 1039 	ldrsb.w	r1, [r2, #57]	@ 0x39
 8011c86:	687a      	ldr	r2, [r7, #4]
 8011c88:	b2d2      	uxtb	r2, r2
 8011c8a:	4618      	mov	r0, r3
 8011c8c:	f7ff f924 	bl	8010ed8 <ValidatePayloadLength>
 8011c90:	4603      	mov	r3, r0
 8011c92:	f083 0301 	eor.w	r3, r3, #1
 8011c96:	b2db      	uxtb	r3, r3
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d001      	beq.n	8011ca0 <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 8011c9c:	2308      	movs	r3, #8
 8011c9e:	e000      	b.n	8011ca2 <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 8011ca0:	2300      	movs	r3, #0
}
 8011ca2:	4618      	mov	r0, r3
 8011ca4:	3708      	adds	r7, #8
 8011ca6:	46bd      	mov	sp, r7
 8011ca8:	bd80      	pop	{r7, pc}
 8011caa:	bf00      	nop
 8011cac:	20000bfc 	.word	0x20000bfc
 8011cb0:	200006e0 	.word	0x200006e0

08011cb4 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 8011cb4:	b580      	push	{r7, lr}
 8011cb6:	b082      	sub	sp, #8
 8011cb8:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 8011cba:	4b18      	ldr	r3, [pc, #96]	@ (8011d1c <SerializeTxFrame+0x68>)
 8011cbc:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8011cc0:	2b00      	cmp	r3, #0
 8011cc2:	d002      	beq.n	8011cca <SerializeTxFrame+0x16>
 8011cc4:	2b04      	cmp	r3, #4
 8011cc6:	d011      	beq.n	8011cec <SerializeTxFrame+0x38>
 8011cc8:	e021      	b.n	8011d0e <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8011cca:	4815      	ldr	r0, [pc, #84]	@ (8011d20 <SerializeTxFrame+0x6c>)
 8011ccc:	f004 fa66 	bl	801619c <LoRaMacSerializerJoinRequest>
 8011cd0:	4603      	mov	r3, r0
 8011cd2:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8011cd4:	79fb      	ldrb	r3, [r7, #7]
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	d001      	beq.n	8011cde <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8011cda:	2311      	movs	r3, #17
 8011cdc:	e01a      	b.n	8011d14 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8011cde:	4b0f      	ldr	r3, [pc, #60]	@ (8011d1c <SerializeTxFrame+0x68>)
 8011ce0:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8011ce4:	461a      	mov	r2, r3
 8011ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8011d1c <SerializeTxFrame+0x68>)
 8011ce8:	801a      	strh	r2, [r3, #0]
            break;
 8011cea:	e012      	b.n	8011d12 <SerializeTxFrame+0x5e>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 8011cec:	480c      	ldr	r0, [pc, #48]	@ (8011d20 <SerializeTxFrame+0x6c>)
 8011cee:	f004 fad7 	bl	80162a0 <LoRaMacSerializerData>
 8011cf2:	4603      	mov	r3, r0
 8011cf4:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8011cf6:	79fb      	ldrb	r3, [r7, #7]
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	d001      	beq.n	8011d00 <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8011cfc:	2311      	movs	r3, #17
 8011cfe:	e009      	b.n	8011d14 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8011d00:	4b06      	ldr	r3, [pc, #24]	@ (8011d1c <SerializeTxFrame+0x68>)
 8011d02:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8011d06:	461a      	mov	r2, r3
 8011d08:	4b04      	ldr	r3, [pc, #16]	@ (8011d1c <SerializeTxFrame+0x68>)
 8011d0a:	801a      	strh	r2, [r3, #0]
            break;
 8011d0c:	e001      	b.n	8011d12 <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8011d0e:	2303      	movs	r3, #3
 8011d10:	e000      	b.n	8011d14 <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 8011d12:	2300      	movs	r3, #0
}
 8011d14:	4618      	mov	r0, r3
 8011d16:	3708      	adds	r7, #8
 8011d18:	46bd      	mov	sp, r7
 8011d1a:	bd80      	pop	{r7, pc}
 8011d1c:	200006e0 	.word	0x200006e0
 8011d20:	200007e8 	.word	0x200007e8

08011d24 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 8011d24:	b580      	push	{r7, lr}
 8011d26:	b090      	sub	sp, #64	@ 0x40
 8011d28:	af02      	add	r7, sp, #8
 8011d2a:	4603      	mov	r3, r0
 8011d2c:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011d2e:	2303      	movs	r3, #3
 8011d30:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 8011d34:	f7ff ff06 	bl	8011b44 <CheckForClassBCollision>
 8011d38:	4603      	mov	r3, r0
 8011d3a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 8011d3e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d002      	beq.n	8011d4c <ScheduleTx+0x28>
    {
        return status;
 8011d46:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011d4a:	e092      	b.n	8011e72 <ScheduleTx+0x14e>
    }

    // Update back-off
    CalculateBackOff( );
 8011d4c:	f000 f8f8 	bl	8011f40 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 8011d50:	f7ff ffb0 	bl	8011cb4 <SerializeTxFrame>
 8011d54:	4603      	mov	r3, r0
 8011d56:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 8011d5a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d002      	beq.n	8011d68 <ScheduleTx+0x44>
    {
        return status;
 8011d62:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011d66:	e084      	b.n	8011e72 <ScheduleTx+0x14e>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 8011d68:	4b44      	ldr	r3, [pc, #272]	@ (8011e7c <ScheduleTx+0x158>)
 8011d6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011d6c:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8011d6e:	4b43      	ldr	r3, [pc, #268]	@ (8011e7c <ScheduleTx+0x158>)
 8011d70:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8011d74:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 8011d76:	4b41      	ldr	r3, [pc, #260]	@ (8011e7c <ScheduleTx+0x158>)
 8011d78:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 8011d7c:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8011d7e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011d82:	4618      	mov	r0, r3
 8011d84:	f00b fdfe 	bl	801d984 <SysTimeGetMcuTime>
 8011d88:	4638      	mov	r0, r7
 8011d8a:	4b3c      	ldr	r3, [pc, #240]	@ (8011e7c <ScheduleTx+0x158>)
 8011d8c:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
 8011d90:	9200      	str	r2, [sp, #0]
 8011d92:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8011d96:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8011d9a:	ca06      	ldmia	r2, {r1, r2}
 8011d9c:	f00b fd53 	bl	801d846 <SysTimeSub>
 8011da0:	f107 0320 	add.w	r3, r7, #32
 8011da4:	463a      	mov	r2, r7
 8011da6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011daa:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 8011dae:	4b33      	ldr	r3, [pc, #204]	@ (8011e7c <ScheduleTx+0x158>)
 8011db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011db2:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 8011db4:	2300      	movs	r3, #0
 8011db6:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    nextChan.Joined = true;
 8011dba:	2301      	movs	r3, #1
 8011dbc:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 8011dbe:	4b30      	ldr	r3, [pc, #192]	@ (8011e80 <ScheduleTx+0x15c>)
 8011dc0:	881b      	ldrh	r3, [r3, #0]
 8011dc2:	857b      	strh	r3, [r7, #42]	@ 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8011dc4:	4b2d      	ldr	r3, [pc, #180]	@ (8011e7c <ScheduleTx+0x158>)
 8011dc6:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8011dca:	2b00      	cmp	r3, #0
 8011dcc:	d104      	bne.n	8011dd8 <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 8011dce:	2301      	movs	r3, #1
 8011dd0:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        nextChan.Joined = false;
 8011dd4:	2300      	movs	r3, #0
 8011dd6:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 8011dd8:	4b28      	ldr	r3, [pc, #160]	@ (8011e7c <ScheduleTx+0x158>)
 8011dda:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 8011dde:	f107 0114 	add.w	r1, r7, #20
 8011de2:	4b28      	ldr	r3, [pc, #160]	@ (8011e84 <ScheduleTx+0x160>)
 8011de4:	9300      	str	r3, [sp, #0]
 8011de6:	4b28      	ldr	r3, [pc, #160]	@ (8011e88 <ScheduleTx+0x164>)
 8011de8:	4a28      	ldr	r2, [pc, #160]	@ (8011e8c <ScheduleTx+0x168>)
 8011dea:	f004 fd1f 	bl	801682c <RegionNextChannel>
 8011dee:	4603      	mov	r3, r0
 8011df0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( status != LORAMAC_STATUS_OK )
 8011df4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	d025      	beq.n	8011e48 <ScheduleTx+0x124>
    {
        if( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED )
 8011dfc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011e00:	2b0b      	cmp	r3, #11
 8011e02:	d11e      	bne.n	8011e42 <ScheduleTx+0x11e>
        {
            if( MacCtx.DutyCycleWaitTime != 0 )
 8011e04:	4b1e      	ldr	r3, [pc, #120]	@ (8011e80 <ScheduleTx+0x15c>)
 8011e06:	f8d3 3494 	ldr.w	r3, [r3, #1172]	@ 0x494
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	d01c      	beq.n	8011e48 <ScheduleTx+0x124>
            {
                if( allowDelayedTx == true )
 8011e0e:	7bfb      	ldrb	r3, [r7, #15]
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d013      	beq.n	8011e3c <ScheduleTx+0x118>
                {
                    // Allow delayed transmissions. We have to allow it in case
                    // the MAC must retransmit a frame with the frame repetitions
                    MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8011e14:	4b1a      	ldr	r3, [pc, #104]	@ (8011e80 <ScheduleTx+0x15c>)
 8011e16:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8011e1a:	f043 0320 	orr.w	r3, r3, #32
 8011e1e:	4a18      	ldr	r2, [pc, #96]	@ (8011e80 <ScheduleTx+0x15c>)
 8011e20:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
                    TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8011e24:	4b16      	ldr	r3, [pc, #88]	@ (8011e80 <ScheduleTx+0x15c>)
 8011e26:	f8d3 3494 	ldr.w	r3, [r3, #1172]	@ 0x494
 8011e2a:	4619      	mov	r1, r3
 8011e2c:	4818      	ldr	r0, [pc, #96]	@ (8011e90 <ScheduleTx+0x16c>)
 8011e2e:	f00c fb47 	bl	801e4c0 <UTIL_TIMER_SetPeriod>
                    TimerStart( &MacCtx.TxDelayedTimer );
 8011e32:	4817      	ldr	r0, [pc, #92]	@ (8011e90 <ScheduleTx+0x16c>)
 8011e34:	f00c fa66 	bl	801e304 <UTIL_TIMER_Start>
                    return LORAMAC_STATUS_OK;
 8011e38:	2300      	movs	r3, #0
 8011e3a:	e01a      	b.n	8011e72 <ScheduleTx+0x14e>
                }
                // Need to delay, but allowDelayedTx does not allow it
                return status;
 8011e3c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011e40:	e017      	b.n	8011e72 <ScheduleTx+0x14e>
            }
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 8011e42:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011e46:	e014      	b.n	8011e72 <ScheduleTx+0x14e>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 8011e48:	f7ff fe9e 	bl	8011b88 <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 8011e4c:	f7ff ff02 	bl	8011c54 <VerifyTxFrame>
 8011e50:	4603      	mov	r3, r0
 8011e52:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 8011e56:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	d002      	beq.n	8011e64 <ScheduleTx+0x140>
    {
        return status;
 8011e5e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011e62:	e006      	b.n	8011e72 <ScheduleTx+0x14e>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 8011e64:	4b06      	ldr	r3, [pc, #24]	@ (8011e80 <ScheduleTx+0x15c>)
 8011e66:	f893 341b 	ldrb.w	r3, [r3, #1051]	@ 0x41b
 8011e6a:	4618      	mov	r0, r3
 8011e6c:	f000 fb74 	bl	8012558 <SendFrameOnChannel>
 8011e70:	4603      	mov	r3, r0
}
 8011e72:	4618      	mov	r0, r3
 8011e74:	3738      	adds	r7, #56	@ 0x38
 8011e76:	46bd      	mov	sp, r7
 8011e78:	bd80      	pop	{r7, pc}
 8011e7a:	bf00      	nop
 8011e7c:	20000bfc 	.word	0x20000bfc
 8011e80:	200006e0 	.word	0x200006e0
 8011e84:	20000c2c 	.word	0x20000c2c
 8011e88:	20000b74 	.word	0x20000b74
 8011e8c:	20000afb 	.word	0x20000afb
 8011e90:	20000a48 	.word	0x20000a48

08011e94 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 8011e94:	b580      	push	{r7, lr}
 8011e96:	b084      	sub	sp, #16
 8011e98:	af00      	add	r7, sp, #0
 8011e9a:	4603      	mov	r3, r0
 8011e9c:	460a      	mov	r2, r1
 8011e9e:	71fb      	strb	r3, [r7, #7]
 8011ea0:	4613      	mov	r3, r2
 8011ea2:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 8011ea4:	2312      	movs	r3, #18
 8011ea6:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 8011ea8:	2300      	movs	r3, #0
 8011eaa:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 8011eac:	4b22      	ldr	r3, [pc, #136]	@ (8011f38 <SecureFrame+0xa4>)
 8011eae:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	d002      	beq.n	8011ebc <SecureFrame+0x28>
 8011eb6:	2b04      	cmp	r3, #4
 8011eb8:	d011      	beq.n	8011ede <SecureFrame+0x4a>
 8011eba:	e036      	b.n	8011f2a <SecureFrame+0x96>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8011ebc:	481f      	ldr	r0, [pc, #124]	@ (8011f3c <SecureFrame+0xa8>)
 8011ebe:	f003 fd3d 	bl	801593c <LoRaMacCryptoPrepareJoinRequest>
 8011ec2:	4603      	mov	r3, r0
 8011ec4:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8011ec6:	7bfb      	ldrb	r3, [r7, #15]
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d001      	beq.n	8011ed0 <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8011ecc:	2311      	movs	r3, #17
 8011ece:	e02f      	b.n	8011f30 <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8011ed0:	4b19      	ldr	r3, [pc, #100]	@ (8011f38 <SecureFrame+0xa4>)
 8011ed2:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8011ed6:	461a      	mov	r2, r3
 8011ed8:	4b17      	ldr	r3, [pc, #92]	@ (8011f38 <SecureFrame+0xa4>)
 8011eda:	801a      	strh	r2, [r3, #0]
            break;
 8011edc:	e027      	b.n	8011f2e <SecureFrame+0x9a>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8011ede:	f107 0308 	add.w	r3, r7, #8
 8011ee2:	4618      	mov	r0, r3
 8011ee4:	f003 fc64 	bl	80157b0 <LoRaMacCryptoGetFCntUp>
 8011ee8:	4603      	mov	r3, r0
 8011eea:	2b00      	cmp	r3, #0
 8011eec:	d001      	beq.n	8011ef2 <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8011eee:	2312      	movs	r3, #18
 8011ef0:	e01e      	b.n	8011f30 <SecureFrame+0x9c>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( MacCtx.ChannelsNbTransCounter >= 1 )
 8011ef2:	4b11      	ldr	r3, [pc, #68]	@ (8011f38 <SecureFrame+0xa4>)
 8011ef4:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	d002      	beq.n	8011f02 <SecureFrame+0x6e>
#endif /* LORAMAC_VERSION */
            {
                fCntUp -= 1;
 8011efc:	68bb      	ldr	r3, [r7, #8]
 8011efe:	3b01      	subs	r3, #1
 8011f00:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 8011f02:	68b8      	ldr	r0, [r7, #8]
 8011f04:	79ba      	ldrb	r2, [r7, #6]
 8011f06:	79f9      	ldrb	r1, [r7, #7]
 8011f08:	4b0c      	ldr	r3, [pc, #48]	@ (8011f3c <SecureFrame+0xa8>)
 8011f0a:	f003 fe3f 	bl	8015b8c <LoRaMacCryptoSecureMessage>
 8011f0e:	4603      	mov	r3, r0
 8011f10:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8011f12:	7bfb      	ldrb	r3, [r7, #15]
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	d001      	beq.n	8011f1c <SecureFrame+0x88>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8011f18:	2311      	movs	r3, #17
 8011f1a:	e009      	b.n	8011f30 <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8011f1c:	4b06      	ldr	r3, [pc, #24]	@ (8011f38 <SecureFrame+0xa4>)
 8011f1e:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8011f22:	461a      	mov	r2, r3
 8011f24:	4b04      	ldr	r3, [pc, #16]	@ (8011f38 <SecureFrame+0xa4>)
 8011f26:	801a      	strh	r2, [r3, #0]
            break;
 8011f28:	e001      	b.n	8011f2e <SecureFrame+0x9a>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8011f2a:	2303      	movs	r3, #3
 8011f2c:	e000      	b.n	8011f30 <SecureFrame+0x9c>
    }
    return LORAMAC_STATUS_OK;
 8011f2e:	2300      	movs	r3, #0
}
 8011f30:	4618      	mov	r0, r3
 8011f32:	3710      	adds	r7, #16
 8011f34:	46bd      	mov	sp, r7
 8011f36:	bd80      	pop	{r7, pc}
 8011f38:	200006e0 	.word	0x200006e0
 8011f3c:	200007e8 	.word	0x200007e8

08011f40 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 8011f40:	b480      	push	{r7}
 8011f42:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8011f44:	4b09      	ldr	r3, [pc, #36]	@ (8011f6c <CalculateBackOff+0x2c>)
 8011f46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d10a      	bne.n	8011f62 <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8011f4c:	4b07      	ldr	r3, [pc, #28]	@ (8011f6c <CalculateBackOff+0x2c>)
 8011f4e:	f8b3 3120 	ldrh.w	r3, [r3, #288]	@ 0x120
 8011f52:	3b01      	subs	r3, #1
 8011f54:	4a06      	ldr	r2, [pc, #24]	@ (8011f70 <CalculateBackOff+0x30>)
 8011f56:	f8d2 241c 	ldr.w	r2, [r2, #1052]	@ 0x41c
 8011f5a:	fb02 f303 	mul.w	r3, r2, r3
 8011f5e:	4a03      	ldr	r2, [pc, #12]	@ (8011f6c <CalculateBackOff+0x2c>)
 8011f60:	6313      	str	r3, [r2, #48]	@ 0x30
    }
}
 8011f62:	bf00      	nop
 8011f64:	46bd      	mov	sp, r7
 8011f66:	bc80      	pop	{r7}
 8011f68:	4770      	bx	lr
 8011f6a:	bf00      	nop
 8011f6c:	20000bfc 	.word	0x20000bfc
 8011f70:	200006e0 	.word	0x200006e0

08011f74 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 8011f74:	b580      	push	{r7, lr}
 8011f76:	b082      	sub	sp, #8
 8011f78:	af00      	add	r7, sp, #0
 8011f7a:	4603      	mov	r3, r0
 8011f7c:	7139      	strb	r1, [r7, #4]
 8011f7e:	71fb      	strb	r3, [r7, #7]
 8011f80:	4613      	mov	r3, r2
 8011f82:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8011f84:	79fb      	ldrb	r3, [r7, #7]
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d002      	beq.n	8011f90 <RemoveMacCommands+0x1c>
 8011f8a:	79fb      	ldrb	r3, [r7, #7]
 8011f8c:	2b01      	cmp	r3, #1
 8011f8e:	d10d      	bne.n	8011fac <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 8011f90:	79bb      	ldrb	r3, [r7, #6]
 8011f92:	2b01      	cmp	r3, #1
 8011f94:	d108      	bne.n	8011fa8 <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 8011f96:	793b      	ldrb	r3, [r7, #4]
 8011f98:	f003 0320 	and.w	r3, r3, #32
 8011f9c:	b2db      	uxtb	r3, r3
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d004      	beq.n	8011fac <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 8011fa2:	f002 fda5 	bl	8014af0 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 8011fa6:	e001      	b.n	8011fac <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 8011fa8:	f002 fda2 	bl	8014af0 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 8011fac:	bf00      	nop
 8011fae:	3708      	adds	r7, #8
 8011fb0:	46bd      	mov	sp, r7
 8011fb2:	bd80      	pop	{r7, pc}

08011fb4 <ResetMacParameters>:

static void ResetMacParameters( bool isRejoin )
{
 8011fb4:	b5b0      	push	{r4, r5, r7, lr}
 8011fb6:	b092      	sub	sp, #72	@ 0x48
 8011fb8:	af00      	add	r7, sp, #0
 8011fba:	4603      	mov	r3, r0
 8011fbc:	71fb      	strb	r3, [r7, #7]
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    if( isRejoin == false )
 8011fbe:	79fb      	ldrb	r3, [r7, #7]
 8011fc0:	f083 0301 	eor.w	r3, r3, #1
 8011fc4:	b2db      	uxtb	r3, r3
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d003      	beq.n	8011fd2 <ResetMacParameters+0x1e>
    {
        Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 8011fca:	4b88      	ldr	r3, [pc, #544]	@ (80121ec <ResetMacParameters+0x238>)
 8011fcc:	2200      	movs	r2, #0
 8011fce:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    }

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 8011fd2:	4b86      	ldr	r3, [pc, #536]	@ (80121ec <ResetMacParameters+0x238>)
 8011fd4:	2200      	movs	r2, #0
 8011fd6:	629a      	str	r2, [r3, #40]	@ 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 8011fd8:	4b85      	ldr	r3, [pc, #532]	@ (80121f0 <ResetMacParameters+0x23c>)
 8011fda:	2200      	movs	r2, #0
 8011fdc:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetries = 1;
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetry = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
 8011fe0:	4b83      	ldr	r3, [pc, #524]	@ (80121f0 <ResetMacParameters+0x23c>)
 8011fe2:	2200      	movs	r2, #0
 8011fe4:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
    MacCtx.ResponseTimeoutStartTime = 0;
 8011fe8:	4b81      	ldr	r3, [pc, #516]	@ (80121f0 <ResetMacParameters+0x23c>)
 8011fea:	2200      	movs	r2, #0
 8011fec:	f8c3 2498 	str.w	r2, [r3, #1176]	@ 0x498
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.MaxDCycle = 0;
 8011ff0:	4b7e      	ldr	r3, [pc, #504]	@ (80121ec <ResetMacParameters+0x238>)
 8011ff2:	2200      	movs	r2, #0
 8011ff4:	f883 211b 	strb.w	r2, [r3, #283]	@ 0x11b
    Nvm.MacGroup2.AggregatedDCycle = 1;
 8011ff8:	4b7c      	ldr	r3, [pc, #496]	@ (80121ec <ResetMacParameters+0x238>)
 8011ffa:	2201      	movs	r2, #1
 8011ffc:	f8a3 2120 	strh.w	r2, [r3, #288]	@ 0x120

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8012000:	4b7a      	ldr	r3, [pc, #488]	@ (80121ec <ResetMacParameters+0x238>)
 8012002:	f993 20dc 	ldrsb.w	r2, [r3, #220]	@ 0xdc
 8012006:	4b79      	ldr	r3, [pc, #484]	@ (80121ec <ResetMacParameters+0x238>)
 8012008:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 801200c:	4b77      	ldr	r3, [pc, #476]	@ (80121ec <ResetMacParameters+0x238>)
 801200e:	f993 20dd 	ldrsb.w	r2, [r3, #221]	@ 0xdd
 8012012:	4b76      	ldr	r3, [pc, #472]	@ (80121ec <ResetMacParameters+0x238>)
 8012014:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 8012018:	4b74      	ldr	r3, [pc, #464]	@ (80121ec <ResetMacParameters+0x238>)
 801201a:	f893 20b1 	ldrb.w	r2, [r3, #177]	@ 0xb1
 801201e:	4b73      	ldr	r3, [pc, #460]	@ (80121ec <ResetMacParameters+0x238>)
 8012020:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8012024:	4b71      	ldr	r3, [pc, #452]	@ (80121ec <ResetMacParameters+0x238>)
 8012026:	4a71      	ldr	r2, [pc, #452]	@ (80121ec <ResetMacParameters+0x238>)
 8012028:	336c      	adds	r3, #108	@ 0x6c
 801202a:	32b4      	adds	r2, #180	@ 0xb4
 801202c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012030:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8012034:	4b6d      	ldr	r3, [pc, #436]	@ (80121ec <ResetMacParameters+0x238>)
 8012036:	4a6d      	ldr	r2, [pc, #436]	@ (80121ec <ResetMacParameters+0x238>)
 8012038:	3374      	adds	r3, #116	@ 0x74
 801203a:	32bc      	adds	r2, #188	@ 0xbc
 801203c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012040:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 8012044:	4b69      	ldr	r3, [pc, #420]	@ (80121ec <ResetMacParameters+0x238>)
 8012046:	f893 20c4 	ldrb.w	r2, [r3, #196]	@ 0xc4
 801204a:	4b68      	ldr	r3, [pc, #416]	@ (80121ec <ResetMacParameters+0x238>)
 801204c:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 8012050:	4b66      	ldr	r3, [pc, #408]	@ (80121ec <ResetMacParameters+0x238>)
 8012052:	f893 20c5 	ldrb.w	r2, [r3, #197]	@ 0xc5
 8012056:	4b65      	ldr	r3, [pc, #404]	@ (80121ec <ResetMacParameters+0x238>)
 8012058:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 801205c:	4b63      	ldr	r3, [pc, #396]	@ (80121ec <ResetMacParameters+0x238>)
 801205e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8012062:	4a62      	ldr	r2, [pc, #392]	@ (80121ec <ResetMacParameters+0x238>)
 8012064:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8012068:	4b60      	ldr	r3, [pc, #384]	@ (80121ec <ResetMacParameters+0x238>)
 801206a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 801206e:	4a5f      	ldr	r2, [pc, #380]	@ (80121ec <ResetMacParameters+0x238>)
 8012070:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    Nvm.MacGroup2.MacParams.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 8012074:	4b5d      	ldr	r3, [pc, #372]	@ (80121ec <ResetMacParameters+0x238>)
 8012076:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	@ 0xd0
 801207a:	4b5c      	ldr	r3, [pc, #368]	@ (80121ec <ResetMacParameters+0x238>)
 801207c:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
    Nvm.MacGroup2.MacParams.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 8012080:	4b5a      	ldr	r3, [pc, #360]	@ (80121ec <ResetMacParameters+0x238>)
 8012082:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	@ 0xd2
 8012086:	4b59      	ldr	r3, [pc, #356]	@ (80121ec <ResetMacParameters+0x238>)
 8012088:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a

    MacCtx.NodeAckRequested = false;
 801208c:	4b58      	ldr	r3, [pc, #352]	@ (80121f0 <ResetMacParameters+0x23c>)
 801208e:	2200      	movs	r2, #0
 8012090:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
    Nvm.MacGroup1.SrvAckRequested = false;
 8012094:	4b55      	ldr	r3, [pc, #340]	@ (80121ec <ResetMacParameters+0x238>)
 8012096:	2200      	movs	r2, #0
 8012098:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 801209c:	4b53      	ldr	r3, [pc, #332]	@ (80121ec <ResetMacParameters+0x238>)
 801209e:	2200      	movs	r2, #0
 80120a0:	f883 211d 	strb.w	r2, [r3, #285]	@ 0x11d
    Nvm.MacGroup2.DownlinkReceived = false;
 80120a4:	4b51      	ldr	r3, [pc, #324]	@ (80121ec <ResetMacParameters+0x238>)
 80120a6:	2200      	movs	r2, #0
 80120a8:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.Rejoin0UplinksLimit = 0;
 80120ac:	4b4f      	ldr	r3, [pc, #316]	@ (80121ec <ResetMacParameters+0x238>)
 80120ae:	2200      	movs	r2, #0
 80120b0:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
    Nvm.MacGroup2.ForceRejoinMaxRetries = 0;
 80120b4:	4b4d      	ldr	r3, [pc, #308]	@ (80121ec <ResetMacParameters+0x238>)
 80120b6:	2200      	movs	r2, #0
 80120b8:	f883 2138 	strb.w	r2, [r3, #312]	@ 0x138
    Nvm.MacGroup2.ForceRejoinType = 0;
 80120bc:	4b4b      	ldr	r3, [pc, #300]	@ (80121ec <ResetMacParameters+0x238>)
 80120be:	2200      	movs	r2, #0
 80120c0:	f883 2139 	strb.w	r2, [r3, #313]	@ 0x139
    Nvm.MacGroup2.Rejoin0CycleInSec = 0;
 80120c4:	4b49      	ldr	r3, [pc, #292]	@ (80121ec <ResetMacParameters+0x238>)
 80120c6:	2200      	movs	r2, #0
 80120c8:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
    Nvm.MacGroup2.Rejoin1CycleInSec = 0;
 80120cc:	4b47      	ldr	r3, [pc, #284]	@ (80121ec <ResetMacParameters+0x238>)
 80120ce:	2200      	movs	r2, #0
 80120d0:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
    Nvm.MacGroup2.IsRejoin0RequestQueued = 0;
 80120d4:	4b45      	ldr	r3, [pc, #276]	@ (80121ec <ResetMacParameters+0x238>)
 80120d6:	2200      	movs	r2, #0
 80120d8:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
    Nvm.MacGroup2.IsRejoin1RequestQueued = 0;
 80120dc:	4b43      	ldr	r3, [pc, #268]	@ (80121ec <ResetMacParameters+0x238>)
 80120de:	2200      	movs	r2, #0
 80120e0:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
    Nvm.MacGroup2.IsRejoin2RequestQueued = 0;
 80120e4:	4b41      	ldr	r3, [pc, #260]	@ (80121ec <ResetMacParameters+0x238>)
 80120e6:	2200      	movs	r2, #0
 80120e8:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 80120ec:	2301      	movs	r3, #1
 80120ee:	763b      	strb	r3, [r7, #24]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 80120f0:	4b40      	ldr	r3, [pc, #256]	@ (80121f4 <ResetMacParameters+0x240>)
 80120f2:	60fb      	str	r3, [r7, #12]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 80120f4:	4b40      	ldr	r3, [pc, #256]	@ (80121f8 <ResetMacParameters+0x244>)
 80120f6:	613b      	str	r3, [r7, #16]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    params.Bands = &RegionBands;
 80120f8:	4b40      	ldr	r3, [pc, #256]	@ (80121fc <ResetMacParameters+0x248>)
 80120fa:	617b      	str	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80120fc:	4b3b      	ldr	r3, [pc, #236]	@ (80121ec <ResetMacParameters+0x238>)
 80120fe:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012102:	f107 020c 	add.w	r2, r7, #12
 8012106:	4611      	mov	r1, r2
 8012108:	4618      	mov	r0, r3
 801210a:	f004 fa0a 	bl	8016522 <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 801210e:	4b38      	ldr	r3, [pc, #224]	@ (80121f0 <ResetMacParameters+0x23c>)
 8012110:	2200      	movs	r2, #0
 8012112:	f883 241b 	strb.w	r2, [r3, #1051]	@ 0x41b

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8012116:	4b36      	ldr	r3, [pc, #216]	@ (80121f0 <ResetMacParameters+0x23c>)
 8012118:	f893 241b 	ldrb.w	r2, [r3, #1051]	@ 0x41b
 801211c:	4b34      	ldr	r3, [pc, #208]	@ (80121f0 <ResetMacParameters+0x23c>)
 801211e:	f883 23d0 	strb.w	r2, [r3, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8012122:	4b32      	ldr	r3, [pc, #200]	@ (80121ec <ResetMacParameters+0x238>)
 8012124:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012126:	4a32      	ldr	r2, [pc, #200]	@ (80121f0 <ResetMacParameters+0x23c>)
 8012128:	f8c2 33d4 	str.w	r3, [r2, #980]	@ 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801212c:	4b2f      	ldr	r3, [pc, #188]	@ (80121ec <ResetMacParameters+0x238>)
 801212e:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 8012132:	4b2f      	ldr	r3, [pc, #188]	@ (80121f0 <ResetMacParameters+0x23c>)
 8012134:	f883 23e0 	strb.w	r2, [r3, #992]	@ 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8012138:	4b2c      	ldr	r3, [pc, #176]	@ (80121ec <ResetMacParameters+0x238>)
 801213a:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 801213e:	4b2c      	ldr	r3, [pc, #176]	@ (80121f0 <ResetMacParameters+0x23c>)
 8012140:	f883 23e1 	strb.w	r2, [r3, #993]	@ 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 8012144:	4b2a      	ldr	r3, [pc, #168]	@ (80121f0 <ResetMacParameters+0x23c>)
 8012146:	2200      	movs	r2, #0
 8012148:	f883 23e2 	strb.w	r2, [r3, #994]	@ 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 801214c:	4b28      	ldr	r3, [pc, #160]	@ (80121f0 <ResetMacParameters+0x23c>)
 801214e:	2201      	movs	r2, #1
 8012150:	f883 23e3 	strb.w	r2, [r3, #995]	@ 0x3e3
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8012154:	4b25      	ldr	r3, [pc, #148]	@ (80121ec <ResetMacParameters+0x238>)
 8012156:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 801215a:	4b25      	ldr	r3, [pc, #148]	@ (80121f0 <ResetMacParameters+0x23c>)
 801215c:	f883 23e4 	strb.w	r2, [r3, #996]	@ 0x3e4
#endif /* LORAMAC_VERSION */

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8012160:	4a23      	ldr	r2, [pc, #140]	@ (80121f0 <ResetMacParameters+0x23c>)
 8012162:	4b23      	ldr	r3, [pc, #140]	@ (80121f0 <ResetMacParameters+0x23c>)
 8012164:	f502 747a 	add.w	r4, r2, #1000	@ 0x3e8
 8012168:	f503 7574 	add.w	r5, r3, #976	@ 0x3d0
 801216c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801216e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012170:	e895 0003 	ldmia.w	r5, {r0, r1}
 8012174:	e884 0003 	stmia.w	r4, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8012178:	4b1d      	ldr	r3, [pc, #116]	@ (80121f0 <ResetMacParameters+0x23c>)
 801217a:	2201      	movs	r2, #1
 801217c:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8012180:	4b1b      	ldr	r3, [pc, #108]	@ (80121f0 <ResetMacParameters+0x23c>)
 8012182:	2202      	movs	r2, #2
 8012184:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 8012188:	2300      	movs	r3, #0
 801218a:	643b      	str	r3, [r7, #64]	@ 0x40
    classBCallbacks.MacProcessNotify = NULL;
 801218c:	2300      	movs	r3, #0
 801218e:	647b      	str	r3, [r7, #68]	@ 0x44

    if( MacCtx.MacCallbacks != NULL )
 8012190:	4b17      	ldr	r3, [pc, #92]	@ (80121f0 <ResetMacParameters+0x23c>)
 8012192:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8012196:	2b00      	cmp	r3, #0
 8012198:	d009      	beq.n	80121ae <ResetMacParameters+0x1fa>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 801219a:	4b15      	ldr	r3, [pc, #84]	@ (80121f0 <ResetMacParameters+0x23c>)
 801219c:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80121a0:	685b      	ldr	r3, [r3, #4]
 80121a2:	643b      	str	r3, [r7, #64]	@ 0x40
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 80121a4:	4b12      	ldr	r3, [pc, #72]	@ (80121f0 <ResetMacParameters+0x23c>)
 80121a6:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80121aa:	695b      	ldr	r3, [r3, #20]
 80121ac:	647b      	str	r3, [r7, #68]	@ 0x44
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 80121ae:	4b14      	ldr	r3, [pc, #80]	@ (8012200 <ResetMacParameters+0x24c>)
 80121b0:	61fb      	str	r3, [r7, #28]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 80121b2:	4b14      	ldr	r3, [pc, #80]	@ (8012204 <ResetMacParameters+0x250>)
 80121b4:	623b      	str	r3, [r7, #32]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 80121b6:	4b14      	ldr	r3, [pc, #80]	@ (8012208 <ResetMacParameters+0x254>)
 80121b8:	627b      	str	r3, [r7, #36]	@ 0x24
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 80121ba:	4b14      	ldr	r3, [pc, #80]	@ (801220c <ResetMacParameters+0x258>)
 80121bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 80121be:	4b14      	ldr	r3, [pc, #80]	@ (8012210 <ResetMacParameters+0x25c>)
 80121c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 80121c2:	4b14      	ldr	r3, [pc, #80]	@ (8012214 <ResetMacParameters+0x260>)
 80121c4:	633b      	str	r3, [r7, #48]	@ 0x30
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 80121c6:	4b14      	ldr	r3, [pc, #80]	@ (8012218 <ResetMacParameters+0x264>)
 80121c8:	637b      	str	r3, [r7, #52]	@ 0x34
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 80121ca:	4b14      	ldr	r3, [pc, #80]	@ (801221c <ResetMacParameters+0x268>)
 80121cc:	63bb      	str	r3, [r7, #56]	@ 0x38
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
 80121ce:	4b14      	ldr	r3, [pc, #80]	@ (8012220 <ResetMacParameters+0x26c>)
 80121d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif /* LORAMAC_VERSION */

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 80121d2:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 80121d6:	f107 031c 	add.w	r3, r7, #28
 80121da:	4a12      	ldr	r2, [pc, #72]	@ (8012224 <ResetMacParameters+0x270>)
 80121dc:	4618      	mov	r0, r3
 80121de:	f002 f994 	bl	801450a <LoRaMacClassBInit>
}
 80121e2:	bf00      	nop
 80121e4:	3748      	adds	r7, #72	@ 0x48
 80121e6:	46bd      	mov	sp, r7
 80121e8:	bdb0      	pop	{r4, r5, r7, pc}
 80121ea:	bf00      	nop
 80121ec:	20000bfc 	.word	0x20000bfc
 80121f0:	200006e0 	.word	0x200006e0
 80121f4:	20000e20 	.word	0x20000e20
 80121f8:	20000e34 	.word	0x20000e34
 80121fc:	20001794 	.word	0x20001794
 8012200:	20000b48 	.word	0x20000b48
 8012204:	20000b00 	.word	0x20000b00
 8012208:	20000b34 	.word	0x20000b34
 801220c:	20000b71 	.word	0x20000b71
 8012210:	20000ce0 	.word	0x20000ce0
 8012214:	20000c44 	.word	0x20000c44
 8012218:	20000c48 	.word	0x20000c48
 801221c:	20000ce4 	.word	0x20000ce4
 8012220:	20000d2c 	.word	0x20000d2c
 8012224:	200011b0 	.word	0x200011b0

08012228 <RxWindowSetup>:
 *
 * \param [in] rxTimer  Window timer to be topped.
 * \param [in] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 8012228:	b580      	push	{r7, lr}
 801222a:	b082      	sub	sp, #8
 801222c:	af00      	add	r7, sp, #0
 801222e:	6078      	str	r0, [r7, #4]
 8012230:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 8012232:	6878      	ldr	r0, [r7, #4]
 8012234:	f00c f8d4 	bl	801e3e0 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 8012238:	4b11      	ldr	r3, [pc, #68]	@ (8012280 <RxWindowSetup+0x58>)
 801223a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801223c:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 801223e:	4b11      	ldr	r3, [pc, #68]	@ (8012284 <RxWindowSetup+0x5c>)
 8012240:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012244:	4a10      	ldr	r2, [pc, #64]	@ (8012288 <RxWindowSetup+0x60>)
 8012246:	6839      	ldr	r1, [r7, #0]
 8012248:	4618      	mov	r0, r3
 801224a:	f004 f9f7 	bl	801663c <RegionRxConfig>
 801224e:	4603      	mov	r3, r0
 8012250:	2b00      	cmp	r3, #0
 8012252:	d010      	beq.n	8012276 <RxWindowSetup+0x4e>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8012254:	4b0d      	ldr	r3, [pc, #52]	@ (801228c <RxWindowSetup+0x64>)
 8012256:	f893 2424 	ldrb.w	r2, [r3, #1060]	@ 0x424
 801225a:	4b0c      	ldr	r3, [pc, #48]	@ (801228c <RxWindowSetup+0x64>)
 801225c:	f883 246a 	strb.w	r2, [r3, #1130]	@ 0x46a
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 8012260:	4b07      	ldr	r3, [pc, #28]	@ (8012280 <RxWindowSetup+0x58>)
 8012262:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012264:	4a07      	ldr	r2, [pc, #28]	@ (8012284 <RxWindowSetup+0x5c>)
 8012266:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8012268:	4610      	mov	r0, r2
 801226a:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 801226c:	683b      	ldr	r3, [r7, #0]
 801226e:	7cda      	ldrb	r2, [r3, #19]
 8012270:	4b06      	ldr	r3, [pc, #24]	@ (801228c <RxWindowSetup+0x64>)
 8012272:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490
    }
}
 8012276:	bf00      	nop
 8012278:	3708      	adds	r7, #8
 801227a:	46bd      	mov	sp, r7
 801227c:	bd80      	pop	{r7, pc}
 801227e:	bf00      	nop
 8012280:	0801fccc 	.word	0x0801fccc
 8012284:	20000bfc 	.word	0x20000bfc
 8012288:	20000b04 	.word	0x20000b04
 801228c:	200006e0 	.word	0x200006e0

08012290 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 8012290:	b590      	push	{r4, r7, lr}
 8012292:	b083      	sub	sp, #12
 8012294:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8012296:	4b1e      	ldr	r3, [pc, #120]	@ (8012310 <OpenContinuousRxCWindow+0x80>)
 8012298:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 801229c:	4b1c      	ldr	r3, [pc, #112]	@ (8012310 <OpenContinuousRxCWindow+0x80>)
 801229e:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80122a2:	b259      	sxtb	r1, r3
 80122a4:	4b1a      	ldr	r3, [pc, #104]	@ (8012310 <OpenContinuousRxCWindow+0x80>)
 80122a6:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 80122aa:	4b19      	ldr	r3, [pc, #100]	@ (8012310 <OpenContinuousRxCWindow+0x80>)
 80122ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80122ae:	4c19      	ldr	r4, [pc, #100]	@ (8012314 <OpenContinuousRxCWindow+0x84>)
 80122b0:	9400      	str	r4, [sp, #0]
 80122b2:	f004 f9a0 	bl	80165f6 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80122b6:	4b18      	ldr	r3, [pc, #96]	@ (8012318 <OpenContinuousRxCWindow+0x88>)
 80122b8:	2202      	movs	r2, #2
 80122ba:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80122be:	4b14      	ldr	r3, [pc, #80]	@ (8012310 <OpenContinuousRxCWindow+0x80>)
 80122c0:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 80122c4:	4b14      	ldr	r3, [pc, #80]	@ (8012318 <OpenContinuousRxCWindow+0x88>)
 80122c6:	f883 23fc 	strb.w	r2, [r3, #1020]	@ 0x3fc
#endif /* LORAMAC_VERSION */
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80122ca:	4b13      	ldr	r3, [pc, #76]	@ (8012318 <OpenContinuousRxCWindow+0x88>)
 80122cc:	2201      	movs	r2, #1
 80122ce:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 80122d2:	4b0f      	ldr	r3, [pc, #60]	@ (8012310 <OpenContinuousRxCWindow+0x80>)
 80122d4:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80122d8:	4a10      	ldr	r2, [pc, #64]	@ (801231c <OpenContinuousRxCWindow+0x8c>)
 80122da:	490e      	ldr	r1, [pc, #56]	@ (8012314 <OpenContinuousRxCWindow+0x84>)
 80122dc:	4618      	mov	r0, r3
 80122de:	f004 f9ad 	bl	801663c <RegionRxConfig>
 80122e2:	4603      	mov	r3, r0
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d00f      	beq.n	8012308 <OpenContinuousRxCWindow+0x78>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 80122e8:	4b0b      	ldr	r3, [pc, #44]	@ (8012318 <OpenContinuousRxCWindow+0x88>)
 80122ea:	f893 2424 	ldrb.w	r2, [r3, #1060]	@ 0x424
 80122ee:	4b0a      	ldr	r3, [pc, #40]	@ (8012318 <OpenContinuousRxCWindow+0x88>)
 80122f0:	f883 246a 	strb.w	r2, [r3, #1130]	@ 0x46a
        Radio.Rx( 0 ); // Continuous mode
 80122f4:	4b0a      	ldr	r3, [pc, #40]	@ (8012320 <OpenContinuousRxCWindow+0x90>)
 80122f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80122f8:	2000      	movs	r0, #0
 80122fa:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 80122fc:	4b06      	ldr	r3, [pc, #24]	@ (8012318 <OpenContinuousRxCWindow+0x88>)
 80122fe:	f893 23fb 	ldrb.w	r2, [r3, #1019]	@ 0x3fb
 8012302:	4b05      	ldr	r3, [pc, #20]	@ (8012318 <OpenContinuousRxCWindow+0x88>)
 8012304:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490
    }
}
 8012308:	bf00      	nop
 801230a:	3704      	adds	r7, #4
 801230c:	46bd      	mov	sp, r7
 801230e:	bd90      	pop	{r4, r7, pc}
 8012310:	20000bfc 	.word	0x20000bfc
 8012314:	20000ac8 	.word	0x20000ac8
 8012318:	200006e0 	.word	0x200006e0
 801231c:	20000b04 	.word	0x20000b04
 8012320:	0801fccc 	.word	0x0801fccc

08012324 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 8012324:	b580      	push	{r7, lr}
 8012326:	b088      	sub	sp, #32
 8012328:	af00      	add	r7, sp, #0
 801232a:	60f8      	str	r0, [r7, #12]
 801232c:	60b9      	str	r1, [r7, #8]
 801232e:	603b      	str	r3, [r7, #0]
 8012330:	4613      	mov	r3, r2
 8012332:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 8012334:	4b81      	ldr	r3, [pc, #516]	@ (801253c <PrepareFrame+0x218>)
 8012336:	2200      	movs	r2, #0
 8012338:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 801233a:	4b80      	ldr	r3, [pc, #512]	@ (801253c <PrepareFrame+0x218>)
 801233c:	2200      	movs	r2, #0
 801233e:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
    uint32_t fCntUp = 0;
 8012342:	2300      	movs	r3, #0
 8012344:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 8012346:	2300      	movs	r3, #0
 8012348:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 801234a:	2300      	movs	r3, #0
 801234c:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 801234e:	683b      	ldr	r3, [r7, #0]
 8012350:	2b00      	cmp	r3, #0
 8012352:	d101      	bne.n	8012358 <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 8012354:	2300      	movs	r3, #0
 8012356:	853b      	strh	r3, [r7, #40]	@ 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8012358:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801235a:	461a      	mov	r2, r3
 801235c:	6839      	ldr	r1, [r7, #0]
 801235e:	4878      	ldr	r0, [pc, #480]	@ (8012540 <PrepareFrame+0x21c>)
 8012360:	f007 fea7 	bl	801a0b2 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8012364:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8012366:	b2da      	uxtb	r2, r3
 8012368:	4b74      	ldr	r3, [pc, #464]	@ (801253c <PrepareFrame+0x218>)
 801236a:	f883 2237 	strb.w	r2, [r3, #567]	@ 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 801236e:	68fb      	ldr	r3, [r7, #12]
 8012370:	781a      	ldrb	r2, [r3, #0]
 8012372:	4b72      	ldr	r3, [pc, #456]	@ (801253c <PrepareFrame+0x218>)
 8012374:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 8012376:	68fb      	ldr	r3, [r7, #12]
 8012378:	781b      	ldrb	r3, [r3, #0]
 801237a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801237e:	b2db      	uxtb	r3, r3
 8012380:	2b07      	cmp	r3, #7
 8012382:	f000 80b9 	beq.w	80124f8 <PrepareFrame+0x1d4>
 8012386:	2b07      	cmp	r3, #7
 8012388:	f300 80ce 	bgt.w	8012528 <PrepareFrame+0x204>
 801238c:	2b02      	cmp	r3, #2
 801238e:	d006      	beq.n	801239e <PrepareFrame+0x7a>
 8012390:	2b04      	cmp	r3, #4
 8012392:	f040 80c9 	bne.w	8012528 <PrepareFrame+0x204>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 8012396:	4b69      	ldr	r3, [pc, #420]	@ (801253c <PrepareFrame+0x218>)
 8012398:	2201      	movs	r2, #1
 801239a:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 801239e:	4b67      	ldr	r3, [pc, #412]	@ (801253c <PrepareFrame+0x218>)
 80123a0:	2204      	movs	r2, #4
 80123a2:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 80123a6:	4b65      	ldr	r3, [pc, #404]	@ (801253c <PrepareFrame+0x218>)
 80123a8:	4a66      	ldr	r2, [pc, #408]	@ (8012544 <PrepareFrame+0x220>)
 80123aa:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 80123ae:	4b63      	ldr	r3, [pc, #396]	@ (801253c <PrepareFrame+0x218>)
 80123b0:	22ff      	movs	r2, #255	@ 0xff
 80123b2:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 80123b6:	68fb      	ldr	r3, [r7, #12]
 80123b8:	781a      	ldrb	r2, [r3, #0]
 80123ba:	4b60      	ldr	r3, [pc, #384]	@ (801253c <PrepareFrame+0x218>)
 80123bc:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 80123c0:	4a5e      	ldr	r2, [pc, #376]	@ (801253c <PrepareFrame+0x218>)
 80123c2:	79fb      	ldrb	r3, [r7, #7]
 80123c4:	f882 3128 	strb.w	r3, [r2, #296]	@ 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 80123c8:	4b5f      	ldr	r3, [pc, #380]	@ (8012548 <PrepareFrame+0x224>)
 80123ca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80123ce:	4a5b      	ldr	r2, [pc, #364]	@ (801253c <PrepareFrame+0x218>)
 80123d0:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 80123d4:	68bb      	ldr	r3, [r7, #8]
 80123d6:	781a      	ldrb	r2, [r3, #0]
 80123d8:	4b58      	ldr	r3, [pc, #352]	@ (801253c <PrepareFrame+0x218>)
 80123da:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 80123de:	4b57      	ldr	r3, [pc, #348]	@ (801253c <PrepareFrame+0x218>)
 80123e0:	f893 2237 	ldrb.w	r2, [r3, #567]	@ 0x237
 80123e4:	4b55      	ldr	r3, [pc, #340]	@ (801253c <PrepareFrame+0x218>)
 80123e6:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 80123ea:	4b54      	ldr	r3, [pc, #336]	@ (801253c <PrepareFrame+0x218>)
 80123ec:	4a54      	ldr	r2, [pc, #336]	@ (8012540 <PrepareFrame+0x21c>)
 80123ee:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 80123f2:	f107 0318 	add.w	r3, r7, #24
 80123f6:	4618      	mov	r0, r3
 80123f8:	f003 f9da 	bl	80157b0 <LoRaMacCryptoGetFCntUp>
 80123fc:	4603      	mov	r3, r0
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d001      	beq.n	8012406 <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8012402:	2312      	movs	r3, #18
 8012404:	e096      	b.n	8012534 <PrepareFrame+0x210>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 8012406:	69bb      	ldr	r3, [r7, #24]
 8012408:	b29a      	uxth	r2, r3
 801240a:	4b4c      	ldr	r3, [pc, #304]	@ (801253c <PrepareFrame+0x218>)
 801240c:	f8a3 2116 	strh.w	r2, [r3, #278]	@ 0x116

            // Reset confirm parameters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = 0;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = 0;
 8012410:	4b4a      	ldr	r3, [pc, #296]	@ (801253c <PrepareFrame+0x218>)
 8012412:	2200      	movs	r2, #0
 8012414:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.AckReceived = false;
 8012418:	4b48      	ldr	r3, [pc, #288]	@ (801253c <PrepareFrame+0x218>)
 801241a:	2200      	movs	r2, #0
 801241c:	f883 2444 	strb.w	r2, [r3, #1092]	@ 0x444
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8012420:	69bb      	ldr	r3, [r7, #24]
 8012422:	4a46      	ldr	r2, [pc, #280]	@ (801253c <PrepareFrame+0x218>)
 8012424:	f8c2 344c 	str.w	r3, [r2, #1100]	@ 0x44c

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8012428:	f107 0314 	add.w	r3, r7, #20
 801242c:	4618      	mov	r0, r3
 801242e:	f002 fb8b 	bl	8014b48 <LoRaMacCommandsGetSizeSerializedCmds>
 8012432:	4603      	mov	r3, r0
 8012434:	2b00      	cmp	r3, #0
 8012436:	d001      	beq.n	801243c <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012438:	2313      	movs	r3, #19
 801243a:	e07b      	b.n	8012534 <PrepareFrame+0x210>
            }

            if( macCmdsSize > 0 )
 801243c:	697b      	ldr	r3, [r7, #20]
 801243e:	2b00      	cmp	r3, #0
 8012440:	d074      	beq.n	801252c <PrepareFrame+0x208>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 8012442:	4b41      	ldr	r3, [pc, #260]	@ (8012548 <PrepareFrame+0x224>)
 8012444:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8012448:	4618      	mov	r0, r3
 801244a:	f7fe fd1d 	bl	8010e88 <GetMaxAppPayloadWithoutFOptsLength>
 801244e:	4603      	mov	r3, r0
 8012450:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8012452:	4b3a      	ldr	r3, [pc, #232]	@ (801253c <PrepareFrame+0x218>)
 8012454:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8012458:	2b00      	cmp	r3, #0
 801245a:	d01d      	beq.n	8012498 <PrepareFrame+0x174>
 801245c:	697b      	ldr	r3, [r7, #20]
 801245e:	2b0f      	cmp	r3, #15
 8012460:	d81a      	bhi.n	8012498 <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 8012462:	f107 0314 	add.w	r3, r7, #20
 8012466:	4a39      	ldr	r2, [pc, #228]	@ (801254c <PrepareFrame+0x228>)
 8012468:	4619      	mov	r1, r3
 801246a:	200f      	movs	r0, #15
 801246c:	f002 fb82 	bl	8014b74 <LoRaMacCommandsSerializeCmds>
 8012470:	4603      	mov	r3, r0
 8012472:	2b00      	cmp	r3, #0
 8012474:	d001      	beq.n	801247a <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012476:	2313      	movs	r3, #19
 8012478:	e05c      	b.n	8012534 <PrepareFrame+0x210>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 801247a:	697b      	ldr	r3, [r7, #20]
 801247c:	f003 030f 	and.w	r3, r3, #15
 8012480:	b2d9      	uxtb	r1, r3
 8012482:	68ba      	ldr	r2, [r7, #8]
 8012484:	7813      	ldrb	r3, [r2, #0]
 8012486:	f361 0303 	bfi	r3, r1, #0, #4
 801248a:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 801248c:	68bb      	ldr	r3, [r7, #8]
 801248e:	781a      	ldrb	r2, [r3, #0]
 8012490:	4b2a      	ldr	r3, [pc, #168]	@ (801253c <PrepareFrame+0x218>)
 8012492:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 8012496:	e049      	b.n	801252c <PrepareFrame+0x208>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8012498:	4b28      	ldr	r3, [pc, #160]	@ (801253c <PrepareFrame+0x218>)
 801249a:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d010      	beq.n	80124c4 <PrepareFrame+0x1a0>
 80124a2:	697b      	ldr	r3, [r7, #20]
 80124a4:	2b0f      	cmp	r3, #15
 80124a6:	d90d      	bls.n	80124c4 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 80124a8:	7ffb      	ldrb	r3, [r7, #31]
 80124aa:	f107 0114 	add.w	r1, r7, #20
 80124ae:	4a28      	ldr	r2, [pc, #160]	@ (8012550 <PrepareFrame+0x22c>)
 80124b0:	4618      	mov	r0, r3
 80124b2:	f002 fb5f 	bl	8014b74 <LoRaMacCommandsSerializeCmds>
 80124b6:	4603      	mov	r3, r0
 80124b8:	2b00      	cmp	r3, #0
 80124ba:	d001      	beq.n	80124c0 <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80124bc:	2313      	movs	r3, #19
 80124be:	e039      	b.n	8012534 <PrepareFrame+0x210>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 80124c0:	230a      	movs	r3, #10
 80124c2:	e037      	b.n	8012534 <PrepareFrame+0x210>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 80124c4:	7ffb      	ldrb	r3, [r7, #31]
 80124c6:	f107 0114 	add.w	r1, r7, #20
 80124ca:	4a21      	ldr	r2, [pc, #132]	@ (8012550 <PrepareFrame+0x22c>)
 80124cc:	4618      	mov	r0, r3
 80124ce:	f002 fb51 	bl	8014b74 <LoRaMacCommandsSerializeCmds>
 80124d2:	4603      	mov	r3, r0
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	d001      	beq.n	80124dc <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80124d8:	2313      	movs	r3, #19
 80124da:	e02b      	b.n	8012534 <PrepareFrame+0x210>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 80124dc:	4b17      	ldr	r3, [pc, #92]	@ (801253c <PrepareFrame+0x218>)
 80124de:	2200      	movs	r2, #0
 80124e0:	f883 2128 	strb.w	r2, [r3, #296]	@ 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 80124e4:	4b15      	ldr	r3, [pc, #84]	@ (801253c <PrepareFrame+0x218>)
 80124e6:	4a1a      	ldr	r2, [pc, #104]	@ (8012550 <PrepareFrame+0x22c>)
 80124e8:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 80124ec:	697b      	ldr	r3, [r7, #20]
 80124ee:	b2da      	uxtb	r2, r3
 80124f0:	4b12      	ldr	r3, [pc, #72]	@ (801253c <PrepareFrame+0x218>)
 80124f2:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            break;
 80124f6:	e019      	b.n	801252c <PrepareFrame+0x208>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 80124f8:	683b      	ldr	r3, [r7, #0]
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d018      	beq.n	8012530 <PrepareFrame+0x20c>
 80124fe:	4b0f      	ldr	r3, [pc, #60]	@ (801253c <PrepareFrame+0x218>)
 8012500:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8012504:	2b00      	cmp	r3, #0
 8012506:	d013      	beq.n	8012530 <PrepareFrame+0x20c>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 8012508:	4812      	ldr	r0, [pc, #72]	@ (8012554 <PrepareFrame+0x230>)
 801250a:	4b0c      	ldr	r3, [pc, #48]	@ (801253c <PrepareFrame+0x218>)
 801250c:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8012510:	461a      	mov	r2, r3
 8012512:	6839      	ldr	r1, [r7, #0]
 8012514:	f007 fdcd 	bl	801a0b2 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 8012518:	4b08      	ldr	r3, [pc, #32]	@ (801253c <PrepareFrame+0x218>)
 801251a:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 801251e:	3301      	adds	r3, #1
 8012520:	b29a      	uxth	r2, r3
 8012522:	4b06      	ldr	r3, [pc, #24]	@ (801253c <PrepareFrame+0x218>)
 8012524:	801a      	strh	r2, [r3, #0]
            }
            break;
 8012526:	e003      	b.n	8012530 <PrepareFrame+0x20c>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012528:	2302      	movs	r3, #2
 801252a:	e003      	b.n	8012534 <PrepareFrame+0x210>
            break;
 801252c:	bf00      	nop
 801252e:	e000      	b.n	8012532 <PrepareFrame+0x20e>
            break;
 8012530:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 8012532:	2300      	movs	r3, #0
}
 8012534:	4618      	mov	r0, r3
 8012536:	3720      	adds	r7, #32
 8012538:	46bd      	mov	sp, r7
 801253a:	bd80      	pop	{r7, pc}
 801253c:	200006e0 	.word	0x200006e0
 8012540:	20000818 	.word	0x20000818
 8012544:	200006e2 	.word	0x200006e2
 8012548:	20000bfc 	.word	0x20000bfc
 801254c:	200007f8 	.word	0x200007f8
 8012550:	20000b7c 	.word	0x20000b7c
 8012554:	200006e3 	.word	0x200006e3

08012558 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 8012558:	b580      	push	{r7, lr}
 801255a:	b08a      	sub	sp, #40	@ 0x28
 801255c:	af00      	add	r7, sp, #0
 801255e:	4603      	mov	r3, r0
 8012560:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012562:	2303      	movs	r3, #3
 8012564:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 8012568:	2300      	movs	r3, #0
 801256a:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 801256c:	79fb      	ldrb	r3, [r7, #7]
 801256e:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8012570:	4b4b      	ldr	r3, [pc, #300]	@ (80126a0 <SendFrameOnChannel+0x148>)
 8012572:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8012576:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8012578:	4b49      	ldr	r3, [pc, #292]	@ (80126a0 <SendFrameOnChannel+0x148>)
 801257a:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 801257e:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8012580:	4b47      	ldr	r3, [pc, #284]	@ (80126a0 <SendFrameOnChannel+0x148>)
 8012582:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012586:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8012588:	4b45      	ldr	r3, [pc, #276]	@ (80126a0 <SendFrameOnChannel+0x148>)
 801258a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801258e:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8012590:	4b44      	ldr	r3, [pc, #272]	@ (80126a4 <SendFrameOnChannel+0x14c>)
 8012592:	881b      	ldrh	r3, [r3, #0]
 8012594:	83bb      	strh	r3, [r7, #28]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8012596:	4b42      	ldr	r3, [pc, #264]	@ (80126a0 <SendFrameOnChannel+0x148>)
 8012598:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 801259c:	77bb      	strb	r3, [r7, #30]
#endif /* LORAMAC_VERSION */

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 801259e:	4b40      	ldr	r3, [pc, #256]	@ (80126a0 <SendFrameOnChannel+0x148>)
 80125a0:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 80125a4:	f107 020f 	add.w	r2, r7, #15
 80125a8:	f107 0110 	add.w	r1, r7, #16
 80125ac:	4b3e      	ldr	r3, [pc, #248]	@ (80126a8 <SendFrameOnChannel+0x150>)
 80125ae:	f004 f863 	bl	8016678 <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80125b2:	4b3c      	ldr	r3, [pc, #240]	@ (80126a4 <SendFrameOnChannel+0x14c>)
 80125b4:	2201      	movs	r2, #1
 80125b6:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80125ba:	4b39      	ldr	r3, [pc, #228]	@ (80126a0 <SendFrameOnChannel+0x148>)
 80125bc:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 80125c0:	b2da      	uxtb	r2, r3
 80125c2:	4b38      	ldr	r3, [pc, #224]	@ (80126a4 <SendFrameOnChannel+0x14c>)
 80125c4:	f883 2442 	strb.w	r2, [r3, #1090]	@ 0x442
    MacCtx.McpsConfirm.TxPower = txPower;
 80125c8:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80125cc:	4b35      	ldr	r3, [pc, #212]	@ (80126a4 <SendFrameOnChannel+0x14c>)
 80125ce:	f883 2443 	strb.w	r2, [r3, #1091]	@ 0x443
    MacCtx.McpsConfirm.Channel = channel;
 80125d2:	79fb      	ldrb	r3, [r7, #7]
 80125d4:	4a33      	ldr	r2, [pc, #204]	@ (80126a4 <SendFrameOnChannel+0x14c>)
 80125d6:	f8c2 3450 	str.w	r3, [r2, #1104]	@ 0x450

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 80125da:	4b32      	ldr	r3, [pc, #200]	@ (80126a4 <SendFrameOnChannel+0x14c>)
 80125dc:	f8d3 341c 	ldr.w	r3, [r3, #1052]	@ 0x41c
 80125e0:	4a30      	ldr	r2, [pc, #192]	@ (80126a4 <SendFrameOnChannel+0x14c>)
 80125e2:	f8c2 3448 	str.w	r3, [r2, #1096]	@ 0x448
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 80125e6:	4b2f      	ldr	r3, [pc, #188]	@ (80126a4 <SendFrameOnChannel+0x14c>)
 80125e8:	f8d3 341c 	ldr.w	r3, [r3, #1052]	@ 0x41c
 80125ec:	4a2d      	ldr	r2, [pc, #180]	@ (80126a4 <SendFrameOnChannel+0x14c>)
 80125ee:	f8c2 3458 	str.w	r3, [r2, #1112]	@ 0x458

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 80125f2:	f001 fff6 	bl	80145e2 <LoRaMacClassBIsBeaconModeActive>
 80125f6:	4603      	mov	r3, r0
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	d00b      	beq.n	8012614 <SendFrameOnChannel+0xbc>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 80125fc:	4b29      	ldr	r3, [pc, #164]	@ (80126a4 <SendFrameOnChannel+0x14c>)
 80125fe:	f8d3 341c 	ldr.w	r3, [r3, #1052]	@ 0x41c
 8012602:	4618      	mov	r0, r3
 8012604:	f002 f858 	bl	80146b8 <LoRaMacClassBIsUplinkCollision>
 8012608:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 801260a:	6a3b      	ldr	r3, [r7, #32]
 801260c:	2b00      	cmp	r3, #0
 801260e:	d001      	beq.n	8012614 <SendFrameOnChannel+0xbc>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8012610:	2310      	movs	r3, #16
 8012612:	e040      	b.n	8012696 <SendFrameOnChannel+0x13e>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8012614:	4b22      	ldr	r3, [pc, #136]	@ (80126a0 <SendFrameOnChannel+0x148>)
 8012616:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 801261a:	2b01      	cmp	r3, #1
 801261c:	d101      	bne.n	8012622 <SendFrameOnChannel+0xca>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 801261e:	f002 f855 	bl	80146cc <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 8012622:	f001 ffef 	bl	8014604 <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 8012626:	4b1e      	ldr	r3, [pc, #120]	@ (80126a0 <SendFrameOnChannel+0x148>)
 8012628:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 801262c:	b2db      	uxtb	r3, r3
 801262e:	4a1d      	ldr	r2, [pc, #116]	@ (80126a4 <SendFrameOnChannel+0x14c>)
 8012630:	f892 241b 	ldrb.w	r2, [r2, #1051]	@ 0x41b
 8012634:	4611      	mov	r1, r2
 8012636:	4618      	mov	r0, r3
 8012638:	f7ff fc2c 	bl	8011e94 <SecureFrame>
 801263c:	4603      	mov	r3, r0
 801263e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if( status != LORAMAC_STATUS_OK )
 8012642:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012646:	2b00      	cmp	r3, #0
 8012648:	d002      	beq.n	8012650 <SendFrameOnChannel+0xf8>
    {
        return status;
 801264a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801264e:	e022      	b.n	8012696 <SendFrameOnChannel+0x13e>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8012650:	4b14      	ldr	r3, [pc, #80]	@ (80126a4 <SendFrameOnChannel+0x14c>)
 8012652:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8012656:	f043 0302 	orr.w	r3, r3, #2
 801265a:	4a12      	ldr	r2, [pc, #72]	@ (80126a4 <SendFrameOnChannel+0x14c>)
 801265c:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.ChannelsNbTransCounter++;
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.ChannelsNbTransCounter++;
 8012660:	4b10      	ldr	r3, [pc, #64]	@ (80126a4 <SendFrameOnChannel+0x14c>)
 8012662:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8012666:	3301      	adds	r3, #1
 8012668:	b2da      	uxtb	r2, r3
 801266a:	4b0e      	ldr	r3, [pc, #56]	@ (80126a4 <SendFrameOnChannel+0x14c>)
 801266c:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 8012670:	4b0c      	ldr	r3, [pc, #48]	@ (80126a4 <SendFrameOnChannel+0x14c>)
 8012672:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8012676:	4b0b      	ldr	r3, [pc, #44]	@ (80126a4 <SendFrameOnChannel+0x14c>)
 8012678:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
    MacCtx.ResponseTimeoutStartTime = 0;
 801267c:	4b09      	ldr	r3, [pc, #36]	@ (80126a4 <SendFrameOnChannel+0x14c>)
 801267e:	2200      	movs	r2, #0
 8012680:	f8c3 2498 	str.w	r2, [r3, #1176]	@ 0x498
#endif /* LORAMAC_VERSION */

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8012684:	4b09      	ldr	r3, [pc, #36]	@ (80126ac <SendFrameOnChannel+0x154>)
 8012686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012688:	4a06      	ldr	r2, [pc, #24]	@ (80126a4 <SendFrameOnChannel+0x14c>)
 801268a:	8812      	ldrh	r2, [r2, #0]
 801268c:	b2d2      	uxtb	r2, r2
 801268e:	4611      	mov	r1, r2
 8012690:	4807      	ldr	r0, [pc, #28]	@ (80126b0 <SendFrameOnChannel+0x158>)
 8012692:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 8012694:	2300      	movs	r3, #0
}
 8012696:	4618      	mov	r0, r3
 8012698:	3728      	adds	r7, #40	@ 0x28
 801269a:	46bd      	mov	sp, r7
 801269c:	bd80      	pop	{r7, pc}
 801269e:	bf00      	nop
 80126a0:	20000bfc 	.word	0x20000bfc
 80126a4:	200006e0 	.word	0x200006e0
 80126a8:	20000afc 	.word	0x20000afc
 80126ac:	0801fccc 	.word	0x0801fccc
 80126b0:	200006e2 	.word	0x200006e2

080126b4 <SetTxContinuousWave>:

    return LORAMAC_STATUS_OK;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 80126b4:	b580      	push	{r7, lr}
 80126b6:	b082      	sub	sp, #8
 80126b8:	af00      	add	r7, sp, #0
 80126ba:	4603      	mov	r3, r0
 80126bc:	6039      	str	r1, [r7, #0]
 80126be:	80fb      	strh	r3, [r7, #6]
 80126c0:	4613      	mov	r3, r2
 80126c2:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 80126c4:	4b09      	ldr	r3, [pc, #36]	@ (80126ec <SetTxContinuousWave+0x38>)
 80126c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80126c8:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80126cc:	88fa      	ldrh	r2, [r7, #6]
 80126ce:	6838      	ldr	r0, [r7, #0]
 80126d0:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80126d2:	4b07      	ldr	r3, [pc, #28]	@ (80126f0 <SetTxContinuousWave+0x3c>)
 80126d4:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80126d8:	f043 0302 	orr.w	r3, r3, #2
 80126dc:	4a04      	ldr	r2, [pc, #16]	@ (80126f0 <SetTxContinuousWave+0x3c>)
 80126de:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return LORAMAC_STATUS_OK;
 80126e2:	2300      	movs	r3, #0
}
 80126e4:	4618      	mov	r0, r3
 80126e6:	3708      	adds	r7, #8
 80126e8:	46bd      	mov	sp, r7
 80126ea:	bd80      	pop	{r7, pc}
 80126ec:	0801fccc 	.word	0x0801fccc
 80126f0:	200006e0 	.word	0x200006e0

080126f4 <RestoreNvmData>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t RestoreNvmData( void )
{
 80126f4:	b580      	push	{r7, lr}
 80126f6:	b082      	sub	sp, #8
 80126f8:	af00      	add	r7, sp, #0
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    uint32_t crc = 0;
 80126fa:	2300      	movs	r3, #0
 80126fc:	607b      	str	r3, [r7, #4]

    // Status and parameter validation
    if( MacCtx.MacState != LORAMAC_STOPPED )
 80126fe:	4b49      	ldr	r3, [pc, #292]	@ (8012824 <RestoreNvmData+0x130>)
 8012700:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8012704:	2b01      	cmp	r3, #1
 8012706:	d001      	beq.n	801270c <RestoreNvmData+0x18>
    {
        return LORAMAC_STATUS_BUSY;
 8012708:	2301      	movs	r3, #1
 801270a:	e087      	b.n	801281c <RestoreNvmData+0x128>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 801270c:	2124      	movs	r1, #36	@ 0x24
 801270e:	4846      	ldr	r0, [pc, #280]	@ (8012828 <RestoreNvmData+0x134>)
 8012710:	f007 fd24 	bl	801a15c <Crc32>
 8012714:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.Crypto.Crc32 ) );
    if( crc != NvmBackup.Crypto.Crc32 )
 8012716:	4b44      	ldr	r3, [pc, #272]	@ (8012828 <RestoreNvmData+0x134>)
 8012718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801271a:	687a      	ldr	r2, [r7, #4]
 801271c:	429a      	cmp	r2, r3
 801271e:	d001      	beq.n	8012724 <RestoreNvmData+0x30>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8012720:	2317      	movs	r3, #23
 8012722:	e07b      	b.n	801281c <RestoreNvmData+0x128>
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 8012724:	211c      	movs	r1, #28
 8012726:	4841      	ldr	r0, [pc, #260]	@ (801282c <RestoreNvmData+0x138>)
 8012728:	f007 fd18 	bl	801a15c <Crc32>
 801272c:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup1.Crc32 ) );
    if( crc != NvmBackup.MacGroup1.Crc32 )
 801272e:	4b3e      	ldr	r3, [pc, #248]	@ (8012828 <RestoreNvmData+0x134>)
 8012730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012732:	687a      	ldr	r2, [r7, #4]
 8012734:	429a      	cmp	r2, r3
 8012736:	d001      	beq.n	801273c <RestoreNvmData+0x48>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8012738:	2317      	movs	r3, #23
 801273a:	e06f      	b.n	801281c <RestoreNvmData+0x128>
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 801273c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8012740:	483b      	ldr	r0, [pc, #236]	@ (8012830 <RestoreNvmData+0x13c>)
 8012742:	f007 fd0b 	bl	801a15c <Crc32>
 8012746:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup2.Crc32 ) );
    if( crc != NvmBackup.MacGroup2.Crc32 )
 8012748:	4b37      	ldr	r3, [pc, #220]	@ (8012828 <RestoreNvmData+0x134>)
 801274a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 801274e:	687a      	ldr	r2, [r7, #4]
 8012750:	429a      	cmp	r2, r3
 8012752:	d001      	beq.n	8012758 <RestoreNvmData+0x64>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8012754:	2317      	movs	r3, #23
 8012756:	e061      	b.n	801281c <RestoreNvmData+0x128>
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 8012758:	21d4      	movs	r1, #212	@ 0xd4
 801275a:	4836      	ldr	r0, [pc, #216]	@ (8012834 <RestoreNvmData+0x140>)
 801275c:	f007 fcfe 	bl	801a15c <Crc32>
 8012760:	6078      	str	r0, [r7, #4]
                                                   sizeof( NvmBackup.SecureElement.Crc32 ) );
    if( crc != NvmBackup.SecureElement.Crc32 )
 8012762:	4b31      	ldr	r3, [pc, #196]	@ (8012828 <RestoreNvmData+0x134>)
 8012764:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 8012768:	687a      	ldr	r2, [r7, #4]
 801276a:	429a      	cmp	r2, r3
 801276c:	d001      	beq.n	8012772 <RestoreNvmData+0x7e>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 801276e:	2317      	movs	r3, #23
 8012770:	e054      	b.n	801281c <RestoreNvmData+0x128>
    }

    // RegionGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 8012772:	2110      	movs	r1, #16
 8012774:	4830      	ldr	r0, [pc, #192]	@ (8012838 <RestoreNvmData+0x144>)
 8012776:	f007 fcf1 	bl	801a15c <Crc32>
 801277a:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup1.Crc32 ) );
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 801277c:	4b2a      	ldr	r3, [pc, #168]	@ (8012828 <RestoreNvmData+0x134>)
 801277e:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8012782:	687a      	ldr	r2, [r7, #4]
 8012784:	429a      	cmp	r2, r3
 8012786:	d001      	beq.n	801278c <RestoreNvmData+0x98>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8012788:	2317      	movs	r3, #23
 801278a:	e047      	b.n	801281c <RestoreNvmData+0x128>
    }

    // RegionGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup2), sizeof( NvmBackup.RegionGroup2 ) -
 801278c:	f44f 715e 	mov.w	r1, #888	@ 0x378
 8012790:	482a      	ldr	r0, [pc, #168]	@ (801283c <RestoreNvmData+0x148>)
 8012792:	f007 fce3 	bl	801a15c <Crc32>
 8012796:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup2.Crc32 ) );
    if( crc != NvmBackup.RegionGroup2.Crc32 )
 8012798:	4b23      	ldr	r3, [pc, #140]	@ (8012828 <RestoreNvmData+0x134>)
 801279a:	f8d3 35b0 	ldr.w	r3, [r3, #1456]	@ 0x5b0
 801279e:	687a      	ldr	r2, [r7, #4]
 80127a0:	429a      	cmp	r2, r3
 80127a2:	d001      	beq.n	80127a8 <RestoreNvmData+0xb4>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80127a4:	2317      	movs	r3, #23
 80127a6:	e039      	b.n	801281c <RestoreNvmData+0x128>
    }

    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 80127a8:	2114      	movs	r1, #20
 80127aa:	4825      	ldr	r0, [pc, #148]	@ (8012840 <RestoreNvmData+0x14c>)
 80127ac:	f007 fcd6 	bl	801a15c <Crc32>
 80127b0:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.ClassB.Crc32 ) );
    if( crc != NvmBackup.ClassB.Crc32 )
 80127b2:	4b1d      	ldr	r3, [pc, #116]	@ (8012828 <RestoreNvmData+0x134>)
 80127b4:	f8d3 35c8 	ldr.w	r3, [r3, #1480]	@ 0x5c8
 80127b8:	687a      	ldr	r2, [r7, #4]
 80127ba:	429a      	cmp	r2, r3
 80127bc:	d001      	beq.n	80127c2 <RestoreNvmData+0xce>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80127be:	2317      	movs	r3, #23
 80127c0:	e02c      	b.n	801281c <RestoreNvmData+0x128>
    }

    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 80127c2:	f240 52cc 	movw	r2, #1484	@ 0x5cc
 80127c6:	4918      	ldr	r1, [pc, #96]	@ (8012828 <RestoreNvmData+0x134>)
 80127c8:	481e      	ldr	r0, [pc, #120]	@ (8012844 <RestoreNvmData+0x150>)
 80127ca:	f007 fc72 	bl	801a0b2 <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 80127ce:	f240 52cc 	movw	r2, #1484	@ 0x5cc
 80127d2:	2100      	movs	r1, #0
 80127d4:	4814      	ldr	r0, [pc, #80]	@ (8012828 <RestoreNvmData+0x134>)
 80127d6:	f007 fca7 	bl	801a128 <memset1>

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 80127da:	4b12      	ldr	r3, [pc, #72]	@ (8012824 <RestoreNvmData+0x130>)
 80127dc:	f893 241b 	ldrb.w	r2, [r3, #1051]	@ 0x41b
 80127e0:	4b10      	ldr	r3, [pc, #64]	@ (8012824 <RestoreNvmData+0x130>)
 80127e2:	f883 23e8 	strb.w	r2, [r3, #1000]	@ 0x3e8
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 80127e6:	4b17      	ldr	r3, [pc, #92]	@ (8012844 <RestoreNvmData+0x150>)
 80127e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80127ea:	4a0e      	ldr	r2, [pc, #56]	@ (8012824 <RestoreNvmData+0x130>)
 80127ec:	f8c2 33ec 	str.w	r3, [r2, #1004]	@ 0x3ec
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80127f0:	4b14      	ldr	r3, [pc, #80]	@ (8012844 <RestoreNvmData+0x150>)
 80127f2:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 80127f6:	4b0b      	ldr	r3, [pc, #44]	@ (8012824 <RestoreNvmData+0x130>)
 80127f8:	f883 23f8 	strb.w	r2, [r3, #1016]	@ 0x3f8
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80127fc:	4b09      	ldr	r3, [pc, #36]	@ (8012824 <RestoreNvmData+0x130>)
 80127fe:	2201      	movs	r2, #1
 8012800:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8012804:	4b07      	ldr	r3, [pc, #28]	@ (8012824 <RestoreNvmData+0x130>)
 8012806:	2202      	movs	r2, #2
 8012808:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb

    // The public/private network flag may change upon reloading MacGroup2
    // from NVM and we thus need to synchronize the radio. The same function
    // is invoked in LoRaMacInitialization.
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 801280c:	4b0e      	ldr	r3, [pc, #56]	@ (8012848 <RestoreNvmData+0x154>)
 801280e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012810:	4a0c      	ldr	r2, [pc, #48]	@ (8012844 <RestoreNvmData+0x150>)
 8012812:	f892 2119 	ldrb.w	r2, [r2, #281]	@ 0x119
 8012816:	4610      	mov	r0, r2
 8012818:	4798      	blx	r3
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

    return LORAMAC_STATUS_OK;
 801281a:	2300      	movs	r3, #0
}
 801281c:	4618      	mov	r0, r3
 801281e:	3708      	adds	r7, #8
 8012820:	46bd      	mov	sp, r7
 8012822:	bd80      	pop	{r7, pc}
 8012824:	200006e0 	.word	0x200006e0
 8012828:	200011c8 	.word	0x200011c8
 801282c:	200011f0 	.word	0x200011f0
 8012830:	20001210 	.word	0x20001210
 8012834:	20001314 	.word	0x20001314
 8012838:	200013ec 	.word	0x200013ec
 801283c:	20001400 	.word	0x20001400
 8012840:	2000177c 	.word	0x2000177c
 8012844:	20000bfc 	.word	0x20000bfc
 8012848:	0801fccc 	.word	0x0801fccc

0801284c <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 801284c:	b480      	push	{r7}
 801284e:	b083      	sub	sp, #12
 8012850:	af00      	add	r7, sp, #0
 8012852:	6078      	str	r0, [r7, #4]
 8012854:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	2b00      	cmp	r3, #0
 801285a:	d002      	beq.n	8012862 <DetermineFrameType+0x16>
 801285c:	683b      	ldr	r3, [r7, #0]
 801285e:	2b00      	cmp	r3, #0
 8012860:	d101      	bne.n	8012866 <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012862:	2303      	movs	r3, #3
 8012864:	e03b      	b.n	80128de <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	7b1b      	ldrb	r3, [r3, #12]
 801286a:	f003 030f 	and.w	r3, r3, #15
 801286e:	b2db      	uxtb	r3, r3
 8012870:	2b00      	cmp	r3, #0
 8012872:	d008      	beq.n	8012886 <DetermineFrameType+0x3a>
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	f893 3020 	ldrb.w	r3, [r3, #32]
 801287a:	2b00      	cmp	r3, #0
 801287c:	d003      	beq.n	8012886 <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 801287e:	683b      	ldr	r3, [r7, #0]
 8012880:	2200      	movs	r2, #0
 8012882:	701a      	strb	r2, [r3, #0]
 8012884:	e02a      	b.n	80128dc <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801288c:	2b00      	cmp	r3, #0
 801288e:	d103      	bne.n	8012898 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 8012890:	683b      	ldr	r3, [r7, #0]
 8012892:	2201      	movs	r2, #1
 8012894:	701a      	strb	r2, [r3, #0]
 8012896:	e021      	b.n	80128dc <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	7b1b      	ldrb	r3, [r3, #12]
 801289c:	f003 030f 	and.w	r3, r3, #15
 80128a0:	b2db      	uxtb	r3, r3
 80128a2:	2b00      	cmp	r3, #0
 80128a4:	d108      	bne.n	80128b8 <DetermineFrameType+0x6c>
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d103      	bne.n	80128b8 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 80128b0:	683b      	ldr	r3, [r7, #0]
 80128b2:	2202      	movs	r2, #2
 80128b4:	701a      	strb	r2, [r3, #0]
 80128b6:	e011      	b.n	80128dc <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	7b1b      	ldrb	r3, [r3, #12]
 80128bc:	f003 030f 	and.w	r3, r3, #15
 80128c0:	b2db      	uxtb	r3, r3
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	d108      	bne.n	80128d8 <DetermineFrameType+0x8c>
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	d003      	beq.n	80128d8 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 80128d0:	683b      	ldr	r3, [r7, #0]
 80128d2:	2203      	movs	r2, #3
 80128d4:	701a      	strb	r2, [r3, #0]
 80128d6:	e001      	b.n	80128dc <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 80128d8:	2318      	movs	r3, #24
 80128da:	e000      	b.n	80128de <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 80128dc:	2300      	movs	r3, #0
}
 80128de:	4618      	mov	r0, r3
 80128e0:	370c      	adds	r7, #12
 80128e2:	46bd      	mov	sp, r7
 80128e4:	bc80      	pop	{r7}
 80128e6:	4770      	bx	lr

080128e8 <CheckRetrans>:
    }
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckRetrans( uint8_t counter, uint8_t limit )
{
 80128e8:	b480      	push	{r7}
 80128ea:	b083      	sub	sp, #12
 80128ec:	af00      	add	r7, sp, #0
 80128ee:	4603      	mov	r3, r0
 80128f0:	460a      	mov	r2, r1
 80128f2:	71fb      	strb	r3, [r7, #7]
 80128f4:	4613      	mov	r3, r2
 80128f6:	71bb      	strb	r3, [r7, #6]
    if( counter >= limit )
 80128f8:	79fa      	ldrb	r2, [r7, #7]
 80128fa:	79bb      	ldrb	r3, [r7, #6]
 80128fc:	429a      	cmp	r2, r3
 80128fe:	d301      	bcc.n	8012904 <CheckRetrans+0x1c>
    {
        return true;
 8012900:	2301      	movs	r3, #1
 8012902:	e000      	b.n	8012906 <CheckRetrans+0x1e>
    }
    return false;
 8012904:	2300      	movs	r3, #0
}
 8012906:	4618      	mov	r0, r3
 8012908:	370c      	adds	r7, #12
 801290a:	46bd      	mov	sp, r7
 801290c:	bc80      	pop	{r7}
 801290e:	4770      	bx	lr

08012910 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 8012910:	b580      	push	{r7, lr}
 8012912:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 8012914:	4b12      	ldr	r3, [pc, #72]	@ (8012960 <CheckRetransUnconfirmedUplink+0x50>)
 8012916:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 801291a:	4a12      	ldr	r2, [pc, #72]	@ (8012964 <CheckRetransUnconfirmedUplink+0x54>)
 801291c:	f892 2068 	ldrb.w	r2, [r2, #104]	@ 0x68
 8012920:	4611      	mov	r1, r2
 8012922:	4618      	mov	r0, r3
 8012924:	f7ff ffe0 	bl	80128e8 <CheckRetrans>
 8012928:	4603      	mov	r3, r0
 801292a:	2b00      	cmp	r3, #0
 801292c:	d001      	beq.n	8012932 <CheckRetransUnconfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 801292e:	2301      	movs	r3, #1
 8012930:	e014      	b.n	801295c <CheckRetransUnconfirmedUplink+0x4c>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8012932:	4b0b      	ldr	r3, [pc, #44]	@ (8012960 <CheckRetransUnconfirmedUplink+0x50>)
 8012934:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8012938:	f003 0302 	and.w	r3, r3, #2
 801293c:	b2db      	uxtb	r3, r3
 801293e:	2b00      	cmp	r3, #0
 8012940:	d00b      	beq.n	801295a <CheckRetransUnconfirmedUplink+0x4a>
    {
        // Stop the retransmissions, if a valid downlink is received
        // a class A RX window. This holds also for class B and C.
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8012942:	4b07      	ldr	r3, [pc, #28]	@ (8012960 <CheckRetransUnconfirmedUplink+0x50>)
 8012944:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 8012948:	2b00      	cmp	r3, #0
 801294a:	d004      	beq.n	8012956 <CheckRetransUnconfirmedUplink+0x46>
            ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 801294c:	4b04      	ldr	r3, [pc, #16]	@ (8012960 <CheckRetransUnconfirmedUplink+0x50>)
 801294e:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8012952:	2b01      	cmp	r3, #1
 8012954:	d101      	bne.n	801295a <CheckRetransUnconfirmedUplink+0x4a>
        {
            return true;
 8012956:	2301      	movs	r3, #1
 8012958:	e000      	b.n	801295c <CheckRetransUnconfirmedUplink+0x4c>
        }
    }
    return false;
 801295a:	2300      	movs	r3, #0
}
 801295c:	4618      	mov	r0, r3
 801295e:	bd80      	pop	{r7, pc}
 8012960:	200006e0 	.word	0x200006e0
 8012964:	20000bfc 	.word	0x20000bfc

08012968 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 8012968:	b580      	push	{r7, lr}
 801296a:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 801296c:	4b10      	ldr	r3, [pc, #64]	@ (80129b0 <CheckRetransConfirmedUplink+0x48>)
 801296e:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8012972:	4a10      	ldr	r2, [pc, #64]	@ (80129b4 <CheckRetransConfirmedUplink+0x4c>)
 8012974:	f892 2068 	ldrb.w	r2, [r2, #104]	@ 0x68
 8012978:	4611      	mov	r1, r2
 801297a:	4618      	mov	r0, r3
 801297c:	f7ff ffb4 	bl	80128e8 <CheckRetrans>
 8012980:	4603      	mov	r3, r0
 8012982:	2b00      	cmp	r3, #0
 8012984:	d001      	beq.n	801298a <CheckRetransConfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 8012986:	2301      	movs	r3, #1
 8012988:	e00f      	b.n	80129aa <CheckRetransConfirmedUplink+0x42>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 801298a:	4b09      	ldr	r3, [pc, #36]	@ (80129b0 <CheckRetransConfirmedUplink+0x48>)
 801298c:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8012990:	f003 0302 	and.w	r3, r3, #2
 8012994:	b2db      	uxtb	r3, r3
 8012996:	2b00      	cmp	r3, #0
 8012998:	d006      	beq.n	80129a8 <CheckRetransConfirmedUplink+0x40>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 801299a:	4b05      	ldr	r3, [pc, #20]	@ (80129b0 <CheckRetransConfirmedUplink+0x48>)
 801299c:	f893 3444 	ldrb.w	r3, [r3, #1092]	@ 0x444
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	d001      	beq.n	80129a8 <CheckRetransConfirmedUplink+0x40>
        {
            return true;
 80129a4:	2301      	movs	r3, #1
 80129a6:	e000      	b.n	80129aa <CheckRetransConfirmedUplink+0x42>
        }
    }
    return false;
 80129a8:	2300      	movs	r3, #0
}
 80129aa:	4618      	mov	r0, r3
 80129ac:	bd80      	pop	{r7, pc}
 80129ae:	bf00      	nop
 80129b0:	200006e0 	.word	0x200006e0
 80129b4:	20000bfc 	.word	0x20000bfc

080129b8 <IncreaseAdrAckCounter>:

static uint32_t IncreaseAdrAckCounter( uint32_t counter )
{
 80129b8:	b480      	push	{r7}
 80129ba:	b083      	sub	sp, #12
 80129bc:	af00      	add	r7, sp, #0
 80129be:	6078      	str	r0, [r7, #4]
    if( counter < ADR_ACK_COUNTER_MAX )
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80129c6:	d002      	beq.n	80129ce <IncreaseAdrAckCounter+0x16>
    {
        counter++;
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	3301      	adds	r3, #1
 80129cc:	607b      	str	r3, [r7, #4]
    }
    return counter;
 80129ce:	687b      	ldr	r3, [r7, #4]
}
 80129d0:	4618      	mov	r0, r3
 80129d2:	370c      	adds	r7, #12
 80129d4:	46bd      	mov	sp, r7
 80129d6:	bc80      	pop	{r7}
 80129d8:	4770      	bx	lr
	...

080129dc <StopRetransmission>:
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 80129dc:	b580      	push	{r7, lr}
 80129de:	af00      	add	r7, sp, #0
            }
        }
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 80129e0:	4b1a      	ldr	r3, [pc, #104]	@ (8012a4c <StopRetransmission+0x70>)
 80129e2:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 80129e6:	f003 0302 	and.w	r3, r3, #2
 80129ea:	b2db      	uxtb	r3, r3
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	d009      	beq.n	8012a04 <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 80129f0:	4b16      	ldr	r3, [pc, #88]	@ (8012a4c <StopRetransmission+0x70>)
 80129f2:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	d011      	beq.n	8012a1e <StopRetransmission+0x42>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 80129fa:	4b14      	ldr	r3, [pc, #80]	@ (8012a4c <StopRetransmission+0x70>)
 80129fc:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8012a00:	2b01      	cmp	r3, #1
 8012a02:	d00c      	beq.n	8012a1e <StopRetransmission+0x42>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8012a04:	4b12      	ldr	r3, [pc, #72]	@ (8012a50 <StopRetransmission+0x74>)
 8012a06:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	d007      	beq.n	8012a1e <StopRetransmission+0x42>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 8012a0e:	4b10      	ldr	r3, [pc, #64]	@ (8012a50 <StopRetransmission+0x74>)
 8012a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012a12:	4618      	mov	r0, r3
 8012a14:	f7ff ffd0 	bl	80129b8 <IncreaseAdrAckCounter>
 8012a18:	4603      	mov	r3, r0
 8012a1a:	4a0d      	ldr	r2, [pc, #52]	@ (8012a50 <StopRetransmission+0x74>)
 8012a1c:	6293      	str	r3, [r2, #40]	@ 0x28
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8012a1e:	4b0b      	ldr	r3, [pc, #44]	@ (8012a4c <StopRetransmission+0x70>)
 8012a20:	2200      	movs	r2, #0
 8012a22:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    MacCtx.NodeAckRequested = false;
 8012a26:	4b09      	ldr	r3, [pc, #36]	@ (8012a4c <StopRetransmission+0x70>)
 8012a28:	2200      	movs	r2, #0
 8012a2a:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
 8012a2e:	4b07      	ldr	r3, [pc, #28]	@ (8012a4c <StopRetransmission+0x70>)
 8012a30:	2200      	movs	r2, #0
 8012a32:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8012a36:	4b05      	ldr	r3, [pc, #20]	@ (8012a4c <StopRetransmission+0x70>)
 8012a38:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8012a3c:	f023 0302 	bic.w	r3, r3, #2
 8012a40:	4a02      	ldr	r2, [pc, #8]	@ (8012a4c <StopRetransmission+0x70>)
 8012a42:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return true;
 8012a46:	2301      	movs	r3, #1
}
 8012a48:	4618      	mov	r0, r3
 8012a4a:	bd80      	pop	{r7, pc}
 8012a4c:	200006e0 	.word	0x200006e0
 8012a50:	20000bfc 	.word	0x20000bfc

08012a54 <OnMacProcessNotify>:

static void OnMacProcessNotify( void )
{
 8012a54:	b580      	push	{r7, lr}
 8012a56:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8012a58:	4b08      	ldr	r3, [pc, #32]	@ (8012a7c <OnMacProcessNotify+0x28>)
 8012a5a:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8012a5e:	2b00      	cmp	r3, #0
 8012a60:	d00a      	beq.n	8012a78 <OnMacProcessNotify+0x24>
 8012a62:	4b06      	ldr	r3, [pc, #24]	@ (8012a7c <OnMacProcessNotify+0x28>)
 8012a64:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8012a68:	695b      	ldr	r3, [r3, #20]
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d004      	beq.n	8012a78 <OnMacProcessNotify+0x24>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8012a6e:	4b03      	ldr	r3, [pc, #12]	@ (8012a7c <OnMacProcessNotify+0x28>)
 8012a70:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8012a74:	695b      	ldr	r3, [r3, #20]
 8012a76:	4798      	blx	r3
    }
}
 8012a78:	bf00      	nop
 8012a7a:	bd80      	pop	{r7, pc}
 8012a7c:	200006e0 	.word	0x200006e0

08012a80 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 8012a80:	b580      	push	{r7, lr}
 8012a82:	b082      	sub	sp, #8
 8012a84:	af00      	add	r7, sp, #0
 8012a86:	4603      	mov	r3, r0
 8012a88:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 8012a8a:	4b0b      	ldr	r3, [pc, #44]	@ (8012ab8 <CallNvmDataChangeCallback+0x38>)
 8012a8c:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8012a90:	2b00      	cmp	r3, #0
 8012a92:	d00c      	beq.n	8012aae <CallNvmDataChangeCallback+0x2e>
 8012a94:	4b08      	ldr	r3, [pc, #32]	@ (8012ab8 <CallNvmDataChangeCallback+0x38>)
 8012a96:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8012a9a:	691b      	ldr	r3, [r3, #16]
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	d006      	beq.n	8012aae <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8012aa0:	4b05      	ldr	r3, [pc, #20]	@ (8012ab8 <CallNvmDataChangeCallback+0x38>)
 8012aa2:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8012aa6:	691b      	ldr	r3, [r3, #16]
 8012aa8:	88fa      	ldrh	r2, [r7, #6]
 8012aaa:	4610      	mov	r0, r2
 8012aac:	4798      	blx	r3
    }
}
 8012aae:	bf00      	nop
 8012ab0:	3708      	adds	r7, #8
 8012ab2:	46bd      	mov	sp, r7
 8012ab4:	bd80      	pop	{r7, pc}
 8012ab6:	bf00      	nop
 8012ab8:	200006e0 	.word	0x200006e0

08012abc <IsRequestPending>:
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
}
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
 8012abc:	b480      	push	{r7}
 8012abe:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8012ac0:	4b0b      	ldr	r3, [pc, #44]	@ (8012af0 <IsRequestPending+0x34>)
 8012ac2:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8012ac6:	f003 0304 	and.w	r3, r3, #4
 8012aca:	b2db      	uxtb	r3, r3
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	d107      	bne.n	8012ae0 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 8012ad0:	4b07      	ldr	r3, [pc, #28]	@ (8012af0 <IsRequestPending+0x34>)
 8012ad2:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 8012ad6:	f003 0301 	and.w	r3, r3, #1
 8012ada:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	d001      	beq.n	8012ae4 <IsRequestPending+0x28>
    {
        return 1;
 8012ae0:	2301      	movs	r3, #1
 8012ae2:	e000      	b.n	8012ae6 <IsRequestPending+0x2a>
    }
    return 0;
 8012ae4:	2300      	movs	r3, #0
}
 8012ae6:	4618      	mov	r0, r3
 8012ae8:	46bd      	mov	sp, r7
 8012aea:	bc80      	pop	{r7}
 8012aec:	4770      	bx	lr
 8012aee:	bf00      	nop
 8012af0:	200006e0 	.word	0x200006e0

08012af4 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 8012af4:	b590      	push	{r4, r7, lr}
 8012af6:	b091      	sub	sp, #68	@ 0x44
 8012af8:	af02      	add	r7, sp, #8
 8012afa:	6178      	str	r0, [r7, #20]
 8012afc:	6139      	str	r1, [r7, #16]
 8012afe:	4613      	mov	r3, r2
 8012b00:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 8012b02:	697b      	ldr	r3, [r7, #20]
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	d002      	beq.n	8012b0e <LoRaMacInitialization+0x1a>
 8012b08:	693b      	ldr	r3, [r7, #16]
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	d101      	bne.n	8012b12 <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012b0e:	2303      	movs	r3, #3
 8012b10:	e27a      	b.n	8013008 <LoRaMacInitialization+0x514>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8012b12:	697b      	ldr	r3, [r7, #20]
 8012b14:	681b      	ldr	r3, [r3, #0]
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d00b      	beq.n	8012b32 <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 8012b1a:	697b      	ldr	r3, [r7, #20]
 8012b1c:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	d007      	beq.n	8012b32 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8012b22:	697b      	ldr	r3, [r7, #20]
 8012b24:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d003      	beq.n	8012b32 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 8012b2a:	697b      	ldr	r3, [r7, #20]
 8012b2c:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	d101      	bne.n	8012b36 <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012b32:	2303      	movs	r3, #3
 8012b34:	e268      	b.n	8013008 <LoRaMacInitialization+0x514>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 8012b36:	7bfb      	ldrb	r3, [r7, #15]
 8012b38:	4618      	mov	r0, r3
 8012b3a:	f003 fca6 	bl	801648a <RegionIsActive>
 8012b3e:	4603      	mov	r3, r0
 8012b40:	f083 0301 	eor.w	r3, r3, #1
 8012b44:	b2db      	uxtb	r3, r3
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d001      	beq.n	8012b4e <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8012b4a:	2309      	movs	r3, #9
 8012b4c:	e25c      	b.n	8013008 <LoRaMacInitialization+0x514>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 8012b4e:	6978      	ldr	r0, [r7, #20]
 8012b50:	f002 f932 	bl	8014db8 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 8012b54:	f240 52cc 	movw	r2, #1484	@ 0x5cc
 8012b58:	2100      	movs	r1, #0
 8012b5a:	48c7      	ldr	r0, [pc, #796]	@ (8012e78 <LoRaMacInitialization+0x384>)
 8012b5c:	f007 fae4 	bl	801a128 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8012b60:	f240 521c 	movw	r2, #1308	@ 0x51c
 8012b64:	2100      	movs	r1, #0
 8012b66:	48c5      	ldr	r0, [pc, #788]	@ (8012e7c <LoRaMacInitialization+0x388>)
 8012b68:	f007 fade 	bl	801a128 <memset1>
    // Set non zero variables to its default value
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetries = 1;
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 8012b6c:	4ac2      	ldr	r2, [pc, #776]	@ (8012e78 <LoRaMacInitialization+0x384>)
 8012b6e:	7bfb      	ldrb	r3, [r7, #15]
 8012b70:	f882 3048 	strb.w	r3, [r2, #72]	@ 0x48
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8012b74:	4bc0      	ldr	r3, [pc, #768]	@ (8012e78 <LoRaMacInitialization+0x384>)
 8012b76:	2200      	movs	r2, #0
 8012b78:	f883 2118 	strb.w	r2, [r3, #280]	@ 0x118
    Nvm.MacGroup2.MacParams.RepeaterSupport = false;
 8012b7c:	4bbe      	ldr	r3, [pc, #760]	@ (8012e78 <LoRaMacInitialization+0x384>)
 8012b7e:	2200      	movs	r2, #0
 8012b80:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8012b84:	4bbc      	ldr	r3, [pc, #752]	@ (8012e78 <LoRaMacInitialization+0x384>)
 8012b86:	4abe      	ldr	r2, [pc, #760]	@ (8012e80 <LoRaMacInitialization+0x38c>)
 8012b88:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 8012b8c:	2300      	movs	r3, #0
 8012b8e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8012b92:	4bbc      	ldr	r3, [pc, #752]	@ (8012e84 <LoRaMacInitialization+0x390>)
 8012b94:	61fb      	str	r3, [r7, #28]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8012b96:	4bbc      	ldr	r3, [pc, #752]	@ (8012e88 <LoRaMacInitialization+0x394>)
 8012b98:	623b      	str	r3, [r7, #32]
    params.Bands = &RegionBands;
 8012b9a:	4bbc      	ldr	r3, [pc, #752]	@ (8012e8c <LoRaMacInitialization+0x398>)
 8012b9c:	627b      	str	r3, [r7, #36]	@ 0x24
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8012b9e:	4bb6      	ldr	r3, [pc, #728]	@ (8012e78 <LoRaMacInitialization+0x384>)
 8012ba0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012ba4:	f107 021c 	add.w	r2, r7, #28
 8012ba8:	4611      	mov	r1, r2
 8012baa:	4618      	mov	r0, r3
 8012bac:	f003 fcb9 	bl	8016522 <RegionInitDefaults>
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8012bb0:	230f      	movs	r3, #15
 8012bb2:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012bb6:	4bb0      	ldr	r3, [pc, #704]	@ (8012e78 <LoRaMacInitialization+0x384>)
 8012bb8:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012bbc:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8012bc0:	4611      	mov	r1, r2
 8012bc2:	4618      	mov	r0, r3
 8012bc4:	f003 fc76 	bl	80164b4 <RegionGetPhyParam>
 8012bc8:	4603      	mov	r3, r0
 8012bca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8012bcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	bf14      	ite	ne
 8012bd2:	2301      	movne	r3, #1
 8012bd4:	2300      	moveq	r3, #0
 8012bd6:	b2da      	uxtb	r2, r3
 8012bd8:	4ba7      	ldr	r3, [pc, #668]	@ (8012e78 <LoRaMacInitialization+0x384>)
 8012bda:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8012bde:	230a      	movs	r3, #10
 8012be0:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012be4:	4ba4      	ldr	r3, [pc, #656]	@ (8012e78 <LoRaMacInitialization+0x384>)
 8012be6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012bea:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8012bee:	4611      	mov	r1, r2
 8012bf0:	4618      	mov	r0, r3
 8012bf2:	f003 fc5f 	bl	80164b4 <RegionGetPhyParam>
 8012bf6:	4603      	mov	r3, r0
 8012bf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 8012bfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012bfc:	b25a      	sxtb	r2, r3
 8012bfe:	4b9e      	ldr	r3, [pc, #632]	@ (8012e78 <LoRaMacInitialization+0x384>)
 8012c00:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

    getPhy.Attribute = PHY_DEF_TX_DR;
 8012c04:	2306      	movs	r3, #6
 8012c06:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012c0a:	4b9b      	ldr	r3, [pc, #620]	@ (8012e78 <LoRaMacInitialization+0x384>)
 8012c0c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012c10:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8012c14:	4611      	mov	r1, r2
 8012c16:	4618      	mov	r0, r3
 8012c18:	f003 fc4c 	bl	80164b4 <RegionGetPhyParam>
 8012c1c:	4603      	mov	r3, r0
 8012c1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 8012c20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c22:	b25a      	sxtb	r2, r3
 8012c24:	4b94      	ldr	r3, [pc, #592]	@ (8012e78 <LoRaMacInitialization+0x384>)
 8012c26:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8012c2a:	2310      	movs	r3, #16
 8012c2c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012c30:	4b91      	ldr	r3, [pc, #580]	@ (8012e78 <LoRaMacInitialization+0x384>)
 8012c32:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012c36:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8012c3a:	4611      	mov	r1, r2
 8012c3c:	4618      	mov	r0, r3
 8012c3e:	f003 fc39 	bl	80164b4 <RegionGetPhyParam>
 8012c42:	4603      	mov	r3, r0
 8012c44:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8012c46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c48:	4a8b      	ldr	r2, [pc, #556]	@ (8012e78 <LoRaMacInitialization+0x384>)
 8012c4a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8012c4e:	2311      	movs	r3, #17
 8012c50:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012c54:	4b88      	ldr	r3, [pc, #544]	@ (8012e78 <LoRaMacInitialization+0x384>)
 8012c56:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012c5a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8012c5e:	4611      	mov	r1, r2
 8012c60:	4618      	mov	r0, r3
 8012c62:	f003 fc27 	bl	80164b4 <RegionGetPhyParam>
 8012c66:	4603      	mov	r3, r0
 8012c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8012c6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c6c:	4a82      	ldr	r2, [pc, #520]	@ (8012e78 <LoRaMacInitialization+0x384>)
 8012c6e:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8012c72:	2312      	movs	r3, #18
 8012c74:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012c78:	4b7f      	ldr	r3, [pc, #508]	@ (8012e78 <LoRaMacInitialization+0x384>)
 8012c7a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012c7e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8012c82:	4611      	mov	r1, r2
 8012c84:	4618      	mov	r0, r3
 8012c86:	f003 fc15 	bl	80164b4 <RegionGetPhyParam>
 8012c8a:	4603      	mov	r3, r0
 8012c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8012c8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c90:	4a79      	ldr	r2, [pc, #484]	@ (8012e78 <LoRaMacInitialization+0x384>)
 8012c92:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8012c96:	2313      	movs	r3, #19
 8012c98:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012c9c:	4b76      	ldr	r3, [pc, #472]	@ (8012e78 <LoRaMacInitialization+0x384>)
 8012c9e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012ca2:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8012ca6:	4611      	mov	r1, r2
 8012ca8:	4618      	mov	r0, r3
 8012caa:	f003 fc03 	bl	80164b4 <RegionGetPhyParam>
 8012cae:	4603      	mov	r3, r0
 8012cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8012cb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012cb4:	4a70      	ldr	r2, [pc, #448]	@ (8012e78 <LoRaMacInitialization+0x384>)
 8012cb6:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8012cba:	2314      	movs	r3, #20
 8012cbc:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012cc0:	4b6d      	ldr	r3, [pc, #436]	@ (8012e78 <LoRaMacInitialization+0x384>)
 8012cc2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012cc6:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8012cca:	4611      	mov	r1, r2
 8012ccc:	4618      	mov	r0, r3
 8012cce:	f003 fbf1 	bl	80164b4 <RegionGetPhyParam>
 8012cd2:	4603      	mov	r3, r0
 8012cd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8012cd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012cd8:	4a67      	ldr	r2, [pc, #412]	@ (8012e78 <LoRaMacInitialization+0x384>)
 8012cda:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8012cde:	2316      	movs	r3, #22
 8012ce0:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012ce4:	4b64      	ldr	r3, [pc, #400]	@ (8012e78 <LoRaMacInitialization+0x384>)
 8012ce6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012cea:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8012cee:	4611      	mov	r1, r2
 8012cf0:	4618      	mov	r0, r3
 8012cf2:	f003 fbdf 	bl	80164b4 <RegionGetPhyParam>
 8012cf6:	4603      	mov	r3, r0
 8012cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8012cfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012cfc:	b2da      	uxtb	r2, r3
 8012cfe:	4b5e      	ldr	r3, [pc, #376]	@ (8012e78 <LoRaMacInitialization+0x384>)
 8012d00:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8012d04:	2317      	movs	r3, #23
 8012d06:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012d0a:	4b5b      	ldr	r3, [pc, #364]	@ (8012e78 <LoRaMacInitialization+0x384>)
 8012d0c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012d10:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8012d14:	4611      	mov	r1, r2
 8012d16:	4618      	mov	r0, r3
 8012d18:	f003 fbcc 	bl	80164b4 <RegionGetPhyParam>
 8012d1c:	4603      	mov	r3, r0
 8012d1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8012d20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d22:	4a55      	ldr	r2, [pc, #340]	@ (8012e78 <LoRaMacInitialization+0x384>)
 8012d24:	f8c2 30b4 	str.w	r3, [r2, #180]	@ 0xb4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8012d28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d2a:	4a53      	ldr	r2, [pc, #332]	@ (8012e78 <LoRaMacInitialization+0x384>)
 8012d2c:	f8c2 30bc 	str.w	r3, [r2, #188]	@ 0xbc

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8012d30:	2318      	movs	r3, #24
 8012d32:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012d36:	4b50      	ldr	r3, [pc, #320]	@ (8012e78 <LoRaMacInitialization+0x384>)
 8012d38:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012d3c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8012d40:	4611      	mov	r1, r2
 8012d42:	4618      	mov	r0, r3
 8012d44:	f003 fbb6 	bl	80164b4 <RegionGetPhyParam>
 8012d48:	4603      	mov	r3, r0
 8012d4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8012d4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d4e:	b2da      	uxtb	r2, r3
 8012d50:	4b49      	ldr	r3, [pc, #292]	@ (8012e78 <LoRaMacInitialization+0x384>)
 8012d52:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 8012d56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d58:	b2da      	uxtb	r2, r3
 8012d5a:	4b47      	ldr	r3, [pc, #284]	@ (8012e78 <LoRaMacInitialization+0x384>)
 8012d5c:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8012d60:	231d      	movs	r3, #29
 8012d62:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012d66:	4b44      	ldr	r3, [pc, #272]	@ (8012e78 <LoRaMacInitialization+0x384>)
 8012d68:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012d6c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8012d70:	4611      	mov	r1, r2
 8012d72:	4618      	mov	r0, r3
 8012d74:	f003 fb9e 	bl	80164b4 <RegionGetPhyParam>
 8012d78:	4603      	mov	r3, r0
 8012d7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8012d7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d7e:	b2da      	uxtb	r2, r3
 8012d80:	4b3d      	ldr	r3, [pc, #244]	@ (8012e78 <LoRaMacInitialization+0x384>)
 8012d82:	f883 20c4 	strb.w	r2, [r3, #196]	@ 0xc4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8012d86:	231e      	movs	r3, #30
 8012d88:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012d8c:	4b3a      	ldr	r3, [pc, #232]	@ (8012e78 <LoRaMacInitialization+0x384>)
 8012d8e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012d92:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8012d96:	4611      	mov	r1, r2
 8012d98:	4618      	mov	r0, r3
 8012d9a:	f003 fb8b 	bl	80164b4 <RegionGetPhyParam>
 8012d9e:	4603      	mov	r3, r0
 8012da0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8012da2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012da4:	b2da      	uxtb	r2, r3
 8012da6:	4b34      	ldr	r3, [pc, #208]	@ (8012e78 <LoRaMacInitialization+0x384>)
 8012da8:	f883 20c5 	strb.w	r2, [r3, #197]	@ 0xc5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8012dac:	231f      	movs	r3, #31
 8012dae:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012db2:	4b31      	ldr	r3, [pc, #196]	@ (8012e78 <LoRaMacInitialization+0x384>)
 8012db4:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012db8:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8012dbc:	4611      	mov	r1, r2
 8012dbe:	4618      	mov	r0, r3
 8012dc0:	f003 fb78 	bl	80164b4 <RegionGetPhyParam>
 8012dc4:	4603      	mov	r3, r0
 8012dc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 8012dc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012dca:	4a2b      	ldr	r2, [pc, #172]	@ (8012e78 <LoRaMacInitialization+0x384>)
 8012dcc:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8012dd0:	2320      	movs	r3, #32
 8012dd2:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012dd6:	4b28      	ldr	r3, [pc, #160]	@ (8012e78 <LoRaMacInitialization+0x384>)
 8012dd8:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012ddc:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8012de0:	4611      	mov	r1, r2
 8012de2:	4618      	mov	r0, r3
 8012de4:	f003 fb66 	bl	80164b4 <RegionGetPhyParam>
 8012de8:	4603      	mov	r3, r0
 8012dea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 8012dec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012dee:	4a22      	ldr	r2, [pc, #136]	@ (8012e78 <LoRaMacInitialization+0x384>)
 8012df0:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8012df4:	230b      	movs	r3, #11
 8012df6:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012dfa:	4b1f      	ldr	r3, [pc, #124]	@ (8012e78 <LoRaMacInitialization+0x384>)
 8012dfc:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012e00:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8012e04:	4611      	mov	r1, r2
 8012e06:	4618      	mov	r0, r3
 8012e08:	f003 fb54 	bl	80164b4 <RegionGetPhyParam>
 8012e0c:	4603      	mov	r3, r0
 8012e0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = phyParam.Value;
 8012e10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e12:	b29a      	uxth	r2, r3
 8012e14:	4b18      	ldr	r3, [pc, #96]	@ (8012e78 <LoRaMacInitialization+0x384>)
 8012e16:	f8a3 20d0 	strh.w	r2, [r3, #208]	@ 0xd0

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8012e1a:	230c      	movs	r3, #12
 8012e1c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012e20:	4b15      	ldr	r3, [pc, #84]	@ (8012e78 <LoRaMacInitialization+0x384>)
 8012e22:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012e26:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8012e2a:	4611      	mov	r1, r2
 8012e2c:	4618      	mov	r0, r3
 8012e2e:	f003 fb41 	bl	80164b4 <RegionGetPhyParam>
 8012e32:	4603      	mov	r3, r0
 8012e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = phyParam.Value;
 8012e36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e38:	b29a      	uxth	r2, r3
 8012e3a:	4b0f      	ldr	r3, [pc, #60]	@ (8012e78 <LoRaMacInitialization+0x384>)
 8012e3c:	f8a3 20d2 	strh.w	r2, [r3, #210]	@ 0xd2

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8012e40:	4b0d      	ldr	r3, [pc, #52]	@ (8012e78 <LoRaMacInitialization+0x384>)
 8012e42:	2201      	movs	r2, #1
 8012e44:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 8012e48:	4b0b      	ldr	r3, [pc, #44]	@ (8012e78 <LoRaMacInitialization+0x384>)
 8012e4a:	220a      	movs	r2, #10
 8012e4c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 8012e50:	4b09      	ldr	r3, [pc, #36]	@ (8012e78 <LoRaMacInitialization+0x384>)
 8012e52:	2206      	movs	r2, #6
 8012e54:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 8012e58:	4b07      	ldr	r3, [pc, #28]	@ (8012e78 <LoRaMacInitialization+0x384>)
 8012e5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8012e5e:	4a06      	ldr	r2, [pc, #24]	@ (8012e78 <LoRaMacInitialization+0x384>)
 8012e60:	64d3      	str	r3, [r2, #76]	@ 0x4c
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 8012e62:	4b05      	ldr	r3, [pc, #20]	@ (8012e78 <LoRaMacInitialization+0x384>)
 8012e64:	f893 2098 	ldrb.w	r2, [r3, #152]	@ 0x98
 8012e68:	4b03      	ldr	r3, [pc, #12]	@ (8012e78 <LoRaMacInitialization+0x384>)
 8012e6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 8012e6e:	4b02      	ldr	r3, [pc, #8]	@ (8012e78 <LoRaMacInitialization+0x384>)
 8012e70:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8012e74:	e00c      	b.n	8012e90 <LoRaMacInitialization+0x39c>
 8012e76:	bf00      	nop
 8012e78:	20000bfc 	.word	0x20000bfc
 8012e7c:	200006e0 	.word	0x200006e0
 8012e80:	01000400 	.word	0x01000400
 8012e84:	20000e20 	.word	0x20000e20
 8012e88:	20000e34 	.word	0x20000e34
 8012e8c:	20001794 	.word	0x20001794
 8012e90:	4a5f      	ldr	r2, [pc, #380]	@ (8013010 <LoRaMacInitialization+0x51c>)
 8012e92:	6553      	str	r3, [r2, #84]	@ 0x54
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 8012e94:	4b5e      	ldr	r3, [pc, #376]	@ (8013010 <LoRaMacInitialization+0x51c>)
 8012e96:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012e9a:	4a5d      	ldr	r2, [pc, #372]	@ (8013010 <LoRaMacInitialization+0x51c>)
 8012e9c:	6593      	str	r3, [r2, #88]	@ 0x58
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 8012e9e:	4b5c      	ldr	r3, [pc, #368]	@ (8013010 <LoRaMacInitialization+0x51c>)
 8012ea0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8012ea4:	4a5a      	ldr	r2, [pc, #360]	@ (8013010 <LoRaMacInitialization+0x51c>)
 8012ea6:	65d3      	str	r3, [r2, #92]	@ 0x5c
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 8012ea8:	4b59      	ldr	r3, [pc, #356]	@ (8013010 <LoRaMacInitialization+0x51c>)
 8012eaa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8012eae:	4a58      	ldr	r2, [pc, #352]	@ (8013010 <LoRaMacInitialization+0x51c>)
 8012eb0:	6613      	str	r3, [r2, #96]	@ 0x60
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 8012eb2:	4b57      	ldr	r3, [pc, #348]	@ (8013010 <LoRaMacInitialization+0x51c>)
 8012eb4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8012eb8:	4a55      	ldr	r2, [pc, #340]	@ (8013010 <LoRaMacInitialization+0x51c>)
 8012eba:	6653      	str	r3, [r2, #100]	@ 0x64
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 8012ebc:	4b54      	ldr	r3, [pc, #336]	@ (8013010 <LoRaMacInitialization+0x51c>)
 8012ebe:	f893 20b0 	ldrb.w	r2, [r3, #176]	@ 0xb0
 8012ec2:	4b53      	ldr	r3, [pc, #332]	@ (8013010 <LoRaMacInitialization+0x51c>)
 8012ec4:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    params.NvmGroup1 = &Nvm.RegionGroup1;
    params.NvmGroup2 = &Nvm.RegionGroup2;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
 8012ec8:	4b51      	ldr	r3, [pc, #324]	@ (8013010 <LoRaMacInitialization+0x51c>)
 8012eca:	2201      	movs	r2, #1
 8012ecc:	f883 211f 	strb.w	r2, [r3, #287]	@ 0x11f
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 8012ed0:	4a50      	ldr	r2, [pc, #320]	@ (8013014 <LoRaMacInitialization+0x520>)
 8012ed2:	693b      	ldr	r3, [r7, #16]
 8012ed4:	f8c2 3348 	str.w	r3, [r2, #840]	@ 0x348
    ResetMacParameters( false );
 8012ed8:	2000      	movs	r0, #0
 8012eda:	f7ff f86b 	bl	8011fb4 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 8012ede:	4b4c      	ldr	r3, [pc, #304]	@ (8013010 <LoRaMacInitialization+0x51c>)
 8012ee0:	2201      	movs	r2, #1
 8012ee2:	f883 2119 	strb.w	r2, [r3, #281]	@ 0x119

    MacCtx.MacPrimitives = primitives;
 8012ee6:	4a4b      	ldr	r2, [pc, #300]	@ (8013014 <LoRaMacInitialization+0x520>)
 8012ee8:	697b      	ldr	r3, [r7, #20]
 8012eea:	f8c2 3344 	str.w	r3, [r2, #836]	@ 0x344
    MacCtx.MacFlags.Value = 0;
 8012eee:	4b49      	ldr	r3, [pc, #292]	@ (8013014 <LoRaMacInitialization+0x520>)
 8012ef0:	2200      	movs	r2, #0
 8012ef2:	f883 2491 	strb.w	r2, [r3, #1169]	@ 0x491
    MacCtx.MacState = LORAMAC_STOPPED;
 8012ef6:	4b47      	ldr	r3, [pc, #284]	@ (8013014 <LoRaMacInitialization+0x520>)
 8012ef8:	2201      	movs	r2, #1
 8012efa:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 8012efe:	4b44      	ldr	r3, [pc, #272]	@ (8013010 <LoRaMacInitialization+0x51c>)
 8012f00:	2200      	movs	r2, #0
 8012f02:	62da      	str	r2, [r3, #44]	@ 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 8012f04:	4b42      	ldr	r3, [pc, #264]	@ (8013010 <LoRaMacInitialization+0x51c>)
 8012f06:	2200      	movs	r2, #0
 8012f08:	631a      	str	r2, [r3, #48]	@ 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8012f0a:	2300      	movs	r3, #0
 8012f0c:	9300      	str	r3, [sp, #0]
 8012f0e:	4b42      	ldr	r3, [pc, #264]	@ (8013018 <LoRaMacInitialization+0x524>)
 8012f10:	2200      	movs	r2, #0
 8012f12:	f04f 31ff 	mov.w	r1, #4294967295
 8012f16:	4841      	ldr	r0, [pc, #260]	@ (801301c <LoRaMacInitialization+0x528>)
 8012f18:	f00b f9be 	bl	801e298 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8012f1c:	2300      	movs	r3, #0
 8012f1e:	9300      	str	r3, [sp, #0]
 8012f20:	4b3f      	ldr	r3, [pc, #252]	@ (8013020 <LoRaMacInitialization+0x52c>)
 8012f22:	2200      	movs	r2, #0
 8012f24:	f04f 31ff 	mov.w	r1, #4294967295
 8012f28:	483e      	ldr	r0, [pc, #248]	@ (8013024 <LoRaMacInitialization+0x530>)
 8012f2a:	f00b f9b5 	bl	801e298 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8012f2e:	2300      	movs	r3, #0
 8012f30:	9300      	str	r3, [sp, #0]
 8012f32:	4b3d      	ldr	r3, [pc, #244]	@ (8013028 <LoRaMacInitialization+0x534>)
 8012f34:	2200      	movs	r2, #0
 8012f36:	f04f 31ff 	mov.w	r1, #4294967295
 8012f3a:	483c      	ldr	r0, [pc, #240]	@ (801302c <LoRaMacInitialization+0x538>)
 8012f3c:	f00b f9ac 	bl	801e298 <UTIL_TIMER_Create>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
 8012f40:	2300      	movs	r3, #0
 8012f42:	9300      	str	r3, [sp, #0]
 8012f44:	4b3a      	ldr	r3, [pc, #232]	@ (8013030 <LoRaMacInitialization+0x53c>)
 8012f46:	2200      	movs	r2, #0
 8012f48:	f04f 31ff 	mov.w	r1, #4294967295
 8012f4c:	4839      	ldr	r0, [pc, #228]	@ (8013034 <LoRaMacInitialization+0x540>)
 8012f4e:	f00b f9a3 	bl	801e298 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.Rejoin1CycleTimer, OnRejoin1CycleTimerEvent );
    TimerInit( &MacCtx.ForceRejoinReqCycleTimer, OnForceRejoinReqCycleTimerEvent );
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 8012f52:	4c2f      	ldr	r4, [pc, #188]	@ (8013010 <LoRaMacInitialization+0x51c>)
 8012f54:	463b      	mov	r3, r7
 8012f56:	4618      	mov	r0, r3
 8012f58:	f00a fd14 	bl	801d984 <SysTimeGetMcuTime>
 8012f5c:	f504 7392 	add.w	r3, r4, #292	@ 0x124
 8012f60:	463a      	mov	r2, r7
 8012f62:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012f66:	e883 0003 	stmia.w	r3, {r0, r1}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
 8012f6a:	4b33      	ldr	r3, [pc, #204]	@ (8013038 <LoRaMacInitialization+0x544>)
 8012f6c:	2200      	movs	r2, #0
 8012f6e:	601a      	str	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 8012f70:	4b28      	ldr	r3, [pc, #160]	@ (8013014 <LoRaMacInitialization+0x520>)
 8012f72:	4a32      	ldr	r2, [pc, #200]	@ (801303c <LoRaMacInitialization+0x548>)
 8012f74:	f8c3 234c 	str.w	r2, [r3, #844]	@ 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 8012f78:	4b26      	ldr	r3, [pc, #152]	@ (8013014 <LoRaMacInitialization+0x520>)
 8012f7a:	4a31      	ldr	r2, [pc, #196]	@ (8013040 <LoRaMacInitialization+0x54c>)
 8012f7c:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 8012f80:	4b24      	ldr	r3, [pc, #144]	@ (8013014 <LoRaMacInitialization+0x520>)
 8012f82:	4a30      	ldr	r2, [pc, #192]	@ (8013044 <LoRaMacInitialization+0x550>)
 8012f84:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8012f88:	4b22      	ldr	r3, [pc, #136]	@ (8013014 <LoRaMacInitialization+0x520>)
 8012f8a:	4a2f      	ldr	r2, [pc, #188]	@ (8013048 <LoRaMacInitialization+0x554>)
 8012f8c:	f8c3 2350 	str.w	r2, [r3, #848]	@ 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 8012f90:	4b20      	ldr	r3, [pc, #128]	@ (8013014 <LoRaMacInitialization+0x520>)
 8012f92:	4a2e      	ldr	r2, [pc, #184]	@ (801304c <LoRaMacInitialization+0x558>)
 8012f94:	f8c3 2358 	str.w	r2, [r3, #856]	@ 0x358
    Radio.Init( &MacCtx.RadioEvents );
 8012f98:	4b2d      	ldr	r3, [pc, #180]	@ (8013050 <LoRaMacInitialization+0x55c>)
 8012f9a:	681b      	ldr	r3, [r3, #0]
 8012f9c:	482d      	ldr	r0, [pc, #180]	@ (8013054 <LoRaMacInitialization+0x560>)
 8012f9e:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement ) != SECURE_ELEMENT_SUCCESS )
 8012fa0:	482d      	ldr	r0, [pc, #180]	@ (8013058 <LoRaMacInitialization+0x564>)
 8012fa2:	f7fa f9ed 	bl	800d380 <SecureElementInit>
 8012fa6:	4603      	mov	r3, r0
 8012fa8:	2b00      	cmp	r3, #0
 8012faa:	d001      	beq.n	8012fb0 <LoRaMacInitialization+0x4bc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8012fac:	2311      	movs	r3, #17
 8012fae:	e02b      	b.n	8013008 <LoRaMacInitialization+0x514>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 8012fb0:	4817      	ldr	r0, [pc, #92]	@ (8013010 <LoRaMacInitialization+0x51c>)
 8012fb2:	f002 fbc1 	bl	8015738 <LoRaMacCryptoInit>
 8012fb6:	4603      	mov	r3, r0
 8012fb8:	2b00      	cmp	r3, #0
 8012fba:	d001      	beq.n	8012fc0 <LoRaMacInitialization+0x4cc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8012fbc:	2311      	movs	r3, #17
 8012fbe:	e023      	b.n	8013008 <LoRaMacInitialization+0x514>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 8012fc0:	f001 fcbc 	bl	801493c <LoRaMacCommandsInit>
 8012fc4:	4603      	mov	r3, r0
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	d001      	beq.n	8012fce <LoRaMacInitialization+0x4da>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012fca:	2313      	movs	r3, #19
 8012fcc:	e01c      	b.n	8013008 <LoRaMacInitialization+0x514>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 8012fce:	4823      	ldr	r0, [pc, #140]	@ (801305c <LoRaMacInitialization+0x568>)
 8012fd0:	f002 fc52 	bl	8015878 <LoRaMacCryptoSetMulticastReference>
 8012fd4:	4603      	mov	r3, r0
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	d001      	beq.n	8012fde <LoRaMacInitialization+0x4ea>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8012fda:	2311      	movs	r3, #17
 8012fdc:	e014      	b.n	8013008 <LoRaMacInitialization+0x514>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 8012fde:	4b1c      	ldr	r3, [pc, #112]	@ (8013050 <LoRaMacInitialization+0x55c>)
 8012fe0:	695b      	ldr	r3, [r3, #20]
 8012fe2:	4798      	blx	r3
 8012fe4:	4603      	mov	r3, r0
 8012fe6:	4618      	mov	r0, r3
 8012fe8:	f007 f83e 	bl	801a068 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8012fec:	4b18      	ldr	r3, [pc, #96]	@ (8013050 <LoRaMacInitialization+0x55c>)
 8012fee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012ff0:	4a07      	ldr	r2, [pc, #28]	@ (8013010 <LoRaMacInitialization+0x51c>)
 8012ff2:	f892 2119 	ldrb.w	r2, [r2, #281]	@ 0x119
 8012ff6:	4610      	mov	r0, r2
 8012ff8:	4798      	blx	r3
    Radio.Sleep( );
 8012ffa:	4b15      	ldr	r3, [pc, #84]	@ (8013050 <LoRaMacInitialization+0x55c>)
 8012ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012ffe:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8013000:	2001      	movs	r0, #1
 8013002:	f7fd fa71 	bl	80104e8 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 8013006:	2300      	movs	r3, #0
}
 8013008:	4618      	mov	r0, r3
 801300a:	373c      	adds	r7, #60	@ 0x3c
 801300c:	46bd      	mov	sp, r7
 801300e:	bd90      	pop	{r4, r7, pc}
 8013010:	20000bfc 	.word	0x20000bfc
 8013014:	200006e0 	.word	0x200006e0
 8013018:	08010a75 	.word	0x08010a75
 801301c:	20000a48 	.word	0x20000a48
 8013020:	08010b05 	.word	0x08010b05
 8013024:	20000a60 	.word	0x20000a60
 8013028:	08010b7d 	.word	0x08010b7d
 801302c:	20000a78 	.word	0x20000a78
 8013030:	08010bfd 	.word	0x08010bfd
 8013034:	20000ae0 	.word	0x20000ae0
 8013038:	20001824 	.word	0x20001824
 801303c:	0800f525 	.word	0x0800f525
 8013040:	0800f581 	.word	0x0800f581
 8013044:	0800f621 	.word	0x0800f621
 8013048:	0800f5f5 	.word	0x0800f5f5
 801304c:	0800f63d 	.word	0x0800f63d
 8013050:	0801fccc 	.word	0x0801fccc
 8013054:	20000a2c 	.word	0x20000a2c
 8013058:	20000d48 	.word	0x20000d48
 801305c:	20000ce4 	.word	0x20000ce4

08013060 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 8013060:	b580      	push	{r7, lr}
 8013062:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 8013064:	4b04      	ldr	r3, [pc, #16]	@ (8013078 <LoRaMacStart+0x18>)
 8013066:	2200      	movs	r2, #0
 8013068:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
    UpdateRxSlotIdleState();
 801306c:	f7fc fafc 	bl	800f668 <UpdateRxSlotIdleState>
    return LORAMAC_STATUS_OK;
 8013070:	2300      	movs	r3, #0
}
 8013072:	4618      	mov	r0, r3
 8013074:	bd80      	pop	{r7, pc}
 8013076:	bf00      	nop
 8013078:	200006e0 	.word	0x200006e0

0801307c <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 801307c:	b580      	push	{r7, lr}
 801307e:	af00      	add	r7, sp, #0
    if( LoRaMacIsBusy( ) == false )
 8013080:	f7fd f9fa 	bl	8010478 <LoRaMacIsBusy>
 8013084:	4603      	mov	r3, r0
 8013086:	f083 0301 	eor.w	r3, r3, #1
 801308a:	b2db      	uxtb	r3, r3
 801308c:	2b00      	cmp	r3, #0
 801308e:	d00d      	beq.n	80130ac <LoRaMacStop+0x30>
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8013090:	4b0b      	ldr	r3, [pc, #44]	@ (80130c0 <LoRaMacStop+0x44>)
 8013092:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8013096:	2b02      	cmp	r3, #2
 8013098:	d102      	bne.n	80130a0 <LoRaMacStop+0x24>
        {
            Radio.Sleep( );
 801309a:	4b0a      	ldr	r3, [pc, #40]	@ (80130c4 <LoRaMacStop+0x48>)
 801309c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801309e:	4798      	blx	r3
        }
        MacCtx.MacState = LORAMAC_STOPPED;
 80130a0:	4b09      	ldr	r3, [pc, #36]	@ (80130c8 <LoRaMacStop+0x4c>)
 80130a2:	2201      	movs	r2, #1
 80130a4:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
        return LORAMAC_STATUS_OK;
 80130a8:	2300      	movs	r3, #0
 80130aa:	e007      	b.n	80130bc <LoRaMacStop+0x40>
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 80130ac:	4b06      	ldr	r3, [pc, #24]	@ (80130c8 <LoRaMacStop+0x4c>)
 80130ae:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80130b2:	2b01      	cmp	r3, #1
 80130b4:	d101      	bne.n	80130ba <LoRaMacStop+0x3e>
    {
        return LORAMAC_STATUS_OK;
 80130b6:	2300      	movs	r3, #0
 80130b8:	e000      	b.n	80130bc <LoRaMacStop+0x40>
    }
    return LORAMAC_STATUS_BUSY;
 80130ba:	2301      	movs	r3, #1
}
 80130bc:	4618      	mov	r0, r3
 80130be:	bd80      	pop	{r7, pc}
 80130c0:	20000bfc 	.word	0x20000bfc
 80130c4:	0801fccc 	.word	0x0801fccc
 80130c8:	200006e0 	.word	0x200006e0

080130cc <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 80130cc:	b580      	push	{r7, lr}
 80130ce:	af00      	add	r7, sp, #0
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 80130d0:	4812      	ldr	r0, [pc, #72]	@ (801311c <LoRaMacHalt+0x50>)
 80130d2:	f00b f985 	bl	801e3e0 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 80130d6:	4812      	ldr	r0, [pc, #72]	@ (8013120 <LoRaMacHalt+0x54>)
 80130d8:	f00b f982 	bl	801e3e0 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 80130dc:	4811      	ldr	r0, [pc, #68]	@ (8013124 <LoRaMacHalt+0x58>)
 80130de:	f00b f97f 	bl	801e3e0 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 80130e2:	4811      	ldr	r0, [pc, #68]	@ (8013128 <LoRaMacHalt+0x5c>)
 80130e4:	f00b f97c 	bl	801e3e0 <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 80130e8:	f001 fa8c 	bl	8014604 <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 80130ec:	4b0f      	ldr	r3, [pc, #60]	@ (801312c <LoRaMacHalt+0x60>)
 80130ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80130f0:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 80130f2:	4b0f      	ldr	r3, [pc, #60]	@ (8013130 <LoRaMacHalt+0x64>)
 80130f4:	2200      	movs	r2, #0
 80130f6:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    LoRaMacHandleNvm( &Nvm );
 80130fa:	480e      	ldr	r0, [pc, #56]	@ (8013134 <LoRaMacHalt+0x68>)
 80130fc:	f7fd fb96 	bl	801082c <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 8013100:	f240 52cc 	movw	r2, #1484	@ 0x5cc
 8013104:	490b      	ldr	r1, [pc, #44]	@ (8013134 <LoRaMacHalt+0x68>)
 8013106:	480c      	ldr	r0, [pc, #48]	@ (8013138 <LoRaMacHalt+0x6c>)
 8013108:	f006 ffd3 	bl	801a0b2 <memcpy1>
#endif /* CONTEXT_MANAGEMENT_ENABLED */

    MacCtx.MacState = LORAMAC_STOPPED;
 801310c:	4b08      	ldr	r3, [pc, #32]	@ (8013130 <LoRaMacHalt+0x64>)
 801310e:	2201      	movs	r2, #1
 8013110:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    return LORAMAC_STATUS_OK;
 8013114:	2300      	movs	r3, #0
}
 8013116:	4618      	mov	r0, r3
 8013118:	bd80      	pop	{r7, pc}
 801311a:	bf00      	nop
 801311c:	20000a48 	.word	0x20000a48
 8013120:	20000a60 	.word	0x20000a60
 8013124:	20000a78 	.word	0x20000a78
 8013128:	20000ae0 	.word	0x20000ae0
 801312c:	0801fccc 	.word	0x0801fccc
 8013130:	200006e0 	.word	0x200006e0
 8013134:	20000bfc 	.word	0x20000bfc
 8013138:	200011c8 	.word	0x200011c8

0801313c <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 801313c:	b590      	push	{r4, r7, lr}
 801313e:	b08d      	sub	sp, #52	@ 0x34
 8013140:	af02      	add	r7, sp, #8
 8013142:	4603      	mov	r3, r0
 8013144:	6039      	str	r1, [r7, #0]
 8013146:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8013148:	4b42      	ldr	r3, [pc, #264]	@ (8013254 <LoRaMacQueryTxPossible+0x118>)
 801314a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801314c:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 801314e:	4b41      	ldr	r3, [pc, #260]	@ (8013254 <LoRaMacQueryTxPossible+0x118>)
 8013150:	f993 30dd 	ldrsb.w	r3, [r3, #221]	@ 0xdd
 8013154:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8013156:	4b3f      	ldr	r3, [pc, #252]	@ (8013254 <LoRaMacQueryTxPossible+0x118>)
 8013158:	f993 30dc 	ldrsb.w	r3, [r3, #220]	@ 0xdc
 801315c:	73bb      	strb	r3, [r7, #14]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
 801315e:	4b3e      	ldr	r3, [pc, #248]	@ (8013258 <LoRaMacQueryTxPossible+0x11c>)
 8013160:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8013164:	737b      	strb	r3, [r7, #13]
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 8013166:	2300      	movs	r3, #0
 8013168:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 801316a:	683b      	ldr	r3, [r7, #0]
 801316c:	2b00      	cmp	r3, #0
 801316e:	d101      	bne.n	8013174 <LoRaMacQueryTxPossible+0x38>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013170:	2303      	movs	r3, #3
 8013172:	e06b      	b.n	801324c <LoRaMacQueryTxPossible+0x110>

    // Setup ADR request
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 8013174:	2300      	movs	r3, #0
 8013176:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8013178:	4b36      	ldr	r3, [pc, #216]	@ (8013254 <LoRaMacQueryTxPossible+0x118>)
 801317a:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 801317e:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8013180:	4b34      	ldr	r3, [pc, #208]	@ (8013254 <LoRaMacQueryTxPossible+0x118>)
 8013182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013184:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 8013186:	4b33      	ldr	r3, [pc, #204]	@ (8013254 <LoRaMacQueryTxPossible+0x118>)
 8013188:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 801318c:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 801318e:	4b31      	ldr	r3, [pc, #196]	@ (8013254 <LoRaMacQueryTxPossible+0x118>)
 8013190:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 8013194:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8013196:	4b2f      	ldr	r3, [pc, #188]	@ (8013254 <LoRaMacQueryTxPossible+0x118>)
 8013198:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 801319c:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80131a0:	4b2c      	ldr	r3, [pc, #176]	@ (8013254 <LoRaMacQueryTxPossible+0x118>)
 80131a2:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 80131a6:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
 80131aa:	4b2b      	ldr	r3, [pc, #172]	@ (8013258 <LoRaMacQueryTxPossible+0x11c>)
 80131ac:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 80131b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80131b4:	4b27      	ldr	r3, [pc, #156]	@ (8013254 <LoRaMacQueryTxPossible+0x118>)
 80131b6:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80131ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 80131be:	4b25      	ldr	r3, [pc, #148]	@ (8013254 <LoRaMacQueryTxPossible+0x118>)
 80131c0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80131c4:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 80131c8:	f107 040d 	add.w	r4, r7, #13
 80131cc:	f107 020e 	add.w	r2, r7, #14
 80131d0:	f107 010f 	add.w	r1, r7, #15
 80131d4:	f107 0014 	add.w	r0, r7, #20
 80131d8:	f107 0310 	add.w	r3, r7, #16
 80131dc:	9300      	str	r3, [sp, #0]
 80131de:	4623      	mov	r3, r4
 80131e0:	f001 f8da 	bl	8014398 <LoRaMacAdrCalcNext>
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 80131e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80131e8:	4618      	mov	r0, r3
 80131ea:	f7fd fe4d 	bl	8010e88 <GetMaxAppPayloadWithoutFOptsLength>
 80131ee:	4603      	mov	r3, r0
 80131f0:	461a      	mov	r2, r3
 80131f2:	683b      	ldr	r3, [r7, #0]
 80131f4:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80131f6:	f107 0308 	add.w	r3, r7, #8
 80131fa:	4618      	mov	r0, r3
 80131fc:	f001 fca4 	bl	8014b48 <LoRaMacCommandsGetSizeSerializedCmds>
 8013200:	4603      	mov	r3, r0
 8013202:	2b00      	cmp	r3, #0
 8013204:	d001      	beq.n	801320a <LoRaMacQueryTxPossible+0xce>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013206:	2313      	movs	r3, #19
 8013208:	e020      	b.n	801324c <LoRaMacQueryTxPossible+0x110>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 801320a:	68bb      	ldr	r3, [r7, #8]
 801320c:	2b0f      	cmp	r3, #15
 801320e:	d819      	bhi.n	8013244 <LoRaMacQueryTxPossible+0x108>
 8013210:	683b      	ldr	r3, [r7, #0]
 8013212:	785b      	ldrb	r3, [r3, #1]
 8013214:	461a      	mov	r2, r3
 8013216:	68bb      	ldr	r3, [r7, #8]
 8013218:	429a      	cmp	r2, r3
 801321a:	d313      	bcc.n	8013244 <LoRaMacQueryTxPossible+0x108>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 801321c:	683b      	ldr	r3, [r7, #0]
 801321e:	785a      	ldrb	r2, [r3, #1]
 8013220:	68bb      	ldr	r3, [r7, #8]
 8013222:	b2db      	uxtb	r3, r3
 8013224:	1ad3      	subs	r3, r2, r3
 8013226:	b2da      	uxtb	r2, r3
 8013228:	683b      	ldr	r3, [r7, #0]
 801322a:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 801322c:	683b      	ldr	r3, [r7, #0]
 801322e:	785b      	ldrb	r3, [r3, #1]
 8013230:	4619      	mov	r1, r3
 8013232:	79fa      	ldrb	r2, [r7, #7]
 8013234:	68bb      	ldr	r3, [r7, #8]
 8013236:	4413      	add	r3, r2
 8013238:	4299      	cmp	r1, r3
 801323a:	d301      	bcc.n	8013240 <LoRaMacQueryTxPossible+0x104>
        {
            return LORAMAC_STATUS_OK;
 801323c:	2300      	movs	r3, #0
 801323e:	e005      	b.n	801324c <LoRaMacQueryTxPossible+0x110>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 8013240:	2308      	movs	r3, #8
 8013242:	e003      	b.n	801324c <LoRaMacQueryTxPossible+0x110>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 8013244:	683b      	ldr	r3, [r7, #0]
 8013246:	2200      	movs	r2, #0
 8013248:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 801324a:	2308      	movs	r3, #8
    }
}
 801324c:	4618      	mov	r0, r3
 801324e:	372c      	adds	r7, #44	@ 0x2c
 8013250:	46bd      	mov	sp, r7
 8013252:	bd90      	pop	{r4, r7, pc}
 8013254:	20000bfc 	.word	0x20000bfc
 8013258:	200006e0 	.word	0x200006e0

0801325c <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 801325c:	b590      	push	{r4, r7, lr}
 801325e:	b087      	sub	sp, #28
 8013260:	af00      	add	r7, sp, #0
 8013262:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8013264:	2300      	movs	r3, #0
 8013266:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	2b00      	cmp	r3, #0
 801326c:	d101      	bne.n	8013272 <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801326e:	2303      	movs	r3, #3
 8013270:	e1c4      	b.n	80135fc <LoRaMacMibGetRequestConfirm+0x3a0>
    }

    switch( mibGet->Type )
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	781b      	ldrb	r3, [r3, #0]
 8013276:	2b41      	cmp	r3, #65	@ 0x41
 8013278:	f200 81b9 	bhi.w	80135ee <LoRaMacMibGetRequestConfirm+0x392>
 801327c:	a201      	add	r2, pc, #4	@ (adr r2, 8013284 <LoRaMacMibGetRequestConfirm+0x28>)
 801327e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013282:	bf00      	nop
 8013284:	0801338d 	.word	0x0801338d
 8013288:	08013399 	.word	0x08013399
 801328c:	080133a5 	.word	0x080133a5
 8013290:	080133b1 	.word	0x080133b1
 8013294:	080133bd 	.word	0x080133bd
 8013298:	080133c9 	.word	0x080133c9
 801329c:	080133d5 	.word	0x080133d5
 80132a0:	080135ef 	.word	0x080135ef
 80132a4:	080135ef 	.word	0x080135ef
 80132a8:	080135ef 	.word	0x080135ef
 80132ac:	080135ef 	.word	0x080135ef
 80132b0:	080135ef 	.word	0x080135ef
 80132b4:	080135ef 	.word	0x080135ef
 80132b8:	080135ef 	.word	0x080135ef
 80132bc:	080135ef 	.word	0x080135ef
 80132c0:	080133e9 	.word	0x080133e9
 80132c4:	080133f5 	.word	0x080133f5
 80132c8:	08013401 	.word	0x08013401
 80132cc:	08013423 	.word	0x08013423
 80132d0:	08013435 	.word	0x08013435
 80132d4:	08013447 	.word	0x08013447
 80132d8:	08013459 	.word	0x08013459
 80132dc:	0801348d 	.word	0x0801348d
 80132e0:	0801346b 	.word	0x0801346b
 80132e4:	080134af 	.word	0x080134af
 80132e8:	080134bb 	.word	0x080134bb
 80132ec:	080134c5 	.word	0x080134c5
 80132f0:	080134cf 	.word	0x080134cf
 80132f4:	080134d9 	.word	0x080134d9
 80132f8:	080134e3 	.word	0x080134e3
 80132fc:	080134ed 	.word	0x080134ed
 8013300:	08013519 	.word	0x08013519
 8013304:	08013525 	.word	0x08013525
 8013308:	0801353d 	.word	0x0801353d
 801330c:	08013531 	.word	0x08013531
 8013310:	08013549 	.word	0x08013549
 8013314:	08013553 	.word	0x08013553
 8013318:	0801355f 	.word	0x0801355f
 801331c:	0801357b 	.word	0x0801357b
 8013320:	0801356b 	.word	0x0801356b
 8013324:	08013573 	.word	0x08013573
 8013328:	080135ef 	.word	0x080135ef
 801332c:	08013587 	.word	0x08013587
 8013330:	080135ef 	.word	0x080135ef
 8013334:	080135ef 	.word	0x080135ef
 8013338:	080135ef 	.word	0x080135ef
 801333c:	080135ef 	.word	0x080135ef
 8013340:	080135ef 	.word	0x080135ef
 8013344:	080135ef 	.word	0x080135ef
 8013348:	080135ef 	.word	0x080135ef
 801334c:	080135ef 	.word	0x080135ef
 8013350:	080135ef 	.word	0x080135ef
 8013354:	080135ef 	.word	0x080135ef
 8013358:	080135ef 	.word	0x080135ef
 801335c:	080135ef 	.word	0x080135ef
 8013360:	080135ef 	.word	0x080135ef
 8013364:	080135ef 	.word	0x080135ef
 8013368:	080135ef 	.word	0x080135ef
 801336c:	0801359b 	.word	0x0801359b
 8013370:	080135a7 	.word	0x080135a7
 8013374:	080135b3 	.word	0x080135b3
 8013378:	080135bf 	.word	0x080135bf
 801337c:	080135cb 	.word	0x080135cb
 8013380:	080135d7 	.word	0x080135d7
 8013384:	080135e3 	.word	0x080135e3
 8013388:	080135e9 	.word	0x080135e9
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 801338c:	4b9d      	ldr	r3, [pc, #628]	@ (8013604 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801338e:	f893 2118 	ldrb.w	r2, [r3, #280]	@ 0x118
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	711a      	strb	r2, [r3, #4]
            break;
 8013396:	e130      	b.n	80135fa <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8013398:	4b9a      	ldr	r3, [pc, #616]	@ (8013604 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801339a:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	711a      	strb	r2, [r3, #4]
            break;
 80133a2:	e12a      	b.n	80135fa <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEV_EUI:
        {
            SecureElementGetDevEui( mibGet->Param.DevEui );
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	685b      	ldr	r3, [r3, #4]
 80133a8:	4618      	mov	r0, r3
 80133aa:	f7fa faa9 	bl	800d900 <SecureElementGetDevEui>
            break;
 80133ae:	e124      	b.n	80135fa <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_EUI:
        {
             SecureElementGetJoinEui( mibGet->Param.JoinEui );
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	685b      	ldr	r3, [r3, #4]
 80133b4:	4618      	mov	r0, r3
 80133b6:	f7fa fad3 	bl	800d960 <SecureElementGetJoinEui>
            break;
 80133ba:	e11e      	b.n	80135fa <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 80133bc:	4b91      	ldr	r3, [pc, #580]	@ (8013604 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80133be:	f893 211a 	ldrb.w	r2, [r3, #282]	@ 0x11a
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	711a      	strb	r2, [r3, #4]
            break;
 80133c6:	e118      	b.n	80135fa <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 80133c8:	4b8e      	ldr	r3, [pc, #568]	@ (8013604 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80133ca:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	605a      	str	r2, [r3, #4]
            break;
 80133d2:	e112      	b.n	80135fa <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEV_ADDR:
        {
            SecureElementGetDevAddr( Nvm.MacGroup2.NetworkActivation, &mibGet->Param.DevAddr );
 80133d4:	4b8b      	ldr	r3, [pc, #556]	@ (8013604 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80133d6:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	3304      	adds	r3, #4
 80133de:	4619      	mov	r1, r3
 80133e0:	4610      	mov	r0, r2
 80133e2:	f7fa faef 	bl	800d9c4 <SecureElementGetDevAddr>
            break;
 80133e6:	e108      	b.n	80135fa <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 80133e8:	4b86      	ldr	r3, [pc, #536]	@ (8013604 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80133ea:	f893 2119 	ldrb.w	r2, [r3, #281]	@ 0x119
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	711a      	strb	r2, [r3, #4]
            break;
 80133f2:	e102      	b.n	80135fa <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 80133f4:	4b83      	ldr	r3, [pc, #524]	@ (8013604 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80133f6:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	711a      	strb	r2, [r3, #4]
            break;
 80133fe:	e0fc      	b.n	80135fa <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 8013400:	231c      	movs	r3, #28
 8013402:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013404:	4b7f      	ldr	r3, [pc, #508]	@ (8013604 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013406:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801340a:	f107 0210 	add.w	r2, r7, #16
 801340e:	4611      	mov	r1, r2
 8013410:	4618      	mov	r0, r3
 8013412:	f003 f84f 	bl	80164b4 <RegionGetPhyParam>
 8013416:	4603      	mov	r3, r0
 8013418:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 801341a:	68fa      	ldr	r2, [r7, #12]
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	605a      	str	r2, [r3, #4]
            break;
 8013420:	e0eb      	b.n	80135fa <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	4a77      	ldr	r2, [pc, #476]	@ (8013604 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013426:	3304      	adds	r3, #4
 8013428:	326c      	adds	r2, #108	@ 0x6c
 801342a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801342e:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8013432:	e0e2      	b.n	80135fa <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	4a73      	ldr	r2, [pc, #460]	@ (8013604 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013438:	3304      	adds	r3, #4
 801343a:	32b4      	adds	r2, #180	@ 0xb4
 801343c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013440:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8013444:	e0d9      	b.n	80135fa <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	4a6e      	ldr	r2, [pc, #440]	@ (8013604 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801344a:	3304      	adds	r3, #4
 801344c:	3274      	adds	r2, #116	@ 0x74
 801344e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013452:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8013456:	e0d0      	b.n	80135fa <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	4a6a      	ldr	r2, [pc, #424]	@ (8013604 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801345c:	3304      	adds	r3, #4
 801345e:	32bc      	adds	r2, #188	@ 0xbc
 8013460:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013464:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8013468:	e0c7      	b.n	80135fa <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 801346a:	231a      	movs	r3, #26
 801346c:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801346e:	4b65      	ldr	r3, [pc, #404]	@ (8013604 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013470:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013474:	f107 0210 	add.w	r2, r7, #16
 8013478:	4611      	mov	r1, r2
 801347a:	4618      	mov	r0, r3
 801347c:	f003 f81a 	bl	80164b4 <RegionGetPhyParam>
 8013480:	4603      	mov	r3, r0
 8013482:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 8013484:	68fa      	ldr	r2, [r7, #12]
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	605a      	str	r2, [r3, #4]
            break;
 801348a:	e0b6      	b.n	80135fa <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 801348c:	2319      	movs	r3, #25
 801348e:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013490:	4b5c      	ldr	r3, [pc, #368]	@ (8013604 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013492:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013496:	f107 0210 	add.w	r2, r7, #16
 801349a:	4611      	mov	r1, r2
 801349c:	4618      	mov	r0, r3
 801349e:	f003 f809 	bl	80164b4 <RegionGetPhyParam>
 80134a2:	4603      	mov	r3, r0
 80134a4:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 80134a6:	68fa      	ldr	r2, [r7, #12]
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	605a      	str	r2, [r3, #4]
            break;
 80134ac:	e0a5      	b.n	80135fa <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 80134ae:	4b55      	ldr	r3, [pc, #340]	@ (8013604 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80134b0:	f893 2068 	ldrb.w	r2, [r3, #104]	@ 0x68
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	711a      	strb	r2, [r3, #4]
            break;
 80134b8:	e09f      	b.n	80135fa <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 80134ba:	4b52      	ldr	r3, [pc, #328]	@ (8013604 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80134bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	605a      	str	r2, [r3, #4]
            break;
 80134c2:	e09a      	b.n	80135fa <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 80134c4:	4b4f      	ldr	r3, [pc, #316]	@ (8013604 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80134c6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	605a      	str	r2, [r3, #4]
            break;
 80134cc:	e095      	b.n	80135fa <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 80134ce:	4b4d      	ldr	r3, [pc, #308]	@ (8013604 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80134d0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	605a      	str	r2, [r3, #4]
            break;
 80134d6:	e090      	b.n	80135fa <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 80134d8:	4b4a      	ldr	r3, [pc, #296]	@ (8013604 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80134da:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	605a      	str	r2, [r3, #4]
            break;
 80134e0:	e08b      	b.n	80135fa <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 80134e2:	4b48      	ldr	r3, [pc, #288]	@ (8013604 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80134e4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	605a      	str	r2, [r3, #4]
            break;
 80134ea:	e086      	b.n	80135fa <LoRaMacMibGetRequestConfirm+0x39e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_CHANNELS_MIN_TX_DATARATE:
        {
            getPhy.Attribute = PHY_MIN_TX_DR;
 80134ec:	2302      	movs	r3, #2
 80134ee:	743b      	strb	r3, [r7, #16]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80134f0:	4b44      	ldr	r3, [pc, #272]	@ (8013604 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80134f2:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80134f6:	74bb      	strb	r3, [r7, #18]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80134f8:	4b42      	ldr	r3, [pc, #264]	@ (8013604 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80134fa:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80134fe:	f107 0210 	add.w	r2, r7, #16
 8013502:	4611      	mov	r1, r2
 8013504:	4618      	mov	r0, r3
 8013506:	f002 ffd5 	bl	80164b4 <RegionGetPhyParam>
 801350a:	4603      	mov	r3, r0
 801350c:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMinTxDatarate = phyParam.Value;
 801350e:	68fb      	ldr	r3, [r7, #12]
 8013510:	b25a      	sxtb	r2, r3
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	711a      	strb	r2, [r3, #4]
            break;
 8013516:	e070      	b.n	80135fa <LoRaMacMibGetRequestConfirm+0x39e>
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8013518:	4b3a      	ldr	r3, [pc, #232]	@ (8013604 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801351a:	f993 20dd 	ldrsb.w	r2, [r3, #221]	@ 0xdd
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	711a      	strb	r2, [r3, #4]
            break;
 8013522:	e06a      	b.n	80135fa <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8013524:	4b37      	ldr	r3, [pc, #220]	@ (8013604 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013526:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	711a      	strb	r2, [r3, #4]
            break;
 801352e:	e064      	b.n	80135fa <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8013530:	4b34      	ldr	r3, [pc, #208]	@ (8013604 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013532:	f993 20dc 	ldrsb.w	r2, [r3, #220]	@ 0xdc
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	711a      	strb	r2, [r3, #4]
            break;
 801353a:	e05e      	b.n	80135fa <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 801353c:	4b31      	ldr	r3, [pc, #196]	@ (8013604 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801353e:	f993 2038 	ldrsb.w	r2, [r3, #56]	@ 0x38
 8013542:	687b      	ldr	r3, [r7, #4]
 8013544:	711a      	strb	r2, [r3, #4]
            break;
 8013546:	e058      	b.n	80135fa <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 8013548:	4b2e      	ldr	r3, [pc, #184]	@ (8013604 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801354a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	605a      	str	r2, [r3, #4]
            break;
 8013550:	e053      	b.n	80135fa <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 8013552:	4b2c      	ldr	r3, [pc, #176]	@ (8013604 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013554:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	711a      	strb	r2, [r3, #4]
            break;
 801355c:	e04d      	b.n	80135fa <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 801355e:	4b29      	ldr	r3, [pc, #164]	@ (8013604 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013560:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	605a      	str	r2, [r3, #4]
            break;
 8013568:	e047      	b.n	80135fa <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	4a25      	ldr	r2, [pc, #148]	@ (8013604 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801356e:	605a      	str	r2, [r3, #4]
            break;
 8013570:	e043      	b.n	80135fa <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NVM_BKP_CTXS:
        {
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
            mibGet->Param.BackupContexts = &NvmBackup;
 8013572:	687b      	ldr	r3, [r7, #4]
 8013574:	4a24      	ldr	r2, [pc, #144]	@ (8013608 <LoRaMacMibGetRequestConfirm+0x3ac>)
 8013576:	605a      	str	r2, [r3, #4]
#else
            mibGet->Param.BackupContexts = NULL;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
            break;
 8013578:	e03f      	b.n	80135fa <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 801357a:	4b22      	ldr	r3, [pc, #136]	@ (8013604 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801357c:	f8d3 20cc 	ldr.w	r2, [r3, #204]	@ 0xcc
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	605a      	str	r2, [r3, #4]
            break;
 8013584:	e039      	b.n	80135fa <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	4a1e      	ldr	r2, [pc, #120]	@ (8013604 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801358a:	f8d2 212c 	ldr.w	r2, [r2, #300]	@ 0x12c
 801358e:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 8013590:	687c      	ldr	r4, [r7, #4]
 8013592:	f003 f99d 	bl	80168d0 <RegionGetVersion>
 8013596:	60a0      	str	r0, [r4, #8]
            break;
 8013598:	e02f      	b.n	80135fa <LoRaMacMibGetRequestConfirm+0x39e>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 801359a:	4b1a      	ldr	r3, [pc, #104]	@ (8013604 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801359c:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	605a      	str	r2, [r3, #4]
            break;
 80135a4:	e029      	b.n	80135fa <LoRaMacMibGetRequestConfirm+0x39e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_IS_CERT_FPORT_ON:
        {
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 80135a6:	4b17      	ldr	r3, [pc, #92]	@ (8013604 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80135a8:	f893 211f 	ldrb.w	r2, [r3, #287]	@ 0x11f
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	711a      	strb	r2, [r3, #4]
            break;
 80135b0:	e023      	b.n	80135fa <LoRaMacMibGetRequestConfirm+0x39e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 80135b2:	4b14      	ldr	r3, [pc, #80]	@ (8013604 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80135b4:	f8b3 2088 	ldrh.w	r2, [r3, #136]	@ 0x88
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	809a      	strh	r2, [r3, #4]
            break;
 80135bc:	e01d      	b.n	80135fa <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 80135be:	4b11      	ldr	r3, [pc, #68]	@ (8013604 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80135c0:	f8b3 208a 	ldrh.w	r2, [r3, #138]	@ 0x8a
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	809a      	strh	r2, [r3, #4]
            break;
 80135c8:	e017      	b.n	80135fa <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 80135ca:	4b0e      	ldr	r3, [pc, #56]	@ (8013604 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80135cc:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	@ 0xd0
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	809a      	strh	r2, [r3, #4]
            break;
 80135d4:	e011      	b.n	80135fa <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 80135d6:	4b0b      	ldr	r3, [pc, #44]	@ (8013604 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80135d8:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	@ 0xd2
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	809a      	strh	r2, [r3, #4]
            break;
 80135e0:	e00b      	b.n	80135fa <LoRaMacMibGetRequestConfirm+0x39e>
            else
            {
                mibGet->Param.RssiFreeThreshold = Nvm.RegionGroup2.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 80135e2:	2318      	movs	r3, #24
 80135e4:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 80135e6:	e008      	b.n	80135fa <LoRaMacMibGetRequestConfirm+0x39e>
            else
            {
                mibGet->Param.CarrierSenseTime = Nvm.RegionGroup2.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 80135e8:	2318      	movs	r3, #24
 80135ea:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 80135ec:	e005      	b.n	80135fa <LoRaMacMibGetRequestConfirm+0x39e>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 80135ee:	6878      	ldr	r0, [r7, #4]
 80135f0:	f001 f81f 	bl	8014632 <LoRaMacClassBMibGetRequestConfirm>
 80135f4:	4603      	mov	r3, r0
 80135f6:	75fb      	strb	r3, [r7, #23]
            break;
 80135f8:	bf00      	nop
        }
    }
    return status;
 80135fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80135fc:	4618      	mov	r0, r3
 80135fe:	371c      	adds	r7, #28
 8013600:	46bd      	mov	sp, r7
 8013602:	bd90      	pop	{r4, r7, pc}
 8013604:	20000bfc 	.word	0x20000bfc
 8013608:	200011c8 	.word	0x200011c8

0801360c <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 801360c:	b580      	push	{r7, lr}
 801360e:	b086      	sub	sp, #24
 8013610:	af00      	add	r7, sp, #0
 8013612:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8013614:	2300      	movs	r3, #0
 8013616:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	2b00      	cmp	r3, #0
 801361c:	d101      	bne.n	8013622 <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801361e:	2303      	movs	r3, #3
 8013620:	e396      	b.n	8013d50 <LoRaMacMibSetRequestConfirm+0x744>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8013622:	4bbd      	ldr	r3, [pc, #756]	@ (8013918 <LoRaMacMibSetRequestConfirm+0x30c>)
 8013624:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8013628:	f003 0302 	and.w	r3, r3, #2
 801362c:	2b00      	cmp	r3, #0
 801362e:	d001      	beq.n	8013634 <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8013630:	2301      	movs	r3, #1
 8013632:	e38d      	b.n	8013d50 <LoRaMacMibSetRequestConfirm+0x744>
    }

    switch( mibSet->Type )
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	781b      	ldrb	r3, [r3, #0]
 8013638:	2b41      	cmp	r3, #65	@ 0x41
 801363a:	f200 835d 	bhi.w	8013cf8 <LoRaMacMibSetRequestConfirm+0x6ec>
 801363e:	a201      	add	r2, pc, #4	@ (adr r2, 8013644 <LoRaMacMibSetRequestConfirm+0x38>)
 8013640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013644:	0801374d 	.word	0x0801374d
 8013648:	0801375d 	.word	0x0801375d
 801364c:	08013777 	.word	0x08013777
 8013650:	0801378f 	.word	0x0801378f
 8013654:	080137a7 	.word	0x080137a7
 8013658:	080137b3 	.word	0x080137b3
 801365c:	080137bf 	.word	0x080137bf
 8013660:	080137e9 	.word	0x080137e9
 8013664:	0801380f 	.word	0x0801380f
 8013668:	08013835 	.word	0x08013835
 801366c:	0801385b 	.word	0x0801385b
 8013670:	08013881 	.word	0x08013881
 8013674:	080138a7 	.word	0x080138a7
 8013678:	080138cd 	.word	0x080138cd
 801367c:	080138f3 	.word	0x080138f3
 8013680:	08013921 	.word	0x08013921
 8013684:	08013941 	.word	0x08013941
 8013688:	08013cf9 	.word	0x08013cf9
 801368c:	0801394d 	.word	0x0801394d
 8013690:	080139bd 	.word	0x080139bd
 8013694:	080139fd 	.word	0x080139fd
 8013698:	08013a5f 	.word	0x08013a5f
 801369c:	08013acf 	.word	0x08013acf
 80136a0:	08013a9f 	.word	0x08013a9f
 80136a4:	08013aff 	.word	0x08013aff
 80136a8:	08013b21 	.word	0x08013b21
 80136ac:	08013b2b 	.word	0x08013b2b
 80136b0:	08013b35 	.word	0x08013b35
 80136b4:	08013b3f 	.word	0x08013b3f
 80136b8:	08013b49 	.word	0x08013b49
 80136bc:	08013cf9 	.word	0x08013cf9
 80136c0:	08013b53 	.word	0x08013b53
 80136c4:	08013b85 	.word	0x08013b85
 80136c8:	08013bf9 	.word	0x08013bf9
 80136cc:	08013bbf 	.word	0x08013bbf
 80136d0:	08013c2b 	.word	0x08013c2b
 80136d4:	08013c41 	.word	0x08013c41
 80136d8:	08013c59 	.word	0x08013c59
 80136dc:	08013c65 	.word	0x08013c65
 80136e0:	08013c71 	.word	0x08013c71
 80136e4:	08013cf9 	.word	0x08013cf9
 80136e8:	08013c7b 	.word	0x08013c7b
 80136ec:	08013cf9 	.word	0x08013cf9
 80136f0:	08013cf9 	.word	0x08013cf9
 80136f4:	08013cf9 	.word	0x08013cf9
 80136f8:	08013cf9 	.word	0x08013cf9
 80136fc:	08013cf9 	.word	0x08013cf9
 8013700:	08013cf9 	.word	0x08013cf9
 8013704:	08013cf9 	.word	0x08013cf9
 8013708:	08013cf9 	.word	0x08013cf9
 801370c:	08013cf9 	.word	0x08013cf9
 8013710:	08013cf9 	.word	0x08013cf9
 8013714:	08013cf9 	.word	0x08013cf9
 8013718:	08013cf9 	.word	0x08013cf9
 801371c:	08013cf9 	.word	0x08013cf9
 8013720:	08013cf9 	.word	0x08013cf9
 8013724:	08013cf9 	.word	0x08013cf9
 8013728:	08013cf9 	.word	0x08013cf9
 801372c:	08013ca5 	.word	0x08013ca5
 8013730:	08013cb1 	.word	0x08013cb1
 8013734:	08013cbd 	.word	0x08013cbd
 8013738:	08013cc9 	.word	0x08013cc9
 801373c:	08013cd5 	.word	0x08013cd5
 8013740:	08013ce1 	.word	0x08013ce1
 8013744:	08013ced 	.word	0x08013ced
 8013748:	08013cf3 	.word	0x08013cf3
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	791b      	ldrb	r3, [r3, #4]
 8013750:	4618      	mov	r0, r3
 8013752:	f7fd faaf 	bl	8010cb4 <SwitchClass>
 8013756:	4603      	mov	r3, r0
 8013758:	75fb      	strb	r3, [r7, #23]
            break;
 801375a:	e2ee      	b.n	8013d3a <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	791b      	ldrb	r3, [r3, #4]
 8013760:	2b02      	cmp	r3, #2
 8013762:	d005      	beq.n	8013770 <LoRaMacMibSetRequestConfirm+0x164>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	791a      	ldrb	r2, [r3, #4]
 8013768:	4b6c      	ldr	r3, [pc, #432]	@ (801391c <LoRaMacMibSetRequestConfirm+0x310>)
 801376a:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801376e:	e2e4      	b.n	8013d3a <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013770:	2303      	movs	r3, #3
 8013772:	75fb      	strb	r3, [r7, #23]
            break;
 8013774:	e2e1      	b.n	8013d3a <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 8013776:	687b      	ldr	r3, [r7, #4]
 8013778:	685b      	ldr	r3, [r3, #4]
 801377a:	4618      	mov	r0, r3
 801377c:	f7fa f8a8 	bl	800d8d0 <SecureElementSetDevEui>
 8013780:	4603      	mov	r3, r0
 8013782:	2b00      	cmp	r3, #0
 8013784:	f000 82be 	beq.w	8013d04 <LoRaMacMibSetRequestConfirm+0x6f8>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013788:	2303      	movs	r3, #3
 801378a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801378c:	e2ba      	b.n	8013d04 <LoRaMacMibSetRequestConfirm+0x6f8>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	685b      	ldr	r3, [r3, #4]
 8013792:	4618      	mov	r0, r3
 8013794:	f7fa f8cc 	bl	800d930 <SecureElementSetJoinEui>
 8013798:	4603      	mov	r3, r0
 801379a:	2b00      	cmp	r3, #0
 801379c:	f000 82b4 	beq.w	8013d08 <LoRaMacMibSetRequestConfirm+0x6fc>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80137a0:	2303      	movs	r3, #3
 80137a2:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80137a4:	e2b0      	b.n	8013d08 <LoRaMacMibSetRequestConfirm+0x6fc>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	791a      	ldrb	r2, [r3, #4]
 80137aa:	4b5c      	ldr	r3, [pc, #368]	@ (801391c <LoRaMacMibSetRequestConfirm+0x310>)
 80137ac:	f883 211a 	strb.w	r2, [r3, #282]	@ 0x11a
            break;
 80137b0:	e2c3      	b.n	8013d3a <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	685b      	ldr	r3, [r3, #4]
 80137b6:	4a59      	ldr	r2, [pc, #356]	@ (801391c <LoRaMacMibSetRequestConfirm+0x310>)
 80137b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
            break;
 80137bc:	e2bd      	b.n	8013d3a <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_DEV_ADDR:
        {
            if(SecureElementSetDevAddr( Nvm.MacGroup2.NetworkActivation, mibSet->Param.DevAddr ) != SECURE_ELEMENT_SUCCESS )
 80137be:	4b57      	ldr	r3, [pc, #348]	@ (801391c <LoRaMacMibSetRequestConfirm+0x310>)
 80137c0:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	685b      	ldr	r3, [r3, #4]
 80137c8:	4619      	mov	r1, r3
 80137ca:	4610      	mov	r0, r2
 80137cc:	f7fa f8e0 	bl	800d990 <SecureElementSetDevAddr>
 80137d0:	4603      	mov	r3, r0
 80137d2:	2b00      	cmp	r3, #0
 80137d4:	d002      	beq.n	80137dc <LoRaMacMibSetRequestConfirm+0x1d0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80137d6:	2303      	movs	r3, #3
 80137d8:	75fb      	strb	r3, [r7, #23]
            else
            {
                /* Update Nvm.MacGroup2.devAdr to handle set/get sequence */
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
            }
            break;
 80137da:	e2ae      	b.n	8013d3a <LoRaMacMibSetRequestConfirm+0x72e>
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	685b      	ldr	r3, [r3, #4]
 80137e0:	4a4e      	ldr	r2, [pc, #312]	@ (801391c <LoRaMacMibSetRequestConfirm+0x310>)
 80137e2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
            break;
 80137e6:	e2a8      	b.n	8013d3a <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	685b      	ldr	r3, [r3, #4]
 80137ec:	2b00      	cmp	r3, #0
 80137ee:	d00b      	beq.n	8013808 <LoRaMacMibSetRequestConfirm+0x1fc>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	685b      	ldr	r3, [r3, #4]
 80137f4:	4619      	mov	r1, r3
 80137f6:	2000      	movs	r0, #0
 80137f8:	f002 f868 	bl	80158cc <LoRaMacCryptoSetKey>
 80137fc:	4603      	mov	r3, r0
 80137fe:	2b00      	cmp	r3, #0
 8013800:	f000 8284 	beq.w	8013d0c <LoRaMacMibSetRequestConfirm+0x700>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013804:	2311      	movs	r3, #17
 8013806:	e2a3      	b.n	8013d50 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013808:	2303      	movs	r3, #3
 801380a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801380c:	e27e      	b.n	8013d0c <LoRaMacMibSetRequestConfirm+0x700>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	685b      	ldr	r3, [r3, #4]
 8013812:	2b00      	cmp	r3, #0
 8013814:	d00b      	beq.n	801382e <LoRaMacMibSetRequestConfirm+0x222>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	685b      	ldr	r3, [r3, #4]
 801381a:	4619      	mov	r1, r3
 801381c:	2001      	movs	r0, #1
 801381e:	f002 f855 	bl	80158cc <LoRaMacCryptoSetKey>
 8013822:	4603      	mov	r3, r0
 8013824:	2b00      	cmp	r3, #0
 8013826:	f000 8273 	beq.w	8013d10 <LoRaMacMibSetRequestConfirm+0x704>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801382a:	2311      	movs	r3, #17
 801382c:	e290      	b.n	8013d50 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801382e:	2303      	movs	r3, #3
 8013830:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013832:	e26d      	b.n	8013d10 <LoRaMacMibSetRequestConfirm+0x704>
            break;
        }
#else
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	685b      	ldr	r3, [r3, #4]
 8013838:	2b00      	cmp	r3, #0
 801383a:	d00b      	beq.n	8013854 <LoRaMacMibSetRequestConfirm+0x248>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	685b      	ldr	r3, [r3, #4]
 8013840:	4619      	mov	r1, r3
 8013842:	2008      	movs	r0, #8
 8013844:	f002 f842 	bl	80158cc <LoRaMacCryptoSetKey>
 8013848:	4603      	mov	r3, r0
 801384a:	2b00      	cmp	r3, #0
 801384c:	f000 8262 	beq.w	8013d14 <LoRaMacMibSetRequestConfirm+0x708>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013850:	2311      	movs	r3, #17
 8013852:	e27d      	b.n	8013d50 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013854:	2303      	movs	r3, #3
 8013856:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013858:	e25c      	b.n	8013d14 <LoRaMacMibSetRequestConfirm+0x708>
        }
#endif /* LORAMAC_VERSION */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	685b      	ldr	r3, [r3, #4]
 801385e:	2b00      	cmp	r3, #0
 8013860:	d00b      	beq.n	801387a <LoRaMacMibSetRequestConfirm+0x26e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 8013862:	687b      	ldr	r3, [r7, #4]
 8013864:	685b      	ldr	r3, [r3, #4]
 8013866:	4619      	mov	r1, r3
 8013868:	2009      	movs	r0, #9
 801386a:	f002 f82f 	bl	80158cc <LoRaMacCryptoSetKey>
 801386e:	4603      	mov	r3, r0
 8013870:	2b00      	cmp	r3, #0
 8013872:	f000 8251 	beq.w	8013d18 <LoRaMacMibSetRequestConfirm+0x70c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013876:	2311      	movs	r3, #17
 8013878:	e26a      	b.n	8013d50 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801387a:	2303      	movs	r3, #3
 801387c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801387e:	e24b      	b.n	8013d18 <LoRaMacMibSetRequestConfirm+0x70c>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	685b      	ldr	r3, [r3, #4]
 8013884:	2b00      	cmp	r3, #0
 8013886:	d00b      	beq.n	80138a0 <LoRaMacMibSetRequestConfirm+0x294>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	685b      	ldr	r3, [r3, #4]
 801388c:	4619      	mov	r1, r3
 801388e:	200c      	movs	r0, #12
 8013890:	f002 f81c 	bl	80158cc <LoRaMacCryptoSetKey>
 8013894:	4603      	mov	r3, r0
 8013896:	2b00      	cmp	r3, #0
 8013898:	f000 8240 	beq.w	8013d1c <LoRaMacMibSetRequestConfirm+0x710>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801389c:	2311      	movs	r3, #17
 801389e:	e257      	b.n	8013d50 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80138a0:	2303      	movs	r3, #3
 80138a2:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80138a4:	e23a      	b.n	8013d1c <LoRaMacMibSetRequestConfirm+0x710>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	685b      	ldr	r3, [r3, #4]
 80138aa:	2b00      	cmp	r3, #0
 80138ac:	d00b      	beq.n	80138c6 <LoRaMacMibSetRequestConfirm+0x2ba>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	685b      	ldr	r3, [r3, #4]
 80138b2:	4619      	mov	r1, r3
 80138b4:	200d      	movs	r0, #13
 80138b6:	f002 f809 	bl	80158cc <LoRaMacCryptoSetKey>
 80138ba:	4603      	mov	r3, r0
 80138bc:	2b00      	cmp	r3, #0
 80138be:	f000 822f 	beq.w	8013d20 <LoRaMacMibSetRequestConfirm+0x714>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80138c2:	2311      	movs	r3, #17
 80138c4:	e244      	b.n	8013d50 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80138c6:	2303      	movs	r3, #3
 80138c8:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80138ca:	e229      	b.n	8013d20 <LoRaMacMibSetRequestConfirm+0x714>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	685b      	ldr	r3, [r3, #4]
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	d00b      	beq.n	80138ec <LoRaMacMibSetRequestConfirm+0x2e0>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	685b      	ldr	r3, [r3, #4]
 80138d8:	4619      	mov	r1, r3
 80138da:	200e      	movs	r0, #14
 80138dc:	f001 fff6 	bl	80158cc <LoRaMacCryptoSetKey>
 80138e0:	4603      	mov	r3, r0
 80138e2:	2b00      	cmp	r3, #0
 80138e4:	f000 821e 	beq.w	8013d24 <LoRaMacMibSetRequestConfirm+0x718>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80138e8:	2311      	movs	r3, #17
 80138ea:	e231      	b.n	8013d50 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80138ec:	2303      	movs	r3, #3
 80138ee:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80138f0:	e218      	b.n	8013d24 <LoRaMacMibSetRequestConfirm+0x718>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	685b      	ldr	r3, [r3, #4]
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d00b      	beq.n	8013912 <LoRaMacMibSetRequestConfirm+0x306>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	685b      	ldr	r3, [r3, #4]
 80138fe:	4619      	mov	r1, r3
 8013900:	200f      	movs	r0, #15
 8013902:	f001 ffe3 	bl	80158cc <LoRaMacCryptoSetKey>
 8013906:	4603      	mov	r3, r0
 8013908:	2b00      	cmp	r3, #0
 801390a:	f000 820d 	beq.w	8013d28 <LoRaMacMibSetRequestConfirm+0x71c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801390e:	2311      	movs	r3, #17
 8013910:	e21e      	b.n	8013d50 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013912:	2303      	movs	r3, #3
 8013914:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013916:	e207      	b.n	8013d28 <LoRaMacMibSetRequestConfirm+0x71c>
 8013918:	200006e0 	.word	0x200006e0
 801391c:	20000bfc 	.word	0x20000bfc
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	791a      	ldrb	r2, [r3, #4]
 8013924:	4bb2      	ldr	r3, [pc, #712]	@ (8013bf0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013926:	f883 2119 	strb.w	r2, [r3, #281]	@ 0x119
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 801392a:	4bb2      	ldr	r3, [pc, #712]	@ (8013bf4 <LoRaMacMibSetRequestConfirm+0x5e8>)
 801392c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801392e:	4ab0      	ldr	r2, [pc, #704]	@ (8013bf0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013930:	f892 2119 	ldrb.w	r2, [r2, #281]	@ 0x119
 8013934:	4610      	mov	r0, r2
 8013936:	4798      	blx	r3
            Radio.Sleep( );
 8013938:	4bae      	ldr	r3, [pc, #696]	@ (8013bf4 <LoRaMacMibSetRequestConfirm+0x5e8>)
 801393a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801393c:	4798      	blx	r3
            break;
 801393e:	e1fc      	b.n	8013d3a <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8013940:	687b      	ldr	r3, [r7, #4]
 8013942:	791a      	ldrb	r2, [r3, #4]
 8013944:	4baa      	ldr	r3, [pc, #680]	@ (8013bf0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013946:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
            break;
 801394a:	e1f6      	b.n	8013d3a <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	7a1b      	ldrb	r3, [r3, #8]
 8013950:	b25b      	sxtb	r3, r3
 8013952:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8013954:	4ba6      	ldr	r3, [pc, #664]	@ (8013bf0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013956:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 801395a:	727b      	strb	r3, [r7, #9]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 801395c:	4ba4      	ldr	r3, [pc, #656]	@ (8013bf0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801395e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013962:	f107 0108 	add.w	r1, r7, #8
 8013966:	2207      	movs	r2, #7
 8013968:	4618      	mov	r0, r3
 801396a:	f002 fdf1 	bl	8016550 <RegionVerify>
 801396e:	4603      	mov	r3, r0
 8013970:	f083 0301 	eor.w	r3, r3, #1
 8013974:	b2db      	uxtb	r3, r3
 8013976:	2b00      	cmp	r3, #0
 8013978:	d002      	beq.n	8013980 <LoRaMacMibSetRequestConfirm+0x374>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801397a:	2303      	movs	r3, #3
 801397c:	75fb      	strb	r3, [r7, #23]
                else
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            break;
 801397e:	e1dc      	b.n	8013d3a <LoRaMacMibSetRequestConfirm+0x72e>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	685b      	ldr	r3, [r3, #4]
 8013984:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 8013986:	4b9a      	ldr	r3, [pc, #616]	@ (8013bf0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013988:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801398c:	f107 0108 	add.w	r1, r7, #8
 8013990:	2200      	movs	r2, #0
 8013992:	4618      	mov	r0, r3
 8013994:	f002 fddc 	bl	8016550 <RegionVerify>
 8013998:	4603      	mov	r3, r0
 801399a:	f083 0301 	eor.w	r3, r3, #1
 801399e:	b2db      	uxtb	r3, r3
 80139a0:	2b00      	cmp	r3, #0
 80139a2:	d002      	beq.n	80139aa <LoRaMacMibSetRequestConfirm+0x39e>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 80139a4:	2303      	movs	r3, #3
 80139a6:	75fb      	strb	r3, [r7, #23]
            break;
 80139a8:	e1c7      	b.n	8013d3a <LoRaMacMibSetRequestConfirm+0x72e>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 80139aa:	4b91      	ldr	r3, [pc, #580]	@ (8013bf0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80139ac:	687a      	ldr	r2, [r7, #4]
 80139ae:	336c      	adds	r3, #108	@ 0x6c
 80139b0:	3204      	adds	r2, #4
 80139b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80139b6:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80139ba:	e1be      	b.n	8013d3a <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	7a1b      	ldrb	r3, [r3, #8]
 80139c0:	b25b      	sxtb	r3, r3
 80139c2:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80139c4:	4b8a      	ldr	r3, [pc, #552]	@ (8013bf0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80139c6:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80139ca:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80139cc:	4b88      	ldr	r3, [pc, #544]	@ (8013bf0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80139ce:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80139d2:	f107 0108 	add.w	r1, r7, #8
 80139d6:	2207      	movs	r2, #7
 80139d8:	4618      	mov	r0, r3
 80139da:	f002 fdb9 	bl	8016550 <RegionVerify>
 80139de:	4603      	mov	r3, r0
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	d008      	beq.n	80139f6 <LoRaMacMibSetRequestConfirm+0x3ea>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 80139e4:	4b82      	ldr	r3, [pc, #520]	@ (8013bf0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80139e6:	687a      	ldr	r2, [r7, #4]
 80139e8:	33b4      	adds	r3, #180	@ 0xb4
 80139ea:	3204      	adds	r2, #4
 80139ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80139f0:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80139f4:	e1a1      	b.n	8013d3a <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80139f6:	2303      	movs	r3, #3
 80139f8:	75fb      	strb	r3, [r7, #23]
            break;
 80139fa:	e19e      	b.n	8013d3a <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	7a1b      	ldrb	r3, [r3, #8]
 8013a00:	b25b      	sxtb	r3, r3
 8013a02:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8013a04:	4b7a      	ldr	r3, [pc, #488]	@ (8013bf0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013a06:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8013a0a:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8013a0c:	4b78      	ldr	r3, [pc, #480]	@ (8013bf0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013a0e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013a12:	f107 0108 	add.w	r1, r7, #8
 8013a16:	2207      	movs	r2, #7
 8013a18:	4618      	mov	r0, r3
 8013a1a:	f002 fd99 	bl	8016550 <RegionVerify>
 8013a1e:	4603      	mov	r3, r0
 8013a20:	2b00      	cmp	r3, #0
 8013a22:	d019      	beq.n	8013a58 <LoRaMacMibSetRequestConfirm+0x44c>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 8013a24:	4b72      	ldr	r3, [pc, #456]	@ (8013bf0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013a26:	687a      	ldr	r2, [r7, #4]
 8013a28:	3374      	adds	r3, #116	@ 0x74
 8013a2a:	3204      	adds	r2, #4
 8013a2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013a30:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8013a34:	4b6e      	ldr	r3, [pc, #440]	@ (8013bf0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013a36:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8013a3a:	2b02      	cmp	r3, #2
 8013a3c:	f040 8176 	bne.w	8013d2c <LoRaMacMibSetRequestConfirm+0x720>
 8013a40:	4b6b      	ldr	r3, [pc, #428]	@ (8013bf0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013a42:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8013a46:	2b00      	cmp	r3, #0
 8013a48:	f000 8170 	beq.w	8013d2c <LoRaMacMibSetRequestConfirm+0x720>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 8013a4c:	4b69      	ldr	r3, [pc, #420]	@ (8013bf4 <LoRaMacMibSetRequestConfirm+0x5e8>)
 8013a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013a50:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 8013a52:	f7fe fc1d 	bl	8012290 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013a56:	e169      	b.n	8013d2c <LoRaMacMibSetRequestConfirm+0x720>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013a58:	2303      	movs	r3, #3
 8013a5a:	75fb      	strb	r3, [r7, #23]
            break;
 8013a5c:	e166      	b.n	8013d2c <LoRaMacMibSetRequestConfirm+0x720>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	7a1b      	ldrb	r3, [r3, #8]
 8013a62:	b25b      	sxtb	r3, r3
 8013a64:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8013a66:	4b62      	ldr	r3, [pc, #392]	@ (8013bf0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013a68:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8013a6c:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8013a6e:	4b60      	ldr	r3, [pc, #384]	@ (8013bf0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013a70:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013a74:	f107 0108 	add.w	r1, r7, #8
 8013a78:	2207      	movs	r2, #7
 8013a7a:	4618      	mov	r0, r3
 8013a7c:	f002 fd68 	bl	8016550 <RegionVerify>
 8013a80:	4603      	mov	r3, r0
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	d008      	beq.n	8013a98 <LoRaMacMibSetRequestConfirm+0x48c>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8013a86:	4b5a      	ldr	r3, [pc, #360]	@ (8013bf0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013a88:	687a      	ldr	r2, [r7, #4]
 8013a8a:	33bc      	adds	r3, #188	@ 0xbc
 8013a8c:	3204      	adds	r2, #4
 8013a8e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013a92:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013a96:	e150      	b.n	8013d3a <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013a98:	2303      	movs	r3, #3
 8013a9a:	75fb      	strb	r3, [r7, #23]
            break;
 8013a9c:	e14d      	b.n	8013d3a <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	685b      	ldr	r3, [r3, #4]
 8013aa2:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8013aa4:	2301      	movs	r3, #1
 8013aa6:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8013aa8:	4b51      	ldr	r3, [pc, #324]	@ (8013bf0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013aaa:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013aae:	f107 020c 	add.w	r2, r7, #12
 8013ab2:	4611      	mov	r1, r2
 8013ab4:	4618      	mov	r0, r3
 8013ab6:	f002 fd83 	bl	80165c0 <RegionChanMaskSet>
 8013aba:	4603      	mov	r3, r0
 8013abc:	f083 0301 	eor.w	r3, r3, #1
 8013ac0:	b2db      	uxtb	r3, r3
 8013ac2:	2b00      	cmp	r3, #0
 8013ac4:	f000 8134 	beq.w	8013d30 <LoRaMacMibSetRequestConfirm+0x724>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013ac8:	2303      	movs	r3, #3
 8013aca:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013acc:	e130      	b.n	8013d30 <LoRaMacMibSetRequestConfirm+0x724>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	685b      	ldr	r3, [r3, #4]
 8013ad2:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8013ad4:	2300      	movs	r3, #0
 8013ad6:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8013ad8:	4b45      	ldr	r3, [pc, #276]	@ (8013bf0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013ada:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013ade:	f107 020c 	add.w	r2, r7, #12
 8013ae2:	4611      	mov	r1, r2
 8013ae4:	4618      	mov	r0, r3
 8013ae6:	f002 fd6b 	bl	80165c0 <RegionChanMaskSet>
 8013aea:	4603      	mov	r3, r0
 8013aec:	f083 0301 	eor.w	r3, r3, #1
 8013af0:	b2db      	uxtb	r3, r3
 8013af2:	2b00      	cmp	r3, #0
 8013af4:	f000 811e 	beq.w	8013d34 <LoRaMacMibSetRequestConfirm+0x728>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013af8:	2303      	movs	r3, #3
 8013afa:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013afc:	e11a      	b.n	8013d34 <LoRaMacMibSetRequestConfirm+0x728>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	791b      	ldrb	r3, [r3, #4]
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	d009      	beq.n	8013b1a <LoRaMacMibSetRequestConfirm+0x50e>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8013b0a:	2b0f      	cmp	r3, #15
 8013b0c:	d805      	bhi.n	8013b1a <LoRaMacMibSetRequestConfirm+0x50e>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 8013b0e:	687b      	ldr	r3, [r7, #4]
 8013b10:	791a      	ldrb	r2, [r3, #4]
 8013b12:	4b37      	ldr	r3, [pc, #220]	@ (8013bf0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013b14:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013b18:	e10f      	b.n	8013d3a <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013b1a:	2303      	movs	r3, #3
 8013b1c:	75fb      	strb	r3, [r7, #23]
            break;
 8013b1e:	e10c      	b.n	8013d3a <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	685b      	ldr	r3, [r3, #4]
 8013b24:	4a32      	ldr	r2, [pc, #200]	@ (8013bf0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013b26:	6553      	str	r3, [r2, #84]	@ 0x54
            break;
 8013b28:	e107      	b.n	8013d3a <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	685b      	ldr	r3, [r3, #4]
 8013b2e:	4a30      	ldr	r2, [pc, #192]	@ (8013bf0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013b30:	6593      	str	r3, [r2, #88]	@ 0x58
            break;
 8013b32:	e102      	b.n	8013d3a <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	685b      	ldr	r3, [r3, #4]
 8013b38:	4a2d      	ldr	r2, [pc, #180]	@ (8013bf0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013b3a:	65d3      	str	r3, [r2, #92]	@ 0x5c
            break;
 8013b3c:	e0fd      	b.n	8013d3a <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	685b      	ldr	r3, [r3, #4]
 8013b42:	4a2b      	ldr	r2, [pc, #172]	@ (8013bf0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013b44:	6613      	str	r3, [r2, #96]	@ 0x60
            break;
 8013b46:	e0f8      	b.n	8013d3a <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8013b48:	687b      	ldr	r3, [r7, #4]
 8013b4a:	685b      	ldr	r3, [r3, #4]
 8013b4c:	4a28      	ldr	r2, [pc, #160]	@ (8013bf0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013b4e:	6653      	str	r3, [r2, #100]	@ 0x64
            break;
 8013b50:	e0f3      	b.n	8013d3a <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8013b58:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 8013b5a:	4b25      	ldr	r3, [pc, #148]	@ (8013bf0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013b5c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013b60:	f107 0108 	add.w	r1, r7, #8
 8013b64:	2206      	movs	r2, #6
 8013b66:	4618      	mov	r0, r3
 8013b68:	f002 fcf2 	bl	8016550 <RegionVerify>
 8013b6c:	4603      	mov	r3, r0
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	d005      	beq.n	8013b7e <LoRaMacMibSetRequestConfirm+0x572>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 8013b72:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8013b76:	4b1e      	ldr	r3, [pc, #120]	@ (8013bf0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013b78:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013b7c:	e0dd      	b.n	8013d3a <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013b7e:	2303      	movs	r3, #3
 8013b80:	75fb      	strb	r3, [r7, #23]
            break;
 8013b82:	e0da      	b.n	8013d3a <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8013b8a:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8013b8c:	4b18      	ldr	r3, [pc, #96]	@ (8013bf0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013b8e:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8013b92:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8013b94:	4b16      	ldr	r3, [pc, #88]	@ (8013bf0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013b96:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013b9a:	f107 0108 	add.w	r1, r7, #8
 8013b9e:	2205      	movs	r2, #5
 8013ba0:	4618      	mov	r0, r3
 8013ba2:	f002 fcd5 	bl	8016550 <RegionVerify>
 8013ba6:	4603      	mov	r3, r0
 8013ba8:	2b00      	cmp	r3, #0
 8013baa:	d005      	beq.n	8013bb8 <LoRaMacMibSetRequestConfirm+0x5ac>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8013bac:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8013bb0:	4b0f      	ldr	r3, [pc, #60]	@ (8013bf0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013bb2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013bb6:	e0c0      	b.n	8013d3a <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013bb8:	2303      	movs	r3, #3
 8013bba:	75fb      	strb	r3, [r7, #23]
            break;
 8013bbc:	e0bd      	b.n	8013d3a <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8013bc4:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8013bc6:	4b0a      	ldr	r3, [pc, #40]	@ (8013bf0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013bc8:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013bcc:	f107 0108 	add.w	r1, r7, #8
 8013bd0:	220a      	movs	r2, #10
 8013bd2:	4618      	mov	r0, r3
 8013bd4:	f002 fcbc 	bl	8016550 <RegionVerify>
 8013bd8:	4603      	mov	r3, r0
 8013bda:	2b00      	cmp	r3, #0
 8013bdc:	d005      	beq.n	8013bea <LoRaMacMibSetRequestConfirm+0x5de>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 8013bde:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8013be2:	4b03      	ldr	r3, [pc, #12]	@ (8013bf0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8013be4:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013be8:	e0a7      	b.n	8013d3a <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013bea:	2303      	movs	r3, #3
 8013bec:	75fb      	strb	r3, [r7, #23]
            break;
 8013bee:	e0a4      	b.n	8013d3a <LoRaMacMibSetRequestConfirm+0x72e>
 8013bf0:	20000bfc 	.word	0x20000bfc
 8013bf4:	0801fccc 	.word	0x0801fccc
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8013bfe:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8013c00:	4b55      	ldr	r3, [pc, #340]	@ (8013d58 <LoRaMacMibSetRequestConfirm+0x74c>)
 8013c02:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013c06:	f107 0108 	add.w	r1, r7, #8
 8013c0a:	2209      	movs	r2, #9
 8013c0c:	4618      	mov	r0, r3
 8013c0e:	f002 fc9f 	bl	8016550 <RegionVerify>
 8013c12:	4603      	mov	r3, r0
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	d005      	beq.n	8013c24 <LoRaMacMibSetRequestConfirm+0x618>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 8013c18:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8013c1c:	4b4e      	ldr	r3, [pc, #312]	@ (8013d58 <LoRaMacMibSetRequestConfirm+0x74c>)
 8013c1e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013c22:	e08a      	b.n	8013d3a <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013c24:	2303      	movs	r3, #3
 8013c26:	75fb      	strb	r3, [r7, #23]
            break;
 8013c28:	e087      	b.n	8013d3a <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8013c2a:	687b      	ldr	r3, [r7, #4]
 8013c2c:	685b      	ldr	r3, [r3, #4]
 8013c2e:	4a4a      	ldr	r2, [pc, #296]	@ (8013d58 <LoRaMacMibSetRequestConfirm+0x74c>)
 8013c30:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8013c34:	4b48      	ldr	r3, [pc, #288]	@ (8013d58 <LoRaMacMibSetRequestConfirm+0x74c>)
 8013c36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8013c3a:	4a47      	ldr	r2, [pc, #284]	@ (8013d58 <LoRaMacMibSetRequestConfirm+0x74c>)
 8013c3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
            break;
 8013c3e:	e07c      	b.n	8013d3a <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	791a      	ldrb	r2, [r3, #4]
 8013c44:	4b44      	ldr	r3, [pc, #272]	@ (8013d58 <LoRaMacMibSetRequestConfirm+0x74c>)
 8013c46:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
 8013c4a:	4b43      	ldr	r3, [pc, #268]	@ (8013d58 <LoRaMacMibSetRequestConfirm+0x74c>)
 8013c4c:	f893 2098 	ldrb.w	r2, [r3, #152]	@ 0x98
 8013c50:	4b41      	ldr	r3, [pc, #260]	@ (8013d58 <LoRaMacMibSetRequestConfirm+0x74c>)
 8013c52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            break;
 8013c56:	e070      	b.n	8013d3a <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	685b      	ldr	r3, [r3, #4]
 8013c5c:	4a3e      	ldr	r2, [pc, #248]	@ (8013d58 <LoRaMacMibSetRequestConfirm+0x74c>)
 8013c5e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
            break;
 8013c62:	e06a      	b.n	8013d3a <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	685b      	ldr	r3, [r3, #4]
 8013c68:	4a3b      	ldr	r2, [pc, #236]	@ (8013d58 <LoRaMacMibSetRequestConfirm+0x74c>)
 8013c6a:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
            break;
 8013c6e:	e064      	b.n	8013d3a <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 8013c70:	f7fe fd40 	bl	80126f4 <RestoreNvmData>
 8013c74:	4603      	mov	r3, r0
 8013c76:	75fb      	strb	r3, [r7, #23]
            break;
 8013c78:	e05f      	b.n	8013d3a <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	799b      	ldrb	r3, [r3, #6]
 8013c7e:	2b01      	cmp	r3, #1
 8013c80:	d80d      	bhi.n	8013c9e <LoRaMacMibSetRequestConfirm+0x692>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 8013c82:	4a35      	ldr	r2, [pc, #212]	@ (8013d58 <LoRaMacMibSetRequestConfirm+0x74c>)
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	685b      	ldr	r3, [r3, #4]
 8013c88:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	6858      	ldr	r0, [r3, #4]
 8013c90:	f001 fd7e 	bl	8015790 <LoRaMacCryptoSetLrWanVersion>
 8013c94:	4603      	mov	r3, r0
 8013c96:	2b00      	cmp	r3, #0
 8013c98:	d04e      	beq.n	8013d38 <LoRaMacMibSetRequestConfirm+0x72c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013c9a:	2311      	movs	r3, #17
 8013c9c:	e058      	b.n	8013d50 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013c9e:	2303      	movs	r3, #3
 8013ca0:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8013ca2:	e049      	b.n	8013d38 <LoRaMacMibSetRequestConfirm+0x72c>
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	685b      	ldr	r3, [r3, #4]
 8013ca8:	4a2b      	ldr	r2, [pc, #172]	@ (8013d58 <LoRaMacMibSetRequestConfirm+0x74c>)
 8013caa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
            break;
 8013cae:	e044      	b.n	8013d3a <LoRaMacMibSetRequestConfirm+0x72e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_IS_CERT_FPORT_ON:
        {
            Nvm.MacGroup2.IsCertPortOn = mibSet->Param.IsCertPortOn;
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	791a      	ldrb	r2, [r3, #4]
 8013cb4:	4b28      	ldr	r3, [pc, #160]	@ (8013d58 <LoRaMacMibSetRequestConfirm+0x74c>)
 8013cb6:	f883 211f 	strb.w	r2, [r3, #287]	@ 0x11f
            break;
 8013cba:	e03e      	b.n	8013d3a <LoRaMacMibSetRequestConfirm+0x72e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            Nvm.MacGroup2.MacParams.AdrAckLimit = mibSet->Param.AdrAckLimit;
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	889a      	ldrh	r2, [r3, #4]
 8013cc0:	4b25      	ldr	r3, [pc, #148]	@ (8013d58 <LoRaMacMibSetRequestConfirm+0x74c>)
 8013cc2:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
            break;
 8013cc6:	e038      	b.n	8013d3a <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ADR_ACK_DELAY:
        {
            Nvm.MacGroup2.MacParams.AdrAckDelay = mibSet->Param.AdrAckDelay;
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	889a      	ldrh	r2, [r3, #4]
 8013ccc:	4b22      	ldr	r3, [pc, #136]	@ (8013d58 <LoRaMacMibSetRequestConfirm+0x74c>)
 8013cce:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a
            break;
 8013cd2:	e032      	b.n	8013d3a <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = mibSet->Param.AdrAckLimit;
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	889a      	ldrh	r2, [r3, #4]
 8013cd8:	4b1f      	ldr	r3, [pc, #124]	@ (8013d58 <LoRaMacMibSetRequestConfirm+0x74c>)
 8013cda:	f8a3 20d0 	strh.w	r2, [r3, #208]	@ 0xd0
            break;
 8013cde:	e02c      	b.n	8013d3a <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = mibSet->Param.AdrAckDelay;
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	889a      	ldrh	r2, [r3, #4]
 8013ce4:	4b1c      	ldr	r3, [pc, #112]	@ (8013d58 <LoRaMacMibSetRequestConfirm+0x74c>)
 8013ce6:	f8a3 20d2 	strh.w	r2, [r3, #210]	@ 0xd2
            break;
 8013cea:	e026      	b.n	8013d3a <LoRaMacMibSetRequestConfirm+0x72e>
            else
            {
                Nvm.RegionGroup2.RssiFreeThreshold = mibSet->Param.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8013cec:	2318      	movs	r3, #24
 8013cee:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8013cf0:	e023      	b.n	8013d3a <LoRaMacMibSetRequestConfirm+0x72e>
            else
            {
                Nvm.RegionGroup2.CarrierSenseTime = mibSet->Param.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8013cf2:	2318      	movs	r3, #24
 8013cf4:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8013cf6:	e020      	b.n	8013d3a <LoRaMacMibSetRequestConfirm+0x72e>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8013cf8:	6878      	ldr	r0, [r7, #4]
 8013cfa:	f000 fca4 	bl	8014646 <LoRaMacMibClassBSetRequestConfirm>
 8013cfe:	4603      	mov	r3, r0
 8013d00:	75fb      	strb	r3, [r7, #23]
            break;
 8013d02:	e01a      	b.n	8013d3a <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8013d04:	bf00      	nop
 8013d06:	e018      	b.n	8013d3a <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8013d08:	bf00      	nop
 8013d0a:	e016      	b.n	8013d3a <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8013d0c:	bf00      	nop
 8013d0e:	e014      	b.n	8013d3a <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8013d10:	bf00      	nop
 8013d12:	e012      	b.n	8013d3a <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8013d14:	bf00      	nop
 8013d16:	e010      	b.n	8013d3a <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8013d18:	bf00      	nop
 8013d1a:	e00e      	b.n	8013d3a <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8013d1c:	bf00      	nop
 8013d1e:	e00c      	b.n	8013d3a <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8013d20:	bf00      	nop
 8013d22:	e00a      	b.n	8013d3a <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8013d24:	bf00      	nop
 8013d26:	e008      	b.n	8013d3a <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8013d28:	bf00      	nop
 8013d2a:	e006      	b.n	8013d3a <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8013d2c:	bf00      	nop
 8013d2e:	e004      	b.n	8013d3a <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8013d30:	bf00      	nop
 8013d32:	e002      	b.n	8013d3a <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8013d34:	bf00      	nop
 8013d36:	e000      	b.n	8013d3a <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8013d38:	bf00      	nop
        }
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( status == LORAMAC_STATUS_OK )
 8013d3a:	7dfb      	ldrb	r3, [r7, #23]
 8013d3c:	2b00      	cmp	r3, #0
 8013d3e:	d106      	bne.n	8013d4e <LoRaMacMibSetRequestConfirm+0x742>
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8013d40:	4a06      	ldr	r2, [pc, #24]	@ (8013d5c <LoRaMacMibSetRequestConfirm+0x750>)
 8013d42:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8013d46:	f043 0320 	orr.w	r3, r3, #32
 8013d4a:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    }
#endif /* LORAMAC_VERSION */
    return status;
 8013d4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013d50:	4618      	mov	r0, r3
 8013d52:	3718      	adds	r7, #24
 8013d54:	46bd      	mov	sp, r7
 8013d56:	bd80      	pop	{r7, pc}
 8013d58:	20000bfc 	.word	0x20000bfc
 8013d5c:	200006e0 	.word	0x200006e0

08013d60 <LoRaMacMlmeRequest>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 8013d60:	b580      	push	{r7, lr}
 8013d62:	b08a      	sub	sp, #40	@ 0x28
 8013d64:	af00      	add	r7, sp, #0
 8013d66:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013d68:	2302      	movs	r3, #2
 8013d6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8013d6e:	2300      	movs	r3, #0
 8013d70:	83bb      	strh	r3, [r7, #28]

    if( mlmeRequest == NULL )
 8013d72:	687b      	ldr	r3, [r7, #4]
 8013d74:	2b00      	cmp	r3, #0
 8013d76:	d101      	bne.n	8013d7c <LoRaMacMlmeRequest+0x1c>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013d78:	2303      	movs	r3, #3
 8013d7a:	e17e      	b.n	801407a <LoRaMacMlmeRequest+0x31a>
    }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	2200      	movs	r2, #0
 8013d80:	611a      	str	r2, [r3, #16]
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 8013d82:	f7fc fb79 	bl	8010478 <LoRaMacIsBusy>
 8013d86:	4603      	mov	r3, r0
 8013d88:	2b00      	cmp	r3, #0
 8013d8a:	d001      	beq.n	8013d90 <LoRaMacMlmeRequest+0x30>
    {
        return LORAMAC_STATUS_BUSY;
 8013d8c:	2301      	movs	r3, #1
 8013d8e:	e174      	b.n	801407a <LoRaMacMlmeRequest+0x31a>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8013d90:	f001 f994 	bl	80150bc <LoRaMacConfirmQueueIsFull>
 8013d94:	4603      	mov	r3, r0
 8013d96:	2b00      	cmp	r3, #0
 8013d98:	d001      	beq.n	8013d9e <LoRaMacMlmeRequest+0x3e>
    {
        return LORAMAC_STATUS_BUSY;
 8013d9a:	2301      	movs	r3, #1
 8013d9c:	e16d      	b.n	801407a <LoRaMacMlmeRequest+0x31a>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8013d9e:	f001 f981 	bl	80150a4 <LoRaMacConfirmQueueGetCnt>
 8013da2:	4603      	mov	r3, r0
 8013da4:	2b00      	cmp	r3, #0
 8013da6:	d104      	bne.n	8013db2 <LoRaMacMlmeRequest+0x52>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8013da8:	2214      	movs	r2, #20
 8013daa:	2100      	movs	r1, #0
 8013dac:	48b5      	ldr	r0, [pc, #724]	@ (8014084 <LoRaMacMlmeRequest+0x324>)
 8013dae:	f006 f9bb 	bl	801a128 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013db2:	4bb5      	ldr	r3, [pc, #724]	@ (8014088 <LoRaMacMlmeRequest+0x328>)
 8013db4:	2201      	movs	r2, #1
 8013db6:	f883 2455 	strb.w	r2, [r3, #1109]	@ 0x455

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8013dba:	4ab3      	ldr	r2, [pc, #716]	@ (8014088 <LoRaMacMlmeRequest+0x328>)
 8013dbc:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8013dc0:	f043 0304 	orr.w	r3, r3, #4
 8013dc4:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    queueElement.Request = mlmeRequest->Type;
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	781b      	ldrb	r3, [r3, #0]
 8013dcc:	f887 3020 	strb.w	r3, [r7, #32]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013dd0:	2301      	movs	r3, #1
 8013dd2:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    queueElement.RestrictCommonReadyToHandle = false;
 8013dd6:	2300      	movs	r3, #0
 8013dd8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    queueElement.ReadyToHandle = false;
 8013ddc:	2300      	movs	r3, #0
 8013dde:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
#endif /* LORAMAC_VERSION */

    switch( mlmeRequest->Type )
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	781b      	ldrb	r3, [r3, #0]
 8013de6:	3b01      	subs	r3, #1
 8013de8:	2b0c      	cmp	r3, #12
 8013dea:	f200 811a 	bhi.w	8014022 <LoRaMacMlmeRequest+0x2c2>
 8013dee:	a201      	add	r2, pc, #4	@ (adr r2, 8013df4 <LoRaMacMlmeRequest+0x94>)
 8013df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013df4:	08013e29 	.word	0x08013e29
 8013df8:	08014023 	.word	0x08014023
 8013dfc:	08014023 	.word	0x08014023
 8013e00:	08014023 	.word	0x08014023
 8013e04:	08013f07 	.word	0x08013f07
 8013e08:	08013f2b 	.word	0x08013f2b
 8013e0c:	08014023 	.word	0x08014023
 8013e10:	08014023 	.word	0x08014023
 8013e14:	08013f49 	.word	0x08013f49
 8013e18:	08014023 	.word	0x08014023
 8013e1c:	08013ff1 	.word	0x08013ff1
 8013e20:	08013f85 	.word	0x08013f85
 8013e24:	08013fcf 	.word	0x08013fcf
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8013e28:	4b97      	ldr	r3, [pc, #604]	@ (8014088 <LoRaMacMlmeRequest+0x328>)
 8013e2a:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8013e2e:	f003 0320 	and.w	r3, r3, #32
 8013e32:	2b00      	cmp	r3, #0
 8013e34:	d001      	beq.n	8013e3a <LoRaMacMlmeRequest+0xda>
            {
                return LORAMAC_STATUS_BUSY;
 8013e36:	2301      	movs	r3, #1
 8013e38:	e11f      	b.n	801407a <LoRaMacMlmeRequest+0x31a>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_OTAA )
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	791b      	ldrb	r3, [r3, #4]
 8013e3e:	2b02      	cmp	r3, #2
 8013e40:	d135      	bne.n	8013eae <LoRaMacMlmeRequest+0x14e>
            {
                ResetMacParameters( false );
 8013e42:	2000      	movs	r0, #0
 8013e44:	f7fe f8b6 	bl	8011fb4 <ResetMacParameters>

                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8013e48:	4b90      	ldr	r3, [pc, #576]	@ (801408c <LoRaMacMlmeRequest+0x32c>)
 8013e4a:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	795b      	ldrb	r3, [r3, #5]
 8013e52:	b25b      	sxtb	r3, r3
 8013e54:	2200      	movs	r2, #0
 8013e56:	4619      	mov	r1, r3
 8013e58:	f002 fcc2 	bl	80167e0 <RegionAlternateDr>
 8013e5c:	4603      	mov	r3, r0
 8013e5e:	461a      	mov	r2, r3
 8013e60:	4b8a      	ldr	r3, [pc, #552]	@ (801408c <LoRaMacMlmeRequest+0x32c>)
 8013e62:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                Nvm.MacGroup1.ChannelsTxPower = mlmeRequest->Req.Join.TxPower;
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	f993 2006 	ldrsb.w	r2, [r3, #6]
 8013e6c:	4b87      	ldr	r3, [pc, #540]	@ (801408c <LoRaMacMlmeRequest+0x32c>)
 8013e6e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8013e72:	2307      	movs	r3, #7
 8013e74:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

                status = SendReJoinReq( JOIN_REQ );
 8013e78:	20ff      	movs	r0, #255	@ 0xff
 8013e7a:	f7fd fe1f 	bl	8011abc <SendReJoinReq>
 8013e7e:	4603      	mov	r3, r0
 8013e80:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

                if( status != LORAMAC_STATUS_OK )
 8013e84:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013e88:	2b00      	cmp	r3, #0
 8013e8a:	f000 80cc 	beq.w	8014026 <LoRaMacMlmeRequest+0x2c6>
                {
                    // Revert back the previous datarate ( mainly used for US915 like regions )
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8013e8e:	4b7f      	ldr	r3, [pc, #508]	@ (801408c <LoRaMacMlmeRequest+0x32c>)
 8013e90:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 8013e94:	687b      	ldr	r3, [r7, #4]
 8013e96:	795b      	ldrb	r3, [r3, #5]
 8013e98:	b25b      	sxtb	r3, r3
 8013e9a:	2201      	movs	r2, #1
 8013e9c:	4619      	mov	r1, r3
 8013e9e:	f002 fc9f 	bl	80167e0 <RegionAlternateDr>
 8013ea2:	4603      	mov	r3, r0
 8013ea4:	461a      	mov	r2, r3
 8013ea6:	4b79      	ldr	r3, [pc, #484]	@ (801408c <LoRaMacMlmeRequest+0x32c>)
 8013ea8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                OnMacProcessNotify( );
                MacCtx.MacFlags.Bits.MacDone = 1;
                status = LORAMAC_STATUS_OK;
            }
#endif /* LORAMAC_VERSION */
            break;
 8013eac:	e0bb      	b.n	8014026 <LoRaMacMlmeRequest+0x2c6>
            else if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_ABP )
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	791b      	ldrb	r3, [r3, #4]
 8013eb2:	2b01      	cmp	r3, #1
 8013eb4:	f040 80b7 	bne.w	8014026 <LoRaMacMlmeRequest+0x2c6>
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 8013eb8:	4b74      	ldr	r3, [pc, #464]	@ (801408c <LoRaMacMlmeRequest+0x32c>)
 8013eba:	2200      	movs	r2, #0
 8013ebc:	f883 211d 	strb.w	r2, [r3, #285]	@ 0x11d
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8013ec0:	2302      	movs	r3, #2
 8013ec2:	763b      	strb	r3, [r7, #24]
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8013ec4:	4b71      	ldr	r3, [pc, #452]	@ (801408c <LoRaMacMlmeRequest+0x32c>)
 8013ec6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013eca:	f107 020c 	add.w	r2, r7, #12
 8013ece:	4611      	mov	r1, r2
 8013ed0:	4618      	mov	r0, r3
 8013ed2:	f002 fb26 	bl	8016522 <RegionInitDefaults>
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	791a      	ldrb	r2, [r3, #4]
 8013eda:	4b6c      	ldr	r3, [pc, #432]	@ (801408c <LoRaMacMlmeRequest+0x32c>)
 8013edc:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8013ee0:	2300      	movs	r3, #0
 8013ee2:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
                queueElement.ReadyToHandle = true;
 8013ee6:	2301      	movs	r3, #1
 8013ee8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
                OnMacProcessNotify( );
 8013eec:	f7fe fdb2 	bl	8012a54 <OnMacProcessNotify>
                MacCtx.MacFlags.Bits.MacDone = 1;
 8013ef0:	4a65      	ldr	r2, [pc, #404]	@ (8014088 <LoRaMacMlmeRequest+0x328>)
 8013ef2:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8013ef6:	f043 0310 	orr.w	r3, r3, #16
 8013efa:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
                status = LORAMAC_STATUS_OK;
 8013efe:	2300      	movs	r3, #0
 8013f00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8013f04:	e08f      	b.n	8014026 <LoRaMacMlmeRequest+0x2c6>
        }
#endif /* LORAMAC_VERSION */
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8013f06:	2300      	movs	r3, #0
 8013f08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8013f0c:	f107 031c 	add.w	r3, r7, #28
 8013f10:	2200      	movs	r2, #0
 8013f12:	4619      	mov	r1, r3
 8013f14:	2002      	movs	r0, #2
 8013f16:	f000 fd21 	bl	801495c <LoRaMacCommandsAddCmd>
 8013f1a:	4603      	mov	r3, r0
 8013f1c:	2b00      	cmp	r3, #0
 8013f1e:	f000 8084 	beq.w	801402a <LoRaMacMlmeRequest+0x2ca>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013f22:	2313      	movs	r3, #19
 8013f24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 8013f28:	e07f      	b.n	801402a <LoRaMacMlmeRequest+0x2ca>
            break;
        }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	8898      	ldrh	r0, [r3, #4]
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	6899      	ldr	r1, [r3, #8]
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8013f38:	b2db      	uxtb	r3, r3
 8013f3a:	461a      	mov	r2, r3
 8013f3c:	f7fe fbba 	bl	80126b4 <SetTxContinuousWave>
 8013f40:	4603      	mov	r3, r0
 8013f42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8013f46:	e077      	b.n	8014038 <LoRaMacMlmeRequest+0x2d8>
        }
#endif /* LORAMAC_VERSION */
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8013f48:	2300      	movs	r3, #0
 8013f4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            MacCommand_t* newCmd;
            /* ST_CODE Begin: Add MAC command condition to prevent some duplicated request */
            if (LoRaMacCommandsGetCmd( MOTE_MAC_DEVICE_TIME_REQ, &newCmd ) == LORAMAC_COMMANDS_SUCCESS)
 8013f4e:	f107 0308 	add.w	r3, r7, #8
 8013f52:	4619      	mov	r1, r3
 8013f54:	200d      	movs	r0, #13
 8013f56:	f000 fd81 	bl	8014a5c <LoRaMacCommandsGetCmd>
 8013f5a:	4603      	mov	r3, r0
 8013f5c:	2b00      	cmp	r3, #0
 8013f5e:	d103      	bne.n	8013f68 <LoRaMacMlmeRequest+0x208>
            {
                status = LORAMAC_STATUS_OK;
 8013f60:	2300      	movs	r3, #0
 8013f62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            /* ST_CODE End */
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
            }
            break;
 8013f66:	e062      	b.n	801402e <LoRaMacMlmeRequest+0x2ce>
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8013f68:	f107 031c 	add.w	r3, r7, #28
 8013f6c:	2200      	movs	r2, #0
 8013f6e:	4619      	mov	r1, r3
 8013f70:	200d      	movs	r0, #13
 8013f72:	f000 fcf3 	bl	801495c <LoRaMacCommandsAddCmd>
 8013f76:	4603      	mov	r3, r0
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	d058      	beq.n	801402e <LoRaMacMlmeRequest+0x2ce>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013f7c:	2313      	movs	r3, #19
 8013f7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8013f82:	e054      	b.n	801402e <LoRaMacMlmeRequest+0x2ce>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8013f84:	4b41      	ldr	r3, [pc, #260]	@ (801408c <LoRaMacMlmeRequest+0x32c>)
 8013f86:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8013f8a:	2b00      	cmp	r3, #0
 8013f8c:	d151      	bne.n	8014032 <LoRaMacMlmeRequest+0x2d2>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	791b      	ldrb	r3, [r3, #4]
 8013f92:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	791b      	ldrb	r3, [r3, #4]
 8013f9a:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8013f9e:	b2db      	uxtb	r3, r3
 8013fa0:	4618      	mov	r0, r3
 8013fa2:	f000 fb25 	bl	80145f0 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8013fa6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013faa:	773b      	strb	r3, [r7, #28]
                status = LORAMAC_STATUS_OK;
 8013fac:	2300      	movs	r3, #0
 8013fae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8013fb2:	f107 031c 	add.w	r3, r7, #28
 8013fb6:	2201      	movs	r2, #1
 8013fb8:	4619      	mov	r1, r3
 8013fba:	2010      	movs	r0, #16
 8013fbc:	f000 fcce 	bl	801495c <LoRaMacCommandsAddCmd>
 8013fc0:	4603      	mov	r3, r0
 8013fc2:	2b00      	cmp	r3, #0
 8013fc4:	d035      	beq.n	8014032 <LoRaMacMlmeRequest+0x2d2>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013fc6:	2313      	movs	r3, #19
 8013fc8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                }
            }
            break;
 8013fcc:	e031      	b.n	8014032 <LoRaMacMlmeRequest+0x2d2>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8013fce:	2300      	movs	r3, #0
 8013fd0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8013fd4:	f107 031c 	add.w	r3, r7, #28
 8013fd8:	2200      	movs	r2, #0
 8013fda:	4619      	mov	r1, r3
 8013fdc:	2012      	movs	r0, #18
 8013fde:	f000 fcbd 	bl	801495c <LoRaMacCommandsAddCmd>
 8013fe2:	4603      	mov	r3, r0
 8013fe4:	2b00      	cmp	r3, #0
 8013fe6:	d026      	beq.n	8014036 <LoRaMacMlmeRequest+0x2d6>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013fe8:	2313      	movs	r3, #19
 8013fea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 8013fee:	e022      	b.n	8014036 <LoRaMacMlmeRequest+0x2d6>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 8013ff0:	2301      	movs	r3, #1
 8013ff2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8013ff6:	f000 fab1 	bl	801455c <LoRaMacClassBIsAcquisitionInProgress>
 8013ffa:	4603      	mov	r3, r0
 8013ffc:	f083 0301 	eor.w	r3, r3, #1
 8014000:	b2db      	uxtb	r3, r3
 8014002:	2b00      	cmp	r3, #0
 8014004:	d009      	beq.n	801401a <LoRaMacMlmeRequest+0x2ba>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8014006:	2000      	movs	r0, #0
 8014008:	f000 fa8a 	bl	8014520 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 801400c:	2000      	movs	r0, #0
 801400e:	f000 faac 	bl	801456a <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 8014012:	2300      	movs	r3, #0
 8014014:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 8014018:	e00e      	b.n	8014038 <LoRaMacMlmeRequest+0x2d8>
                status = LORAMAC_STATUS_BUSY;
 801401a:	2301      	movs	r3, #1
 801401c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8014020:	e00a      	b.n	8014038 <LoRaMacMlmeRequest+0x2d8>
        }
        default:
            break;
 8014022:	bf00      	nop
 8014024:	e008      	b.n	8014038 <LoRaMacMlmeRequest+0x2d8>
            break;
 8014026:	bf00      	nop
 8014028:	e006      	b.n	8014038 <LoRaMacMlmeRequest+0x2d8>
            break;
 801402a:	bf00      	nop
 801402c:	e004      	b.n	8014038 <LoRaMacMlmeRequest+0x2d8>
            break;
 801402e:	bf00      	nop
 8014030:	e002      	b.n	8014038 <LoRaMacMlmeRequest+0x2d8>
            break;
 8014032:	bf00      	nop
 8014034:	e000      	b.n	8014038 <LoRaMacMlmeRequest+0x2d8>
            break;
 8014036:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8014038:	4b13      	ldr	r3, [pc, #76]	@ (8014088 <LoRaMacMlmeRequest+0x328>)
 801403a:	f8d3 2494 	ldr.w	r2, [r3, #1172]	@ 0x494
 801403e:	687b      	ldr	r3, [r7, #4]
 8014040:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 8014042:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014046:	2b00      	cmp	r3, #0
 8014048:	d010      	beq.n	801406c <LoRaMacMlmeRequest+0x30c>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 801404a:	f001 f82b 	bl	80150a4 <LoRaMacConfirmQueueGetCnt>
 801404e:	4603      	mov	r3, r0
 8014050:	2b00      	cmp	r3, #0
 8014052:	d110      	bne.n	8014076 <LoRaMacMlmeRequest+0x316>
        {
            MacCtx.NodeAckRequested = false;
 8014054:	4b0c      	ldr	r3, [pc, #48]	@ (8014088 <LoRaMacMlmeRequest+0x328>)
 8014056:	2200      	movs	r2, #0
 8014058:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 801405c:	4a0a      	ldr	r2, [pc, #40]	@ (8014088 <LoRaMacMlmeRequest+0x328>)
 801405e:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8014062:	f36f 0382 	bfc	r3, #2, #1
 8014066:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
 801406a:	e004      	b.n	8014076 <LoRaMacMlmeRequest+0x316>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 801406c:	f107 0320 	add.w	r3, r7, #32
 8014070:	4618      	mov	r0, r3
 8014072:	f000 fec3 	bl	8014dfc <LoRaMacConfirmQueueAdd>
    }
    return status;
 8014076:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 801407a:	4618      	mov	r0, r3
 801407c:	3728      	adds	r7, #40	@ 0x28
 801407e:	46bd      	mov	sp, r7
 8014080:	bd80      	pop	{r7, pc}
 8014082:	bf00      	nop
 8014084:	20000b34 	.word	0x20000b34
 8014088:	200006e0 	.word	0x200006e0
 801408c:	20000bfc 	.word	0x20000bfc

08014090 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8014090:	b5b0      	push	{r4, r5, r7, lr}
 8014092:	b092      	sub	sp, #72	@ 0x48
 8014094:	af02      	add	r7, sp, #8
 8014096:	6078      	str	r0, [r7, #4]
 8014098:	460b      	mov	r3, r1
 801409a:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 801409c:	2302      	movs	r3, #2
 801409e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 80140a2:	2300      	movs	r3, #0
 80140a4:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    void* fBuffer = NULL;
 80140a8:	2300      	movs	r3, #0
 80140aa:	63bb      	str	r3, [r7, #56]	@ 0x38
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 80140ac:	2300      	movs	r3, #0
 80140ae:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    bool readyToSend = false;
 80140b2:	2300      	movs	r3, #0
 80140b4:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    if( mcpsRequest == NULL )
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	2b00      	cmp	r3, #0
 80140bc:	d101      	bne.n	80140c2 <LoRaMacMcpsRequest+0x32>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80140be:	2303      	movs	r3, #3
 80140c0:	e113      	b.n	80142ea <LoRaMacMcpsRequest+0x25a>
        }
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mcpsRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mcpsRequest->ReqReturn.DutyCycleWaitTime = 0;
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	2200      	movs	r2, #0
 80140c6:	611a      	str	r2, [r3, #16]

    if( LoRaMacIsBusy( ) == true )
 80140c8:	f7fc f9d6 	bl	8010478 <LoRaMacIsBusy>
 80140cc:	4603      	mov	r3, r0
 80140ce:	2b00      	cmp	r3, #0
 80140d0:	d001      	beq.n	80140d6 <LoRaMacMcpsRequest+0x46>
    {
        return LORAMAC_STATUS_BUSY;
 80140d2:	2301      	movs	r3, #1
 80140d4:	e109      	b.n	80142ea <LoRaMacMcpsRequest+0x25a>
    }

    McpsReq_t request = *mcpsRequest;
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	f107 040c 	add.w	r4, r7, #12
 80140dc:	461d      	mov	r5, r3
 80140de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80140e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80140e2:	682b      	ldr	r3, [r5, #0]
 80140e4:	6023      	str	r3, [r4, #0]

    macHdr.Value = 0;
 80140e6:	2300      	movs	r3, #0
 80140e8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 80140ec:	2214      	movs	r2, #20
 80140ee:	2100      	movs	r1, #0
 80140f0:	4880      	ldr	r0, [pc, #512]	@ (80142f4 <LoRaMacMcpsRequest+0x264>)
 80140f2:	f006 f819 	bl	801a128 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80140f6:	4b80      	ldr	r3, [pc, #512]	@ (80142f8 <LoRaMacMcpsRequest+0x268>)
 80140f8:	2201      	movs	r2, #1
 80140fa:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441

    // Apply confirmed downlinks, if the device has not received a valid
    // downlink after a join accept.
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 80140fe:	4b7f      	ldr	r3, [pc, #508]	@ (80142fc <LoRaMacMcpsRequest+0x26c>)
 8014100:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8014104:	2b02      	cmp	r3, #2
 8014106:	d111      	bne.n	801412c <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 8014108:	4b7c      	ldr	r3, [pc, #496]	@ (80142fc <LoRaMacMcpsRequest+0x26c>)
 801410a:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 801410e:	2b02      	cmp	r3, #2
 8014110:	d10c      	bne.n	801412c <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 8014112:	4b7a      	ldr	r3, [pc, #488]	@ (80142fc <LoRaMacMcpsRequest+0x26c>)
 8014114:	f893 311e 	ldrb.w	r3, [r3, #286]	@ 0x11e
 8014118:	f083 0301 	eor.w	r3, r3, #1
 801411c:	b2db      	uxtb	r3, r3
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 801411e:	2b00      	cmp	r3, #0
 8014120:	d004      	beq.n	801412c <LoRaMacMcpsRequest+0x9c>
        ( request.Type == MCPS_UNCONFIRMED ) )
 8014122:	7b3b      	ldrb	r3, [r7, #12]
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 8014124:	2b00      	cmp	r3, #0
 8014126:	d101      	bne.n	801412c <LoRaMacMcpsRequest+0x9c>
    {
        request.Type = MCPS_CONFIRMED;
 8014128:	2301      	movs	r3, #1
 801412a:	733b      	strb	r3, [r7, #12]
    }

    switch( request.Type )
 801412c:	7b3b      	ldrb	r3, [r7, #12]
 801412e:	2b03      	cmp	r3, #3
 8014130:	d030      	beq.n	8014194 <LoRaMacMcpsRequest+0x104>
 8014132:	2b03      	cmp	r3, #3
 8014134:	dc3f      	bgt.n	80141b6 <LoRaMacMcpsRequest+0x126>
 8014136:	2b00      	cmp	r3, #0
 8014138:	d002      	beq.n	8014140 <LoRaMacMcpsRequest+0xb0>
 801413a:	2b01      	cmp	r3, #1
 801413c:	d015      	beq.n	801416a <LoRaMacMcpsRequest+0xda>
            fBufferSize = request.Req.Proprietary.fBufferSize;
            datarate = request.Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 801413e:	e03a      	b.n	80141b6 <LoRaMacMcpsRequest+0x126>
            readyToSend = true;
 8014140:	2301      	movs	r3, #1
 8014142:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8014146:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801414a:	2202      	movs	r2, #2
 801414c:	f362 1347 	bfi	r3, r2, #5, #3
 8014150:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            fPort = request.Req.Unconfirmed.fPort;
 8014154:	7c3b      	ldrb	r3, [r7, #16]
 8014156:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            fBuffer = request.Req.Unconfirmed.fBuffer;
 801415a:	697b      	ldr	r3, [r7, #20]
 801415c:	63bb      	str	r3, [r7, #56]	@ 0x38
            fBufferSize = request.Req.Unconfirmed.fBufferSize;
 801415e:	8b3b      	ldrh	r3, [r7, #24]
 8014160:	86fb      	strh	r3, [r7, #54]	@ 0x36
            datarate = request.Req.Unconfirmed.Datarate;
 8014162:	7ebb      	ldrb	r3, [r7, #26]
 8014164:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            break;
 8014168:	e026      	b.n	80141b8 <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 801416a:	2301      	movs	r3, #1
 801416c:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8014170:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8014174:	2204      	movs	r2, #4
 8014176:	f362 1347 	bfi	r3, r2, #5, #3
 801417a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            fPort = request.Req.Confirmed.fPort;
 801417e:	7c3b      	ldrb	r3, [r7, #16]
 8014180:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            fBuffer = request.Req.Confirmed.fBuffer;
 8014184:	697b      	ldr	r3, [r7, #20]
 8014186:	63bb      	str	r3, [r7, #56]	@ 0x38
            fBufferSize = request.Req.Confirmed.fBufferSize;
 8014188:	8b3b      	ldrh	r3, [r7, #24]
 801418a:	86fb      	strh	r3, [r7, #54]	@ 0x36
            datarate = request.Req.Confirmed.Datarate;
 801418c:	7ebb      	ldrb	r3, [r7, #26]
 801418e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            break;
 8014192:	e011      	b.n	80141b8 <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 8014194:	2301      	movs	r3, #1
 8014196:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 801419a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801419e:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 80141a2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            fBuffer = request.Req.Proprietary.fBuffer;
 80141a6:	693b      	ldr	r3, [r7, #16]
 80141a8:	63bb      	str	r3, [r7, #56]	@ 0x38
            fBufferSize = request.Req.Proprietary.fBufferSize;
 80141aa:	8abb      	ldrh	r3, [r7, #20]
 80141ac:	86fb      	strh	r3, [r7, #54]	@ 0x36
            datarate = request.Req.Proprietary.Datarate;
 80141ae:	7dbb      	ldrb	r3, [r7, #22]
 80141b0:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            break;
 80141b4:	e000      	b.n	80141b8 <LoRaMacMcpsRequest+0x128>
            break;
 80141b6:	bf00      	nop
    }

    // Make sure that the input datarate is compliant
    // to the regional specification.
    getPhy.Attribute = PHY_MIN_TX_DR;
 80141b8:	2302      	movs	r3, #2
 80141ba:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80141be:	4b4f      	ldr	r3, [pc, #316]	@ (80142fc <LoRaMacMcpsRequest+0x26c>)
 80141c0:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80141c4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80141c8:	4b4c      	ldr	r3, [pc, #304]	@ (80142fc <LoRaMacMcpsRequest+0x26c>)
 80141ca:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80141ce:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80141d2:	4611      	mov	r1, r2
 80141d4:	4618      	mov	r0, r3
 80141d6:	f002 f96d 	bl	80164b4 <RegionGetPhyParam>
 80141da:	4603      	mov	r3, r0
 80141dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 80141de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80141e0:	b25b      	sxtb	r3, r3
 80141e2:	f997 2035 	ldrsb.w	r2, [r7, #53]	@ 0x35
 80141e6:	4293      	cmp	r3, r2
 80141e8:	bfb8      	it	lt
 80141ea:	4613      	movlt	r3, r2
 80141ec:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    // Apply minimum datarate in this special case.
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 80141f0:	4b42      	ldr	r3, [pc, #264]	@ (80142fc <LoRaMacMcpsRequest+0x26c>)
 80141f2:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 80141f6:	4a41      	ldr	r2, [pc, #260]	@ (80142fc <LoRaMacMcpsRequest+0x26c>)
 80141f8:	f892 1130 	ldrb.w	r1, [r2, #304]	@ 0x130
 80141fc:	4a3f      	ldr	r2, [pc, #252]	@ (80142fc <LoRaMacMcpsRequest+0x26c>)
 80141fe:	f892 211d 	ldrb.w	r2, [r2, #285]	@ 0x11d
 8014202:	4618      	mov	r0, r3
 8014204:	f7fc fad4 	bl	80107b0 <CheckForMinimumAbpDatarate>
 8014208:	4603      	mov	r3, r0
 801420a:	2b00      	cmp	r3, #0
 801420c:	d002      	beq.n	8014214 <LoRaMacMcpsRequest+0x184>
                                    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true )
    {
        datarate = ( int8_t )phyParam.Value;
 801420e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014210:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if( readyToSend == true )
 8014214:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8014218:	2b00      	cmp	r3, #0
 801421a:	d05f      	beq.n	80142dc <LoRaMacMcpsRequest+0x24c>
    {
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 801421c:	4b37      	ldr	r3, [pc, #220]	@ (80142fc <LoRaMacMcpsRequest+0x26c>)
 801421e:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 8014222:	f083 0301 	eor.w	r3, r3, #1
 8014226:	b2db      	uxtb	r3, r3
 8014228:	2b00      	cmp	r3, #0
 801422a:	d10e      	bne.n	801424a <LoRaMacMcpsRequest+0x1ba>
            ( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 801422c:	4b33      	ldr	r3, [pc, #204]	@ (80142fc <LoRaMacMcpsRequest+0x26c>)
 801422e:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 8014232:	4a32      	ldr	r2, [pc, #200]	@ (80142fc <LoRaMacMcpsRequest+0x26c>)
 8014234:	f892 1130 	ldrb.w	r1, [r2, #304]	@ 0x130
 8014238:	4a30      	ldr	r2, [pc, #192]	@ (80142fc <LoRaMacMcpsRequest+0x26c>)
 801423a:	f892 211d 	ldrb.w	r2, [r2, #285]	@ 0x11d
 801423e:	4618      	mov	r0, r3
 8014240:	f7fc fab6 	bl	80107b0 <CheckForMinimumAbpDatarate>
 8014244:	4603      	mov	r3, r0
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 8014246:	2b00      	cmp	r3, #0
 8014248:	d01c      	beq.n	8014284 <LoRaMacMcpsRequest+0x1f4>
                                          Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true ) )
        {
            verify.DatarateParams.Datarate = datarate;
 801424a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 801424e:	f887 3020 	strb.w	r3, [r7, #32]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8014252:	4b2a      	ldr	r3, [pc, #168]	@ (80142fc <LoRaMacMcpsRequest+0x26c>)
 8014254:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8014258:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 801425c:	4b27      	ldr	r3, [pc, #156]	@ (80142fc <LoRaMacMcpsRequest+0x26c>)
 801425e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8014262:	f107 0120 	add.w	r1, r7, #32
 8014266:	2205      	movs	r2, #5
 8014268:	4618      	mov	r0, r3
 801426a:	f002 f971 	bl	8016550 <RegionVerify>
 801426e:	4603      	mov	r3, r0
 8014270:	2b00      	cmp	r3, #0
 8014272:	d005      	beq.n	8014280 <LoRaMacMcpsRequest+0x1f0>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8014274:	f997 2020 	ldrsb.w	r2, [r7, #32]
 8014278:	4b20      	ldr	r3, [pc, #128]	@ (80142fc <LoRaMacMcpsRequest+0x26c>)
 801427a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 801427e:	e001      	b.n	8014284 <LoRaMacMcpsRequest+0x1f4>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8014280:	2303      	movs	r3, #3
 8014282:	e032      	b.n	80142ea <LoRaMacMcpsRequest+0x25a>
            }
        }

        // Verification of response timeout for class b and class c
        LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 8014284:	4b1d      	ldr	r3, [pc, #116]	@ (80142fc <LoRaMacMcpsRequest+0x26c>)
 8014286:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801428a:	4a1b      	ldr	r2, [pc, #108]	@ (80142f8 <LoRaMacMcpsRequest+0x268>)
 801428c:	f8d2 2498 	ldr.w	r2, [r2, #1176]	@ 0x498
 8014290:	4611      	mov	r1, r2
 8014292:	4618      	mov	r0, r3
 8014294:	f7fc fb78 	bl	8010988 <LoRaMacHandleResponseTimeout>
                                      MacCtx.ResponseTimeoutStartTime );

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx );
 8014298:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 801429a:	f897 103e 	ldrb.w	r1, [r7, #62]	@ 0x3e
 801429e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80142a2:	78fb      	ldrb	r3, [r7, #3]
 80142a4:	9300      	str	r3, [sp, #0]
 80142a6:	4613      	mov	r3, r2
 80142a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80142aa:	f7fd fb25 	bl	80118f8 <Send>
 80142ae:	4603      	mov	r3, r0
 80142b0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if( status == LORAMAC_STATUS_OK )
 80142b4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80142b8:	2b00      	cmp	r3, #0
 80142ba:	d10b      	bne.n	80142d4 <LoRaMacMcpsRequest+0x244>
        {
            MacCtx.McpsConfirm.McpsRequest = request.Type;
 80142bc:	7b3a      	ldrb	r2, [r7, #12]
 80142be:	4b0e      	ldr	r3, [pc, #56]	@ (80142f8 <LoRaMacMcpsRequest+0x268>)
 80142c0:	f883 2440 	strb.w	r2, [r3, #1088]	@ 0x440
            MacCtx.MacFlags.Bits.McpsReq = 1;
 80142c4:	4a0c      	ldr	r2, [pc, #48]	@ (80142f8 <LoRaMacMcpsRequest+0x268>)
 80142c6:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 80142ca:	f043 0301 	orr.w	r3, r3, #1
 80142ce:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
 80142d2:	e003      	b.n	80142dc <LoRaMacMcpsRequest+0x24c>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 80142d4:	4b08      	ldr	r3, [pc, #32]	@ (80142f8 <LoRaMacMcpsRequest+0x268>)
 80142d6:	2200      	movs	r2, #0
 80142d8:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
        }
    }
#endif /* LORAMAC_VERSION */

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 80142dc:	4b06      	ldr	r3, [pc, #24]	@ (80142f8 <LoRaMacMcpsRequest+0x268>)
 80142de:	f8d3 2494 	ldr.w	r2, [r3, #1172]	@ 0x494
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	611a      	str	r2, [r3, #16]

    return status;
 80142e6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 80142ea:	4618      	mov	r0, r3
 80142ec:	3740      	adds	r7, #64	@ 0x40
 80142ee:	46bd      	mov	sp, r7
 80142f0:	bdb0      	pop	{r4, r5, r7, pc}
 80142f2:	bf00      	nop
 80142f4:	20000b20 	.word	0x20000b20
 80142f8:	200006e0 	.word	0x200006e0
 80142fc:	20000bfc 	.word	0x20000bfc

08014300 <LoRaMacTestSetDutyCycleOn>:
    OnMacProcessNotify( );
}
#endif /* LORAMAC_VERSION */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 8014300:	b580      	push	{r7, lr}
 8014302:	b084      	sub	sp, #16
 8014304:	af00      	add	r7, sp, #0
 8014306:	4603      	mov	r3, r0
 8014308:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 801430a:	79fb      	ldrb	r3, [r7, #7]
 801430c:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 801430e:	4b0d      	ldr	r3, [pc, #52]	@ (8014344 <LoRaMacTestSetDutyCycleOn+0x44>)
 8014310:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8014314:	f107 010c 	add.w	r1, r7, #12
 8014318:	220f      	movs	r2, #15
 801431a:	4618      	mov	r0, r3
 801431c:	f002 f918 	bl	8016550 <RegionVerify>
 8014320:	4603      	mov	r3, r0
 8014322:	2b00      	cmp	r3, #0
 8014324:	d00a      	beq.n	801433c <LoRaMacTestSetDutyCycleOn+0x3c>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 8014326:	4a07      	ldr	r2, [pc, #28]	@ (8014344 <LoRaMacTestSetDutyCycleOn+0x44>)
 8014328:	79fb      	ldrb	r3, [r7, #7]
 801432a:	f882 311c 	strb.w	r3, [r2, #284]	@ 0x11c
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 801432e:	4a06      	ldr	r2, [pc, #24]	@ (8014348 <LoRaMacTestSetDutyCycleOn+0x48>)
 8014330:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 8014334:	f043 0320 	orr.w	r3, r3, #32
 8014338:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    }
}
 801433c:	bf00      	nop
 801433e:	3710      	adds	r7, #16
 8014340:	46bd      	mov	sp, r7
 8014342:	bd80      	pop	{r7, pc}
 8014344:	20000bfc 	.word	0x20000bfc
 8014348:	200006e0 	.word	0x200006e0

0801434c <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 801434c:	b580      	push	{r7, lr}
 801434e:	af00      	add	r7, sp, #0
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 8014350:	f7fe fe94 	bl	801307c <LoRaMacStop>
 8014354:	4603      	mov	r3, r0
 8014356:	2b00      	cmp	r3, #0
 8014358:	d112      	bne.n	8014380 <LoRaMacDeInitialization+0x34>
    {
        // Stop Timers
        TimerStop( &MacCtx.TxDelayedTimer );
 801435a:	480b      	ldr	r0, [pc, #44]	@ (8014388 <LoRaMacDeInitialization+0x3c>)
 801435c:	f00a f840 	bl	801e3e0 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 8014360:	480a      	ldr	r0, [pc, #40]	@ (801438c <LoRaMacDeInitialization+0x40>)
 8014362:	f00a f83d 	bl	801e3e0 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 8014366:	480a      	ldr	r0, [pc, #40]	@ (8014390 <LoRaMacDeInitialization+0x44>)
 8014368:	f00a f83a 	bl	801e3e0 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        TimerStop( &MacCtx.AckTimeoutTimer );
#endif /* LORAMAC_VERSION */

        // Take care about class B
        LoRaMacClassBHaltBeaconing( );
 801436c:	f000 f94a 	bl	8014604 <LoRaMacClassBHaltBeaconing>

        // Reset Mac parameters
        ResetMacParameters( false );
 8014370:	2000      	movs	r0, #0
 8014372:	f7fd fe1f 	bl	8011fb4 <ResetMacParameters>

        // Switch off Radio
        Radio.Sleep( );
 8014376:	4b07      	ldr	r3, [pc, #28]	@ (8014394 <LoRaMacDeInitialization+0x48>)
 8014378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801437a:	4798      	blx	r3

        // Return success
        return LORAMAC_STATUS_OK;
 801437c:	2300      	movs	r3, #0
 801437e:	e000      	b.n	8014382 <LoRaMacDeInitialization+0x36>
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 8014380:	2301      	movs	r3, #1
    }
}
 8014382:	4618      	mov	r0, r3
 8014384:	bd80      	pop	{r7, pc}
 8014386:	bf00      	nop
 8014388:	20000a48 	.word	0x20000a48
 801438c:	20000a60 	.word	0x20000a60
 8014390:	20000a78 	.word	0x20000a78
 8014394:	0801fccc 	.word	0x0801fccc

08014398 <LoRaMacAdrCalcNext>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut,
                         uint8_t* nbTransOut, uint32_t* adrAckCounter )
{
 8014398:	b580      	push	{r7, lr}
 801439a:	b08c      	sub	sp, #48	@ 0x30
 801439c:	af00      	add	r7, sp, #0
 801439e:	60f8      	str	r0, [r7, #12]
 80143a0:	60b9      	str	r1, [r7, #8]
 80143a2:	607a      	str	r2, [r7, #4]
 80143a4:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 80143a6:	2300      	movs	r3, #0
 80143a8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    int8_t datarate = adrNext->Datarate;
 80143ac:	68fb      	ldr	r3, [r7, #12]
 80143ae:	7b1b      	ldrb	r3, [r3, #12]
 80143b0:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int8_t txPower = adrNext->TxPower;
 80143b4:	68fb      	ldr	r3, [r7, #12]
 80143b6:	7b5b      	ldrb	r3, [r3, #13]
 80143b8:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint8_t nbTrans = adrNext->NbTrans;
 80143bc:	68fb      	ldr	r3, [r7, #12]
 80143be:	7b9b      	ldrb	r3, [r3, #14]
 80143c0:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 80143c4:	68fb      	ldr	r3, [r7, #12]
 80143c6:	685a      	ldr	r2, [r3, #4]
 80143c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80143ca:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 80143cc:	68fb      	ldr	r3, [r7, #12]
 80143ce:	785b      	ldrb	r3, [r3, #1]
 80143d0:	2b00      	cmp	r3, #0
 80143d2:	f000 8088 	beq.w	80144e6 <LoRaMacAdrCalcNext+0x14e>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 80143d6:	2302      	movs	r3, #2
 80143d8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 80143dc:	68fb      	ldr	r3, [r7, #12]
 80143de:	7bdb      	ldrb	r3, [r3, #15]
 80143e0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80143e4:	68fb      	ldr	r3, [r7, #12]
 80143e6:	7c1b      	ldrb	r3, [r3, #16]
 80143e8:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80143ec:	4611      	mov	r1, r2
 80143ee:	4618      	mov	r0, r3
 80143f0:	f002 f860 	bl	80164b4 <RegionGetPhyParam>
 80143f4:	4603      	mov	r3, r0
 80143f6:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 80143f8:	6a3b      	ldr	r3, [r7, #32]
 80143fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        datarate = MAX( datarate, minTxDatarate );
 80143fe:	f997 202b 	ldrsb.w	r2, [r7, #43]	@ 0x2b
 8014402:	f997 302e 	ldrsb.w	r3, [r7, #46]	@ 0x2e
 8014406:	4293      	cmp	r3, r2
 8014408:	bfb8      	it	lt
 801440a:	4613      	movlt	r3, r2
 801440c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

        // Verify if ADR ack req bit needs to be set.
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 8014410:	68fb      	ldr	r3, [r7, #12]
 8014412:	685b      	ldr	r3, [r3, #4]
 8014414:	68fa      	ldr	r2, [r7, #12]
 8014416:	8912      	ldrh	r2, [r2, #8]
 8014418:	4293      	cmp	r3, r2
 801441a:	d302      	bcc.n	8014422 <LoRaMacAdrCalcNext+0x8a>
        {
            adrAckReq = true;
 801441c:	2301      	movs	r3, #1
 801441e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        }

        // Verify, if we need to set the TX power to default
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8014422:	68fb      	ldr	r3, [r7, #12]
 8014424:	685b      	ldr	r3, [r3, #4]
 8014426:	68fa      	ldr	r2, [r7, #12]
 8014428:	8912      	ldrh	r2, [r2, #8]
 801442a:	4611      	mov	r1, r2
 801442c:	68fa      	ldr	r2, [r7, #12]
 801442e:	8952      	ldrh	r2, [r2, #10]
 8014430:	440a      	add	r2, r1
 8014432:	4293      	cmp	r3, r2
 8014434:	d30f      	bcc.n	8014456 <LoRaMacAdrCalcNext+0xbe>
        {
            // Set TX Power to default
            getPhy.Attribute = PHY_DEF_TX_POWER;
 8014436:	230a      	movs	r3, #10
 8014438:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 801443c:	68fb      	ldr	r3, [r7, #12]
 801443e:	7c1b      	ldrb	r3, [r3, #16]
 8014440:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8014444:	4611      	mov	r1, r2
 8014446:	4618      	mov	r0, r3
 8014448:	f002 f834 	bl	80164b4 <RegionGetPhyParam>
 801444c:	4603      	mov	r3, r0
 801444e:	623b      	str	r3, [r7, #32]
            txPower = phyParam.Value;
 8014450:	6a3b      	ldr	r3, [r7, #32]
 8014452:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
        }

        // Verify, if we need to decrease the data rate
        if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + ( adrNext->AdrAckDelay << 1 ) ) )
 8014456:	68fb      	ldr	r3, [r7, #12]
 8014458:	685b      	ldr	r3, [r3, #4]
 801445a:	68fa      	ldr	r2, [r7, #12]
 801445c:	8912      	ldrh	r2, [r2, #8]
 801445e:	4611      	mov	r1, r2
 8014460:	68fa      	ldr	r2, [r7, #12]
 8014462:	8952      	ldrh	r2, [r2, #10]
 8014464:	0052      	lsls	r2, r2, #1
 8014466:	440a      	add	r2, r1
 8014468:	4293      	cmp	r3, r2
 801446a:	d33c      	bcc.n	80144e6 <LoRaMacAdrCalcNext+0x14e>
        {
            // Perform actions with every adrNext->AdrAckDelay only
            if( ( ( adrNext->AdrAckCounter - adrNext->AdrAckLimit ) % adrNext->AdrAckDelay ) == 0 )
 801446c:	68fb      	ldr	r3, [r7, #12]
 801446e:	685b      	ldr	r3, [r3, #4]
 8014470:	68fa      	ldr	r2, [r7, #12]
 8014472:	8912      	ldrh	r2, [r2, #8]
 8014474:	1a9b      	subs	r3, r3, r2
 8014476:	68fa      	ldr	r2, [r7, #12]
 8014478:	8952      	ldrh	r2, [r2, #10]
 801447a:	fbb3 f1f2 	udiv	r1, r3, r2
 801447e:	fb01 f202 	mul.w	r2, r1, r2
 8014482:	1a9b      	subs	r3, r3, r2
 8014484:	2b00      	cmp	r3, #0
 8014486:	d12e      	bne.n	80144e6 <LoRaMacAdrCalcNext+0x14e>
            {
                if( datarate == minTxDatarate )
 8014488:	f997 202e 	ldrsb.w	r2, [r7, #46]	@ 0x2e
 801448c:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8014490:	429a      	cmp	r2, r3
 8014492:	d110      	bne.n	80144b6 <LoRaMacAdrCalcNext+0x11e>
                {
                    // Restore the channel mask
                    if( adrNext->UpdateChanMask == true )
 8014494:	68fb      	ldr	r3, [r7, #12]
 8014496:	781b      	ldrb	r3, [r3, #0]
 8014498:	2b00      	cmp	r3, #0
 801449a:	d009      	beq.n	80144b0 <LoRaMacAdrCalcNext+0x118>
                    {
                        InitDefaultsParams_t params;
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 801449c:	2302      	movs	r3, #2
 801449e:	773b      	strb	r3, [r7, #28]
                        RegionInitDefaults( adrNext->Region, &params );
 80144a0:	68fb      	ldr	r3, [r7, #12]
 80144a2:	7c1b      	ldrb	r3, [r3, #16]
 80144a4:	f107 0210 	add.w	r2, r7, #16
 80144a8:	4611      	mov	r1, r2
 80144aa:	4618      	mov	r0, r3
 80144ac:	f002 f839 	bl	8016522 <RegionInitDefaults>
                    }

                    // Restore NbTrans
                    nbTrans = 1;
 80144b0:	2301      	movs	r3, #1
 80144b2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                }

                // Decrease the datarate
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 80144b6:	2321      	movs	r3, #33	@ 0x21
 80144b8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
                getPhy.Datarate = datarate;
 80144bc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80144c0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 80144c4:	68fb      	ldr	r3, [r7, #12]
 80144c6:	7bdb      	ldrb	r3, [r3, #15]
 80144c8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80144cc:	68fb      	ldr	r3, [r7, #12]
 80144ce:	7c1b      	ldrb	r3, [r3, #16]
 80144d0:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80144d4:	4611      	mov	r1, r2
 80144d6:	4618      	mov	r0, r3
 80144d8:	f001 ffec 	bl	80164b4 <RegionGetPhyParam>
 80144dc:	4603      	mov	r3, r0
 80144de:	623b      	str	r3, [r7, #32]
                datarate = phyParam.Value;
 80144e0:	6a3b      	ldr	r3, [r7, #32]
 80144e2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
            }
        }
    }

    *drOut = datarate;
 80144e6:	68bb      	ldr	r3, [r7, #8]
 80144e8:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 80144ec:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 80144ee:	687b      	ldr	r3, [r7, #4]
 80144f0:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 80144f4:	701a      	strb	r2, [r3, #0]
    *nbTransOut = nbTrans;
 80144f6:	683b      	ldr	r3, [r7, #0]
 80144f8:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80144fc:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 80144fe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8014502:	4618      	mov	r0, r3
 8014504:	3730      	adds	r7, #48	@ 0x30
 8014506:	46bd      	mov	sp, r7
 8014508:	bd80      	pop	{r7, pc}

0801450a <LoRaMacClassBInit>:
#endif /* LORAMAC_VERSION */

#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmData_t* nvm )
{
 801450a:	b480      	push	{r7}
 801450c:	b085      	sub	sp, #20
 801450e:	af00      	add	r7, sp, #0
 8014510:	60f8      	str	r0, [r7, #12]
 8014512:	60b9      	str	r1, [r7, #8]
 8014514:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014516:	bf00      	nop
 8014518:	3714      	adds	r7, #20
 801451a:	46bd      	mov	sp, r7
 801451c:	bc80      	pop	{r7}
 801451e:	4770      	bx	lr

08014520 <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 8014520:	b480      	push	{r7}
 8014522:	b083      	sub	sp, #12
 8014524:	af00      	add	r7, sp, #0
 8014526:	4603      	mov	r3, r0
 8014528:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801452a:	bf00      	nop
 801452c:	370c      	adds	r7, #12
 801452e:	46bd      	mov	sp, r7
 8014530:	bc80      	pop	{r7}
 8014532:	4770      	bx	lr

08014534 <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 8014534:	b480      	push	{r7}
 8014536:	b083      	sub	sp, #12
 8014538:	af00      	add	r7, sp, #0
 801453a:	4603      	mov	r3, r0
 801453c:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801453e:	bf00      	nop
 8014540:	370c      	adds	r7, #12
 8014542:	46bd      	mov	sp, r7
 8014544:	bc80      	pop	{r7}
 8014546:	4770      	bx	lr

08014548 <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 8014548:	b480      	push	{r7}
 801454a:	b083      	sub	sp, #12
 801454c:	af00      	add	r7, sp, #0
 801454e:	4603      	mov	r3, r0
 8014550:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014552:	bf00      	nop
 8014554:	370c      	adds	r7, #12
 8014556:	46bd      	mov	sp, r7
 8014558:	bc80      	pop	{r7}
 801455a:	4770      	bx	lr

0801455c <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 801455c:	b480      	push	{r7}
 801455e:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 8014560:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014562:	4618      	mov	r0, r3
 8014564:	46bd      	mov	sp, r7
 8014566:	bc80      	pop	{r7}
 8014568:	4770      	bx	lr

0801456a <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 801456a:	b480      	push	{r7}
 801456c:	b083      	sub	sp, #12
 801456e:	af00      	add	r7, sp, #0
 8014570:	6078      	str	r0, [r7, #4]
    Ctx.BeaconCtx.TimeStamp = TimerGetCurrentTime( );
    TimerStop( &Ctx.BeaconTimer );
    LoRaMacClassBEvents.Events.Beacon = 1;
    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014572:	bf00      	nop
 8014574:	370c      	adds	r7, #12
 8014576:	46bd      	mov	sp, r7
 8014578:	bc80      	pop	{r7}
 801457a:	4770      	bx	lr

0801457c <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 801457c:	b480      	push	{r7}
 801457e:	b083      	sub	sp, #12
 8014580:	af00      	add	r7, sp, #0
 8014582:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.PingSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014584:	bf00      	nop
 8014586:	370c      	adds	r7, #12
 8014588:	46bd      	mov	sp, r7
 801458a:	bc80      	pop	{r7}
 801458c:	4770      	bx	lr

0801458e <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 801458e:	b480      	push	{r7}
 8014590:	b083      	sub	sp, #12
 8014592:	af00      	add	r7, sp, #0
 8014594:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.MulticastSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014596:	bf00      	nop
 8014598:	370c      	adds	r7, #12
 801459a:	46bd      	mov	sp, r7
 801459c:	bc80      	pop	{r7}
 801459e:	4770      	bx	lr

080145a0 <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 80145a0:	b480      	push	{r7}
 80145a2:	b083      	sub	sp, #12
 80145a4:	af00      	add	r7, sp, #0
 80145a6:	6078      	str	r0, [r7, #4]
 80145a8:	460b      	mov	r3, r1
 80145aa:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 80145ac:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80145ae:	4618      	mov	r0, r3
 80145b0:	370c      	adds	r7, #12
 80145b2:	46bd      	mov	sp, r7
 80145b4:	bc80      	pop	{r7}
 80145b6:	4770      	bx	lr

080145b8 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 80145b8:	b480      	push	{r7}
 80145ba:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80145bc:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80145be:	4618      	mov	r0, r3
 80145c0:	46bd      	mov	sp, r7
 80145c2:	bc80      	pop	{r7}
 80145c4:	4770      	bx	lr

080145c6 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 80145c6:	b480      	push	{r7}
 80145c8:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80145ca:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80145cc:	4618      	mov	r0, r3
 80145ce:	46bd      	mov	sp, r7
 80145d0:	bc80      	pop	{r7}
 80145d2:	4770      	bx	lr

080145d4 <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 80145d4:	b480      	push	{r7}
 80145d6:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80145d8:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80145da:	4618      	mov	r0, r3
 80145dc:	46bd      	mov	sp, r7
 80145de:	bc80      	pop	{r7}
 80145e0:	4770      	bx	lr

080145e2 <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 80145e2:	b480      	push	{r7}
 80145e4:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80145e6:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80145e8:	4618      	mov	r0, r3
 80145ea:	46bd      	mov	sp, r7
 80145ec:	bc80      	pop	{r7}
 80145ee:	4770      	bx	lr

080145f0 <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 80145f0:	b480      	push	{r7}
 80145f2:	b083      	sub	sp, #12
 80145f4:	af00      	add	r7, sp, #0
 80145f6:	4603      	mov	r3, r0
 80145f8:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80145fa:	bf00      	nop
 80145fc:	370c      	adds	r7, #12
 80145fe:	46bd      	mov	sp, r7
 8014600:	bc80      	pop	{r7}
 8014602:	4770      	bx	lr

08014604 <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 8014604:	b480      	push	{r7}
 8014606:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014608:	bf00      	nop
 801460a:	46bd      	mov	sp, r7
 801460c:	bc80      	pop	{r7}
 801460e:	4770      	bx	lr

08014610 <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 8014610:	b480      	push	{r7}
 8014612:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014614:	bf00      	nop
 8014616:	46bd      	mov	sp, r7
 8014618:	bc80      	pop	{r7}
 801461a:	4770      	bx	lr

0801461c <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 801461c:	b480      	push	{r7}
 801461e:	b083      	sub	sp, #12
 8014620:	af00      	add	r7, sp, #0
 8014622:	4603      	mov	r3, r0
 8014624:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8014626:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014628:	4618      	mov	r0, r3
 801462a:	370c      	adds	r7, #12
 801462c:	46bd      	mov	sp, r7
 801462e:	bc80      	pop	{r7}
 8014630:	4770      	bx	lr

08014632 <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 8014632:	b480      	push	{r7}
 8014634:	b083      	sub	sp, #12
 8014636:	af00      	add	r7, sp, #0
 8014638:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 801463a:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801463c:	4618      	mov	r0, r3
 801463e:	370c      	adds	r7, #12
 8014640:	46bd      	mov	sp, r7
 8014642:	bc80      	pop	{r7}
 8014644:	4770      	bx	lr

08014646 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 8014646:	b480      	push	{r7}
 8014648:	b083      	sub	sp, #12
 801464a:	af00      	add	r7, sp, #0
 801464c:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 801464e:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014650:	4618      	mov	r0, r3
 8014652:	370c      	adds	r7, #12
 8014654:	46bd      	mov	sp, r7
 8014656:	bc80      	pop	{r7}
 8014658:	4770      	bx	lr

0801465a <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 801465a:	b480      	push	{r7}
 801465c:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801465e:	bf00      	nop
 8014660:	46bd      	mov	sp, r7
 8014662:	bc80      	pop	{r7}
 8014664:	4770      	bx	lr

08014666 <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 8014666:	b480      	push	{r7}
 8014668:	b083      	sub	sp, #12
 801466a:	af00      	add	r7, sp, #0
 801466c:	4603      	mov	r3, r0
 801466e:	6039      	str	r1, [r7, #0]
 8014670:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 8014672:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014674:	4618      	mov	r0, r3
 8014676:	370c      	adds	r7, #12
 8014678:	46bd      	mov	sp, r7
 801467a:	bc80      	pop	{r7}
 801467c:	4770      	bx	lr

0801467e <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 801467e:	b480      	push	{r7}
 8014680:	b083      	sub	sp, #12
 8014682:	af00      	add	r7, sp, #0
 8014684:	4603      	mov	r3, r0
 8014686:	603a      	str	r2, [r7, #0]
 8014688:	80fb      	strh	r3, [r7, #6]
 801468a:	460b      	mov	r3, r1
 801468c:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801468e:	bf00      	nop
 8014690:	370c      	adds	r7, #12
 8014692:	46bd      	mov	sp, r7
 8014694:	bc80      	pop	{r7}
 8014696:	4770      	bx	lr

08014698 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 8014698:	b480      	push	{r7}
 801469a:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801469c:	bf00      	nop
 801469e:	46bd      	mov	sp, r7
 80146a0:	bc80      	pop	{r7}
 80146a2:	4770      	bx	lr

080146a4 <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 80146a4:	b480      	push	{r7}
 80146a6:	b083      	sub	sp, #12
 80146a8:	af00      	add	r7, sp, #0
 80146aa:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 80146ac:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80146ae:	4618      	mov	r0, r3
 80146b0:	370c      	adds	r7, #12
 80146b2:	46bd      	mov	sp, r7
 80146b4:	bc80      	pop	{r7}
 80146b6:	4770      	bx	lr

080146b8 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 80146b8:	b480      	push	{r7}
 80146ba:	b083      	sub	sp, #12
 80146bc:	af00      	add	r7, sp, #0
 80146be:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 80146c0:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80146c2:	4618      	mov	r0, r3
 80146c4:	370c      	adds	r7, #12
 80146c6:	46bd      	mov	sp, r7
 80146c8:	bc80      	pop	{r7}
 80146ca:	4770      	bx	lr

080146cc <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 80146cc:	b480      	push	{r7}
 80146ce:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80146d0:	bf00      	nop
 80146d2:	46bd      	mov	sp, r7
 80146d4:	bc80      	pop	{r7}
 80146d6:	4770      	bx	lr

080146d8 <LoRaMacClassBSetFPendingBit>:
#endif /* LORAMAC_CLASSB_ENABLED */
}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
void LoRaMacClassBSetFPendingBit( uint32_t address, uint8_t fPendingSet )
{
 80146d8:	b480      	push	{r7}
 80146da:	b083      	sub	sp, #12
 80146dc:	af00      	add	r7, sp, #0
 80146de:	6078      	str	r0, [r7, #4]
 80146e0:	460b      	mov	r3, r1
 80146e2:	70fb      	strb	r3, [r7, #3]
            }
            cur++;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80146e4:	bf00      	nop
 80146e6:	370c      	adds	r7, #12
 80146e8:	46bd      	mov	sp, r7
 80146ea:	bc80      	pop	{r7}
 80146ec:	4770      	bx	lr

080146ee <LoRaMacClassBProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacClassBProcess( void )
{
 80146ee:	b480      	push	{r7}
 80146f0:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80146f2:	bf00      	nop
 80146f4:	46bd      	mov	sp, r7
 80146f6:	bc80      	pop	{r7}
 80146f8:	4770      	bx	lr

080146fa <IsSlotFree>:
 *
 * \param [in]    slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 80146fa:	b480      	push	{r7}
 80146fc:	b085      	sub	sp, #20
 80146fe:	af00      	add	r7, sp, #0
 8014700:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 8014702:	687b      	ldr	r3, [r7, #4]
 8014704:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8014706:	2300      	movs	r3, #0
 8014708:	81fb      	strh	r3, [r7, #14]
 801470a:	e00a      	b.n	8014722 <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 801470c:	89fb      	ldrh	r3, [r7, #14]
 801470e:	68ba      	ldr	r2, [r7, #8]
 8014710:	4413      	add	r3, r2
 8014712:	781b      	ldrb	r3, [r3, #0]
 8014714:	2b00      	cmp	r3, #0
 8014716:	d001      	beq.n	801471c <IsSlotFree+0x22>
        {
            return false;
 8014718:	2300      	movs	r3, #0
 801471a:	e006      	b.n	801472a <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 801471c:	89fb      	ldrh	r3, [r7, #14]
 801471e:	3301      	adds	r3, #1
 8014720:	81fb      	strh	r3, [r7, #14]
 8014722:	89fb      	ldrh	r3, [r7, #14]
 8014724:	2b0f      	cmp	r3, #15
 8014726:	d9f1      	bls.n	801470c <IsSlotFree+0x12>
        }
    }
    return true;
 8014728:	2301      	movs	r3, #1
}
 801472a:	4618      	mov	r0, r3
 801472c:	3714      	adds	r7, #20
 801472e:	46bd      	mov	sp, r7
 8014730:	bc80      	pop	{r7}
 8014732:	4770      	bx	lr

08014734 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 8014734:	b580      	push	{r7, lr}
 8014736:	b082      	sub	sp, #8
 8014738:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 801473a:	2300      	movs	r3, #0
 801473c:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 801473e:	e007      	b.n	8014750 <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 8014740:	79fb      	ldrb	r3, [r7, #7]
 8014742:	3301      	adds	r3, #1
 8014744:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 8014746:	79fb      	ldrb	r3, [r7, #7]
 8014748:	2b20      	cmp	r3, #32
 801474a:	d101      	bne.n	8014750 <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 801474c:	2300      	movs	r3, #0
 801474e:	e012      	b.n	8014776 <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8014750:	79fb      	ldrb	r3, [r7, #7]
 8014752:	011b      	lsls	r3, r3, #4
 8014754:	3308      	adds	r3, #8
 8014756:	4a0a      	ldr	r2, [pc, #40]	@ (8014780 <MallocNewMacCommandSlot+0x4c>)
 8014758:	4413      	add	r3, r2
 801475a:	4618      	mov	r0, r3
 801475c:	f7ff ffcd 	bl	80146fa <IsSlotFree>
 8014760:	4603      	mov	r3, r0
 8014762:	f083 0301 	eor.w	r3, r3, #1
 8014766:	b2db      	uxtb	r3, r3
 8014768:	2b00      	cmp	r3, #0
 801476a:	d1e9      	bne.n	8014740 <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 801476c:	79fb      	ldrb	r3, [r7, #7]
 801476e:	011b      	lsls	r3, r3, #4
 8014770:	3308      	adds	r3, #8
 8014772:	4a03      	ldr	r2, [pc, #12]	@ (8014780 <MallocNewMacCommandSlot+0x4c>)
 8014774:	4413      	add	r3, r2
}
 8014776:	4618      	mov	r0, r3
 8014778:	3708      	adds	r7, #8
 801477a:	46bd      	mov	sp, r7
 801477c:	bd80      	pop	{r7, pc}
 801477e:	bf00      	nop
 8014780:	2000183c 	.word	0x2000183c

08014784 <FreeMacCommandSlot>:
 * \param [in]    slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 8014784:	b580      	push	{r7, lr}
 8014786:	b082      	sub	sp, #8
 8014788:	af00      	add	r7, sp, #0
 801478a:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 801478c:	687b      	ldr	r3, [r7, #4]
 801478e:	2b00      	cmp	r3, #0
 8014790:	d101      	bne.n	8014796 <FreeMacCommandSlot+0x12>
    {
        return false;
 8014792:	2300      	movs	r3, #0
 8014794:	e005      	b.n	80147a2 <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 8014796:	2210      	movs	r2, #16
 8014798:	2100      	movs	r1, #0
 801479a:	6878      	ldr	r0, [r7, #4]
 801479c:	f005 fcc4 	bl	801a128 <memset1>

    return true;
 80147a0:	2301      	movs	r3, #1
}
 80147a2:	4618      	mov	r0, r3
 80147a4:	3708      	adds	r7, #8
 80147a6:	46bd      	mov	sp, r7
 80147a8:	bd80      	pop	{r7, pc}

080147aa <LinkedListInit>:
 *
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 80147aa:	b480      	push	{r7}
 80147ac:	b083      	sub	sp, #12
 80147ae:	af00      	add	r7, sp, #0
 80147b0:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 80147b2:	687b      	ldr	r3, [r7, #4]
 80147b4:	2b00      	cmp	r3, #0
 80147b6:	d101      	bne.n	80147bc <LinkedListInit+0x12>
    {
        return false;
 80147b8:	2300      	movs	r3, #0
 80147ba:	e006      	b.n	80147ca <LinkedListInit+0x20>
    }

    list->First = NULL;
 80147bc:	687b      	ldr	r3, [r7, #4]
 80147be:	2200      	movs	r2, #0
 80147c0:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 80147c2:	687b      	ldr	r3, [r7, #4]
 80147c4:	2200      	movs	r2, #0
 80147c6:	605a      	str	r2, [r3, #4]

    return true;
 80147c8:	2301      	movs	r3, #1
}
 80147ca:	4618      	mov	r0, r3
 80147cc:	370c      	adds	r7, #12
 80147ce:	46bd      	mov	sp, r7
 80147d0:	bc80      	pop	{r7}
 80147d2:	4770      	bx	lr

080147d4 <LinkedListAdd>:
 * \param [in]    list           - List where the element shall be added.
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 80147d4:	b480      	push	{r7}
 80147d6:	b083      	sub	sp, #12
 80147d8:	af00      	add	r7, sp, #0
 80147da:	6078      	str	r0, [r7, #4]
 80147dc:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	2b00      	cmp	r3, #0
 80147e2:	d002      	beq.n	80147ea <LinkedListAdd+0x16>
 80147e4:	683b      	ldr	r3, [r7, #0]
 80147e6:	2b00      	cmp	r3, #0
 80147e8:	d101      	bne.n	80147ee <LinkedListAdd+0x1a>
    {
        return false;
 80147ea:	2300      	movs	r3, #0
 80147ec:	e015      	b.n	801481a <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 80147ee:	687b      	ldr	r3, [r7, #4]
 80147f0:	681b      	ldr	r3, [r3, #0]
 80147f2:	2b00      	cmp	r3, #0
 80147f4:	d102      	bne.n	80147fc <LinkedListAdd+0x28>
    {
        list->First = element;
 80147f6:	687b      	ldr	r3, [r7, #4]
 80147f8:	683a      	ldr	r2, [r7, #0]
 80147fa:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	685b      	ldr	r3, [r3, #4]
 8014800:	2b00      	cmp	r3, #0
 8014802:	d003      	beq.n	801480c <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	685b      	ldr	r3, [r3, #4]
 8014808:	683a      	ldr	r2, [r7, #0]
 801480a:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 801480c:	683b      	ldr	r3, [r7, #0]
 801480e:	2200      	movs	r2, #0
 8014810:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	683a      	ldr	r2, [r7, #0]
 8014816:	605a      	str	r2, [r3, #4]

    return true;
 8014818:	2301      	movs	r3, #1
}
 801481a:	4618      	mov	r0, r3
 801481c:	370c      	adds	r7, #12
 801481e:	46bd      	mov	sp, r7
 8014820:	bc80      	pop	{r7}
 8014822:	4770      	bx	lr

08014824 <LinkedListGetPrevious>:
 * \param [in]    list           - List
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 8014824:	b480      	push	{r7}
 8014826:	b085      	sub	sp, #20
 8014828:	af00      	add	r7, sp, #0
 801482a:	6078      	str	r0, [r7, #4]
 801482c:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 801482e:	687b      	ldr	r3, [r7, #4]
 8014830:	2b00      	cmp	r3, #0
 8014832:	d002      	beq.n	801483a <LinkedListGetPrevious+0x16>
 8014834:	683b      	ldr	r3, [r7, #0]
 8014836:	2b00      	cmp	r3, #0
 8014838:	d101      	bne.n	801483e <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 801483a:	2300      	movs	r3, #0
 801483c:	e016      	b.n	801486c <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 801483e:	687b      	ldr	r3, [r7, #4]
 8014840:	681b      	ldr	r3, [r3, #0]
 8014842:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 8014844:	683a      	ldr	r2, [r7, #0]
 8014846:	68fb      	ldr	r3, [r7, #12]
 8014848:	429a      	cmp	r2, r3
 801484a:	d00c      	beq.n	8014866 <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 801484c:	e002      	b.n	8014854 <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 801484e:	68fb      	ldr	r3, [r7, #12]
 8014850:	681b      	ldr	r3, [r3, #0]
 8014852:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8014854:	68fb      	ldr	r3, [r7, #12]
 8014856:	2b00      	cmp	r3, #0
 8014858:	d007      	beq.n	801486a <LinkedListGetPrevious+0x46>
 801485a:	68fb      	ldr	r3, [r7, #12]
 801485c:	681b      	ldr	r3, [r3, #0]
 801485e:	683a      	ldr	r2, [r7, #0]
 8014860:	429a      	cmp	r2, r3
 8014862:	d1f4      	bne.n	801484e <LinkedListGetPrevious+0x2a>
 8014864:	e001      	b.n	801486a <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 8014866:	2300      	movs	r3, #0
 8014868:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 801486a:	68fb      	ldr	r3, [r7, #12]
}
 801486c:	4618      	mov	r0, r3
 801486e:	3714      	adds	r7, #20
 8014870:	46bd      	mov	sp, r7
 8014872:	bc80      	pop	{r7}
 8014874:	4770      	bx	lr

08014876 <LinkedListRemove>:
 * \param [in]    list           - List where the element shall be removed from.
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 8014876:	b580      	push	{r7, lr}
 8014878:	b084      	sub	sp, #16
 801487a:	af00      	add	r7, sp, #0
 801487c:	6078      	str	r0, [r7, #4]
 801487e:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	2b00      	cmp	r3, #0
 8014884:	d002      	beq.n	801488c <LinkedListRemove+0x16>
 8014886:	683b      	ldr	r3, [r7, #0]
 8014888:	2b00      	cmp	r3, #0
 801488a:	d101      	bne.n	8014890 <LinkedListRemove+0x1a>
    {
        return false;
 801488c:	2300      	movs	r3, #0
 801488e:	e020      	b.n	80148d2 <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 8014890:	6839      	ldr	r1, [r7, #0]
 8014892:	6878      	ldr	r0, [r7, #4]
 8014894:	f7ff ffc6 	bl	8014824 <LinkedListGetPrevious>
 8014898:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 801489a:	687b      	ldr	r3, [r7, #4]
 801489c:	681b      	ldr	r3, [r3, #0]
 801489e:	683a      	ldr	r2, [r7, #0]
 80148a0:	429a      	cmp	r2, r3
 80148a2:	d103      	bne.n	80148ac <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 80148a4:	683b      	ldr	r3, [r7, #0]
 80148a6:	681a      	ldr	r2, [r3, #0]
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	685b      	ldr	r3, [r3, #4]
 80148b0:	683a      	ldr	r2, [r7, #0]
 80148b2:	429a      	cmp	r2, r3
 80148b4:	d102      	bne.n	80148bc <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	68fa      	ldr	r2, [r7, #12]
 80148ba:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 80148bc:	68fb      	ldr	r3, [r7, #12]
 80148be:	2b00      	cmp	r3, #0
 80148c0:	d003      	beq.n	80148ca <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 80148c2:	683b      	ldr	r3, [r7, #0]
 80148c4:	681a      	ldr	r2, [r3, #0]
 80148c6:	68fb      	ldr	r3, [r7, #12]
 80148c8:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 80148ca:	683b      	ldr	r3, [r7, #0]
 80148cc:	2200      	movs	r2, #0
 80148ce:	601a      	str	r2, [r3, #0]

    return true;
 80148d0:	2301      	movs	r3, #1
}
 80148d2:	4618      	mov	r0, r3
 80148d4:	3710      	adds	r7, #16
 80148d6:	46bd      	mov	sp, r7
 80148d8:	bd80      	pop	{r7, pc}
	...

080148dc <IsSticky>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 80148dc:	b480      	push	{r7}
 80148de:	b083      	sub	sp, #12
 80148e0:	af00      	add	r7, sp, #0
 80148e2:	4603      	mov	r3, r0
 80148e4:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 80148e6:	79fb      	ldrb	r3, [r7, #7]
 80148e8:	2b11      	cmp	r3, #17
 80148ea:	bf8c      	ite	hi
 80148ec:	2201      	movhi	r2, #1
 80148ee:	2200      	movls	r2, #0
 80148f0:	b2d2      	uxtb	r2, r2
 80148f2:	2a00      	cmp	r2, #0
 80148f4:	d10d      	bne.n	8014912 <IsSticky+0x36>
 80148f6:	4a0a      	ldr	r2, [pc, #40]	@ (8014920 <IsSticky+0x44>)
 80148f8:	fa22 f303 	lsr.w	r3, r2, r3
 80148fc:	f003 0301 	and.w	r3, r3, #1
 8014900:	2b00      	cmp	r3, #0
 8014902:	bf14      	ite	ne
 8014904:	2301      	movne	r3, #1
 8014906:	2300      	moveq	r3, #0
 8014908:	b2db      	uxtb	r3, r3
 801490a:	2b00      	cmp	r3, #0
 801490c:	d001      	beq.n	8014912 <IsSticky+0x36>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
 801490e:	2301      	movs	r3, #1
 8014910:	e000      	b.n	8014914 <IsSticky+0x38>
        default:
            return false;
 8014912:	2300      	movs	r3, #0
    }
}
 8014914:	4618      	mov	r0, r3
 8014916:	370c      	adds	r7, #12
 8014918:	46bd      	mov	sp, r7
 801491a:	bc80      	pop	{r7}
 801491c:	4770      	bx	lr
 801491e:	bf00      	nop
 8014920:	00020720 	.word	0x00020720

08014924 <IsConfirmationRequired>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsConfirmationRequired( uint8_t cid )
{
 8014924:	b480      	push	{r7}
 8014926:	b083      	sub	sp, #12
 8014928:	af00      	add	r7, sp, #0
 801492a:	4603      	mov	r3, r0
 801492c:	71fb      	strb	r3, [r7, #7]
        case MOTE_MAC_REKEY_IND:
        case MOTE_MAC_DEVICE_MODE_IND:
            return true;
#endif /* LORAMAC_VERSION */
        default:
            return false;
 801492e:	2300      	movs	r3, #0
    }
}
 8014930:	4618      	mov	r0, r3
 8014932:	370c      	adds	r7, #12
 8014934:	46bd      	mov	sp, r7
 8014936:	bc80      	pop	{r7}
 8014938:	4770      	bx	lr
	...

0801493c <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 801493c:	b580      	push	{r7, lr}
 801493e:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 8014940:	f44f 7203 	mov.w	r2, #524	@ 0x20c
 8014944:	2100      	movs	r1, #0
 8014946:	4804      	ldr	r0, [pc, #16]	@ (8014958 <LoRaMacCommandsInit+0x1c>)
 8014948:	f005 fbee 	bl	801a128 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 801494c:	4802      	ldr	r0, [pc, #8]	@ (8014958 <LoRaMacCommandsInit+0x1c>)
 801494e:	f7ff ff2c 	bl	80147aa <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 8014952:	2300      	movs	r3, #0
}
 8014954:	4618      	mov	r0, r3
 8014956:	bd80      	pop	{r7, pc}
 8014958:	2000183c 	.word	0x2000183c

0801495c <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 801495c:	b580      	push	{r7, lr}
 801495e:	b086      	sub	sp, #24
 8014960:	af00      	add	r7, sp, #0
 8014962:	4603      	mov	r3, r0
 8014964:	60b9      	str	r1, [r7, #8]
 8014966:	607a      	str	r2, [r7, #4]
 8014968:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 801496a:	68bb      	ldr	r3, [r7, #8]
 801496c:	2b00      	cmp	r3, #0
 801496e:	d101      	bne.n	8014974 <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8014970:	2301      	movs	r3, #1
 8014972:	e03b      	b.n	80149ec <LoRaMacCommandsAddCmd+0x90>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 8014974:	f7ff fede 	bl	8014734 <MallocNewMacCommandSlot>
 8014978:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 801497a:	697b      	ldr	r3, [r7, #20]
 801497c:	2b00      	cmp	r3, #0
 801497e:	d101      	bne.n	8014984 <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 8014980:	2302      	movs	r3, #2
 8014982:	e033      	b.n	80149ec <LoRaMacCommandsAddCmd+0x90>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 8014984:	6979      	ldr	r1, [r7, #20]
 8014986:	481b      	ldr	r0, [pc, #108]	@ (80149f4 <LoRaMacCommandsAddCmd+0x98>)
 8014988:	f7ff ff24 	bl	80147d4 <LinkedListAdd>
 801498c:	4603      	mov	r3, r0
 801498e:	f083 0301 	eor.w	r3, r3, #1
 8014992:	b2db      	uxtb	r3, r3
 8014994:	2b00      	cmp	r3, #0
 8014996:	d001      	beq.n	801499c <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 8014998:	2305      	movs	r3, #5
 801499a:	e027      	b.n	80149ec <LoRaMacCommandsAddCmd+0x90>
    }

    // Set Values
    newCmd->CID = cid;
 801499c:	697b      	ldr	r3, [r7, #20]
 801499e:	7bfa      	ldrb	r2, [r7, #15]
 80149a0:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 80149a2:	697b      	ldr	r3, [r7, #20]
 80149a4:	687a      	ldr	r2, [r7, #4]
 80149a6:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 80149a8:	697b      	ldr	r3, [r7, #20]
 80149aa:	3305      	adds	r3, #5
 80149ac:	687a      	ldr	r2, [r7, #4]
 80149ae:	b292      	uxth	r2, r2
 80149b0:	68b9      	ldr	r1, [r7, #8]
 80149b2:	4618      	mov	r0, r3
 80149b4:	f005 fb7d 	bl	801a0b2 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 80149b8:	7bfb      	ldrb	r3, [r7, #15]
 80149ba:	4618      	mov	r0, r3
 80149bc:	f7ff ff8e 	bl	80148dc <IsSticky>
 80149c0:	4603      	mov	r3, r0
 80149c2:	461a      	mov	r2, r3
 80149c4:	697b      	ldr	r3, [r7, #20]
 80149c6:	731a      	strb	r2, [r3, #12]
    newCmd->IsConfirmationRequired = IsConfirmationRequired( cid );
 80149c8:	7bfb      	ldrb	r3, [r7, #15]
 80149ca:	4618      	mov	r0, r3
 80149cc:	f7ff ffaa 	bl	8014924 <IsConfirmationRequired>
 80149d0:	4603      	mov	r3, r0
 80149d2:	461a      	mov	r2, r3
 80149d4:	697b      	ldr	r3, [r7, #20]
 80149d6:	735a      	strb	r2, [r3, #13]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 80149d8:	4b06      	ldr	r3, [pc, #24]	@ (80149f4 <LoRaMacCommandsAddCmd+0x98>)
 80149da:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80149de:	687b      	ldr	r3, [r7, #4]
 80149e0:	4413      	add	r3, r2
 80149e2:	3301      	adds	r3, #1
 80149e4:	4a03      	ldr	r2, [pc, #12]	@ (80149f4 <LoRaMacCommandsAddCmd+0x98>)
 80149e6:	f8c2 3208 	str.w	r3, [r2, #520]	@ 0x208

    return LORAMAC_COMMANDS_SUCCESS;
 80149ea:	2300      	movs	r3, #0
}
 80149ec:	4618      	mov	r0, r3
 80149ee:	3718      	adds	r7, #24
 80149f0:	46bd      	mov	sp, r7
 80149f2:	bd80      	pop	{r7, pc}
 80149f4:	2000183c 	.word	0x2000183c

080149f8 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 80149f8:	b580      	push	{r7, lr}
 80149fa:	b082      	sub	sp, #8
 80149fc:	af00      	add	r7, sp, #0
 80149fe:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	2b00      	cmp	r3, #0
 8014a04:	d101      	bne.n	8014a0a <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8014a06:	2301      	movs	r3, #1
 8014a08:	e021      	b.n	8014a4e <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 8014a0a:	6879      	ldr	r1, [r7, #4]
 8014a0c:	4812      	ldr	r0, [pc, #72]	@ (8014a58 <LoRaMacCommandsRemoveCmd+0x60>)
 8014a0e:	f7ff ff32 	bl	8014876 <LinkedListRemove>
 8014a12:	4603      	mov	r3, r0
 8014a14:	f083 0301 	eor.w	r3, r3, #1
 8014a18:	b2db      	uxtb	r3, r3
 8014a1a:	2b00      	cmp	r3, #0
 8014a1c:	d001      	beq.n	8014a22 <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8014a1e:	2303      	movs	r3, #3
 8014a20:	e015      	b.n	8014a4e <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 8014a22:	4b0d      	ldr	r3, [pc, #52]	@ (8014a58 <LoRaMacCommandsRemoveCmd+0x60>)
 8014a24:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	689b      	ldr	r3, [r3, #8]
 8014a2c:	1ad3      	subs	r3, r2, r3
 8014a2e:	3b01      	subs	r3, #1
 8014a30:	4a09      	ldr	r2, [pc, #36]	@ (8014a58 <LoRaMacCommandsRemoveCmd+0x60>)
 8014a32:	f8c2 3208 	str.w	r3, [r2, #520]	@ 0x208

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 8014a36:	6878      	ldr	r0, [r7, #4]
 8014a38:	f7ff fea4 	bl	8014784 <FreeMacCommandSlot>
 8014a3c:	4603      	mov	r3, r0
 8014a3e:	f083 0301 	eor.w	r3, r3, #1
 8014a42:	b2db      	uxtb	r3, r3
 8014a44:	2b00      	cmp	r3, #0
 8014a46:	d001      	beq.n	8014a4c <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 8014a48:	2305      	movs	r3, #5
 8014a4a:	e000      	b.n	8014a4e <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8014a4c:	2300      	movs	r3, #0
}
 8014a4e:	4618      	mov	r0, r3
 8014a50:	3708      	adds	r7, #8
 8014a52:	46bd      	mov	sp, r7
 8014a54:	bd80      	pop	{r7, pc}
 8014a56:	bf00      	nop
 8014a58:	2000183c 	.word	0x2000183c

08014a5c <LoRaMacCommandsGetCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsGetCmd( uint8_t cid, MacCommand_t** macCmd )
{
 8014a5c:	b480      	push	{r7}
 8014a5e:	b085      	sub	sp, #20
 8014a60:	af00      	add	r7, sp, #0
 8014a62:	4603      	mov	r3, r0
 8014a64:	6039      	str	r1, [r7, #0]
 8014a66:	71fb      	strb	r3, [r7, #7]
    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8014a68:	4b0e      	ldr	r3, [pc, #56]	@ (8014aa4 <LoRaMacCommandsGetCmd+0x48>)
 8014a6a:	681b      	ldr	r3, [r3, #0]
 8014a6c:	60fb      	str	r3, [r7, #12]

    // Loop through all elements until we find the element with the given CID
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 8014a6e:	e002      	b.n	8014a76 <LoRaMacCommandsGetCmd+0x1a>
    {
        curElement = curElement->Next;
 8014a70:	68fb      	ldr	r3, [r7, #12]
 8014a72:	681b      	ldr	r3, [r3, #0]
 8014a74:	60fb      	str	r3, [r7, #12]
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 8014a76:	68fb      	ldr	r3, [r7, #12]
 8014a78:	2b00      	cmp	r3, #0
 8014a7a:	d004      	beq.n	8014a86 <LoRaMacCommandsGetCmd+0x2a>
 8014a7c:	68fb      	ldr	r3, [r7, #12]
 8014a7e:	791b      	ldrb	r3, [r3, #4]
 8014a80:	79fa      	ldrb	r2, [r7, #7]
 8014a82:	429a      	cmp	r2, r3
 8014a84:	d1f4      	bne.n	8014a70 <LoRaMacCommandsGetCmd+0x14>
    }

    // Update the pointer anyway
    *macCmd = curElement;
 8014a86:	683b      	ldr	r3, [r7, #0]
 8014a88:	68fa      	ldr	r2, [r7, #12]
 8014a8a:	601a      	str	r2, [r3, #0]

    // Handle error in case if we reached the end without finding it.
    if( curElement == NULL )
 8014a8c:	68fb      	ldr	r3, [r7, #12]
 8014a8e:	2b00      	cmp	r3, #0
 8014a90:	d101      	bne.n	8014a96 <LoRaMacCommandsGetCmd+0x3a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8014a92:	2303      	movs	r3, #3
 8014a94:	e000      	b.n	8014a98 <LoRaMacCommandsGetCmd+0x3c>
    }
    return LORAMAC_COMMANDS_SUCCESS;
 8014a96:	2300      	movs	r3, #0
}
 8014a98:	4618      	mov	r0, r3
 8014a9a:	3714      	adds	r7, #20
 8014a9c:	46bd      	mov	sp, r7
 8014a9e:	bc80      	pop	{r7}
 8014aa0:	4770      	bx	lr
 8014aa2:	bf00      	nop
 8014aa4:	2000183c 	.word	0x2000183c

08014aa8 <LoRaMacCommandsRemoveNoneStickyCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 8014aa8:	b580      	push	{r7, lr}
 8014aaa:	b082      	sub	sp, #8
 8014aac:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8014aae:	4b0f      	ldr	r3, [pc, #60]	@ (8014aec <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 8014ab0:	681b      	ldr	r3, [r3, #0]
 8014ab2:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8014ab4:	e012      	b.n	8014adc <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 8014ab6:	687b      	ldr	r3, [r7, #4]
 8014ab8:	7b1b      	ldrb	r3, [r3, #12]
 8014aba:	f083 0301 	eor.w	r3, r3, #1
 8014abe:	b2db      	uxtb	r3, r3
 8014ac0:	2b00      	cmp	r3, #0
 8014ac2:	d008      	beq.n	8014ad6 <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	681b      	ldr	r3, [r3, #0]
 8014ac8:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 8014aca:	6878      	ldr	r0, [r7, #4]
 8014acc:	f7ff ff94 	bl	80149f8 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 8014ad0:	683b      	ldr	r3, [r7, #0]
 8014ad2:	607b      	str	r3, [r7, #4]
 8014ad4:	e002      	b.n	8014adc <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 8014ad6:	687b      	ldr	r3, [r7, #4]
 8014ad8:	681b      	ldr	r3, [r3, #0]
 8014ada:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8014adc:	687b      	ldr	r3, [r7, #4]
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	d1e9      	bne.n	8014ab6 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8014ae2:	2300      	movs	r3, #0
}
 8014ae4:	4618      	mov	r0, r3
 8014ae6:	3708      	adds	r7, #8
 8014ae8:	46bd      	mov	sp, r7
 8014aea:	bd80      	pop	{r7, pc}
 8014aec:	2000183c 	.word	0x2000183c

08014af0 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 8014af0:	b580      	push	{r7, lr}
 8014af2:	b082      	sub	sp, #8
 8014af4:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8014af6:	4b13      	ldr	r3, [pc, #76]	@ (8014b44 <LoRaMacCommandsRemoveStickyAnsCmds+0x54>)
 8014af8:	681b      	ldr	r3, [r3, #0]
 8014afa:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8014afc:	e01a      	b.n	8014b34 <LoRaMacCommandsRemoveStickyAnsCmds+0x44>
    {
        nexElement = curElement->Next;
 8014afe:	687b      	ldr	r3, [r7, #4]
 8014b00:	681b      	ldr	r3, [r3, #0]
 8014b02:	603b      	str	r3, [r7, #0]
        if( ( IsSticky( curElement->CID ) == true ) &&
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	791b      	ldrb	r3, [r3, #4]
 8014b08:	4618      	mov	r0, r3
 8014b0a:	f7ff fee7 	bl	80148dc <IsSticky>
 8014b0e:	4603      	mov	r3, r0
 8014b10:	2b00      	cmp	r3, #0
 8014b12:	d00d      	beq.n	8014b30 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
            ( IsConfirmationRequired( curElement->CID ) == false ) )
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	791b      	ldrb	r3, [r3, #4]
 8014b18:	4618      	mov	r0, r3
 8014b1a:	f7ff ff03 	bl	8014924 <IsConfirmationRequired>
 8014b1e:	4603      	mov	r3, r0
 8014b20:	f083 0301 	eor.w	r3, r3, #1
 8014b24:	b2db      	uxtb	r3, r3
        if( ( IsSticky( curElement->CID ) == true ) &&
 8014b26:	2b00      	cmp	r3, #0
 8014b28:	d002      	beq.n	8014b30 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 8014b2a:	6878      	ldr	r0, [r7, #4]
 8014b2c:	f7ff ff64 	bl	80149f8 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 8014b30:	683b      	ldr	r3, [r7, #0]
 8014b32:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8014b34:	687b      	ldr	r3, [r7, #4]
 8014b36:	2b00      	cmp	r3, #0
 8014b38:	d1e1      	bne.n	8014afe <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8014b3a:	2300      	movs	r3, #0
}
 8014b3c:	4618      	mov	r0, r3
 8014b3e:	3708      	adds	r7, #8
 8014b40:	46bd      	mov	sp, r7
 8014b42:	bd80      	pop	{r7, pc}
 8014b44:	2000183c 	.word	0x2000183c

08014b48 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 8014b48:	b480      	push	{r7}
 8014b4a:	b083      	sub	sp, #12
 8014b4c:	af00      	add	r7, sp, #0
 8014b4e:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	2b00      	cmp	r3, #0
 8014b54:	d101      	bne.n	8014b5a <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8014b56:	2301      	movs	r3, #1
 8014b58:	e005      	b.n	8014b66 <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 8014b5a:	4b05      	ldr	r3, [pc, #20]	@ (8014b70 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 8014b5c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 8014b64:	2300      	movs	r3, #0
}
 8014b66:	4618      	mov	r0, r3
 8014b68:	370c      	adds	r7, #12
 8014b6a:	46bd      	mov	sp, r7
 8014b6c:	bc80      	pop	{r7}
 8014b6e:	4770      	bx	lr
 8014b70:	2000183c 	.word	0x2000183c

08014b74 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 8014b74:	b580      	push	{r7, lr}
 8014b76:	b088      	sub	sp, #32
 8014b78:	af00      	add	r7, sp, #0
 8014b7a:	60f8      	str	r0, [r7, #12]
 8014b7c:	60b9      	str	r1, [r7, #8]
 8014b7e:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 8014b80:	4b25      	ldr	r3, [pc, #148]	@ (8014c18 <LoRaMacCommandsSerializeCmds+0xa4>)
 8014b82:	681b      	ldr	r3, [r3, #0]
 8014b84:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 8014b86:	2300      	movs	r3, #0
 8014b88:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 8014b8a:	687b      	ldr	r3, [r7, #4]
 8014b8c:	2b00      	cmp	r3, #0
 8014b8e:	d002      	beq.n	8014b96 <LoRaMacCommandsSerializeCmds+0x22>
 8014b90:	68bb      	ldr	r3, [r7, #8]
 8014b92:	2b00      	cmp	r3, #0
 8014b94:	d126      	bne.n	8014be4 <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8014b96:	2301      	movs	r3, #1
 8014b98:	e039      	b.n	8014c0e <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 8014b9a:	7efb      	ldrb	r3, [r7, #27]
 8014b9c:	68fa      	ldr	r2, [r7, #12]
 8014b9e:	1ad2      	subs	r2, r2, r3
 8014ba0:	69fb      	ldr	r3, [r7, #28]
 8014ba2:	689b      	ldr	r3, [r3, #8]
 8014ba4:	3301      	adds	r3, #1
 8014ba6:	429a      	cmp	r2, r3
 8014ba8:	d320      	bcc.n	8014bec <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 8014baa:	7efb      	ldrb	r3, [r7, #27]
 8014bac:	1c5a      	adds	r2, r3, #1
 8014bae:	76fa      	strb	r2, [r7, #27]
 8014bb0:	461a      	mov	r2, r3
 8014bb2:	687b      	ldr	r3, [r7, #4]
 8014bb4:	4413      	add	r3, r2
 8014bb6:	69fa      	ldr	r2, [r7, #28]
 8014bb8:	7912      	ldrb	r2, [r2, #4]
 8014bba:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 8014bbc:	7efb      	ldrb	r3, [r7, #27]
 8014bbe:	687a      	ldr	r2, [r7, #4]
 8014bc0:	18d0      	adds	r0, r2, r3
 8014bc2:	69fb      	ldr	r3, [r7, #28]
 8014bc4:	1d59      	adds	r1, r3, #5
 8014bc6:	69fb      	ldr	r3, [r7, #28]
 8014bc8:	689b      	ldr	r3, [r3, #8]
 8014bca:	b29b      	uxth	r3, r3
 8014bcc:	461a      	mov	r2, r3
 8014bce:	f005 fa70 	bl	801a0b2 <memcpy1>
            itr += curElement->PayloadSize;
 8014bd2:	69fb      	ldr	r3, [r7, #28]
 8014bd4:	689b      	ldr	r3, [r3, #8]
 8014bd6:	b2da      	uxtb	r2, r3
 8014bd8:	7efb      	ldrb	r3, [r7, #27]
 8014bda:	4413      	add	r3, r2
 8014bdc:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 8014bde:	69fb      	ldr	r3, [r7, #28]
 8014be0:	681b      	ldr	r3, [r3, #0]
 8014be2:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8014be4:	69fb      	ldr	r3, [r7, #28]
 8014be6:	2b00      	cmp	r3, #0
 8014be8:	d1d7      	bne.n	8014b9a <LoRaMacCommandsSerializeCmds+0x26>
 8014bea:	e009      	b.n	8014c00 <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 8014bec:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 8014bee:	e007      	b.n	8014c00 <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 8014bf0:	69fb      	ldr	r3, [r7, #28]
 8014bf2:	681b      	ldr	r3, [r3, #0]
 8014bf4:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 8014bf6:	69f8      	ldr	r0, [r7, #28]
 8014bf8:	f7ff fefe 	bl	80149f8 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 8014bfc:	697b      	ldr	r3, [r7, #20]
 8014bfe:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8014c00:	69fb      	ldr	r3, [r7, #28]
 8014c02:	2b00      	cmp	r3, #0
 8014c04:	d1f4      	bne.n	8014bf0 <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 8014c06:	68b8      	ldr	r0, [r7, #8]
 8014c08:	f7ff ff9e 	bl	8014b48 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 8014c0c:	2300      	movs	r3, #0
}
 8014c0e:	4618      	mov	r0, r3
 8014c10:	3720      	adds	r7, #32
 8014c12:	46bd      	mov	sp, r7
 8014c14:	bd80      	pop	{r7, pc}
 8014c16:	bf00      	nop
 8014c18:	2000183c 	.word	0x2000183c

08014c1c <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 8014c1c:	b480      	push	{r7}
 8014c1e:	b085      	sub	sp, #20
 8014c20:	af00      	add	r7, sp, #0
 8014c22:	4603      	mov	r3, r0
 8014c24:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 8014c26:	2300      	movs	r3, #0
 8014c28:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 8014c2a:	79fb      	ldrb	r3, [r7, #7]
 8014c2c:	3b02      	subs	r3, #2
 8014c2e:	2b11      	cmp	r3, #17
 8014c30:	d850      	bhi.n	8014cd4 <LoRaMacCommandsGetCmdSize+0xb8>
 8014c32:	a201      	add	r2, pc, #4	@ (adr r2, 8014c38 <LoRaMacCommandsGetCmdSize+0x1c>)
 8014c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014c38:	08014c81 	.word	0x08014c81
 8014c3c:	08014c87 	.word	0x08014c87
 8014c40:	08014c8d 	.word	0x08014c8d
 8014c44:	08014c93 	.word	0x08014c93
 8014c48:	08014c99 	.word	0x08014c99
 8014c4c:	08014c9f 	.word	0x08014c9f
 8014c50:	08014ca5 	.word	0x08014ca5
 8014c54:	08014cab 	.word	0x08014cab
 8014c58:	08014cb1 	.word	0x08014cb1
 8014c5c:	08014cd5 	.word	0x08014cd5
 8014c60:	08014cd5 	.word	0x08014cd5
 8014c64:	08014cb7 	.word	0x08014cb7
 8014c68:	08014cd5 	.word	0x08014cd5
 8014c6c:	08014cd5 	.word	0x08014cd5
 8014c70:	08014cbd 	.word	0x08014cbd
 8014c74:	08014cc3 	.word	0x08014cc3
 8014c78:	08014cc9 	.word	0x08014cc9
 8014c7c:	08014ccf 	.word	0x08014ccf
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 8014c80:	2303      	movs	r3, #3
 8014c82:	73fb      	strb	r3, [r7, #15]
            break;
 8014c84:	e027      	b.n	8014cd6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 8014c86:	2305      	movs	r3, #5
 8014c88:	73fb      	strb	r3, [r7, #15]
            break;
 8014c8a:	e024      	b.n	8014cd6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 8014c8c:	2302      	movs	r3, #2
 8014c8e:	73fb      	strb	r3, [r7, #15]
            break;
 8014c90:	e021      	b.n	8014cd6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 8014c92:	2305      	movs	r3, #5
 8014c94:	73fb      	strb	r3, [r7, #15]
            break;
 8014c96:	e01e      	b.n	8014cd6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 8014c98:	2301      	movs	r3, #1
 8014c9a:	73fb      	strb	r3, [r7, #15]
            break;
 8014c9c:	e01b      	b.n	8014cd6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 8014c9e:	2306      	movs	r3, #6
 8014ca0:	73fb      	strb	r3, [r7, #15]
            break;
 8014ca2:	e018      	b.n	8014cd6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 8014ca4:	2302      	movs	r3, #2
 8014ca6:	73fb      	strb	r3, [r7, #15]
            break;
 8014ca8:	e015      	b.n	8014cd6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 8014caa:	2302      	movs	r3, #2
 8014cac:	73fb      	strb	r3, [r7, #15]
            break;
 8014cae:	e012      	b.n	8014cd6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 8014cb0:	2305      	movs	r3, #5
 8014cb2:	73fb      	strb	r3, [r7, #15]
            break;
 8014cb4:	e00f      	b.n	8014cd6 <LoRaMacCommandsGetCmdSize+0xba>
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 8014cb6:	2306      	movs	r3, #6
 8014cb8:	73fb      	strb	r3, [r7, #15]
            break;
 8014cba:	e00c      	b.n	8014cd6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 8014cbc:	2301      	movs	r3, #1
 8014cbe:	73fb      	strb	r3, [r7, #15]
            break;
 8014cc0:	e009      	b.n	8014cd6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 8014cc2:	2305      	movs	r3, #5
 8014cc4:	73fb      	strb	r3, [r7, #15]
            break;
 8014cc6:	e006      	b.n	8014cd6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 8014cc8:	2304      	movs	r3, #4
 8014cca:	73fb      	strb	r3, [r7, #15]
            break;
 8014ccc:	e003      	b.n	8014cd6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 8014cce:	2304      	movs	r3, #4
 8014cd0:	73fb      	strb	r3, [r7, #15]
            break;
 8014cd2:	e000      	b.n	8014cd6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 8014cd4:	bf00      	nop
        }
    }
    return cidSize;
 8014cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8014cd8:	4618      	mov	r0, r3
 8014cda:	3714      	adds	r7, #20
 8014cdc:	46bd      	mov	sp, r7
 8014cde:	bc80      	pop	{r7}
 8014ce0:	4770      	bx	lr
 8014ce2:	bf00      	nop

08014ce4 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 8014ce4:	b480      	push	{r7}
 8014ce6:	b083      	sub	sp, #12
 8014ce8:	af00      	add	r7, sp, #0
 8014cea:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8014cec:	687b      	ldr	r3, [r7, #4]
 8014cee:	4a07      	ldr	r2, [pc, #28]	@ (8014d0c <IncreaseBufferPointer+0x28>)
 8014cf0:	4293      	cmp	r3, r2
 8014cf2:	d102      	bne.n	8014cfa <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8014cf4:	4b06      	ldr	r3, [pc, #24]	@ (8014d10 <IncreaseBufferPointer+0x2c>)
 8014cf6:	607b      	str	r3, [r7, #4]
 8014cf8:	e002      	b.n	8014d00 <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 8014cfa:	687b      	ldr	r3, [r7, #4]
 8014cfc:	3304      	adds	r3, #4
 8014cfe:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 8014d00:	687b      	ldr	r3, [r7, #4]
}
 8014d02:	4618      	mov	r0, r3
 8014d04:	370c      	adds	r7, #12
 8014d06:	46bd      	mov	sp, r7
 8014d08:	bc80      	pop	{r7}
 8014d0a:	4770      	bx	lr
 8014d0c:	20001a64 	.word	0x20001a64
 8014d10:	20001a54 	.word	0x20001a54

08014d14 <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 8014d14:	b480      	push	{r7}
 8014d16:	b083      	sub	sp, #12
 8014d18:	af00      	add	r7, sp, #0
 8014d1a:	4603      	mov	r3, r0
 8014d1c:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 8014d1e:	79fb      	ldrb	r3, [r7, #7]
 8014d20:	2b00      	cmp	r3, #0
 8014d22:	d101      	bne.n	8014d28 <IsListEmpty+0x14>
    {
        return true;
 8014d24:	2301      	movs	r3, #1
 8014d26:	e000      	b.n	8014d2a <IsListEmpty+0x16>
    }
    return false;
 8014d28:	2300      	movs	r3, #0
}
 8014d2a:	4618      	mov	r0, r3
 8014d2c:	370c      	adds	r7, #12
 8014d2e:	46bd      	mov	sp, r7
 8014d30:	bc80      	pop	{r7}
 8014d32:	4770      	bx	lr

08014d34 <IsListFull>:

static bool IsListFull( uint8_t count )
{
 8014d34:	b480      	push	{r7}
 8014d36:	b083      	sub	sp, #12
 8014d38:	af00      	add	r7, sp, #0
 8014d3a:	4603      	mov	r3, r0
 8014d3c:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8014d3e:	79fb      	ldrb	r3, [r7, #7]
 8014d40:	2b04      	cmp	r3, #4
 8014d42:	d901      	bls.n	8014d48 <IsListFull+0x14>
    {
        return true;
 8014d44:	2301      	movs	r3, #1
 8014d46:	e000      	b.n	8014d4a <IsListFull+0x16>
    }
    return false;
 8014d48:	2300      	movs	r3, #0
}
 8014d4a:	4618      	mov	r0, r3
 8014d4c:	370c      	adds	r7, #12
 8014d4e:	46bd      	mov	sp, r7
 8014d50:	bc80      	pop	{r7}
 8014d52:	4770      	bx	lr

08014d54 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 8014d54:	b580      	push	{r7, lr}
 8014d56:	b086      	sub	sp, #24
 8014d58:	af00      	add	r7, sp, #0
 8014d5a:	4603      	mov	r3, r0
 8014d5c:	60b9      	str	r1, [r7, #8]
 8014d5e:	607a      	str	r2, [r7, #4]
 8014d60:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 8014d62:	68bb      	ldr	r3, [r7, #8]
 8014d64:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8014d66:	4b13      	ldr	r3, [pc, #76]	@ (8014db4 <GetElement+0x60>)
 8014d68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014d6c:	4618      	mov	r0, r3
 8014d6e:	f7ff ffd1 	bl	8014d14 <IsListEmpty>
 8014d72:	4603      	mov	r3, r0
 8014d74:	2b00      	cmp	r3, #0
 8014d76:	d001      	beq.n	8014d7c <GetElement+0x28>
    {
        return NULL;
 8014d78:	2300      	movs	r3, #0
 8014d7a:	e017      	b.n	8014dac <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8014d7c:	2300      	movs	r3, #0
 8014d7e:	74fb      	strb	r3, [r7, #19]
 8014d80:	e00d      	b.n	8014d9e <GetElement+0x4a>
    {
        if( element->Request == request )
 8014d82:	697b      	ldr	r3, [r7, #20]
 8014d84:	781b      	ldrb	r3, [r3, #0]
 8014d86:	7bfa      	ldrb	r2, [r7, #15]
 8014d88:	429a      	cmp	r2, r3
 8014d8a:	d101      	bne.n	8014d90 <GetElement+0x3c>
        {
            // We have found the element
            return element;
 8014d8c:	697b      	ldr	r3, [r7, #20]
 8014d8e:	e00d      	b.n	8014dac <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 8014d90:	6978      	ldr	r0, [r7, #20]
 8014d92:	f7ff ffa7 	bl	8014ce4 <IncreaseBufferPointer>
 8014d96:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8014d98:	7cfb      	ldrb	r3, [r7, #19]
 8014d9a:	3301      	adds	r3, #1
 8014d9c:	74fb      	strb	r3, [r7, #19]
 8014d9e:	4b05      	ldr	r3, [pc, #20]	@ (8014db4 <GetElement+0x60>)
 8014da0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014da4:	7cfa      	ldrb	r2, [r7, #19]
 8014da6:	429a      	cmp	r2, r3
 8014da8:	d3eb      	bcc.n	8014d82 <GetElement+0x2e>
    }

    return NULL;
 8014daa:	2300      	movs	r3, #0
}
 8014dac:	4618      	mov	r0, r3
 8014dae:	3718      	adds	r7, #24
 8014db0:	46bd      	mov	sp, r7
 8014db2:	bd80      	pop	{r7, pc}
 8014db4:	20001a48 	.word	0x20001a48

08014db8 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 8014db8:	b580      	push	{r7, lr}
 8014dba:	b082      	sub	sp, #8
 8014dbc:	af00      	add	r7, sp, #0
 8014dbe:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 8014dc0:	4a0c      	ldr	r2, [pc, #48]	@ (8014df4 <LoRaMacConfirmQueueInit+0x3c>)
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 8014dc6:	4b0b      	ldr	r3, [pc, #44]	@ (8014df4 <LoRaMacConfirmQueueInit+0x3c>)
 8014dc8:	2200      	movs	r2, #0
 8014dca:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8014dce:	4b09      	ldr	r3, [pc, #36]	@ (8014df4 <LoRaMacConfirmQueueInit+0x3c>)
 8014dd0:	4a09      	ldr	r2, [pc, #36]	@ (8014df8 <LoRaMacConfirmQueueInit+0x40>)
 8014dd2:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8014dd4:	4b07      	ldr	r3, [pc, #28]	@ (8014df4 <LoRaMacConfirmQueueInit+0x3c>)
 8014dd6:	4a08      	ldr	r2, [pc, #32]	@ (8014df8 <LoRaMacConfirmQueueInit+0x40>)
 8014dd8:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 8014dda:	2214      	movs	r2, #20
 8014ddc:	21ff      	movs	r1, #255	@ 0xff
 8014dde:	4806      	ldr	r0, [pc, #24]	@ (8014df8 <LoRaMacConfirmQueueInit+0x40>)
 8014de0:	f005 f9a2 	bl	801a128 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8014de4:	4b03      	ldr	r3, [pc, #12]	@ (8014df4 <LoRaMacConfirmQueueInit+0x3c>)
 8014de6:	2201      	movs	r2, #1
 8014de8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 8014dec:	bf00      	nop
 8014dee:	3708      	adds	r7, #8
 8014df0:	46bd      	mov	sp, r7
 8014df2:	bd80      	pop	{r7, pc}
 8014df4:	20001a48 	.word	0x20001a48
 8014df8:	20001a54 	.word	0x20001a54

08014dfc <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8014dfc:	b580      	push	{r7, lr}
 8014dfe:	b082      	sub	sp, #8
 8014e00:	af00      	add	r7, sp, #0
 8014e02:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8014e04:	4b19      	ldr	r3, [pc, #100]	@ (8014e6c <LoRaMacConfirmQueueAdd+0x70>)
 8014e06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014e0a:	4618      	mov	r0, r3
 8014e0c:	f7ff ff92 	bl	8014d34 <IsListFull>
 8014e10:	4603      	mov	r3, r0
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	d001      	beq.n	8014e1a <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 8014e16:	2300      	movs	r3, #0
 8014e18:	e024      	b.n	8014e64 <LoRaMacConfirmQueueAdd+0x68>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8014e1a:	4b14      	ldr	r3, [pc, #80]	@ (8014e6c <LoRaMacConfirmQueueAdd+0x70>)
 8014e1c:	689b      	ldr	r3, [r3, #8]
 8014e1e:	687a      	ldr	r2, [r7, #4]
 8014e20:	7812      	ldrb	r2, [r2, #0]
 8014e22:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8014e24:	4b11      	ldr	r3, [pc, #68]	@ (8014e6c <LoRaMacConfirmQueueAdd+0x70>)
 8014e26:	689b      	ldr	r3, [r3, #8]
 8014e28:	687a      	ldr	r2, [r7, #4]
 8014e2a:	7852      	ldrb	r2, [r2, #1]
 8014e2c:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 8014e2e:	4b0f      	ldr	r3, [pc, #60]	@ (8014e6c <LoRaMacConfirmQueueAdd+0x70>)
 8014e30:	689b      	ldr	r3, [r3, #8]
 8014e32:	687a      	ldr	r2, [r7, #4]
 8014e34:	78d2      	ldrb	r2, [r2, #3]
 8014e36:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
 8014e38:	4b0c      	ldr	r3, [pc, #48]	@ (8014e6c <LoRaMacConfirmQueueAdd+0x70>)
 8014e3a:	689b      	ldr	r3, [r3, #8]
 8014e3c:	687a      	ldr	r2, [r7, #4]
 8014e3e:	7892      	ldrb	r2, [r2, #2]
 8014e40:	709a      	strb	r2, [r3, #2]
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 8014e42:	4b0a      	ldr	r3, [pc, #40]	@ (8014e6c <LoRaMacConfirmQueueAdd+0x70>)
 8014e44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014e48:	3301      	adds	r3, #1
 8014e4a:	b2da      	uxtb	r2, r3
 8014e4c:	4b07      	ldr	r3, [pc, #28]	@ (8014e6c <LoRaMacConfirmQueueAdd+0x70>)
 8014e4e:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 8014e52:	4b06      	ldr	r3, [pc, #24]	@ (8014e6c <LoRaMacConfirmQueueAdd+0x70>)
 8014e54:	689b      	ldr	r3, [r3, #8]
 8014e56:	4618      	mov	r0, r3
 8014e58:	f7ff ff44 	bl	8014ce4 <IncreaseBufferPointer>
 8014e5c:	4603      	mov	r3, r0
 8014e5e:	4a03      	ldr	r2, [pc, #12]	@ (8014e6c <LoRaMacConfirmQueueAdd+0x70>)
 8014e60:	6093      	str	r3, [r2, #8]

    return true;
 8014e62:	2301      	movs	r3, #1
}
 8014e64:	4618      	mov	r0, r3
 8014e66:	3708      	adds	r7, #8
 8014e68:	46bd      	mov	sp, r7
 8014e6a:	bd80      	pop	{r7, pc}
 8014e6c:	20001a48 	.word	0x20001a48

08014e70 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8014e70:	b580      	push	{r7, lr}
 8014e72:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8014e74:	4b0e      	ldr	r3, [pc, #56]	@ (8014eb0 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8014e76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014e7a:	4618      	mov	r0, r3
 8014e7c:	f7ff ff4a 	bl	8014d14 <IsListEmpty>
 8014e80:	4603      	mov	r3, r0
 8014e82:	2b00      	cmp	r3, #0
 8014e84:	d001      	beq.n	8014e8a <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 8014e86:	2300      	movs	r3, #0
 8014e88:	e010      	b.n	8014eac <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 8014e8a:	4b09      	ldr	r3, [pc, #36]	@ (8014eb0 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8014e8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014e90:	3b01      	subs	r3, #1
 8014e92:	b2da      	uxtb	r2, r3
 8014e94:	4b06      	ldr	r3, [pc, #24]	@ (8014eb0 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8014e96:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8014e9a:	4b05      	ldr	r3, [pc, #20]	@ (8014eb0 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8014e9c:	685b      	ldr	r3, [r3, #4]
 8014e9e:	4618      	mov	r0, r3
 8014ea0:	f7ff ff20 	bl	8014ce4 <IncreaseBufferPointer>
 8014ea4:	4603      	mov	r3, r0
 8014ea6:	4a02      	ldr	r2, [pc, #8]	@ (8014eb0 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8014ea8:	6053      	str	r3, [r2, #4]

    return true;
 8014eaa:	2301      	movs	r3, #1
}
 8014eac:	4618      	mov	r0, r3
 8014eae:	bd80      	pop	{r7, pc}
 8014eb0:	20001a48 	.word	0x20001a48

08014eb4 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 8014eb4:	b580      	push	{r7, lr}
 8014eb6:	b084      	sub	sp, #16
 8014eb8:	af00      	add	r7, sp, #0
 8014eba:	4603      	mov	r3, r0
 8014ebc:	460a      	mov	r2, r1
 8014ebe:	71fb      	strb	r3, [r7, #7]
 8014ec0:	4613      	mov	r3, r2
 8014ec2:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 8014ec4:	2300      	movs	r3, #0
 8014ec6:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8014ec8:	4b10      	ldr	r3, [pc, #64]	@ (8014f0c <LoRaMacConfirmQueueSetStatus+0x58>)
 8014eca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014ece:	4618      	mov	r0, r3
 8014ed0:	f7ff ff20 	bl	8014d14 <IsListEmpty>
 8014ed4:	4603      	mov	r3, r0
 8014ed6:	f083 0301 	eor.w	r3, r3, #1
 8014eda:	b2db      	uxtb	r3, r3
 8014edc:	2b00      	cmp	r3, #0
 8014ede:	d011      	beq.n	8014f04 <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8014ee0:	4b0a      	ldr	r3, [pc, #40]	@ (8014f0c <LoRaMacConfirmQueueSetStatus+0x58>)
 8014ee2:	6859      	ldr	r1, [r3, #4]
 8014ee4:	4b09      	ldr	r3, [pc, #36]	@ (8014f0c <LoRaMacConfirmQueueSetStatus+0x58>)
 8014ee6:	689a      	ldr	r2, [r3, #8]
 8014ee8:	79bb      	ldrb	r3, [r7, #6]
 8014eea:	4618      	mov	r0, r3
 8014eec:	f7ff ff32 	bl	8014d54 <GetElement>
 8014ef0:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8014ef2:	68fb      	ldr	r3, [r7, #12]
 8014ef4:	2b00      	cmp	r3, #0
 8014ef6:	d005      	beq.n	8014f04 <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 8014ef8:	68fb      	ldr	r3, [r7, #12]
 8014efa:	79fa      	ldrb	r2, [r7, #7]
 8014efc:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 8014efe:	68fb      	ldr	r3, [r7, #12]
 8014f00:	2201      	movs	r2, #1
 8014f02:	709a      	strb	r2, [r3, #2]
        }
    }
}
 8014f04:	bf00      	nop
 8014f06:	3710      	adds	r7, #16
 8014f08:	46bd      	mov	sp, r7
 8014f0a:	bd80      	pop	{r7, pc}
 8014f0c:	20001a48 	.word	0x20001a48

08014f10 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 8014f10:	b580      	push	{r7, lr}
 8014f12:	b084      	sub	sp, #16
 8014f14:	af00      	add	r7, sp, #0
 8014f16:	4603      	mov	r3, r0
 8014f18:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 8014f1a:	2300      	movs	r3, #0
 8014f1c:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8014f1e:	4b10      	ldr	r3, [pc, #64]	@ (8014f60 <LoRaMacConfirmQueueGetStatus+0x50>)
 8014f20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014f24:	4618      	mov	r0, r3
 8014f26:	f7ff fef5 	bl	8014d14 <IsListEmpty>
 8014f2a:	4603      	mov	r3, r0
 8014f2c:	f083 0301 	eor.w	r3, r3, #1
 8014f30:	b2db      	uxtb	r3, r3
 8014f32:	2b00      	cmp	r3, #0
 8014f34:	d00e      	beq.n	8014f54 <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8014f36:	4b0a      	ldr	r3, [pc, #40]	@ (8014f60 <LoRaMacConfirmQueueGetStatus+0x50>)
 8014f38:	6859      	ldr	r1, [r3, #4]
 8014f3a:	4b09      	ldr	r3, [pc, #36]	@ (8014f60 <LoRaMacConfirmQueueGetStatus+0x50>)
 8014f3c:	689a      	ldr	r2, [r3, #8]
 8014f3e:	79fb      	ldrb	r3, [r7, #7]
 8014f40:	4618      	mov	r0, r3
 8014f42:	f7ff ff07 	bl	8014d54 <GetElement>
 8014f46:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8014f48:	68fb      	ldr	r3, [r7, #12]
 8014f4a:	2b00      	cmp	r3, #0
 8014f4c:	d002      	beq.n	8014f54 <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 8014f4e:	68fb      	ldr	r3, [r7, #12]
 8014f50:	785b      	ldrb	r3, [r3, #1]
 8014f52:	e000      	b.n	8014f56 <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8014f54:	2301      	movs	r3, #1
}
 8014f56:	4618      	mov	r0, r3
 8014f58:	3710      	adds	r7, #16
 8014f5a:	46bd      	mov	sp, r7
 8014f5c:	bd80      	pop	{r7, pc}
 8014f5e:	bf00      	nop
 8014f60:	20001a48 	.word	0x20001a48

08014f64 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8014f64:	b580      	push	{r7, lr}
 8014f66:	b084      	sub	sp, #16
 8014f68:	af00      	add	r7, sp, #0
 8014f6a:	4603      	mov	r3, r0
 8014f6c:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8014f6e:	4b16      	ldr	r3, [pc, #88]	@ (8014fc8 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8014f70:	685b      	ldr	r3, [r3, #4]
 8014f72:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 8014f74:	4a14      	ldr	r2, [pc, #80]	@ (8014fc8 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8014f76:	79fb      	ldrb	r3, [r7, #7]
 8014f78:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8014f7c:	4b12      	ldr	r3, [pc, #72]	@ (8014fc8 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8014f7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014f82:	4618      	mov	r0, r3
 8014f84:	f7ff fec6 	bl	8014d14 <IsListEmpty>
 8014f88:	4603      	mov	r3, r0
 8014f8a:	f083 0301 	eor.w	r3, r3, #1
 8014f8e:	b2db      	uxtb	r3, r3
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	d015      	beq.n	8014fc0 <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 8014f94:	68fb      	ldr	r3, [r7, #12]
 8014f96:	79fa      	ldrb	r2, [r7, #7]
 8014f98:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 8014f9a:	68fb      	ldr	r3, [r7, #12]
 8014f9c:	78db      	ldrb	r3, [r3, #3]
 8014f9e:	f083 0301 	eor.w	r3, r3, #1
 8014fa2:	b2db      	uxtb	r3, r3
 8014fa4:	2b00      	cmp	r3, #0
 8014fa6:	d002      	beq.n	8014fae <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 8014fa8:	68fb      	ldr	r3, [r7, #12]
 8014faa:	2201      	movs	r2, #1
 8014fac:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 8014fae:	68f8      	ldr	r0, [r7, #12]
 8014fb0:	f7ff fe98 	bl	8014ce4 <IncreaseBufferPointer>
 8014fb4:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 8014fb6:	4b04      	ldr	r3, [pc, #16]	@ (8014fc8 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8014fb8:	689b      	ldr	r3, [r3, #8]
 8014fba:	68fa      	ldr	r2, [r7, #12]
 8014fbc:	429a      	cmp	r2, r3
 8014fbe:	d1e9      	bne.n	8014f94 <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 8014fc0:	bf00      	nop
 8014fc2:	3710      	adds	r7, #16
 8014fc4:	46bd      	mov	sp, r7
 8014fc6:	bd80      	pop	{r7, pc}
 8014fc8:	20001a48 	.word	0x20001a48

08014fcc <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8014fcc:	b580      	push	{r7, lr}
 8014fce:	b082      	sub	sp, #8
 8014fd0:	af00      	add	r7, sp, #0
 8014fd2:	4603      	mov	r3, r0
 8014fd4:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 8014fd6:	4b09      	ldr	r3, [pc, #36]	@ (8014ffc <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8014fd8:	6859      	ldr	r1, [r3, #4]
 8014fda:	4b08      	ldr	r3, [pc, #32]	@ (8014ffc <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8014fdc:	689a      	ldr	r2, [r3, #8]
 8014fde:	79fb      	ldrb	r3, [r7, #7]
 8014fe0:	4618      	mov	r0, r3
 8014fe2:	f7ff feb7 	bl	8014d54 <GetElement>
 8014fe6:	4603      	mov	r3, r0
 8014fe8:	2b00      	cmp	r3, #0
 8014fea:	d001      	beq.n	8014ff0 <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 8014fec:	2301      	movs	r3, #1
 8014fee:	e000      	b.n	8014ff2 <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 8014ff0:	2300      	movs	r3, #0
}
 8014ff2:	4618      	mov	r0, r3
 8014ff4:	3708      	adds	r7, #8
 8014ff6:	46bd      	mov	sp, r7
 8014ff8:	bd80      	pop	{r7, pc}
 8014ffa:	bf00      	nop
 8014ffc:	20001a48 	.word	0x20001a48

08015000 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 8015000:	b580      	push	{r7, lr}
 8015002:	b084      	sub	sp, #16
 8015004:	af00      	add	r7, sp, #0
 8015006:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8015008:	4b25      	ldr	r3, [pc, #148]	@ (80150a0 <LoRaMacConfirmQueueHandleCb+0xa0>)
 801500a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801500e:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 8015010:	2300      	movs	r3, #0
 8015012:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    memset1( ( uint8_t* ) &mlmeConfirmToStore, 0, sizeof( MlmeConfirmQueue_t ) );
 8015014:	f107 0308 	add.w	r3, r7, #8
 8015018:	2204      	movs	r2, #4
 801501a:	2100      	movs	r1, #0
 801501c:	4618      	mov	r0, r3
 801501e:	f005 f883 	bl	801a128 <memset1>

    for( uint8_t i = 0; i < nbElements; i++ )
 8015022:	2300      	movs	r3, #0
 8015024:	73fb      	strb	r3, [r7, #15]
 8015026:	e032      	b.n	801508e <LoRaMacConfirmQueueHandleCb+0x8e>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8015028:	4b1d      	ldr	r3, [pc, #116]	@ (80150a0 <LoRaMacConfirmQueueHandleCb+0xa0>)
 801502a:	685b      	ldr	r3, [r3, #4]
 801502c:	781a      	ldrb	r2, [r3, #0]
 801502e:	687b      	ldr	r3, [r7, #4]
 8015030:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 8015032:	4b1b      	ldr	r3, [pc, #108]	@ (80150a0 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8015034:	685b      	ldr	r3, [r3, #4]
 8015036:	785a      	ldrb	r2, [r3, #1]
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 801503c:	4b18      	ldr	r3, [pc, #96]	@ (80150a0 <LoRaMacConfirmQueueHandleCb+0xa0>)
 801503e:	685b      	ldr	r3, [r3, #4]
 8015040:	789b      	ldrb	r3, [r3, #2]
 8015042:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 8015044:	7b7b      	ldrb	r3, [r7, #13]
 8015046:	2b00      	cmp	r3, #0
 8015048:	d005      	beq.n	8015056 <LoRaMacConfirmQueueHandleCb+0x56>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 801504a:	4b15      	ldr	r3, [pc, #84]	@ (80150a0 <LoRaMacConfirmQueueHandleCb+0xa0>)
 801504c:	681b      	ldr	r3, [r3, #0]
 801504e:	689b      	ldr	r3, [r3, #8]
 8015050:	6878      	ldr	r0, [r7, #4]
 8015052:	4798      	blx	r3
 8015054:	e00b      	b.n	801506e <LoRaMacConfirmQueueHandleCb+0x6e>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 8015056:	4b12      	ldr	r3, [pc, #72]	@ (80150a0 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8015058:	685b      	ldr	r3, [r3, #4]
 801505a:	781b      	ldrb	r3, [r3, #0]
 801505c:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 801505e:	4b10      	ldr	r3, [pc, #64]	@ (80150a0 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8015060:	685b      	ldr	r3, [r3, #4]
 8015062:	785b      	ldrb	r3, [r3, #1]
 8015064:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8015066:	4b0e      	ldr	r3, [pc, #56]	@ (80150a0 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8015068:	685b      	ldr	r3, [r3, #4]
 801506a:	78db      	ldrb	r3, [r3, #3]
 801506c:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 801506e:	f7ff feff 	bl	8014e70 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 8015072:	7b7b      	ldrb	r3, [r7, #13]
 8015074:	f083 0301 	eor.w	r3, r3, #1
 8015078:	b2db      	uxtb	r3, r3
 801507a:	2b00      	cmp	r3, #0
 801507c:	d004      	beq.n	8015088 <LoRaMacConfirmQueueHandleCb+0x88>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 801507e:	f107 0308 	add.w	r3, r7, #8
 8015082:	4618      	mov	r0, r3
 8015084:	f7ff feba 	bl	8014dfc <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 8015088:	7bfb      	ldrb	r3, [r7, #15]
 801508a:	3301      	adds	r3, #1
 801508c:	73fb      	strb	r3, [r7, #15]
 801508e:	7bfa      	ldrb	r2, [r7, #15]
 8015090:	7bbb      	ldrb	r3, [r7, #14]
 8015092:	429a      	cmp	r2, r3
 8015094:	d3c8      	bcc.n	8015028 <LoRaMacConfirmQueueHandleCb+0x28>
        }
    }
}
 8015096:	bf00      	nop
 8015098:	bf00      	nop
 801509a:	3710      	adds	r7, #16
 801509c:	46bd      	mov	sp, r7
 801509e:	bd80      	pop	{r7, pc}
 80150a0:	20001a48 	.word	0x20001a48

080150a4 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 80150a4:	b480      	push	{r7}
 80150a6:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 80150a8:	4b03      	ldr	r3, [pc, #12]	@ (80150b8 <LoRaMacConfirmQueueGetCnt+0x14>)
 80150aa:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 80150ae:	4618      	mov	r0, r3
 80150b0:	46bd      	mov	sp, r7
 80150b2:	bc80      	pop	{r7}
 80150b4:	4770      	bx	lr
 80150b6:	bf00      	nop
 80150b8:	20001a48 	.word	0x20001a48

080150bc <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 80150bc:	b580      	push	{r7, lr}
 80150be:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80150c0:	4b06      	ldr	r3, [pc, #24]	@ (80150dc <LoRaMacConfirmQueueIsFull+0x20>)
 80150c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80150c6:	4618      	mov	r0, r3
 80150c8:	f7ff fe34 	bl	8014d34 <IsListFull>
 80150cc:	4603      	mov	r3, r0
 80150ce:	2b00      	cmp	r3, #0
 80150d0:	d001      	beq.n	80150d6 <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 80150d2:	2301      	movs	r3, #1
 80150d4:	e000      	b.n	80150d8 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 80150d6:	2300      	movs	r3, #0
    }
}
 80150d8:	4618      	mov	r0, r3
 80150da:	bd80      	pop	{r7, pc}
 80150dc:	20001a48 	.word	0x20001a48

080150e0 <PayloadEncrypt>:
 * \param [in] size             - Size of data
 * \param [in,out] buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 80150e0:	b580      	push	{r7, lr}
 80150e2:	b08e      	sub	sp, #56	@ 0x38
 80150e4:	af00      	add	r7, sp, #0
 80150e6:	60f8      	str	r0, [r7, #12]
 80150e8:	607b      	str	r3, [r7, #4]
 80150ea:	460b      	mov	r3, r1
 80150ec:	817b      	strh	r3, [r7, #10]
 80150ee:	4613      	mov	r3, r2
 80150f0:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 80150f2:	68fb      	ldr	r3, [r7, #12]
 80150f4:	2b00      	cmp	r3, #0
 80150f6:	d101      	bne.n	80150fc <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80150f8:	2309      	movs	r3, #9
 80150fa:	e086      	b.n	801520a <PayloadEncrypt+0x12a>
    }

    uint8_t bufferIndex = 0;
 80150fc:	2300      	movs	r3, #0
 80150fe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    uint16_t ctr = 1;
 8015102:	2301      	movs	r3, #1
 8015104:	86bb      	strh	r3, [r7, #52]	@ 0x34
    uint8_t sBlock[16] = { 0 };
 8015106:	2300      	movs	r3, #0
 8015108:	623b      	str	r3, [r7, #32]
 801510a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801510e:	2200      	movs	r2, #0
 8015110:	601a      	str	r2, [r3, #0]
 8015112:	605a      	str	r2, [r3, #4]
 8015114:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 8015116:	2300      	movs	r3, #0
 8015118:	613b      	str	r3, [r7, #16]
 801511a:	f107 0314 	add.w	r3, r7, #20
 801511e:	2200      	movs	r2, #0
 8015120:	601a      	str	r2, [r3, #0]
 8015122:	605a      	str	r2, [r3, #4]
 8015124:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 8015126:	2301      	movs	r3, #1
 8015128:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 801512a:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 801512e:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 8015130:	687b      	ldr	r3, [r7, #4]
 8015132:	b2db      	uxtb	r3, r3
 8015134:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8015136:	687b      	ldr	r3, [r7, #4]
 8015138:	0a1b      	lsrs	r3, r3, #8
 801513a:	b2db      	uxtb	r3, r3
 801513c:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 801513e:	687b      	ldr	r3, [r7, #4]
 8015140:	0c1b      	lsrs	r3, r3, #16
 8015142:	b2db      	uxtb	r3, r3
 8015144:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8015146:	687b      	ldr	r3, [r7, #4]
 8015148:	0e1b      	lsrs	r3, r3, #24
 801514a:	b2db      	uxtb	r3, r3
 801514c:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 801514e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015150:	b2db      	uxtb	r3, r3
 8015152:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8015154:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015156:	0a1b      	lsrs	r3, r3, #8
 8015158:	b2db      	uxtb	r3, r3
 801515a:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 801515c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801515e:	0c1b      	lsrs	r3, r3, #16
 8015160:	b2db      	uxtb	r3, r3
 8015162:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8015164:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015166:	0e1b      	lsrs	r3, r3, #24
 8015168:	b2db      	uxtb	r3, r3
 801516a:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 801516c:	e048      	b.n	8015200 <PayloadEncrypt+0x120>
    {
        aBlock[15] = ctr & 0xFF;
 801516e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8015170:	b2db      	uxtb	r3, r3
 8015172:	77fb      	strb	r3, [r7, #31]
        ctr++;
 8015174:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8015176:	3301      	adds	r3, #1
 8015178:	86bb      	strh	r3, [r7, #52]	@ 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 801517a:	f107 0320 	add.w	r3, r7, #32
 801517e:	7a7a      	ldrb	r2, [r7, #9]
 8015180:	f107 0010 	add.w	r0, r7, #16
 8015184:	2110      	movs	r1, #16
 8015186:	f7f8 fa6d 	bl	800d664 <SecureElementAesEncrypt>
 801518a:	4603      	mov	r3, r0
 801518c:	2b00      	cmp	r3, #0
 801518e:	d001      	beq.n	8015194 <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015190:	230e      	movs	r3, #14
 8015192:	e03a      	b.n	801520a <PayloadEncrypt+0x12a>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8015194:	2300      	movs	r3, #0
 8015196:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 801519a:	e01e      	b.n	80151da <PayloadEncrypt+0xfa>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 801519c:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80151a0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80151a4:	4413      	add	r3, r2
 80151a6:	461a      	mov	r2, r3
 80151a8:	68fb      	ldr	r3, [r7, #12]
 80151aa:	4413      	add	r3, r2
 80151ac:	7819      	ldrb	r1, [r3, #0]
 80151ae:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80151b2:	3338      	adds	r3, #56	@ 0x38
 80151b4:	443b      	add	r3, r7
 80151b6:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 80151ba:	f897 0037 	ldrb.w	r0, [r7, #55]	@ 0x37
 80151be:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80151c2:	4403      	add	r3, r0
 80151c4:	4618      	mov	r0, r3
 80151c6:	68fb      	ldr	r3, [r7, #12]
 80151c8:	4403      	add	r3, r0
 80151ca:	404a      	eors	r2, r1
 80151cc:	b2d2      	uxtb	r2, r2
 80151ce:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 80151d0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80151d4:	3301      	adds	r3, #1
 80151d6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 80151da:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80151de:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80151e2:	2a10      	cmp	r2, #16
 80151e4:	bfa8      	it	ge
 80151e6:	2210      	movge	r2, #16
 80151e8:	b212      	sxth	r2, r2
 80151ea:	4293      	cmp	r3, r2
 80151ec:	dbd6      	blt.n	801519c <PayloadEncrypt+0xbc>
        }
        size -= 16;
 80151ee:	897b      	ldrh	r3, [r7, #10]
 80151f0:	3b10      	subs	r3, #16
 80151f2:	b29b      	uxth	r3, r3
 80151f4:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 80151f6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80151fa:	3310      	adds	r3, #16
 80151fc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    while( size > 0 )
 8015200:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8015204:	2b00      	cmp	r3, #0
 8015206:	dcb2      	bgt.n	801516e <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8015208:	2300      	movs	r3, #0
}
 801520a:	4618      	mov	r0, r3
 801520c:	3738      	adds	r7, #56	@ 0x38
 801520e:	46bd      	mov	sp, r7
 8015210:	bd80      	pop	{r7, pc}

08015212 <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 8015212:	b490      	push	{r4, r7}
 8015214:	b082      	sub	sp, #8
 8015216:	af00      	add	r7, sp, #0
 8015218:	4604      	mov	r4, r0
 801521a:	4608      	mov	r0, r1
 801521c:	4611      	mov	r1, r2
 801521e:	461a      	mov	r2, r3
 8015220:	4623      	mov	r3, r4
 8015222:	80fb      	strh	r3, [r7, #6]
 8015224:	4603      	mov	r3, r0
 8015226:	717b      	strb	r3, [r7, #5]
 8015228:	460b      	mov	r3, r1
 801522a:	713b      	strb	r3, [r7, #4]
 801522c:	4613      	mov	r3, r2
 801522e:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 8015230:	69bb      	ldr	r3, [r7, #24]
 8015232:	2b00      	cmp	r3, #0
 8015234:	d101      	bne.n	801523a <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015236:	2309      	movs	r3, #9
 8015238:	e04e      	b.n	80152d8 <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 801523a:	69bb      	ldr	r3, [r7, #24]
 801523c:	2249      	movs	r2, #73	@ 0x49
 801523e:	701a      	strb	r2, [r3, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
    }
    else
#endif /* LORAMAC_VERSION */
    {
        b0[1] = 0x00;
 8015240:	69bb      	ldr	r3, [r7, #24]
 8015242:	3301      	adds	r3, #1
 8015244:	2200      	movs	r2, #0
 8015246:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 8015248:	69bb      	ldr	r3, [r7, #24]
 801524a:	3302      	adds	r3, #2
 801524c:	2200      	movs	r2, #0
 801524e:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 8015250:	69bb      	ldr	r3, [r7, #24]
 8015252:	3303      	adds	r3, #3
 8015254:	2200      	movs	r2, #0
 8015256:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 8015258:	69bb      	ldr	r3, [r7, #24]
 801525a:	3304      	adds	r3, #4
 801525c:	2200      	movs	r2, #0
 801525e:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8015260:	69bb      	ldr	r3, [r7, #24]
 8015262:	3305      	adds	r3, #5
 8015264:	78fa      	ldrb	r2, [r7, #3]
 8015266:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8015268:	69bb      	ldr	r3, [r7, #24]
 801526a:	3306      	adds	r3, #6
 801526c:	693a      	ldr	r2, [r7, #16]
 801526e:	b2d2      	uxtb	r2, r2
 8015270:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 8015272:	693b      	ldr	r3, [r7, #16]
 8015274:	0a1a      	lsrs	r2, r3, #8
 8015276:	69bb      	ldr	r3, [r7, #24]
 8015278:	3307      	adds	r3, #7
 801527a:	b2d2      	uxtb	r2, r2
 801527c:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 801527e:	693b      	ldr	r3, [r7, #16]
 8015280:	0c1a      	lsrs	r2, r3, #16
 8015282:	69bb      	ldr	r3, [r7, #24]
 8015284:	3308      	adds	r3, #8
 8015286:	b2d2      	uxtb	r2, r2
 8015288:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 801528a:	693b      	ldr	r3, [r7, #16]
 801528c:	0e1a      	lsrs	r2, r3, #24
 801528e:	69bb      	ldr	r3, [r7, #24]
 8015290:	3309      	adds	r3, #9
 8015292:	b2d2      	uxtb	r2, r2
 8015294:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 8015296:	69bb      	ldr	r3, [r7, #24]
 8015298:	330a      	adds	r3, #10
 801529a:	697a      	ldr	r2, [r7, #20]
 801529c:	b2d2      	uxtb	r2, r2
 801529e:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 80152a0:	697b      	ldr	r3, [r7, #20]
 80152a2:	0a1a      	lsrs	r2, r3, #8
 80152a4:	69bb      	ldr	r3, [r7, #24]
 80152a6:	330b      	adds	r3, #11
 80152a8:	b2d2      	uxtb	r2, r2
 80152aa:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 80152ac:	697b      	ldr	r3, [r7, #20]
 80152ae:	0c1a      	lsrs	r2, r3, #16
 80152b0:	69bb      	ldr	r3, [r7, #24]
 80152b2:	330c      	adds	r3, #12
 80152b4:	b2d2      	uxtb	r2, r2
 80152b6:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 80152b8:	697b      	ldr	r3, [r7, #20]
 80152ba:	0e1a      	lsrs	r2, r3, #24
 80152bc:	69bb      	ldr	r3, [r7, #24]
 80152be:	330d      	adds	r3, #13
 80152c0:	b2d2      	uxtb	r2, r2
 80152c2:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 80152c4:	69bb      	ldr	r3, [r7, #24]
 80152c6:	330e      	adds	r3, #14
 80152c8:	2200      	movs	r2, #0
 80152ca:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 80152cc:	69bb      	ldr	r3, [r7, #24]
 80152ce:	330f      	adds	r3, #15
 80152d0:	88fa      	ldrh	r2, [r7, #6]
 80152d2:	b2d2      	uxtb	r2, r2
 80152d4:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 80152d6:	2300      	movs	r3, #0
}
 80152d8:	4618      	mov	r0, r3
 80152da:	3708      	adds	r7, #8
 80152dc:	46bd      	mov	sp, r7
 80152de:	bc90      	pop	{r4, r7}
 80152e0:	4770      	bx	lr

080152e2 <ComputeCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 80152e2:	b590      	push	{r4, r7, lr}
 80152e4:	b08b      	sub	sp, #44	@ 0x2c
 80152e6:	af04      	add	r7, sp, #16
 80152e8:	6078      	str	r0, [r7, #4]
 80152ea:	4608      	mov	r0, r1
 80152ec:	4611      	mov	r1, r2
 80152ee:	461a      	mov	r2, r3
 80152f0:	4603      	mov	r3, r0
 80152f2:	807b      	strh	r3, [r7, #2]
 80152f4:	460b      	mov	r3, r1
 80152f6:	707b      	strb	r3, [r7, #1]
 80152f8:	4613      	mov	r3, r2
 80152fa:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 80152fc:	687b      	ldr	r3, [r7, #4]
 80152fe:	2b00      	cmp	r3, #0
 8015300:	d002      	beq.n	8015308 <ComputeCmacB0+0x26>
 8015302:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015304:	2b00      	cmp	r3, #0
 8015306:	d101      	bne.n	801530c <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015308:	2309      	movs	r3, #9
 801530a:	e024      	b.n	8015356 <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 801530c:	887b      	ldrh	r3, [r7, #2]
 801530e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015312:	d901      	bls.n	8015318 <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8015314:	230d      	movs	r3, #13
 8015316:	e01e      	b.n	8015356 <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE] ALIGN(4);

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8015318:	f897 4028 	ldrb.w	r4, [r7, #40]	@ 0x28
 801531c:	783a      	ldrb	r2, [r7, #0]
 801531e:	7879      	ldrb	r1, [r7, #1]
 8015320:	8878      	ldrh	r0, [r7, #2]
 8015322:	f107 0308 	add.w	r3, r7, #8
 8015326:	9302      	str	r3, [sp, #8]
 8015328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801532a:	9301      	str	r3, [sp, #4]
 801532c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801532e:	9300      	str	r3, [sp, #0]
 8015330:	4623      	mov	r3, r4
 8015332:	f7ff ff6e 	bl	8015212 <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8015336:	887a      	ldrh	r2, [r7, #2]
 8015338:	7879      	ldrb	r1, [r7, #1]
 801533a:	f107 0008 	add.w	r0, r7, #8
 801533e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015340:	9300      	str	r3, [sp, #0]
 8015342:	460b      	mov	r3, r1
 8015344:	6879      	ldr	r1, [r7, #4]
 8015346:	f7f8 f947 	bl	800d5d8 <SecureElementComputeAesCmac>
 801534a:	4603      	mov	r3, r0
 801534c:	2b00      	cmp	r3, #0
 801534e:	d001      	beq.n	8015354 <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015350:	230e      	movs	r3, #14
 8015352:	e000      	b.n	8015356 <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8015354:	2300      	movs	r3, #0
}
 8015356:	4618      	mov	r0, r3
 8015358:	371c      	adds	r7, #28
 801535a:	46bd      	mov	sp, r7
 801535c:	bd90      	pop	{r4, r7, pc}

0801535e <VerifyCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in] expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 801535e:	b590      	push	{r4, r7, lr}
 8015360:	b0cd      	sub	sp, #308	@ 0x134
 8015362:	af04      	add	r7, sp, #16
 8015364:	f507 7490 	add.w	r4, r7, #288	@ 0x120
 8015368:	f5a4 748e 	sub.w	r4, r4, #284	@ 0x11c
 801536c:	6020      	str	r0, [r4, #0]
 801536e:	460c      	mov	r4, r1
 8015370:	4610      	mov	r0, r2
 8015372:	4619      	mov	r1, r3
 8015374:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8015378:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 801537c:	4622      	mov	r2, r4
 801537e:	801a      	strh	r2, [r3, #0]
 8015380:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8015384:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 8015388:	4602      	mov	r2, r0
 801538a:	701a      	strb	r2, [r3, #0]
 801538c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8015390:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8015394:	460a      	mov	r2, r1
 8015396:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 8015398:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801539c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80153a0:	681b      	ldr	r3, [r3, #0]
 80153a2:	2b00      	cmp	r3, #0
 80153a4:	d101      	bne.n	80153aa <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80153a6:	2309      	movs	r3, #9
 80153a8:	e063      	b.n	8015472 <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 80153aa:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80153ae:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 80153b2:	881b      	ldrh	r3, [r3, #0]
 80153b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80153b8:	d901      	bls.n	80153be <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 80153ba:	230d      	movs	r3, #13
 80153bc:	e059      	b.n	8015472 <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 80153be:	f107 030c 	add.w	r3, r7, #12
 80153c2:	f44f 7288 	mov.w	r2, #272	@ 0x110
 80153c6:	2100      	movs	r1, #0
 80153c8:	4618      	mov	r0, r3
 80153ca:	f004 fead 	bl	801a128 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 80153ce:	f897 4130 	ldrb.w	r4, [r7, #304]	@ 0x130
 80153d2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80153d6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80153da:	781a      	ldrb	r2, [r3, #0]
 80153dc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80153e0:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 80153e4:	7819      	ldrb	r1, [r3, #0]
 80153e6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80153ea:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 80153ee:	8818      	ldrh	r0, [r3, #0]
 80153f0:	f107 030c 	add.w	r3, r7, #12
 80153f4:	9302      	str	r3, [sp, #8]
 80153f6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80153fa:	9301      	str	r3, [sp, #4]
 80153fc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8015400:	9300      	str	r3, [sp, #0]
 8015402:	4623      	mov	r3, r4
 8015404:	f7ff ff05 	bl	8015212 <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8015408:	f107 030c 	add.w	r3, r7, #12
 801540c:	3310      	adds	r3, #16
 801540e:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8015412:	f5a2 728f 	sub.w	r2, r2, #286	@ 0x11e
 8015416:	8812      	ldrh	r2, [r2, #0]
 8015418:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 801541c:	f5a1 718e 	sub.w	r1, r1, #284	@ 0x11c
 8015420:	6809      	ldr	r1, [r1, #0]
 8015422:	4618      	mov	r0, r3
 8015424:	f004 fe45 	bl	801a0b2 <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8015428:	2306      	movs	r3, #6
 801542a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 801542e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8015432:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8015436:	881b      	ldrh	r3, [r3, #0]
 8015438:	3310      	adds	r3, #16
 801543a:	4619      	mov	r1, r3
 801543c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8015440:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 8015444:	781b      	ldrb	r3, [r3, #0]
 8015446:	f107 000c 	add.w	r0, r7, #12
 801544a:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 801544e:	f7f8 f8dd 	bl	800d60c <SecureElementVerifyAesCmac>
 8015452:	4603      	mov	r3, r0
 8015454:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 8015458:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 801545c:	2b00      	cmp	r3, #0
 801545e:	d101      	bne.n	8015464 <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 8015460:	2300      	movs	r3, #0
 8015462:	e006      	b.n	8015472 <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 8015464:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8015468:	2b01      	cmp	r3, #1
 801546a:	d101      	bne.n	8015470 <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 801546c:	2301      	movs	r3, #1
 801546e:	e000      	b.n	8015472 <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015470:	230e      	movs	r3, #14
}
 8015472:	4618      	mov	r0, r3
 8015474:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 8015478:	46bd      	mov	sp, r7
 801547a:	bd90      	pop	{r4, r7, pc}

0801547c <GetKeyAddrItem>:
 * \param [in] addrID         - Address identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 801547c:	b480      	push	{r7}
 801547e:	b085      	sub	sp, #20
 8015480:	af00      	add	r7, sp, #0
 8015482:	4603      	mov	r3, r0
 8015484:	6039      	str	r1, [r7, #0]
 8015486:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8015488:	2300      	movs	r3, #0
 801548a:	73fb      	strb	r3, [r7, #15]
 801548c:	e011      	b.n	80154b2 <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 801548e:	7bfb      	ldrb	r3, [r7, #15]
 8015490:	4a0c      	ldr	r2, [pc, #48]	@ (80154c4 <GetKeyAddrItem+0x48>)
 8015492:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8015496:	79fa      	ldrb	r2, [r7, #7]
 8015498:	429a      	cmp	r2, r3
 801549a:	d107      	bne.n	80154ac <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 801549c:	7bfb      	ldrb	r3, [r7, #15]
 801549e:	009b      	lsls	r3, r3, #2
 80154a0:	4a08      	ldr	r2, [pc, #32]	@ (80154c4 <GetKeyAddrItem+0x48>)
 80154a2:	441a      	add	r2, r3
 80154a4:	683b      	ldr	r3, [r7, #0]
 80154a6:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 80154a8:	2300      	movs	r3, #0
 80154aa:	e006      	b.n	80154ba <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 80154ac:	7bfb      	ldrb	r3, [r7, #15]
 80154ae:	3301      	adds	r3, #1
 80154b0:	73fb      	strb	r3, [r7, #15]
 80154b2:	7bfb      	ldrb	r3, [r7, #15]
 80154b4:	2b01      	cmp	r3, #1
 80154b6:	d9ea      	bls.n	801548e <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 80154b8:	230b      	movs	r3, #11
}
 80154ba:	4618      	mov	r0, r3
 80154bc:	3714      	adds	r7, #20
 80154be:	46bd      	mov	sp, r7
 80154c0:	bc80      	pop	{r7}
 80154c2:	4770      	bx	lr
 80154c4:	20000114 	.word	0x20000114

080154c8 <DeriveSessionKey10x>:
 * \param [in] netID          - Network Identifier
 * \param [in] deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 80154c8:	b580      	push	{r7, lr}
 80154ca:	b088      	sub	sp, #32
 80154cc:	af00      	add	r7, sp, #0
 80154ce:	60b9      	str	r1, [r7, #8]
 80154d0:	607a      	str	r2, [r7, #4]
 80154d2:	461a      	mov	r2, r3
 80154d4:	4603      	mov	r3, r0
 80154d6:	73fb      	strb	r3, [r7, #15]
 80154d8:	4613      	mov	r3, r2
 80154da:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 80154dc:	2300      	movs	r3, #0
 80154de:	613b      	str	r3, [r7, #16]
 80154e0:	f107 0314 	add.w	r3, r7, #20
 80154e4:	2200      	movs	r2, #0
 80154e6:	601a      	str	r2, [r3, #0]
 80154e8:	605a      	str	r2, [r3, #4]
 80154ea:	609a      	str	r2, [r3, #8]

    switch( keyID )
 80154ec:	7bfb      	ldrb	r3, [r7, #15]
 80154ee:	2b08      	cmp	r3, #8
 80154f0:	d002      	beq.n	80154f8 <DeriveSessionKey10x+0x30>
 80154f2:	2b09      	cmp	r3, #9
 80154f4:	d003      	beq.n	80154fe <DeriveSessionKey10x+0x36>
 80154f6:	e005      	b.n	8015504 <DeriveSessionKey10x+0x3c>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else
        case NWK_S_KEY:
#endif /* LORAMAC_VERSION */
            compBase[0] = 0x01;
 80154f8:	2301      	movs	r3, #1
 80154fa:	743b      	strb	r3, [r7, #16]
            break;
 80154fc:	e004      	b.n	8015508 <DeriveSessionKey10x+0x40>
        case APP_S_KEY:
            compBase[0] = 0x02;
 80154fe:	2302      	movs	r3, #2
 8015500:	743b      	strb	r3, [r7, #16]
            break;
 8015502:	e001      	b.n	8015508 <DeriveSessionKey10x+0x40>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8015504:	230a      	movs	r3, #10
 8015506:	e02a      	b.n	801555e <DeriveSessionKey10x+0x96>
    }

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 8015508:	68bb      	ldr	r3, [r7, #8]
 801550a:	b2db      	uxtb	r3, r3
 801550c:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 801550e:	68bb      	ldr	r3, [r7, #8]
 8015510:	0a1b      	lsrs	r3, r3, #8
 8015512:	b2db      	uxtb	r3, r3
 8015514:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 8015516:	68bb      	ldr	r3, [r7, #8]
 8015518:	0c1b      	lsrs	r3, r3, #16
 801551a:	b2db      	uxtb	r3, r3
 801551c:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 801551e:	687b      	ldr	r3, [r7, #4]
 8015520:	b2db      	uxtb	r3, r3
 8015522:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 8015524:	687b      	ldr	r3, [r7, #4]
 8015526:	0a1b      	lsrs	r3, r3, #8
 8015528:	b2db      	uxtb	r3, r3
 801552a:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 801552c:	687b      	ldr	r3, [r7, #4]
 801552e:	0c1b      	lsrs	r3, r3, #16
 8015530:	b2db      	uxtb	r3, r3
 8015532:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 8015534:	89bb      	ldrh	r3, [r7, #12]
 8015536:	b2db      	uxtb	r3, r3
 8015538:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 801553a:	89bb      	ldrh	r3, [r7, #12]
 801553c:	0a1b      	lsrs	r3, r3, #8
 801553e:	b29b      	uxth	r3, r3
 8015540:	b2db      	uxtb	r3, r3
 8015542:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8015544:	7bfa      	ldrb	r2, [r7, #15]
 8015546:	f107 0310 	add.w	r3, r7, #16
 801554a:	2101      	movs	r1, #1
 801554c:	4618      	mov	r0, r3
 801554e:	f7f8 f909 	bl	800d764 <SecureElementDeriveAndStoreKey>
 8015552:	4603      	mov	r3, r0
 8015554:	2b00      	cmp	r3, #0
 8015556:	d001      	beq.n	801555c <DeriveSessionKey10x+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015558:	230e      	movs	r3, #14
 801555a:	e000      	b.n	801555e <DeriveSessionKey10x+0x96>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801555c:	2300      	movs	r3, #0
}
 801555e:	4618      	mov	r0, r3
 8015560:	3720      	adds	r7, #32
 8015562:	46bd      	mov	sp, r7
 8015564:	bd80      	pop	{r7, pc}
	...

08015568 <GetLastFcntDown>:
 * \param [in]    lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 8015568:	b480      	push	{r7}
 801556a:	b083      	sub	sp, #12
 801556c:	af00      	add	r7, sp, #0
 801556e:	4603      	mov	r3, r0
 8015570:	6039      	str	r1, [r7, #0]
 8015572:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 8015574:	683b      	ldr	r3, [r7, #0]
 8015576:	2b00      	cmp	r3, #0
 8015578:	d101      	bne.n	801557e <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801557a:	2309      	movs	r3, #9
 801557c:	e029      	b.n	80155d2 <GetLastFcntDown+0x6a>
    }
    switch( fCntID )
 801557e:	79fb      	ldrb	r3, [r7, #7]
 8015580:	3b01      	subs	r3, #1
 8015582:	2b03      	cmp	r3, #3
 8015584:	d822      	bhi.n	80155cc <GetLastFcntDown+0x64>
 8015586:	a201      	add	r2, pc, #4	@ (adr r2, 801558c <GetLastFcntDown+0x24>)
 8015588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801558c:	0801559d 	.word	0x0801559d
 8015590:	080155a9 	.word	0x080155a9
 8015594:	080155b5 	.word	0x080155b5
 8015598:	080155c1 	.word	0x080155c1
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 801559c:	4b0f      	ldr	r3, [pc, #60]	@ (80155dc <GetLastFcntDown+0x74>)
 801559e:	681b      	ldr	r3, [r3, #0]
 80155a0:	691a      	ldr	r2, [r3, #16]
 80155a2:	683b      	ldr	r3, [r7, #0]
 80155a4:	601a      	str	r2, [r3, #0]
            break;
 80155a6:	e013      	b.n	80155d0 <GetLastFcntDown+0x68>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 80155a8:	4b0c      	ldr	r3, [pc, #48]	@ (80155dc <GetLastFcntDown+0x74>)
 80155aa:	681b      	ldr	r3, [r3, #0]
 80155ac:	695a      	ldr	r2, [r3, #20]
 80155ae:	683b      	ldr	r3, [r7, #0]
 80155b0:	601a      	str	r2, [r3, #0]
            break;
 80155b2:	e00d      	b.n	80155d0 <GetLastFcntDown+0x68>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 80155b4:	4b09      	ldr	r3, [pc, #36]	@ (80155dc <GetLastFcntDown+0x74>)
 80155b6:	681b      	ldr	r3, [r3, #0]
 80155b8:	699a      	ldr	r2, [r3, #24]
 80155ba:	683b      	ldr	r3, [r7, #0]
 80155bc:	601a      	str	r2, [r3, #0]
            break;
 80155be:	e007      	b.n	80155d0 <GetLastFcntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 80155c0:	4b06      	ldr	r3, [pc, #24]	@ (80155dc <GetLastFcntDown+0x74>)
 80155c2:	681b      	ldr	r3, [r3, #0]
 80155c4:	69da      	ldr	r2, [r3, #28]
 80155c6:	683b      	ldr	r3, [r7, #0]
 80155c8:	601a      	str	r2, [r3, #0]
            break;
 80155ca:	e001      	b.n	80155d0 <GetLastFcntDown+0x68>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 80155cc:	2305      	movs	r3, #5
 80155ce:	e000      	b.n	80155d2 <GetLastFcntDown+0x6a>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80155d0:	2300      	movs	r3, #0
}
 80155d2:	4618      	mov	r0, r3
 80155d4:	370c      	adds	r7, #12
 80155d6:	46bd      	mov	sp, r7
 80155d8:	bc80      	pop	{r7}
 80155da:	4770      	bx	lr
 80155dc:	20001a6c 	.word	0x20001a6c

080155e0 <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 80155e0:	b580      	push	{r7, lr}
 80155e2:	b084      	sub	sp, #16
 80155e4:	af00      	add	r7, sp, #0
 80155e6:	4603      	mov	r3, r0
 80155e8:	6039      	str	r1, [r7, #0]
 80155ea:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 80155ec:	2300      	movs	r3, #0
 80155ee:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 80155f0:	f107 020c 	add.w	r2, r7, #12
 80155f4:	79fb      	ldrb	r3, [r7, #7]
 80155f6:	4611      	mov	r1, r2
 80155f8:	4618      	mov	r0, r3
 80155fa:	f7ff ffb5 	bl	8015568 <GetLastFcntDown>
 80155fe:	4603      	mov	r3, r0
 8015600:	2b00      	cmp	r3, #0
 8015602:	d001      	beq.n	8015608 <CheckFCntDown+0x28>
    {
        return false;
 8015604:	2300      	movs	r3, #0
 8015606:	e00a      	b.n	801561e <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 8015608:	68fb      	ldr	r3, [r7, #12]
 801560a:	683a      	ldr	r2, [r7, #0]
 801560c:	429a      	cmp	r2, r3
 801560e:	d803      	bhi.n	8015618 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITIAL_VALUE ) )
 8015610:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 8015612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015616:	d101      	bne.n	801561c <CheckFCntDown+0x3c>
    {
        return true;
 8015618:	2301      	movs	r3, #1
 801561a:	e000      	b.n	801561e <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 801561c:	2300      	movs	r3, #0
    }
}
 801561e:	4618      	mov	r0, r3
 8015620:	3710      	adds	r7, #16
 8015622:	46bd      	mov	sp, r7
 8015624:	bd80      	pop	{r7, pc}
	...

08015628 <UpdateFCntDown>:
 * \param [in]    currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8015628:	b480      	push	{r7}
 801562a:	b083      	sub	sp, #12
 801562c:	af00      	add	r7, sp, #0
 801562e:	4603      	mov	r3, r0
 8015630:	6039      	str	r1, [r7, #0]
 8015632:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 8015634:	79fb      	ldrb	r3, [r7, #7]
 8015636:	3b01      	subs	r3, #1
 8015638:	2b03      	cmp	r3, #3
 801563a:	d82b      	bhi.n	8015694 <UpdateFCntDown+0x6c>
 801563c:	a201      	add	r2, pc, #4	@ (adr r2, 8015644 <UpdateFCntDown+0x1c>)
 801563e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015642:	bf00      	nop
 8015644:	08015655 	.word	0x08015655
 8015648:	08015667 	.word	0x08015667
 801564c:	08015679 	.word	0x08015679
 8015650:	0801568b 	.word	0x0801568b
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 8015654:	4b12      	ldr	r3, [pc, #72]	@ (80156a0 <UpdateFCntDown+0x78>)
 8015656:	681b      	ldr	r3, [r3, #0]
 8015658:	683a      	ldr	r2, [r7, #0]
 801565a:	611a      	str	r2, [r3, #16]
            CryptoNvm->LastDownFCnt = currentDown;
 801565c:	4b10      	ldr	r3, [pc, #64]	@ (80156a0 <UpdateFCntDown+0x78>)
 801565e:	681b      	ldr	r3, [r3, #0]
 8015660:	683a      	ldr	r2, [r7, #0]
 8015662:	621a      	str	r2, [r3, #32]
            break;
 8015664:	e017      	b.n	8015696 <UpdateFCntDown+0x6e>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 8015666:	4b0e      	ldr	r3, [pc, #56]	@ (80156a0 <UpdateFCntDown+0x78>)
 8015668:	681b      	ldr	r3, [r3, #0]
 801566a:	683a      	ldr	r2, [r7, #0]
 801566c:	615a      	str	r2, [r3, #20]
            CryptoNvm->LastDownFCnt = currentDown;
 801566e:	4b0c      	ldr	r3, [pc, #48]	@ (80156a0 <UpdateFCntDown+0x78>)
 8015670:	681b      	ldr	r3, [r3, #0]
 8015672:	683a      	ldr	r2, [r7, #0]
 8015674:	621a      	str	r2, [r3, #32]
            break;
 8015676:	e00e      	b.n	8015696 <UpdateFCntDown+0x6e>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 8015678:	4b09      	ldr	r3, [pc, #36]	@ (80156a0 <UpdateFCntDown+0x78>)
 801567a:	681b      	ldr	r3, [r3, #0]
 801567c:	683a      	ldr	r2, [r7, #0]
 801567e:	619a      	str	r2, [r3, #24]
            CryptoNvm->LastDownFCnt = currentDown;
 8015680:	4b07      	ldr	r3, [pc, #28]	@ (80156a0 <UpdateFCntDown+0x78>)
 8015682:	681b      	ldr	r3, [r3, #0]
 8015684:	683a      	ldr	r2, [r7, #0]
 8015686:	621a      	str	r2, [r3, #32]
            break;
 8015688:	e005      	b.n	8015696 <UpdateFCntDown+0x6e>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 801568a:	4b05      	ldr	r3, [pc, #20]	@ (80156a0 <UpdateFCntDown+0x78>)
 801568c:	681b      	ldr	r3, [r3, #0]
 801568e:	683a      	ldr	r2, [r7, #0]
 8015690:	61da      	str	r2, [r3, #28]
            break;
 8015692:	e000      	b.n	8015696 <UpdateFCntDown+0x6e>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 8015694:	bf00      	nop
    }
}
 8015696:	bf00      	nop
 8015698:	370c      	adds	r7, #12
 801569a:	46bd      	mov	sp, r7
 801569c:	bc80      	pop	{r7}
 801569e:	4770      	bx	lr
 80156a0:	20001a6c 	.word	0x20001a6c

080156a4 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 80156a4:	b480      	push	{r7}
 80156a6:	b083      	sub	sp, #12
 80156a8:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 80156aa:	4b18      	ldr	r3, [pc, #96]	@ (801570c <ResetFCnts+0x68>)
 80156ac:	681b      	ldr	r3, [r3, #0]
 80156ae:	2200      	movs	r2, #0
 80156b0:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 80156b2:	4b16      	ldr	r3, [pc, #88]	@ (801570c <ResetFCnts+0x68>)
 80156b4:	681b      	ldr	r3, [r3, #0]
 80156b6:	f04f 32ff 	mov.w	r2, #4294967295
 80156ba:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 80156bc:	4b13      	ldr	r3, [pc, #76]	@ (801570c <ResetFCnts+0x68>)
 80156be:	681b      	ldr	r3, [r3, #0]
 80156c0:	f04f 32ff 	mov.w	r2, #4294967295
 80156c4:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 80156c6:	4b11      	ldr	r3, [pc, #68]	@ (801570c <ResetFCnts+0x68>)
 80156c8:	681b      	ldr	r3, [r3, #0]
 80156ca:	f04f 32ff 	mov.w	r2, #4294967295
 80156ce:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 80156d0:	4b0e      	ldr	r3, [pc, #56]	@ (801570c <ResetFCnts+0x68>)
 80156d2:	681a      	ldr	r2, [r3, #0]
 80156d4:	4b0d      	ldr	r3, [pc, #52]	@ (801570c <ResetFCnts+0x68>)
 80156d6:	681b      	ldr	r3, [r3, #0]
 80156d8:	6992      	ldr	r2, [r2, #24]
 80156da:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80156dc:	2300      	movs	r3, #0
 80156de:	607b      	str	r3, [r7, #4]
 80156e0:	e00b      	b.n	80156fa <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
 80156e2:	4b0a      	ldr	r3, [pc, #40]	@ (801570c <ResetFCnts+0x68>)
 80156e4:	681a      	ldr	r2, [r3, #0]
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	3306      	adds	r3, #6
 80156ea:	009b      	lsls	r3, r3, #2
 80156ec:	4413      	add	r3, r2
 80156ee:	f04f 32ff 	mov.w	r2, #4294967295
 80156f2:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80156f4:	687b      	ldr	r3, [r7, #4]
 80156f6:	3301      	adds	r3, #1
 80156f8:	607b      	str	r3, [r7, #4]
 80156fa:	687b      	ldr	r3, [r7, #4]
 80156fc:	2b00      	cmp	r3, #0
 80156fe:	ddf0      	ble.n	80156e2 <ResetFCnts+0x3e>
    }
}
 8015700:	bf00      	nop
 8015702:	bf00      	nop
 8015704:	370c      	adds	r7, #12
 8015706:	46bd      	mov	sp, r7
 8015708:	bc80      	pop	{r7}
 801570a:	4770      	bx	lr
 801570c:	20001a6c 	.word	0x20001a6c

08015710 <IsJoinNonce10xOk>:

static bool IsJoinNonce10xOk( uint32_t joinNonce )
{
 8015710:	b480      	push	{r7}
 8015712:	b083      	sub	sp, #12
 8015714:	af00      	add	r7, sp, #0
 8015716:	6078      	str	r0, [r7, #4]
#if( USE_10X_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    return ( joinNonce > CryptoNvm->JoinNonce ) ? true : false;
 8015718:	4b06      	ldr	r3, [pc, #24]	@ (8015734 <IsJoinNonce10xOk+0x24>)
 801571a:	681b      	ldr	r3, [r3, #0]
 801571c:	689b      	ldr	r3, [r3, #8]
 801571e:	687a      	ldr	r2, [r7, #4]
 8015720:	429a      	cmp	r2, r3
 8015722:	bf8c      	ite	hi
 8015724:	2301      	movhi	r3, #1
 8015726:	2300      	movls	r3, #0
 8015728:	b2db      	uxtb	r3, r3
#else
    // Check if the JoinNonce is different from the previous one
    return( joinNonce != CryptoNvm->JoinNonce ) ? true : false;
#endif
}
 801572a:	4618      	mov	r0, r3
 801572c:	370c      	adds	r7, #12
 801572e:	46bd      	mov	sp, r7
 8015730:	bc80      	pop	{r7}
 8015732:	4770      	bx	lr
 8015734:	20001a6c 	.word	0x20001a6c

08015738 <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 8015738:	b580      	push	{r7, lr}
 801573a:	b082      	sub	sp, #8
 801573c:	af00      	add	r7, sp, #0
 801573e:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 8015740:	687b      	ldr	r3, [r7, #4]
 8015742:	2b00      	cmp	r3, #0
 8015744:	d101      	bne.n	801574a <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 8015746:	2308      	movs	r3, #8
 8015748:	e01c      	b.n	8015784 <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 801574a:	4a10      	ldr	r2, [pc, #64]	@ (801578c <LoRaMacCryptoInit+0x54>)
 801574c:	687b      	ldr	r3, [r7, #4]
 801574e:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 8015750:	4b0e      	ldr	r3, [pc, #56]	@ (801578c <LoRaMacCryptoInit+0x54>)
 8015752:	681b      	ldr	r3, [r3, #0]
 8015754:	2228      	movs	r2, #40	@ 0x28
 8015756:	2100      	movs	r1, #0
 8015758:	4618      	mov	r0, r3
 801575a:	f004 fce5 	bl	801a128 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 801575e:	4b0b      	ldr	r3, [pc, #44]	@ (801578c <LoRaMacCryptoInit+0x54>)
 8015760:	681b      	ldr	r3, [r3, #0]
 8015762:	2201      	movs	r2, #1
 8015764:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 8015766:	4b09      	ldr	r3, [pc, #36]	@ (801578c <LoRaMacCryptoInit+0x54>)
 8015768:	681b      	ldr	r3, [r3, #0]
 801576a:	2201      	movs	r2, #1
 801576c:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 801576e:	4b07      	ldr	r3, [pc, #28]	@ (801578c <LoRaMacCryptoInit+0x54>)
 8015770:	681b      	ldr	r3, [r3, #0]
 8015772:	2201      	movs	r2, #1
 8015774:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 8015776:	4b05      	ldr	r3, [pc, #20]	@ (801578c <LoRaMacCryptoInit+0x54>)
 8015778:	681b      	ldr	r3, [r3, #0]
 801577a:	2200      	movs	r2, #0
 801577c:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 801577e:	f7ff ff91 	bl	80156a4 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 8015782:	2300      	movs	r3, #0
}
 8015784:	4618      	mov	r0, r3
 8015786:	3708      	adds	r7, #8
 8015788:	46bd      	mov	sp, r7
 801578a:	bd80      	pop	{r7, pc}
 801578c:	20001a6c 	.word	0x20001a6c

08015790 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 8015790:	b480      	push	{r7}
 8015792:	b083      	sub	sp, #12
 8015794:	af00      	add	r7, sp, #0
 8015796:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 8015798:	4b04      	ldr	r3, [pc, #16]	@ (80157ac <LoRaMacCryptoSetLrWanVersion+0x1c>)
 801579a:	681b      	ldr	r3, [r3, #0]
 801579c:	687a      	ldr	r2, [r7, #4]
 801579e:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 80157a0:	2300      	movs	r3, #0
}
 80157a2:	4618      	mov	r0, r3
 80157a4:	370c      	adds	r7, #12
 80157a6:	46bd      	mov	sp, r7
 80157a8:	bc80      	pop	{r7}
 80157aa:	4770      	bx	lr
 80157ac:	20001a6c 	.word	0x20001a6c

080157b0 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 80157b0:	b480      	push	{r7}
 80157b2:	b083      	sub	sp, #12
 80157b4:	af00      	add	r7, sp, #0
 80157b6:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 80157b8:	687b      	ldr	r3, [r7, #4]
 80157ba:	2b00      	cmp	r3, #0
 80157bc:	d101      	bne.n	80157c2 <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80157be:	2309      	movs	r3, #9
 80157c0:	e006      	b.n	80157d0 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 80157c2:	4b06      	ldr	r3, [pc, #24]	@ (80157dc <LoRaMacCryptoGetFCntUp+0x2c>)
 80157c4:	681b      	ldr	r3, [r3, #0]
 80157c6:	68db      	ldr	r3, [r3, #12]
 80157c8:	1c5a      	adds	r2, r3, #1
 80157ca:	687b      	ldr	r3, [r7, #4]
 80157cc:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 80157ce:	2300      	movs	r3, #0
}
 80157d0:	4618      	mov	r0, r3
 80157d2:	370c      	adds	r7, #12
 80157d4:	46bd      	mov	sp, r7
 80157d6:	bc80      	pop	{r7}
 80157d8:	4770      	bx	lr
 80157da:	bf00      	nop
 80157dc:	20001a6c 	.word	0x20001a6c

080157e0 <LoRaMacCryptoGetFCntDown>:

    return LORAMAC_CRYPTO_SUCCESS;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint32_t frameFcnt, uint32_t* currentDown )
{
 80157e0:	b580      	push	{r7, lr}
 80157e2:	b088      	sub	sp, #32
 80157e4:	af00      	add	r7, sp, #0
 80157e6:	4603      	mov	r3, r0
 80157e8:	60b9      	str	r1, [r7, #8]
 80157ea:	607a      	str	r2, [r7, #4]
 80157ec:	73fb      	strb	r3, [r7, #15]
    uint32_t lastDown = 0;
 80157ee:	2300      	movs	r3, #0
 80157f0:	617b      	str	r3, [r7, #20]
    int32_t fCntDiff = 0;
 80157f2:	2300      	movs	r3, #0
 80157f4:	61fb      	str	r3, [r7, #28]
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 80157f6:	2312      	movs	r3, #18
 80157f8:	76fb      	strb	r3, [r7, #27]

    if( currentDown == NULL )
 80157fa:	687b      	ldr	r3, [r7, #4]
 80157fc:	2b00      	cmp	r3, #0
 80157fe:	d101      	bne.n	8015804 <LoRaMacCryptoGetFCntDown+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015800:	2309      	movs	r3, #9
 8015802:	e035      	b.n	8015870 <LoRaMacCryptoGetFCntDown+0x90>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 8015804:	f107 0214 	add.w	r2, r7, #20
 8015808:	7bfb      	ldrb	r3, [r7, #15]
 801580a:	4611      	mov	r1, r2
 801580c:	4618      	mov	r0, r3
 801580e:	f7ff feab 	bl	8015568 <GetLastFcntDown>
 8015812:	4603      	mov	r3, r0
 8015814:	76fb      	strb	r3, [r7, #27]
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8015816:	7efb      	ldrb	r3, [r7, #27]
 8015818:	2b00      	cmp	r3, #0
 801581a:	d001      	beq.n	8015820 <LoRaMacCryptoGetFCntDown+0x40>
    {
        return cryptoStatus;
 801581c:	7efb      	ldrb	r3, [r7, #27]
 801581e:	e027      	b.n	8015870 <LoRaMacCryptoGetFCntDown+0x90>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITIAL_VALUE )
 8015820:	697b      	ldr	r3, [r7, #20]
 8015822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015826:	d103      	bne.n	8015830 <LoRaMacCryptoGetFCntDown+0x50>
    {
        *currentDown = frameFcnt;
 8015828:	687b      	ldr	r3, [r7, #4]
 801582a:	68ba      	ldr	r2, [r7, #8]
 801582c:	601a      	str	r2, [r3, #0]
 801582e:	e01e      	b.n	801586e <LoRaMacCryptoGetFCntDown+0x8e>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 8015830:	697b      	ldr	r3, [r7, #20]
 8015832:	b29b      	uxth	r3, r3
 8015834:	68ba      	ldr	r2, [r7, #8]
 8015836:	1ad3      	subs	r3, r2, r3
 8015838:	61fb      	str	r3, [r7, #28]

        if( fCntDiff > 0 )
 801583a:	69fb      	ldr	r3, [r7, #28]
 801583c:	2b00      	cmp	r3, #0
 801583e:	dd05      	ble.n	801584c <LoRaMacCryptoGetFCntDown+0x6c>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 8015840:	697a      	ldr	r2, [r7, #20]
 8015842:	69fb      	ldr	r3, [r7, #28]
 8015844:	441a      	add	r2, r3
 8015846:	687b      	ldr	r3, [r7, #4]
 8015848:	601a      	str	r2, [r3, #0]
 801584a:	e010      	b.n	801586e <LoRaMacCryptoGetFCntDown+0x8e>
        }
        else if( fCntDiff == 0 )
 801584c:	69fb      	ldr	r3, [r7, #28]
 801584e:	2b00      	cmp	r3, #0
 8015850:	d104      	bne.n	801585c <LoRaMacCryptoGetFCntDown+0x7c>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 8015852:	697a      	ldr	r2, [r7, #20]
 8015854:	687b      	ldr	r3, [r7, #4]
 8015856:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8015858:	2307      	movs	r3, #7
 801585a:	e009      	b.n	8015870 <LoRaMacCryptoGetFCntDown+0x90>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 801585c:	697b      	ldr	r3, [r7, #20]
 801585e:	0c1b      	lsrs	r3, r3, #16
 8015860:	041b      	lsls	r3, r3, #16
 8015862:	68ba      	ldr	r2, [r7, #8]
 8015864:	4413      	add	r3, r2
 8015866:	f503 3280 	add.w	r2, r3, #65536	@ 0x10000
 801586a:	687b      	ldr	r3, [r7, #4]
 801586c:	601a      	str	r2, [r3, #0]
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801586e:	2300      	movs	r3, #0
}
 8015870:	4618      	mov	r0, r3
 8015872:	3720      	adds	r7, #32
 8015874:	46bd      	mov	sp, r7
 8015876:	bd80      	pop	{r7, pc}

08015878 <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 8015878:	b480      	push	{r7}
 801587a:	b085      	sub	sp, #20
 801587c:	af00      	add	r7, sp, #0
 801587e:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 8015880:	687b      	ldr	r3, [r7, #4]
 8015882:	2b00      	cmp	r3, #0
 8015884:	d101      	bne.n	801588a <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015886:	2309      	movs	r3, #9
 8015888:	e019      	b.n	80158be <LoRaMacCryptoSetMulticastReference+0x46>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 801588a:	2300      	movs	r3, #0
 801588c:	60fb      	str	r3, [r7, #12]
 801588e:	e012      	b.n	80158b6 <LoRaMacCryptoSetMulticastReference+0x3e>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 8015890:	4b0d      	ldr	r3, [pc, #52]	@ (80158c8 <LoRaMacCryptoSetMulticastReference+0x50>)
 8015892:	6819      	ldr	r1, [r3, #0]
 8015894:	68fa      	ldr	r2, [r7, #12]
 8015896:	4613      	mov	r3, r2
 8015898:	005b      	lsls	r3, r3, #1
 801589a:	4413      	add	r3, r2
 801589c:	011b      	lsls	r3, r3, #4
 801589e:	461a      	mov	r2, r3
 80158a0:	687b      	ldr	r3, [r7, #4]
 80158a2:	4413      	add	r3, r2
 80158a4:	68fa      	ldr	r2, [r7, #12]
 80158a6:	3206      	adds	r2, #6
 80158a8:	0092      	lsls	r2, r2, #2
 80158aa:	440a      	add	r2, r1
 80158ac:	3204      	adds	r2, #4
 80158ae:	625a      	str	r2, [r3, #36]	@ 0x24
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80158b0:	68fb      	ldr	r3, [r7, #12]
 80158b2:	3301      	adds	r3, #1
 80158b4:	60fb      	str	r3, [r7, #12]
 80158b6:	68fb      	ldr	r3, [r7, #12]
 80158b8:	2b00      	cmp	r3, #0
 80158ba:	dde9      	ble.n	8015890 <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80158bc:	2300      	movs	r3, #0
}
 80158be:	4618      	mov	r0, r3
 80158c0:	3714      	adds	r7, #20
 80158c2:	46bd      	mov	sp, r7
 80158c4:	bc80      	pop	{r7}
 80158c6:	4770      	bx	lr
 80158c8:	20001a6c 	.word	0x20001a6c

080158cc <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 80158cc:	b580      	push	{r7, lr}
 80158ce:	b082      	sub	sp, #8
 80158d0:	af00      	add	r7, sp, #0
 80158d2:	4603      	mov	r3, r0
 80158d4:	6039      	str	r1, [r7, #0]
 80158d6:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 80158d8:	79fb      	ldrb	r3, [r7, #7]
 80158da:	6839      	ldr	r1, [r7, #0]
 80158dc:	4618      	mov	r0, r3
 80158de:	f7f7 fe1d 	bl	800d51c <SecureElementSetKey>
 80158e2:	4603      	mov	r3, r0
 80158e4:	2b00      	cmp	r3, #0
 80158e6:	d001      	beq.n	80158ec <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80158e8:	230e      	movs	r3, #14
 80158ea:	e021      	b.n	8015930 <LoRaMacCryptoSetKey+0x64>
    }
    if( keyID == APP_KEY )
 80158ec:	79fb      	ldrb	r3, [r7, #7]
 80158ee:	2b00      	cmp	r3, #0
 80158f0:	d11d      	bne.n	801592e <LoRaMacCryptoSetKey+0x62>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveLifeTimeKey( CryptoNvm->LrWanVersion.Fields.Minor, MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 80158f2:	4b11      	ldr	r3, [pc, #68]	@ (8015938 <LoRaMacCryptoSetKey+0x6c>)
 80158f4:	681b      	ldr	r3, [r3, #0]
 80158f6:	789b      	ldrb	r3, [r3, #2]
 80158f8:	210b      	movs	r1, #11
 80158fa:	4618      	mov	r0, r3
 80158fc:	f000 fa56 	bl	8015dac <LoRaMacCryptoDeriveLifeTimeKey>
 8015900:	4603      	mov	r3, r0
 8015902:	2b00      	cmp	r3, #0
 8015904:	d001      	beq.n	801590a <LoRaMacCryptoSetKey+0x3e>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015906:	230e      	movs	r3, #14
 8015908:	e012      	b.n	8015930 <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 801590a:	210c      	movs	r1, #12
 801590c:	2000      	movs	r0, #0
 801590e:	f000 fa4d 	bl	8015dac <LoRaMacCryptoDeriveLifeTimeKey>
 8015912:	4603      	mov	r3, r0
 8015914:	2b00      	cmp	r3, #0
 8015916:	d001      	beq.n	801591c <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015918:	230e      	movs	r3, #14
 801591a:	e009      	b.n	8015930 <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 801591c:	210a      	movs	r1, #10
 801591e:	2000      	movs	r0, #0
 8015920:	f000 fa44 	bl	8015dac <LoRaMacCryptoDeriveLifeTimeKey>
 8015924:	4603      	mov	r3, r0
 8015926:	2b00      	cmp	r3, #0
 8015928:	d001      	beq.n	801592e <LoRaMacCryptoSetKey+0x62>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801592a:	230e      	movs	r3, #14
 801592c:	e000      	b.n	8015930 <LoRaMacCryptoSetKey+0x64>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 801592e:	2300      	movs	r3, #0
}
 8015930:	4618      	mov	r0, r3
 8015932:	3708      	adds	r7, #8
 8015934:	46bd      	mov	sp, r7
 8015936:	bd80      	pop	{r7, pc}
 8015938:	20001a6c 	.word	0x20001a6c

0801593c <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 801593c:	b580      	push	{r7, lr}
 801593e:	b086      	sub	sp, #24
 8015940:	af02      	add	r7, sp, #8
 8015942:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 8015944:	687b      	ldr	r3, [r7, #4]
 8015946:	2b00      	cmp	r3, #0
 8015948:	d101      	bne.n	801594e <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801594a:	2309      	movs	r3, #9
 801594c:	e02d      	b.n	80159aa <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 801594e:	2301      	movs	r3, #1
 8015950:	73fb      	strb	r3, [r7, #15]
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
    SecureElementRandomNumber( &devNonce );
    CryptoNvm->DevNonce = devNonce;
#else
    CryptoNvm->DevNonce++;
 8015952:	4b18      	ldr	r3, [pc, #96]	@ (80159b4 <LoRaMacCryptoPrepareJoinRequest+0x78>)
 8015954:	681b      	ldr	r3, [r3, #0]
 8015956:	889a      	ldrh	r2, [r3, #4]
 8015958:	3201      	adds	r2, #1
 801595a:	b292      	uxth	r2, r2
 801595c:	809a      	strh	r2, [r3, #4]
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 801595e:	4b15      	ldr	r3, [pc, #84]	@ (80159b4 <LoRaMacCryptoPrepareJoinRequest+0x78>)
 8015960:	681b      	ldr	r3, [r3, #0]
 8015962:	889a      	ldrh	r2, [r3, #4]
 8015964:	687b      	ldr	r3, [r7, #4]
 8015966:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* LORAMAC_VERSION */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8015968:	6878      	ldr	r0, [r7, #4]
 801596a:	f000 fc17 	bl	801619c <LoRaMacSerializerJoinRequest>
 801596e:	4603      	mov	r3, r0
 8015970:	2b00      	cmp	r3, #0
 8015972:	d001      	beq.n	8015978 <LoRaMacCryptoPrepareJoinRequest+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8015974:	2310      	movs	r3, #16
 8015976:	e018      	b.n	80159aa <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8015978:	687b      	ldr	r3, [r7, #4]
 801597a:	6819      	ldr	r1, [r3, #0]
 801597c:	687b      	ldr	r3, [r7, #4]
 801597e:	3318      	adds	r3, #24
 8015980:	7bfa      	ldrb	r2, [r7, #15]
 8015982:	9300      	str	r3, [sp, #0]
 8015984:	4613      	mov	r3, r2
 8015986:	2213      	movs	r2, #19
 8015988:	2000      	movs	r0, #0
 801598a:	f7f7 fe25 	bl	800d5d8 <SecureElementComputeAesCmac>
 801598e:	4603      	mov	r3, r0
 8015990:	2b00      	cmp	r3, #0
 8015992:	d001      	beq.n	8015998 <LoRaMacCryptoPrepareJoinRequest+0x5c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015994:	230e      	movs	r3, #14
 8015996:	e008      	b.n	80159aa <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8015998:	6878      	ldr	r0, [r7, #4]
 801599a:	f000 fbff 	bl	801619c <LoRaMacSerializerJoinRequest>
 801599e:	4603      	mov	r3, r0
 80159a0:	2b00      	cmp	r3, #0
 80159a2:	d001      	beq.n	80159a8 <LoRaMacCryptoPrepareJoinRequest+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80159a4:	2310      	movs	r3, #16
 80159a6:	e000      	b.n	80159aa <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80159a8:	2300      	movs	r3, #0
}
 80159aa:	4618      	mov	r0, r3
 80159ac:	3710      	adds	r7, #16
 80159ae:	46bd      	mov	sp, r7
 80159b0:	bd80      	pop	{r7, pc}
 80159b2:	bf00      	nop
 80159b4:	20001a6c 	.word	0x20001a6c

080159b8 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 80159b8:	b590      	push	{r4, r7, lr}
 80159ba:	b097      	sub	sp, #92	@ 0x5c
 80159bc:	af04      	add	r7, sp, #16
 80159be:	4603      	mov	r3, r0
 80159c0:	60b9      	str	r1, [r7, #8]
 80159c2:	607a      	str	r2, [r7, #4]
 80159c4:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 80159c6:	687b      	ldr	r3, [r7, #4]
 80159c8:	2b00      	cmp	r3, #0
 80159ca:	d002      	beq.n	80159d2 <LoRaMacCryptoHandleJoinAccept+0x1a>
 80159cc:	68bb      	ldr	r3, [r7, #8]
 80159ce:	2b00      	cmp	r3, #0
 80159d0:	d101      	bne.n	80159d6 <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80159d2:	2309      	movs	r3, #9
 80159d4:	e0d3      	b.n	8015b7e <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 80159d6:	2312      	movs	r3, #18
 80159d8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 80159dc:	2300      	movs	r3, #0
 80159de:	617b      	str	r3, [r7, #20]
 80159e0:	f107 0318 	add.w	r3, r7, #24
 80159e4:	221d      	movs	r2, #29
 80159e6:	2100      	movs	r1, #0
 80159e8:	4618      	mov	r0, r3
 80159ea:	f009 f97b 	bl	801ece4 <memset>
    uint8_t versionMinor         = 0;
 80159ee:	2300      	movs	r3, #0
 80159f0:	74fb      	strb	r3, [r7, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 80159f2:	4b65      	ldr	r3, [pc, #404]	@ (8015b88 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 80159f4:	681b      	ldr	r3, [r3, #0]
 80159f6:	889b      	ldrh	r3, [r3, #4]
 80159f8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* LORAMAC_VERSION */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 80159fc:	687b      	ldr	r3, [r7, #4]
 80159fe:	681c      	ldr	r4, [r3, #0]
 8015a00:	687b      	ldr	r3, [r7, #4]
 8015a02:	791b      	ldrb	r3, [r3, #4]
 8015a04:	f8b7 1044 	ldrh.w	r1, [r7, #68]	@ 0x44
 8015a08:	7bf8      	ldrb	r0, [r7, #15]
 8015a0a:	f107 0213 	add.w	r2, r7, #19
 8015a0e:	9202      	str	r2, [sp, #8]
 8015a10:	f107 0214 	add.w	r2, r7, #20
 8015a14:	9201      	str	r2, [sp, #4]
 8015a16:	9300      	str	r3, [sp, #0]
 8015a18:	4623      	mov	r3, r4
 8015a1a:	460a      	mov	r2, r1
 8015a1c:	68b9      	ldr	r1, [r7, #8]
 8015a1e:	f7f7 fee1 	bl	800d7e4 <SecureElementProcessJoinAccept>
 8015a22:	4603      	mov	r3, r0
 8015a24:	2b00      	cmp	r3, #0
 8015a26:	d001      	beq.n	8015a2c <LoRaMacCryptoHandleJoinAccept+0x74>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015a28:	230e      	movs	r3, #14
 8015a2a:	e0a8      	b.n	8015b7e <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 8015a2c:	687b      	ldr	r3, [r7, #4]
 8015a2e:	6818      	ldr	r0, [r3, #0]
 8015a30:	687b      	ldr	r3, [r7, #4]
 8015a32:	791b      	ldrb	r3, [r3, #4]
 8015a34:	461a      	mov	r2, r3
 8015a36:	f107 0314 	add.w	r3, r7, #20
 8015a3a:	4619      	mov	r1, r3
 8015a3c:	f004 fb39 	bl	801a0b2 <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8015a40:	6878      	ldr	r0, [r7, #4]
 8015a42:	f000 f9ee 	bl	8015e22 <LoRaMacParserJoinAccept>
 8015a46:	4603      	mov	r3, r0
 8015a48:	2b00      	cmp	r3, #0
 8015a4a:	d001      	beq.n	8015a50 <LoRaMacCryptoHandleJoinAccept+0x98>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8015a4c:	230f      	movs	r3, #15
 8015a4e:	e096      	b.n	8015b7e <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    uint32_t currentJoinNonce;
    bool isJoinNonceOk = false;
 8015a50:	2300      	movs	r3, #0
 8015a52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 8015a56:	687b      	ldr	r3, [r7, #4]
 8015a58:	799b      	ldrb	r3, [r3, #6]
 8015a5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 8015a5c:	687b      	ldr	r3, [r7, #4]
 8015a5e:	79db      	ldrb	r3, [r3, #7]
 8015a60:	021b      	lsls	r3, r3, #8
 8015a62:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8015a64:	4313      	orrs	r3, r2
 8015a66:	63fb      	str	r3, [r7, #60]	@ 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 8015a68:	687b      	ldr	r3, [r7, #4]
 8015a6a:	7a1b      	ldrb	r3, [r3, #8]
 8015a6c:	041b      	lsls	r3, r3, #16
 8015a6e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8015a70:	4313      	orrs	r3, r2
 8015a72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        isJoinNonceOk = IsJoinNonce11xOk( currentJoinNonce );
    }
    else
#endif /* LORAMAC_VERSION */
    {
        isJoinNonceOk = IsJoinNonce10xOk( currentJoinNonce );
 8015a74:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8015a76:	f7ff fe4b 	bl	8015710 <IsJoinNonce10xOk>
 8015a7a:	4603      	mov	r3, r0
 8015a7c:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    }

    if( isJoinNonceOk == true )
 8015a80:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8015a84:	2b00      	cmp	r3, #0
 8015a86:	d010      	beq.n	8015aaa <LoRaMacCryptoHandleJoinAccept+0xf2>
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 8015a88:	4b3f      	ldr	r3, [pc, #252]	@ (8015b88 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8015a8a:	681b      	ldr	r3, [r3, #0]
 8015a8c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8015a8e:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveLifeTimeKey( versionMinor, MC_ROOT_KEY );
 8015a90:	7cfb      	ldrb	r3, [r7, #19]
 8015a92:	210b      	movs	r1, #11
 8015a94:	4618      	mov	r0, r3
 8015a96:	f000 f989 	bl	8015dac <LoRaMacCryptoDeriveLifeTimeKey>
 8015a9a:	4603      	mov	r3, r0
 8015a9c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015aa0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015aa4:	2b00      	cmp	r3, #0
 8015aa6:	d005      	beq.n	8015ab4 <LoRaMacCryptoHandleJoinAccept+0xfc>
 8015aa8:	e001      	b.n	8015aae <LoRaMacCryptoHandleJoinAccept+0xf6>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 8015aaa:	2303      	movs	r3, #3
 8015aac:	e067      	b.n	8015b7e <LoRaMacCryptoHandleJoinAccept+0x1c6>
    {
        return retval;
 8015aae:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015ab2:	e064      	b.n	8015b7e <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY );
 8015ab4:	210c      	movs	r1, #12
 8015ab6:	2000      	movs	r0, #0
 8015ab8:	f000 f978 	bl	8015dac <LoRaMacCryptoDeriveLifeTimeKey>
 8015abc:	4603      	mov	r3, r0
 8015abe:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015ac2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015ac6:	2b00      	cmp	r3, #0
 8015ac8:	d002      	beq.n	8015ad0 <LoRaMacCryptoHandleJoinAccept+0x118>
    {
        return retval;
 8015aca:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015ace:	e056      	b.n	8015b7e <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY );
 8015ad0:	210a      	movs	r1, #10
 8015ad2:	2000      	movs	r0, #0
 8015ad4:	f000 f96a 	bl	8015dac <LoRaMacCryptoDeriveLifeTimeKey>
 8015ad8:	4603      	mov	r3, r0
 8015ada:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015ade:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015ae2:	2b00      	cmp	r3, #0
 8015ae4:	d002      	beq.n	8015aec <LoRaMacCryptoHandleJoinAccept+0x134>
    {
        return retval;
 8015ae6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015aea:	e048      	b.n	8015b7e <LoRaMacCryptoHandleJoinAccept+0x1c6>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 8015aec:	687b      	ldr	r3, [r7, #4]
 8015aee:	7a5b      	ldrb	r3, [r3, #9]
 8015af0:	63bb      	str	r3, [r7, #56]	@ 0x38
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 8015af2:	687b      	ldr	r3, [r7, #4]
 8015af4:	7a9b      	ldrb	r3, [r3, #10]
 8015af6:	021b      	lsls	r3, r3, #8
 8015af8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015afa:	4313      	orrs	r3, r2
 8015afc:	63bb      	str	r3, [r7, #56]	@ 0x38
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 8015afe:	687b      	ldr	r3, [r7, #4]
 8015b00:	7adb      	ldrb	r3, [r3, #11]
 8015b02:	041b      	lsls	r3, r3, #16
 8015b04:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015b06:	4313      	orrs	r3, r2
 8015b08:	63bb      	str	r3, [r7, #56]	@ 0x38

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 8015b0a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8015b0e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015b10:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8015b12:	2009      	movs	r0, #9
 8015b14:	f7ff fcd8 	bl	80154c8 <DeriveSessionKey10x>
 8015b18:	4603      	mov	r3, r0
 8015b1a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015b1e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015b22:	2b00      	cmp	r3, #0
 8015b24:	d002      	beq.n	8015b2c <LoRaMacCryptoHandleJoinAccept+0x174>
        {
            return retval;
 8015b26:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015b2a:	e028      	b.n	8015b7e <LoRaMacCryptoHandleJoinAccept+0x1c6>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 8015b2c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8015b30:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015b32:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8015b34:	2008      	movs	r0, #8
 8015b36:	f7ff fcc7 	bl	80154c8 <DeriveSessionKey10x>
 8015b3a:	4603      	mov	r3, r0
 8015b3c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
#endif /* LORAMAC_VERSION */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015b40:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015b44:	2b00      	cmp	r3, #0
 8015b46:	d002      	beq.n	8015b4e <LoRaMacCryptoHandleJoinAccept+0x196>
        {
            return retval;
 8015b48:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015b4c:	e017      	b.n	8015b7e <LoRaMacCryptoHandleJoinAccept+0x1c6>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 8015b4e:	4b0e      	ldr	r3, [pc, #56]	@ (8015b88 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8015b50:	681b      	ldr	r3, [r3, #0]
 8015b52:	7cfa      	ldrb	r2, [r7, #19]
 8015b54:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    RJcount0 = 0;
#endif /* LORAMAC_VERSION */
    CryptoNvm->FCntList.FCntUp = 0;
 8015b56:	4b0c      	ldr	r3, [pc, #48]	@ (8015b88 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8015b58:	681b      	ldr	r3, [r3, #0]
 8015b5a:	2200      	movs	r2, #0
 8015b5c:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 8015b5e:	4b0a      	ldr	r3, [pc, #40]	@ (8015b88 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8015b60:	681b      	ldr	r3, [r3, #0]
 8015b62:	f04f 32ff 	mov.w	r2, #4294967295
 8015b66:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8015b68:	4b07      	ldr	r3, [pc, #28]	@ (8015b88 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8015b6a:	681b      	ldr	r3, [r3, #0]
 8015b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8015b70:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8015b72:	4b05      	ldr	r3, [pc, #20]	@ (8015b88 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8015b74:	681b      	ldr	r3, [r3, #0]
 8015b76:	f04f 32ff 	mov.w	r2, #4294967295
 8015b7a:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 8015b7c:	2300      	movs	r3, #0
}
 8015b7e:	4618      	mov	r0, r3
 8015b80:	374c      	adds	r7, #76	@ 0x4c
 8015b82:	46bd      	mov	sp, r7
 8015b84:	bd90      	pop	{r4, r7, pc}
 8015b86:	bf00      	nop
 8015b88:	20001a6c 	.word	0x20001a6c

08015b8c <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 8015b8c:	b590      	push	{r4, r7, lr}
 8015b8e:	b08b      	sub	sp, #44	@ 0x2c
 8015b90:	af04      	add	r7, sp, #16
 8015b92:	60f8      	str	r0, [r7, #12]
 8015b94:	607b      	str	r3, [r7, #4]
 8015b96:	460b      	mov	r3, r1
 8015b98:	72fb      	strb	r3, [r7, #11]
 8015b9a:	4613      	mov	r3, r2
 8015b9c:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8015b9e:	2312      	movs	r3, #18
 8015ba0:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8015ba2:	2309      	movs	r3, #9
 8015ba4:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 8015ba6:	687b      	ldr	r3, [r7, #4]
 8015ba8:	2b00      	cmp	r3, #0
 8015baa:	d101      	bne.n	8015bb0 <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015bac:	2309      	movs	r3, #9
 8015bae:	e05e      	b.n	8015c6e <LoRaMacCryptoSecureMessage+0xe2>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 8015bb0:	4b31      	ldr	r3, [pc, #196]	@ (8015c78 <LoRaMacCryptoSecureMessage+0xec>)
 8015bb2:	681b      	ldr	r3, [r3, #0]
 8015bb4:	68db      	ldr	r3, [r3, #12]
 8015bb6:	68fa      	ldr	r2, [r7, #12]
 8015bb8:	429a      	cmp	r2, r3
 8015bba:	d201      	bcs.n	8015bc0 <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8015bbc:	2306      	movs	r3, #6
 8015bbe:	e056      	b.n	8015c6e <LoRaMacCryptoSecureMessage+0xe2>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8015bc0:	687b      	ldr	r3, [r7, #4]
 8015bc2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015bc6:	2b00      	cmp	r3, #0
 8015bc8:	d101      	bne.n	8015bce <LoRaMacCryptoSecureMessage+0x42>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8015bca:	2308      	movs	r3, #8
 8015bcc:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 8015bce:	4b2a      	ldr	r3, [pc, #168]	@ (8015c78 <LoRaMacCryptoSecureMessage+0xec>)
 8015bd0:	681b      	ldr	r3, [r3, #0]
 8015bd2:	68db      	ldr	r3, [r3, #12]
 8015bd4:	68fa      	ldr	r2, [r7, #12]
 8015bd6:	429a      	cmp	r2, r3
 8015bd8:	d916      	bls.n	8015c08 <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8015bde:	687b      	ldr	r3, [r7, #4]
 8015be0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015be4:	b219      	sxth	r1, r3
 8015be6:	687b      	ldr	r3, [r7, #4]
 8015be8:	689c      	ldr	r4, [r3, #8]
 8015bea:	7dfa      	ldrb	r2, [r7, #23]
 8015bec:	68fb      	ldr	r3, [r7, #12]
 8015bee:	9301      	str	r3, [sp, #4]
 8015bf0:	2300      	movs	r3, #0
 8015bf2:	9300      	str	r3, [sp, #0]
 8015bf4:	4623      	mov	r3, r4
 8015bf6:	f7ff fa73 	bl	80150e0 <PayloadEncrypt>
 8015bfa:	4603      	mov	r3, r0
 8015bfc:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015bfe:	7dbb      	ldrb	r3, [r7, #22]
 8015c00:	2b00      	cmp	r3, #0
 8015c02:	d001      	beq.n	8015c08 <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 8015c04:	7dbb      	ldrb	r3, [r7, #22]
 8015c06:	e032      	b.n	8015c6e <LoRaMacCryptoSecureMessage+0xe2>
        }
#endif /* LORAMAC_VERSION */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8015c08:	6878      	ldr	r0, [r7, #4]
 8015c0a:	f000 fb49 	bl	80162a0 <LoRaMacSerializerData>
 8015c0e:	4603      	mov	r3, r0
 8015c10:	2b00      	cmp	r3, #0
 8015c12:	d001      	beq.n	8015c18 <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8015c14:	2310      	movs	r3, #16
 8015c16:	e02a      	b.n	8015c6e <LoRaMacCryptoSecureMessage+0xe2>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8015c18:	2308      	movs	r3, #8
 8015c1a:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8015c1c:	687b      	ldr	r3, [r7, #4]
 8015c1e:	6818      	ldr	r0, [r3, #0]
 8015c20:	687b      	ldr	r3, [r7, #4]
 8015c22:	791b      	ldrb	r3, [r3, #4]
 8015c24:	3b04      	subs	r3, #4
 8015c26:	b299      	uxth	r1, r3
 8015c28:	687b      	ldr	r3, [r7, #4]
 8015c2a:	689b      	ldr	r3, [r3, #8]
 8015c2c:	687a      	ldr	r2, [r7, #4]
 8015c2e:	322c      	adds	r2, #44	@ 0x2c
 8015c30:	7dfc      	ldrb	r4, [r7, #23]
 8015c32:	9203      	str	r2, [sp, #12]
 8015c34:	68fa      	ldr	r2, [r7, #12]
 8015c36:	9202      	str	r2, [sp, #8]
 8015c38:	9301      	str	r3, [sp, #4]
 8015c3a:	2300      	movs	r3, #0
 8015c3c:	9300      	str	r3, [sp, #0]
 8015c3e:	2300      	movs	r3, #0
 8015c40:	4622      	mov	r2, r4
 8015c42:	f7ff fb4e 	bl	80152e2 <ComputeCmacB0>
 8015c46:	4603      	mov	r3, r0
 8015c48:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015c4a:	7dbb      	ldrb	r3, [r7, #22]
 8015c4c:	2b00      	cmp	r3, #0
 8015c4e:	d001      	beq.n	8015c54 <LoRaMacCryptoSecureMessage+0xc8>
        {
            return retval;
 8015c50:	7dbb      	ldrb	r3, [r7, #22]
 8015c52:	e00c      	b.n	8015c6e <LoRaMacCryptoSecureMessage+0xe2>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8015c54:	6878      	ldr	r0, [r7, #4]
 8015c56:	f000 fb23 	bl	80162a0 <LoRaMacSerializerData>
 8015c5a:	4603      	mov	r3, r0
 8015c5c:	2b00      	cmp	r3, #0
 8015c5e:	d001      	beq.n	8015c64 <LoRaMacCryptoSecureMessage+0xd8>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8015c60:	2310      	movs	r3, #16
 8015c62:	e004      	b.n	8015c6e <LoRaMacCryptoSecureMessage+0xe2>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 8015c64:	4b04      	ldr	r3, [pc, #16]	@ (8015c78 <LoRaMacCryptoSecureMessage+0xec>)
 8015c66:	681b      	ldr	r3, [r3, #0]
 8015c68:	68fa      	ldr	r2, [r7, #12]
 8015c6a:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 8015c6c:	2300      	movs	r3, #0
}
 8015c6e:	4618      	mov	r0, r3
 8015c70:	371c      	adds	r7, #28
 8015c72:	46bd      	mov	sp, r7
 8015c74:	bd90      	pop	{r4, r7, pc}
 8015c76:	bf00      	nop
 8015c78:	20001a6c 	.word	0x20001a6c

08015c7c <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8015c7c:	b590      	push	{r4, r7, lr}
 8015c7e:	b08b      	sub	sp, #44	@ 0x2c
 8015c80:	af04      	add	r7, sp, #16
 8015c82:	60b9      	str	r1, [r7, #8]
 8015c84:	607b      	str	r3, [r7, #4]
 8015c86:	4603      	mov	r3, r0
 8015c88:	73fb      	strb	r3, [r7, #15]
 8015c8a:	4613      	mov	r3, r2
 8015c8c:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 8015c8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c90:	2b00      	cmp	r3, #0
 8015c92:	d101      	bne.n	8015c98 <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015c94:	2309      	movs	r3, #9
 8015c96:	e083      	b.n	8015da0 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8015c98:	7bbb      	ldrb	r3, [r7, #14]
 8015c9a:	6879      	ldr	r1, [r7, #4]
 8015c9c:	4618      	mov	r0, r3
 8015c9e:	f7ff fc9f 	bl	80155e0 <CheckFCntDown>
 8015ca2:	4603      	mov	r3, r0
 8015ca4:	f083 0301 	eor.w	r3, r3, #1
 8015ca8:	b2db      	uxtb	r3, r3
 8015caa:	2b00      	cmp	r3, #0
 8015cac:	d001      	beq.n	8015cb2 <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8015cae:	2306      	movs	r3, #6
 8015cb0:	e076      	b.n	8015da0 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8015cb2:	2312      	movs	r3, #18
 8015cb4:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8015cb6:	2309      	movs	r3, #9
 8015cb8:	75fb      	strb	r3, [r7, #23]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 8015cba:	2308      	movs	r3, #8
 8015cbc:	753b      	strb	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8015cbe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015cc0:	f000 f97a 	bl	8015fb8 <LoRaMacParserData>
 8015cc4:	4603      	mov	r3, r0
 8015cc6:	2b00      	cmp	r3, #0
 8015cc8:	d001      	beq.n	8015cce <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8015cca:	230f      	movs	r3, #15
 8015ccc:	e068      	b.n	8015da0 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8015cce:	f107 0210 	add.w	r2, r7, #16
 8015cd2:	7bfb      	ldrb	r3, [r7, #15]
 8015cd4:	4611      	mov	r1, r2
 8015cd6:	4618      	mov	r0, r3
 8015cd8:	f7ff fbd0 	bl	801547c <GetKeyAddrItem>
 8015cdc:	4603      	mov	r3, r0
 8015cde:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015ce0:	7d7b      	ldrb	r3, [r7, #21]
 8015ce2:	2b00      	cmp	r3, #0
 8015ce4:	d001      	beq.n	8015cea <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 8015ce6:	7d7b      	ldrb	r3, [r7, #21]
 8015ce8:	e05a      	b.n	8015da0 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 8015cea:	693b      	ldr	r3, [r7, #16]
 8015cec:	785b      	ldrb	r3, [r3, #1]
 8015cee:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 8015cf0:	693b      	ldr	r3, [r7, #16]
 8015cf2:	789b      	ldrb	r3, [r3, #2]
 8015cf4:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 8015cf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015cf8:	689b      	ldr	r3, [r3, #8]
 8015cfa:	68ba      	ldr	r2, [r7, #8]
 8015cfc:	429a      	cmp	r2, r3
 8015cfe:	d001      	beq.n	8015d04 <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8015d00:	2302      	movs	r3, #2
 8015d02:	e04d      	b.n	8015da0 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8015d04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d06:	7b1b      	ldrb	r3, [r3, #12]
 8015d08:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8015d0c:	b2db      	uxtb	r3, r3
 8015d0e:	2b00      	cmp	r3, #0
 8015d10:	bf14      	ite	ne
 8015d12:	2301      	movne	r3, #1
 8015d14:	2300      	moveq	r3, #0
 8015d16:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8015d18:	4b23      	ldr	r3, [pc, #140]	@ (8015da8 <LoRaMacCryptoUnsecureMessage+0x12c>)
 8015d1a:	681b      	ldr	r3, [r3, #0]
 8015d1c:	789b      	ldrb	r3, [r3, #2]
 8015d1e:	2b00      	cmp	r3, #0
 8015d20:	d101      	bne.n	8015d26 <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 8015d22:	2300      	movs	r3, #0
 8015d24:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8015d26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d28:	6818      	ldr	r0, [r3, #0]
 8015d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d2c:	791b      	ldrb	r3, [r3, #4]
 8015d2e:	3b04      	subs	r3, #4
 8015d30:	b299      	uxth	r1, r3
 8015d32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015d36:	7dbc      	ldrb	r4, [r7, #22]
 8015d38:	7d3a      	ldrb	r2, [r7, #20]
 8015d3a:	9303      	str	r3, [sp, #12]
 8015d3c:	687b      	ldr	r3, [r7, #4]
 8015d3e:	9302      	str	r3, [sp, #8]
 8015d40:	68bb      	ldr	r3, [r7, #8]
 8015d42:	9301      	str	r3, [sp, #4]
 8015d44:	2301      	movs	r3, #1
 8015d46:	9300      	str	r3, [sp, #0]
 8015d48:	4623      	mov	r3, r4
 8015d4a:	f7ff fb08 	bl	801535e <VerifyCmacB0>
 8015d4e:	4603      	mov	r3, r0
 8015d50:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015d52:	7d7b      	ldrb	r3, [r7, #21]
 8015d54:	2b00      	cmp	r3, #0
 8015d56:	d001      	beq.n	8015d5c <LoRaMacCryptoUnsecureMessage+0xe0>
    {
        return retval;
 8015d58:	7d7b      	ldrb	r3, [r7, #21]
 8015d5a:	e021      	b.n	8015da0 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 8015d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015d62:	2b00      	cmp	r3, #0
 8015d64:	d101      	bne.n	8015d6a <LoRaMacCryptoUnsecureMessage+0xee>
    {
        // Use network session encryption key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8015d66:	2308      	movs	r3, #8
 8015d68:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8015d6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d6c:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8015d6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d70:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015d74:	b219      	sxth	r1, r3
 8015d76:	7dfa      	ldrb	r2, [r7, #23]
 8015d78:	687b      	ldr	r3, [r7, #4]
 8015d7a:	9301      	str	r3, [sp, #4]
 8015d7c:	2301      	movs	r3, #1
 8015d7e:	9300      	str	r3, [sp, #0]
 8015d80:	68bb      	ldr	r3, [r7, #8]
 8015d82:	f7ff f9ad 	bl	80150e0 <PayloadEncrypt>
 8015d86:	4603      	mov	r3, r0
 8015d88:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015d8a:	7d7b      	ldrb	r3, [r7, #21]
 8015d8c:	2b00      	cmp	r3, #0
 8015d8e:	d001      	beq.n	8015d94 <LoRaMacCryptoUnsecureMessage+0x118>
    {
        return retval;
 8015d90:	7d7b      	ldrb	r3, [r7, #21]
 8015d92:	e005      	b.n	8015da0 <LoRaMacCryptoUnsecureMessage+0x124>
            }
        }
    }
#endif /* LORAMAC_VERSION */

    UpdateFCntDown( fCntID, fCntDown );
 8015d94:	7bbb      	ldrb	r3, [r7, #14]
 8015d96:	6879      	ldr	r1, [r7, #4]
 8015d98:	4618      	mov	r0, r3
 8015d9a:	f7ff fc45 	bl	8015628 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 8015d9e:	2300      	movs	r3, #0
}
 8015da0:	4618      	mov	r0, r3
 8015da2:	371c      	adds	r7, #28
 8015da4:	46bd      	mov	sp, r7
 8015da6:	bd90      	pop	{r4, r7, pc}
 8015da8:	20001a6c 	.word	0x20001a6c

08015dac <LoRaMacCryptoDeriveLifeTimeKey>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveLifeTimeKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 8015dac:	b580      	push	{r7, lr}
 8015dae:	b088      	sub	sp, #32
 8015db0:	af00      	add	r7, sp, #0
 8015db2:	4603      	mov	r3, r0
 8015db4:	460a      	mov	r2, r1
 8015db6:	71fb      	strb	r3, [r7, #7]
 8015db8:	4613      	mov	r3, r2
 8015dba:	71bb      	strb	r3, [r7, #6]
    uint8_t compBase[16] = { 0 };
 8015dbc:	2300      	movs	r3, #0
 8015dbe:	60fb      	str	r3, [r7, #12]
 8015dc0:	f107 0310 	add.w	r3, r7, #16
 8015dc4:	2200      	movs	r2, #0
 8015dc6:	601a      	str	r2, [r3, #0]
 8015dc8:	605a      	str	r2, [r3, #4]
 8015dca:	609a      	str	r2, [r3, #8]
    KeyIdentifier_t rootKeyId = APP_KEY;
 8015dcc:	2300      	movs	r3, #0
 8015dce:	77fb      	strb	r3, [r7, #31]
    switch( keyID )
 8015dd0:	79bb      	ldrb	r3, [r7, #6]
 8015dd2:	2b0c      	cmp	r3, #12
 8015dd4:	d00b      	beq.n	8015dee <LoRaMacCryptoDeriveLifeTimeKey+0x42>
 8015dd6:	2b0c      	cmp	r3, #12
 8015dd8:	dc0f      	bgt.n	8015dfa <LoRaMacCryptoDeriveLifeTimeKey+0x4e>
 8015dda:	2b0a      	cmp	r3, #10
 8015ddc:	d00a      	beq.n	8015df4 <LoRaMacCryptoDeriveLifeTimeKey+0x48>
 8015dde:	2b0b      	cmp	r3, #11
 8015de0:	d10b      	bne.n	8015dfa <LoRaMacCryptoDeriveLifeTimeKey+0x4e>
    {
        case MC_ROOT_KEY:
            if( versionMinor == 1 )
 8015de2:	79fb      	ldrb	r3, [r7, #7]
 8015de4:	2b01      	cmp	r3, #1
 8015de6:	d10a      	bne.n	8015dfe <LoRaMacCryptoDeriveLifeTimeKey+0x52>
            {
                compBase[0] = 0x20;
 8015de8:	2320      	movs	r3, #32
 8015dea:	733b      	strb	r3, [r7, #12]
            }
            break;
 8015dec:	e007      	b.n	8015dfe <LoRaMacCryptoDeriveLifeTimeKey+0x52>
        case MC_KE_KEY:
            rootKeyId = MC_ROOT_KEY;
 8015dee:	230b      	movs	r3, #11
 8015df0:	77fb      	strb	r3, [r7, #31]
            break;
 8015df2:	e005      	b.n	8015e00 <LoRaMacCryptoDeriveLifeTimeKey+0x54>
        case DATABLOCK_INT_KEY:
            compBase[0] = 0x30;
 8015df4:	2330      	movs	r3, #48	@ 0x30
 8015df6:	733b      	strb	r3, [r7, #12]
            break;
 8015df8:	e002      	b.n	8015e00 <LoRaMacCryptoDeriveLifeTimeKey+0x54>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8015dfa:	230a      	movs	r3, #10
 8015dfc:	e00d      	b.n	8015e1a <LoRaMacCryptoDeriveLifeTimeKey+0x6e>
            break;
 8015dfe:	bf00      	nop
    }

    if( SecureElementDeriveAndStoreKey( compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
 8015e00:	79ba      	ldrb	r2, [r7, #6]
 8015e02:	7ff9      	ldrb	r1, [r7, #31]
 8015e04:	f107 030c 	add.w	r3, r7, #12
 8015e08:	4618      	mov	r0, r3
 8015e0a:	f7f7 fcab 	bl	800d764 <SecureElementDeriveAndStoreKey>
 8015e0e:	4603      	mov	r3, r0
 8015e10:	2b00      	cmp	r3, #0
 8015e12:	d001      	beq.n	8015e18 <LoRaMacCryptoDeriveLifeTimeKey+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015e14:	230e      	movs	r3, #14
 8015e16:	e000      	b.n	8015e1a <LoRaMacCryptoDeriveLifeTimeKey+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8015e18:	2300      	movs	r3, #0
}
 8015e1a:	4618      	mov	r0, r3
 8015e1c:	3720      	adds	r7, #32
 8015e1e:	46bd      	mov	sp, r7
 8015e20:	bd80      	pop	{r7, pc}

08015e22 <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 8015e22:	b580      	push	{r7, lr}
 8015e24:	b084      	sub	sp, #16
 8015e26:	af00      	add	r7, sp, #0
 8015e28:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8015e2a:	687b      	ldr	r3, [r7, #4]
 8015e2c:	2b00      	cmp	r3, #0
 8015e2e:	d003      	beq.n	8015e38 <LoRaMacParserJoinAccept+0x16>
 8015e30:	687b      	ldr	r3, [r7, #4]
 8015e32:	681b      	ldr	r3, [r3, #0]
 8015e34:	2b00      	cmp	r3, #0
 8015e36:	d101      	bne.n	8015e3c <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8015e38:	2302      	movs	r3, #2
 8015e3a:	e0b9      	b.n	8015fb0 <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 8015e3c:	2300      	movs	r3, #0
 8015e3e:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8015e40:	687b      	ldr	r3, [r7, #4]
 8015e42:	681a      	ldr	r2, [r3, #0]
 8015e44:	89fb      	ldrh	r3, [r7, #14]
 8015e46:	1c59      	adds	r1, r3, #1
 8015e48:	81f9      	strh	r1, [r7, #14]
 8015e4a:	4413      	add	r3, r2
 8015e4c:	781a      	ldrb	r2, [r3, #0]
 8015e4e:	687b      	ldr	r3, [r7, #4]
 8015e50:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8015e52:	687b      	ldr	r3, [r7, #4]
 8015e54:	1d98      	adds	r0, r3, #6
 8015e56:	687b      	ldr	r3, [r7, #4]
 8015e58:	681a      	ldr	r2, [r3, #0]
 8015e5a:	89fb      	ldrh	r3, [r7, #14]
 8015e5c:	4413      	add	r3, r2
 8015e5e:	2203      	movs	r2, #3
 8015e60:	4619      	mov	r1, r3
 8015e62:	f004 f926 	bl	801a0b2 <memcpy1>
    bufItr = bufItr + 3;
 8015e66:	89fb      	ldrh	r3, [r7, #14]
 8015e68:	3303      	adds	r3, #3
 8015e6a:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 8015e6c:	687b      	ldr	r3, [r7, #4]
 8015e6e:	f103 0009 	add.w	r0, r3, #9
 8015e72:	687b      	ldr	r3, [r7, #4]
 8015e74:	681a      	ldr	r2, [r3, #0]
 8015e76:	89fb      	ldrh	r3, [r7, #14]
 8015e78:	4413      	add	r3, r2
 8015e7a:	2203      	movs	r2, #3
 8015e7c:	4619      	mov	r1, r3
 8015e7e:	f004 f918 	bl	801a0b2 <memcpy1>
    bufItr = bufItr + 3;
 8015e82:	89fb      	ldrh	r3, [r7, #14]
 8015e84:	3303      	adds	r3, #3
 8015e86:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8015e88:	687b      	ldr	r3, [r7, #4]
 8015e8a:	681a      	ldr	r2, [r3, #0]
 8015e8c:	89fb      	ldrh	r3, [r7, #14]
 8015e8e:	1c59      	adds	r1, r3, #1
 8015e90:	81f9      	strh	r1, [r7, #14]
 8015e92:	4413      	add	r3, r2
 8015e94:	781b      	ldrb	r3, [r3, #0]
 8015e96:	461a      	mov	r2, r3
 8015e98:	687b      	ldr	r3, [r7, #4]
 8015e9a:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	681a      	ldr	r2, [r3, #0]
 8015ea0:	89fb      	ldrh	r3, [r7, #14]
 8015ea2:	1c59      	adds	r1, r3, #1
 8015ea4:	81f9      	strh	r1, [r7, #14]
 8015ea6:	4413      	add	r3, r2
 8015ea8:	781b      	ldrb	r3, [r3, #0]
 8015eaa:	021a      	lsls	r2, r3, #8
 8015eac:	687b      	ldr	r3, [r7, #4]
 8015eae:	68db      	ldr	r3, [r3, #12]
 8015eb0:	431a      	orrs	r2, r3
 8015eb2:	687b      	ldr	r3, [r7, #4]
 8015eb4:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8015eb6:	687b      	ldr	r3, [r7, #4]
 8015eb8:	681a      	ldr	r2, [r3, #0]
 8015eba:	89fb      	ldrh	r3, [r7, #14]
 8015ebc:	1c59      	adds	r1, r3, #1
 8015ebe:	81f9      	strh	r1, [r7, #14]
 8015ec0:	4413      	add	r3, r2
 8015ec2:	781b      	ldrb	r3, [r3, #0]
 8015ec4:	041a      	lsls	r2, r3, #16
 8015ec6:	687b      	ldr	r3, [r7, #4]
 8015ec8:	68db      	ldr	r3, [r3, #12]
 8015eca:	431a      	orrs	r2, r3
 8015ecc:	687b      	ldr	r3, [r7, #4]
 8015ece:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8015ed0:	687b      	ldr	r3, [r7, #4]
 8015ed2:	681a      	ldr	r2, [r3, #0]
 8015ed4:	89fb      	ldrh	r3, [r7, #14]
 8015ed6:	1c59      	adds	r1, r3, #1
 8015ed8:	81f9      	strh	r1, [r7, #14]
 8015eda:	4413      	add	r3, r2
 8015edc:	781b      	ldrb	r3, [r3, #0]
 8015ede:	061a      	lsls	r2, r3, #24
 8015ee0:	687b      	ldr	r3, [r7, #4]
 8015ee2:	68db      	ldr	r3, [r3, #12]
 8015ee4:	431a      	orrs	r2, r3
 8015ee6:	687b      	ldr	r3, [r7, #4]
 8015ee8:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8015eea:	687b      	ldr	r3, [r7, #4]
 8015eec:	681a      	ldr	r2, [r3, #0]
 8015eee:	89fb      	ldrh	r3, [r7, #14]
 8015ef0:	1c59      	adds	r1, r3, #1
 8015ef2:	81f9      	strh	r1, [r7, #14]
 8015ef4:	4413      	add	r3, r2
 8015ef6:	781a      	ldrb	r2, [r3, #0]
 8015ef8:	687b      	ldr	r3, [r7, #4]
 8015efa:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8015efc:	687b      	ldr	r3, [r7, #4]
 8015efe:	681a      	ldr	r2, [r3, #0]
 8015f00:	89fb      	ldrh	r3, [r7, #14]
 8015f02:	1c59      	adds	r1, r3, #1
 8015f04:	81f9      	strh	r1, [r7, #14]
 8015f06:	4413      	add	r3, r2
 8015f08:	781a      	ldrb	r2, [r3, #0]
 8015f0a:	687b      	ldr	r3, [r7, #4]
 8015f0c:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 8015f0e:	687b      	ldr	r3, [r7, #4]
 8015f10:	791b      	ldrb	r3, [r3, #4]
 8015f12:	1f1a      	subs	r2, r3, #4
 8015f14:	89fb      	ldrh	r3, [r7, #14]
 8015f16:	1ad3      	subs	r3, r2, r3
 8015f18:	2b10      	cmp	r3, #16
 8015f1a:	d10e      	bne.n	8015f3a <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 8015f1c:	687b      	ldr	r3, [r7, #4]
 8015f1e:	f103 0012 	add.w	r0, r3, #18
 8015f22:	687b      	ldr	r3, [r7, #4]
 8015f24:	681a      	ldr	r2, [r3, #0]
 8015f26:	89fb      	ldrh	r3, [r7, #14]
 8015f28:	4413      	add	r3, r2
 8015f2a:	2210      	movs	r2, #16
 8015f2c:	4619      	mov	r1, r3
 8015f2e:	f004 f8c0 	bl	801a0b2 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 8015f32:	89fb      	ldrh	r3, [r7, #14]
 8015f34:	3310      	adds	r3, #16
 8015f36:	81fb      	strh	r3, [r7, #14]
 8015f38:	e008      	b.n	8015f4c <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8015f3a:	687b      	ldr	r3, [r7, #4]
 8015f3c:	791b      	ldrb	r3, [r3, #4]
 8015f3e:	1f1a      	subs	r2, r3, #4
 8015f40:	89fb      	ldrh	r3, [r7, #14]
 8015f42:	1ad3      	subs	r3, r2, r3
 8015f44:	2b00      	cmp	r3, #0
 8015f46:	dd01      	ble.n	8015f4c <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 8015f48:	2301      	movs	r3, #1
 8015f4a:	e031      	b.n	8015fb0 <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8015f4c:	687b      	ldr	r3, [r7, #4]
 8015f4e:	681a      	ldr	r2, [r3, #0]
 8015f50:	89fb      	ldrh	r3, [r7, #14]
 8015f52:	1c59      	adds	r1, r3, #1
 8015f54:	81f9      	strh	r1, [r7, #14]
 8015f56:	4413      	add	r3, r2
 8015f58:	781b      	ldrb	r3, [r3, #0]
 8015f5a:	461a      	mov	r2, r3
 8015f5c:	687b      	ldr	r3, [r7, #4]
 8015f5e:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8015f60:	687b      	ldr	r3, [r7, #4]
 8015f62:	681a      	ldr	r2, [r3, #0]
 8015f64:	89fb      	ldrh	r3, [r7, #14]
 8015f66:	1c59      	adds	r1, r3, #1
 8015f68:	81f9      	strh	r1, [r7, #14]
 8015f6a:	4413      	add	r3, r2
 8015f6c:	781b      	ldrb	r3, [r3, #0]
 8015f6e:	021a      	lsls	r2, r3, #8
 8015f70:	687b      	ldr	r3, [r7, #4]
 8015f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015f74:	431a      	orrs	r2, r3
 8015f76:	687b      	ldr	r3, [r7, #4]
 8015f78:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8015f7a:	687b      	ldr	r3, [r7, #4]
 8015f7c:	681a      	ldr	r2, [r3, #0]
 8015f7e:	89fb      	ldrh	r3, [r7, #14]
 8015f80:	1c59      	adds	r1, r3, #1
 8015f82:	81f9      	strh	r1, [r7, #14]
 8015f84:	4413      	add	r3, r2
 8015f86:	781b      	ldrb	r3, [r3, #0]
 8015f88:	041a      	lsls	r2, r3, #16
 8015f8a:	687b      	ldr	r3, [r7, #4]
 8015f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015f8e:	431a      	orrs	r2, r3
 8015f90:	687b      	ldr	r3, [r7, #4]
 8015f92:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8015f94:	687b      	ldr	r3, [r7, #4]
 8015f96:	681a      	ldr	r2, [r3, #0]
 8015f98:	89fb      	ldrh	r3, [r7, #14]
 8015f9a:	1c59      	adds	r1, r3, #1
 8015f9c:	81f9      	strh	r1, [r7, #14]
 8015f9e:	4413      	add	r3, r2
 8015fa0:	781b      	ldrb	r3, [r3, #0]
 8015fa2:	061a      	lsls	r2, r3, #24
 8015fa4:	687b      	ldr	r3, [r7, #4]
 8015fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015fa8:	431a      	orrs	r2, r3
 8015faa:	687b      	ldr	r3, [r7, #4]
 8015fac:	625a      	str	r2, [r3, #36]	@ 0x24

    return LORAMAC_PARSER_SUCCESS;
 8015fae:	2300      	movs	r3, #0
}
 8015fb0:	4618      	mov	r0, r3
 8015fb2:	3710      	adds	r7, #16
 8015fb4:	46bd      	mov	sp, r7
 8015fb6:	bd80      	pop	{r7, pc}

08015fb8 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 8015fb8:	b580      	push	{r7, lr}
 8015fba:	b084      	sub	sp, #16
 8015fbc:	af00      	add	r7, sp, #0
 8015fbe:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8015fc0:	687b      	ldr	r3, [r7, #4]
 8015fc2:	2b00      	cmp	r3, #0
 8015fc4:	d003      	beq.n	8015fce <LoRaMacParserData+0x16>
 8015fc6:	687b      	ldr	r3, [r7, #4]
 8015fc8:	681b      	ldr	r3, [r3, #0]
 8015fca:	2b00      	cmp	r3, #0
 8015fcc:	d101      	bne.n	8015fd2 <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8015fce:	2302      	movs	r3, #2
 8015fd0:	e0e0      	b.n	8016194 <LoRaMacParserData+0x1dc>
    }

    uint16_t bufItr = 0;
 8015fd2:	2300      	movs	r3, #0
 8015fd4:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8015fd6:	687b      	ldr	r3, [r7, #4]
 8015fd8:	681a      	ldr	r2, [r3, #0]
 8015fda:	89fb      	ldrh	r3, [r7, #14]
 8015fdc:	1c59      	adds	r1, r3, #1
 8015fde:	81f9      	strh	r1, [r7, #14]
 8015fe0:	4413      	add	r3, r2
 8015fe2:	781a      	ldrb	r2, [r3, #0]
 8015fe4:	687b      	ldr	r3, [r7, #4]
 8015fe6:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8015fe8:	687b      	ldr	r3, [r7, #4]
 8015fea:	681a      	ldr	r2, [r3, #0]
 8015fec:	89fb      	ldrh	r3, [r7, #14]
 8015fee:	1c59      	adds	r1, r3, #1
 8015ff0:	81f9      	strh	r1, [r7, #14]
 8015ff2:	4413      	add	r3, r2
 8015ff4:	781b      	ldrb	r3, [r3, #0]
 8015ff6:	461a      	mov	r2, r3
 8015ff8:	687b      	ldr	r3, [r7, #4]
 8015ffa:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8015ffc:	687b      	ldr	r3, [r7, #4]
 8015ffe:	681a      	ldr	r2, [r3, #0]
 8016000:	89fb      	ldrh	r3, [r7, #14]
 8016002:	1c59      	adds	r1, r3, #1
 8016004:	81f9      	strh	r1, [r7, #14]
 8016006:	4413      	add	r3, r2
 8016008:	781b      	ldrb	r3, [r3, #0]
 801600a:	021a      	lsls	r2, r3, #8
 801600c:	687b      	ldr	r3, [r7, #4]
 801600e:	689b      	ldr	r3, [r3, #8]
 8016010:	431a      	orrs	r2, r3
 8016012:	687b      	ldr	r3, [r7, #4]
 8016014:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8016016:	687b      	ldr	r3, [r7, #4]
 8016018:	681a      	ldr	r2, [r3, #0]
 801601a:	89fb      	ldrh	r3, [r7, #14]
 801601c:	1c59      	adds	r1, r3, #1
 801601e:	81f9      	strh	r1, [r7, #14]
 8016020:	4413      	add	r3, r2
 8016022:	781b      	ldrb	r3, [r3, #0]
 8016024:	041a      	lsls	r2, r3, #16
 8016026:	687b      	ldr	r3, [r7, #4]
 8016028:	689b      	ldr	r3, [r3, #8]
 801602a:	431a      	orrs	r2, r3
 801602c:	687b      	ldr	r3, [r7, #4]
 801602e:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8016030:	687b      	ldr	r3, [r7, #4]
 8016032:	681a      	ldr	r2, [r3, #0]
 8016034:	89fb      	ldrh	r3, [r7, #14]
 8016036:	1c59      	adds	r1, r3, #1
 8016038:	81f9      	strh	r1, [r7, #14]
 801603a:	4413      	add	r3, r2
 801603c:	781b      	ldrb	r3, [r3, #0]
 801603e:	061a      	lsls	r2, r3, #24
 8016040:	687b      	ldr	r3, [r7, #4]
 8016042:	689b      	ldr	r3, [r3, #8]
 8016044:	431a      	orrs	r2, r3
 8016046:	687b      	ldr	r3, [r7, #4]
 8016048:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 801604a:	687b      	ldr	r3, [r7, #4]
 801604c:	681a      	ldr	r2, [r3, #0]
 801604e:	89fb      	ldrh	r3, [r7, #14]
 8016050:	1c59      	adds	r1, r3, #1
 8016052:	81f9      	strh	r1, [r7, #14]
 8016054:	4413      	add	r3, r2
 8016056:	781a      	ldrb	r2, [r3, #0]
 8016058:	687b      	ldr	r3, [r7, #4]
 801605a:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 801605c:	687b      	ldr	r3, [r7, #4]
 801605e:	681a      	ldr	r2, [r3, #0]
 8016060:	89fb      	ldrh	r3, [r7, #14]
 8016062:	1c59      	adds	r1, r3, #1
 8016064:	81f9      	strh	r1, [r7, #14]
 8016066:	4413      	add	r3, r2
 8016068:	781b      	ldrb	r3, [r3, #0]
 801606a:	461a      	mov	r2, r3
 801606c:	687b      	ldr	r3, [r7, #4]
 801606e:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8016070:	687b      	ldr	r3, [r7, #4]
 8016072:	681a      	ldr	r2, [r3, #0]
 8016074:	89fb      	ldrh	r3, [r7, #14]
 8016076:	1c59      	adds	r1, r3, #1
 8016078:	81f9      	strh	r1, [r7, #14]
 801607a:	4413      	add	r3, r2
 801607c:	781b      	ldrb	r3, [r3, #0]
 801607e:	0219      	lsls	r1, r3, #8
 8016080:	687b      	ldr	r3, [r7, #4]
 8016082:	89db      	ldrh	r3, [r3, #14]
 8016084:	b21a      	sxth	r2, r3
 8016086:	b20b      	sxth	r3, r1
 8016088:	4313      	orrs	r3, r2
 801608a:	b21b      	sxth	r3, r3
 801608c:	b29a      	uxth	r2, r3
 801608e:	687b      	ldr	r3, [r7, #4]
 8016090:	81da      	strh	r2, [r3, #14]

    memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8016092:	687b      	ldr	r3, [r7, #4]
 8016094:	f103 0010 	add.w	r0, r3, #16
 8016098:	687b      	ldr	r3, [r7, #4]
 801609a:	681a      	ldr	r2, [r3, #0]
 801609c:	89fb      	ldrh	r3, [r7, #14]
 801609e:	18d1      	adds	r1, r2, r3
 80160a0:	687b      	ldr	r3, [r7, #4]
 80160a2:	7b1b      	ldrb	r3, [r3, #12]
 80160a4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80160a8:	b2db      	uxtb	r3, r3
 80160aa:	461a      	mov	r2, r3
 80160ac:	f004 f801 	bl	801a0b2 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80160b0:	687b      	ldr	r3, [r7, #4]
 80160b2:	7b1b      	ldrb	r3, [r3, #12]
 80160b4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80160b8:	b2db      	uxtb	r3, r3
 80160ba:	461a      	mov	r2, r3
 80160bc:	89fb      	ldrh	r3, [r7, #14]
 80160be:	4413      	add	r3, r2
 80160c0:	81fb      	strh	r3, [r7, #14]

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 80160c2:	687b      	ldr	r3, [r7, #4]
 80160c4:	2200      	movs	r2, #0
 80160c6:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 80160ca:	687b      	ldr	r3, [r7, #4]
 80160cc:	2200      	movs	r2, #0
 80160ce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 80160d2:	687b      	ldr	r3, [r7, #4]
 80160d4:	791b      	ldrb	r3, [r3, #4]
 80160d6:	461a      	mov	r2, r3
 80160d8:	89fb      	ldrh	r3, [r7, #14]
 80160da:	1ad3      	subs	r3, r2, r3
 80160dc:	2b04      	cmp	r3, #4
 80160de:	dd27      	ble.n	8016130 <LoRaMacParserData+0x178>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 80160e0:	687b      	ldr	r3, [r7, #4]
 80160e2:	681a      	ldr	r2, [r3, #0]
 80160e4:	89fb      	ldrh	r3, [r7, #14]
 80160e6:	1c59      	adds	r1, r3, #1
 80160e8:	81f9      	strh	r1, [r7, #14]
 80160ea:	4413      	add	r3, r2
 80160ec:	781a      	ldrb	r2, [r3, #0]
 80160ee:	687b      	ldr	r3, [r7, #4]
 80160f0:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 80160f4:	687b      	ldr	r3, [r7, #4]
 80160f6:	791a      	ldrb	r2, [r3, #4]
 80160f8:	89fb      	ldrh	r3, [r7, #14]
 80160fa:	b2db      	uxtb	r3, r3
 80160fc:	1ad3      	subs	r3, r2, r3
 80160fe:	b2db      	uxtb	r3, r3
 8016100:	3b04      	subs	r3, #4
 8016102:	b2da      	uxtb	r2, r3
 8016104:	687b      	ldr	r3, [r7, #4]
 8016106:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 801610a:	687b      	ldr	r3, [r7, #4]
 801610c:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 801610e:	687b      	ldr	r3, [r7, #4]
 8016110:	681a      	ldr	r2, [r3, #0]
 8016112:	89fb      	ldrh	r3, [r7, #14]
 8016114:	18d1      	adds	r1, r2, r3
 8016116:	687b      	ldr	r3, [r7, #4]
 8016118:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801611c:	461a      	mov	r2, r3
 801611e:	f003 ffc8 	bl	801a0b2 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 8016122:	687b      	ldr	r3, [r7, #4]
 8016124:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016128:	461a      	mov	r2, r3
 801612a:	89fb      	ldrh	r3, [r7, #14]
 801612c:	4413      	add	r3, r2
 801612e:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8016130:	687b      	ldr	r3, [r7, #4]
 8016132:	681a      	ldr	r2, [r3, #0]
 8016134:	687b      	ldr	r3, [r7, #4]
 8016136:	791b      	ldrb	r3, [r3, #4]
 8016138:	3b04      	subs	r3, #4
 801613a:	4413      	add	r3, r2
 801613c:	781b      	ldrb	r3, [r3, #0]
 801613e:	461a      	mov	r2, r3
 8016140:	687b      	ldr	r3, [r7, #4]
 8016142:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8016144:	687b      	ldr	r3, [r7, #4]
 8016146:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016148:	687b      	ldr	r3, [r7, #4]
 801614a:	6819      	ldr	r1, [r3, #0]
 801614c:	687b      	ldr	r3, [r7, #4]
 801614e:	791b      	ldrb	r3, [r3, #4]
 8016150:	3b03      	subs	r3, #3
 8016152:	440b      	add	r3, r1
 8016154:	781b      	ldrb	r3, [r3, #0]
 8016156:	021b      	lsls	r3, r3, #8
 8016158:	431a      	orrs	r2, r3
 801615a:	687b      	ldr	r3, [r7, #4]
 801615c:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 801615e:	687b      	ldr	r3, [r7, #4]
 8016160:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016162:	687b      	ldr	r3, [r7, #4]
 8016164:	6819      	ldr	r1, [r3, #0]
 8016166:	687b      	ldr	r3, [r7, #4]
 8016168:	791b      	ldrb	r3, [r3, #4]
 801616a:	3b02      	subs	r3, #2
 801616c:	440b      	add	r3, r1
 801616e:	781b      	ldrb	r3, [r3, #0]
 8016170:	041b      	lsls	r3, r3, #16
 8016172:	431a      	orrs	r2, r3
 8016174:	687b      	ldr	r3, [r7, #4]
 8016176:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8016178:	687b      	ldr	r3, [r7, #4]
 801617a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801617c:	687b      	ldr	r3, [r7, #4]
 801617e:	6819      	ldr	r1, [r3, #0]
 8016180:	687b      	ldr	r3, [r7, #4]
 8016182:	791b      	ldrb	r3, [r3, #4]
 8016184:	3b01      	subs	r3, #1
 8016186:	440b      	add	r3, r1
 8016188:	781b      	ldrb	r3, [r3, #0]
 801618a:	061b      	lsls	r3, r3, #24
 801618c:	431a      	orrs	r2, r3
 801618e:	687b      	ldr	r3, [r7, #4]
 8016190:	62da      	str	r2, [r3, #44]	@ 0x2c

    return LORAMAC_PARSER_SUCCESS;
 8016192:	2300      	movs	r3, #0
}
 8016194:	4618      	mov	r0, r3
 8016196:	3710      	adds	r7, #16
 8016198:	46bd      	mov	sp, r7
 801619a:	bd80      	pop	{r7, pc}

0801619c <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 801619c:	b580      	push	{r7, lr}
 801619e:	b084      	sub	sp, #16
 80161a0:	af00      	add	r7, sp, #0
 80161a2:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80161a4:	687b      	ldr	r3, [r7, #4]
 80161a6:	2b00      	cmp	r3, #0
 80161a8:	d003      	beq.n	80161b2 <LoRaMacSerializerJoinRequest+0x16>
 80161aa:	687b      	ldr	r3, [r7, #4]
 80161ac:	681b      	ldr	r3, [r3, #0]
 80161ae:	2b00      	cmp	r3, #0
 80161b0:	d101      	bne.n	80161b6 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 80161b2:	2301      	movs	r3, #1
 80161b4:	e070      	b.n	8016298 <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 80161b6:	2300      	movs	r3, #0
 80161b8:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 80161ba:	687b      	ldr	r3, [r7, #4]
 80161bc:	791b      	ldrb	r3, [r3, #4]
 80161be:	2b16      	cmp	r3, #22
 80161c0:	d801      	bhi.n	80161c6 <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 80161c2:	2302      	movs	r3, #2
 80161c4:	e068      	b.n	8016298 <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 80161c6:	687b      	ldr	r3, [r7, #4]
 80161c8:	681a      	ldr	r2, [r3, #0]
 80161ca:	89fb      	ldrh	r3, [r7, #14]
 80161cc:	1c59      	adds	r1, r3, #1
 80161ce:	81f9      	strh	r1, [r7, #14]
 80161d0:	4413      	add	r3, r2
 80161d2:	687a      	ldr	r2, [r7, #4]
 80161d4:	7952      	ldrb	r2, [r2, #5]
 80161d6:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 80161d8:	687b      	ldr	r3, [r7, #4]
 80161da:	681a      	ldr	r2, [r3, #0]
 80161dc:	89fb      	ldrh	r3, [r7, #14]
 80161de:	18d0      	adds	r0, r2, r3
 80161e0:	687b      	ldr	r3, [r7, #4]
 80161e2:	3306      	adds	r3, #6
 80161e4:	2208      	movs	r2, #8
 80161e6:	4619      	mov	r1, r3
 80161e8:	f003 ff7e 	bl	801a0e8 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 80161ec:	89fb      	ldrh	r3, [r7, #14]
 80161ee:	3308      	adds	r3, #8
 80161f0:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 80161f2:	687b      	ldr	r3, [r7, #4]
 80161f4:	681a      	ldr	r2, [r3, #0]
 80161f6:	89fb      	ldrh	r3, [r7, #14]
 80161f8:	18d0      	adds	r0, r2, r3
 80161fa:	687b      	ldr	r3, [r7, #4]
 80161fc:	330e      	adds	r3, #14
 80161fe:	2208      	movs	r2, #8
 8016200:	4619      	mov	r1, r3
 8016202:	f003 ff71 	bl	801a0e8 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 8016206:	89fb      	ldrh	r3, [r7, #14]
 8016208:	3308      	adds	r3, #8
 801620a:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 801620c:	687b      	ldr	r3, [r7, #4]
 801620e:	8ad9      	ldrh	r1, [r3, #22]
 8016210:	687b      	ldr	r3, [r7, #4]
 8016212:	681a      	ldr	r2, [r3, #0]
 8016214:	89fb      	ldrh	r3, [r7, #14]
 8016216:	1c58      	adds	r0, r3, #1
 8016218:	81f8      	strh	r0, [r7, #14]
 801621a:	4413      	add	r3, r2
 801621c:	b2ca      	uxtb	r2, r1
 801621e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8016220:	687b      	ldr	r3, [r7, #4]
 8016222:	8adb      	ldrh	r3, [r3, #22]
 8016224:	0a1b      	lsrs	r3, r3, #8
 8016226:	b299      	uxth	r1, r3
 8016228:	687b      	ldr	r3, [r7, #4]
 801622a:	681a      	ldr	r2, [r3, #0]
 801622c:	89fb      	ldrh	r3, [r7, #14]
 801622e:	1c58      	adds	r0, r3, #1
 8016230:	81f8      	strh	r0, [r7, #14]
 8016232:	4413      	add	r3, r2
 8016234:	b2ca      	uxtb	r2, r1
 8016236:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8016238:	687b      	ldr	r3, [r7, #4]
 801623a:	6999      	ldr	r1, [r3, #24]
 801623c:	687b      	ldr	r3, [r7, #4]
 801623e:	681a      	ldr	r2, [r3, #0]
 8016240:	89fb      	ldrh	r3, [r7, #14]
 8016242:	1c58      	adds	r0, r3, #1
 8016244:	81f8      	strh	r0, [r7, #14]
 8016246:	4413      	add	r3, r2
 8016248:	b2ca      	uxtb	r2, r1
 801624a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 801624c:	687b      	ldr	r3, [r7, #4]
 801624e:	699b      	ldr	r3, [r3, #24]
 8016250:	0a19      	lsrs	r1, r3, #8
 8016252:	687b      	ldr	r3, [r7, #4]
 8016254:	681a      	ldr	r2, [r3, #0]
 8016256:	89fb      	ldrh	r3, [r7, #14]
 8016258:	1c58      	adds	r0, r3, #1
 801625a:	81f8      	strh	r0, [r7, #14]
 801625c:	4413      	add	r3, r2
 801625e:	b2ca      	uxtb	r2, r1
 8016260:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8016262:	687b      	ldr	r3, [r7, #4]
 8016264:	699b      	ldr	r3, [r3, #24]
 8016266:	0c19      	lsrs	r1, r3, #16
 8016268:	687b      	ldr	r3, [r7, #4]
 801626a:	681a      	ldr	r2, [r3, #0]
 801626c:	89fb      	ldrh	r3, [r7, #14]
 801626e:	1c58      	adds	r0, r3, #1
 8016270:	81f8      	strh	r0, [r7, #14]
 8016272:	4413      	add	r3, r2
 8016274:	b2ca      	uxtb	r2, r1
 8016276:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8016278:	687b      	ldr	r3, [r7, #4]
 801627a:	699b      	ldr	r3, [r3, #24]
 801627c:	0e19      	lsrs	r1, r3, #24
 801627e:	687b      	ldr	r3, [r7, #4]
 8016280:	681a      	ldr	r2, [r3, #0]
 8016282:	89fb      	ldrh	r3, [r7, #14]
 8016284:	1c58      	adds	r0, r3, #1
 8016286:	81f8      	strh	r0, [r7, #14]
 8016288:	4413      	add	r3, r2
 801628a:	b2ca      	uxtb	r2, r1
 801628c:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 801628e:	89fb      	ldrh	r3, [r7, #14]
 8016290:	b2da      	uxtb	r2, r3
 8016292:	687b      	ldr	r3, [r7, #4]
 8016294:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8016296:	2300      	movs	r3, #0
}
 8016298:	4618      	mov	r0, r3
 801629a:	3710      	adds	r7, #16
 801629c:	46bd      	mov	sp, r7
 801629e:	bd80      	pop	{r7, pc}

080162a0 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 80162a0:	b580      	push	{r7, lr}
 80162a2:	b084      	sub	sp, #16
 80162a4:	af00      	add	r7, sp, #0
 80162a6:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80162a8:	687b      	ldr	r3, [r7, #4]
 80162aa:	2b00      	cmp	r3, #0
 80162ac:	d003      	beq.n	80162b6 <LoRaMacSerializerData+0x16>
 80162ae:	687b      	ldr	r3, [r7, #4]
 80162b0:	681b      	ldr	r3, [r3, #0]
 80162b2:	2b00      	cmp	r3, #0
 80162b4:	d101      	bne.n	80162ba <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 80162b6:	2301      	movs	r3, #1
 80162b8:	e0e3      	b.n	8016482 <LoRaMacSerializerData+0x1e2>
    }

    uint16_t bufItr = 0;
 80162ba:	2300      	movs	r3, #0
 80162bc:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 80162be:	2308      	movs	r3, #8
 80162c0:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80162c2:	687b      	ldr	r3, [r7, #4]
 80162c4:	7b1b      	ldrb	r3, [r3, #12]
 80162c6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80162ca:	b2db      	uxtb	r3, r3
 80162cc:	461a      	mov	r2, r3
 80162ce:	89bb      	ldrh	r3, [r7, #12]
 80162d0:	4413      	add	r3, r2
 80162d2:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 80162d4:	687b      	ldr	r3, [r7, #4]
 80162d6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80162da:	2b00      	cmp	r3, #0
 80162dc:	d002      	beq.n	80162e4 <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 80162de:	89bb      	ldrh	r3, [r7, #12]
 80162e0:	3301      	adds	r3, #1
 80162e2:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 80162e4:	687b      	ldr	r3, [r7, #4]
 80162e6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80162ea:	461a      	mov	r2, r3
 80162ec:	89bb      	ldrh	r3, [r7, #12]
 80162ee:	4413      	add	r3, r2
 80162f0:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 80162f2:	89bb      	ldrh	r3, [r7, #12]
 80162f4:	3304      	adds	r3, #4
 80162f6:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 80162f8:	687b      	ldr	r3, [r7, #4]
 80162fa:	791b      	ldrb	r3, [r3, #4]
 80162fc:	461a      	mov	r2, r3
 80162fe:	89bb      	ldrh	r3, [r7, #12]
 8016300:	4293      	cmp	r3, r2
 8016302:	d901      	bls.n	8016308 <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8016304:	2302      	movs	r3, #2
 8016306:	e0bc      	b.n	8016482 <LoRaMacSerializerData+0x1e2>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8016308:	687b      	ldr	r3, [r7, #4]
 801630a:	681a      	ldr	r2, [r3, #0]
 801630c:	89fb      	ldrh	r3, [r7, #14]
 801630e:	1c59      	adds	r1, r3, #1
 8016310:	81f9      	strh	r1, [r7, #14]
 8016312:	4413      	add	r3, r2
 8016314:	687a      	ldr	r2, [r7, #4]
 8016316:	7952      	ldrb	r2, [r2, #5]
 8016318:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 801631a:	687b      	ldr	r3, [r7, #4]
 801631c:	6899      	ldr	r1, [r3, #8]
 801631e:	687b      	ldr	r3, [r7, #4]
 8016320:	681a      	ldr	r2, [r3, #0]
 8016322:	89fb      	ldrh	r3, [r7, #14]
 8016324:	1c58      	adds	r0, r3, #1
 8016326:	81f8      	strh	r0, [r7, #14]
 8016328:	4413      	add	r3, r2
 801632a:	b2ca      	uxtb	r2, r1
 801632c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 801632e:	687b      	ldr	r3, [r7, #4]
 8016330:	689b      	ldr	r3, [r3, #8]
 8016332:	0a19      	lsrs	r1, r3, #8
 8016334:	687b      	ldr	r3, [r7, #4]
 8016336:	681a      	ldr	r2, [r3, #0]
 8016338:	89fb      	ldrh	r3, [r7, #14]
 801633a:	1c58      	adds	r0, r3, #1
 801633c:	81f8      	strh	r0, [r7, #14]
 801633e:	4413      	add	r3, r2
 8016340:	b2ca      	uxtb	r2, r1
 8016342:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8016344:	687b      	ldr	r3, [r7, #4]
 8016346:	689b      	ldr	r3, [r3, #8]
 8016348:	0c19      	lsrs	r1, r3, #16
 801634a:	687b      	ldr	r3, [r7, #4]
 801634c:	681a      	ldr	r2, [r3, #0]
 801634e:	89fb      	ldrh	r3, [r7, #14]
 8016350:	1c58      	adds	r0, r3, #1
 8016352:	81f8      	strh	r0, [r7, #14]
 8016354:	4413      	add	r3, r2
 8016356:	b2ca      	uxtb	r2, r1
 8016358:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 801635a:	687b      	ldr	r3, [r7, #4]
 801635c:	689b      	ldr	r3, [r3, #8]
 801635e:	0e19      	lsrs	r1, r3, #24
 8016360:	687b      	ldr	r3, [r7, #4]
 8016362:	681a      	ldr	r2, [r3, #0]
 8016364:	89fb      	ldrh	r3, [r7, #14]
 8016366:	1c58      	adds	r0, r3, #1
 8016368:	81f8      	strh	r0, [r7, #14]
 801636a:	4413      	add	r3, r2
 801636c:	b2ca      	uxtb	r2, r1
 801636e:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8016370:	687b      	ldr	r3, [r7, #4]
 8016372:	681a      	ldr	r2, [r3, #0]
 8016374:	89fb      	ldrh	r3, [r7, #14]
 8016376:	1c59      	adds	r1, r3, #1
 8016378:	81f9      	strh	r1, [r7, #14]
 801637a:	4413      	add	r3, r2
 801637c:	687a      	ldr	r2, [r7, #4]
 801637e:	7b12      	ldrb	r2, [r2, #12]
 8016380:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8016382:	687b      	ldr	r3, [r7, #4]
 8016384:	89d9      	ldrh	r1, [r3, #14]
 8016386:	687b      	ldr	r3, [r7, #4]
 8016388:	681a      	ldr	r2, [r3, #0]
 801638a:	89fb      	ldrh	r3, [r7, #14]
 801638c:	1c58      	adds	r0, r3, #1
 801638e:	81f8      	strh	r0, [r7, #14]
 8016390:	4413      	add	r3, r2
 8016392:	b2ca      	uxtb	r2, r1
 8016394:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8016396:	687b      	ldr	r3, [r7, #4]
 8016398:	89db      	ldrh	r3, [r3, #14]
 801639a:	0a1b      	lsrs	r3, r3, #8
 801639c:	b299      	uxth	r1, r3
 801639e:	687b      	ldr	r3, [r7, #4]
 80163a0:	681a      	ldr	r2, [r3, #0]
 80163a2:	89fb      	ldrh	r3, [r7, #14]
 80163a4:	1c58      	adds	r0, r3, #1
 80163a6:	81f8      	strh	r0, [r7, #14]
 80163a8:	4413      	add	r3, r2
 80163aa:	b2ca      	uxtb	r2, r1
 80163ac:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 80163ae:	687b      	ldr	r3, [r7, #4]
 80163b0:	681a      	ldr	r2, [r3, #0]
 80163b2:	89fb      	ldrh	r3, [r7, #14]
 80163b4:	18d0      	adds	r0, r2, r3
 80163b6:	687b      	ldr	r3, [r7, #4]
 80163b8:	f103 0110 	add.w	r1, r3, #16
 80163bc:	687b      	ldr	r3, [r7, #4]
 80163be:	7b1b      	ldrb	r3, [r3, #12]
 80163c0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80163c4:	b2db      	uxtb	r3, r3
 80163c6:	461a      	mov	r2, r3
 80163c8:	f003 fe73 	bl	801a0b2 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80163cc:	687b      	ldr	r3, [r7, #4]
 80163ce:	7b1b      	ldrb	r3, [r3, #12]
 80163d0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80163d4:	b2db      	uxtb	r3, r3
 80163d6:	461a      	mov	r2, r3
 80163d8:	89fb      	ldrh	r3, [r7, #14]
 80163da:	4413      	add	r3, r2
 80163dc:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 80163de:	687b      	ldr	r3, [r7, #4]
 80163e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80163e4:	2b00      	cmp	r3, #0
 80163e6:	d009      	beq.n	80163fc <LoRaMacSerializerData+0x15c>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 80163e8:	687b      	ldr	r3, [r7, #4]
 80163ea:	681a      	ldr	r2, [r3, #0]
 80163ec:	89fb      	ldrh	r3, [r7, #14]
 80163ee:	1c59      	adds	r1, r3, #1
 80163f0:	81f9      	strh	r1, [r7, #14]
 80163f2:	4413      	add	r3, r2
 80163f4:	687a      	ldr	r2, [r7, #4]
 80163f6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80163fa:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 80163fc:	687b      	ldr	r3, [r7, #4]
 80163fe:	681a      	ldr	r2, [r3, #0]
 8016400:	89fb      	ldrh	r3, [r7, #14]
 8016402:	18d0      	adds	r0, r2, r3
 8016404:	687b      	ldr	r3, [r7, #4]
 8016406:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8016408:	687b      	ldr	r3, [r7, #4]
 801640a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801640e:	461a      	mov	r2, r3
 8016410:	f003 fe4f 	bl	801a0b2 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8016414:	687b      	ldr	r3, [r7, #4]
 8016416:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801641a:	461a      	mov	r2, r3
 801641c:	89fb      	ldrh	r3, [r7, #14]
 801641e:	4413      	add	r3, r2
 8016420:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8016422:	687b      	ldr	r3, [r7, #4]
 8016424:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8016426:	687b      	ldr	r3, [r7, #4]
 8016428:	681a      	ldr	r2, [r3, #0]
 801642a:	89fb      	ldrh	r3, [r7, #14]
 801642c:	1c58      	adds	r0, r3, #1
 801642e:	81f8      	strh	r0, [r7, #14]
 8016430:	4413      	add	r3, r2
 8016432:	b2ca      	uxtb	r2, r1
 8016434:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8016436:	687b      	ldr	r3, [r7, #4]
 8016438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801643a:	0a19      	lsrs	r1, r3, #8
 801643c:	687b      	ldr	r3, [r7, #4]
 801643e:	681a      	ldr	r2, [r3, #0]
 8016440:	89fb      	ldrh	r3, [r7, #14]
 8016442:	1c58      	adds	r0, r3, #1
 8016444:	81f8      	strh	r0, [r7, #14]
 8016446:	4413      	add	r3, r2
 8016448:	b2ca      	uxtb	r2, r1
 801644a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 801644c:	687b      	ldr	r3, [r7, #4]
 801644e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016450:	0c19      	lsrs	r1, r3, #16
 8016452:	687b      	ldr	r3, [r7, #4]
 8016454:	681a      	ldr	r2, [r3, #0]
 8016456:	89fb      	ldrh	r3, [r7, #14]
 8016458:	1c58      	adds	r0, r3, #1
 801645a:	81f8      	strh	r0, [r7, #14]
 801645c:	4413      	add	r3, r2
 801645e:	b2ca      	uxtb	r2, r1
 8016460:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8016462:	687b      	ldr	r3, [r7, #4]
 8016464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016466:	0e19      	lsrs	r1, r3, #24
 8016468:	687b      	ldr	r3, [r7, #4]
 801646a:	681a      	ldr	r2, [r3, #0]
 801646c:	89fb      	ldrh	r3, [r7, #14]
 801646e:	1c58      	adds	r0, r3, #1
 8016470:	81f8      	strh	r0, [r7, #14]
 8016472:	4413      	add	r3, r2
 8016474:	b2ca      	uxtb	r2, r1
 8016476:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8016478:	89fb      	ldrh	r3, [r7, #14]
 801647a:	b2da      	uxtb	r2, r3
 801647c:	687b      	ldr	r3, [r7, #4]
 801647e:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8016480:	2300      	movs	r3, #0
}
 8016482:	4618      	mov	r0, r3
 8016484:	3710      	adds	r7, #16
 8016486:	46bd      	mov	sp, r7
 8016488:	bd80      	pop	{r7, pc}

0801648a <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 801648a:	b480      	push	{r7}
 801648c:	b083      	sub	sp, #12
 801648e:	af00      	add	r7, sp, #0
 8016490:	4603      	mov	r3, r0
 8016492:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8016494:	79fb      	ldrb	r3, [r7, #7]
 8016496:	2b05      	cmp	r3, #5
 8016498:	d002      	beq.n	80164a0 <RegionIsActive+0x16>
 801649a:	2b08      	cmp	r3, #8
 801649c:	d002      	beq.n	80164a4 <RegionIsActive+0x1a>
 801649e:	e003      	b.n	80164a8 <RegionIsActive+0x1e>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 80164a0:	2301      	movs	r3, #1
 80164a2:	e002      	b.n	80164aa <RegionIsActive+0x20>
        KR920_IS_ACTIVE( );
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
 80164a4:	2301      	movs	r3, #1
 80164a6:	e000      	b.n	80164aa <RegionIsActive+0x20>
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 80164a8:	2300      	movs	r3, #0
        }
    }
}
 80164aa:	4618      	mov	r0, r3
 80164ac:	370c      	adds	r7, #12
 80164ae:	46bd      	mov	sp, r7
 80164b0:	bc80      	pop	{r7}
 80164b2:	4770      	bx	lr

080164b4 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 80164b4:	b580      	push	{r7, lr}
 80164b6:	b084      	sub	sp, #16
 80164b8:	af00      	add	r7, sp, #0
 80164ba:	4603      	mov	r3, r0
 80164bc:	6039      	str	r1, [r7, #0]
 80164be:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 80164c0:	2300      	movs	r3, #0
 80164c2:	60bb      	str	r3, [r7, #8]
    switch( region )
 80164c4:	79fb      	ldrb	r3, [r7, #7]
 80164c6:	2b05      	cmp	r3, #5
 80164c8:	d002      	beq.n	80164d0 <RegionGetPhyParam+0x1c>
 80164ca:	2b08      	cmp	r3, #8
 80164cc:	d006      	beq.n	80164dc <RegionGetPhyParam+0x28>
 80164ce:	e00b      	b.n	80164e8 <RegionGetPhyParam+0x34>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 80164d0:	6838      	ldr	r0, [r7, #0]
 80164d2:	f001 fad1 	bl	8017a78 <RegionEU868GetPhyParam>
 80164d6:	4603      	mov	r3, r0
 80164d8:	60fb      	str	r3, [r7, #12]
 80164da:	e007      	b.n	80164ec <RegionGetPhyParam+0x38>
        KR920_GET_PHY_PARAM( );
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
 80164dc:	6838      	ldr	r0, [r7, #0]
 80164de:	f002 fc51 	bl	8018d84 <RegionUS915GetPhyParam>
 80164e2:	4603      	mov	r3, r0
 80164e4:	60fb      	str	r3, [r7, #12]
 80164e6:	e001      	b.n	80164ec <RegionGetPhyParam+0x38>
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 80164e8:	68bb      	ldr	r3, [r7, #8]
 80164ea:	60fb      	str	r3, [r7, #12]
        }
    }
}
 80164ec:	68fb      	ldr	r3, [r7, #12]
 80164ee:	4618      	mov	r0, r3
 80164f0:	3710      	adds	r7, #16
 80164f2:	46bd      	mov	sp, r7
 80164f4:	bd80      	pop	{r7, pc}

080164f6 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 80164f6:	b580      	push	{r7, lr}
 80164f8:	b082      	sub	sp, #8
 80164fa:	af00      	add	r7, sp, #0
 80164fc:	4603      	mov	r3, r0
 80164fe:	6039      	str	r1, [r7, #0]
 8016500:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8016502:	79fb      	ldrb	r3, [r7, #7]
 8016504:	2b05      	cmp	r3, #5
 8016506:	d002      	beq.n	801650e <RegionSetBandTxDone+0x18>
 8016508:	2b08      	cmp	r3, #8
 801650a:	d004      	beq.n	8016516 <RegionSetBandTxDone+0x20>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 801650c:	e006      	b.n	801651c <RegionSetBandTxDone+0x26>
        EU868_SET_BAND_TX_DONE( );
 801650e:	6838      	ldr	r0, [r7, #0]
 8016510:	f001 fbf8 	bl	8017d04 <RegionEU868SetBandTxDone>
 8016514:	e002      	b.n	801651c <RegionSetBandTxDone+0x26>
        US915_SET_BAND_TX_DONE( );
 8016516:	6838      	ldr	r0, [r7, #0]
 8016518:	f002 fd90 	bl	801903c <RegionUS915SetBandTxDone>
        }
    }
}
 801651c:	3708      	adds	r7, #8
 801651e:	46bd      	mov	sp, r7
 8016520:	bd80      	pop	{r7, pc}

08016522 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8016522:	b580      	push	{r7, lr}
 8016524:	b082      	sub	sp, #8
 8016526:	af00      	add	r7, sp, #0
 8016528:	4603      	mov	r3, r0
 801652a:	6039      	str	r1, [r7, #0]
 801652c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801652e:	79fb      	ldrb	r3, [r7, #7]
 8016530:	2b05      	cmp	r3, #5
 8016532:	d002      	beq.n	801653a <RegionInitDefaults+0x18>
 8016534:	2b08      	cmp	r3, #8
 8016536:	d004      	beq.n	8016542 <RegionInitDefaults+0x20>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 8016538:	e006      	b.n	8016548 <RegionInitDefaults+0x26>
        EU868_INIT_DEFAULTS( );
 801653a:	6838      	ldr	r0, [r7, #0]
 801653c:	f001 fc0e 	bl	8017d5c <RegionEU868InitDefaults>
 8016540:	e002      	b.n	8016548 <RegionInitDefaults+0x26>
        US915_INIT_DEFAULTS( );
 8016542:	6838      	ldr	r0, [r7, #0]
 8016544:	f002 fda6 	bl	8019094 <RegionUS915InitDefaults>
        }
    }
}
 8016548:	bf00      	nop
 801654a:	3708      	adds	r7, #8
 801654c:	46bd      	mov	sp, r7
 801654e:	bd80      	pop	{r7, pc}

08016550 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8016550:	b580      	push	{r7, lr}
 8016552:	b082      	sub	sp, #8
 8016554:	af00      	add	r7, sp, #0
 8016556:	4603      	mov	r3, r0
 8016558:	6039      	str	r1, [r7, #0]
 801655a:	71fb      	strb	r3, [r7, #7]
 801655c:	4613      	mov	r3, r2
 801655e:	71bb      	strb	r3, [r7, #6]
    switch( region )
 8016560:	79fb      	ldrb	r3, [r7, #7]
 8016562:	2b05      	cmp	r3, #5
 8016564:	d002      	beq.n	801656c <RegionVerify+0x1c>
 8016566:	2b08      	cmp	r3, #8
 8016568:	d007      	beq.n	801657a <RegionVerify+0x2a>
 801656a:	e00d      	b.n	8016588 <RegionVerify+0x38>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 801656c:	79bb      	ldrb	r3, [r7, #6]
 801656e:	4619      	mov	r1, r3
 8016570:	6838      	ldr	r0, [r7, #0]
 8016572:	f001 fc91 	bl	8017e98 <RegionEU868Verify>
 8016576:	4603      	mov	r3, r0
 8016578:	e007      	b.n	801658a <RegionVerify+0x3a>
        KR920_VERIFY( );
        IN865_VERIFY( );
        US915_VERIFY( );
 801657a:	79bb      	ldrb	r3, [r7, #6]
 801657c:	4619      	mov	r1, r3
 801657e:	6838      	ldr	r0, [r7, #0]
 8016580:	f002 feba 	bl	80192f8 <RegionUS915Verify>
 8016584:	4603      	mov	r3, r0
 8016586:	e000      	b.n	801658a <RegionVerify+0x3a>
        RU864_VERIFY( );
        default:
        {
            return false;
 8016588:	2300      	movs	r3, #0
        }
    }
}
 801658a:	4618      	mov	r0, r3
 801658c:	3708      	adds	r7, #8
 801658e:	46bd      	mov	sp, r7
 8016590:	bd80      	pop	{r7, pc}

08016592 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8016592:	b580      	push	{r7, lr}
 8016594:	b082      	sub	sp, #8
 8016596:	af00      	add	r7, sp, #0
 8016598:	4603      	mov	r3, r0
 801659a:	6039      	str	r1, [r7, #0]
 801659c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801659e:	79fb      	ldrb	r3, [r7, #7]
 80165a0:	2b05      	cmp	r3, #5
 80165a2:	d002      	beq.n	80165aa <RegionApplyCFList+0x18>
 80165a4:	2b08      	cmp	r3, #8
 80165a6:	d004      	beq.n	80165b2 <RegionApplyCFList+0x20>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 80165a8:	e006      	b.n	80165b8 <RegionApplyCFList+0x26>
        EU868_APPLY_CF_LIST( );
 80165aa:	6838      	ldr	r0, [r7, #0]
 80165ac:	f001 fcf0 	bl	8017f90 <RegionEU868ApplyCFList>
 80165b0:	e002      	b.n	80165b8 <RegionApplyCFList+0x26>
        US915_APPLY_CF_LIST( );
 80165b2:	6838      	ldr	r0, [r7, #0]
 80165b4:	f002 ff16 	bl	80193e4 <RegionUS915ApplyCFList>
        }
    }
}
 80165b8:	bf00      	nop
 80165ba:	3708      	adds	r7, #8
 80165bc:	46bd      	mov	sp, r7
 80165be:	bd80      	pop	{r7, pc}

080165c0 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 80165c0:	b580      	push	{r7, lr}
 80165c2:	b082      	sub	sp, #8
 80165c4:	af00      	add	r7, sp, #0
 80165c6:	4603      	mov	r3, r0
 80165c8:	6039      	str	r1, [r7, #0]
 80165ca:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80165cc:	79fb      	ldrb	r3, [r7, #7]
 80165ce:	2b05      	cmp	r3, #5
 80165d0:	d002      	beq.n	80165d8 <RegionChanMaskSet+0x18>
 80165d2:	2b08      	cmp	r3, #8
 80165d4:	d005      	beq.n	80165e2 <RegionChanMaskSet+0x22>
 80165d6:	e009      	b.n	80165ec <RegionChanMaskSet+0x2c>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 80165d8:	6838      	ldr	r0, [r7, #0]
 80165da:	f001 fd4d 	bl	8018078 <RegionEU868ChanMaskSet>
 80165de:	4603      	mov	r3, r0
 80165e0:	e005      	b.n	80165ee <RegionChanMaskSet+0x2e>
        KR920_CHAN_MASK_SET( );
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
 80165e2:	6838      	ldr	r0, [r7, #0]
 80165e4:	f002 ff70 	bl	80194c8 <RegionUS915ChanMaskSet>
 80165e8:	4603      	mov	r3, r0
 80165ea:	e000      	b.n	80165ee <RegionChanMaskSet+0x2e>
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 80165ec:	2300      	movs	r3, #0
        }
    }
}
 80165ee:	4618      	mov	r0, r3
 80165f0:	3708      	adds	r7, #8
 80165f2:	46bd      	mov	sp, r7
 80165f4:	bd80      	pop	{r7, pc}

080165f6 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80165f6:	b580      	push	{r7, lr}
 80165f8:	b082      	sub	sp, #8
 80165fa:	af00      	add	r7, sp, #0
 80165fc:	603b      	str	r3, [r7, #0]
 80165fe:	4603      	mov	r3, r0
 8016600:	71fb      	strb	r3, [r7, #7]
 8016602:	460b      	mov	r3, r1
 8016604:	71bb      	strb	r3, [r7, #6]
 8016606:	4613      	mov	r3, r2
 8016608:	717b      	strb	r3, [r7, #5]
    switch( region )
 801660a:	79fb      	ldrb	r3, [r7, #7]
 801660c:	2b05      	cmp	r3, #5
 801660e:	d002      	beq.n	8016616 <RegionComputeRxWindowParameters+0x20>
 8016610:	2b08      	cmp	r3, #8
 8016612:	d008      	beq.n	8016626 <RegionComputeRxWindowParameters+0x30>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 8016614:	e00e      	b.n	8016634 <RegionComputeRxWindowParameters+0x3e>
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 8016616:	7979      	ldrb	r1, [r7, #5]
 8016618:	f997 0006 	ldrsb.w	r0, [r7, #6]
 801661c:	693b      	ldr	r3, [r7, #16]
 801661e:	683a      	ldr	r2, [r7, #0]
 8016620:	f001 fd54 	bl	80180cc <RegionEU868ComputeRxWindowParameters>
 8016624:	e006      	b.n	8016634 <RegionComputeRxWindowParameters+0x3e>
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
 8016626:	7979      	ldrb	r1, [r7, #5]
 8016628:	f997 0006 	ldrsb.w	r0, [r7, #6]
 801662c:	693b      	ldr	r3, [r7, #16]
 801662e:	683a      	ldr	r2, [r7, #0]
 8016630:	f002 ffb2 	bl	8019598 <RegionUS915ComputeRxWindowParameters>
        }
    }
}
 8016634:	bf00      	nop
 8016636:	3708      	adds	r7, #8
 8016638:	46bd      	mov	sp, r7
 801663a:	bd80      	pop	{r7, pc}

0801663c <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 801663c:	b580      	push	{r7, lr}
 801663e:	b084      	sub	sp, #16
 8016640:	af00      	add	r7, sp, #0
 8016642:	4603      	mov	r3, r0
 8016644:	60b9      	str	r1, [r7, #8]
 8016646:	607a      	str	r2, [r7, #4]
 8016648:	73fb      	strb	r3, [r7, #15]
    switch( region )
 801664a:	7bfb      	ldrb	r3, [r7, #15]
 801664c:	2b05      	cmp	r3, #5
 801664e:	d002      	beq.n	8016656 <RegionRxConfig+0x1a>
 8016650:	2b08      	cmp	r3, #8
 8016652:	d006      	beq.n	8016662 <RegionRxConfig+0x26>
 8016654:	e00b      	b.n	801666e <RegionRxConfig+0x32>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 8016656:	6879      	ldr	r1, [r7, #4]
 8016658:	68b8      	ldr	r0, [r7, #8]
 801665a:	f001 fd91 	bl	8018180 <RegionEU868RxConfig>
 801665e:	4603      	mov	r3, r0
 8016660:	e006      	b.n	8016670 <RegionRxConfig+0x34>
        KR920_RX_CONFIG( );
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
 8016662:	6879      	ldr	r1, [r7, #4]
 8016664:	68b8      	ldr	r0, [r7, #8]
 8016666:	f002 ffe1 	bl	801962c <RegionUS915RxConfig>
 801666a:	4603      	mov	r3, r0
 801666c:	e000      	b.n	8016670 <RegionRxConfig+0x34>
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 801666e:	2300      	movs	r3, #0
        }
    }
}
 8016670:	4618      	mov	r0, r3
 8016672:	3710      	adds	r7, #16
 8016674:	46bd      	mov	sp, r7
 8016676:	bd80      	pop	{r7, pc}

08016678 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8016678:	b580      	push	{r7, lr}
 801667a:	b084      	sub	sp, #16
 801667c:	af00      	add	r7, sp, #0
 801667e:	60b9      	str	r1, [r7, #8]
 8016680:	607a      	str	r2, [r7, #4]
 8016682:	603b      	str	r3, [r7, #0]
 8016684:	4603      	mov	r3, r0
 8016686:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8016688:	7bfb      	ldrb	r3, [r7, #15]
 801668a:	2b05      	cmp	r3, #5
 801668c:	d002      	beq.n	8016694 <RegionTxConfig+0x1c>
 801668e:	2b08      	cmp	r3, #8
 8016690:	d007      	beq.n	80166a2 <RegionTxConfig+0x2a>
 8016692:	e00d      	b.n	80166b0 <RegionTxConfig+0x38>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 8016694:	683a      	ldr	r2, [r7, #0]
 8016696:	6879      	ldr	r1, [r7, #4]
 8016698:	68b8      	ldr	r0, [r7, #8]
 801669a:	f001 fe41 	bl	8018320 <RegionEU868TxConfig>
 801669e:	4603      	mov	r3, r0
 80166a0:	e007      	b.n	80166b2 <RegionTxConfig+0x3a>
        KR920_TX_CONFIG( );
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
 80166a2:	683a      	ldr	r2, [r7, #0]
 80166a4:	6879      	ldr	r1, [r7, #4]
 80166a6:	68b8      	ldr	r0, [r7, #8]
 80166a8:	f003 f844 	bl	8019734 <RegionUS915TxConfig>
 80166ac:	4603      	mov	r3, r0
 80166ae:	e000      	b.n	80166b2 <RegionTxConfig+0x3a>
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 80166b0:	2300      	movs	r3, #0
        }
    }
}
 80166b2:	4618      	mov	r0, r3
 80166b4:	3710      	adds	r7, #16
 80166b6:	46bd      	mov	sp, r7
 80166b8:	bd80      	pop	{r7, pc}

080166ba <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 80166ba:	b580      	push	{r7, lr}
 80166bc:	b086      	sub	sp, #24
 80166be:	af02      	add	r7, sp, #8
 80166c0:	60b9      	str	r1, [r7, #8]
 80166c2:	607a      	str	r2, [r7, #4]
 80166c4:	603b      	str	r3, [r7, #0]
 80166c6:	4603      	mov	r3, r0
 80166c8:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80166ca:	7bfb      	ldrb	r3, [r7, #15]
 80166cc:	2b05      	cmp	r3, #5
 80166ce:	d002      	beq.n	80166d6 <RegionLinkAdrReq+0x1c>
 80166d0:	2b08      	cmp	r3, #8
 80166d2:	d00a      	beq.n	80166ea <RegionLinkAdrReq+0x30>
 80166d4:	e013      	b.n	80166fe <RegionLinkAdrReq+0x44>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 80166d6:	69fb      	ldr	r3, [r7, #28]
 80166d8:	9300      	str	r3, [sp, #0]
 80166da:	69bb      	ldr	r3, [r7, #24]
 80166dc:	683a      	ldr	r2, [r7, #0]
 80166de:	6879      	ldr	r1, [r7, #4]
 80166e0:	68b8      	ldr	r0, [r7, #8]
 80166e2:	f001 feed 	bl	80184c0 <RegionEU868LinkAdrReq>
 80166e6:	4603      	mov	r3, r0
 80166e8:	e00a      	b.n	8016700 <RegionLinkAdrReq+0x46>
        KR920_LINK_ADR_REQ( );
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
 80166ea:	69fb      	ldr	r3, [r7, #28]
 80166ec:	9300      	str	r3, [sp, #0]
 80166ee:	69bb      	ldr	r3, [r7, #24]
 80166f0:	683a      	ldr	r2, [r7, #0]
 80166f2:	6879      	ldr	r1, [r7, #4]
 80166f4:	68b8      	ldr	r0, [r7, #8]
 80166f6:	f003 f8c7 	bl	8019888 <RegionUS915LinkAdrReq>
 80166fa:	4603      	mov	r3, r0
 80166fc:	e000      	b.n	8016700 <RegionLinkAdrReq+0x46>
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 80166fe:	2300      	movs	r3, #0
        }
    }
}
 8016700:	4618      	mov	r0, r3
 8016702:	3710      	adds	r7, #16
 8016704:	46bd      	mov	sp, r7
 8016706:	bd80      	pop	{r7, pc}

08016708 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 8016708:	b580      	push	{r7, lr}
 801670a:	b082      	sub	sp, #8
 801670c:	af00      	add	r7, sp, #0
 801670e:	4603      	mov	r3, r0
 8016710:	6039      	str	r1, [r7, #0]
 8016712:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8016714:	79fb      	ldrb	r3, [r7, #7]
 8016716:	2b05      	cmp	r3, #5
 8016718:	d002      	beq.n	8016720 <RegionRxParamSetupReq+0x18>
 801671a:	2b08      	cmp	r3, #8
 801671c:	d005      	beq.n	801672a <RegionRxParamSetupReq+0x22>
 801671e:	e009      	b.n	8016734 <RegionRxParamSetupReq+0x2c>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 8016720:	6838      	ldr	r0, [r7, #0]
 8016722:	f001 ffef 	bl	8018704 <RegionEU868RxParamSetupReq>
 8016726:	4603      	mov	r3, r0
 8016728:	e005      	b.n	8016736 <RegionRxParamSetupReq+0x2e>
        KR920_RX_PARAM_SETUP_REQ( );
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
 801672a:	6838      	ldr	r0, [r7, #0]
 801672c:	f003 fac6 	bl	8019cbc <RegionUS915RxParamSetupReq>
 8016730:	4603      	mov	r3, r0
 8016732:	e000      	b.n	8016736 <RegionRxParamSetupReq+0x2e>
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8016734:	2300      	movs	r3, #0
        }
    }
}
 8016736:	4618      	mov	r0, r3
 8016738:	3708      	adds	r7, #8
 801673a:	46bd      	mov	sp, r7
 801673c:	bd80      	pop	{r7, pc}

0801673e <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 801673e:	b580      	push	{r7, lr}
 8016740:	b082      	sub	sp, #8
 8016742:	af00      	add	r7, sp, #0
 8016744:	4603      	mov	r3, r0
 8016746:	6039      	str	r1, [r7, #0]
 8016748:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801674a:	79fb      	ldrb	r3, [r7, #7]
 801674c:	2b05      	cmp	r3, #5
 801674e:	d002      	beq.n	8016756 <RegionNewChannelReq+0x18>
 8016750:	2b08      	cmp	r3, #8
 8016752:	d005      	beq.n	8016760 <RegionNewChannelReq+0x22>
 8016754:	e009      	b.n	801676a <RegionNewChannelReq+0x2c>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 8016756:	6838      	ldr	r0, [r7, #0]
 8016758:	f002 f812 	bl	8018780 <RegionEU868NewChannelReq>
 801675c:	4603      	mov	r3, r0
 801675e:	e005      	b.n	801676c <RegionNewChannelReq+0x2e>
        KR920_NEW_CHANNEL_REQ( );
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
 8016760:	6838      	ldr	r0, [r7, #0]
 8016762:	f003 faf7 	bl	8019d54 <RegionUS915NewChannelReq>
 8016766:	4603      	mov	r3, r0
 8016768:	e000      	b.n	801676c <RegionNewChannelReq+0x2e>
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 801676a:	2300      	movs	r3, #0
        }
    }
}
 801676c:	4618      	mov	r0, r3
 801676e:	3708      	adds	r7, #8
 8016770:	46bd      	mov	sp, r7
 8016772:	bd80      	pop	{r7, pc}

08016774 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 8016774:	b580      	push	{r7, lr}
 8016776:	b082      	sub	sp, #8
 8016778:	af00      	add	r7, sp, #0
 801677a:	4603      	mov	r3, r0
 801677c:	6039      	str	r1, [r7, #0]
 801677e:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8016780:	79fb      	ldrb	r3, [r7, #7]
 8016782:	2b05      	cmp	r3, #5
 8016784:	d002      	beq.n	801678c <RegionTxParamSetupReq+0x18>
 8016786:	2b08      	cmp	r3, #8
 8016788:	d005      	beq.n	8016796 <RegionTxParamSetupReq+0x22>
 801678a:	e009      	b.n	80167a0 <RegionTxParamSetupReq+0x2c>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 801678c:	6838      	ldr	r0, [r7, #0]
 801678e:	f002 f855 	bl	801883c <RegionEU868TxParamSetupReq>
 8016792:	4603      	mov	r3, r0
 8016794:	e005      	b.n	80167a2 <RegionTxParamSetupReq+0x2e>
        KR920_TX_PARAM_SETUP_REQ( );
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
 8016796:	6838      	ldr	r0, [r7, #0]
 8016798:	f003 fae7 	bl	8019d6a <RegionUS915TxParamSetupReq>
 801679c:	4603      	mov	r3, r0
 801679e:	e000      	b.n	80167a2 <RegionTxParamSetupReq+0x2e>
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 80167a0:	2300      	movs	r3, #0
        }
    }
}
 80167a2:	4618      	mov	r0, r3
 80167a4:	3708      	adds	r7, #8
 80167a6:	46bd      	mov	sp, r7
 80167a8:	bd80      	pop	{r7, pc}

080167aa <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 80167aa:	b580      	push	{r7, lr}
 80167ac:	b082      	sub	sp, #8
 80167ae:	af00      	add	r7, sp, #0
 80167b0:	4603      	mov	r3, r0
 80167b2:	6039      	str	r1, [r7, #0]
 80167b4:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80167b6:	79fb      	ldrb	r3, [r7, #7]
 80167b8:	2b05      	cmp	r3, #5
 80167ba:	d002      	beq.n	80167c2 <RegionDlChannelReq+0x18>
 80167bc:	2b08      	cmp	r3, #8
 80167be:	d005      	beq.n	80167cc <RegionDlChannelReq+0x22>
 80167c0:	e009      	b.n	80167d6 <RegionDlChannelReq+0x2c>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 80167c2:	6838      	ldr	r0, [r7, #0]
 80167c4:	f002 f846 	bl	8018854 <RegionEU868DlChannelReq>
 80167c8:	4603      	mov	r3, r0
 80167ca:	e005      	b.n	80167d8 <RegionDlChannelReq+0x2e>
        KR920_DL_CHANNEL_REQ( );
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
 80167cc:	6838      	ldr	r0, [r7, #0]
 80167ce:	f003 fad7 	bl	8019d80 <RegionUS915DlChannelReq>
 80167d2:	4603      	mov	r3, r0
 80167d4:	e000      	b.n	80167d8 <RegionDlChannelReq+0x2e>
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 80167d6:	2300      	movs	r3, #0
        }
    }
}
 80167d8:	4618      	mov	r0, r3
 80167da:	3708      	adds	r7, #8
 80167dc:	46bd      	mov	sp, r7
 80167de:	bd80      	pop	{r7, pc}

080167e0 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 80167e0:	b580      	push	{r7, lr}
 80167e2:	b082      	sub	sp, #8
 80167e4:	af00      	add	r7, sp, #0
 80167e6:	4603      	mov	r3, r0
 80167e8:	71fb      	strb	r3, [r7, #7]
 80167ea:	460b      	mov	r3, r1
 80167ec:	71bb      	strb	r3, [r7, #6]
 80167ee:	4613      	mov	r3, r2
 80167f0:	717b      	strb	r3, [r7, #5]
    switch( region )
 80167f2:	79fb      	ldrb	r3, [r7, #7]
 80167f4:	2b05      	cmp	r3, #5
 80167f6:	d002      	beq.n	80167fe <RegionAlternateDr+0x1e>
 80167f8:	2b08      	cmp	r3, #8
 80167fa:	d009      	beq.n	8016810 <RegionAlternateDr+0x30>
 80167fc:	e011      	b.n	8016822 <RegionAlternateDr+0x42>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 80167fe:	797a      	ldrb	r2, [r7, #5]
 8016800:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8016804:	4611      	mov	r1, r2
 8016806:	4618      	mov	r0, r3
 8016808:	f002 f86e 	bl	80188e8 <RegionEU868AlternateDr>
 801680c:	4603      	mov	r3, r0
 801680e:	e009      	b.n	8016824 <RegionAlternateDr+0x44>
        KR920_ALTERNATE_DR( );
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
 8016810:	797a      	ldrb	r2, [r7, #5]
 8016812:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8016816:	4611      	mov	r1, r2
 8016818:	4618      	mov	r0, r3
 801681a:	f003 fabd 	bl	8019d98 <RegionUS915AlternateDr>
 801681e:	4603      	mov	r3, r0
 8016820:	e000      	b.n	8016824 <RegionAlternateDr+0x44>
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 8016822:	2300      	movs	r3, #0
        }
    }
}
 8016824:	4618      	mov	r0, r3
 8016826:	3708      	adds	r7, #8
 8016828:	46bd      	mov	sp, r7
 801682a:	bd80      	pop	{r7, pc}

0801682c <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 801682c:	b580      	push	{r7, lr}
 801682e:	b084      	sub	sp, #16
 8016830:	af00      	add	r7, sp, #0
 8016832:	60b9      	str	r1, [r7, #8]
 8016834:	607a      	str	r2, [r7, #4]
 8016836:	603b      	str	r3, [r7, #0]
 8016838:	4603      	mov	r3, r0
 801683a:	73fb      	strb	r3, [r7, #15]
    switch( region )
 801683c:	7bfb      	ldrb	r3, [r7, #15]
 801683e:	2b05      	cmp	r3, #5
 8016840:	d002      	beq.n	8016848 <RegionNextChannel+0x1c>
 8016842:	2b08      	cmp	r3, #8
 8016844:	d008      	beq.n	8016858 <RegionNextChannel+0x2c>
 8016846:	e00f      	b.n	8016868 <RegionNextChannel+0x3c>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 8016848:	69bb      	ldr	r3, [r7, #24]
 801684a:	683a      	ldr	r2, [r7, #0]
 801684c:	6879      	ldr	r1, [r7, #4]
 801684e:	68b8      	ldr	r0, [r7, #8]
 8016850:	f002 f85a 	bl	8018908 <RegionEU868NextChannel>
 8016854:	4603      	mov	r3, r0
 8016856:	e008      	b.n	801686a <RegionNextChannel+0x3e>
        KR920_NEXT_CHANNEL( );
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
 8016858:	69bb      	ldr	r3, [r7, #24]
 801685a:	683a      	ldr	r2, [r7, #0]
 801685c:	6879      	ldr	r1, [r7, #4]
 801685e:	68b8      	ldr	r0, [r7, #8]
 8016860:	f003 fad0 	bl	8019e04 <RegionUS915NextChannel>
 8016864:	4603      	mov	r3, r0
 8016866:	e000      	b.n	801686a <RegionNextChannel+0x3e>
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8016868:	2309      	movs	r3, #9
        }
    }
}
 801686a:	4618      	mov	r0, r3
 801686c:	3710      	adds	r7, #16
 801686e:	46bd      	mov	sp, r7
 8016870:	bd80      	pop	{r7, pc}

08016872 <RegionApplyDrOffset>:
    }
}
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8016872:	b590      	push	{r4, r7, lr}
 8016874:	b083      	sub	sp, #12
 8016876:	af00      	add	r7, sp, #0
 8016878:	4604      	mov	r4, r0
 801687a:	4608      	mov	r0, r1
 801687c:	4611      	mov	r1, r2
 801687e:	461a      	mov	r2, r3
 8016880:	4623      	mov	r3, r4
 8016882:	71fb      	strb	r3, [r7, #7]
 8016884:	4603      	mov	r3, r0
 8016886:	71bb      	strb	r3, [r7, #6]
 8016888:	460b      	mov	r3, r1
 801688a:	717b      	strb	r3, [r7, #5]
 801688c:	4613      	mov	r3, r2
 801688e:	713b      	strb	r3, [r7, #4]
    switch( region )
 8016890:	79fb      	ldrb	r3, [r7, #7]
 8016892:	2b05      	cmp	r3, #5
 8016894:	d002      	beq.n	801689c <RegionApplyDrOffset+0x2a>
 8016896:	2b08      	cmp	r3, #8
 8016898:	d00a      	beq.n	80168b0 <RegionApplyDrOffset+0x3e>
 801689a:	e013      	b.n	80168c4 <RegionApplyDrOffset+0x52>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 801689c:	f997 2004 	ldrsb.w	r2, [r7, #4]
 80168a0:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80168a4:	79bb      	ldrb	r3, [r7, #6]
 80168a6:	4618      	mov	r0, r3
 80168a8:	f002 f9a8 	bl	8018bfc <RegionEU868ApplyDrOffset>
 80168ac:	4603      	mov	r3, r0
 80168ae:	e00a      	b.n	80168c6 <RegionApplyDrOffset+0x54>
        KR920_APPLY_DR_OFFSET( );
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
 80168b0:	f997 2004 	ldrsb.w	r2, [r7, #4]
 80168b4:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80168b8:	79bb      	ldrb	r3, [r7, #6]
 80168ba:	4618      	mov	r0, r3
 80168bc:	f003 fb90 	bl	8019fe0 <RegionUS915ApplyDrOffset>
 80168c0:	4603      	mov	r3, r0
 80168c2:	e000      	b.n	80168c6 <RegionApplyDrOffset+0x54>
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 80168c4:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 80168c6:	4618      	mov	r0, r3
 80168c8:	370c      	adds	r7, #12
 80168ca:	46bd      	mov	sp, r7
 80168cc:	bd90      	pop	{r4, r7, pc}
	...

080168d0 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 80168d0:	b480      	push	{r7}
 80168d2:	b083      	sub	sp, #12
 80168d4:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 80168d6:	4b04      	ldr	r3, [pc, #16]	@ (80168e8 <RegionGetVersion+0x18>)
 80168d8:	607b      	str	r3, [r7, #4]

    return version;
 80168da:	687b      	ldr	r3, [r7, #4]
}
 80168dc:	4618      	mov	r0, r3
 80168de:	370c      	adds	r7, #12
 80168e0:	46bd      	mov	sp, r7
 80168e2:	bc80      	pop	{r7}
 80168e4:	4770      	bx	lr
 80168e6:	bf00      	nop
 80168e8:	02010001 	.word	0x02010001

080168ec <FindAvailable125kHzChannels>:
 *
 * \retval Status
 */
static LoRaMacStatus_t FindAvailable125kHzChannels( uint16_t currentChannelMaskLeft,
                                                    uint8_t* findAvailableChannelsIndex, uint8_t* availableChannels )
{
 80168ec:	b480      	push	{r7}
 80168ee:	b087      	sub	sp, #28
 80168f0:	af00      	add	r7, sp, #0
 80168f2:	4603      	mov	r3, r0
 80168f4:	60b9      	str	r1, [r7, #8]
 80168f6:	607a      	str	r2, [r7, #4]
 80168f8:	81fb      	strh	r3, [r7, #14]
    // Nullpointer check
    if( findAvailableChannelsIndex == NULL || availableChannels == NULL )
 80168fa:	68bb      	ldr	r3, [r7, #8]
 80168fc:	2b00      	cmp	r3, #0
 80168fe:	d002      	beq.n	8016906 <FindAvailable125kHzChannels+0x1a>
 8016900:	687b      	ldr	r3, [r7, #4]
 8016902:	2b00      	cmp	r3, #0
 8016904:	d101      	bne.n	801690a <FindAvailable125kHzChannels+0x1e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8016906:	2303      	movs	r3, #3
 8016908:	e021      	b.n	801694e <FindAvailable125kHzChannels+0x62>
    }

    // Initialize counter
    *availableChannels = 0;
 801690a:	687b      	ldr	r3, [r7, #4]
 801690c:	2200      	movs	r2, #0
 801690e:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 8016910:	2300      	movs	r3, #0
 8016912:	75fb      	strb	r3, [r7, #23]
 8016914:	e017      	b.n	8016946 <FindAvailable125kHzChannels+0x5a>
    {
        // Find available channels
        if( ( currentChannelMaskLeft & ( 1 << i ) ) != 0 )
 8016916:	89fa      	ldrh	r2, [r7, #14]
 8016918:	7dfb      	ldrb	r3, [r7, #23]
 801691a:	fa42 f303 	asr.w	r3, r2, r3
 801691e:	f003 0301 	and.w	r3, r3, #1
 8016922:	2b00      	cmp	r3, #0
 8016924:	d00c      	beq.n	8016940 <FindAvailable125kHzChannels+0x54>
        {
            // Save available channel index
            findAvailableChannelsIndex[*availableChannels] = i;
 8016926:	687b      	ldr	r3, [r7, #4]
 8016928:	781b      	ldrb	r3, [r3, #0]
 801692a:	461a      	mov	r2, r3
 801692c:	68bb      	ldr	r3, [r7, #8]
 801692e:	4413      	add	r3, r2
 8016930:	7dfa      	ldrb	r2, [r7, #23]
 8016932:	701a      	strb	r2, [r3, #0]
            // Increment counter of available channels if the current channel is available
            ( *availableChannels )++;
 8016934:	687b      	ldr	r3, [r7, #4]
 8016936:	781b      	ldrb	r3, [r3, #0]
 8016938:	3301      	adds	r3, #1
 801693a:	b2da      	uxtb	r2, r3
 801693c:	687b      	ldr	r3, [r7, #4]
 801693e:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 8016940:	7dfb      	ldrb	r3, [r7, #23]
 8016942:	3301      	adds	r3, #1
 8016944:	75fb      	strb	r3, [r7, #23]
 8016946:	7dfb      	ldrb	r3, [r7, #23]
 8016948:	2b07      	cmp	r3, #7
 801694a:	d9e4      	bls.n	8016916 <FindAvailable125kHzChannels+0x2a>
        }
    }

    return LORAMAC_STATUS_OK;
 801694c:	2300      	movs	r3, #0
}
 801694e:	4618      	mov	r0, r3
 8016950:	371c      	adds	r7, #28
 8016952:	46bd      	mov	sp, r7
 8016954:	bc80      	pop	{r7}
 8016956:	4770      	bx	lr

08016958 <RegionBaseUSComputeNext125kHzJoinChannel>:

LoRaMacStatus_t RegionBaseUSComputeNext125kHzJoinChannel( uint16_t* channelsMaskRemaining,
                                                          uint8_t* groupsCurrentIndex, uint8_t* newChannelIndex )
{
 8016958:	b590      	push	{r4, r7, lr}
 801695a:	b089      	sub	sp, #36	@ 0x24
 801695c:	af00      	add	r7, sp, #0
 801695e:	60f8      	str	r0, [r7, #12]
 8016960:	60b9      	str	r1, [r7, #8]
 8016962:	607a      	str	r2, [r7, #4]
    uint8_t currentChannelMaskLeftIndex;
    uint16_t currentChannelMaskLeft;
    uint8_t findAvailableChannelsIndex[8] = { 0 };
 8016964:	2300      	movs	r3, #0
 8016966:	617b      	str	r3, [r7, #20]
 8016968:	2300      	movs	r3, #0
 801696a:	61bb      	str	r3, [r7, #24]
    uint8_t availableChannels = 0;
 801696c:	2300      	movs	r3, #0
 801696e:	74fb      	strb	r3, [r7, #19]
    uint8_t startIndex;

    // Null pointer check
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 8016970:	68fb      	ldr	r3, [r7, #12]
 8016972:	2b00      	cmp	r3, #0
 8016974:	d005      	beq.n	8016982 <RegionBaseUSComputeNext125kHzJoinChannel+0x2a>
 8016976:	68bb      	ldr	r3, [r7, #8]
 8016978:	2b00      	cmp	r3, #0
 801697a:	d002      	beq.n	8016982 <RegionBaseUSComputeNext125kHzJoinChannel+0x2a>
 801697c:	687b      	ldr	r3, [r7, #4]
 801697e:	2b00      	cmp	r3, #0
 8016980:	d101      	bne.n	8016986 <RegionBaseUSComputeNext125kHzJoinChannel+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8016982:	2303      	movs	r3, #3
 8016984:	e055      	b.n	8016a32 <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
    }

    // copy the current index.
    startIndex = *groupsCurrentIndex;
 8016986:	68bb      	ldr	r3, [r7, #8]
 8016988:	781b      	ldrb	r3, [r3, #0]
 801698a:	777b      	strb	r3, [r7, #29]

    do
    {
        // Current ChannelMaskRemaining, two groups per channel mask. For example Group 0 and 1 (8 bit) are ChannelMaskRemaining 0 (16 bit), etc.
        currentChannelMaskLeftIndex = (uint8_t) startIndex / 2;
 801698c:	7f7b      	ldrb	r3, [r7, #29]
 801698e:	085b      	lsrs	r3, r3, #1
 8016990:	773b      	strb	r3, [r7, #28]

        // For even numbers we need the 8 LSBs and for uneven the 8 MSBs
        if( ( startIndex % 2 ) == 0 )
 8016992:	7f7b      	ldrb	r3, [r7, #29]
 8016994:	f003 0301 	and.w	r3, r3, #1
 8016998:	b2db      	uxtb	r3, r3
 801699a:	2b00      	cmp	r3, #0
 801699c:	d107      	bne.n	80169ae <RegionBaseUSComputeNext125kHzJoinChannel+0x56>
        {
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 801699e:	7f3b      	ldrb	r3, [r7, #28]
 80169a0:	005b      	lsls	r3, r3, #1
 80169a2:	68fa      	ldr	r2, [r7, #12]
 80169a4:	4413      	add	r3, r2
 80169a6:	881b      	ldrh	r3, [r3, #0]
 80169a8:	b2db      	uxtb	r3, r3
 80169aa:	83fb      	strh	r3, [r7, #30]
 80169ac:	e006      	b.n	80169bc <RegionBaseUSComputeNext125kHzJoinChannel+0x64>
        }
        else
        {
            currentChannelMaskLeft = ( ( channelsMaskRemaining[currentChannelMaskLeftIndex] >> 8 ) & 0x00FF );
 80169ae:	7f3b      	ldrb	r3, [r7, #28]
 80169b0:	005b      	lsls	r3, r3, #1
 80169b2:	68fa      	ldr	r2, [r7, #12]
 80169b4:	4413      	add	r3, r2
 80169b6:	881b      	ldrh	r3, [r3, #0]
 80169b8:	0a1b      	lsrs	r3, r3, #8
 80169ba:	83fb      	strh	r3, [r7, #30]
        }

        if( FindAvailable125kHzChannels( currentChannelMaskLeft, findAvailableChannelsIndex, &availableChannels ) == LORAMAC_STATUS_PARAMETER_INVALID )
 80169bc:	f107 0213 	add.w	r2, r7, #19
 80169c0:	f107 0114 	add.w	r1, r7, #20
 80169c4:	8bfb      	ldrh	r3, [r7, #30]
 80169c6:	4618      	mov	r0, r3
 80169c8:	f7ff ff90 	bl	80168ec <FindAvailable125kHzChannels>
 80169cc:	4603      	mov	r3, r0
 80169ce:	2b03      	cmp	r3, #3
 80169d0:	d101      	bne.n	80169d6 <RegionBaseUSComputeNext125kHzJoinChannel+0x7e>
        {
            return LORAMAC_STATUS_PARAMETER_INVALID;
 80169d2:	2303      	movs	r3, #3
 80169d4:	e02d      	b.n	8016a32 <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
        }

        if ( availableChannels > 0 )
 80169d6:	7cfb      	ldrb	r3, [r7, #19]
 80169d8:	2b00      	cmp	r3, #0
 80169da:	d011      	beq.n	8016a00 <RegionBaseUSComputeNext125kHzJoinChannel+0xa8>
        {
            // Choose randomly a free channel 125kHz
            *newChannelIndex = ( startIndex * 8 ) + findAvailableChannelsIndex[randr( 0, ( availableChannels - 1 ) )];
 80169dc:	7f7b      	ldrb	r3, [r7, #29]
 80169de:	00db      	lsls	r3, r3, #3
 80169e0:	b2dc      	uxtb	r4, r3
 80169e2:	7cfb      	ldrb	r3, [r7, #19]
 80169e4:	3b01      	subs	r3, #1
 80169e6:	4619      	mov	r1, r3
 80169e8:	2000      	movs	r0, #0
 80169ea:	f003 fb4b 	bl	801a084 <randr>
 80169ee:	4603      	mov	r3, r0
 80169f0:	3320      	adds	r3, #32
 80169f2:	443b      	add	r3, r7
 80169f4:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80169f8:	4423      	add	r3, r4
 80169fa:	b2da      	uxtb	r2, r3
 80169fc:	687b      	ldr	r3, [r7, #4]
 80169fe:	701a      	strb	r2, [r3, #0]
        }

        // Increment start index
        startIndex++;
 8016a00:	7f7b      	ldrb	r3, [r7, #29]
 8016a02:	3301      	adds	r3, #1
 8016a04:	777b      	strb	r3, [r7, #29]
        if ( startIndex > 7 )
 8016a06:	7f7b      	ldrb	r3, [r7, #29]
 8016a08:	2b07      	cmp	r3, #7
 8016a0a:	d901      	bls.n	8016a10 <RegionBaseUSComputeNext125kHzJoinChannel+0xb8>
        {
            startIndex = 0;
 8016a0c:	2300      	movs	r3, #0
 8016a0e:	777b      	strb	r3, [r7, #29]
        }
    } while( ( availableChannels == 0 ) && ( startIndex != *groupsCurrentIndex ) );
 8016a10:	7cfb      	ldrb	r3, [r7, #19]
 8016a12:	2b00      	cmp	r3, #0
 8016a14:	d104      	bne.n	8016a20 <RegionBaseUSComputeNext125kHzJoinChannel+0xc8>
 8016a16:	68bb      	ldr	r3, [r7, #8]
 8016a18:	781b      	ldrb	r3, [r3, #0]
 8016a1a:	7f7a      	ldrb	r2, [r7, #29]
 8016a1c:	429a      	cmp	r2, r3
 8016a1e:	d1b5      	bne.n	801698c <RegionBaseUSComputeNext125kHzJoinChannel+0x34>

    if ( availableChannels > 0 )
 8016a20:	7cfb      	ldrb	r3, [r7, #19]
 8016a22:	2b00      	cmp	r3, #0
 8016a24:	d004      	beq.n	8016a30 <RegionBaseUSComputeNext125kHzJoinChannel+0xd8>
    {
        *groupsCurrentIndex = startIndex;
 8016a26:	68bb      	ldr	r3, [r7, #8]
 8016a28:	7f7a      	ldrb	r2, [r7, #29]
 8016a2a:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8016a2c:	2300      	movs	r3, #0
 8016a2e:	e000      	b.n	8016a32 <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
    }

    return LORAMAC_STATUS_PARAMETER_INVALID;
 8016a30:	2303      	movs	r3, #3
}
 8016a32:	4618      	mov	r0, r3
 8016a34:	3724      	adds	r7, #36	@ 0x24
 8016a36:	46bd      	mov	sp, r7
 8016a38:	bd90      	pop	{r4, r7, pc}

08016a3a <RegionBaseUSCalcDownlinkFrequency>:
    return true;
}

uint32_t RegionBaseUSCalcDownlinkFrequency( uint8_t channel, uint32_t frequency,
                                            uint32_t stepwidth )
{
 8016a3a:	b480      	push	{r7}
 8016a3c:	b085      	sub	sp, #20
 8016a3e:	af00      	add	r7, sp, #0
 8016a40:	4603      	mov	r3, r0
 8016a42:	60b9      	str	r1, [r7, #8]
 8016a44:	607a      	str	r2, [r7, #4]
 8016a46:	73fb      	strb	r3, [r7, #15]
    // Calculate the frequency
    return frequency + ( channel * stepwidth );
 8016a48:	7bfb      	ldrb	r3, [r7, #15]
 8016a4a:	687a      	ldr	r2, [r7, #4]
 8016a4c:	fb03 f202 	mul.w	r2, r3, r2
 8016a50:	68bb      	ldr	r3, [r7, #8]
 8016a52:	4413      	add	r3, r2
}
 8016a54:	4618      	mov	r0, r3
 8016a56:	3714      	adds	r7, #20
 8016a58:	46bd      	mov	sp, r7
 8016a5a:	bc80      	pop	{r7}
 8016a5c:	4770      	bx	lr

08016a5e <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8016a5e:	b480      	push	{r7}
 8016a60:	b087      	sub	sp, #28
 8016a62:	af00      	add	r7, sp, #0
 8016a64:	60f8      	str	r0, [r7, #12]
 8016a66:	4608      	mov	r0, r1
 8016a68:	4639      	mov	r1, r7
 8016a6a:	e881 000c 	stmia.w	r1, {r2, r3}
 8016a6e:	4603      	mov	r3, r0
 8016a70:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8016a72:	68fb      	ldr	r3, [r7, #12]
 8016a74:	881b      	ldrh	r3, [r3, #0]
 8016a76:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 8016a78:	7afb      	ldrb	r3, [r7, #11]
 8016a7a:	f083 0301 	eor.w	r3, r3, #1
 8016a7e:	b2db      	uxtb	r3, r3
 8016a80:	2b00      	cmp	r3, #0
 8016a82:	d01b      	beq.n	8016abc <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 8016a84:	f242 7310 	movw	r3, #10000	@ 0x2710
 8016a88:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 8016a8a:	683b      	ldr	r3, [r7, #0]
 8016a8c:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 8016a90:	d202      	bcs.n	8016a98 <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 8016a92:	2364      	movs	r3, #100	@ 0x64
 8016a94:	82bb      	strh	r3, [r7, #20]
 8016a96:	e00b      	b.n	8016ab0 <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 8016a98:	683b      	ldr	r3, [r7, #0]
 8016a9a:	f649 22af 	movw	r2, #39599	@ 0x9aaf
 8016a9e:	4293      	cmp	r3, r2
 8016aa0:	d803      	bhi.n	8016aaa <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 8016aa2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8016aa6:	82bb      	strh	r3, [r7, #20]
 8016aa8:	e002      	b.n	8016ab0 <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 8016aaa:	f242 7310 	movw	r3, #10000	@ 0x2710
 8016aae:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 8016ab0:	8aba      	ldrh	r2, [r7, #20]
 8016ab2:	8afb      	ldrh	r3, [r7, #22]
 8016ab4:	4293      	cmp	r3, r2
 8016ab6:	bf38      	it	cc
 8016ab8:	4613      	movcc	r3, r2
 8016aba:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 8016abc:	8afb      	ldrh	r3, [r7, #22]
 8016abe:	2b00      	cmp	r3, #0
 8016ac0:	d101      	bne.n	8016ac6 <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 8016ac2:	2301      	movs	r3, #1
 8016ac4:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 8016ac6:	8afb      	ldrh	r3, [r7, #22]
}
 8016ac8:	4618      	mov	r0, r3
 8016aca:	371c      	adds	r7, #28
 8016acc:	46bd      	mov	sp, r7
 8016ace:	bc80      	pop	{r7}
 8016ad0:	4770      	bx	lr
	...

08016ad4 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 8016ad4:	b580      	push	{r7, lr}
 8016ad6:	b08e      	sub	sp, #56	@ 0x38
 8016ad8:	af02      	add	r7, sp, #8
 8016ada:	60f8      	str	r0, [r7, #12]
 8016adc:	4608      	mov	r0, r1
 8016ade:	4639      	mov	r1, r7
 8016ae0:	e881 000c 	stmia.w	r1, {r2, r3}
 8016ae4:	4603      	mov	r3, r0
 8016ae6:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8016ae8:	68fb      	ldr	r3, [r7, #12]
 8016aea:	881b      	ldrh	r3, [r3, #0]
 8016aec:	857b      	strh	r3, [r7, #42]	@ 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8016aee:	4b4b      	ldr	r3, [pc, #300]	@ (8016c1c <SetMaxTimeCredits+0x148>)
 8016af0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 8016af2:	463b      	mov	r3, r7
 8016af4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016af8:	f006 ff64 	bl	801d9c4 <SysTimeToMs>
 8016afc:	6278      	str	r0, [r7, #36]	@ 0x24
    SysTime_t timeDiff = { 0 };
 8016afe:	f107 0314 	add.w	r3, r7, #20
 8016b02:	2200      	movs	r2, #0
 8016b04:	601a      	str	r2, [r3, #0]
 8016b06:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8016b08:	7af9      	ldrb	r1, [r7, #11]
 8016b0a:	463b      	mov	r3, r7
 8016b0c:	cb0c      	ldmia	r3, {r2, r3}
 8016b0e:	68f8      	ldr	r0, [r7, #12]
 8016b10:	f7ff ffa5 	bl	8016a5e <GetDutyCycle>
 8016b14:	4603      	mov	r3, r0
 8016b16:	857b      	strh	r3, [r7, #42]	@ 0x2a

    if( joined == false )
 8016b18:	7afb      	ldrb	r3, [r7, #11]
 8016b1a:	f083 0301 	eor.w	r3, r3, #1
 8016b1e:	b2db      	uxtb	r3, r3
 8016b20:	2b00      	cmp	r3, #0
 8016b22:	d062      	beq.n	8016bea <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 8016b24:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8016b26:	2b64      	cmp	r3, #100	@ 0x64
 8016b28:	d105      	bne.n	8016b36 <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8016b2a:	4b3c      	ldr	r3, [pc, #240]	@ (8016c1c <SetMaxTimeCredits+0x148>)
 8016b2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8016b2e:	68fb      	ldr	r3, [r7, #12]
 8016b30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016b32:	609a      	str	r2, [r3, #8]
 8016b34:	e00b      	b.n	8016b4e <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8016b36:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8016b38:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8016b3c:	d105      	bne.n	8016b4a <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 8016b3e:	4b38      	ldr	r3, [pc, #224]	@ (8016c20 <SetMaxTimeCredits+0x14c>)
 8016b40:	62fb      	str	r3, [r7, #44]	@ 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8016b42:	68fb      	ldr	r3, [r7, #12]
 8016b44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016b46:	609a      	str	r2, [r3, #8]
 8016b48:	e001      	b.n	8016b4e <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 8016b4a:	4b36      	ldr	r3, [pc, #216]	@ (8016c24 <SetMaxTimeCredits+0x150>)
 8016b4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 8016b4e:	68fb      	ldr	r3, [r7, #12]
 8016b50:	689a      	ldr	r2, [r3, #8]
 8016b52:	f107 031c 	add.w	r3, r7, #28
 8016b56:	4611      	mov	r1, r2
 8016b58:	4618      	mov	r0, r3
 8016b5a:	f006 ff5b 	bl	801da14 <SysTimeFromMs>
 8016b5e:	f107 0014 	add.w	r0, r7, #20
 8016b62:	6a3b      	ldr	r3, [r7, #32]
 8016b64:	9300      	str	r3, [sp, #0]
 8016b66:	69fb      	ldr	r3, [r7, #28]
 8016b68:	463a      	mov	r2, r7
 8016b6a:	ca06      	ldmia	r2, {r1, r2}
 8016b6c:	f006 fe6b 	bl	801d846 <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8016b70:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8016b74:	f083 0301 	eor.w	r3, r3, #1
 8016b78:	b2db      	uxtb	r3, r3
 8016b7a:	2b00      	cmp	r3, #0
 8016b7c:	d006      	beq.n	8016b8c <SetMaxTimeCredits+0xb8>
 8016b7e:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8016b82:	f083 0301 	eor.w	r3, r3, #1
 8016b86:	b2db      	uxtb	r3, r3
 8016b88:	2b00      	cmp	r3, #0
 8016b8a:	d108      	bne.n	8016b9e <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 8016b8c:	68fb      	ldr	r3, [r7, #12]
 8016b8e:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8016b90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016b92:	429a      	cmp	r2, r3
 8016b94:	d103      	bne.n	8016b9e <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 8016b96:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 8016b98:	4a23      	ldr	r2, [pc, #140]	@ (8016c28 <SetMaxTimeCredits+0x154>)
 8016b9a:	4293      	cmp	r3, r2
 8016b9c:	d92f      	bls.n	8016bfe <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 8016b9e:	68fb      	ldr	r3, [r7, #12]
 8016ba0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016ba2:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8016ba4:	683b      	ldr	r3, [r7, #0]
 8016ba6:	4a21      	ldr	r2, [pc, #132]	@ (8016c2c <SetMaxTimeCredits+0x158>)
 8016ba8:	4293      	cmp	r3, r2
 8016baa:	d928      	bls.n	8016bfe <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 8016bac:	683b      	ldr	r3, [r7, #0]
 8016bae:	f5a3 33f6 	sub.w	r3, r3, #125952	@ 0x1ec00
 8016bb2:	3b30      	subs	r3, #48	@ 0x30
 8016bb4:	4a1e      	ldr	r2, [pc, #120]	@ (8016c30 <SetMaxTimeCredits+0x15c>)
 8016bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8016bba:	0c1b      	lsrs	r3, r3, #16
 8016bbc:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 8016bbe:	697b      	ldr	r3, [r7, #20]
 8016bc0:	4a1c      	ldr	r2, [pc, #112]	@ (8016c34 <SetMaxTimeCredits+0x160>)
 8016bc2:	fb02 f303 	mul.w	r3, r2, r3
 8016bc6:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8016bc8:	697b      	ldr	r3, [r7, #20]
 8016bca:	f503 33f6 	add.w	r3, r3, #125952	@ 0x1ec00
 8016bce:	3330      	adds	r3, #48	@ 0x30
 8016bd0:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 8016bd2:	2300      	movs	r3, #0
 8016bd4:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 8016bd6:	f107 0314 	add.w	r3, r7, #20
 8016bda:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016bde:	f006 fef1 	bl	801d9c4 <SysTimeToMs>
 8016be2:	4602      	mov	r2, r0
 8016be4:	68fb      	ldr	r3, [r7, #12]
 8016be6:	609a      	str	r2, [r3, #8]
 8016be8:	e009      	b.n	8016bfe <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 8016bea:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8016bee:	f083 0301 	eor.w	r3, r3, #1
 8016bf2:	b2db      	uxtb	r3, r3
 8016bf4:	2b00      	cmp	r3, #0
 8016bf6:	d002      	beq.n	8016bfe <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 8016bf8:	68fb      	ldr	r3, [r7, #12]
 8016bfa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016bfc:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 8016bfe:	68fb      	ldr	r3, [r7, #12]
 8016c00:	685b      	ldr	r3, [r3, #4]
 8016c02:	2b00      	cmp	r3, #0
 8016c04:	d102      	bne.n	8016c0c <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 8016c06:	68fb      	ldr	r3, [r7, #12]
 8016c08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016c0a:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 8016c0c:	68fb      	ldr	r3, [r7, #12]
 8016c0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016c10:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 8016c12:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
}
 8016c14:	4618      	mov	r0, r3
 8016c16:	3730      	adds	r7, #48	@ 0x30
 8016c18:	46bd      	mov	sp, r7
 8016c1a:	bd80      	pop	{r7, pc}
 8016c1c:	001b7740 	.word	0x001b7740
 8016c20:	0112a880 	.word	0x0112a880
 8016c24:	02932e00 	.word	0x02932e00
 8016c28:	0001517f 	.word	0x0001517f
 8016c2c:	0001ec2f 	.word	0x0001ec2f
 8016c30:	c22e4507 	.word	0xc22e4507
 8016c34:	00015180 	.word	0x00015180

08016c38 <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 8016c38:	b580      	push	{r7, lr}
 8016c3a:	b086      	sub	sp, #24
 8016c3c:	af02      	add	r7, sp, #8
 8016c3e:	6078      	str	r0, [r7, #4]
 8016c40:	4608      	mov	r0, r1
 8016c42:	4611      	mov	r1, r2
 8016c44:	461a      	mov	r2, r3
 8016c46:	4603      	mov	r3, r0
 8016c48:	70fb      	strb	r3, [r7, #3]
 8016c4a:	460b      	mov	r3, r1
 8016c4c:	70bb      	strb	r3, [r7, #2]
 8016c4e:	4613      	mov	r3, r2
 8016c50:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 8016c52:	78f9      	ldrb	r1, [r7, #3]
 8016c54:	787b      	ldrb	r3, [r7, #1]
 8016c56:	9301      	str	r3, [sp, #4]
 8016c58:	78bb      	ldrb	r3, [r7, #2]
 8016c5a:	9300      	str	r3, [sp, #0]
 8016c5c:	f107 0318 	add.w	r3, r7, #24
 8016c60:	cb0c      	ldmia	r3, {r2, r3}
 8016c62:	6878      	ldr	r0, [r7, #4]
 8016c64:	f7ff ff36 	bl	8016ad4 <SetMaxTimeCredits>
 8016c68:	4603      	mov	r3, r0
 8016c6a:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 8016c6c:	78fb      	ldrb	r3, [r7, #3]
 8016c6e:	2b00      	cmp	r3, #0
 8016c70:	d00a      	beq.n	8016c88 <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 8016c72:	687b      	ldr	r3, [r7, #4]
 8016c74:	685b      	ldr	r3, [r3, #4]
 8016c76:	4618      	mov	r0, r3
 8016c78:	f007 fcde 	bl	801e638 <UTIL_TIMER_GetElapsedTime>
 8016c7c:	4602      	mov	r2, r0
 8016c7e:	687b      	ldr	r3, [r7, #4]
 8016c80:	68db      	ldr	r3, [r3, #12]
 8016c82:	441a      	add	r2, r3
 8016c84:	687b      	ldr	r3, [r7, #4]
 8016c86:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 8016c88:	687b      	ldr	r3, [r7, #4]
 8016c8a:	68da      	ldr	r2, [r3, #12]
 8016c8c:	687b      	ldr	r3, [r7, #4]
 8016c8e:	691b      	ldr	r3, [r3, #16]
 8016c90:	429a      	cmp	r2, r3
 8016c92:	d903      	bls.n	8016c9c <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 8016c94:	687b      	ldr	r3, [r7, #4]
 8016c96:	691a      	ldr	r2, [r3, #16]
 8016c98:	687b      	ldr	r3, [r7, #4]
 8016c9a:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 8016c9c:	687b      	ldr	r3, [r7, #4]
 8016c9e:	6a3a      	ldr	r2, [r7, #32]
 8016ca0:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 8016ca2:	89fb      	ldrh	r3, [r7, #14]
}
 8016ca4:	4618      	mov	r0, r3
 8016ca6:	3710      	adds	r7, #16
 8016ca8:	46bd      	mov	sp, r7
 8016caa:	bd80      	pop	{r7, pc}

08016cac <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8016cac:	b480      	push	{r7}
 8016cae:	b085      	sub	sp, #20
 8016cb0:	af00      	add	r7, sp, #0
 8016cb2:	4603      	mov	r3, r0
 8016cb4:	460a      	mov	r2, r1
 8016cb6:	80fb      	strh	r3, [r7, #6]
 8016cb8:	4613      	mov	r3, r2
 8016cba:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 8016cbc:	2300      	movs	r3, #0
 8016cbe:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 8016cc0:	2300      	movs	r3, #0
 8016cc2:	73bb      	strb	r3, [r7, #14]
 8016cc4:	e011      	b.n	8016cea <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8016cc6:	88fa      	ldrh	r2, [r7, #6]
 8016cc8:	7bbb      	ldrb	r3, [r7, #14]
 8016cca:	2101      	movs	r1, #1
 8016ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8016cd0:	401a      	ands	r2, r3
 8016cd2:	7bbb      	ldrb	r3, [r7, #14]
 8016cd4:	2101      	movs	r1, #1
 8016cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8016cda:	429a      	cmp	r2, r3
 8016cdc:	d102      	bne.n	8016ce4 <CountChannels+0x38>
        {
            nbActiveBits++;
 8016cde:	7bfb      	ldrb	r3, [r7, #15]
 8016ce0:	3301      	adds	r3, #1
 8016ce2:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 8016ce4:	7bbb      	ldrb	r3, [r7, #14]
 8016ce6:	3301      	adds	r3, #1
 8016ce8:	73bb      	strb	r3, [r7, #14]
 8016cea:	7bba      	ldrb	r2, [r7, #14]
 8016cec:	797b      	ldrb	r3, [r7, #5]
 8016cee:	429a      	cmp	r2, r3
 8016cf0:	d3e9      	bcc.n	8016cc6 <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 8016cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8016cf4:	4618      	mov	r0, r3
 8016cf6:	3714      	adds	r7, #20
 8016cf8:	46bd      	mov	sp, r7
 8016cfa:	bc80      	pop	{r7}
 8016cfc:	4770      	bx	lr

08016cfe <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 8016cfe:	b580      	push	{r7, lr}
 8016d00:	b084      	sub	sp, #16
 8016d02:	af00      	add	r7, sp, #0
 8016d04:	6039      	str	r1, [r7, #0]
 8016d06:	4611      	mov	r1, r2
 8016d08:	461a      	mov	r2, r3
 8016d0a:	4603      	mov	r3, r0
 8016d0c:	71fb      	strb	r3, [r7, #7]
 8016d0e:	460b      	mov	r3, r1
 8016d10:	71bb      	strb	r3, [r7, #6]
 8016d12:	4613      	mov	r3, r2
 8016d14:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 8016d16:	f997 2018 	ldrsb.w	r2, [r7, #24]
 8016d1a:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8016d1e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8016d22:	4618      	mov	r0, r3
 8016d24:	f000 f85d 	bl	8016de2 <RegionCommonValueInRange>
 8016d28:	4603      	mov	r3, r0
 8016d2a:	2b00      	cmp	r3, #0
 8016d2c:	d101      	bne.n	8016d32 <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 8016d2e:	2300      	movs	r3, #0
 8016d30:	e053      	b.n	8016dda <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8016d32:	2300      	movs	r3, #0
 8016d34:	73fb      	strb	r3, [r7, #15]
 8016d36:	2300      	movs	r3, #0
 8016d38:	73bb      	strb	r3, [r7, #14]
 8016d3a:	e049      	b.n	8016dd0 <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8016d3c:	2300      	movs	r3, #0
 8016d3e:	737b      	strb	r3, [r7, #13]
 8016d40:	e03d      	b.n	8016dbe <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 8016d42:	7bbb      	ldrb	r3, [r7, #14]
 8016d44:	005b      	lsls	r3, r3, #1
 8016d46:	683a      	ldr	r2, [r7, #0]
 8016d48:	4413      	add	r3, r2
 8016d4a:	881b      	ldrh	r3, [r3, #0]
 8016d4c:	461a      	mov	r2, r3
 8016d4e:	7b7b      	ldrb	r3, [r7, #13]
 8016d50:	fa42 f303 	asr.w	r3, r2, r3
 8016d54:	f003 0301 	and.w	r3, r3, #1
 8016d58:	2b00      	cmp	r3, #0
 8016d5a:	d02d      	beq.n	8016db8 <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8016d5c:	7bfa      	ldrb	r2, [r7, #15]
 8016d5e:	7b7b      	ldrb	r3, [r7, #13]
 8016d60:	4413      	add	r3, r2
 8016d62:	461a      	mov	r2, r3
 8016d64:	4613      	mov	r3, r2
 8016d66:	005b      	lsls	r3, r3, #1
 8016d68:	4413      	add	r3, r2
 8016d6a:	009b      	lsls	r3, r3, #2
 8016d6c:	461a      	mov	r2, r3
 8016d6e:	69fb      	ldr	r3, [r7, #28]
 8016d70:	4413      	add	r3, r2
 8016d72:	7a1b      	ldrb	r3, [r3, #8]
 8016d74:	f343 0303 	sbfx	r3, r3, #0, #4
 8016d78:	b25b      	sxtb	r3, r3
 8016d7a:	f003 030f 	and.w	r3, r3, #15
 8016d7e:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8016d80:	7bfa      	ldrb	r2, [r7, #15]
 8016d82:	7b7b      	ldrb	r3, [r7, #13]
 8016d84:	4413      	add	r3, r2
 8016d86:	461a      	mov	r2, r3
 8016d88:	4613      	mov	r3, r2
 8016d8a:	005b      	lsls	r3, r3, #1
 8016d8c:	4413      	add	r3, r2
 8016d8e:	009b      	lsls	r3, r3, #2
 8016d90:	461a      	mov	r2, r3
 8016d92:	69fb      	ldr	r3, [r7, #28]
 8016d94:	4413      	add	r3, r2
 8016d96:	7a1b      	ldrb	r3, [r3, #8]
 8016d98:	f343 1303 	sbfx	r3, r3, #4, #4
 8016d9c:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8016d9e:	f003 030f 	and.w	r3, r3, #15
 8016da2:	b25a      	sxtb	r2, r3
 8016da4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8016da8:	4618      	mov	r0, r3
 8016daa:	f000 f81a 	bl	8016de2 <RegionCommonValueInRange>
 8016dae:	4603      	mov	r3, r0
 8016db0:	2b01      	cmp	r3, #1
 8016db2:	d101      	bne.n	8016db8 <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8016db4:	2301      	movs	r3, #1
 8016db6:	e010      	b.n	8016dda <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 8016db8:	7b7b      	ldrb	r3, [r7, #13]
 8016dba:	3301      	adds	r3, #1
 8016dbc:	737b      	strb	r3, [r7, #13]
 8016dbe:	7b7b      	ldrb	r3, [r7, #13]
 8016dc0:	2b0f      	cmp	r3, #15
 8016dc2:	d9be      	bls.n	8016d42 <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8016dc4:	7bfb      	ldrb	r3, [r7, #15]
 8016dc6:	3310      	adds	r3, #16
 8016dc8:	73fb      	strb	r3, [r7, #15]
 8016dca:	7bbb      	ldrb	r3, [r7, #14]
 8016dcc:	3301      	adds	r3, #1
 8016dce:	73bb      	strb	r3, [r7, #14]
 8016dd0:	7bfa      	ldrb	r2, [r7, #15]
 8016dd2:	79fb      	ldrb	r3, [r7, #7]
 8016dd4:	429a      	cmp	r2, r3
 8016dd6:	d3b1      	bcc.n	8016d3c <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 8016dd8:	2300      	movs	r3, #0
}
 8016dda:	4618      	mov	r0, r3
 8016ddc:	3710      	adds	r7, #16
 8016dde:	46bd      	mov	sp, r7
 8016de0:	bd80      	pop	{r7, pc}

08016de2 <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 8016de2:	b480      	push	{r7}
 8016de4:	b083      	sub	sp, #12
 8016de6:	af00      	add	r7, sp, #0
 8016de8:	4603      	mov	r3, r0
 8016dea:	71fb      	strb	r3, [r7, #7]
 8016dec:	460b      	mov	r3, r1
 8016dee:	71bb      	strb	r3, [r7, #6]
 8016df0:	4613      	mov	r3, r2
 8016df2:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 8016df4:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8016df8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8016dfc:	429a      	cmp	r2, r3
 8016dfe:	db07      	blt.n	8016e10 <RegionCommonValueInRange+0x2e>
 8016e00:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8016e04:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8016e08:	429a      	cmp	r2, r3
 8016e0a:	dc01      	bgt.n	8016e10 <RegionCommonValueInRange+0x2e>
    {
        return 1;
 8016e0c:	2301      	movs	r3, #1
 8016e0e:	e000      	b.n	8016e12 <RegionCommonValueInRange+0x30>
    }
    return 0;
 8016e10:	2300      	movs	r3, #0
}
 8016e12:	4618      	mov	r0, r3
 8016e14:	370c      	adds	r7, #12
 8016e16:	46bd      	mov	sp, r7
 8016e18:	bc80      	pop	{r7}
 8016e1a:	4770      	bx	lr

08016e1c <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 8016e1c:	b480      	push	{r7}
 8016e1e:	b085      	sub	sp, #20
 8016e20:	af00      	add	r7, sp, #0
 8016e22:	6078      	str	r0, [r7, #4]
 8016e24:	460b      	mov	r3, r1
 8016e26:	70fb      	strb	r3, [r7, #3]
 8016e28:	4613      	mov	r3, r2
 8016e2a:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 8016e2c:	78fb      	ldrb	r3, [r7, #3]
 8016e2e:	091b      	lsrs	r3, r3, #4
 8016e30:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8016e32:	78bb      	ldrb	r3, [r7, #2]
 8016e34:	091b      	lsrs	r3, r3, #4
 8016e36:	b2db      	uxtb	r3, r3
 8016e38:	7bfa      	ldrb	r2, [r7, #15]
 8016e3a:	429a      	cmp	r2, r3
 8016e3c:	d803      	bhi.n	8016e46 <RegionCommonChanDisable+0x2a>
 8016e3e:	78fa      	ldrb	r2, [r7, #3]
 8016e40:	78bb      	ldrb	r3, [r7, #2]
 8016e42:	429a      	cmp	r2, r3
 8016e44:	d301      	bcc.n	8016e4a <RegionCommonChanDisable+0x2e>
    {
        return false;
 8016e46:	2300      	movs	r3, #0
 8016e48:	e017      	b.n	8016e7a <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 8016e4a:	7bfb      	ldrb	r3, [r7, #15]
 8016e4c:	005b      	lsls	r3, r3, #1
 8016e4e:	687a      	ldr	r2, [r7, #4]
 8016e50:	4413      	add	r3, r2
 8016e52:	881b      	ldrh	r3, [r3, #0]
 8016e54:	b21a      	sxth	r2, r3
 8016e56:	78fb      	ldrb	r3, [r7, #3]
 8016e58:	f003 030f 	and.w	r3, r3, #15
 8016e5c:	2101      	movs	r1, #1
 8016e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8016e62:	b21b      	sxth	r3, r3
 8016e64:	43db      	mvns	r3, r3
 8016e66:	b21b      	sxth	r3, r3
 8016e68:	4013      	ands	r3, r2
 8016e6a:	b219      	sxth	r1, r3
 8016e6c:	7bfb      	ldrb	r3, [r7, #15]
 8016e6e:	005b      	lsls	r3, r3, #1
 8016e70:	687a      	ldr	r2, [r7, #4]
 8016e72:	4413      	add	r3, r2
 8016e74:	b28a      	uxth	r2, r1
 8016e76:	801a      	strh	r2, [r3, #0]

    return true;
 8016e78:	2301      	movs	r3, #1
}
 8016e7a:	4618      	mov	r0, r3
 8016e7c:	3714      	adds	r7, #20
 8016e7e:	46bd      	mov	sp, r7
 8016e80:	bc80      	pop	{r7}
 8016e82:	4770      	bx	lr

08016e84 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8016e84:	b580      	push	{r7, lr}
 8016e86:	b084      	sub	sp, #16
 8016e88:	af00      	add	r7, sp, #0
 8016e8a:	6078      	str	r0, [r7, #4]
 8016e8c:	460b      	mov	r3, r1
 8016e8e:	70fb      	strb	r3, [r7, #3]
 8016e90:	4613      	mov	r3, r2
 8016e92:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 8016e94:	2300      	movs	r3, #0
 8016e96:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 8016e98:	687b      	ldr	r3, [r7, #4]
 8016e9a:	2b00      	cmp	r3, #0
 8016e9c:	d101      	bne.n	8016ea2 <RegionCommonCountChannels+0x1e>
    {
        return 0;
 8016e9e:	2300      	movs	r3, #0
 8016ea0:	e018      	b.n	8016ed4 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8016ea2:	78fb      	ldrb	r3, [r7, #3]
 8016ea4:	73bb      	strb	r3, [r7, #14]
 8016ea6:	e010      	b.n	8016eca <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8016ea8:	7bbb      	ldrb	r3, [r7, #14]
 8016eaa:	005b      	lsls	r3, r3, #1
 8016eac:	687a      	ldr	r2, [r7, #4]
 8016eae:	4413      	add	r3, r2
 8016eb0:	881b      	ldrh	r3, [r3, #0]
 8016eb2:	2110      	movs	r1, #16
 8016eb4:	4618      	mov	r0, r3
 8016eb6:	f7ff fef9 	bl	8016cac <CountChannels>
 8016eba:	4603      	mov	r3, r0
 8016ebc:	461a      	mov	r2, r3
 8016ebe:	7bfb      	ldrb	r3, [r7, #15]
 8016ec0:	4413      	add	r3, r2
 8016ec2:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8016ec4:	7bbb      	ldrb	r3, [r7, #14]
 8016ec6:	3301      	adds	r3, #1
 8016ec8:	73bb      	strb	r3, [r7, #14]
 8016eca:	7bba      	ldrb	r2, [r7, #14]
 8016ecc:	78bb      	ldrb	r3, [r7, #2]
 8016ece:	429a      	cmp	r2, r3
 8016ed0:	d3ea      	bcc.n	8016ea8 <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 8016ed2:	7bfb      	ldrb	r3, [r7, #15]
}
 8016ed4:	4618      	mov	r0, r3
 8016ed6:	3710      	adds	r7, #16
 8016ed8:	46bd      	mov	sp, r7
 8016eda:	bd80      	pop	{r7, pc}

08016edc <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8016edc:	b480      	push	{r7}
 8016ede:	b087      	sub	sp, #28
 8016ee0:	af00      	add	r7, sp, #0
 8016ee2:	60f8      	str	r0, [r7, #12]
 8016ee4:	60b9      	str	r1, [r7, #8]
 8016ee6:	4613      	mov	r3, r2
 8016ee8:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8016eea:	68fb      	ldr	r3, [r7, #12]
 8016eec:	2b00      	cmp	r3, #0
 8016eee:	d016      	beq.n	8016f1e <RegionCommonChanMaskCopy+0x42>
 8016ef0:	68bb      	ldr	r3, [r7, #8]
 8016ef2:	2b00      	cmp	r3, #0
 8016ef4:	d013      	beq.n	8016f1e <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 8016ef6:	2300      	movs	r3, #0
 8016ef8:	75fb      	strb	r3, [r7, #23]
 8016efa:	e00c      	b.n	8016f16 <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8016efc:	7dfb      	ldrb	r3, [r7, #23]
 8016efe:	005b      	lsls	r3, r3, #1
 8016f00:	68ba      	ldr	r2, [r7, #8]
 8016f02:	441a      	add	r2, r3
 8016f04:	7dfb      	ldrb	r3, [r7, #23]
 8016f06:	005b      	lsls	r3, r3, #1
 8016f08:	68f9      	ldr	r1, [r7, #12]
 8016f0a:	440b      	add	r3, r1
 8016f0c:	8812      	ldrh	r2, [r2, #0]
 8016f0e:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 8016f10:	7dfb      	ldrb	r3, [r7, #23]
 8016f12:	3301      	adds	r3, #1
 8016f14:	75fb      	strb	r3, [r7, #23]
 8016f16:	7dfa      	ldrb	r2, [r7, #23]
 8016f18:	79fb      	ldrb	r3, [r7, #7]
 8016f1a:	429a      	cmp	r2, r3
 8016f1c:	d3ee      	bcc.n	8016efc <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 8016f1e:	bf00      	nop
 8016f20:	371c      	adds	r7, #28
 8016f22:	46bd      	mov	sp, r7
 8016f24:	bc80      	pop	{r7}
 8016f26:	4770      	bx	lr

08016f28 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8016f28:	b082      	sub	sp, #8
 8016f2a:	b580      	push	{r7, lr}
 8016f2c:	b086      	sub	sp, #24
 8016f2e:	af00      	add	r7, sp, #0
 8016f30:	60f8      	str	r0, [r7, #12]
 8016f32:	60b9      	str	r1, [r7, #8]
 8016f34:	627b      	str	r3, [r7, #36]	@ 0x24
 8016f36:	4613      	mov	r3, r2
 8016f38:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8016f3a:	79f9      	ldrb	r1, [r7, #7]
 8016f3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8016f40:	cb0c      	ldmia	r3, {r2, r3}
 8016f42:	68f8      	ldr	r0, [r7, #12]
 8016f44:	f7ff fd8b 	bl	8016a5e <GetDutyCycle>
 8016f48:	4603      	mov	r3, r0
 8016f4a:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8016f4c:	68fb      	ldr	r3, [r7, #12]
 8016f4e:	68da      	ldr	r2, [r3, #12]
 8016f50:	8afb      	ldrh	r3, [r7, #22]
 8016f52:	68b9      	ldr	r1, [r7, #8]
 8016f54:	fb01 f303 	mul.w	r3, r1, r3
 8016f58:	429a      	cmp	r2, r3
 8016f5a:	d909      	bls.n	8016f70 <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8016f5c:	68fb      	ldr	r3, [r7, #12]
 8016f5e:	68da      	ldr	r2, [r3, #12]
 8016f60:	8afb      	ldrh	r3, [r7, #22]
 8016f62:	68b9      	ldr	r1, [r7, #8]
 8016f64:	fb01 f303 	mul.w	r3, r1, r3
 8016f68:	1ad2      	subs	r2, r2, r3
 8016f6a:	68fb      	ldr	r3, [r7, #12]
 8016f6c:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 8016f6e:	e002      	b.n	8016f76 <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 8016f70:	68fb      	ldr	r3, [r7, #12]
 8016f72:	2200      	movs	r2, #0
 8016f74:	60da      	str	r2, [r3, #12]
}
 8016f76:	bf00      	nop
 8016f78:	3718      	adds	r7, #24
 8016f7a:	46bd      	mov	sp, r7
 8016f7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8016f80:	b002      	add	sp, #8
 8016f82:	4770      	bx	lr

08016f84 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8016f84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016f86:	b08f      	sub	sp, #60	@ 0x3c
 8016f88:	af04      	add	r7, sp, #16
 8016f8a:	6039      	str	r1, [r7, #0]
 8016f8c:	4611      	mov	r1, r2
 8016f8e:	461a      	mov	r2, r3
 8016f90:	4603      	mov	r3, r0
 8016f92:	71fb      	strb	r3, [r7, #7]
 8016f94:	460b      	mov	r3, r1
 8016f96:	71bb      	strb	r3, [r7, #6]
 8016f98:	4613      	mov	r3, r2
 8016f9a:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8016f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8016fa0:	627b      	str	r3, [r7, #36]	@ 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8016fa2:	f007 fb37 	bl	801e614 <UTIL_TIMER_GetCurrentTime>
 8016fa6:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 8016fa8:	2300      	movs	r3, #0
 8016faa:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 8016fac:	2301      	movs	r3, #1
 8016fae:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 8016fb0:	2300      	movs	r3, #0
 8016fb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 8016fb6:	2300      	movs	r3, #0
 8016fb8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8016fbc:	e0ba      	b.n	8017134 <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 8016fbe:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8016fc2:	4613      	mov	r3, r2
 8016fc4:	005b      	lsls	r3, r3, #1
 8016fc6:	4413      	add	r3, r2
 8016fc8:	00db      	lsls	r3, r3, #3
 8016fca:	461a      	mov	r2, r3
 8016fcc:	683b      	ldr	r3, [r7, #0]
 8016fce:	189c      	adds	r4, r3, r2
 8016fd0:	f897 6040 	ldrb.w	r6, [r7, #64]	@ 0x40
 8016fd4:	797a      	ldrb	r2, [r7, #5]
 8016fd6:	79fd      	ldrb	r5, [r7, #7]
 8016fd8:	69fb      	ldr	r3, [r7, #28]
 8016fda:	9302      	str	r3, [sp, #8]
 8016fdc:	46ec      	mov	ip, sp
 8016fde:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8016fe2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016fe6:	e88c 0003 	stmia.w	ip, {r0, r1}
 8016fea:	4633      	mov	r3, r6
 8016fec:	4629      	mov	r1, r5
 8016fee:	4620      	mov	r0, r4
 8016ff0:	f7ff fe22 	bl	8016c38 <UpdateTimeCredits>
 8016ff4:	4603      	mov	r3, r0
 8016ff6:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 8016ff8:	8afa      	ldrh	r2, [r7, #22]
 8016ffa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016ffc:	fb02 f303 	mul.w	r3, r2, r3
 8017000:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 8017002:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8017006:	4613      	mov	r3, r2
 8017008:	005b      	lsls	r3, r3, #1
 801700a:	4413      	add	r3, r2
 801700c:	00db      	lsls	r3, r3, #3
 801700e:	461a      	mov	r2, r3
 8017010:	683b      	ldr	r3, [r7, #0]
 8017012:	4413      	add	r3, r2
 8017014:	68db      	ldr	r3, [r3, #12]
 8017016:	69ba      	ldr	r2, [r7, #24]
 8017018:	429a      	cmp	r2, r3
 801701a:	d908      	bls.n	801702e <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 801701c:	797b      	ldrb	r3, [r7, #5]
 801701e:	f083 0301 	eor.w	r3, r3, #1
 8017022:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 8017024:	2b00      	cmp	r3, #0
 8017026:	d013      	beq.n	8017050 <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8017028:	79fb      	ldrb	r3, [r7, #7]
 801702a:	2b00      	cmp	r3, #0
 801702c:	d010      	beq.n	8017050 <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 801702e:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8017032:	4613      	mov	r3, r2
 8017034:	005b      	lsls	r3, r3, #1
 8017036:	4413      	add	r3, r2
 8017038:	00db      	lsls	r3, r3, #3
 801703a:	461a      	mov	r2, r3
 801703c:	683b      	ldr	r3, [r7, #0]
 801703e:	4413      	add	r3, r2
 8017040:	2201      	movs	r2, #1
 8017042:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 8017044:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8017048:	3301      	adds	r3, #1
 801704a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801704e:	e06c      	b.n	801712a <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 8017050:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8017054:	4613      	mov	r3, r2
 8017056:	005b      	lsls	r3, r3, #1
 8017058:	4413      	add	r3, r2
 801705a:	00db      	lsls	r3, r3, #3
 801705c:	461a      	mov	r2, r3
 801705e:	683b      	ldr	r3, [r7, #0]
 8017060:	4413      	add	r3, r2
 8017062:	2200      	movs	r2, #0
 8017064:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits >= creditCosts )
 8017066:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 801706a:	4613      	mov	r3, r2
 801706c:	005b      	lsls	r3, r3, #1
 801706e:	4413      	add	r3, r2
 8017070:	00db      	lsls	r3, r3, #3
 8017072:	461a      	mov	r2, r3
 8017074:	683b      	ldr	r3, [r7, #0]
 8017076:	4413      	add	r3, r2
 8017078:	691b      	ldr	r3, [r3, #16]
 801707a:	69ba      	ldr	r2, [r7, #24]
 801707c:	429a      	cmp	r2, r3
 801707e:	d815      	bhi.n	80170ac <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 8017080:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8017084:	4613      	mov	r3, r2
 8017086:	005b      	lsls	r3, r3, #1
 8017088:	4413      	add	r3, r2
 801708a:	00db      	lsls	r3, r3, #3
 801708c:	461a      	mov	r2, r3
 801708e:	683b      	ldr	r3, [r7, #0]
 8017090:	4413      	add	r3, r2
 8017092:	68db      	ldr	r3, [r3, #12]
 8017094:	69ba      	ldr	r2, [r7, #24]
 8017096:	1ad3      	subs	r3, r2, r3
 8017098:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801709a:	4293      	cmp	r3, r2
 801709c:	bf28      	it	cs
 801709e:	4613      	movcs	r3, r2
 80170a0:	627b      	str	r3, [r7, #36]	@ 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 80170a2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80170a6:	3301      	adds	r3, #1
 80170a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 80170ac:	79fb      	ldrb	r3, [r7, #7]
 80170ae:	f083 0301 	eor.w	r3, r3, #1
 80170b2:	b2db      	uxtb	r3, r3
 80170b4:	2b00      	cmp	r3, #0
 80170b6:	d038      	beq.n	801712a <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 80170b8:	2300      	movs	r3, #0
 80170ba:	60fb      	str	r3, [r7, #12]
 80170bc:	2300      	movs	r3, #0
 80170be:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 80170c0:	8afb      	ldrh	r3, [r7, #22]
 80170c2:	2b64      	cmp	r3, #100	@ 0x64
 80170c4:	d103      	bne.n	80170ce <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 80170c6:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 80170ca:	60fb      	str	r3, [r7, #12]
 80170cc:	e009      	b.n	80170e2 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 80170ce:	8afb      	ldrh	r3, [r7, #22]
 80170d0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80170d4:	d103      	bne.n	80170de <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 80170d6:	f649 23b0 	movw	r3, #39600	@ 0x9ab0
 80170da:	60fb      	str	r3, [r7, #12]
 80170dc:	e001      	b.n	80170e2 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 80170de:	4b1e      	ldr	r3, [pc, #120]	@ (8017158 <RegionCommonUpdateBandTimeOff+0x1d4>)
 80170e0:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 80170e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80170e4:	4a1c      	ldr	r2, [pc, #112]	@ (8017158 <RegionCommonUpdateBandTimeOff+0x1d4>)
 80170e6:	4293      	cmp	r3, r2
 80170e8:	d90e      	bls.n	8017108 <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 80170ea:	68fa      	ldr	r2, [r7, #12]
 80170ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80170ee:	f5a3 33f6 	sub.w	r3, r3, #125952	@ 0x1ec00
 80170f2:	3b30      	subs	r3, #48	@ 0x30
 80170f4:	4919      	ldr	r1, [pc, #100]	@ (801715c <RegionCommonUpdateBandTimeOff+0x1d8>)
 80170f6:	fba1 1303 	umull	r1, r3, r1, r3
 80170fa:	0c1b      	lsrs	r3, r3, #16
 80170fc:	3301      	adds	r3, #1
 80170fe:	4918      	ldr	r1, [pc, #96]	@ (8017160 <RegionCommonUpdateBandTimeOff+0x1dc>)
 8017100:	fb01 f303 	mul.w	r3, r1, r3
 8017104:	4413      	add	r3, r2
 8017106:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 8017108:	f107 000c 	add.w	r0, r7, #12
 801710c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801710e:	9300      	str	r3, [sp, #0]
 8017110:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017112:	f107 020c 	add.w	r2, r7, #12
 8017116:	ca06      	ldmia	r2, {r1, r2}
 8017118:	f006 fb95 	bl	801d846 <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 801711c:	f107 030c 	add.w	r3, r7, #12
 8017120:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017124:	f006 fc4e 	bl	801d9c4 <SysTimeToMs>
 8017128:	6278      	str	r0, [r7, #36]	@ 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 801712a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801712e:	3301      	adds	r3, #1
 8017130:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8017134:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8017138:	79bb      	ldrb	r3, [r7, #6]
 801713a:	429a      	cmp	r2, r3
 801713c:	f4ff af3f 	bcc.w	8016fbe <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }

    if( validBands == 0 )
 8017140:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8017144:	2b00      	cmp	r3, #0
 8017146:	d102      	bne.n	801714e <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 8017148:	f04f 33ff 	mov.w	r3, #4294967295
 801714c:	e000      	b.n	8017150 <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 801714e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8017150:	4618      	mov	r0, r3
 8017152:	372c      	adds	r7, #44	@ 0x2c
 8017154:	46bd      	mov	sp, r7
 8017156:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017158:	0001ec30 	.word	0x0001ec30
 801715c:	c22e4507 	.word	0xc22e4507
 8017160:	00015180 	.word	0x00015180

08017164 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8017164:	b480      	push	{r7}
 8017166:	b085      	sub	sp, #20
 8017168:	af00      	add	r7, sp, #0
 801716a:	6078      	str	r0, [r7, #4]
 801716c:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 801716e:	2300      	movs	r3, #0
 8017170:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8017172:	687b      	ldr	r3, [r7, #4]
 8017174:	781b      	ldrb	r3, [r3, #0]
 8017176:	2b03      	cmp	r3, #3
 8017178:	d13f      	bne.n	80171fa <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 801717a:	687b      	ldr	r3, [r7, #4]
 801717c:	3301      	adds	r3, #1
 801717e:	781b      	ldrb	r3, [r3, #0]
 8017180:	b25a      	sxtb	r2, r3
 8017182:	683b      	ldr	r3, [r7, #0]
 8017184:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8017186:	683b      	ldr	r3, [r7, #0]
 8017188:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801718c:	f003 030f 	and.w	r3, r3, #15
 8017190:	b25a      	sxtb	r2, r3
 8017192:	683b      	ldr	r3, [r7, #0]
 8017194:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8017196:	683b      	ldr	r3, [r7, #0]
 8017198:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801719c:	b2db      	uxtb	r3, r3
 801719e:	091b      	lsrs	r3, r3, #4
 80171a0:	b2db      	uxtb	r3, r3
 80171a2:	b25a      	sxtb	r2, r3
 80171a4:	683b      	ldr	r3, [r7, #0]
 80171a6:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 80171a8:	687b      	ldr	r3, [r7, #4]
 80171aa:	3302      	adds	r3, #2
 80171ac:	781b      	ldrb	r3, [r3, #0]
 80171ae:	461a      	mov	r2, r3
 80171b0:	683b      	ldr	r3, [r7, #0]
 80171b2:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 80171b4:	683b      	ldr	r3, [r7, #0]
 80171b6:	889b      	ldrh	r3, [r3, #4]
 80171b8:	b21a      	sxth	r2, r3
 80171ba:	687b      	ldr	r3, [r7, #4]
 80171bc:	3303      	adds	r3, #3
 80171be:	781b      	ldrb	r3, [r3, #0]
 80171c0:	021b      	lsls	r3, r3, #8
 80171c2:	b21b      	sxth	r3, r3
 80171c4:	4313      	orrs	r3, r2
 80171c6:	b21b      	sxth	r3, r3
 80171c8:	b29a      	uxth	r2, r3
 80171ca:	683b      	ldr	r3, [r7, #0]
 80171cc:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 80171ce:	687b      	ldr	r3, [r7, #4]
 80171d0:	791a      	ldrb	r2, [r3, #4]
 80171d2:	683b      	ldr	r3, [r7, #0]
 80171d4:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 80171d6:	683b      	ldr	r3, [r7, #0]
 80171d8:	781b      	ldrb	r3, [r3, #0]
 80171da:	091b      	lsrs	r3, r3, #4
 80171dc:	b2db      	uxtb	r3, r3
 80171de:	f003 0307 	and.w	r3, r3, #7
 80171e2:	b2da      	uxtb	r2, r3
 80171e4:	683b      	ldr	r3, [r7, #0]
 80171e6:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 80171e8:	683b      	ldr	r3, [r7, #0]
 80171ea:	781b      	ldrb	r3, [r3, #0]
 80171ec:	f003 030f 	and.w	r3, r3, #15
 80171f0:	b2da      	uxtb	r2, r3
 80171f2:	683b      	ldr	r3, [r7, #0]
 80171f4:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 80171f6:	2305      	movs	r3, #5
 80171f8:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 80171fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80171fc:	4618      	mov	r0, r3
 80171fe:	3714      	adds	r7, #20
 8017200:	46bd      	mov	sp, r7
 8017202:	bc80      	pop	{r7}
 8017204:	4770      	bx	lr

08017206 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 8017206:	b5b0      	push	{r4, r5, r7, lr}
 8017208:	b088      	sub	sp, #32
 801720a:	af02      	add	r7, sp, #8
 801720c:	60f8      	str	r0, [r7, #12]
 801720e:	60b9      	str	r1, [r7, #8]
 8017210:	607a      	str	r2, [r7, #4]
 8017212:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 8017214:	68fb      	ldr	r3, [r7, #12]
 8017216:	791b      	ldrb	r3, [r3, #4]
 8017218:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 801721a:	68fb      	ldr	r3, [r7, #12]
 801721c:	799b      	ldrb	r3, [r3, #6]
 801721e:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 8017220:	68fb      	ldr	r3, [r7, #12]
 8017222:	79db      	ldrb	r3, [r3, #7]
 8017224:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 8017226:	68fb      	ldr	r3, [r7, #12]
 8017228:	7a1b      	ldrb	r3, [r3, #8]
 801722a:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 801722c:	68fb      	ldr	r3, [r7, #12]
 801722e:	795b      	ldrb	r3, [r3, #5]
 8017230:	f083 0301 	eor.w	r3, r3, #1
 8017234:	b2db      	uxtb	r3, r3
 8017236:	2b00      	cmp	r3, #0
 8017238:	d008      	beq.n	801724c <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 801723a:	68fb      	ldr	r3, [r7, #12]
 801723c:	7adb      	ldrb	r3, [r3, #11]
 801723e:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 8017240:	68fb      	ldr	r3, [r7, #12]
 8017242:	7a5b      	ldrb	r3, [r3, #9]
 8017244:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 8017246:	68fb      	ldr	r3, [r7, #12]
 8017248:	7a9b      	ldrb	r3, [r3, #10]
 801724a:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 801724c:	7dfb      	ldrb	r3, [r7, #23]
 801724e:	2b00      	cmp	r3, #0
 8017250:	d04a      	beq.n	80172e8 <RegionCommonLinkAdrReqVerifyParams+0xe2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 8017252:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8017256:	2b0f      	cmp	r3, #15
 8017258:	d103      	bne.n	8017262 <RegionCommonLinkAdrReqVerifyParams+0x5c>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 801725a:	68fb      	ldr	r3, [r7, #12]
 801725c:	7a5b      	ldrb	r3, [r3, #9]
 801725e:	75bb      	strb	r3, [r7, #22]
 8017260:	e01d      	b.n	801729e <RegionCommonLinkAdrReqVerifyParams+0x98>
        }
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8017262:	68fb      	ldr	r3, [r7, #12]
 8017264:	7b18      	ldrb	r0, [r3, #12]
 8017266:	68fb      	ldr	r3, [r7, #12]
 8017268:	6919      	ldr	r1, [r3, #16]
 801726a:	68fb      	ldr	r3, [r7, #12]
 801726c:	f993 5014 	ldrsb.w	r5, [r3, #20]
 8017270:	68fb      	ldr	r3, [r7, #12]
 8017272:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8017276:	68fa      	ldr	r2, [r7, #12]
 8017278:	6992      	ldr	r2, [r2, #24]
 801727a:	f997 4016 	ldrsb.w	r4, [r7, #22]
 801727e:	9201      	str	r2, [sp, #4]
 8017280:	9300      	str	r3, [sp, #0]
 8017282:	462b      	mov	r3, r5
 8017284:	4622      	mov	r2, r4
 8017286:	f7ff fd3a 	bl	8016cfe <RegionCommonChanVerifyDr>
 801728a:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 801728c:	f083 0301 	eor.w	r3, r3, #1
 8017290:	b2db      	uxtb	r3, r3
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8017292:	2b00      	cmp	r3, #0
 8017294:	d003      	beq.n	801729e <RegionCommonLinkAdrReqVerifyParams+0x98>
        {
            status &= 0xFD; // Datarate KO
 8017296:	7dfb      	ldrb	r3, [r7, #23]
 8017298:	f023 0302 	bic.w	r3, r3, #2
 801729c:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( txPower == 0x0F )
 801729e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80172a2:	2b0f      	cmp	r3, #15
 80172a4:	d103      	bne.n	80172ae <RegionCommonLinkAdrReqVerifyParams+0xa8>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
 80172a6:	68fb      	ldr	r3, [r7, #12]
 80172a8:	7a9b      	ldrb	r3, [r3, #10]
 80172aa:	757b      	strb	r3, [r7, #21]
 80172ac:	e01c      	b.n	80172e8 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 80172ae:	68fb      	ldr	r3, [r7, #12]
 80172b0:	f993 101d 	ldrsb.w	r1, [r3, #29]
 80172b4:	68fb      	ldr	r3, [r7, #12]
 80172b6:	f993 201c 	ldrsb.w	r2, [r3, #28]
 80172ba:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80172be:	4618      	mov	r0, r3
 80172c0:	f7ff fd8f 	bl	8016de2 <RegionCommonValueInRange>
 80172c4:	4603      	mov	r3, r0
 80172c6:	2b00      	cmp	r3, #0
 80172c8:	d10e      	bne.n	80172e8 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 80172ca:	68fb      	ldr	r3, [r7, #12]
 80172cc:	f993 301d 	ldrsb.w	r3, [r3, #29]
 80172d0:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80172d4:	429a      	cmp	r2, r3
 80172d6:	da03      	bge.n	80172e0 <RegionCommonLinkAdrReqVerifyParams+0xda>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 80172d8:	68fb      	ldr	r3, [r7, #12]
 80172da:	7f5b      	ldrb	r3, [r3, #29]
 80172dc:	757b      	strb	r3, [r7, #21]
 80172de:	e003      	b.n	80172e8 <RegionCommonLinkAdrReqVerifyParams+0xe2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 80172e0:	7dfb      	ldrb	r3, [r7, #23]
 80172e2:	f023 0304 	bic.w	r3, r3, #4
 80172e6:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 80172e8:	7dfb      	ldrb	r3, [r7, #23]
 80172ea:	2b07      	cmp	r3, #7
 80172ec:	d105      	bne.n	80172fa <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        if( nbRepetitions == 0 )
 80172ee:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80172f2:	2b00      	cmp	r3, #0
 80172f4:	d101      	bne.n	80172fa <RegionCommonLinkAdrReqVerifyParams+0xf4>
        { // Set nbRep to the default value of 1.
            nbRepetitions = 1;
 80172f6:	2301      	movs	r3, #1
 80172f8:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 80172fa:	68bb      	ldr	r3, [r7, #8]
 80172fc:	7dba      	ldrb	r2, [r7, #22]
 80172fe:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 8017300:	687b      	ldr	r3, [r7, #4]
 8017302:	7d7a      	ldrb	r2, [r7, #21]
 8017304:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 8017306:	7d3a      	ldrb	r2, [r7, #20]
 8017308:	683b      	ldr	r3, [r7, #0]
 801730a:	701a      	strb	r2, [r3, #0]

    return status;
 801730c:	7dfb      	ldrb	r3, [r7, #23]
}
 801730e:	4618      	mov	r0, r3
 8017310:	3718      	adds	r7, #24
 8017312:	46bd      	mov	sp, r7
 8017314:	bdb0      	pop	{r4, r5, r7, pc}
	...

08017318 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 8017318:	b480      	push	{r7}
 801731a:	b083      	sub	sp, #12
 801731c:	af00      	add	r7, sp, #0
 801731e:	4603      	mov	r3, r0
 8017320:	6039      	str	r1, [r7, #0]
 8017322:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 8017324:	79fb      	ldrb	r3, [r7, #7]
 8017326:	4a06      	ldr	r2, [pc, #24]	@ (8017340 <RegionCommonComputeSymbolTimeLoRa+0x28>)
 8017328:	fa02 f303 	lsl.w	r3, r2, r3
 801732c:	461a      	mov	r2, r3
 801732e:	683b      	ldr	r3, [r7, #0]
 8017330:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8017334:	4618      	mov	r0, r3
 8017336:	370c      	adds	r7, #12
 8017338:	46bd      	mov	sp, r7
 801733a:	bc80      	pop	{r7}
 801733c:	4770      	bx	lr
 801733e:	bf00      	nop
 8017340:	000f4240 	.word	0x000f4240

08017344 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 8017344:	b480      	push	{r7}
 8017346:	b083      	sub	sp, #12
 8017348:	af00      	add	r7, sp, #0
 801734a:	4603      	mov	r3, r0
 801734c:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 801734e:	79fb      	ldrb	r3, [r7, #7]
 8017350:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8017354:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8017358:	4618      	mov	r0, r3
 801735a:	370c      	adds	r7, #12
 801735c:	46bd      	mov	sp, r7
 801735e:	bc80      	pop	{r7}
 8017360:	4770      	bx	lr
	...

08017364 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 8017364:	b480      	push	{r7}
 8017366:	b085      	sub	sp, #20
 8017368:	af00      	add	r7, sp, #0
 801736a:	60f8      	str	r0, [r7, #12]
 801736c:	607a      	str	r2, [r7, #4]
 801736e:	603b      	str	r3, [r7, #0]
 8017370:	460b      	mov	r3, r1
 8017372:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8017374:	7afa      	ldrb	r2, [r7, #11]
 8017376:	7afb      	ldrb	r3, [r7, #11]
 8017378:	3b04      	subs	r3, #4
 801737a:	4619      	mov	r1, r3
 801737c:	68fb      	ldr	r3, [r7, #12]
 801737e:	fb03 f101 	mul.w	r1, r3, r1
 8017382:	687b      	ldr	r3, [r7, #4]
 8017384:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8017388:	fb00 f303 	mul.w	r3, r0, r3
 801738c:	440b      	add	r3, r1
 801738e:	005b      	lsls	r3, r3, #1
 8017390:	2b00      	cmp	r3, #0
 8017392:	d013      	beq.n	80173bc <RegionCommonComputeRxWindowParameters+0x58>
 8017394:	7afb      	ldrb	r3, [r7, #11]
 8017396:	3b04      	subs	r3, #4
 8017398:	4619      	mov	r1, r3
 801739a:	68fb      	ldr	r3, [r7, #12]
 801739c:	fb03 f101 	mul.w	r1, r3, r1
 80173a0:	687b      	ldr	r3, [r7, #4]
 80173a2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80173a6:	fb00 f303 	mul.w	r3, r0, r3
 80173aa:	440b      	add	r3, r1
 80173ac:	0059      	lsls	r1, r3, #1
 80173ae:	68fb      	ldr	r3, [r7, #12]
 80173b0:	440b      	add	r3, r1
 80173b2:	1e59      	subs	r1, r3, #1
 80173b4:	68fb      	ldr	r3, [r7, #12]
 80173b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80173ba:	e00f      	b.n	80173dc <RegionCommonComputeRxWindowParameters+0x78>
 80173bc:	7afb      	ldrb	r3, [r7, #11]
 80173be:	3b04      	subs	r3, #4
 80173c0:	4619      	mov	r1, r3
 80173c2:	68fb      	ldr	r3, [r7, #12]
 80173c4:	fb03 f101 	mul.w	r1, r3, r1
 80173c8:	687b      	ldr	r3, [r7, #4]
 80173ca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80173ce:	fb00 f303 	mul.w	r3, r0, r3
 80173d2:	440b      	add	r3, r1
 80173d4:	0059      	lsls	r1, r3, #1
 80173d6:	68fb      	ldr	r3, [r7, #12]
 80173d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80173dc:	429a      	cmp	r2, r3
 80173de:	bf38      	it	cc
 80173e0:	461a      	movcc	r2, r3
 80173e2:	69bb      	ldr	r3, [r7, #24]
 80173e4:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 80173e6:	68fb      	ldr	r3, [r7, #12]
 80173e8:	009b      	lsls	r3, r3, #2
 80173ea:	4619      	mov	r1, r3
 80173ec:	69bb      	ldr	r3, [r7, #24]
 80173ee:	681b      	ldr	r3, [r3, #0]
 80173f0:	68fa      	ldr	r2, [r7, #12]
 80173f2:	fb02 f303 	mul.w	r3, r2, r3
 80173f6:	2b00      	cmp	r3, #0
 80173f8:	d007      	beq.n	801740a <RegionCommonComputeRxWindowParameters+0xa6>
 80173fa:	69bb      	ldr	r3, [r7, #24]
 80173fc:	681b      	ldr	r3, [r3, #0]
 80173fe:	68fa      	ldr	r2, [r7, #12]
 8017400:	fb02 f303 	mul.w	r3, r2, r3
 8017404:	3301      	adds	r3, #1
 8017406:	085b      	lsrs	r3, r3, #1
 8017408:	e005      	b.n	8017416 <RegionCommonComputeRxWindowParameters+0xb2>
 801740a:	69bb      	ldr	r3, [r7, #24]
 801740c:	681b      	ldr	r3, [r3, #0]
 801740e:	68fa      	ldr	r2, [r7, #12]
 8017410:	fb02 f303 	mul.w	r3, r2, r3
 8017414:	085b      	lsrs	r3, r3, #1
 8017416:	1acb      	subs	r3, r1, r3
 8017418:	683a      	ldr	r2, [r7, #0]
 801741a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801741e:	fb01 f202 	mul.w	r2, r1, r2
 8017422:	1a9b      	subs	r3, r3, r2
 8017424:	2b00      	cmp	r3, #0
 8017426:	dd27      	ble.n	8017478 <RegionCommonComputeRxWindowParameters+0x114>
 8017428:	68fb      	ldr	r3, [r7, #12]
 801742a:	009b      	lsls	r3, r3, #2
 801742c:	4619      	mov	r1, r3
 801742e:	69bb      	ldr	r3, [r7, #24]
 8017430:	681b      	ldr	r3, [r3, #0]
 8017432:	68fa      	ldr	r2, [r7, #12]
 8017434:	fb02 f303 	mul.w	r3, r2, r3
 8017438:	2b00      	cmp	r3, #0
 801743a:	d007      	beq.n	801744c <RegionCommonComputeRxWindowParameters+0xe8>
 801743c:	69bb      	ldr	r3, [r7, #24]
 801743e:	681b      	ldr	r3, [r3, #0]
 8017440:	68fa      	ldr	r2, [r7, #12]
 8017442:	fb02 f303 	mul.w	r3, r2, r3
 8017446:	3301      	adds	r3, #1
 8017448:	085b      	lsrs	r3, r3, #1
 801744a:	e005      	b.n	8017458 <RegionCommonComputeRxWindowParameters+0xf4>
 801744c:	69bb      	ldr	r3, [r7, #24]
 801744e:	681b      	ldr	r3, [r3, #0]
 8017450:	68fa      	ldr	r2, [r7, #12]
 8017452:	fb02 f303 	mul.w	r3, r2, r3
 8017456:	085b      	lsrs	r3, r3, #1
 8017458:	1acb      	subs	r3, r1, r3
 801745a:	683a      	ldr	r2, [r7, #0]
 801745c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8017460:	fb01 f202 	mul.w	r2, r1, r2
 8017464:	1a9b      	subs	r3, r3, r2
 8017466:	f203 33e7 	addw	r3, r3, #999	@ 0x3e7
 801746a:	4a19      	ldr	r2, [pc, #100]	@ (80174d0 <RegionCommonComputeRxWindowParameters+0x16c>)
 801746c:	fb82 1203 	smull	r1, r2, r2, r3
 8017470:	1192      	asrs	r2, r2, #6
 8017472:	17db      	asrs	r3, r3, #31
 8017474:	1ad3      	subs	r3, r2, r3
 8017476:	e024      	b.n	80174c2 <RegionCommonComputeRxWindowParameters+0x15e>
 8017478:	68fb      	ldr	r3, [r7, #12]
 801747a:	009b      	lsls	r3, r3, #2
 801747c:	4619      	mov	r1, r3
 801747e:	69bb      	ldr	r3, [r7, #24]
 8017480:	681b      	ldr	r3, [r3, #0]
 8017482:	68fa      	ldr	r2, [r7, #12]
 8017484:	fb02 f303 	mul.w	r3, r2, r3
 8017488:	2b00      	cmp	r3, #0
 801748a:	d007      	beq.n	801749c <RegionCommonComputeRxWindowParameters+0x138>
 801748c:	69bb      	ldr	r3, [r7, #24]
 801748e:	681b      	ldr	r3, [r3, #0]
 8017490:	68fa      	ldr	r2, [r7, #12]
 8017492:	fb02 f303 	mul.w	r3, r2, r3
 8017496:	3301      	adds	r3, #1
 8017498:	085b      	lsrs	r3, r3, #1
 801749a:	e005      	b.n	80174a8 <RegionCommonComputeRxWindowParameters+0x144>
 801749c:	69bb      	ldr	r3, [r7, #24]
 801749e:	681b      	ldr	r3, [r3, #0]
 80174a0:	68fa      	ldr	r2, [r7, #12]
 80174a2:	fb02 f303 	mul.w	r3, r2, r3
 80174a6:	085b      	lsrs	r3, r3, #1
 80174a8:	1acb      	subs	r3, r1, r3
 80174aa:	683a      	ldr	r2, [r7, #0]
 80174ac:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80174b0:	fb01 f202 	mul.w	r2, r1, r2
 80174b4:	1a9b      	subs	r3, r3, r2
 80174b6:	4a06      	ldr	r2, [pc, #24]	@ (80174d0 <RegionCommonComputeRxWindowParameters+0x16c>)
 80174b8:	fb82 1203 	smull	r1, r2, r2, r3
 80174bc:	1192      	asrs	r2, r2, #6
 80174be:	17db      	asrs	r3, r3, #31
 80174c0:	1ad3      	subs	r3, r2, r3
 80174c2:	69fa      	ldr	r2, [r7, #28]
 80174c4:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 80174c6:	bf00      	nop
 80174c8:	3714      	adds	r7, #20
 80174ca:	46bd      	mov	sp, r7
 80174cc:	bc80      	pop	{r7}
 80174ce:	4770      	bx	lr
 80174d0:	10624dd3 	.word	0x10624dd3

080174d4 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 80174d4:	b580      	push	{r7, lr}
 80174d6:	b086      	sub	sp, #24
 80174d8:	af00      	add	r7, sp, #0
 80174da:	4603      	mov	r3, r0
 80174dc:	60b9      	str	r1, [r7, #8]
 80174de:	607a      	str	r2, [r7, #4]
 80174e0:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 80174e2:	2300      	movs	r3, #0
 80174e4:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 80174e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80174ea:	005b      	lsls	r3, r3, #1
 80174ec:	4618      	mov	r0, r3
 80174ee:	f7e9 fbcf 	bl	8000c90 <__aeabi_ui2f>
 80174f2:	4603      	mov	r3, r0
 80174f4:	4619      	mov	r1, r3
 80174f6:	68b8      	ldr	r0, [r7, #8]
 80174f8:	f7e9 fb18 	bl	8000b2c <__aeabi_fsub>
 80174fc:	4603      	mov	r3, r0
 80174fe:	6879      	ldr	r1, [r7, #4]
 8017500:	4618      	mov	r0, r3
 8017502:	f7e9 fb13 	bl	8000b2c <__aeabi_fsub>
 8017506:	4603      	mov	r3, r0
 8017508:	4618      	mov	r0, r3
 801750a:	f7e8 ffa1 	bl	8000450 <__aeabi_f2d>
 801750e:	4602      	mov	r2, r0
 8017510:	460b      	mov	r3, r1
 8017512:	4610      	mov	r0, r2
 8017514:	4619      	mov	r1, r3
 8017516:	f007 fc13 	bl	801ed40 <floor>
 801751a:	4602      	mov	r2, r0
 801751c:	460b      	mov	r3, r1
 801751e:	4610      	mov	r0, r2
 8017520:	4619      	mov	r1, r3
 8017522:	f7e9 fa87 	bl	8000a34 <__aeabi_d2iz>
 8017526:	4603      	mov	r3, r0
 8017528:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 801752a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801752e:	4618      	mov	r0, r3
 8017530:	3718      	adds	r7, #24
 8017532:	46bd      	mov	sp, r7
 8017534:	bd80      	pop	{r7, pc}

08017536 <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 8017536:	b590      	push	{r4, r7, lr}
 8017538:	b087      	sub	sp, #28
 801753a:	af00      	add	r7, sp, #0
 801753c:	60f8      	str	r0, [r7, #12]
 801753e:	60b9      	str	r1, [r7, #8]
 8017540:	607a      	str	r2, [r7, #4]
 8017542:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 8017544:	2300      	movs	r3, #0
 8017546:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 8017548:	2300      	movs	r3, #0
 801754a:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 801754c:	2300      	movs	r3, #0
 801754e:	757b      	strb	r3, [r7, #21]
 8017550:	2300      	movs	r3, #0
 8017552:	753b      	strb	r3, [r7, #20]
 8017554:	e09c      	b.n	8017690 <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8017556:	2300      	movs	r3, #0
 8017558:	74fb      	strb	r3, [r7, #19]
 801755a:	e08f      	b.n	801767c <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 801755c:	68fb      	ldr	r3, [r7, #12]
 801755e:	685a      	ldr	r2, [r3, #4]
 8017560:	7d3b      	ldrb	r3, [r7, #20]
 8017562:	005b      	lsls	r3, r3, #1
 8017564:	4413      	add	r3, r2
 8017566:	881b      	ldrh	r3, [r3, #0]
 8017568:	461a      	mov	r2, r3
 801756a:	7cfb      	ldrb	r3, [r7, #19]
 801756c:	fa42 f303 	asr.w	r3, r2, r3
 8017570:	f003 0301 	and.w	r3, r3, #1
 8017574:	2b00      	cmp	r3, #0
 8017576:	d07e      	beq.n	8017676 <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8017578:	68fb      	ldr	r3, [r7, #12]
 801757a:	689a      	ldr	r2, [r3, #8]
 801757c:	7d79      	ldrb	r1, [r7, #21]
 801757e:	7cfb      	ldrb	r3, [r7, #19]
 8017580:	440b      	add	r3, r1
 8017582:	4619      	mov	r1, r3
 8017584:	460b      	mov	r3, r1
 8017586:	005b      	lsls	r3, r3, #1
 8017588:	440b      	add	r3, r1
 801758a:	009b      	lsls	r3, r3, #2
 801758c:	4413      	add	r3, r2
 801758e:	681b      	ldr	r3, [r3, #0]
 8017590:	2b00      	cmp	r3, #0
 8017592:	d06b      	beq.n	801766c <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8017594:	68fb      	ldr	r3, [r7, #12]
 8017596:	781b      	ldrb	r3, [r3, #0]
 8017598:	f083 0301 	eor.w	r3, r3, #1
 801759c:	b2db      	uxtb	r3, r3
 801759e:	2b00      	cmp	r3, #0
 80175a0:	d011      	beq.n	80175c6 <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 80175a2:	68fb      	ldr	r3, [r7, #12]
 80175a4:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 80175a6:	2b00      	cmp	r3, #0
 80175a8:	d00d      	beq.n	80175c6 <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 80175aa:	68fb      	ldr	r3, [r7, #12]
 80175ac:	695a      	ldr	r2, [r3, #20]
 80175ae:	7d3b      	ldrb	r3, [r7, #20]
 80175b0:	005b      	lsls	r3, r3, #1
 80175b2:	4413      	add	r3, r2
 80175b4:	881b      	ldrh	r3, [r3, #0]
 80175b6:	461a      	mov	r2, r3
 80175b8:	7cfb      	ldrb	r3, [r7, #19]
 80175ba:	fa42 f303 	asr.w	r3, r2, r3
 80175be:	f003 0301 	and.w	r3, r3, #1
 80175c2:	2b00      	cmp	r3, #0
 80175c4:	d054      	beq.n	8017670 <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 80175c6:	68fb      	ldr	r3, [r7, #12]
 80175c8:	785b      	ldrb	r3, [r3, #1]
 80175ca:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 80175cc:	68fb      	ldr	r3, [r7, #12]
 80175ce:	689a      	ldr	r2, [r3, #8]
 80175d0:	7d79      	ldrb	r1, [r7, #21]
 80175d2:	7cfb      	ldrb	r3, [r7, #19]
 80175d4:	440b      	add	r3, r1
 80175d6:	4619      	mov	r1, r3
 80175d8:	460b      	mov	r3, r1
 80175da:	005b      	lsls	r3, r3, #1
 80175dc:	440b      	add	r3, r1
 80175de:	009b      	lsls	r3, r3, #2
 80175e0:	4413      	add	r3, r2
 80175e2:	7a1b      	ldrb	r3, [r3, #8]
 80175e4:	f343 0303 	sbfx	r3, r3, #0, #4
 80175e8:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 80175ea:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 80175ec:	68fb      	ldr	r3, [r7, #12]
 80175ee:	689a      	ldr	r2, [r3, #8]
 80175f0:	7d79      	ldrb	r1, [r7, #21]
 80175f2:	7cfb      	ldrb	r3, [r7, #19]
 80175f4:	440b      	add	r3, r1
 80175f6:	4619      	mov	r1, r3
 80175f8:	460b      	mov	r3, r1
 80175fa:	005b      	lsls	r3, r3, #1
 80175fc:	440b      	add	r3, r1
 80175fe:	009b      	lsls	r3, r3, #2
 8017600:	4413      	add	r3, r2
 8017602:	7a1b      	ldrb	r3, [r3, #8]
 8017604:	f343 1303 	sbfx	r3, r3, #4, #4
 8017608:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801760a:	461a      	mov	r2, r3
 801760c:	4621      	mov	r1, r4
 801760e:	f7ff fbe8 	bl	8016de2 <RegionCommonValueInRange>
 8017612:	4603      	mov	r3, r0
 8017614:	2b00      	cmp	r3, #0
 8017616:	d02d      	beq.n	8017674 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 8017618:	68fb      	ldr	r3, [r7, #12]
 801761a:	68da      	ldr	r2, [r3, #12]
 801761c:	68fb      	ldr	r3, [r7, #12]
 801761e:	6899      	ldr	r1, [r3, #8]
 8017620:	7d78      	ldrb	r0, [r7, #21]
 8017622:	7cfb      	ldrb	r3, [r7, #19]
 8017624:	4403      	add	r3, r0
 8017626:	4618      	mov	r0, r3
 8017628:	4603      	mov	r3, r0
 801762a:	005b      	lsls	r3, r3, #1
 801762c:	4403      	add	r3, r0
 801762e:	009b      	lsls	r3, r3, #2
 8017630:	440b      	add	r3, r1
 8017632:	7a5b      	ldrb	r3, [r3, #9]
 8017634:	4619      	mov	r1, r3
 8017636:	460b      	mov	r3, r1
 8017638:	005b      	lsls	r3, r3, #1
 801763a:	440b      	add	r3, r1
 801763c:	00db      	lsls	r3, r3, #3
 801763e:	4413      	add	r3, r2
 8017640:	7d1b      	ldrb	r3, [r3, #20]
 8017642:	f083 0301 	eor.w	r3, r3, #1
 8017646:	b2db      	uxtb	r3, r3
 8017648:	2b00      	cmp	r3, #0
 801764a:	d003      	beq.n	8017654 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 801764c:	7dbb      	ldrb	r3, [r7, #22]
 801764e:	3301      	adds	r3, #1
 8017650:	75bb      	strb	r3, [r7, #22]
                    continue;
 8017652:	e010      	b.n	8017676 <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 8017654:	7dfb      	ldrb	r3, [r7, #23]
 8017656:	1c5a      	adds	r2, r3, #1
 8017658:	75fa      	strb	r2, [r7, #23]
 801765a:	461a      	mov	r2, r3
 801765c:	68bb      	ldr	r3, [r7, #8]
 801765e:	4413      	add	r3, r2
 8017660:	7d79      	ldrb	r1, [r7, #21]
 8017662:	7cfa      	ldrb	r2, [r7, #19]
 8017664:	440a      	add	r2, r1
 8017666:	b2d2      	uxtb	r2, r2
 8017668:	701a      	strb	r2, [r3, #0]
 801766a:	e004      	b.n	8017676 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 801766c:	bf00      	nop
 801766e:	e002      	b.n	8017676 <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 8017670:	bf00      	nop
 8017672:	e000      	b.n	8017676 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8017674:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 8017676:	7cfb      	ldrb	r3, [r7, #19]
 8017678:	3301      	adds	r3, #1
 801767a:	74fb      	strb	r3, [r7, #19]
 801767c:	7cfb      	ldrb	r3, [r7, #19]
 801767e:	2b0f      	cmp	r3, #15
 8017680:	f67f af6c 	bls.w	801755c <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8017684:	7d7b      	ldrb	r3, [r7, #21]
 8017686:	3310      	adds	r3, #16
 8017688:	757b      	strb	r3, [r7, #21]
 801768a:	7d3b      	ldrb	r3, [r7, #20]
 801768c:	3301      	adds	r3, #1
 801768e:	753b      	strb	r3, [r7, #20]
 8017690:	7d7b      	ldrb	r3, [r7, #21]
 8017692:	b29a      	uxth	r2, r3
 8017694:	68fb      	ldr	r3, [r7, #12]
 8017696:	8a1b      	ldrh	r3, [r3, #16]
 8017698:	429a      	cmp	r2, r3
 801769a:	f4ff af5c 	bcc.w	8017556 <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 801769e:	687b      	ldr	r3, [r7, #4]
 80176a0:	7dfa      	ldrb	r2, [r7, #23]
 80176a2:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 80176a4:	683b      	ldr	r3, [r7, #0]
 80176a6:	7dba      	ldrb	r2, [r7, #22]
 80176a8:	701a      	strb	r2, [r3, #0]
}
 80176aa:	bf00      	nop
 80176ac:	371c      	adds	r7, #28
 80176ae:	46bd      	mov	sp, r7
 80176b0:	bd90      	pop	{r4, r7, pc}

080176b2 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 80176b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80176b4:	b08b      	sub	sp, #44	@ 0x2c
 80176b6:	af04      	add	r7, sp, #16
 80176b8:	60f8      	str	r0, [r7, #12]
 80176ba:	60b9      	str	r1, [r7, #8]
 80176bc:	607a      	str	r2, [r7, #4]
 80176be:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 80176c0:	68fb      	ldr	r3, [r7, #12]
 80176c2:	685b      	ldr	r3, [r3, #4]
 80176c4:	4618      	mov	r0, r3
 80176c6:	f006 ffb7 	bl	801e638 <UTIL_TIMER_GetElapsedTime>
 80176ca:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 80176cc:	68fb      	ldr	r3, [r7, #12]
 80176ce:	681a      	ldr	r2, [r3, #0]
 80176d0:	697b      	ldr	r3, [r7, #20]
 80176d2:	1ad2      	subs	r2, r2, r3
 80176d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80176d6:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 80176d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80176da:	2201      	movs	r2, #1
 80176dc:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 80176de:	683b      	ldr	r3, [r7, #0]
 80176e0:	2200      	movs	r2, #0
 80176e2:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 80176e4:	68fb      	ldr	r3, [r7, #12]
 80176e6:	685b      	ldr	r3, [r3, #4]
 80176e8:	2b00      	cmp	r3, #0
 80176ea:	d004      	beq.n	80176f6 <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 80176ec:	68fb      	ldr	r3, [r7, #12]
 80176ee:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 80176f0:	697a      	ldr	r2, [r7, #20]
 80176f2:	429a      	cmp	r2, r3
 80176f4:	d32b      	bcc.n	801774e <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 80176f6:	68bb      	ldr	r3, [r7, #8]
 80176f8:	2200      	movs	r2, #0
 80176fa:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 80176fc:	68fb      	ldr	r3, [r7, #12]
 80176fe:	69db      	ldr	r3, [r3, #28]
 8017700:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 8017702:	68fb      	ldr	r3, [r7, #12]
 8017704:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8017706:	68dd      	ldr	r5, [r3, #12]
 8017708:	68fb      	ldr	r3, [r7, #12]
 801770a:	7a5e      	ldrb	r6, [r3, #9]
 801770c:	68fb      	ldr	r3, [r7, #12]
 801770e:	f893 c008 	ldrb.w	ip, [r3, #8]
 8017712:	68fb      	ldr	r3, [r7, #12]
 8017714:	7d1b      	ldrb	r3, [r3, #20]
 8017716:	68fa      	ldr	r2, [r7, #12]
 8017718:	6992      	ldr	r2, [r2, #24]
 801771a:	9203      	str	r2, [sp, #12]
 801771c:	68fa      	ldr	r2, [r7, #12]
 801771e:	f10d 0e04 	add.w	lr, sp, #4
 8017722:	320c      	adds	r2, #12
 8017724:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017728:	e88e 0003 	stmia.w	lr, {r0, r1}
 801772c:	9300      	str	r3, [sp, #0]
 801772e:	4663      	mov	r3, ip
 8017730:	4632      	mov	r2, r6
 8017732:	4629      	mov	r1, r5
 8017734:	4620      	mov	r0, r4
 8017736:	f7ff fc25 	bl	8016f84 <RegionCommonUpdateBandTimeOff>
 801773a:	4602      	mov	r2, r0
 801773c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801773e:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 8017740:	68fb      	ldr	r3, [r7, #12]
 8017742:	69d8      	ldr	r0, [r3, #28]
 8017744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017746:	683a      	ldr	r2, [r7, #0]
 8017748:	6879      	ldr	r1, [r7, #4]
 801774a:	f7ff fef4 	bl	8017536 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 801774e:	683b      	ldr	r3, [r7, #0]
 8017750:	781b      	ldrb	r3, [r3, #0]
 8017752:	2b00      	cmp	r3, #0
 8017754:	d004      	beq.n	8017760 <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 8017756:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017758:	2200      	movs	r2, #0
 801775a:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 801775c:	2300      	movs	r3, #0
 801775e:	e006      	b.n	801776e <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 8017760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017762:	781b      	ldrb	r3, [r3, #0]
 8017764:	2b00      	cmp	r3, #0
 8017766:	d001      	beq.n	801776c <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8017768:	230b      	movs	r3, #11
 801776a:	e000      	b.n	801776e <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 801776c:	230c      	movs	r3, #12
    }
}
 801776e:	4618      	mov	r0, r3
 8017770:	371c      	adds	r7, #28
 8017772:	46bd      	mov	sp, r7
 8017774:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017776 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 8017776:	b5b0      	push	{r4, r5, r7, lr}
 8017778:	b086      	sub	sp, #24
 801777a:	af02      	add	r7, sp, #8
 801777c:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 801777e:	687b      	ldr	r3, [r7, #4]
 8017780:	781b      	ldrb	r3, [r3, #0]
 8017782:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 8017784:	687b      	ldr	r3, [r7, #4]
 8017786:	f993 2000 	ldrsb.w	r2, [r3]
 801778a:	687b      	ldr	r3, [r7, #4]
 801778c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8017790:	429a      	cmp	r2, r3
 8017792:	d103      	bne.n	801779c <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 8017794:	687b      	ldr	r3, [r7, #4]
 8017796:	f993 3002 	ldrsb.w	r3, [r3, #2]
 801779a:	e026      	b.n	80177ea <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 801779c:	7bfb      	ldrb	r3, [r7, #15]
 801779e:	3b01      	subs	r3, #1
 80177a0:	b2db      	uxtb	r3, r3
 80177a2:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 80177a4:	687b      	ldr	r3, [r7, #4]
 80177a6:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80177aa:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80177ae:	429a      	cmp	r2, r3
 80177b0:	d019      	beq.n	80177e6 <RegionCommonGetNextLowerTxDr+0x70>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 80177b2:	687b      	ldr	r3, [r7, #4]
 80177b4:	78d8      	ldrb	r0, [r3, #3]
 80177b6:	687b      	ldr	r3, [r7, #4]
 80177b8:	6859      	ldr	r1, [r3, #4]
 80177ba:	687b      	ldr	r3, [r7, #4]
 80177bc:	f993 5002 	ldrsb.w	r5, [r3, #2]
 80177c0:	687b      	ldr	r3, [r7, #4]
 80177c2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80177c6:	687a      	ldr	r2, [r7, #4]
 80177c8:	6892      	ldr	r2, [r2, #8]
 80177ca:	f997 400f 	ldrsb.w	r4, [r7, #15]
 80177ce:	9201      	str	r2, [sp, #4]
 80177d0:	9300      	str	r3, [sp, #0]
 80177d2:	462b      	mov	r3, r5
 80177d4:	4622      	mov	r2, r4
 80177d6:	f7ff fa92 	bl	8016cfe <RegionCommonChanVerifyDr>
 80177da:	4603      	mov	r3, r0
 80177dc:	f083 0301 	eor.w	r3, r3, #1
 80177e0:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 80177e2:	2b00      	cmp	r3, #0
 80177e4:	d1da      	bne.n	801779c <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 80177e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 80177ea:	4618      	mov	r0, r3
 80177ec:	3710      	adds	r7, #16
 80177ee:	46bd      	mov	sp, r7
 80177f0:	bdb0      	pop	{r4, r5, r7, pc}

080177f2 <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 80177f2:	b480      	push	{r7}
 80177f4:	b083      	sub	sp, #12
 80177f6:	af00      	add	r7, sp, #0
 80177f8:	4603      	mov	r3, r0
 80177fa:	460a      	mov	r2, r1
 80177fc:	71fb      	strb	r3, [r7, #7]
 80177fe:	4613      	mov	r3, r2
 8017800:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 8017802:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8017806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801780a:	4293      	cmp	r3, r2
 801780c:	bfb8      	it	lt
 801780e:	4613      	movlt	r3, r2
 8017810:	b25b      	sxtb	r3, r3
}
 8017812:	4618      	mov	r0, r3
 8017814:	370c      	adds	r7, #12
 8017816:	46bd      	mov	sp, r7
 8017818:	bc80      	pop	{r7}
 801781a:	4770      	bx	lr

0801781c <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 801781c:	b480      	push	{r7}
 801781e:	b083      	sub	sp, #12
 8017820:	af00      	add	r7, sp, #0
 8017822:	6078      	str	r0, [r7, #4]
 8017824:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 8017826:	687b      	ldr	r3, [r7, #4]
 8017828:	009b      	lsls	r3, r3, #2
 801782a:	683a      	ldr	r2, [r7, #0]
 801782c:	4413      	add	r3, r2
 801782e:	681b      	ldr	r3, [r3, #0]
 8017830:	4a07      	ldr	r2, [pc, #28]	@ (8017850 <RegionCommonGetBandwidth+0x34>)
 8017832:	4293      	cmp	r3, r2
 8017834:	d004      	beq.n	8017840 <RegionCommonGetBandwidth+0x24>
 8017836:	4a07      	ldr	r2, [pc, #28]	@ (8017854 <RegionCommonGetBandwidth+0x38>)
 8017838:	4293      	cmp	r3, r2
 801783a:	d003      	beq.n	8017844 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 801783c:	2300      	movs	r3, #0
 801783e:	e002      	b.n	8017846 <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 8017840:	2301      	movs	r3, #1
 8017842:	e000      	b.n	8017846 <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 8017844:	2302      	movs	r3, #2
    }
}
 8017846:	4618      	mov	r0, r3
 8017848:	370c      	adds	r7, #12
 801784a:	46bd      	mov	sp, r7
 801784c:	bc80      	pop	{r7}
 801784e:	4770      	bx	lr
 8017850:	0003d090 	.word	0x0003d090
 8017854:	0007a120 	.word	0x0007a120

08017858 <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 8017858:	b580      	push	{r7, lr}
 801785a:	b086      	sub	sp, #24
 801785c:	af04      	add	r7, sp, #16
 801785e:	4603      	mov	r3, r0
 8017860:	6039      	str	r1, [r7, #0]
 8017862:	71fb      	strb	r3, [r7, #7]
 8017864:	4613      	mov	r3, r2
 8017866:	71bb      	strb	r3, [r7, #6]
    if ( rxSlot < RX_SLOT_NONE )
 8017868:	79fb      	ldrb	r3, [r7, #7]
 801786a:	2b05      	cmp	r3, #5
 801786c:	d810      	bhi.n	8017890 <RegionCommonRxConfigPrint+0x38>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 801786e:	79fb      	ldrb	r3, [r7, #7]
 8017870:	4a0f      	ldr	r2, [pc, #60]	@ (80178b0 <RegionCommonRxConfigPrint+0x58>)
 8017872:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017876:	f997 2006 	ldrsb.w	r2, [r7, #6]
 801787a:	9202      	str	r2, [sp, #8]
 801787c:	683a      	ldr	r2, [r7, #0]
 801787e:	9201      	str	r2, [sp, #4]
 8017880:	9300      	str	r3, [sp, #0]
 8017882:	4b0c      	ldr	r3, [pc, #48]	@ (80178b4 <RegionCommonRxConfigPrint+0x5c>)
 8017884:	2201      	movs	r2, #1
 8017886:	2100      	movs	r1, #0
 8017888:	2002      	movs	r0, #2
 801788a:	f006 ffb3 	bl	801e7f4 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 801788e:	e00a      	b.n	80178a6 <RegionCommonRxConfigPrint+0x4e>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 8017890:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8017894:	9301      	str	r3, [sp, #4]
 8017896:	683b      	ldr	r3, [r7, #0]
 8017898:	9300      	str	r3, [sp, #0]
 801789a:	4b07      	ldr	r3, [pc, #28]	@ (80178b8 <RegionCommonRxConfigPrint+0x60>)
 801789c:	2201      	movs	r2, #1
 801789e:	2100      	movs	r1, #0
 80178a0:	2002      	movs	r0, #2
 80178a2:	f006 ffa7 	bl	801e7f4 <UTIL_ADV_TRACE_COND_FSend>
}
 80178a6:	bf00      	nop
 80178a8:	3708      	adds	r7, #8
 80178aa:	46bd      	mov	sp, r7
 80178ac:	bd80      	pop	{r7, pc}
 80178ae:	bf00      	nop
 80178b0:	2000011c 	.word	0x2000011c
 80178b4:	0801f5e8 	.word	0x0801f5e8
 80178b8:	0801f608 	.word	0x0801f608

080178bc <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 80178bc:	b580      	push	{r7, lr}
 80178be:	b084      	sub	sp, #16
 80178c0:	af02      	add	r7, sp, #8
 80178c2:	6078      	str	r0, [r7, #4]
 80178c4:	460b      	mov	r3, r1
 80178c6:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 80178c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80178cc:	9301      	str	r3, [sp, #4]
 80178ce:	687b      	ldr	r3, [r7, #4]
 80178d0:	9300      	str	r3, [sp, #0]
 80178d2:	4b05      	ldr	r3, [pc, #20]	@ (80178e8 <RegionCommonTxConfigPrint+0x2c>)
 80178d4:	2201      	movs	r2, #1
 80178d6:	2100      	movs	r1, #0
 80178d8:	2002      	movs	r0, #2
 80178da:	f006 ff8b 	bl	801e7f4 <UTIL_ADV_TRACE_COND_FSend>
}
 80178de:	bf00      	nop
 80178e0:	3708      	adds	r7, #8
 80178e2:	46bd      	mov	sp, r7
 80178e4:	bd80      	pop	{r7, pc}
 80178e6:	bf00      	nop
 80178e8:	0801f624 	.word	0x0801f624

080178ec <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 80178ec:	b580      	push	{r7, lr}
 80178ee:	b082      	sub	sp, #8
 80178f0:	af00      	add	r7, sp, #0
 80178f2:	6078      	str	r0, [r7, #4]
 80178f4:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 80178f6:	4b2d      	ldr	r3, [pc, #180]	@ (80179ac <VerifyRfFreq+0xc0>)
 80178f8:	6a1b      	ldr	r3, [r3, #32]
 80178fa:	6878      	ldr	r0, [r7, #4]
 80178fc:	4798      	blx	r3
 80178fe:	4603      	mov	r3, r0
 8017900:	f083 0301 	eor.w	r3, r3, #1
 8017904:	b2db      	uxtb	r3, r3
 8017906:	2b00      	cmp	r3, #0
 8017908:	d001      	beq.n	801790e <VerifyRfFreq+0x22>
    {
        return false;
 801790a:	2300      	movs	r3, #0
 801790c:	e04a      	b.n	80179a4 <VerifyRfFreq+0xb8>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 801790e:	687b      	ldr	r3, [r7, #4]
 8017910:	4a27      	ldr	r2, [pc, #156]	@ (80179b0 <VerifyRfFreq+0xc4>)
 8017912:	4293      	cmp	r3, r2
 8017914:	d307      	bcc.n	8017926 <VerifyRfFreq+0x3a>
 8017916:	687b      	ldr	r3, [r7, #4]
 8017918:	4a26      	ldr	r2, [pc, #152]	@ (80179b4 <VerifyRfFreq+0xc8>)
 801791a:	4293      	cmp	r3, r2
 801791c:	d803      	bhi.n	8017926 <VerifyRfFreq+0x3a>
    {
        *band = 2;
 801791e:	683b      	ldr	r3, [r7, #0]
 8017920:	2202      	movs	r2, #2
 8017922:	701a      	strb	r2, [r3, #0]
 8017924:	e03d      	b.n	80179a2 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 8017926:	687b      	ldr	r3, [r7, #4]
 8017928:	4a22      	ldr	r2, [pc, #136]	@ (80179b4 <VerifyRfFreq+0xc8>)
 801792a:	4293      	cmp	r3, r2
 801792c:	d907      	bls.n	801793e <VerifyRfFreq+0x52>
 801792e:	687b      	ldr	r3, [r7, #4]
 8017930:	4a21      	ldr	r2, [pc, #132]	@ (80179b8 <VerifyRfFreq+0xcc>)
 8017932:	4293      	cmp	r3, r2
 8017934:	d803      	bhi.n	801793e <VerifyRfFreq+0x52>
    {
        *band = 0;
 8017936:	683b      	ldr	r3, [r7, #0]
 8017938:	2200      	movs	r2, #0
 801793a:	701a      	strb	r2, [r3, #0]
 801793c:	e031      	b.n	80179a2 <VerifyRfFreq+0xb6>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 801793e:	687b      	ldr	r3, [r7, #4]
 8017940:	4a1d      	ldr	r2, [pc, #116]	@ (80179b8 <VerifyRfFreq+0xcc>)
 8017942:	4293      	cmp	r3, r2
 8017944:	d907      	bls.n	8017956 <VerifyRfFreq+0x6a>
 8017946:	687b      	ldr	r3, [r7, #4]
 8017948:	4a1c      	ldr	r2, [pc, #112]	@ (80179bc <VerifyRfFreq+0xd0>)
 801794a:	4293      	cmp	r3, r2
 801794c:	d803      	bhi.n	8017956 <VerifyRfFreq+0x6a>
    {
        *band = 1;
 801794e:	683b      	ldr	r3, [r7, #0]
 8017950:	2201      	movs	r2, #1
 8017952:	701a      	strb	r2, [r3, #0]
 8017954:	e025      	b.n	80179a2 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 8017956:	687b      	ldr	r3, [r7, #4]
 8017958:	4a19      	ldr	r2, [pc, #100]	@ (80179c0 <VerifyRfFreq+0xd4>)
 801795a:	4293      	cmp	r3, r2
 801795c:	d907      	bls.n	801796e <VerifyRfFreq+0x82>
 801795e:	687b      	ldr	r3, [r7, #4]
 8017960:	4a18      	ldr	r2, [pc, #96]	@ (80179c4 <VerifyRfFreq+0xd8>)
 8017962:	4293      	cmp	r3, r2
 8017964:	d803      	bhi.n	801796e <VerifyRfFreq+0x82>
    {
        *band = 5;
 8017966:	683b      	ldr	r3, [r7, #0]
 8017968:	2205      	movs	r2, #5
 801796a:	701a      	strb	r2, [r3, #0]
 801796c:	e019      	b.n	80179a2 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 801796e:	687b      	ldr	r3, [r7, #4]
 8017970:	4a15      	ldr	r2, [pc, #84]	@ (80179c8 <VerifyRfFreq+0xdc>)
 8017972:	4293      	cmp	r3, r2
 8017974:	d907      	bls.n	8017986 <VerifyRfFreq+0x9a>
 8017976:	687b      	ldr	r3, [r7, #4]
 8017978:	4a14      	ldr	r2, [pc, #80]	@ (80179cc <VerifyRfFreq+0xe0>)
 801797a:	4293      	cmp	r3, r2
 801797c:	d803      	bhi.n	8017986 <VerifyRfFreq+0x9a>
    {
        *band = 3;
 801797e:	683b      	ldr	r3, [r7, #0]
 8017980:	2203      	movs	r2, #3
 8017982:	701a      	strb	r2, [r3, #0]
 8017984:	e00d      	b.n	80179a2 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 8017986:	687b      	ldr	r3, [r7, #4]
 8017988:	4a11      	ldr	r2, [pc, #68]	@ (80179d0 <VerifyRfFreq+0xe4>)
 801798a:	4293      	cmp	r3, r2
 801798c:	d307      	bcc.n	801799e <VerifyRfFreq+0xb2>
 801798e:	687b      	ldr	r3, [r7, #4]
 8017990:	4a10      	ldr	r2, [pc, #64]	@ (80179d4 <VerifyRfFreq+0xe8>)
 8017992:	4293      	cmp	r3, r2
 8017994:	d803      	bhi.n	801799e <VerifyRfFreq+0xb2>
    {
        *band = 4;
 8017996:	683b      	ldr	r3, [r7, #0]
 8017998:	2204      	movs	r2, #4
 801799a:	701a      	strb	r2, [r3, #0]
 801799c:	e001      	b.n	80179a2 <VerifyRfFreq+0xb6>
    }
    else
    {
        return false;
 801799e:	2300      	movs	r3, #0
 80179a0:	e000      	b.n	80179a4 <VerifyRfFreq+0xb8>
    }
    return true;
 80179a2:	2301      	movs	r3, #1
}
 80179a4:	4618      	mov	r0, r3
 80179a6:	3708      	adds	r7, #8
 80179a8:	46bd      	mov	sp, r7
 80179aa:	bd80      	pop	{r7, pc}
 80179ac:	0801fccc 	.word	0x0801fccc
 80179b0:	337055c0 	.word	0x337055c0
 80179b4:	338eda3f 	.word	0x338eda3f
 80179b8:	33bca100 	.word	0x33bca100
 80179bc:	33c5c8c0 	.word	0x33c5c8c0
 80179c0:	33c74f5f 	.word	0x33c74f5f
 80179c4:	33cef080 	.word	0x33cef080
 80179c8:	33d1fdbf 	.word	0x33d1fdbf
 80179cc:	33d5ce50 	.word	0x33d5ce50
 80179d0:	33d691a0 	.word	0x33d691a0
 80179d4:	33db2580 	.word	0x33db2580

080179d8 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 80179d8:	b590      	push	{r4, r7, lr}
 80179da:	b08b      	sub	sp, #44	@ 0x2c
 80179dc:	af04      	add	r7, sp, #16
 80179de:	4603      	mov	r3, r0
 80179e0:	460a      	mov	r2, r1
 80179e2:	71fb      	strb	r3, [r7, #7]
 80179e4:	4613      	mov	r3, r2
 80179e6:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesEU868[datarate];
 80179e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80179ec:	4a1f      	ldr	r2, [pc, #124]	@ (8017a6c <GetTimeOnAir+0x94>)
 80179ee:	5cd3      	ldrb	r3, [r2, r3]
 80179f0:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 80179f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80179f6:	491e      	ldr	r1, [pc, #120]	@ (8017a70 <GetTimeOnAir+0x98>)
 80179f8:	4618      	mov	r0, r3
 80179fa:	f7ff ff0f 	bl	801781c <RegionCommonGetBandwidth>
 80179fe:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 8017a00:	2300      	movs	r3, #0
 8017a02:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 8017a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017a08:	2b07      	cmp	r3, #7
 8017a0a:	d118      	bne.n	8017a3e <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 8017a0c:	4b19      	ldr	r3, [pc, #100]	@ (8017a74 <GetTimeOnAir+0x9c>)
 8017a0e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8017a10:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017a14:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8017a18:	fb02 f303 	mul.w	r3, r2, r3
 8017a1c:	4619      	mov	r1, r3
 8017a1e:	88bb      	ldrh	r3, [r7, #4]
 8017a20:	b2db      	uxtb	r3, r3
 8017a22:	2201      	movs	r2, #1
 8017a24:	9203      	str	r2, [sp, #12]
 8017a26:	9302      	str	r3, [sp, #8]
 8017a28:	2300      	movs	r3, #0
 8017a2a:	9301      	str	r3, [sp, #4]
 8017a2c:	2305      	movs	r3, #5
 8017a2e:	9300      	str	r3, [sp, #0]
 8017a30:	2300      	movs	r3, #0
 8017a32:	460a      	mov	r2, r1
 8017a34:	68f9      	ldr	r1, [r7, #12]
 8017a36:	2000      	movs	r0, #0
 8017a38:	47a0      	blx	r4
 8017a3a:	6178      	str	r0, [r7, #20]
 8017a3c:	e011      	b.n	8017a62 <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8017a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8017a74 <GetTimeOnAir+0x9c>)
 8017a40:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8017a42:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8017a46:	88bb      	ldrh	r3, [r7, #4]
 8017a48:	b2db      	uxtb	r3, r3
 8017a4a:	2101      	movs	r1, #1
 8017a4c:	9103      	str	r1, [sp, #12]
 8017a4e:	9302      	str	r3, [sp, #8]
 8017a50:	2300      	movs	r3, #0
 8017a52:	9301      	str	r3, [sp, #4]
 8017a54:	2308      	movs	r3, #8
 8017a56:	9300      	str	r3, [sp, #0]
 8017a58:	2301      	movs	r3, #1
 8017a5a:	68f9      	ldr	r1, [r7, #12]
 8017a5c:	2001      	movs	r0, #1
 8017a5e:	47a0      	blx	r4
 8017a60:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 8017a62:	697b      	ldr	r3, [r7, #20]
}
 8017a64:	4618      	mov	r0, r3
 8017a66:	371c      	adds	r7, #28
 8017a68:	46bd      	mov	sp, r7
 8017a6a:	bd90      	pop	{r4, r7, pc}
 8017a6c:	0801fc10 	.word	0x0801fc10
 8017a70:	0801fc18 	.word	0x0801fc18
 8017a74:	0801fccc 	.word	0x0801fccc

08017a78 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 8017a78:	b580      	push	{r7, lr}
 8017a7a:	b088      	sub	sp, #32
 8017a7c:	af00      	add	r7, sp, #0
 8017a7e:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8017a80:	2300      	movs	r3, #0
 8017a82:	61bb      	str	r3, [r7, #24]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 8017a84:	687b      	ldr	r3, [r7, #4]
 8017a86:	781b      	ldrb	r3, [r3, #0]
 8017a88:	3b01      	subs	r3, #1
 8017a8a:	2b37      	cmp	r3, #55	@ 0x37
 8017a8c:	f200 8122 	bhi.w	8017cd4 <RegionEU868GetPhyParam+0x25c>
 8017a90:	a201      	add	r2, pc, #4	@ (adr r2, 8017a98 <RegionEU868GetPhyParam+0x20>)
 8017a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017a96:	bf00      	nop
 8017a98:	08017b79 	.word	0x08017b79
 8017a9c:	08017b7f 	.word	0x08017b7f
 8017aa0:	08017cd5 	.word	0x08017cd5
 8017aa4:	08017cd5 	.word	0x08017cd5
 8017aa8:	08017cd5 	.word	0x08017cd5
 8017aac:	08017b85 	.word	0x08017b85
 8017ab0:	08017cd5 	.word	0x08017cd5
 8017ab4:	08017bbf 	.word	0x08017bbf
 8017ab8:	08017cd5 	.word	0x08017cd5
 8017abc:	08017bc5 	.word	0x08017bc5
 8017ac0:	08017bcb 	.word	0x08017bcb
 8017ac4:	08017bd1 	.word	0x08017bd1
 8017ac8:	08017bd7 	.word	0x08017bd7
 8017acc:	08017be7 	.word	0x08017be7
 8017ad0:	08017bf7 	.word	0x08017bf7
 8017ad4:	08017bfd 	.word	0x08017bfd
 8017ad8:	08017c05 	.word	0x08017c05
 8017adc:	08017c0d 	.word	0x08017c0d
 8017ae0:	08017c15 	.word	0x08017c15
 8017ae4:	08017c1d 	.word	0x08017c1d
 8017ae8:	08017c25 	.word	0x08017c25
 8017aec:	08017c39 	.word	0x08017c39
 8017af0:	08017c3f 	.word	0x08017c3f
 8017af4:	08017c45 	.word	0x08017c45
 8017af8:	08017c4b 	.word	0x08017c4b
 8017afc:	08017c57 	.word	0x08017c57
 8017b00:	08017c63 	.word	0x08017c63
 8017b04:	08017c69 	.word	0x08017c69
 8017b08:	08017c71 	.word	0x08017c71
 8017b0c:	08017c77 	.word	0x08017c77
 8017b10:	08017c7d 	.word	0x08017c7d
 8017b14:	08017c85 	.word	0x08017c85
 8017b18:	08017b8b 	.word	0x08017b8b
 8017b1c:	08017cd5 	.word	0x08017cd5
 8017b20:	08017cd5 	.word	0x08017cd5
 8017b24:	08017cd5 	.word	0x08017cd5
 8017b28:	08017cd5 	.word	0x08017cd5
 8017b2c:	08017cd5 	.word	0x08017cd5
 8017b30:	08017cd5 	.word	0x08017cd5
 8017b34:	08017cd5 	.word	0x08017cd5
 8017b38:	08017cd5 	.word	0x08017cd5
 8017b3c:	08017cd5 	.word	0x08017cd5
 8017b40:	08017cd5 	.word	0x08017cd5
 8017b44:	08017cd5 	.word	0x08017cd5
 8017b48:	08017cd5 	.word	0x08017cd5
 8017b4c:	08017cd5 	.word	0x08017cd5
 8017b50:	08017c8b 	.word	0x08017c8b
 8017b54:	08017c91 	.word	0x08017c91
 8017b58:	08017c9f 	.word	0x08017c9f
 8017b5c:	08017cd5 	.word	0x08017cd5
 8017b60:	08017cd5 	.word	0x08017cd5
 8017b64:	08017ca5 	.word	0x08017ca5
 8017b68:	08017cab 	.word	0x08017cab
 8017b6c:	08017cd5 	.word	0x08017cd5
 8017b70:	08017cb1 	.word	0x08017cb1
 8017b74:	08017cc1 	.word	0x08017cc1
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 8017b78:	2300      	movs	r3, #0
 8017b7a:	61bb      	str	r3, [r7, #24]
            break;
 8017b7c:	e0ab      	b.n	8017cd6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 8017b7e:	2300      	movs	r3, #0
 8017b80:	61bb      	str	r3, [r7, #24]
            break;
 8017b82:	e0a8      	b.n	8017cd6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 8017b84:	2300      	movs	r3, #0
 8017b86:	61bb      	str	r3, [r7, #24]
            break;
 8017b88:	e0a5      	b.n	8017cd6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 8017b8a:	687b      	ldr	r3, [r7, #4]
 8017b8c:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8017b90:	733b      	strb	r3, [r7, #12]
 8017b92:	2307      	movs	r3, #7
 8017b94:	737b      	strb	r3, [r7, #13]
 8017b96:	2300      	movs	r3, #0
 8017b98:	73bb      	strb	r3, [r7, #14]
 8017b9a:	2310      	movs	r3, #16
 8017b9c:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8017b9e:	4b51      	ldr	r3, [pc, #324]	@ (8017ce4 <RegionEU868GetPhyParam+0x26c>)
 8017ba0:	681b      	ldr	r3, [r3, #0]
 8017ba2:	f503 7358 	add.w	r3, r3, #864	@ 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8017ba6:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 8017ba8:	4b4e      	ldr	r3, [pc, #312]	@ (8017ce4 <RegionEU868GetPhyParam+0x26c>)
 8017baa:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8017bac:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8017bae:	f107 030c 	add.w	r3, r7, #12
 8017bb2:	4618      	mov	r0, r3
 8017bb4:	f7ff fddf 	bl	8017776 <RegionCommonGetNextLowerTxDr>
 8017bb8:	4603      	mov	r3, r0
 8017bba:	61bb      	str	r3, [r7, #24]
            break;
 8017bbc:	e08b      	b.n	8017cd6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 8017bbe:	2300      	movs	r3, #0
 8017bc0:	61bb      	str	r3, [r7, #24]
            break;
 8017bc2:	e088      	b.n	8017cd6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 8017bc4:	2300      	movs	r3, #0
 8017bc6:	61bb      	str	r3, [r7, #24]
            break;
 8017bc8:	e085      	b.n	8017cd6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8017bca:	2340      	movs	r3, #64	@ 0x40
 8017bcc:	61bb      	str	r3, [r7, #24]
            break;
 8017bce:	e082      	b.n	8017cd6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8017bd0:	2320      	movs	r3, #32
 8017bd2:	61bb      	str	r3, [r7, #24]
            break;
 8017bd4:	e07f      	b.n	8017cd6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 8017bd6:	687b      	ldr	r3, [r7, #4]
 8017bd8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017bdc:	461a      	mov	r2, r3
 8017bde:	4b42      	ldr	r3, [pc, #264]	@ (8017ce8 <RegionEU868GetPhyParam+0x270>)
 8017be0:	5c9b      	ldrb	r3, [r3, r2]
 8017be2:	61bb      	str	r3, [r7, #24]
            break;
 8017be4:	e077      	b.n	8017cd6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 8017be6:	687b      	ldr	r3, [r7, #4]
 8017be8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017bec:	461a      	mov	r2, r3
 8017bee:	4b3f      	ldr	r3, [pc, #252]	@ (8017cec <RegionEU868GetPhyParam+0x274>)
 8017bf0:	5c9b      	ldrb	r3, [r3, r2]
 8017bf2:	61bb      	str	r3, [r7, #24]
            break;
 8017bf4:	e06f      	b.n	8017cd6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 8017bf6:	2301      	movs	r3, #1
 8017bf8:	61bb      	str	r3, [r7, #24]
            break;
 8017bfa:	e06c      	b.n	8017cd6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 8017bfc:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8017c00:	61bb      	str	r3, [r7, #24]
            break;
 8017c02:	e068      	b.n	8017cd6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8017c04:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8017c08:	61bb      	str	r3, [r7, #24]
            break;
 8017c0a:	e064      	b.n	8017cd6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8017c0c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8017c10:	61bb      	str	r3, [r7, #24]
            break;
 8017c12:	e060      	b.n	8017cd6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8017c14:	f241 3388 	movw	r3, #5000	@ 0x1388
 8017c18:	61bb      	str	r3, [r7, #24]
            break;
 8017c1a:	e05c      	b.n	8017cd6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8017c1c:	f241 7370 	movw	r3, #6000	@ 0x1770
 8017c20:	61bb      	str	r3, [r7, #24]
            break;
 8017c22:	e058      	b.n	8017cd6 <RegionEU868GetPhyParam+0x25e>
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))

        case PHY_RETRANSMIT_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 8017c24:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8017c28:	4831      	ldr	r0, [pc, #196]	@ (8017cf0 <RegionEU868GetPhyParam+0x278>)
 8017c2a:	f002 fa2b 	bl	801a084 <randr>
 8017c2e:	4603      	mov	r3, r0
 8017c30:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8017c34:	61bb      	str	r3, [r7, #24]
            break;
 8017c36:	e04e      	b.n	8017cd6 <RegionEU868GetPhyParam+0x25e>
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 8017c38:	2300      	movs	r3, #0
 8017c3a:	61bb      	str	r3, [r7, #24]
            break;
 8017c3c:	e04b      	b.n	8017cd6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 8017c3e:	4b2d      	ldr	r3, [pc, #180]	@ (8017cf4 <RegionEU868GetPhyParam+0x27c>)
 8017c40:	61bb      	str	r3, [r7, #24]
            break;
 8017c42:	e048      	b.n	8017cd6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 8017c44:	2300      	movs	r3, #0
 8017c46:	61bb      	str	r3, [r7, #24]
            break;
 8017c48:	e045      	b.n	8017cd6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8017c4a:	4b26      	ldr	r3, [pc, #152]	@ (8017ce4 <RegionEU868GetPhyParam+0x26c>)
 8017c4c:	681b      	ldr	r3, [r3, #0]
 8017c4e:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8017c52:	61bb      	str	r3, [r7, #24]
            break;
 8017c54:	e03f      	b.n	8017cd6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8017c56:	4b23      	ldr	r3, [pc, #140]	@ (8017ce4 <RegionEU868GetPhyParam+0x26c>)
 8017c58:	681b      	ldr	r3, [r3, #0]
 8017c5a:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 8017c5e:	61bb      	str	r3, [r7, #24]
            break;
 8017c60:	e039      	b.n	8017cd6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 8017c62:	2310      	movs	r3, #16
 8017c64:	61bb      	str	r3, [r7, #24]
            break;
 8017c66:	e036      	b.n	8017cd6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8017c68:	4b1e      	ldr	r3, [pc, #120]	@ (8017ce4 <RegionEU868GetPhyParam+0x26c>)
 8017c6a:	681b      	ldr	r3, [r3, #0]
 8017c6c:	61bb      	str	r3, [r7, #24]
            break;
 8017c6e:	e032      	b.n	8017cd6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = EU868_DEFAULT_UPLINK_DWELL_TIME;
 8017c70:	2300      	movs	r3, #0
 8017c72:	61bb      	str	r3, [r7, #24]
            break;
 8017c74:	e02f      	b.n	8017cd6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 8017c76:	2300      	movs	r3, #0
 8017c78:	61bb      	str	r3, [r7, #24]
            break;
 8017c7a:	e02c      	b.n	8017cd6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 8017c7c:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8017c80:	61bb      	str	r3, [r7, #24]
            break;
 8017c82:	e028      	b.n	8017cd6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 8017c84:	4b1c      	ldr	r3, [pc, #112]	@ (8017cf8 <RegionEU868GetPhyParam+0x280>)
 8017c86:	61bb      	str	r3, [r7, #24]
            break;
 8017c88:	e025      	b.n	8017cd6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 8017c8a:	4b1a      	ldr	r3, [pc, #104]	@ (8017cf4 <RegionEU868GetPhyParam+0x27c>)
 8017c8c:	61bb      	str	r3, [r7, #24]
            break;
 8017c8e:	e022      	b.n	8017cd6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 8017c90:	2311      	movs	r3, #17
 8017c92:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 8017c94:	2301      	movs	r3, #1
 8017c96:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 8017c98:	2300      	movs	r3, #0
 8017c9a:	76bb      	strb	r3, [r7, #26]
            break;
 8017c9c:	e01b      	b.n	8017cd6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 8017c9e:	2303      	movs	r3, #3
 8017ca0:	61bb      	str	r3, [r7, #24]
            break;
 8017ca2:	e018      	b.n	8017cd6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 8017ca4:	4b13      	ldr	r3, [pc, #76]	@ (8017cf4 <RegionEU868GetPhyParam+0x27c>)
 8017ca6:	61bb      	str	r3, [r7, #24]
            break;
 8017ca8:	e015      	b.n	8017cd6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 8017caa:	2303      	movs	r3, #3
 8017cac:	61bb      	str	r3, [r7, #24]
            break;
 8017cae:	e012      	b.n	8017cd6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 8017cb0:	687b      	ldr	r3, [r7, #4]
 8017cb2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017cb6:	461a      	mov	r2, r3
 8017cb8:	4b10      	ldr	r3, [pc, #64]	@ (8017cfc <RegionEU868GetPhyParam+0x284>)
 8017cba:	5c9b      	ldrb	r3, [r3, r2]
 8017cbc:	61bb      	str	r3, [r7, #24]
            break;
 8017cbe:	e00a      	b.n	8017cd6 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 8017cc0:	687b      	ldr	r3, [r7, #4]
 8017cc2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017cc6:	490e      	ldr	r1, [pc, #56]	@ (8017d00 <RegionEU868GetPhyParam+0x288>)
 8017cc8:	4618      	mov	r0, r3
 8017cca:	f7ff fda7 	bl	801781c <RegionCommonGetBandwidth>
 8017cce:	4603      	mov	r3, r0
 8017cd0:	61bb      	str	r3, [r7, #24]
            break;
 8017cd2:	e000      	b.n	8017cd6 <RegionEU868GetPhyParam+0x25e>
        }
        default:
        {
            break;
 8017cd4:	bf00      	nop
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 8017cd6:	69bb      	ldr	r3, [r7, #24]
 8017cd8:	61fb      	str	r3, [r7, #28]
 8017cda:	69fb      	ldr	r3, [r7, #28]
}
 8017cdc:	4618      	mov	r0, r3
 8017cde:	3720      	adds	r7, #32
 8017ce0:	46bd      	mov	sp, r7
 8017ce2:	bd80      	pop	{r7, pc}
 8017ce4:	20001a70 	.word	0x20001a70
 8017ce8:	0801fc38 	.word	0x0801fc38
 8017cec:	0801fc40 	.word	0x0801fc40
 8017cf0:	fffffc18 	.word	0xfffffc18
 8017cf4:	33d3e608 	.word	0x33d3e608
 8017cf8:	4009999a 	.word	0x4009999a
 8017cfc:	0801fc10 	.word	0x0801fc10
 8017d00:	0801fc18 	.word	0x0801fc18

08017d04 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8017d04:	b590      	push	{r4, r7, lr}
 8017d06:	b085      	sub	sp, #20
 8017d08:	af02      	add	r7, sp, #8
 8017d0a:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8017d0c:	4b11      	ldr	r3, [pc, #68]	@ (8017d54 <RegionEU868SetBandTxDone+0x50>)
 8017d0e:	681a      	ldr	r2, [r3, #0]
 8017d10:	4b11      	ldr	r3, [pc, #68]	@ (8017d58 <RegionEU868SetBandTxDone+0x54>)
 8017d12:	6819      	ldr	r1, [r3, #0]
 8017d14:	687b      	ldr	r3, [r7, #4]
 8017d16:	781b      	ldrb	r3, [r3, #0]
 8017d18:	4618      	mov	r0, r3
 8017d1a:	4603      	mov	r3, r0
 8017d1c:	005b      	lsls	r3, r3, #1
 8017d1e:	4403      	add	r3, r0
 8017d20:	009b      	lsls	r3, r3, #2
 8017d22:	440b      	add	r3, r1
 8017d24:	3309      	adds	r3, #9
 8017d26:	781b      	ldrb	r3, [r3, #0]
 8017d28:	4619      	mov	r1, r3
 8017d2a:	460b      	mov	r3, r1
 8017d2c:	005b      	lsls	r3, r3, #1
 8017d2e:	440b      	add	r3, r1
 8017d30:	00db      	lsls	r3, r3, #3
 8017d32:	18d0      	adds	r0, r2, r3
 8017d34:	687b      	ldr	r3, [r7, #4]
 8017d36:	6899      	ldr	r1, [r3, #8]
 8017d38:	687b      	ldr	r3, [r7, #4]
 8017d3a:	785c      	ldrb	r4, [r3, #1]
 8017d3c:	687b      	ldr	r3, [r7, #4]
 8017d3e:	691a      	ldr	r2, [r3, #16]
 8017d40:	9200      	str	r2, [sp, #0]
 8017d42:	68db      	ldr	r3, [r3, #12]
 8017d44:	4622      	mov	r2, r4
 8017d46:	f7ff f8ef 	bl	8016f28 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU868 */
}
 8017d4a:	bf00      	nop
 8017d4c:	370c      	adds	r7, #12
 8017d4e:	46bd      	mov	sp, r7
 8017d50:	bd90      	pop	{r4, r7, pc}
 8017d52:	bf00      	nop
 8017d54:	20001a74 	.word	0x20001a74
 8017d58:	20001a70 	.word	0x20001a70

08017d5c <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 8017d5c:	b580      	push	{r7, lr}
 8017d5e:	b0b0      	sub	sp, #192	@ 0xc0
 8017d60:	af00      	add	r7, sp, #0
 8017d62:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 8017d64:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8017d68:	2290      	movs	r2, #144	@ 0x90
 8017d6a:	2100      	movs	r1, #0
 8017d6c:	4618      	mov	r0, r3
 8017d6e:	f006 ffb9 	bl	801ece4 <memset>
 8017d72:	2364      	movs	r3, #100	@ 0x64
 8017d74:	863b      	strh	r3, [r7, #48]	@ 0x30
 8017d76:	2364      	movs	r3, #100	@ 0x64
 8017d78:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8017d7c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8017d80:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 8017d84:	230a      	movs	r3, #10
 8017d86:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
 8017d8a:	2364      	movs	r3, #100	@ 0x64
 8017d8c:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8017d90:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8017d94:	f8a7 30a8 	strh.w	r3, [r7, #168]	@ 0xa8
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 8017d98:	687b      	ldr	r3, [r7, #4]
 8017d9a:	7b1b      	ldrb	r3, [r3, #12]
 8017d9c:	2b02      	cmp	r3, #2
 8017d9e:	d05d      	beq.n	8017e5c <RegionEU868InitDefaults+0x100>
 8017da0:	2b02      	cmp	r3, #2
 8017da2:	dc6a      	bgt.n	8017e7a <RegionEU868InitDefaults+0x11e>
 8017da4:	2b00      	cmp	r3, #0
 8017da6:	d002      	beq.n	8017dae <RegionEU868InitDefaults+0x52>
 8017da8:	2b01      	cmp	r3, #1
 8017daa:	d03e      	beq.n	8017e2a <RegionEU868InitDefaults+0xce>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 8017dac:	e065      	b.n	8017e7a <RegionEU868InitDefaults+0x11e>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8017dae:	687b      	ldr	r3, [r7, #4]
 8017db0:	681b      	ldr	r3, [r3, #0]
 8017db2:	2b00      	cmp	r3, #0
 8017db4:	d062      	beq.n	8017e7c <RegionEU868InitDefaults+0x120>
 8017db6:	687b      	ldr	r3, [r7, #4]
 8017db8:	685b      	ldr	r3, [r3, #4]
 8017dba:	2b00      	cmp	r3, #0
 8017dbc:	d05e      	beq.n	8017e7c <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8017dbe:	687b      	ldr	r3, [r7, #4]
 8017dc0:	685b      	ldr	r3, [r3, #4]
 8017dc2:	4a30      	ldr	r2, [pc, #192]	@ (8017e84 <RegionEU868InitDefaults+0x128>)
 8017dc4:	6013      	str	r3, [r2, #0]
            RegionBands = (Band_t*) params->Bands;
 8017dc6:	687b      	ldr	r3, [r7, #4]
 8017dc8:	689b      	ldr	r3, [r3, #8]
 8017dca:	4a2f      	ldr	r2, [pc, #188]	@ (8017e88 <RegionEU868InitDefaults+0x12c>)
 8017dcc:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 8017dce:	4b2e      	ldr	r3, [pc, #184]	@ (8017e88 <RegionEU868InitDefaults+0x12c>)
 8017dd0:	681b      	ldr	r3, [r3, #0]
 8017dd2:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8017dd6:	2290      	movs	r2, #144	@ 0x90
 8017dd8:	4618      	mov	r0, r3
 8017dda:	f002 f96a 	bl	801a0b2 <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 8017dde:	4b29      	ldr	r3, [pc, #164]	@ (8017e84 <RegionEU868InitDefaults+0x128>)
 8017de0:	681b      	ldr	r3, [r3, #0]
 8017de2:	4a2a      	ldr	r2, [pc, #168]	@ (8017e8c <RegionEU868InitDefaults+0x130>)
 8017de4:	ca07      	ldmia	r2, {r0, r1, r2}
 8017de6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 8017dea:	4b26      	ldr	r3, [pc, #152]	@ (8017e84 <RegionEU868InitDefaults+0x128>)
 8017dec:	681b      	ldr	r3, [r3, #0]
 8017dee:	4a28      	ldr	r2, [pc, #160]	@ (8017e90 <RegionEU868InitDefaults+0x134>)
 8017df0:	330c      	adds	r3, #12
 8017df2:	ca07      	ldmia	r2, {r0, r1, r2}
 8017df4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 8017df8:	4b22      	ldr	r3, [pc, #136]	@ (8017e84 <RegionEU868InitDefaults+0x128>)
 8017dfa:	681b      	ldr	r3, [r3, #0]
 8017dfc:	4a25      	ldr	r2, [pc, #148]	@ (8017e94 <RegionEU868InitDefaults+0x138>)
 8017dfe:	3318      	adds	r3, #24
 8017e00:	ca07      	ldmia	r2, {r0, r1, r2}
 8017e02:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8017e06:	4b1f      	ldr	r3, [pc, #124]	@ (8017e84 <RegionEU868InitDefaults+0x128>)
 8017e08:	681b      	ldr	r3, [r3, #0]
 8017e0a:	2207      	movs	r2, #7
 8017e0c:	f8a3 236c 	strh.w	r2, [r3, #876]	@ 0x36c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8017e10:	4b1c      	ldr	r3, [pc, #112]	@ (8017e84 <RegionEU868InitDefaults+0x128>)
 8017e12:	681b      	ldr	r3, [r3, #0]
 8017e14:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 8017e18:	4b1a      	ldr	r3, [pc, #104]	@ (8017e84 <RegionEU868InitDefaults+0x128>)
 8017e1a:	681b      	ldr	r3, [r3, #0]
 8017e1c:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 8017e20:	2201      	movs	r2, #1
 8017e22:	4619      	mov	r1, r3
 8017e24:	f7ff f85a 	bl	8016edc <RegionCommonChanMaskCopy>
 8017e28:	e028      	b.n	8017e7c <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 8017e2a:	4b16      	ldr	r3, [pc, #88]	@ (8017e84 <RegionEU868InitDefaults+0x128>)
 8017e2c:	681b      	ldr	r3, [r3, #0]
 8017e2e:	2200      	movs	r2, #0
 8017e30:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 8017e32:	4b14      	ldr	r3, [pc, #80]	@ (8017e84 <RegionEU868InitDefaults+0x128>)
 8017e34:	681b      	ldr	r3, [r3, #0]
 8017e36:	2200      	movs	r2, #0
 8017e38:	611a      	str	r2, [r3, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 8017e3a:	4b12      	ldr	r3, [pc, #72]	@ (8017e84 <RegionEU868InitDefaults+0x128>)
 8017e3c:	681b      	ldr	r3, [r3, #0]
 8017e3e:	2200      	movs	r2, #0
 8017e40:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8017e42:	4b10      	ldr	r3, [pc, #64]	@ (8017e84 <RegionEU868InitDefaults+0x128>)
 8017e44:	681b      	ldr	r3, [r3, #0]
 8017e46:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 8017e4a:	4b0e      	ldr	r3, [pc, #56]	@ (8017e84 <RegionEU868InitDefaults+0x128>)
 8017e4c:	681b      	ldr	r3, [r3, #0]
 8017e4e:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 8017e52:	2201      	movs	r2, #1
 8017e54:	4619      	mov	r1, r3
 8017e56:	f7ff f841 	bl	8016edc <RegionCommonChanMaskCopy>
            break;
 8017e5a:	e00f      	b.n	8017e7c <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 8017e5c:	4b09      	ldr	r3, [pc, #36]	@ (8017e84 <RegionEU868InitDefaults+0x128>)
 8017e5e:	681b      	ldr	r3, [r3, #0]
 8017e60:	f8b3 1360 	ldrh.w	r1, [r3, #864]	@ 0x360
 8017e64:	4b07      	ldr	r3, [pc, #28]	@ (8017e84 <RegionEU868InitDefaults+0x128>)
 8017e66:	681b      	ldr	r3, [r3, #0]
 8017e68:	f8b3 236c 	ldrh.w	r2, [r3, #876]	@ 0x36c
 8017e6c:	4b05      	ldr	r3, [pc, #20]	@ (8017e84 <RegionEU868InitDefaults+0x128>)
 8017e6e:	681b      	ldr	r3, [r3, #0]
 8017e70:	430a      	orrs	r2, r1
 8017e72:	b292      	uxth	r2, r2
 8017e74:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
            break;
 8017e78:	e000      	b.n	8017e7c <RegionEU868InitDefaults+0x120>
            break;
 8017e7a:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8017e7c:	37c0      	adds	r7, #192	@ 0xc0
 8017e7e:	46bd      	mov	sp, r7
 8017e80:	bd80      	pop	{r7, pc}
 8017e82:	bf00      	nop
 8017e84:	20001a70 	.word	0x20001a70
 8017e88:	20001a74 	.word	0x20001a74
 8017e8c:	0801f640 	.word	0x0801f640
 8017e90:	0801f64c 	.word	0x0801f64c
 8017e94:	0801f658 	.word	0x0801f658

08017e98 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8017e98:	b580      	push	{r7, lr}
 8017e9a:	b084      	sub	sp, #16
 8017e9c:	af00      	add	r7, sp, #0
 8017e9e:	6078      	str	r0, [r7, #4]
 8017ea0:	460b      	mov	r3, r1
 8017ea2:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_EU868 )
    switch( phyAttribute )
 8017ea4:	78fb      	ldrb	r3, [r7, #3]
 8017ea6:	2b0f      	cmp	r3, #15
 8017ea8:	d86c      	bhi.n	8017f84 <RegionEU868Verify+0xec>
 8017eaa:	a201      	add	r2, pc, #4	@ (adr r2, 8017eb0 <RegionEU868Verify+0x18>)
 8017eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017eb0:	08017ef1 	.word	0x08017ef1
 8017eb4:	08017f85 	.word	0x08017f85
 8017eb8:	08017f85 	.word	0x08017f85
 8017ebc:	08017f85 	.word	0x08017f85
 8017ec0:	08017f85 	.word	0x08017f85
 8017ec4:	08017f09 	.word	0x08017f09
 8017ec8:	08017f27 	.word	0x08017f27
 8017ecc:	08017f45 	.word	0x08017f45
 8017ed0:	08017f85 	.word	0x08017f85
 8017ed4:	08017f63 	.word	0x08017f63
 8017ed8:	08017f63 	.word	0x08017f63
 8017edc:	08017f85 	.word	0x08017f85
 8017ee0:	08017f85 	.word	0x08017f85
 8017ee4:	08017f85 	.word	0x08017f85
 8017ee8:	08017f85 	.word	0x08017f85
 8017eec:	08017f81 	.word	0x08017f81
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 8017ef0:	2300      	movs	r3, #0
 8017ef2:	73fb      	strb	r3, [r7, #15]
            return VerifyRfFreq( verify->Frequency, &band );
 8017ef4:	687b      	ldr	r3, [r7, #4]
 8017ef6:	681b      	ldr	r3, [r3, #0]
 8017ef8:	f107 020f 	add.w	r2, r7, #15
 8017efc:	4611      	mov	r1, r2
 8017efe:	4618      	mov	r0, r3
 8017f00:	f7ff fcf4 	bl	80178ec <VerifyRfFreq>
 8017f04:	4603      	mov	r3, r0
 8017f06:	e03e      	b.n	8017f86 <RegionEU868Verify+0xee>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 8017f08:	687b      	ldr	r3, [r7, #4]
 8017f0a:	f993 3000 	ldrsb.w	r3, [r3]
 8017f0e:	2207      	movs	r2, #7
 8017f10:	2100      	movs	r1, #0
 8017f12:	4618      	mov	r0, r3
 8017f14:	f7fe ff65 	bl	8016de2 <RegionCommonValueInRange>
 8017f18:	4603      	mov	r3, r0
 8017f1a:	2b00      	cmp	r3, #0
 8017f1c:	bf14      	ite	ne
 8017f1e:	2301      	movne	r3, #1
 8017f20:	2300      	moveq	r3, #0
 8017f22:	b2db      	uxtb	r3, r3
 8017f24:	e02f      	b.n	8017f86 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8017f26:	687b      	ldr	r3, [r7, #4]
 8017f28:	f993 3000 	ldrsb.w	r3, [r3]
 8017f2c:	2205      	movs	r2, #5
 8017f2e:	2100      	movs	r1, #0
 8017f30:	4618      	mov	r0, r3
 8017f32:	f7fe ff56 	bl	8016de2 <RegionCommonValueInRange>
 8017f36:	4603      	mov	r3, r0
 8017f38:	2b00      	cmp	r3, #0
 8017f3a:	bf14      	ite	ne
 8017f3c:	2301      	movne	r3, #1
 8017f3e:	2300      	moveq	r3, #0
 8017f40:	b2db      	uxtb	r3, r3
 8017f42:	e020      	b.n	8017f86 <RegionEU868Verify+0xee>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 8017f44:	687b      	ldr	r3, [r7, #4]
 8017f46:	f993 3000 	ldrsb.w	r3, [r3]
 8017f4a:	2207      	movs	r2, #7
 8017f4c:	2100      	movs	r1, #0
 8017f4e:	4618      	mov	r0, r3
 8017f50:	f7fe ff47 	bl	8016de2 <RegionCommonValueInRange>
 8017f54:	4603      	mov	r3, r0
 8017f56:	2b00      	cmp	r3, #0
 8017f58:	bf14      	ite	ne
 8017f5a:	2301      	movne	r3, #1
 8017f5c:	2300      	moveq	r3, #0
 8017f5e:	b2db      	uxtb	r3, r3
 8017f60:	e011      	b.n	8017f86 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 8017f62:	687b      	ldr	r3, [r7, #4]
 8017f64:	f993 3000 	ldrsb.w	r3, [r3]
 8017f68:	2207      	movs	r2, #7
 8017f6a:	2100      	movs	r1, #0
 8017f6c:	4618      	mov	r0, r3
 8017f6e:	f7fe ff38 	bl	8016de2 <RegionCommonValueInRange>
 8017f72:	4603      	mov	r3, r0
 8017f74:	2b00      	cmp	r3, #0
 8017f76:	bf14      	ite	ne
 8017f78:	2301      	movne	r3, #1
 8017f7a:	2300      	moveq	r3, #0
 8017f7c:	b2db      	uxtb	r3, r3
 8017f7e:	e002      	b.n	8017f86 <RegionEU868Verify+0xee>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 8017f80:	2301      	movs	r3, #1
 8017f82:	e000      	b.n	8017f86 <RegionEU868Verify+0xee>
        }
        default:
            return false;
 8017f84:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 8017f86:	4618      	mov	r0, r3
 8017f88:	3710      	adds	r7, #16
 8017f8a:	46bd      	mov	sp, r7
 8017f8c:	bd80      	pop	{r7, pc}
 8017f8e:	bf00      	nop

08017f90 <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8017f90:	b580      	push	{r7, lr}
 8017f92:	b08a      	sub	sp, #40	@ 0x28
 8017f94:	af00      	add	r7, sp, #0
 8017f96:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8017f98:	2350      	movs	r3, #80	@ 0x50
 8017f9a:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 8017f9e:	687b      	ldr	r3, [r7, #4]
 8017fa0:	7a1b      	ldrb	r3, [r3, #8]
 8017fa2:	2b10      	cmp	r3, #16
 8017fa4:	d162      	bne.n	801806c <RegionEU868ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 8017fa6:	687b      	ldr	r3, [r7, #4]
 8017fa8:	685b      	ldr	r3, [r3, #4]
 8017faa:	330f      	adds	r3, #15
 8017fac:	781b      	ldrb	r3, [r3, #0]
 8017fae:	2b00      	cmp	r3, #0
 8017fb0:	d15e      	bne.n	8018070 <RegionEU868ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8017fb2:	2300      	movs	r3, #0
 8017fb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8017fb8:	2303      	movs	r3, #3
 8017fba:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8017fbe:	e050      	b.n	8018062 <RegionEU868ApplyCFList+0xd2>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 8017fc0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8017fc4:	2b07      	cmp	r3, #7
 8017fc6:	d824      	bhi.n	8018012 <RegionEU868ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8017fc8:	687b      	ldr	r3, [r7, #4]
 8017fca:	685a      	ldr	r2, [r3, #4]
 8017fcc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017fd0:	4413      	add	r3, r2
 8017fd2:	781b      	ldrb	r3, [r3, #0]
 8017fd4:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8017fd6:	69ba      	ldr	r2, [r7, #24]
 8017fd8:	687b      	ldr	r3, [r7, #4]
 8017fda:	6859      	ldr	r1, [r3, #4]
 8017fdc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017fe0:	3301      	adds	r3, #1
 8017fe2:	440b      	add	r3, r1
 8017fe4:	781b      	ldrb	r3, [r3, #0]
 8017fe6:	021b      	lsls	r3, r3, #8
 8017fe8:	4313      	orrs	r3, r2
 8017fea:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8017fec:	69ba      	ldr	r2, [r7, #24]
 8017fee:	687b      	ldr	r3, [r7, #4]
 8017ff0:	6859      	ldr	r1, [r3, #4]
 8017ff2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017ff6:	3302      	adds	r3, #2
 8017ff8:	440b      	add	r3, r1
 8017ffa:	781b      	ldrb	r3, [r3, #0]
 8017ffc:	041b      	lsls	r3, r3, #16
 8017ffe:	4313      	orrs	r3, r2
 8018000:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 8018002:	69bb      	ldr	r3, [r7, #24]
 8018004:	2264      	movs	r2, #100	@ 0x64
 8018006:	fb02 f303 	mul.w	r3, r2, r3
 801800a:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 801800c:	2300      	movs	r3, #0
 801800e:	61fb      	str	r3, [r7, #28]
 8018010:	e006      	b.n	8018020 <RegionEU868ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 8018012:	2300      	movs	r3, #0
 8018014:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 8018016:	2300      	movs	r3, #0
 8018018:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 801801c:	2300      	movs	r3, #0
 801801e:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 8018020:	69bb      	ldr	r3, [r7, #24]
 8018022:	2b00      	cmp	r3, #0
 8018024:	d00b      	beq.n	801803e <RegionEU868ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 8018026:	f107 0318 	add.w	r3, r7, #24
 801802a:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 801802c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8018030:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 8018032:	f107 0310 	add.w	r3, r7, #16
 8018036:	4618      	mov	r0, r3
 8018038:	f000 fd14 	bl	8018a64 <RegionEU868ChannelAdd>
 801803c:	e007      	b.n	801804e <RegionEU868ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 801803e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8018042:	733b      	strb	r3, [r7, #12]

            RegionEU868ChannelsRemove( &channelRemove );
 8018044:	f107 030c 	add.w	r3, r7, #12
 8018048:	4618      	mov	r0, r3
 801804a:	f000 fdad 	bl	8018ba8 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 801804e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8018052:	3303      	adds	r3, #3
 8018054:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8018058:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801805c:	3301      	adds	r3, #1
 801805e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8018062:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8018066:	2b0f      	cmp	r3, #15
 8018068:	d9aa      	bls.n	8017fc0 <RegionEU868ApplyCFList+0x30>
 801806a:	e002      	b.n	8018072 <RegionEU868ApplyCFList+0xe2>
        return;
 801806c:	bf00      	nop
 801806e:	e000      	b.n	8018072 <RegionEU868ApplyCFList+0xe2>
        return;
 8018070:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8018072:	3728      	adds	r7, #40	@ 0x28
 8018074:	46bd      	mov	sp, r7
 8018076:	bd80      	pop	{r7, pc}

08018078 <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8018078:	b580      	push	{r7, lr}
 801807a:	b082      	sub	sp, #8
 801807c:	af00      	add	r7, sp, #0
 801807e:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 8018080:	687b      	ldr	r3, [r7, #4]
 8018082:	791b      	ldrb	r3, [r3, #4]
 8018084:	2b00      	cmp	r3, #0
 8018086:	d002      	beq.n	801808e <RegionEU868ChanMaskSet+0x16>
 8018088:	2b01      	cmp	r3, #1
 801808a:	d00b      	beq.n	80180a4 <RegionEU868ChanMaskSet+0x2c>
 801808c:	e015      	b.n	80180ba <RegionEU868ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 801808e:	4b0e      	ldr	r3, [pc, #56]	@ (80180c8 <RegionEU868ChanMaskSet+0x50>)
 8018090:	681b      	ldr	r3, [r3, #0]
 8018092:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 8018096:	687b      	ldr	r3, [r7, #4]
 8018098:	681b      	ldr	r3, [r3, #0]
 801809a:	2201      	movs	r2, #1
 801809c:	4619      	mov	r1, r3
 801809e:	f7fe ff1d 	bl	8016edc <RegionCommonChanMaskCopy>
            break;
 80180a2:	e00c      	b.n	80180be <RegionEU868ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 80180a4:	4b08      	ldr	r3, [pc, #32]	@ (80180c8 <RegionEU868ChanMaskSet+0x50>)
 80180a6:	681b      	ldr	r3, [r3, #0]
 80180a8:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 80180ac:	687b      	ldr	r3, [r7, #4]
 80180ae:	681b      	ldr	r3, [r3, #0]
 80180b0:	2201      	movs	r2, #1
 80180b2:	4619      	mov	r1, r3
 80180b4:	f7fe ff12 	bl	8016edc <RegionCommonChanMaskCopy>
            break;
 80180b8:	e001      	b.n	80180be <RegionEU868ChanMaskSet+0x46>
        }
        default:
            return false;
 80180ba:	2300      	movs	r3, #0
 80180bc:	e000      	b.n	80180c0 <RegionEU868ChanMaskSet+0x48>
    }
    return true;
 80180be:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 80180c0:	4618      	mov	r0, r3
 80180c2:	3708      	adds	r7, #8
 80180c4:	46bd      	mov	sp, r7
 80180c6:	bd80      	pop	{r7, pc}
 80180c8:	20001a70 	.word	0x20001a70

080180cc <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80180cc:	b580      	push	{r7, lr}
 80180ce:	b088      	sub	sp, #32
 80180d0:	af02      	add	r7, sp, #8
 80180d2:	60ba      	str	r2, [r7, #8]
 80180d4:	607b      	str	r3, [r7, #4]
 80180d6:	4603      	mov	r3, r0
 80180d8:	73fb      	strb	r3, [r7, #15]
 80180da:	460b      	mov	r3, r1
 80180dc:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;
 80180de:	2300      	movs	r3, #0
 80180e0:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 80180e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80180e6:	2b07      	cmp	r3, #7
 80180e8:	bfa8      	it	ge
 80180ea:	2307      	movge	r3, #7
 80180ec:	b25a      	sxtb	r2, r3
 80180ee:	687b      	ldr	r3, [r7, #4]
 80180f0:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 80180f2:	687b      	ldr	r3, [r7, #4]
 80180f4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80180f8:	491e      	ldr	r1, [pc, #120]	@ (8018174 <RegionEU868ComputeRxWindowParameters+0xa8>)
 80180fa:	4618      	mov	r0, r3
 80180fc:	f7ff fb8e 	bl	801781c <RegionCommonGetBandwidth>
 8018100:	4603      	mov	r3, r0
 8018102:	b2da      	uxtb	r2, r3
 8018104:	687b      	ldr	r3, [r7, #4]
 8018106:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8018108:	687b      	ldr	r3, [r7, #4]
 801810a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801810e:	2b07      	cmp	r3, #7
 8018110:	d10a      	bne.n	8018128 <RegionEU868ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 8018112:	687b      	ldr	r3, [r7, #4]
 8018114:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018118:	461a      	mov	r2, r3
 801811a:	4b17      	ldr	r3, [pc, #92]	@ (8018178 <RegionEU868ComputeRxWindowParameters+0xac>)
 801811c:	5c9b      	ldrb	r3, [r3, r2]
 801811e:	4618      	mov	r0, r3
 8018120:	f7ff f910 	bl	8017344 <RegionCommonComputeSymbolTimeFsk>
 8018124:	6178      	str	r0, [r7, #20]
 8018126:	e011      	b.n	801814c <RegionEU868ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 8018128:	687b      	ldr	r3, [r7, #4]
 801812a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801812e:	461a      	mov	r2, r3
 8018130:	4b11      	ldr	r3, [pc, #68]	@ (8018178 <RegionEU868ComputeRxWindowParameters+0xac>)
 8018132:	5c9a      	ldrb	r2, [r3, r2]
 8018134:	687b      	ldr	r3, [r7, #4]
 8018136:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801813a:	4619      	mov	r1, r3
 801813c:	4b0d      	ldr	r3, [pc, #52]	@ (8018174 <RegionEU868ComputeRxWindowParameters+0xa8>)
 801813e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8018142:	4619      	mov	r1, r3
 8018144:	4610      	mov	r0, r2
 8018146:	f7ff f8e7 	bl	8017318 <RegionCommonComputeSymbolTimeLoRa>
 801814a:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 801814c:	4b0b      	ldr	r3, [pc, #44]	@ (801817c <RegionEU868ComputeRxWindowParameters+0xb0>)
 801814e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8018150:	4798      	blx	r3
 8018152:	687b      	ldr	r3, [r7, #4]
 8018154:	3308      	adds	r3, #8
 8018156:	687a      	ldr	r2, [r7, #4]
 8018158:	320c      	adds	r2, #12
 801815a:	7bb9      	ldrb	r1, [r7, #14]
 801815c:	9201      	str	r2, [sp, #4]
 801815e:	9300      	str	r3, [sp, #0]
 8018160:	4603      	mov	r3, r0
 8018162:	68ba      	ldr	r2, [r7, #8]
 8018164:	6978      	ldr	r0, [r7, #20]
 8018166:	f7ff f8fd 	bl	8017364 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 801816a:	bf00      	nop
 801816c:	3718      	adds	r7, #24
 801816e:	46bd      	mov	sp, r7
 8018170:	bd80      	pop	{r7, pc}
 8018172:	bf00      	nop
 8018174:	0801fc18 	.word	0x0801fc18
 8018178:	0801fc10 	.word	0x0801fc10
 801817c:	0801fccc 	.word	0x0801fccc

08018180 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8018180:	b5b0      	push	{r4, r5, r7, lr}
 8018182:	b090      	sub	sp, #64	@ 0x40
 8018184:	af0a      	add	r7, sp, #40	@ 0x28
 8018186:	6078      	str	r0, [r7, #4]
 8018188:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 801818a:	687b      	ldr	r3, [r7, #4]
 801818c:	785b      	ldrb	r3, [r3, #1]
 801818e:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 8018190:	2300      	movs	r3, #0
 8018192:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 8018194:	2300      	movs	r3, #0
 8018196:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 8018198:	687b      	ldr	r3, [r7, #4]
 801819a:	685b      	ldr	r3, [r3, #4]
 801819c:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 801819e:	4b5a      	ldr	r3, [pc, #360]	@ (8018308 <RegionEU868RxConfig+0x188>)
 80181a0:	685b      	ldr	r3, [r3, #4]
 80181a2:	4798      	blx	r3
 80181a4:	4603      	mov	r3, r0
 80181a6:	2b00      	cmp	r3, #0
 80181a8:	d001      	beq.n	80181ae <RegionEU868RxConfig+0x2e>
    {
        return false;
 80181aa:	2300      	movs	r3, #0
 80181ac:	e0a8      	b.n	8018300 <RegionEU868RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 80181ae:	687b      	ldr	r3, [r7, #4]
 80181b0:	7cdb      	ldrb	r3, [r3, #19]
 80181b2:	2b00      	cmp	r3, #0
 80181b4:	d126      	bne.n	8018204 <RegionEU868RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 80181b6:	4b55      	ldr	r3, [pc, #340]	@ (801830c <RegionEU868RxConfig+0x18c>)
 80181b8:	681a      	ldr	r2, [r3, #0]
 80181ba:	687b      	ldr	r3, [r7, #4]
 80181bc:	781b      	ldrb	r3, [r3, #0]
 80181be:	4619      	mov	r1, r3
 80181c0:	460b      	mov	r3, r1
 80181c2:	005b      	lsls	r3, r3, #1
 80181c4:	440b      	add	r3, r1
 80181c6:	009b      	lsls	r3, r3, #2
 80181c8:	4413      	add	r3, r2
 80181ca:	681b      	ldr	r3, [r3, #0]
 80181cc:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 80181ce:	4b4f      	ldr	r3, [pc, #316]	@ (801830c <RegionEU868RxConfig+0x18c>)
 80181d0:	681a      	ldr	r2, [r3, #0]
 80181d2:	687b      	ldr	r3, [r7, #4]
 80181d4:	781b      	ldrb	r3, [r3, #0]
 80181d6:	4619      	mov	r1, r3
 80181d8:	460b      	mov	r3, r1
 80181da:	005b      	lsls	r3, r3, #1
 80181dc:	440b      	add	r3, r1
 80181de:	009b      	lsls	r3, r3, #2
 80181e0:	4413      	add	r3, r2
 80181e2:	3304      	adds	r3, #4
 80181e4:	681b      	ldr	r3, [r3, #0]
 80181e6:	2b00      	cmp	r3, #0
 80181e8:	d00c      	beq.n	8018204 <RegionEU868RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 80181ea:	4b48      	ldr	r3, [pc, #288]	@ (801830c <RegionEU868RxConfig+0x18c>)
 80181ec:	681a      	ldr	r2, [r3, #0]
 80181ee:	687b      	ldr	r3, [r7, #4]
 80181f0:	781b      	ldrb	r3, [r3, #0]
 80181f2:	4619      	mov	r1, r3
 80181f4:	460b      	mov	r3, r1
 80181f6:	005b      	lsls	r3, r3, #1
 80181f8:	440b      	add	r3, r1
 80181fa:	009b      	lsls	r3, r3, #2
 80181fc:	4413      	add	r3, r2
 80181fe:	3304      	adds	r3, #4
 8018200:	681b      	ldr	r3, [r3, #0]
 8018202:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 8018204:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018208:	4a41      	ldr	r2, [pc, #260]	@ (8018310 <RegionEU868RxConfig+0x190>)
 801820a:	5cd3      	ldrb	r3, [r2, r3]
 801820c:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 801820e:	4b3e      	ldr	r3, [pc, #248]	@ (8018308 <RegionEU868RxConfig+0x188>)
 8018210:	68db      	ldr	r3, [r3, #12]
 8018212:	6938      	ldr	r0, [r7, #16]
 8018214:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 8018216:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801821a:	2b07      	cmp	r3, #7
 801821c:	d128      	bne.n	8018270 <RegionEU868RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 801821e:	2300      	movs	r3, #0
 8018220:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 8018222:	4b39      	ldr	r3, [pc, #228]	@ (8018308 <RegionEU868RxConfig+0x188>)
 8018224:	699c      	ldr	r4, [r3, #24]
 8018226:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801822a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801822e:	fb02 f303 	mul.w	r3, r2, r3
 8018232:	4619      	mov	r1, r3
 8018234:	687b      	ldr	r3, [r7, #4]
 8018236:	689b      	ldr	r3, [r3, #8]
 8018238:	b29b      	uxth	r3, r3
 801823a:	687a      	ldr	r2, [r7, #4]
 801823c:	7c92      	ldrb	r2, [r2, #18]
 801823e:	7df8      	ldrb	r0, [r7, #23]
 8018240:	9209      	str	r2, [sp, #36]	@ 0x24
 8018242:	2200      	movs	r2, #0
 8018244:	9208      	str	r2, [sp, #32]
 8018246:	2200      	movs	r2, #0
 8018248:	9207      	str	r2, [sp, #28]
 801824a:	2200      	movs	r2, #0
 801824c:	9206      	str	r2, [sp, #24]
 801824e:	2201      	movs	r2, #1
 8018250:	9205      	str	r2, [sp, #20]
 8018252:	2200      	movs	r2, #0
 8018254:	9204      	str	r2, [sp, #16]
 8018256:	2200      	movs	r2, #0
 8018258:	9203      	str	r2, [sp, #12]
 801825a:	9302      	str	r3, [sp, #8]
 801825c:	2305      	movs	r3, #5
 801825e:	9301      	str	r3, [sp, #4]
 8018260:	4b2c      	ldr	r3, [pc, #176]	@ (8018314 <RegionEU868RxConfig+0x194>)
 8018262:	9300      	str	r3, [sp, #0]
 8018264:	2300      	movs	r3, #0
 8018266:	460a      	mov	r2, r1
 8018268:	f24c 3150 	movw	r1, #50000	@ 0xc350
 801826c:	47a0      	blx	r4
 801826e:	e024      	b.n	80182ba <RegionEU868RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 8018270:	2301      	movs	r3, #1
 8018272:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8018274:	4b24      	ldr	r3, [pc, #144]	@ (8018308 <RegionEU868RxConfig+0x188>)
 8018276:	699c      	ldr	r4, [r3, #24]
 8018278:	687b      	ldr	r3, [r7, #4]
 801827a:	789b      	ldrb	r3, [r3, #2]
 801827c:	461d      	mov	r5, r3
 801827e:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8018282:	687b      	ldr	r3, [r7, #4]
 8018284:	689b      	ldr	r3, [r3, #8]
 8018286:	b29b      	uxth	r3, r3
 8018288:	687a      	ldr	r2, [r7, #4]
 801828a:	7c92      	ldrb	r2, [r2, #18]
 801828c:	7df8      	ldrb	r0, [r7, #23]
 801828e:	9209      	str	r2, [sp, #36]	@ 0x24
 8018290:	2201      	movs	r2, #1
 8018292:	9208      	str	r2, [sp, #32]
 8018294:	2200      	movs	r2, #0
 8018296:	9207      	str	r2, [sp, #28]
 8018298:	2200      	movs	r2, #0
 801829a:	9206      	str	r2, [sp, #24]
 801829c:	2200      	movs	r2, #0
 801829e:	9205      	str	r2, [sp, #20]
 80182a0:	2200      	movs	r2, #0
 80182a2:	9204      	str	r2, [sp, #16]
 80182a4:	2200      	movs	r2, #0
 80182a6:	9203      	str	r2, [sp, #12]
 80182a8:	9302      	str	r3, [sp, #8]
 80182aa:	2308      	movs	r3, #8
 80182ac:	9301      	str	r3, [sp, #4]
 80182ae:	2300      	movs	r3, #0
 80182b0:	9300      	str	r3, [sp, #0]
 80182b2:	2301      	movs	r3, #1
 80182b4:	460a      	mov	r2, r1
 80182b6:	4629      	mov	r1, r5
 80182b8:	47a0      	blx	r4
    }

    if( rxConfig->RepeaterSupport == true )
 80182ba:	687b      	ldr	r3, [r7, #4]
 80182bc:	7c5b      	ldrb	r3, [r3, #17]
 80182be:	2b00      	cmp	r3, #0
 80182c0:	d005      	beq.n	80182ce <RegionEU868RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 80182c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80182c6:	4a14      	ldr	r2, [pc, #80]	@ (8018318 <RegionEU868RxConfig+0x198>)
 80182c8:	5cd3      	ldrb	r3, [r2, r3]
 80182ca:	75bb      	strb	r3, [r7, #22]
 80182cc:	e004      	b.n	80182d8 <RegionEU868RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 80182ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80182d2:	4a12      	ldr	r2, [pc, #72]	@ (801831c <RegionEU868RxConfig+0x19c>)
 80182d4:	5cd3      	ldrb	r3, [r2, r3]
 80182d6:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 80182d8:	4b0b      	ldr	r3, [pc, #44]	@ (8018308 <RegionEU868RxConfig+0x188>)
 80182da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80182dc:	7dba      	ldrb	r2, [r7, #22]
 80182de:	320d      	adds	r2, #13
 80182e0:	b2d1      	uxtb	r1, r2
 80182e2:	7dfa      	ldrb	r2, [r7, #23]
 80182e4:	4610      	mov	r0, r2
 80182e6:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 80182e8:	687b      	ldr	r3, [r7, #4]
 80182ea:	7cdb      	ldrb	r3, [r3, #19]
 80182ec:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80182f0:	6939      	ldr	r1, [r7, #16]
 80182f2:	4618      	mov	r0, r3
 80182f4:	f7ff fab0 	bl	8017858 <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 80182f8:	683b      	ldr	r3, [r7, #0]
 80182fa:	7bfa      	ldrb	r2, [r7, #15]
 80182fc:	701a      	strb	r2, [r3, #0]
    return true;
 80182fe:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8018300:	4618      	mov	r0, r3
 8018302:	3718      	adds	r7, #24
 8018304:	46bd      	mov	sp, r7
 8018306:	bdb0      	pop	{r4, r5, r7, pc}
 8018308:	0801fccc 	.word	0x0801fccc
 801830c:	20001a70 	.word	0x20001a70
 8018310:	0801fc10 	.word	0x0801fc10
 8018314:	00014585 	.word	0x00014585
 8018318:	0801fc40 	.word	0x0801fc40
 801831c:	0801fc38 	.word	0x0801fc38

08018320 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8018320:	b590      	push	{r4, r7, lr}
 8018322:	b093      	sub	sp, #76	@ 0x4c
 8018324:	af0a      	add	r7, sp, #40	@ 0x28
 8018326:	60f8      	str	r0, [r7, #12]
 8018328:	60b9      	str	r1, [r7, #8]
 801832a:	607a      	str	r2, [r7, #4]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 801832c:	68fb      	ldr	r3, [r7, #12]
 801832e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018332:	461a      	mov	r2, r3
 8018334:	4b5d      	ldr	r3, [pc, #372]	@ (80184ac <RegionEU868TxConfig+0x18c>)
 8018336:	5c9b      	ldrb	r3, [r3, r2]
 8018338:	77bb      	strb	r3, [r7, #30]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 801833a:	68fb      	ldr	r3, [r7, #12]
 801833c:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8018340:	4b5b      	ldr	r3, [pc, #364]	@ (80184b0 <RegionEU868TxConfig+0x190>)
 8018342:	681a      	ldr	r2, [r3, #0]
 8018344:	4b5b      	ldr	r3, [pc, #364]	@ (80184b4 <RegionEU868TxConfig+0x194>)
 8018346:	6819      	ldr	r1, [r3, #0]
 8018348:	68fb      	ldr	r3, [r7, #12]
 801834a:	781b      	ldrb	r3, [r3, #0]
 801834c:	461c      	mov	r4, r3
 801834e:	4623      	mov	r3, r4
 8018350:	005b      	lsls	r3, r3, #1
 8018352:	4423      	add	r3, r4
 8018354:	009b      	lsls	r3, r3, #2
 8018356:	440b      	add	r3, r1
 8018358:	3309      	adds	r3, #9
 801835a:	781b      	ldrb	r3, [r3, #0]
 801835c:	4619      	mov	r1, r3
 801835e:	460b      	mov	r3, r1
 8018360:	005b      	lsls	r3, r3, #1
 8018362:	440b      	add	r3, r1
 8018364:	00db      	lsls	r3, r3, #3
 8018366:	4413      	add	r3, r2
 8018368:	f993 3002 	ldrsb.w	r3, [r3, #2]
 801836c:	4619      	mov	r1, r3
 801836e:	f7ff fa40 	bl	80177f2 <RegionCommonLimitTxPower>
 8018372:	4603      	mov	r3, r0
 8018374:	777b      	strb	r3, [r7, #29]
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 8018376:	68fb      	ldr	r3, [r7, #12]
 8018378:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801837c:	494e      	ldr	r1, [pc, #312]	@ (80184b8 <RegionEU868TxConfig+0x198>)
 801837e:	4618      	mov	r0, r3
 8018380:	f7ff fa4c 	bl	801781c <RegionCommonGetBandwidth>
 8018384:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 8018386:	2300      	movs	r3, #0
 8018388:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 801838a:	68fb      	ldr	r3, [r7, #12]
 801838c:	6859      	ldr	r1, [r3, #4]
 801838e:	68fb      	ldr	r3, [r7, #12]
 8018390:	689a      	ldr	r2, [r3, #8]
 8018392:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8018396:	4618      	mov	r0, r3
 8018398:	f7ff f89c 	bl	80174d4 <RegionCommonComputeTxPower>
 801839c:	4603      	mov	r3, r0
 801839e:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 80183a0:	4b46      	ldr	r3, [pc, #280]	@ (80184bc <RegionEU868TxConfig+0x19c>)
 80183a2:	68da      	ldr	r2, [r3, #12]
 80183a4:	4b43      	ldr	r3, [pc, #268]	@ (80184b4 <RegionEU868TxConfig+0x194>)
 80183a6:	6819      	ldr	r1, [r3, #0]
 80183a8:	68fb      	ldr	r3, [r7, #12]
 80183aa:	781b      	ldrb	r3, [r3, #0]
 80183ac:	4618      	mov	r0, r3
 80183ae:	4603      	mov	r3, r0
 80183b0:	005b      	lsls	r3, r3, #1
 80183b2:	4403      	add	r3, r0
 80183b4:	009b      	lsls	r3, r3, #2
 80183b6:	440b      	add	r3, r1
 80183b8:	681b      	ldr	r3, [r3, #0]
 80183ba:	4618      	mov	r0, r3
 80183bc:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 80183be:	68fb      	ldr	r3, [r7, #12]
 80183c0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80183c4:	2b07      	cmp	r3, #7
 80183c6:	d124      	bne.n	8018412 <RegionEU868TxConfig+0xf2>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 80183c8:	2300      	movs	r3, #0
 80183ca:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 80183cc:	4b3b      	ldr	r3, [pc, #236]	@ (80184bc <RegionEU868TxConfig+0x19c>)
 80183ce:	69dc      	ldr	r4, [r3, #28]
 80183d0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80183d4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80183d8:	fb02 f303 	mul.w	r3, r2, r3
 80183dc:	461a      	mov	r2, r3
 80183de:	f997 1017 	ldrsb.w	r1, [r7, #23]
 80183e2:	7ff8      	ldrb	r0, [r7, #31]
 80183e4:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 80183e8:	9308      	str	r3, [sp, #32]
 80183ea:	2300      	movs	r3, #0
 80183ec:	9307      	str	r3, [sp, #28]
 80183ee:	2300      	movs	r3, #0
 80183f0:	9306      	str	r3, [sp, #24]
 80183f2:	2300      	movs	r3, #0
 80183f4:	9305      	str	r3, [sp, #20]
 80183f6:	2301      	movs	r3, #1
 80183f8:	9304      	str	r3, [sp, #16]
 80183fa:	2300      	movs	r3, #0
 80183fc:	9303      	str	r3, [sp, #12]
 80183fe:	2305      	movs	r3, #5
 8018400:	9302      	str	r3, [sp, #8]
 8018402:	2300      	movs	r3, #0
 8018404:	9301      	str	r3, [sp, #4]
 8018406:	9200      	str	r2, [sp, #0]
 8018408:	69bb      	ldr	r3, [r7, #24]
 801840a:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 801840e:	47a0      	blx	r4
 8018410:	e01d      	b.n	801844e <RegionEU868TxConfig+0x12e>
    }
    else
    {
        modem = MODEM_LORA;
 8018412:	2301      	movs	r3, #1
 8018414:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8018416:	4b29      	ldr	r3, [pc, #164]	@ (80184bc <RegionEU868TxConfig+0x19c>)
 8018418:	69dc      	ldr	r4, [r3, #28]
 801841a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801841e:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8018422:	7ff8      	ldrb	r0, [r7, #31]
 8018424:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8018428:	9208      	str	r2, [sp, #32]
 801842a:	2200      	movs	r2, #0
 801842c:	9207      	str	r2, [sp, #28]
 801842e:	2200      	movs	r2, #0
 8018430:	9206      	str	r2, [sp, #24]
 8018432:	2200      	movs	r2, #0
 8018434:	9205      	str	r2, [sp, #20]
 8018436:	2201      	movs	r2, #1
 8018438:	9204      	str	r2, [sp, #16]
 801843a:	2200      	movs	r2, #0
 801843c:	9203      	str	r2, [sp, #12]
 801843e:	2208      	movs	r2, #8
 8018440:	9202      	str	r2, [sp, #8]
 8018442:	2201      	movs	r2, #1
 8018444:	9201      	str	r2, [sp, #4]
 8018446:	9300      	str	r3, [sp, #0]
 8018448:	69bb      	ldr	r3, [r7, #24]
 801844a:	2200      	movs	r2, #0
 801844c:	47a0      	blx	r4
    }
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 801844e:	4b19      	ldr	r3, [pc, #100]	@ (80184b4 <RegionEU868TxConfig+0x194>)
 8018450:	681a      	ldr	r2, [r3, #0]
 8018452:	68fb      	ldr	r3, [r7, #12]
 8018454:	781b      	ldrb	r3, [r3, #0]
 8018456:	4619      	mov	r1, r3
 8018458:	460b      	mov	r3, r1
 801845a:	005b      	lsls	r3, r3, #1
 801845c:	440b      	add	r3, r1
 801845e:	009b      	lsls	r3, r3, #2
 8018460:	4413      	add	r3, r2
 8018462:	681a      	ldr	r2, [r3, #0]
 8018464:	68fb      	ldr	r3, [r7, #12]
 8018466:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801846a:	4619      	mov	r1, r3
 801846c:	4610      	mov	r0, r2
 801846e:	f7ff fa25 	bl	80178bc <RegionCommonTxConfigPrint>

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8018472:	68fb      	ldr	r3, [r7, #12]
 8018474:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8018478:	68fb      	ldr	r3, [r7, #12]
 801847a:	899b      	ldrh	r3, [r3, #12]
 801847c:	4619      	mov	r1, r3
 801847e:	4610      	mov	r0, r2
 8018480:	f7ff faaa 	bl	80179d8 <GetTimeOnAir>
 8018484:	4602      	mov	r2, r0
 8018486:	687b      	ldr	r3, [r7, #4]
 8018488:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 801848a:	4b0c      	ldr	r3, [pc, #48]	@ (80184bc <RegionEU868TxConfig+0x19c>)
 801848c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801848e:	68fa      	ldr	r2, [r7, #12]
 8018490:	8992      	ldrh	r2, [r2, #12]
 8018492:	b2d1      	uxtb	r1, r2
 8018494:	7ffa      	ldrb	r2, [r7, #31]
 8018496:	4610      	mov	r0, r2
 8018498:	4798      	blx	r3

    *txPower = txPowerLimited;
 801849a:	68bb      	ldr	r3, [r7, #8]
 801849c:	7f7a      	ldrb	r2, [r7, #29]
 801849e:	701a      	strb	r2, [r3, #0]
    return true;
 80184a0:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 80184a2:	4618      	mov	r0, r3
 80184a4:	3724      	adds	r7, #36	@ 0x24
 80184a6:	46bd      	mov	sp, r7
 80184a8:	bd90      	pop	{r4, r7, pc}
 80184aa:	bf00      	nop
 80184ac:	0801fc10 	.word	0x0801fc10
 80184b0:	20001a74 	.word	0x20001a74
 80184b4:	20001a70 	.word	0x20001a70
 80184b8:	0801fc18 	.word	0x0801fc18
 80184bc:	0801fccc 	.word	0x0801fccc

080184c0 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 80184c0:	b590      	push	{r4, r7, lr}
 80184c2:	b093      	sub	sp, #76	@ 0x4c
 80184c4:	af00      	add	r7, sp, #0
 80184c6:	60f8      	str	r0, [r7, #12]
 80184c8:	60b9      	str	r1, [r7, #8]
 80184ca:	607a      	str	r2, [r7, #4]
 80184cc:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 80184ce:	2307      	movs	r3, #7
 80184d0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 80184d4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80184d8:	2200      	movs	r2, #0
 80184da:	601a      	str	r2, [r3, #0]
 80184dc:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 80184de:	2300      	movs	r3, #0
 80184e0:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
    uint8_t bytesProcessed = 0;
 80184e4:	2300      	movs	r3, #0
 80184e6:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    uint16_t chMask = 0;
 80184ea:	2300      	movs	r3, #0
 80184ec:	877b      	strh	r3, [r7, #58]	@ 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 80184ee:	e085      	b.n	80185fc <RegionEU868LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 80184f0:	68fb      	ldr	r3, [r7, #12]
 80184f2:	685a      	ldr	r2, [r3, #4]
 80184f4:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80184f8:	4413      	add	r3, r2
 80184fa:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 80184fe:	4611      	mov	r1, r2
 8018500:	4618      	mov	r0, r3
 8018502:	f7fe fe2f 	bl	8017164 <RegionCommonParseLinkAdrReq>
 8018506:	4603      	mov	r3, r0
 8018508:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

        if( nextIndex == 0 )
 801850c:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8018510:	2b00      	cmp	r3, #0
 8018512:	d07b      	beq.n	801860c <RegionEU868LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8018514:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8018518:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 801851c:	4413      	add	r3, r2
 801851e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8018522:	2307      	movs	r3, #7
 8018524:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 8018528:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801852c:	877b      	strh	r3, [r7, #58]	@ 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 801852e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8018532:	2b00      	cmp	r3, #0
 8018534:	d109      	bne.n	801854a <RegionEU868LinkAdrReq+0x8a>
 8018536:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8018538:	2b00      	cmp	r3, #0
 801853a:	d106      	bne.n	801854a <RegionEU868LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 801853c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8018540:	f023 0301 	bic.w	r3, r3, #1
 8018544:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8018548:	e058      	b.n	80185fc <RegionEU868LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 801854a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801854e:	2b00      	cmp	r3, #0
 8018550:	d003      	beq.n	801855a <RegionEU868LinkAdrReq+0x9a>
 8018552:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8018556:	2b05      	cmp	r3, #5
 8018558:	d903      	bls.n	8018562 <RegionEU868LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 801855a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 801855e:	2b06      	cmp	r3, #6
 8018560:	d906      	bls.n	8018570 <RegionEU868LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 8018562:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8018566:	f023 0301 	bic.w	r3, r3, #1
 801856a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 801856e:	e045      	b.n	80185fc <RegionEU868LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8018570:	2300      	movs	r3, #0
 8018572:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8018576:	e03d      	b.n	80185f4 <RegionEU868LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 8018578:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801857c:	2b06      	cmp	r3, #6
 801857e:	d118      	bne.n	80185b2 <RegionEU868LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 8018580:	4b5f      	ldr	r3, [pc, #380]	@ (8018700 <RegionEU868LinkAdrReq+0x240>)
 8018582:	6819      	ldr	r1, [r3, #0]
 8018584:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8018588:	4613      	mov	r3, r2
 801858a:	005b      	lsls	r3, r3, #1
 801858c:	4413      	add	r3, r2
 801858e:	009b      	lsls	r3, r3, #2
 8018590:	440b      	add	r3, r1
 8018592:	681b      	ldr	r3, [r3, #0]
 8018594:	2b00      	cmp	r3, #0
 8018596:	d028      	beq.n	80185ea <RegionEU868LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 8018598:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 801859c:	2201      	movs	r2, #1
 801859e:	fa02 f303 	lsl.w	r3, r2, r3
 80185a2:	b21a      	sxth	r2, r3
 80185a4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80185a6:	b21b      	sxth	r3, r3
 80185a8:	4313      	orrs	r3, r2
 80185aa:	b21b      	sxth	r3, r3
 80185ac:	b29b      	uxth	r3, r3
 80185ae:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80185b0:	e01b      	b.n	80185ea <RegionEU868LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 80185b2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80185b4:	461a      	mov	r2, r3
 80185b6:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80185ba:	fa42 f303 	asr.w	r3, r2, r3
 80185be:	f003 0301 	and.w	r3, r3, #1
 80185c2:	2b00      	cmp	r3, #0
 80185c4:	d011      	beq.n	80185ea <RegionEU868LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 80185c6:	4b4e      	ldr	r3, [pc, #312]	@ (8018700 <RegionEU868LinkAdrReq+0x240>)
 80185c8:	6819      	ldr	r1, [r3, #0]
 80185ca:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80185ce:	4613      	mov	r3, r2
 80185d0:	005b      	lsls	r3, r3, #1
 80185d2:	4413      	add	r3, r2
 80185d4:	009b      	lsls	r3, r3, #2
 80185d6:	440b      	add	r3, r1
 80185d8:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 80185da:	2b00      	cmp	r3, #0
 80185dc:	d105      	bne.n	80185ea <RegionEU868LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 80185de:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80185e2:	f023 0301 	bic.w	r3, r3, #1
 80185e6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 80185ea:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80185ee:	3301      	adds	r3, #1
 80185f0:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 80185f4:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80185f8:	2b0f      	cmp	r3, #15
 80185fa:	d9bd      	bls.n	8018578 <RegionEU868LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 80185fc:	68fb      	ldr	r3, [r7, #12]
 80185fe:	7a1b      	ldrb	r3, [r3, #8]
 8018600:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8018604:	429a      	cmp	r2, r3
 8018606:	f4ff af73 	bcc.w	80184f0 <RegionEU868LinkAdrReq+0x30>
 801860a:	e000      	b.n	801860e <RegionEU868LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 801860c:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 801860e:	2302      	movs	r3, #2
 8018610:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8018614:	68fb      	ldr	r3, [r7, #12]
 8018616:	7a5b      	ldrb	r3, [r3, #9]
 8018618:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    phyParam = RegionEU868GetPhyParam( &getPhy );
 801861c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8018620:	4618      	mov	r0, r3
 8018622:	f7ff fa29 	bl	8017a78 <RegionEU868GetPhyParam>
 8018626:	4603      	mov	r3, r0
 8018628:	633b      	str	r3, [r7, #48]	@ 0x30

    linkAdrVerifyParams.Status = status;
 801862a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801862e:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8018630:	68fb      	ldr	r3, [r7, #12]
 8018632:	7a9b      	ldrb	r3, [r3, #10]
 8018634:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8018636:	f997 303d 	ldrsb.w	r3, [r7, #61]	@ 0x3d
 801863a:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 801863c:	f997 303e 	ldrsb.w	r3, [r7, #62]	@ 0x3e
 8018640:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8018642:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8018646:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8018648:	68fb      	ldr	r3, [r7, #12]
 801864a:	f993 300b 	ldrsb.w	r3, [r3, #11]
 801864e:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8018650:	68fb      	ldr	r3, [r7, #12]
 8018652:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8018656:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8018658:	68fb      	ldr	r3, [r7, #12]
 801865a:	7b5b      	ldrb	r3, [r3, #13]
 801865c:	b25b      	sxtb	r3, r3
 801865e:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 8018660:	2310      	movs	r3, #16
 8018662:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 8018664:	f107 033a 	add.w	r3, r7, #58	@ 0x3a
 8018668:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 801866a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801866c:	b25b      	sxtb	r3, r3
 801866e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 8018672:	2307      	movs	r3, #7
 8018674:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8018678:	4b21      	ldr	r3, [pc, #132]	@ (8018700 <RegionEU868LinkAdrReq+0x240>)
 801867a:	681b      	ldr	r3, [r3, #0]
 801867c:	62bb      	str	r3, [r7, #40]	@ 0x28
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 801867e:	2307      	movs	r3, #7
 8018680:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 8018684:	2300      	movs	r3, #0
 8018686:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 801868a:	68fb      	ldr	r3, [r7, #12]
 801868c:	681b      	ldr	r3, [r3, #0]
 801868e:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8018690:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8018694:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8018698:	1c9a      	adds	r2, r3, #2
 801869a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801869e:	1c59      	adds	r1, r3, #1
 80186a0:	f107 0010 	add.w	r0, r7, #16
 80186a4:	4623      	mov	r3, r4
 80186a6:	f7fe fdae 	bl	8017206 <RegionCommonLinkAdrReqVerifyParams>
 80186aa:	4603      	mov	r3, r0
 80186ac:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 80186b0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80186b4:	2b07      	cmp	r3, #7
 80186b6:	d10d      	bne.n	80186d4 <RegionEU868LinkAdrReq+0x214>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 80186b8:	4b11      	ldr	r3, [pc, #68]	@ (8018700 <RegionEU868LinkAdrReq+0x240>)
 80186ba:	681b      	ldr	r3, [r3, #0]
 80186bc:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80186c0:	220c      	movs	r2, #12
 80186c2:	2100      	movs	r1, #0
 80186c4:	4618      	mov	r0, r3
 80186c6:	f001 fd2f 	bl	801a128 <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 80186ca:	4b0d      	ldr	r3, [pc, #52]	@ (8018700 <RegionEU868LinkAdrReq+0x240>)
 80186cc:	681b      	ldr	r3, [r3, #0]
 80186ce:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80186d0:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 80186d4:	f997 203d 	ldrsb.w	r2, [r7, #61]	@ 0x3d
 80186d8:	68bb      	ldr	r3, [r7, #8]
 80186da:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 80186dc:	f997 203e 	ldrsb.w	r2, [r7, #62]	@ 0x3e
 80186e0:	687b      	ldr	r3, [r7, #4]
 80186e2:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 80186e4:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 80186e8:	683b      	ldr	r3, [r7, #0]
 80186ea:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 80186ec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80186ee:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 80186f2:	701a      	strb	r2, [r3, #0]

#endif /* REGION_EU868 */
    return status;
 80186f4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 80186f8:	4618      	mov	r0, r3
 80186fa:	374c      	adds	r7, #76	@ 0x4c
 80186fc:	46bd      	mov	sp, r7
 80186fe:	bd90      	pop	{r4, r7, pc}
 8018700:	20001a70 	.word	0x20001a70

08018704 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8018704:	b580      	push	{r7, lr}
 8018706:	b084      	sub	sp, #16
 8018708:	af00      	add	r7, sp, #0
 801870a:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 801870c:	2307      	movs	r3, #7
 801870e:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8018710:	2300      	movs	r3, #0
 8018712:	73bb      	strb	r3, [r7, #14]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 8018714:	687b      	ldr	r3, [r7, #4]
 8018716:	685b      	ldr	r3, [r3, #4]
 8018718:	f107 020e 	add.w	r2, r7, #14
 801871c:	4611      	mov	r1, r2
 801871e:	4618      	mov	r0, r3
 8018720:	f7ff f8e4 	bl	80178ec <VerifyRfFreq>
 8018724:	4603      	mov	r3, r0
 8018726:	f083 0301 	eor.w	r3, r3, #1
 801872a:	b2db      	uxtb	r3, r3
 801872c:	2b00      	cmp	r3, #0
 801872e:	d003      	beq.n	8018738 <RegionEU868RxParamSetupReq+0x34>
    {
        status &= 0xFE; // Channel frequency KO
 8018730:	7bfb      	ldrb	r3, [r7, #15]
 8018732:	f023 0301 	bic.w	r3, r3, #1
 8018736:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 8018738:	687b      	ldr	r3, [r7, #4]
 801873a:	f993 3000 	ldrsb.w	r3, [r3]
 801873e:	2207      	movs	r2, #7
 8018740:	2100      	movs	r1, #0
 8018742:	4618      	mov	r0, r3
 8018744:	f7fe fb4d 	bl	8016de2 <RegionCommonValueInRange>
 8018748:	4603      	mov	r3, r0
 801874a:	2b00      	cmp	r3, #0
 801874c:	d103      	bne.n	8018756 <RegionEU868RxParamSetupReq+0x52>
    {
        status &= 0xFD; // Datarate KO
 801874e:	7bfb      	ldrb	r3, [r7, #15]
 8018750:	f023 0302 	bic.w	r3, r3, #2
 8018754:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 8018756:	687b      	ldr	r3, [r7, #4]
 8018758:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801875c:	2205      	movs	r2, #5
 801875e:	2100      	movs	r1, #0
 8018760:	4618      	mov	r0, r3
 8018762:	f7fe fb3e 	bl	8016de2 <RegionCommonValueInRange>
 8018766:	4603      	mov	r3, r0
 8018768:	2b00      	cmp	r3, #0
 801876a:	d103      	bne.n	8018774 <RegionEU868RxParamSetupReq+0x70>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 801876c:	7bfb      	ldrb	r3, [r7, #15]
 801876e:	f023 0304 	bic.w	r3, r3, #4
 8018772:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_EU868 */
    return status;
 8018774:	7bfb      	ldrb	r3, [r7, #15]
}
 8018776:	4618      	mov	r0, r3
 8018778:	3710      	adds	r7, #16
 801877a:	46bd      	mov	sp, r7
 801877c:	bd80      	pop	{r7, pc}
	...

08018780 <RegionEU868NewChannelReq>:

int8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8018780:	b580      	push	{r7, lr}
 8018782:	b086      	sub	sp, #24
 8018784:	af00      	add	r7, sp, #0
 8018786:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8018788:	2303      	movs	r3, #3
 801878a:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 801878c:	687b      	ldr	r3, [r7, #4]
 801878e:	681b      	ldr	r3, [r3, #0]
 8018790:	681b      	ldr	r3, [r3, #0]
 8018792:	2b00      	cmp	r3, #0
 8018794:	d114      	bne.n	80187c0 <RegionEU868NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 8018796:	687b      	ldr	r3, [r7, #4]
 8018798:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801879c:	b2db      	uxtb	r3, r3
 801879e:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 80187a0:	f107 0308 	add.w	r3, r7, #8
 80187a4:	4618      	mov	r0, r3
 80187a6:	f000 f9ff 	bl	8018ba8 <RegionEU868ChannelsRemove>
 80187aa:	4603      	mov	r3, r0
 80187ac:	f083 0301 	eor.w	r3, r3, #1
 80187b0:	b2db      	uxtb	r3, r3
 80187b2:	2b00      	cmp	r3, #0
 80187b4:	d03b      	beq.n	801882e <RegionEU868NewChannelReq+0xae>
        {
            status &= 0xFC;
 80187b6:	7dfb      	ldrb	r3, [r7, #23]
 80187b8:	f023 0303 	bic.w	r3, r3, #3
 80187bc:	75fb      	strb	r3, [r7, #23]
 80187be:	e036      	b.n	801882e <RegionEU868NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 80187c0:	687b      	ldr	r3, [r7, #4]
 80187c2:	681b      	ldr	r3, [r3, #0]
 80187c4:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 80187c6:	687b      	ldr	r3, [r7, #4]
 80187c8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80187cc:	b2db      	uxtb	r3, r3
 80187ce:	743b      	strb	r3, [r7, #16]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 80187d0:	f107 030c 	add.w	r3, r7, #12
 80187d4:	4618      	mov	r0, r3
 80187d6:	f000 f945 	bl	8018a64 <RegionEU868ChannelAdd>
 80187da:	4603      	mov	r3, r0
 80187dc:	2b06      	cmp	r3, #6
 80187de:	d820      	bhi.n	8018822 <RegionEU868NewChannelReq+0xa2>
 80187e0:	a201      	add	r2, pc, #4	@ (adr r2, 80187e8 <RegionEU868NewChannelReq+0x68>)
 80187e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80187e6:	bf00      	nop
 80187e8:	0801882d 	.word	0x0801882d
 80187ec:	08018823 	.word	0x08018823
 80187f0:	08018823 	.word	0x08018823
 80187f4:	08018823 	.word	0x08018823
 80187f8:	08018805 	.word	0x08018805
 80187fc:	0801880f 	.word	0x0801880f
 8018800:	08018819 	.word	0x08018819
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 8018804:	7dfb      	ldrb	r3, [r7, #23]
 8018806:	f023 0301 	bic.w	r3, r3, #1
 801880a:	75fb      	strb	r3, [r7, #23]
                break;
 801880c:	e00f      	b.n	801882e <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 801880e:	7dfb      	ldrb	r3, [r7, #23]
 8018810:	f023 0302 	bic.w	r3, r3, #2
 8018814:	75fb      	strb	r3, [r7, #23]
                break;
 8018816:	e00a      	b.n	801882e <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 8018818:	7dfb      	ldrb	r3, [r7, #23]
 801881a:	f023 0303 	bic.w	r3, r3, #3
 801881e:	75fb      	strb	r3, [r7, #23]
                break;
 8018820:	e005      	b.n	801882e <RegionEU868NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 8018822:	7dfb      	ldrb	r3, [r7, #23]
 8018824:	f023 0303 	bic.w	r3, r3, #3
 8018828:	75fb      	strb	r3, [r7, #23]
                break;
 801882a:	e000      	b.n	801882e <RegionEU868NewChannelReq+0xae>
                break;
 801882c:	bf00      	nop
            }
        }
    }

    return status;
 801882e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8018832:	4618      	mov	r0, r3
 8018834:	3718      	adds	r7, #24
 8018836:	46bd      	mov	sp, r7
 8018838:	bd80      	pop	{r7, pc}
 801883a:	bf00      	nop

0801883c <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 801883c:	b480      	push	{r7}
 801883e:	b083      	sub	sp, #12
 8018840:	af00      	add	r7, sp, #0
 8018842:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8018844:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018848:	4618      	mov	r0, r3
 801884a:	370c      	adds	r7, #12
 801884c:	46bd      	mov	sp, r7
 801884e:	bc80      	pop	{r7}
 8018850:	4770      	bx	lr
	...

08018854 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8018854:	b580      	push	{r7, lr}
 8018856:	b084      	sub	sp, #16
 8018858:	af00      	add	r7, sp, #0
 801885a:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 801885c:	2303      	movs	r3, #3
 801885e:	73fb      	strb	r3, [r7, #15]

#if defined( REGION_EU868 )
    uint8_t band = 0;
 8018860:	2300      	movs	r3, #0
 8018862:	73bb      	strb	r3, [r7, #14]

    if( dlChannelReq->ChannelId >= ( CHANNELS_MASK_SIZE * 16 ) )
 8018864:	687b      	ldr	r3, [r7, #4]
 8018866:	781b      	ldrb	r3, [r3, #0]
 8018868:	2b0f      	cmp	r3, #15
 801886a:	d901      	bls.n	8018870 <RegionEU868DlChannelReq+0x1c>
    {
        return 0;
 801886c:	2300      	movs	r3, #0
 801886e:	e035      	b.n	80188dc <RegionEU868DlChannelReq+0x88>
    }

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 8018870:	687b      	ldr	r3, [r7, #4]
 8018872:	685b      	ldr	r3, [r3, #4]
 8018874:	f107 020e 	add.w	r2, r7, #14
 8018878:	4611      	mov	r1, r2
 801887a:	4618      	mov	r0, r3
 801887c:	f7ff f836 	bl	80178ec <VerifyRfFreq>
 8018880:	4603      	mov	r3, r0
 8018882:	f083 0301 	eor.w	r3, r3, #1
 8018886:	b2db      	uxtb	r3, r3
 8018888:	2b00      	cmp	r3, #0
 801888a:	d003      	beq.n	8018894 <RegionEU868DlChannelReq+0x40>
    {
        status &= 0xFE;
 801888c:	7bfb      	ldrb	r3, [r7, #15]
 801888e:	f023 0301 	bic.w	r3, r3, #1
 8018892:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8018894:	4b13      	ldr	r3, [pc, #76]	@ (80188e4 <RegionEU868DlChannelReq+0x90>)
 8018896:	681a      	ldr	r2, [r3, #0]
 8018898:	687b      	ldr	r3, [r7, #4]
 801889a:	781b      	ldrb	r3, [r3, #0]
 801889c:	4619      	mov	r1, r3
 801889e:	460b      	mov	r3, r1
 80188a0:	005b      	lsls	r3, r3, #1
 80188a2:	440b      	add	r3, r1
 80188a4:	009b      	lsls	r3, r3, #2
 80188a6:	4413      	add	r3, r2
 80188a8:	681b      	ldr	r3, [r3, #0]
 80188aa:	2b00      	cmp	r3, #0
 80188ac:	d103      	bne.n	80188b6 <RegionEU868DlChannelReq+0x62>
    {
        status &= 0xFD;
 80188ae:	7bfb      	ldrb	r3, [r7, #15]
 80188b0:	f023 0302 	bic.w	r3, r3, #2
 80188b4:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 80188b6:	7bfb      	ldrb	r3, [r7, #15]
 80188b8:	2b03      	cmp	r3, #3
 80188ba:	d10d      	bne.n	80188d8 <RegionEU868DlChannelReq+0x84>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 80188bc:	4b09      	ldr	r3, [pc, #36]	@ (80188e4 <RegionEU868DlChannelReq+0x90>)
 80188be:	6819      	ldr	r1, [r3, #0]
 80188c0:	687b      	ldr	r3, [r7, #4]
 80188c2:	781b      	ldrb	r3, [r3, #0]
 80188c4:	4618      	mov	r0, r3
 80188c6:	687b      	ldr	r3, [r7, #4]
 80188c8:	685a      	ldr	r2, [r3, #4]
 80188ca:	4603      	mov	r3, r0
 80188cc:	005b      	lsls	r3, r3, #1
 80188ce:	4403      	add	r3, r0
 80188d0:	009b      	lsls	r3, r3, #2
 80188d2:	440b      	add	r3, r1
 80188d4:	3304      	adds	r3, #4
 80188d6:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_EU868 */
    return status;
 80188d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80188dc:	4618      	mov	r0, r3
 80188de:	3710      	adds	r7, #16
 80188e0:	46bd      	mov	sp, r7
 80188e2:	bd80      	pop	{r7, pc}
 80188e4:	20001a70 	.word	0x20001a70

080188e8 <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 80188e8:	b480      	push	{r7}
 80188ea:	b083      	sub	sp, #12
 80188ec:	af00      	add	r7, sp, #0
 80188ee:	4603      	mov	r3, r0
 80188f0:	460a      	mov	r2, r1
 80188f2:	71fb      	strb	r3, [r7, #7]
 80188f4:	4613      	mov	r3, r2
 80188f6:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_EU868 )
    return currentDr;
 80188f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_EU868 */
}
 80188fc:	4618      	mov	r0, r3
 80188fe:	370c      	adds	r7, #12
 8018900:	46bd      	mov	sp, r7
 8018902:	bc80      	pop	{r7}
 8018904:	4770      	bx	lr
	...

08018908 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8018908:	b580      	push	{r7, lr}
 801890a:	b09a      	sub	sp, #104	@ 0x68
 801890c:	af02      	add	r7, sp, #8
 801890e:	60f8      	str	r0, [r7, #12]
 8018910:	60b9      	str	r1, [r7, #8]
 8018912:	607a      	str	r2, [r7, #4]
 8018914:	603b      	str	r3, [r7, #0]
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 8018916:	2300      	movs	r3, #0
 8018918:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
    uint8_t nbRestrictedChannels = 0;
 801891c:	2300      	movs	r3, #0
 801891e:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 8018922:	2300      	movs	r3, #0
 8018924:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8018926:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 801892a:	2200      	movs	r2, #0
 801892c:	601a      	str	r2, [r3, #0]
 801892e:	605a      	str	r2, [r3, #4]
 8018930:	609a      	str	r2, [r3, #8]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8018932:	230c      	movs	r3, #12
 8018934:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 8018938:	2307      	movs	r3, #7
 801893a:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 801893c:	4b47      	ldr	r3, [pc, #284]	@ (8018a5c <RegionEU868NextChannel+0x154>)
 801893e:	681b      	ldr	r3, [r3, #0]
 8018940:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8018944:	2201      	movs	r2, #1
 8018946:	2100      	movs	r1, #0
 8018948:	4618      	mov	r0, r3
 801894a:	f7fe fa9b 	bl	8016e84 <RegionCommonCountChannels>
 801894e:	4603      	mov	r3, r0
 8018950:	2b00      	cmp	r3, #0
 8018952:	d10a      	bne.n	801896a <RegionEU868NextChannel+0x62>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8018954:	4b41      	ldr	r3, [pc, #260]	@ (8018a5c <RegionEU868NextChannel+0x154>)
 8018956:	681b      	ldr	r3, [r3, #0]
 8018958:	f8b3 2360 	ldrh.w	r2, [r3, #864]	@ 0x360
 801895c:	4b3f      	ldr	r3, [pc, #252]	@ (8018a5c <RegionEU868NextChannel+0x154>)
 801895e:	681b      	ldr	r3, [r3, #0]
 8018960:	f042 0207 	orr.w	r2, r2, #7
 8018964:	b292      	uxth	r2, r2
 8018966:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 801896a:	68fb      	ldr	r3, [r7, #12]
 801896c:	7a5b      	ldrb	r3, [r3, #9]
 801896e:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8018970:	68fb      	ldr	r3, [r7, #12]
 8018972:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8018976:	b2db      	uxtb	r3, r3
 8018978:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 801897a:	4b38      	ldr	r3, [pc, #224]	@ (8018a5c <RegionEU868NextChannel+0x154>)
 801897c:	681b      	ldr	r3, [r3, #0]
 801897e:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8018982:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8018984:	4b35      	ldr	r3, [pc, #212]	@ (8018a5c <RegionEU868NextChannel+0x154>)
 8018986:	681b      	ldr	r3, [r3, #0]
 8018988:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 801898a:	4b35      	ldr	r3, [pc, #212]	@ (8018a60 <RegionEU868NextChannel+0x158>)
 801898c:	681b      	ldr	r3, [r3, #0]
 801898e:	623b      	str	r3, [r7, #32]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 8018990:	2310      	movs	r3, #16
 8018992:	84bb      	strh	r3, [r7, #36]	@ 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 8018994:	f107 0312 	add.w	r3, r7, #18
 8018998:	62bb      	str	r3, [r7, #40]	@ 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 801899a:	68fb      	ldr	r3, [r7, #12]
 801899c:	681b      	ldr	r3, [r3, #0]
 801899e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 80189a0:	68fb      	ldr	r3, [r7, #12]
 80189a2:	685b      	ldr	r3, [r3, #4]
 80189a4:	633b      	str	r3, [r7, #48]	@ 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 80189a6:	68fb      	ldr	r3, [r7, #12]
 80189a8:	7a9b      	ldrb	r3, [r3, #10]
 80189aa:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 80189ae:	2306      	movs	r3, #6
 80189b0:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 80189b4:	68fa      	ldr	r2, [r7, #12]
 80189b6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80189ba:	320c      	adds	r2, #12
 80189bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80189c0:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 80189c4:	68fb      	ldr	r3, [r7, #12]
 80189c6:	7d1b      	ldrb	r3, [r3, #20]
 80189c8:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 80189cc:	68fb      	ldr	r3, [r7, #12]
 80189ce:	f993 2008 	ldrsb.w	r2, [r3, #8]
 80189d2:	68fb      	ldr	r3, [r7, #12]
 80189d4:	8adb      	ldrh	r3, [r3, #22]
 80189d6:	4619      	mov	r1, r3
 80189d8:	4610      	mov	r0, r2
 80189da:	f7fe fffd 	bl	80179d8 <GetTimeOnAir>
 80189de:	4603      	mov	r3, r0
 80189e0:	647b      	str	r3, [r7, #68]	@ 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 80189e2:	f107 0314 	add.w	r3, r7, #20
 80189e6:	64bb      	str	r3, [r7, #72]	@ 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 80189e8:	f107 015e 	add.w	r1, r7, #94	@ 0x5e
 80189ec:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 80189f0:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 80189f4:	687b      	ldr	r3, [r7, #4]
 80189f6:	9301      	str	r3, [sp, #4]
 80189f8:	f107 035d 	add.w	r3, r7, #93	@ 0x5d
 80189fc:	9300      	str	r3, [sp, #0]
 80189fe:	460b      	mov	r3, r1
 8018a00:	6839      	ldr	r1, [r7, #0]
 8018a02:	f7fe fe56 	bl	80176b2 <RegionCommonIdentifyChannels>
 8018a06:	4603      	mov	r3, r0
 8018a08:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8018a0c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8018a10:	2b00      	cmp	r3, #0
 8018a12:	d10e      	bne.n	8018a32 <RegionEU868NextChannel+0x12a>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8018a14:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8018a18:	3b01      	subs	r3, #1
 8018a1a:	4619      	mov	r1, r3
 8018a1c:	2000      	movs	r0, #0
 8018a1e:	f001 fb31 	bl	801a084 <randr>
 8018a22:	4603      	mov	r3, r0
 8018a24:	3360      	adds	r3, #96	@ 0x60
 8018a26:	443b      	add	r3, r7
 8018a28:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8018a2c:	68bb      	ldr	r3, [r7, #8]
 8018a2e:	701a      	strb	r2, [r3, #0]
 8018a30:	e00e      	b.n	8018a50 <RegionEU868NextChannel+0x148>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 8018a32:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8018a36:	2b0c      	cmp	r3, #12
 8018a38:	d10a      	bne.n	8018a50 <RegionEU868NextChannel+0x148>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8018a3a:	4b08      	ldr	r3, [pc, #32]	@ (8018a5c <RegionEU868NextChannel+0x154>)
 8018a3c:	681b      	ldr	r3, [r3, #0]
 8018a3e:	f8b3 2360 	ldrh.w	r2, [r3, #864]	@ 0x360
 8018a42:	4b06      	ldr	r3, [pc, #24]	@ (8018a5c <RegionEU868NextChannel+0x154>)
 8018a44:	681b      	ldr	r3, [r3, #0]
 8018a46:	f042 0207 	orr.w	r2, r2, #7
 8018a4a:	b292      	uxth	r2, r2
 8018a4c:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    }
    return status;
 8018a50:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8018a54:	4618      	mov	r0, r3
 8018a56:	3760      	adds	r7, #96	@ 0x60
 8018a58:	46bd      	mov	sp, r7
 8018a5a:	bd80      	pop	{r7, pc}
 8018a5c:	20001a70 	.word	0x20001a70
 8018a60:	20001a74 	.word	0x20001a74

08018a64 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8018a64:	b580      	push	{r7, lr}
 8018a66:	b084      	sub	sp, #16
 8018a68:	af00      	add	r7, sp, #0
 8018a6a:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8018a6c:	2300      	movs	r3, #0
 8018a6e:	733b      	strb	r3, [r7, #12]
    bool drInvalid = false;
 8018a70:	2300      	movs	r3, #0
 8018a72:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 8018a74:	2300      	movs	r3, #0
 8018a76:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 8018a78:	687b      	ldr	r3, [r7, #4]
 8018a7a:	791b      	ldrb	r3, [r3, #4]
 8018a7c:	737b      	strb	r3, [r7, #13]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8018a7e:	7b7b      	ldrb	r3, [r7, #13]
 8018a80:	2b02      	cmp	r3, #2
 8018a82:	d801      	bhi.n	8018a88 <RegionEU868ChannelAdd+0x24>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8018a84:	2306      	movs	r3, #6
 8018a86:	e089      	b.n	8018b9c <RegionEU868ChannelAdd+0x138>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 8018a88:	7b7b      	ldrb	r3, [r7, #13]
 8018a8a:	2b0f      	cmp	r3, #15
 8018a8c:	d901      	bls.n	8018a92 <RegionEU868ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8018a8e:	2303      	movs	r3, #3
 8018a90:	e084      	b.n	8018b9c <RegionEU868ChannelAdd+0x138>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8018a92:	687b      	ldr	r3, [r7, #4]
 8018a94:	681b      	ldr	r3, [r3, #0]
 8018a96:	7a1b      	ldrb	r3, [r3, #8]
 8018a98:	f343 0303 	sbfx	r3, r3, #0, #4
 8018a9c:	b25b      	sxtb	r3, r3
 8018a9e:	2207      	movs	r2, #7
 8018aa0:	2100      	movs	r1, #0
 8018aa2:	4618      	mov	r0, r3
 8018aa4:	f7fe f99d 	bl	8016de2 <RegionCommonValueInRange>
 8018aa8:	4603      	mov	r3, r0
 8018aaa:	2b00      	cmp	r3, #0
 8018aac:	d101      	bne.n	8018ab2 <RegionEU868ChannelAdd+0x4e>
    {
        drInvalid = true;
 8018aae:	2301      	movs	r3, #1
 8018ab0:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8018ab2:	687b      	ldr	r3, [r7, #4]
 8018ab4:	681b      	ldr	r3, [r3, #0]
 8018ab6:	7a1b      	ldrb	r3, [r3, #8]
 8018ab8:	f343 1303 	sbfx	r3, r3, #4, #4
 8018abc:	b25b      	sxtb	r3, r3
 8018abe:	2207      	movs	r2, #7
 8018ac0:	2100      	movs	r1, #0
 8018ac2:	4618      	mov	r0, r3
 8018ac4:	f7fe f98d 	bl	8016de2 <RegionCommonValueInRange>
 8018ac8:	4603      	mov	r3, r0
 8018aca:	2b00      	cmp	r3, #0
 8018acc:	d101      	bne.n	8018ad2 <RegionEU868ChannelAdd+0x6e>
    {
        drInvalid = true;
 8018ace:	2301      	movs	r3, #1
 8018ad0:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8018ad2:	687b      	ldr	r3, [r7, #4]
 8018ad4:	681b      	ldr	r3, [r3, #0]
 8018ad6:	7a1b      	ldrb	r3, [r3, #8]
 8018ad8:	f343 0303 	sbfx	r3, r3, #0, #4
 8018adc:	b25a      	sxtb	r2, r3
 8018ade:	687b      	ldr	r3, [r7, #4]
 8018ae0:	681b      	ldr	r3, [r3, #0]
 8018ae2:	7a1b      	ldrb	r3, [r3, #8]
 8018ae4:	f343 1303 	sbfx	r3, r3, #4, #4
 8018ae8:	b25b      	sxtb	r3, r3
 8018aea:	429a      	cmp	r2, r3
 8018aec:	dd01      	ble.n	8018af2 <RegionEU868ChannelAdd+0x8e>
    {
        drInvalid = true;
 8018aee:	2301      	movs	r3, #1
 8018af0:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 8018af2:	7bbb      	ldrb	r3, [r7, #14]
 8018af4:	f083 0301 	eor.w	r3, r3, #1
 8018af8:	b2db      	uxtb	r3, r3
 8018afa:	2b00      	cmp	r3, #0
 8018afc:	d010      	beq.n	8018b20 <RegionEU868ChannelAdd+0xbc>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 8018afe:	687b      	ldr	r3, [r7, #4]
 8018b00:	681b      	ldr	r3, [r3, #0]
 8018b02:	681b      	ldr	r3, [r3, #0]
 8018b04:	f107 020c 	add.w	r2, r7, #12
 8018b08:	4611      	mov	r1, r2
 8018b0a:	4618      	mov	r0, r3
 8018b0c:	f7fe feee 	bl	80178ec <VerifyRfFreq>
 8018b10:	4603      	mov	r3, r0
 8018b12:	f083 0301 	eor.w	r3, r3, #1
 8018b16:	b2db      	uxtb	r3, r3
 8018b18:	2b00      	cmp	r3, #0
 8018b1a:	d001      	beq.n	8018b20 <RegionEU868ChannelAdd+0xbc>
        {
            freqInvalid = true;
 8018b1c:	2301      	movs	r3, #1
 8018b1e:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8018b20:	7bfb      	ldrb	r3, [r7, #15]
 8018b22:	2b00      	cmp	r3, #0
 8018b24:	d004      	beq.n	8018b30 <RegionEU868ChannelAdd+0xcc>
 8018b26:	7bbb      	ldrb	r3, [r7, #14]
 8018b28:	2b00      	cmp	r3, #0
 8018b2a:	d001      	beq.n	8018b30 <RegionEU868ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8018b2c:	2306      	movs	r3, #6
 8018b2e:	e035      	b.n	8018b9c <RegionEU868ChannelAdd+0x138>
    }
    if( drInvalid == true )
 8018b30:	7bfb      	ldrb	r3, [r7, #15]
 8018b32:	2b00      	cmp	r3, #0
 8018b34:	d001      	beq.n	8018b3a <RegionEU868ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 8018b36:	2305      	movs	r3, #5
 8018b38:	e030      	b.n	8018b9c <RegionEU868ChannelAdd+0x138>
    }
    if( freqInvalid == true )
 8018b3a:	7bbb      	ldrb	r3, [r7, #14]
 8018b3c:	2b00      	cmp	r3, #0
 8018b3e:	d001      	beq.n	8018b44 <RegionEU868ChannelAdd+0xe0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8018b40:	2304      	movs	r3, #4
 8018b42:	e02b      	b.n	8018b9c <RegionEU868ChannelAdd+0x138>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 8018b44:	4b17      	ldr	r3, [pc, #92]	@ (8018ba4 <RegionEU868ChannelAdd+0x140>)
 8018b46:	6819      	ldr	r1, [r3, #0]
 8018b48:	7b7a      	ldrb	r2, [r7, #13]
 8018b4a:	4613      	mov	r3, r2
 8018b4c:	005b      	lsls	r3, r3, #1
 8018b4e:	4413      	add	r3, r2
 8018b50:	009b      	lsls	r3, r3, #2
 8018b52:	18c8      	adds	r0, r1, r3
 8018b54:	687b      	ldr	r3, [r7, #4]
 8018b56:	681b      	ldr	r3, [r3, #0]
 8018b58:	220c      	movs	r2, #12
 8018b5a:	4619      	mov	r1, r3
 8018b5c:	f001 faa9 	bl	801a0b2 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 8018b60:	4b10      	ldr	r3, [pc, #64]	@ (8018ba4 <RegionEU868ChannelAdd+0x140>)
 8018b62:	6819      	ldr	r1, [r3, #0]
 8018b64:	7b7a      	ldrb	r2, [r7, #13]
 8018b66:	7b38      	ldrb	r0, [r7, #12]
 8018b68:	4613      	mov	r3, r2
 8018b6a:	005b      	lsls	r3, r3, #1
 8018b6c:	4413      	add	r3, r2
 8018b6e:	009b      	lsls	r3, r3, #2
 8018b70:	440b      	add	r3, r1
 8018b72:	3309      	adds	r3, #9
 8018b74:	4602      	mov	r2, r0
 8018b76:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 8018b78:	4b0a      	ldr	r3, [pc, #40]	@ (8018ba4 <RegionEU868ChannelAdd+0x140>)
 8018b7a:	681b      	ldr	r3, [r3, #0]
 8018b7c:	f8b3 3360 	ldrh.w	r3, [r3, #864]	@ 0x360
 8018b80:	b21a      	sxth	r2, r3
 8018b82:	7b7b      	ldrb	r3, [r7, #13]
 8018b84:	2101      	movs	r1, #1
 8018b86:	fa01 f303 	lsl.w	r3, r1, r3
 8018b8a:	b21b      	sxth	r3, r3
 8018b8c:	4313      	orrs	r3, r2
 8018b8e:	b21a      	sxth	r2, r3
 8018b90:	4b04      	ldr	r3, [pc, #16]	@ (8018ba4 <RegionEU868ChannelAdd+0x140>)
 8018b92:	681b      	ldr	r3, [r3, #0]
 8018b94:	b292      	uxth	r2, r2
 8018b96:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    return LORAMAC_STATUS_OK;
 8018b9a:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8018b9c:	4618      	mov	r0, r3
 8018b9e:	3710      	adds	r7, #16
 8018ba0:	46bd      	mov	sp, r7
 8018ba2:	bd80      	pop	{r7, pc}
 8018ba4:	20001a70 	.word	0x20001a70

08018ba8 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 8018ba8:	b580      	push	{r7, lr}
 8018baa:	b086      	sub	sp, #24
 8018bac:	af00      	add	r7, sp, #0
 8018bae:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 8018bb0:	687b      	ldr	r3, [r7, #4]
 8018bb2:	781b      	ldrb	r3, [r3, #0]
 8018bb4:	75fb      	strb	r3, [r7, #23]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8018bb6:	7dfb      	ldrb	r3, [r7, #23]
 8018bb8:	2b02      	cmp	r3, #2
 8018bba:	d801      	bhi.n	8018bc0 <RegionEU868ChannelsRemove+0x18>
    {
        return false;
 8018bbc:	2300      	movs	r3, #0
 8018bbe:	e016      	b.n	8018bee <RegionEU868ChannelsRemove+0x46>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8018bc0:	4b0d      	ldr	r3, [pc, #52]	@ (8018bf8 <RegionEU868ChannelsRemove+0x50>)
 8018bc2:	6819      	ldr	r1, [r3, #0]
 8018bc4:	7dfa      	ldrb	r2, [r7, #23]
 8018bc6:	4613      	mov	r3, r2
 8018bc8:	005b      	lsls	r3, r3, #1
 8018bca:	4413      	add	r3, r2
 8018bcc:	009b      	lsls	r3, r3, #2
 8018bce:	440b      	add	r3, r1
 8018bd0:	461a      	mov	r2, r3
 8018bd2:	2300      	movs	r3, #0
 8018bd4:	6013      	str	r3, [r2, #0]
 8018bd6:	6053      	str	r3, [r2, #4]
 8018bd8:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 8018bda:	4b07      	ldr	r3, [pc, #28]	@ (8018bf8 <RegionEU868ChannelsRemove+0x50>)
 8018bdc:	681b      	ldr	r3, [r3, #0]
 8018bde:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8018be2:	7df9      	ldrb	r1, [r7, #23]
 8018be4:	2210      	movs	r2, #16
 8018be6:	4618      	mov	r0, r3
 8018be8:	f7fe f918 	bl	8016e1c <RegionCommonChanDisable>
 8018bec:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_EU868 */
}
 8018bee:	4618      	mov	r0, r3
 8018bf0:	3718      	adds	r7, #24
 8018bf2:	46bd      	mov	sp, r7
 8018bf4:	bd80      	pop	{r7, pc}
 8018bf6:	bf00      	nop
 8018bf8:	20001a70 	.word	0x20001a70

08018bfc <RegionEU868ApplyDrOffset>:
#endif /* REGION_EU868 */
}
#endif /* REGION_VERSION */

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8018bfc:	b480      	push	{r7}
 8018bfe:	b085      	sub	sp, #20
 8018c00:	af00      	add	r7, sp, #0
 8018c02:	4603      	mov	r3, r0
 8018c04:	71fb      	strb	r3, [r7, #7]
 8018c06:	460b      	mov	r3, r1
 8018c08:	71bb      	strb	r3, [r7, #6]
 8018c0a:	4613      	mov	r3, r2
 8018c0c:	717b      	strb	r3, [r7, #5]
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 8018c0e:	79ba      	ldrb	r2, [r7, #6]
 8018c10:	797b      	ldrb	r3, [r7, #5]
 8018c12:	1ad3      	subs	r3, r2, r3
 8018c14:	b2db      	uxtb	r3, r3
 8018c16:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 8018c18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018c1c:	2b00      	cmp	r3, #0
 8018c1e:	da01      	bge.n	8018c24 <RegionEU868ApplyDrOffset+0x28>
    {
        datarate = DR_0;
 8018c20:	2300      	movs	r3, #0
 8018c22:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 8018c24:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_EU868 */
}
 8018c26:	4618      	mov	r0, r3
 8018c28:	3714      	adds	r7, #20
 8018c2a:	46bd      	mov	sp, r7
 8018c2c:	bc80      	pop	{r7}
 8018c2e:	4770      	bx	lr

08018c30 <LimitTxPower>:
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
static Band_t* RegionBands;
#endif /* REGION_VERSION */

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
 8018c30:	b580      	push	{r7, lr}
 8018c32:	b084      	sub	sp, #16
 8018c34:	af00      	add	r7, sp, #0
 8018c36:	603b      	str	r3, [r7, #0]
 8018c38:	4603      	mov	r3, r0
 8018c3a:	71fb      	strb	r3, [r7, #7]
 8018c3c:	460b      	mov	r3, r1
 8018c3e:	71bb      	strb	r3, [r7, #6]
 8018c40:	4613      	mov	r3, r2
 8018c42:	717b      	strb	r3, [r7, #5]
    int8_t txPowerResult = txPower;
 8018c44:	79fb      	ldrb	r3, [r7, #7]
 8018c46:	73fb      	strb	r3, [r7, #15]

    // Limit tx power to the band max
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 8018c48:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8018c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018c50:	4611      	mov	r1, r2
 8018c52:	4618      	mov	r0, r3
 8018c54:	f7fe fdcd 	bl	80177f2 <RegionCommonLimitTxPower>
 8018c58:	4603      	mov	r3, r0
 8018c5a:	73fb      	strb	r3, [r7, #15]

    if( datarate == DR_4 )
 8018c5c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8018c60:	2b04      	cmp	r3, #4
 8018c62:	d106      	bne.n	8018c72 <LimitTxPower+0x42>
    {// Limit tx power to max 26dBm
        txPowerResult = MAX( txPower, TX_POWER_2 );
 8018c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018c68:	2b02      	cmp	r3, #2
 8018c6a:	bfb8      	it	lt
 8018c6c:	2302      	movlt	r3, #2
 8018c6e:	73fb      	strb	r3, [r7, #15]
 8018c70:	e00d      	b.n	8018c8e <LimitTxPower+0x5e>
    }
    else
    {
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 8018c72:	2204      	movs	r2, #4
 8018c74:	2100      	movs	r1, #0
 8018c76:	6838      	ldr	r0, [r7, #0]
 8018c78:	f7fe f904 	bl	8016e84 <RegionCommonCountChannels>
 8018c7c:	4603      	mov	r3, r0
 8018c7e:	2b31      	cmp	r3, #49	@ 0x31
 8018c80:	d805      	bhi.n	8018c8e <LimitTxPower+0x5e>
        {// Limit tx power to max 21dBm
            txPowerResult = MAX( txPower, TX_POWER_5 );
 8018c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018c86:	2b05      	cmp	r3, #5
 8018c88:	bfb8      	it	lt
 8018c8a:	2305      	movlt	r3, #5
 8018c8c:	73fb      	strb	r3, [r7, #15]
        }
    }
    return txPowerResult;
 8018c8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018c92:	4618      	mov	r0, r3
 8018c94:	3710      	adds	r7, #16
 8018c96:	46bd      	mov	sp, r7
 8018c98:	bd80      	pop	{r7, pc}
	...

08018c9c <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq )
{
 8018c9c:	b580      	push	{r7, lr}
 8018c9e:	b082      	sub	sp, #8
 8018ca0:	af00      	add	r7, sp, #0
 8018ca2:	6078      	str	r0, [r7, #4]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8018ca4:	4b18      	ldr	r3, [pc, #96]	@ (8018d08 <VerifyRfFreq+0x6c>)
 8018ca6:	6a1b      	ldr	r3, [r3, #32]
 8018ca8:	6878      	ldr	r0, [r7, #4]
 8018caa:	4798      	blx	r3
 8018cac:	4603      	mov	r3, r0
 8018cae:	f083 0301 	eor.w	r3, r3, #1
 8018cb2:	b2db      	uxtb	r3, r3
 8018cb4:	2b00      	cmp	r3, #0
 8018cb6:	d001      	beq.n	8018cbc <VerifyRfFreq+0x20>
    {
        return false;
 8018cb8:	2300      	movs	r3, #0
 8018cba:	e021      	b.n	8018d00 <VerifyRfFreq+0x64>
    }

    // Rx frequencies
    if( ( freq < US915_FIRST_RX1_CHANNEL ) ||
 8018cbc:	687b      	ldr	r3, [r7, #4]
 8018cbe:	4a13      	ldr	r2, [pc, #76]	@ (8018d0c <VerifyRfFreq+0x70>)
 8018cc0:	4293      	cmp	r3, r2
 8018cc2:	d910      	bls.n	8018ce6 <VerifyRfFreq+0x4a>
 8018cc4:	687b      	ldr	r3, [r7, #4]
 8018cc6:	4a12      	ldr	r2, [pc, #72]	@ (8018d10 <VerifyRfFreq+0x74>)
 8018cc8:	4293      	cmp	r3, r2
 8018cca:	d80c      	bhi.n	8018ce6 <VerifyRfFreq+0x4a>
        ( freq > US915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) US915_FIRST_RX1_CHANNEL ) % ( uint32_t ) US915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 8018ccc:	687a      	ldr	r2, [r7, #4]
 8018cce:	4b11      	ldr	r3, [pc, #68]	@ (8018d14 <VerifyRfFreq+0x78>)
 8018cd0:	4413      	add	r3, r2
 8018cd2:	4a11      	ldr	r2, [pc, #68]	@ (8018d18 <VerifyRfFreq+0x7c>)
 8018cd4:	fba2 1203 	umull	r1, r2, r2, r3
 8018cd8:	0c92      	lsrs	r2, r2, #18
 8018cda:	4910      	ldr	r1, [pc, #64]	@ (8018d1c <VerifyRfFreq+0x80>)
 8018cdc:	fb01 f202 	mul.w	r2, r1, r2
 8018ce0:	1a9a      	subs	r2, r3, r2
        ( freq > US915_LAST_RX1_CHANNEL ) ||
 8018ce2:	2a00      	cmp	r2, #0
 8018ce4:	d001      	beq.n	8018cea <VerifyRfFreq+0x4e>
    {
        return false;
 8018ce6:	2300      	movs	r3, #0
 8018ce8:	e00a      	b.n	8018d00 <VerifyRfFreq+0x64>
    }

    // Test for frequency range - take RX and TX frequencies into account
    if( ( freq < 902300000 ) ||  ( freq > 927500000 ) )
 8018cea:	687b      	ldr	r3, [r7, #4]
 8018cec:	4a0c      	ldr	r2, [pc, #48]	@ (8018d20 <VerifyRfFreq+0x84>)
 8018cee:	4293      	cmp	r3, r2
 8018cf0:	d903      	bls.n	8018cfa <VerifyRfFreq+0x5e>
 8018cf2:	687b      	ldr	r3, [r7, #4]
 8018cf4:	4a06      	ldr	r2, [pc, #24]	@ (8018d10 <VerifyRfFreq+0x74>)
 8018cf6:	4293      	cmp	r3, r2
 8018cf8:	d901      	bls.n	8018cfe <VerifyRfFreq+0x62>
    {
        return false;
 8018cfa:	2300      	movs	r3, #0
 8018cfc:	e000      	b.n	8018d00 <VerifyRfFreq+0x64>
    }
    return true;
 8018cfe:	2301      	movs	r3, #1
}
 8018d00:	4618      	mov	r0, r3
 8018d02:	3708      	adds	r7, #8
 8018d04:	46bd      	mov	sp, r7
 8018d06:	bd80      	pop	{r7, pc}
 8018d08:	0801fccc 	.word	0x0801fccc
 8018d0c:	3708709f 	.word	0x3708709f
 8018d10:	374886e0 	.word	0x374886e0
 8018d14:	c8f78f60 	.word	0xc8f78f60
 8018d18:	6fd91d85 	.word	0x6fd91d85
 8018d1c:	000927c0 	.word	0x000927c0
 8018d20:	35c8015f 	.word	0x35c8015f

08018d24 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8018d24:	b590      	push	{r4, r7, lr}
 8018d26:	b089      	sub	sp, #36	@ 0x24
 8018d28:	af04      	add	r7, sp, #16
 8018d2a:	4603      	mov	r3, r0
 8018d2c:	460a      	mov	r2, r1
 8018d2e:	71fb      	strb	r3, [r7, #7]
 8018d30:	4613      	mov	r3, r2
 8018d32:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesUS915[datarate];
 8018d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018d38:	4a0f      	ldr	r2, [pc, #60]	@ (8018d78 <GetTimeOnAir+0x54>)
 8018d3a:	5cd3      	ldrb	r3, [r2, r3]
 8018d3c:	73fb      	strb	r3, [r7, #15]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 8018d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018d42:	490e      	ldr	r1, [pc, #56]	@ (8018d7c <GetTimeOnAir+0x58>)
 8018d44:	4618      	mov	r0, r3
 8018d46:	f7fe fd69 	bl	801781c <RegionCommonGetBandwidth>
 8018d4a:	60b8      	str	r0, [r7, #8]

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8018d4c:	4b0c      	ldr	r3, [pc, #48]	@ (8018d80 <GetTimeOnAir+0x5c>)
 8018d4e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8018d50:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8018d54:	88bb      	ldrh	r3, [r7, #4]
 8018d56:	b2db      	uxtb	r3, r3
 8018d58:	2101      	movs	r1, #1
 8018d5a:	9103      	str	r1, [sp, #12]
 8018d5c:	9302      	str	r3, [sp, #8]
 8018d5e:	2300      	movs	r3, #0
 8018d60:	9301      	str	r3, [sp, #4]
 8018d62:	2308      	movs	r3, #8
 8018d64:	9300      	str	r3, [sp, #0]
 8018d66:	2301      	movs	r3, #1
 8018d68:	68b9      	ldr	r1, [r7, #8]
 8018d6a:	2001      	movs	r0, #1
 8018d6c:	47a0      	blx	r4
 8018d6e:	4603      	mov	r3, r0
}
 8018d70:	4618      	mov	r0, r3
 8018d72:	3714      	adds	r7, #20
 8018d74:	46bd      	mov	sp, r7
 8018d76:	bd90      	pop	{r4, r7, pc}
 8018d78:	0801fc48 	.word	0x0801fc48
 8018d7c:	0801fc58 	.word	0x0801fc58
 8018d80:	0801fccc 	.word	0x0801fccc

08018d84 <RegionUS915GetPhyParam>:
#endif /* REGION_US915 */

PhyParam_t RegionUS915GetPhyParam( GetPhyParams_t* getPhy )
{
 8018d84:	b580      	push	{r7, lr}
 8018d86:	b088      	sub	sp, #32
 8018d88:	af00      	add	r7, sp, #0
 8018d8a:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8018d8c:	2300      	movs	r3, #0
 8018d8e:	61bb      	str	r3, [r7, #24]

#if defined( REGION_US915 )
    switch( getPhy->Attribute )
 8018d90:	687b      	ldr	r3, [r7, #4]
 8018d92:	781b      	ldrb	r3, [r3, #0]
 8018d94:	3b01      	subs	r3, #1
 8018d96:	2b37      	cmp	r3, #55	@ 0x37
 8018d98:	f200 8136 	bhi.w	8019008 <RegionUS915GetPhyParam+0x284>
 8018d9c:	a201      	add	r2, pc, #4	@ (adr r2, 8018da4 <RegionUS915GetPhyParam+0x20>)
 8018d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018da2:	bf00      	nop
 8018da4:	08018e85 	.word	0x08018e85
 8018da8:	08018e8b 	.word	0x08018e8b
 8018dac:	08019009 	.word	0x08019009
 8018db0:	08019009 	.word	0x08019009
 8018db4:	08019009 	.word	0x08019009
 8018db8:	08018e91 	.word	0x08018e91
 8018dbc:	08019009 	.word	0x08019009
 8018dc0:	08018ecb 	.word	0x08018ecb
 8018dc4:	08019009 	.word	0x08019009
 8018dc8:	08018ed1 	.word	0x08018ed1
 8018dcc:	08018ed7 	.word	0x08018ed7
 8018dd0:	08018edd 	.word	0x08018edd
 8018dd4:	08018ee3 	.word	0x08018ee3
 8018dd8:	08018ef3 	.word	0x08018ef3
 8018ddc:	08018f03 	.word	0x08018f03
 8018de0:	08018f09 	.word	0x08018f09
 8018de4:	08018f11 	.word	0x08018f11
 8018de8:	08018f19 	.word	0x08018f19
 8018dec:	08018f21 	.word	0x08018f21
 8018df0:	08018f29 	.word	0x08018f29
 8018df4:	08018f31 	.word	0x08018f31
 8018df8:	08018f45 	.word	0x08018f45
 8018dfc:	08018f4b 	.word	0x08018f4b
 8018e00:	08018f51 	.word	0x08018f51
 8018e04:	08018f57 	.word	0x08018f57
 8018e08:	08018f63 	.word	0x08018f63
 8018e0c:	08018f6f 	.word	0x08018f6f
 8018e10:	08018f75 	.word	0x08018f75
 8018e14:	08018f7d 	.word	0x08018f7d
 8018e18:	08018f83 	.word	0x08018f83
 8018e1c:	08018f89 	.word	0x08018f89
 8018e20:	08018f8f 	.word	0x08018f8f
 8018e24:	08018e97 	.word	0x08018e97
 8018e28:	08019009 	.word	0x08019009
 8018e2c:	08019009 	.word	0x08019009
 8018e30:	08019009 	.word	0x08019009
 8018e34:	08019009 	.word	0x08019009
 8018e38:	08019009 	.word	0x08019009
 8018e3c:	08019009 	.word	0x08019009
 8018e40:	08019009 	.word	0x08019009
 8018e44:	08019009 	.word	0x08019009
 8018e48:	08019009 	.word	0x08019009
 8018e4c:	08019009 	.word	0x08019009
 8018e50:	08019009 	.word	0x08019009
 8018e54:	08019009 	.word	0x08019009
 8018e58:	08019009 	.word	0x08019009
 8018e5c:	08018f97 	.word	0x08018f97
 8018e60:	08018fab 	.word	0x08018fab
 8018e64:	08018fb9 	.word	0x08018fb9
 8018e68:	08018fbf 	.word	0x08018fbf
 8018e6c:	08019009 	.word	0x08019009
 8018e70:	08018fc5 	.word	0x08018fc5
 8018e74:	08018fd9 	.word	0x08018fd9
 8018e78:	08018fdf 	.word	0x08018fdf
 8018e7c:	08018fe5 	.word	0x08018fe5
 8018e80:	08018ff5 	.word	0x08018ff5
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = US915_RX_MIN_DATARATE;
 8018e84:	2308      	movs	r3, #8
 8018e86:	61bb      	str	r3, [r7, #24]
            break;
 8018e88:	e0bf      	b.n	801900a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = US915_TX_MIN_DATARATE;
 8018e8a:	2300      	movs	r3, #0
 8018e8c:	61bb      	str	r3, [r7, #24]
            break;
 8018e8e:	e0bc      	b.n	801900a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = US915_DEFAULT_DATARATE;
 8018e90:	2300      	movs	r3, #0
 8018e92:	61bb      	str	r3, [r7, #24]
            break;
 8018e94:	e0b9      	b.n	801900a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 8018e96:	687b      	ldr	r3, [r7, #4]
 8018e98:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8018e9c:	733b      	strb	r3, [r7, #12]
 8018e9e:	2304      	movs	r3, #4
 8018ea0:	737b      	strb	r3, [r7, #13]
 8018ea2:	2300      	movs	r3, #0
 8018ea4:	73bb      	strb	r3, [r7, #14]
 8018ea6:	2348      	movs	r3, #72	@ 0x48
 8018ea8:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )US915_TX_MAX_DATARATE,
                .MinDr = ( int8_t )US915_TX_MIN_DATARATE,
                .NbChannels = US915_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8018eaa:	4b5b      	ldr	r3, [pc, #364]	@ (8019018 <RegionUS915GetPhyParam+0x294>)
 8018eac:	681b      	ldr	r3, [r3, #0]
 8018eae:	f503 7358 	add.w	r3, r3, #864	@ 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8018eb2:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 8018eb4:	4b58      	ldr	r3, [pc, #352]	@ (8019018 <RegionUS915GetPhyParam+0x294>)
 8018eb6:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8018eb8:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8018eba:	f107 030c 	add.w	r3, r7, #12
 8018ebe:	4618      	mov	r0, r3
 8018ec0:	f7fe fc59 	bl	8017776 <RegionCommonGetNextLowerTxDr>
 8018ec4:	4603      	mov	r3, r0
 8018ec6:	61bb      	str	r3, [r7, #24]
            break;
 8018ec8:	e09f      	b.n	801900a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = US915_MAX_TX_POWER;
 8018eca:	2300      	movs	r3, #0
 8018ecc:	61bb      	str	r3, [r7, #24]
            break;
 8018ece:	e09c      	b.n	801900a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = US915_DEFAULT_TX_POWER;
 8018ed0:	2300      	movs	r3, #0
 8018ed2:	61bb      	str	r3, [r7, #24]
            break;
 8018ed4:	e099      	b.n	801900a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8018ed6:	2340      	movs	r3, #64	@ 0x40
 8018ed8:	61bb      	str	r3, [r7, #24]
            break;
 8018eda:	e096      	b.n	801900a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8018edc:	2320      	movs	r3, #32
 8018ede:	61bb      	str	r3, [r7, #24]
            break;
 8018ee0:	e093      	b.n	801900a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateUS915[getPhy->Datarate];
 8018ee2:	687b      	ldr	r3, [r7, #4]
 8018ee4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018ee8:	461a      	mov	r2, r3
 8018eea:	4b4c      	ldr	r3, [pc, #304]	@ (801901c <RegionUS915GetPhyParam+0x298>)
 8018eec:	5c9b      	ldrb	r3, [r3, r2]
 8018eee:	61bb      	str	r3, [r7, #24]
            break;
 8018ef0:	e08b      	b.n	801900a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterUS915[getPhy->Datarate];
 8018ef2:	687b      	ldr	r3, [r7, #4]
 8018ef4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018ef8:	461a      	mov	r2, r3
 8018efa:	4b49      	ldr	r3, [pc, #292]	@ (8019020 <RegionUS915GetPhyParam+0x29c>)
 8018efc:	5c9b      	ldrb	r3, [r3, r2]
 8018efe:	61bb      	str	r3, [r7, #24]
            break;
 8018f00:	e083      	b.n	801900a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = US915_DUTY_CYCLE_ENABLED;
 8018f02:	2300      	movs	r3, #0
 8018f04:	61bb      	str	r3, [r7, #24]
            break;
 8018f06:	e080      	b.n	801900a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = US915_MAX_RX_WINDOW;
 8018f08:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8018f0c:	61bb      	str	r3, [r7, #24]
            break;
 8018f0e:	e07c      	b.n	801900a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8018f10:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8018f14:	61bb      	str	r3, [r7, #24]
            break;
 8018f16:	e078      	b.n	801900a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8018f18:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8018f1c:	61bb      	str	r3, [r7, #24]
            break;
 8018f1e:	e074      	b.n	801900a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8018f20:	f241 3388 	movw	r3, #5000	@ 0x1388
 8018f24:	61bb      	str	r3, [r7, #24]
            break;
 8018f26:	e070      	b.n	801900a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8018f28:	f241 7370 	movw	r3, #6000	@ 0x1770
 8018f2c:	61bb      	str	r3, [r7, #24]
            break;
 8018f2e:	e06c      	b.n	801900a <RegionUS915GetPhyParam+0x286>
            break;
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
        case PHY_RETRANSMIT_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 8018f30:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8018f34:	483b      	ldr	r0, [pc, #236]	@ (8019024 <RegionUS915GetPhyParam+0x2a0>)
 8018f36:	f001 f8a5 	bl	801a084 <randr>
 8018f3a:	4603      	mov	r3, r0
 8018f3c:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8018f40:	61bb      	str	r3, [r7, #24]
            break;
 8018f42:	e062      	b.n	801900a <RegionUS915GetPhyParam+0x286>
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 8018f44:	2300      	movs	r3, #0
 8018f46:	61bb      	str	r3, [r7, #24]
            break;
 8018f48:	e05f      	b.n	801900a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = US915_RX_WND_2_FREQ;
 8018f4a:	4b37      	ldr	r3, [pc, #220]	@ (8019028 <RegionUS915GetPhyParam+0x2a4>)
 8018f4c:	61bb      	str	r3, [r7, #24]
            break;
 8018f4e:	e05c      	b.n	801900a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = US915_RX_WND_2_DR;
 8018f50:	2308      	movs	r3, #8
 8018f52:	61bb      	str	r3, [r7, #24]
            break;
 8018f54:	e059      	b.n	801900a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8018f56:	4b30      	ldr	r3, [pc, #192]	@ (8019018 <RegionUS915GetPhyParam+0x294>)
 8018f58:	681b      	ldr	r3, [r3, #0]
 8018f5a:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8018f5e:	61bb      	str	r3, [r7, #24]
            break;
 8018f60:	e053      	b.n	801900a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8018f62:	4b2d      	ldr	r3, [pc, #180]	@ (8019018 <RegionUS915GetPhyParam+0x294>)
 8018f64:	681b      	ldr	r3, [r3, #0]
 8018f66:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 8018f6a:	61bb      	str	r3, [r7, #24]
            break;
 8018f6c:	e04d      	b.n	801900a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = US915_MAX_NB_CHANNELS;
 8018f6e:	2348      	movs	r3, #72	@ 0x48
 8018f70:	61bb      	str	r3, [r7, #24]
            break;
 8018f72:	e04a      	b.n	801900a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8018f74:	4b28      	ldr	r3, [pc, #160]	@ (8019018 <RegionUS915GetPhyParam+0x294>)
 8018f76:	681b      	ldr	r3, [r3, #0]
 8018f78:	61bb      	str	r3, [r7, #24]
            break;
 8018f7a:	e046      	b.n	801900a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = US915_DEFAULT_UPLINK_DWELL_TIME;
 8018f7c:	2300      	movs	r3, #0
 8018f7e:	61bb      	str	r3, [r7, #24]
            break;
 8018f80:	e043      	b.n	801900a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 8018f82:	2300      	movs	r3, #0
 8018f84:	61bb      	str	r3, [r7, #24]
            break;
 8018f86:	e040      	b.n	801900a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = US915_DEFAULT_MAX_ERP + 2.15f;
 8018f88:	4b28      	ldr	r3, [pc, #160]	@ (801902c <RegionUS915GetPhyParam+0x2a8>)
 8018f8a:	61bb      	str	r3, [r7, #24]
            break;
 8018f8c:	e03d      	b.n	801900a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = 0;
 8018f8e:	f04f 0300 	mov.w	r3, #0
 8018f92:	61bb      	str	r3, [r7, #24]
            break;
 8018f94:	e039      	b.n	801900a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 8018f96:	687b      	ldr	r3, [r7, #4]
 8018f98:	791b      	ldrb	r3, [r3, #4]
 8018f9a:	4a25      	ldr	r2, [pc, #148]	@ (8019030 <RegionUS915GetPhyParam+0x2ac>)
 8018f9c:	4922      	ldr	r1, [pc, #136]	@ (8019028 <RegionUS915GetPhyParam+0x2a4>)
 8018f9e:	4618      	mov	r0, r3
 8018fa0:	f7fd fd4b 	bl	8016a3a <RegionBaseUSCalcDownlinkFrequency>
 8018fa4:	4603      	mov	r3, r0
 8018fa6:	61bb      	str	r3, [r7, #24]
                                                                US915_BEACON_CHANNEL_FREQ,
                                                                US915_BEACON_CHANNEL_STEPWIDTH );
            break;
 8018fa8:	e02f      	b.n	801900a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = US915_BEACON_SIZE;
 8018faa:	2317      	movs	r3, #23
 8018fac:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = US915_RFU1_SIZE;
 8018fae:	2304      	movs	r3, #4
 8018fb0:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = US915_RFU2_SIZE;
 8018fb2:	2303      	movs	r3, #3
 8018fb4:	76bb      	strb	r3, [r7, #26]
            break;
 8018fb6:	e028      	b.n	801900a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = US915_BEACON_CHANNEL_DR;
 8018fb8:	2308      	movs	r3, #8
 8018fba:	61bb      	str	r3, [r7, #24]
            break;
 8018fbc:	e025      	b.n	801900a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_NB_CHANNELS:
        {
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 8018fbe:	2308      	movs	r3, #8
 8018fc0:	61bb      	str	r3, [r7, #24]
            break;
 8018fc2:	e022      	b.n	801900a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 8018fc4:	687b      	ldr	r3, [r7, #4]
 8018fc6:	791b      	ldrb	r3, [r3, #4]
 8018fc8:	4a19      	ldr	r2, [pc, #100]	@ (8019030 <RegionUS915GetPhyParam+0x2ac>)
 8018fca:	4917      	ldr	r1, [pc, #92]	@ (8019028 <RegionUS915GetPhyParam+0x2a4>)
 8018fcc:	4618      	mov	r0, r3
 8018fce:	f7fd fd34 	bl	8016a3a <RegionBaseUSCalcDownlinkFrequency>
 8018fd2:	4603      	mov	r3, r0
 8018fd4:	61bb      	str	r3, [r7, #24]
                                                                US915_PING_SLOT_CHANNEL_FREQ,
                                                                US915_BEACON_CHANNEL_STEPWIDTH );
            break;
 8018fd6:	e018      	b.n	801900a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = US915_PING_SLOT_CHANNEL_DR;
 8018fd8:	2308      	movs	r3, #8
 8018fda:	61bb      	str	r3, [r7, #24]
            break;
 8018fdc:	e015      	b.n	801900a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_PING_SLOT_NB_CHANNELS:
        {
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 8018fde:	2308      	movs	r3, #8
 8018fe0:	61bb      	str	r3, [r7, #24]
            break;
 8018fe2:	e012      	b.n	801900a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesUS915[getPhy->Datarate];
 8018fe4:	687b      	ldr	r3, [r7, #4]
 8018fe6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018fea:	461a      	mov	r2, r3
 8018fec:	4b11      	ldr	r3, [pc, #68]	@ (8019034 <RegionUS915GetPhyParam+0x2b0>)
 8018fee:	5c9b      	ldrb	r3, [r3, r2]
 8018ff0:	61bb      	str	r3, [r7, #24]
            break;
 8018ff2:	e00a      	b.n	801900a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsUS915 );
 8018ff4:	687b      	ldr	r3, [r7, #4]
 8018ff6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018ffa:	490f      	ldr	r1, [pc, #60]	@ (8019038 <RegionUS915GetPhyParam+0x2b4>)
 8018ffc:	4618      	mov	r0, r3
 8018ffe:	f7fe fc0d 	bl	801781c <RegionCommonGetBandwidth>
 8019002:	4603      	mov	r3, r0
 8019004:	61bb      	str	r3, [r7, #24]
            break;
 8019006:	e000      	b.n	801900a <RegionUS915GetPhyParam+0x286>
        }
        default:
        {
            break;
 8019008:	bf00      	nop
        }
    }

#endif /* REGION_US915 */
    return phyParam;
 801900a:	69bb      	ldr	r3, [r7, #24]
 801900c:	61fb      	str	r3, [r7, #28]
 801900e:	69fb      	ldr	r3, [r7, #28]
}
 8019010:	4618      	mov	r0, r3
 8019012:	3720      	adds	r7, #32
 8019014:	46bd      	mov	sp, r7
 8019016:	bd80      	pop	{r7, pc}
 8019018:	20001a7c 	.word	0x20001a7c
 801901c:	0801fcac 	.word	0x0801fcac
 8019020:	0801fcbc 	.word	0x0801fcbc
 8019024:	fffffc18 	.word	0xfffffc18
 8019028:	370870a0 	.word	0x370870a0
 801902c:	4200999a 	.word	0x4200999a
 8019030:	000927c0 	.word	0x000927c0
 8019034:	0801fc48 	.word	0x0801fc48
 8019038:	0801fc58 	.word	0x0801fc58

0801903c <RegionUS915SetBandTxDone>:

void RegionUS915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 801903c:	b590      	push	{r4, r7, lr}
 801903e:	b085      	sub	sp, #20
 8019040:	af02      	add	r7, sp, #8
 8019042:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8019044:	4b11      	ldr	r3, [pc, #68]	@ (801908c <RegionUS915SetBandTxDone+0x50>)
 8019046:	681a      	ldr	r2, [r3, #0]
 8019048:	4b11      	ldr	r3, [pc, #68]	@ (8019090 <RegionUS915SetBandTxDone+0x54>)
 801904a:	6819      	ldr	r1, [r3, #0]
 801904c:	687b      	ldr	r3, [r7, #4]
 801904e:	781b      	ldrb	r3, [r3, #0]
 8019050:	4618      	mov	r0, r3
 8019052:	4603      	mov	r3, r0
 8019054:	005b      	lsls	r3, r3, #1
 8019056:	4403      	add	r3, r0
 8019058:	009b      	lsls	r3, r3, #2
 801905a:	440b      	add	r3, r1
 801905c:	3309      	adds	r3, #9
 801905e:	781b      	ldrb	r3, [r3, #0]
 8019060:	4619      	mov	r1, r3
 8019062:	460b      	mov	r3, r1
 8019064:	005b      	lsls	r3, r3, #1
 8019066:	440b      	add	r3, r1
 8019068:	00db      	lsls	r3, r3, #3
 801906a:	18d0      	adds	r0, r2, r3
 801906c:	687b      	ldr	r3, [r7, #4]
 801906e:	6899      	ldr	r1, [r3, #8]
 8019070:	687b      	ldr	r3, [r7, #4]
 8019072:	785c      	ldrb	r4, [r3, #1]
 8019074:	687b      	ldr	r3, [r7, #4]
 8019076:	691a      	ldr	r2, [r3, #16]
 8019078:	9200      	str	r2, [sp, #0]
 801907a:	68db      	ldr	r3, [r3, #12]
 801907c:	4622      	mov	r2, r4
 801907e:	f7fd ff53 	bl	8016f28 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_US915 */
}
 8019082:	bf00      	nop
 8019084:	370c      	adds	r7, #12
 8019086:	46bd      	mov	sp, r7
 8019088:	bd90      	pop	{r4, r7, pc}
 801908a:	bf00      	nop
 801908c:	20001a80 	.word	0x20001a80
 8019090:	20001a7c 	.word	0x20001a7c

08019094 <RegionUS915InitDefaults>:

void RegionUS915InitDefaults( InitDefaultsParams_t* params )
{
 8019094:	b580      	push	{r7, lr}
 8019096:	b08a      	sub	sp, #40	@ 0x28
 8019098:	af00      	add	r7, sp, #0
 801909a:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    Band_t bands[US915_MAX_NB_BANDS] =
 801909c:	2301      	movs	r3, #1
 801909e:	81bb      	strh	r3, [r7, #12]
 80190a0:	2300      	movs	r3, #0
 80190a2:	73bb      	strb	r3, [r7, #14]
 80190a4:	2300      	movs	r3, #0
 80190a6:	613b      	str	r3, [r7, #16]
 80190a8:	2300      	movs	r3, #0
 80190aa:	617b      	str	r3, [r7, #20]
 80190ac:	2300      	movs	r3, #0
 80190ae:	61bb      	str	r3, [r7, #24]
 80190b0:	2300      	movs	r3, #0
 80190b2:	61fb      	str	r3, [r7, #28]
 80190b4:	2300      	movs	r3, #0
 80190b6:	f887 3020 	strb.w	r3, [r7, #32]
    {
       US915_BAND0
    };

    switch( params->Type )
 80190ba:	687b      	ldr	r3, [r7, #4]
 80190bc:	7b1b      	ldrb	r3, [r3, #12]
 80190be:	2b00      	cmp	r3, #0
 80190c0:	d007      	beq.n	80190d2 <RegionUS915InitDefaults+0x3e>
 80190c2:	2b00      	cmp	r3, #0
 80190c4:	f2c0 8104 	blt.w	80192d0 <RegionUS915InitDefaults+0x23c>
 80190c8:	3b01      	subs	r3, #1
 80190ca:	2b01      	cmp	r3, #1
 80190cc:	f200 8100 	bhi.w	80192d0 <RegionUS915InitDefaults+0x23c>
 80190d0:	e0ce      	b.n	8019270 <RegionUS915InitDefaults+0x1dc>
    {
        case INIT_TYPE_DEFAULTS:
        {
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 80190d2:	687b      	ldr	r3, [r7, #4]
 80190d4:	681b      	ldr	r3, [r3, #0]
 80190d6:	2b00      	cmp	r3, #0
 80190d8:	f000 80fc 	beq.w	80192d4 <RegionUS915InitDefaults+0x240>
 80190dc:	687b      	ldr	r3, [r7, #4]
 80190de:	685b      	ldr	r3, [r3, #4]
 80190e0:	2b00      	cmp	r3, #0
 80190e2:	f000 80f7 	beq.w	80192d4 <RegionUS915InitDefaults+0x240>
            {
                return;
            }

            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 80190e6:	687b      	ldr	r3, [r7, #4]
 80190e8:	681b      	ldr	r3, [r3, #0]
 80190ea:	4a7c      	ldr	r2, [pc, #496]	@ (80192dc <RegionUS915InitDefaults+0x248>)
 80190ec:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 80190ee:	687b      	ldr	r3, [r7, #4]
 80190f0:	685b      	ldr	r3, [r3, #4]
 80190f2:	4a7b      	ldr	r2, [pc, #492]	@ (80192e0 <RegionUS915InitDefaults+0x24c>)
 80190f4:	6013      	str	r3, [r2, #0]
            RegionNvmGroup1->JoinTrialsCounter = 0;

            // Default bands
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            RegionBands = (Band_t*) params->Bands;
 80190f6:	687b      	ldr	r3, [r7, #4]
 80190f8:	689b      	ldr	r3, [r3, #8]
 80190fa:	4a7a      	ldr	r2, [pc, #488]	@ (80192e4 <RegionUS915InitDefaults+0x250>)
 80190fc:	6013      	str	r3, [r2, #0]

            // Initialize 8 bit channel groups index
            RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 80190fe:	4b77      	ldr	r3, [pc, #476]	@ (80192dc <RegionUS915InitDefaults+0x248>)
 8019100:	681b      	ldr	r3, [r3, #0]
 8019102:	2200      	movs	r2, #0
 8019104:	731a      	strb	r2, [r3, #12]

            // Initialize the join trials counter
            RegionNvmGroup1->JoinTrialsCounter = 0;
 8019106:	4b75      	ldr	r3, [pc, #468]	@ (80192dc <RegionUS915InitDefaults+0x248>)
 8019108:	681b      	ldr	r3, [r3, #0]
 801910a:	2200      	movs	r2, #0
 801910c:	735a      	strb	r2, [r3, #13]

            // Default bands
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 801910e:	4b75      	ldr	r3, [pc, #468]	@ (80192e4 <RegionUS915InitDefaults+0x250>)
 8019110:	681b      	ldr	r3, [r3, #0]
 8019112:	f107 010c 	add.w	r1, r7, #12
 8019116:	2218      	movs	r2, #24
 8019118:	4618      	mov	r0, r3
 801911a:	f000 ffca 	bl	801a0b2 <memcpy1>
#endif /* REGION_VERSION */

            // Default channels
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 801911e:	2300      	movs	r3, #0
 8019120:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8019124:	e02e      	b.n	8019184 <RegionUS915InitDefaults+0xf0>
            {
                // 125 kHz channels
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 8019126:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801912a:	4a6f      	ldr	r2, [pc, #444]	@ (80192e8 <RegionUS915InitDefaults+0x254>)
 801912c:	fb03 f202 	mul.w	r2, r3, r2
 8019130:	4b6e      	ldr	r3, [pc, #440]	@ (80192ec <RegionUS915InitDefaults+0x258>)
 8019132:	4413      	add	r3, r2
 8019134:	4a6a      	ldr	r2, [pc, #424]	@ (80192e0 <RegionUS915InitDefaults+0x24c>)
 8019136:	6811      	ldr	r1, [r2, #0]
 8019138:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801913c:	4618      	mov	r0, r3
 801913e:	4613      	mov	r3, r2
 8019140:	005b      	lsls	r3, r3, #1
 8019142:	4413      	add	r3, r2
 8019144:	009b      	lsls	r3, r3, #2
 8019146:	440b      	add	r3, r1
 8019148:	6018      	str	r0, [r3, #0]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 801914a:	4b65      	ldr	r3, [pc, #404]	@ (80192e0 <RegionUS915InitDefaults+0x24c>)
 801914c:	6819      	ldr	r1, [r3, #0]
 801914e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8019152:	4613      	mov	r3, r2
 8019154:	005b      	lsls	r3, r3, #1
 8019156:	4413      	add	r3, r2
 8019158:	009b      	lsls	r3, r3, #2
 801915a:	440b      	add	r3, r1
 801915c:	3308      	adds	r3, #8
 801915e:	2230      	movs	r2, #48	@ 0x30
 8019160:	701a      	strb	r2, [r3, #0]
                RegionNvmGroup2->Channels[i].Band = 0;
 8019162:	4b5f      	ldr	r3, [pc, #380]	@ (80192e0 <RegionUS915InitDefaults+0x24c>)
 8019164:	6819      	ldr	r1, [r3, #0]
 8019166:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801916a:	4613      	mov	r3, r2
 801916c:	005b      	lsls	r3, r3, #1
 801916e:	4413      	add	r3, r2
 8019170:	009b      	lsls	r3, r3, #2
 8019172:	440b      	add	r3, r1
 8019174:	3309      	adds	r3, #9
 8019176:	2200      	movs	r2, #0
 8019178:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 801917a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801917e:	3301      	adds	r3, #1
 8019180:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8019184:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019188:	2b3f      	cmp	r3, #63	@ 0x3f
 801918a:	d9cc      	bls.n	8019126 <RegionUS915InitDefaults+0x92>
            }
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 801918c:	2340      	movs	r3, #64	@ 0x40
 801918e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8019192:	e02f      	b.n	80191f4 <RegionUS915InitDefaults+0x160>
            {
                // 500 kHz channels
                RegionNvmGroup2->Channels[i].Frequency = 903000000 + ( i - ( US915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 8019194:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8019198:	3b40      	subs	r3, #64	@ 0x40
 801919a:	4a55      	ldr	r2, [pc, #340]	@ (80192f0 <RegionUS915InitDefaults+0x25c>)
 801919c:	fb03 f202 	mul.w	r2, r3, r2
 80191a0:	4b54      	ldr	r3, [pc, #336]	@ (80192f4 <RegionUS915InitDefaults+0x260>)
 80191a2:	4413      	add	r3, r2
 80191a4:	4a4e      	ldr	r2, [pc, #312]	@ (80192e0 <RegionUS915InitDefaults+0x24c>)
 80191a6:	6811      	ldr	r1, [r2, #0]
 80191a8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80191ac:	4618      	mov	r0, r3
 80191ae:	4613      	mov	r3, r2
 80191b0:	005b      	lsls	r3, r3, #1
 80191b2:	4413      	add	r3, r2
 80191b4:	009b      	lsls	r3, r3, #2
 80191b6:	440b      	add	r3, r1
 80191b8:	6018      	str	r0, [r3, #0]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 80191ba:	4b49      	ldr	r3, [pc, #292]	@ (80192e0 <RegionUS915InitDefaults+0x24c>)
 80191bc:	6819      	ldr	r1, [r3, #0]
 80191be:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80191c2:	4613      	mov	r3, r2
 80191c4:	005b      	lsls	r3, r3, #1
 80191c6:	4413      	add	r3, r2
 80191c8:	009b      	lsls	r3, r3, #2
 80191ca:	440b      	add	r3, r1
 80191cc:	3308      	adds	r3, #8
 80191ce:	2244      	movs	r2, #68	@ 0x44
 80191d0:	701a      	strb	r2, [r3, #0]
                RegionNvmGroup2->Channels[i].Band = 0;
 80191d2:	4b43      	ldr	r3, [pc, #268]	@ (80192e0 <RegionUS915InitDefaults+0x24c>)
 80191d4:	6819      	ldr	r1, [r3, #0]
 80191d6:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80191da:	4613      	mov	r3, r2
 80191dc:	005b      	lsls	r3, r3, #1
 80191de:	4413      	add	r3, r2
 80191e0:	009b      	lsls	r3, r3, #2
 80191e2:	440b      	add	r3, r1
 80191e4:	3309      	adds	r3, #9
 80191e6:	2200      	movs	r2, #0
 80191e8:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 80191ea:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80191ee:	3301      	adds	r3, #1
 80191f0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80191f4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80191f8:	2b47      	cmp	r3, #71	@ 0x47
 80191fa:	d9cb      	bls.n	8019194 <RegionUS915InitDefaults+0x100>
            RegionNvmGroup2->ChannelsDefaultMask[2] = HYBRID_DEFAULT_MASK2;
            RegionNvmGroup2->ChannelsDefaultMask[3] = HYBRID_DEFAULT_MASK3;
            RegionNvmGroup2->ChannelsDefaultMask[4] = HYBRID_DEFAULT_MASK4;
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
#else
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0xFFFF;
 80191fc:	4b38      	ldr	r3, [pc, #224]	@ (80192e0 <RegionUS915InitDefaults+0x24c>)
 80191fe:	681b      	ldr	r3, [r3, #0]
 8019200:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8019204:	f8a3 236c 	strh.w	r2, [r3, #876]	@ 0x36c
            RegionNvmGroup2->ChannelsDefaultMask[1] = 0xFFFF;
 8019208:	4b35      	ldr	r3, [pc, #212]	@ (80192e0 <RegionUS915InitDefaults+0x24c>)
 801920a:	681b      	ldr	r3, [r3, #0]
 801920c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8019210:	f8a3 236e 	strh.w	r2, [r3, #878]	@ 0x36e
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0xFFFF;
 8019214:	4b32      	ldr	r3, [pc, #200]	@ (80192e0 <RegionUS915InitDefaults+0x24c>)
 8019216:	681b      	ldr	r3, [r3, #0]
 8019218:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801921c:	f8a3 2370 	strh.w	r2, [r3, #880]	@ 0x370
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0xFFFF;
 8019220:	4b2f      	ldr	r3, [pc, #188]	@ (80192e0 <RegionUS915InitDefaults+0x24c>)
 8019222:	681b      	ldr	r3, [r3, #0]
 8019224:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8019228:	f8a3 2372 	strh.w	r2, [r3, #882]	@ 0x372
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;
 801922c:	4b2c      	ldr	r3, [pc, #176]	@ (80192e0 <RegionUS915InitDefaults+0x24c>)
 801922e:	681b      	ldr	r3, [r3, #0]
 8019230:	22ff      	movs	r2, #255	@ 0xff
 8019232:	f8a3 2374 	strh.w	r2, [r3, #884]	@ 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 8019236:	4b2a      	ldr	r3, [pc, #168]	@ (80192e0 <RegionUS915InitDefaults+0x24c>)
 8019238:	681b      	ldr	r3, [r3, #0]
 801923a:	2200      	movs	r2, #0
 801923c:	f8a3 2376 	strh.w	r2, [r3, #886]	@ 0x376
#endif /* HYBRID_ENABLED == 1 */

            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8019240:	4b27      	ldr	r3, [pc, #156]	@ (80192e0 <RegionUS915InitDefaults+0x24c>)
 8019242:	681b      	ldr	r3, [r3, #0]
 8019244:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 8019248:	4b25      	ldr	r3, [pc, #148]	@ (80192e0 <RegionUS915InitDefaults+0x24c>)
 801924a:	681b      	ldr	r3, [r3, #0]
 801924c:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 8019250:	2206      	movs	r2, #6
 8019252:	4619      	mov	r1, r3
 8019254:	f7fd fe42 	bl	8016edc <RegionCommonChanMaskCopy>

            // Copy into channels mask remaining
            RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 8019258:	4b20      	ldr	r3, [pc, #128]	@ (80192dc <RegionUS915InitDefaults+0x248>)
 801925a:	681b      	ldr	r3, [r3, #0]
 801925c:	4618      	mov	r0, r3
 801925e:	4b20      	ldr	r3, [pc, #128]	@ (80192e0 <RegionUS915InitDefaults+0x24c>)
 8019260:	681b      	ldr	r3, [r3, #0]
 8019262:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8019266:	2206      	movs	r2, #6
 8019268:	4619      	mov	r1, r3
 801926a:	f7fd fe37 	bl	8016edc <RegionCommonChanMaskCopy>
            break;
 801926e:	e032      	b.n	80192d6 <RegionUS915InitDefaults+0x242>
            // Intentional fallthrough
        }
        case INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS:
        {
            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8019270:	4b1b      	ldr	r3, [pc, #108]	@ (80192e0 <RegionUS915InitDefaults+0x24c>)
 8019272:	681b      	ldr	r3, [r3, #0]
 8019274:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 8019278:	4b19      	ldr	r3, [pc, #100]	@ (80192e0 <RegionUS915InitDefaults+0x24c>)
 801927a:	681b      	ldr	r3, [r3, #0]
 801927c:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 8019280:	2206      	movs	r2, #6
 8019282:	4619      	mov	r1, r3
 8019284:	f7fd fe2a 	bl	8016edc <RegionCommonChanMaskCopy>

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            for( uint8_t i = 0; i < 6; i++ )
 8019288:	2300      	movs	r3, #0
 801928a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 801928e:	e01a      	b.n	80192c6 <RegionUS915InitDefaults+0x232>
#endif /* REGION_VERSION */
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 8019290:	4b12      	ldr	r3, [pc, #72]	@ (80192dc <RegionUS915InitDefaults+0x248>)
 8019292:	681b      	ldr	r3, [r3, #0]
 8019294:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8019298:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801929c:	4b10      	ldr	r3, [pc, #64]	@ (80192e0 <RegionUS915InitDefaults+0x24c>)
 801929e:	681b      	ldr	r3, [r3, #0]
 80192a0:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 80192a4:	f502 72d8 	add.w	r2, r2, #432	@ 0x1b0
 80192a8:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 80192ac:	4b0b      	ldr	r3, [pc, #44]	@ (80192dc <RegionUS915InitDefaults+0x248>)
 80192ae:	681b      	ldr	r3, [r3, #0]
 80192b0:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 80192b4:	4001      	ands	r1, r0
 80192b6:	b289      	uxth	r1, r1
 80192b8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for( uint8_t i = 0; i < 6; i++ )
 80192bc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80192c0:	3301      	adds	r3, #1
 80192c2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80192c6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80192ca:	2b05      	cmp	r3, #5
 80192cc:	d9e0      	bls.n	8019290 <RegionUS915InitDefaults+0x1fc>
            }
            break;
 80192ce:	e002      	b.n	80192d6 <RegionUS915InitDefaults+0x242>
        }
        default:
        {
            break;
 80192d0:	bf00      	nop
 80192d2:	e000      	b.n	80192d6 <RegionUS915InitDefaults+0x242>
                return;
 80192d4:	bf00      	nop
        }
    }
#endif /* REGION_US915 */
}
 80192d6:	3728      	adds	r7, #40	@ 0x28
 80192d8:	46bd      	mov	sp, r7
 80192da:	bd80      	pop	{r7, pc}
 80192dc:	20001a78 	.word	0x20001a78
 80192e0:	20001a7c 	.word	0x20001a7c
 80192e4:	20001a80 	.word	0x20001a80
 80192e8:	00030d40 	.word	0x00030d40
 80192ec:	35c80160 	.word	0x35c80160
 80192f0:	00186a00 	.word	0x00186a00
 80192f4:	35d2afc0 	.word	0x35d2afc0

080192f8 <RegionUS915Verify>:

bool RegionUS915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 80192f8:	b580      	push	{r7, lr}
 80192fa:	b082      	sub	sp, #8
 80192fc:	af00      	add	r7, sp, #0
 80192fe:	6078      	str	r0, [r7, #4]
 8019300:	460b      	mov	r3, r1
 8019302:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_US915 )
    switch( phyAttribute )
 8019304:	78fb      	ldrb	r3, [r7, #3]
 8019306:	2b0f      	cmp	r3, #15
 8019308:	d867      	bhi.n	80193da <RegionUS915Verify+0xe2>
 801930a:	a201      	add	r2, pc, #4	@ (adr r2, 8019310 <RegionUS915Verify+0x18>)
 801930c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019310:	08019351 	.word	0x08019351
 8019314:	080193db 	.word	0x080193db
 8019318:	080193db 	.word	0x080193db
 801931c:	080193db 	.word	0x080193db
 8019320:	080193db 	.word	0x080193db
 8019324:	0801935f 	.word	0x0801935f
 8019328:	0801937d 	.word	0x0801937d
 801932c:	0801939b 	.word	0x0801939b
 8019330:	080193db 	.word	0x080193db
 8019334:	080193b9 	.word	0x080193b9
 8019338:	080193b9 	.word	0x080193b9
 801933c:	080193db 	.word	0x080193db
 8019340:	080193db 	.word	0x080193db
 8019344:	080193db 	.word	0x080193db
 8019348:	080193db 	.word	0x080193db
 801934c:	080193d7 	.word	0x080193d7
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 8019350:	687b      	ldr	r3, [r7, #4]
 8019352:	681b      	ldr	r3, [r3, #0]
 8019354:	4618      	mov	r0, r3
 8019356:	f7ff fca1 	bl	8018c9c <VerifyRfFreq>
 801935a:	4603      	mov	r3, r0
 801935c:	e03e      	b.n	80193dc <RegionUS915Verify+0xe4>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
 801935e:	687b      	ldr	r3, [r7, #4]
 8019360:	f993 3000 	ldrsb.w	r3, [r3]
 8019364:	2204      	movs	r2, #4
 8019366:	2100      	movs	r1, #0
 8019368:	4618      	mov	r0, r3
 801936a:	f7fd fd3a 	bl	8016de2 <RegionCommonValueInRange>
 801936e:	4603      	mov	r3, r0
 8019370:	2b00      	cmp	r3, #0
 8019372:	bf14      	ite	ne
 8019374:	2301      	movne	r3, #1
 8019376:	2300      	moveq	r3, #0
 8019378:	b2db      	uxtb	r3, r3
 801937a:	e02f      	b.n	80193dc <RegionUS915Verify+0xe4>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 801937c:	687b      	ldr	r3, [r7, #4]
 801937e:	f993 3000 	ldrsb.w	r3, [r3]
 8019382:	2205      	movs	r2, #5
 8019384:	2100      	movs	r1, #0
 8019386:	4618      	mov	r0, r3
 8019388:	f7fd fd2b 	bl	8016de2 <RegionCommonValueInRange>
 801938c:	4603      	mov	r3, r0
 801938e:	2b00      	cmp	r3, #0
 8019390:	bf14      	ite	ne
 8019392:	2301      	movne	r3, #1
 8019394:	2300      	moveq	r3, #0
 8019396:	b2db      	uxtb	r3, r3
 8019398:	e020      	b.n	80193dc <RegionUS915Verify+0xe4>
        }
#endif /* REGION_VERSION */
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE );
 801939a:	687b      	ldr	r3, [r7, #4]
 801939c:	f993 3000 	ldrsb.w	r3, [r3]
 80193a0:	220d      	movs	r2, #13
 80193a2:	2108      	movs	r1, #8
 80193a4:	4618      	mov	r0, r3
 80193a6:	f7fd fd1c 	bl	8016de2 <RegionCommonValueInRange>
 80193aa:	4603      	mov	r3, r0
 80193ac:	2b00      	cmp	r3, #0
 80193ae:	bf14      	ite	ne
 80193b0:	2301      	movne	r3, #1
 80193b2:	2300      	moveq	r3, #0
 80193b4:	b2db      	uxtb	r3, r3
 80193b6:	e011      	b.n	80193dc <RegionUS915Verify+0xe4>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 80193b8:	687b      	ldr	r3, [r7, #4]
 80193ba:	f993 3000 	ldrsb.w	r3, [r3]
 80193be:	220e      	movs	r2, #14
 80193c0:	2100      	movs	r1, #0
 80193c2:	4618      	mov	r0, r3
 80193c4:	f7fd fd0d 	bl	8016de2 <RegionCommonValueInRange>
 80193c8:	4603      	mov	r3, r0
 80193ca:	2b00      	cmp	r3, #0
 80193cc:	bf14      	ite	ne
 80193ce:	2301      	movne	r3, #1
 80193d0:	2300      	moveq	r3, #0
 80193d2:	b2db      	uxtb	r3, r3
 80193d4:	e002      	b.n	80193dc <RegionUS915Verify+0xe4>
        }
        case PHY_DUTY_CYCLE:
        {
            return US915_DUTY_CYCLE_ENABLED;
 80193d6:	2300      	movs	r3, #0
 80193d8:	e000      	b.n	80193dc <RegionUS915Verify+0xe4>
        }
        default:
            return false;
 80193da:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_US915 */
}
 80193dc:	4618      	mov	r0, r3
 80193de:	3708      	adds	r7, #8
 80193e0:	46bd      	mov	sp, r7
 80193e2:	bd80      	pop	{r7, pc}

080193e4 <RegionUS915ApplyCFList>:

void RegionUS915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 80193e4:	b480      	push	{r7}
 80193e6:	b085      	sub	sp, #20
 80193e8:	af00      	add	r7, sp, #0
 80193ea:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 80193ec:	687b      	ldr	r3, [r7, #4]
 80193ee:	7a1b      	ldrb	r3, [r3, #8]
 80193f0:	2b10      	cmp	r3, #16
 80193f2:	d15e      	bne.n	80194b2 <RegionUS915ApplyCFList+0xce>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 80193f4:	687b      	ldr	r3, [r7, #4]
 80193f6:	685b      	ldr	r3, [r3, #4]
 80193f8:	330f      	adds	r3, #15
 80193fa:	781b      	ldrb	r3, [r3, #0]
 80193fc:	2b01      	cmp	r3, #1
 80193fe:	d15a      	bne.n	80194b6 <RegionUS915ApplyCFList+0xd2>
    {
        return;
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 8019400:	2300      	movs	r3, #0
 8019402:	73fb      	strb	r3, [r7, #15]
 8019404:	2300      	movs	r3, #0
 8019406:	73bb      	strb	r3, [r7, #14]
 8019408:	e04f      	b.n	80194aa <RegionUS915ApplyCFList+0xc6>
    {
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 801940a:	687b      	ldr	r3, [r7, #4]
 801940c:	685a      	ldr	r2, [r3, #4]
 801940e:	7bbb      	ldrb	r3, [r7, #14]
 8019410:	4413      	add	r3, r2
 8019412:	7819      	ldrb	r1, [r3, #0]
 8019414:	4b2a      	ldr	r3, [pc, #168]	@ (80194c0 <RegionUS915ApplyCFList+0xdc>)
 8019416:	681b      	ldr	r3, [r3, #0]
 8019418:	7bfa      	ldrb	r2, [r7, #15]
 801941a:	f502 72d8 	add.w	r2, r2, #432	@ 0x1b0
 801941e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 8019422:	4b27      	ldr	r3, [pc, #156]	@ (80194c0 <RegionUS915ApplyCFList+0xdc>)
 8019424:	681b      	ldr	r3, [r3, #0]
 8019426:	7bfa      	ldrb	r2, [r7, #15]
 8019428:	f502 72d8 	add.w	r2, r2, #432	@ 0x1b0
 801942c:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8019430:	687b      	ldr	r3, [r7, #4]
 8019432:	685a      	ldr	r2, [r3, #4]
 8019434:	7bbb      	ldrb	r3, [r7, #14]
 8019436:	3301      	adds	r3, #1
 8019438:	4413      	add	r3, r2
 801943a:	781b      	ldrb	r3, [r3, #0]
 801943c:	021b      	lsls	r3, r3, #8
 801943e:	b299      	uxth	r1, r3
 8019440:	4b1f      	ldr	r3, [pc, #124]	@ (80194c0 <RegionUS915ApplyCFList+0xdc>)
 8019442:	681b      	ldr	r3, [r3, #0]
 8019444:	7bfa      	ldrb	r2, [r7, #15]
 8019446:	4301      	orrs	r1, r0
 8019448:	b289      	uxth	r1, r1
 801944a:	f502 72d8 	add.w	r2, r2, #432	@ 0x1b0
 801944e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        if( chMaskItr == 4 )
 8019452:	7bfb      	ldrb	r3, [r7, #15]
 8019454:	2b04      	cmp	r3, #4
 8019456:	d10f      	bne.n	8019478 <RegionUS915ApplyCFList+0x94>
        {
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 8019458:	4b19      	ldr	r3, [pc, #100]	@ (80194c0 <RegionUS915ApplyCFList+0xdc>)
 801945a:	681b      	ldr	r3, [r3, #0]
 801945c:	7bfa      	ldrb	r2, [r7, #15]
 801945e:	f502 72d8 	add.w	r2, r2, #432	@ 0x1b0
 8019462:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8019466:	4b16      	ldr	r3, [pc, #88]	@ (80194c0 <RegionUS915ApplyCFList+0xdc>)
 8019468:	681b      	ldr	r3, [r3, #0]
 801946a:	7bfa      	ldrb	r2, [r7, #15]
 801946c:	b2c9      	uxtb	r1, r1
 801946e:	b289      	uxth	r1, r1
 8019470:	f502 72d8 	add.w	r2, r2, #432	@ 0x1b0
 8019474:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }
        // Set the channel mask to the remaining
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 8019478:	4b12      	ldr	r3, [pc, #72]	@ (80194c4 <RegionUS915ApplyCFList+0xe0>)
 801947a:	681b      	ldr	r3, [r3, #0]
 801947c:	7bfa      	ldrb	r2, [r7, #15]
 801947e:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8019482:	4b0f      	ldr	r3, [pc, #60]	@ (80194c0 <RegionUS915ApplyCFList+0xdc>)
 8019484:	681b      	ldr	r3, [r3, #0]
 8019486:	7bfa      	ldrb	r2, [r7, #15]
 8019488:	f502 72d8 	add.w	r2, r2, #432	@ 0x1b0
 801948c:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8019490:	4b0c      	ldr	r3, [pc, #48]	@ (80194c4 <RegionUS915ApplyCFList+0xe0>)
 8019492:	681b      	ldr	r3, [r3, #0]
 8019494:	7bfa      	ldrb	r2, [r7, #15]
 8019496:	4001      	ands	r1, r0
 8019498:	b289      	uxth	r1, r1
 801949a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 801949e:	7bfb      	ldrb	r3, [r7, #15]
 80194a0:	3301      	adds	r3, #1
 80194a2:	73fb      	strb	r3, [r7, #15]
 80194a4:	7bbb      	ldrb	r3, [r7, #14]
 80194a6:	3302      	adds	r3, #2
 80194a8:	73bb      	strb	r3, [r7, #14]
 80194aa:	7bfb      	ldrb	r3, [r7, #15]
 80194ac:	2b04      	cmp	r3, #4
 80194ae:	d9ac      	bls.n	801940a <RegionUS915ApplyCFList+0x26>
 80194b0:	e002      	b.n	80194b8 <RegionUS915ApplyCFList+0xd4>
        return;
 80194b2:	bf00      	nop
 80194b4:	e000      	b.n	80194b8 <RegionUS915ApplyCFList+0xd4>
        return;
 80194b6:	bf00      	nop
    }
#endif /* REGION_US915 */
}
 80194b8:	3714      	adds	r7, #20
 80194ba:	46bd      	mov	sp, r7
 80194bc:	bc80      	pop	{r7}
 80194be:	4770      	bx	lr
 80194c0:	20001a7c 	.word	0x20001a7c
 80194c4:	20001a78 	.word	0x20001a78

080194c8 <RegionUS915ChanMaskSet>:

bool RegionUS915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 80194c8:	b580      	push	{r7, lr}
 80194ca:	b084      	sub	sp, #16
 80194cc:	af00      	add	r7, sp, #0
 80194ce:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    uint8_t nbChannels = RegionCommonCountChannels( chanMaskSet->ChannelsMaskIn, 0, 4 );
 80194d0:	687b      	ldr	r3, [r7, #4]
 80194d2:	681b      	ldr	r3, [r3, #0]
 80194d4:	2204      	movs	r2, #4
 80194d6:	2100      	movs	r1, #0
 80194d8:	4618      	mov	r0, r3
 80194da:	f7fd fcd3 	bl	8016e84 <RegionCommonCountChannels>
 80194de:	4603      	mov	r3, r0
 80194e0:	73bb      	strb	r3, [r7, #14]

    // Check the number of active channels
    if( ( nbChannels < 2 ) &&
 80194e2:	7bbb      	ldrb	r3, [r7, #14]
 80194e4:	2b01      	cmp	r3, #1
 80194e6:	d804      	bhi.n	80194f2 <RegionUS915ChanMaskSet+0x2a>
 80194e8:	7bbb      	ldrb	r3, [r7, #14]
 80194ea:	2b00      	cmp	r3, #0
 80194ec:	d001      	beq.n	80194f2 <RegionUS915ChanMaskSet+0x2a>
        ( nbChannels > 0 ) )
    {
        return false;
 80194ee:	2300      	movs	r3, #0
 80194f0:	e04a      	b.n	8019588 <RegionUS915ChanMaskSet+0xc0>
    }

    switch( chanMaskSet->ChannelsMaskType )
 80194f2:	687b      	ldr	r3, [r7, #4]
 80194f4:	791b      	ldrb	r3, [r3, #4]
 80194f6:	2b00      	cmp	r3, #0
 80194f8:	d002      	beq.n	8019500 <RegionUS915ChanMaskSet+0x38>
 80194fa:	2b01      	cmp	r3, #1
 80194fc:	d036      	beq.n	801956c <RegionUS915ChanMaskSet+0xa4>
 80194fe:	e040      	b.n	8019582 <RegionUS915ChanMaskSet+0xba>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8019500:	4b23      	ldr	r3, [pc, #140]	@ (8019590 <RegionUS915ChanMaskSet+0xc8>)
 8019502:	681b      	ldr	r3, [r3, #0]
 8019504:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 8019508:	687b      	ldr	r3, [r7, #4]
 801950a:	681b      	ldr	r3, [r3, #0]
 801950c:	2206      	movs	r2, #6
 801950e:	4619      	mov	r1, r3
 8019510:	f7fd fce4 	bl	8016edc <RegionCommonChanMaskCopy>

            RegionNvmGroup2->ChannelsDefaultMask[4] = RegionNvmGroup2->ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 8019514:	4b1e      	ldr	r3, [pc, #120]	@ (8019590 <RegionUS915ChanMaskSet+0xc8>)
 8019516:	681b      	ldr	r3, [r3, #0]
 8019518:	f8b3 2374 	ldrh.w	r2, [r3, #884]	@ 0x374
 801951c:	4b1c      	ldr	r3, [pc, #112]	@ (8019590 <RegionUS915ChanMaskSet+0xc8>)
 801951e:	681b      	ldr	r3, [r3, #0]
 8019520:	b2d2      	uxtb	r2, r2
 8019522:	b292      	uxth	r2, r2
 8019524:	f8a3 2374 	strh.w	r2, [r3, #884]	@ 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 8019528:	4b19      	ldr	r3, [pc, #100]	@ (8019590 <RegionUS915ChanMaskSet+0xc8>)
 801952a:	681b      	ldr	r3, [r3, #0]
 801952c:	2200      	movs	r2, #0
 801952e:	f8a3 2376 	strh.w	r2, [r3, #886]	@ 0x376

            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 8019532:	2300      	movs	r3, #0
 8019534:	73fb      	strb	r3, [r7, #15]
 8019536:	e015      	b.n	8019564 <RegionUS915ChanMaskSet+0x9c>
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 8019538:	4b16      	ldr	r3, [pc, #88]	@ (8019594 <RegionUS915ChanMaskSet+0xcc>)
 801953a:	681b      	ldr	r3, [r3, #0]
 801953c:	7bfa      	ldrb	r2, [r7, #15]
 801953e:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8019542:	4b13      	ldr	r3, [pc, #76]	@ (8019590 <RegionUS915ChanMaskSet+0xc8>)
 8019544:	681b      	ldr	r3, [r3, #0]
 8019546:	7bfa      	ldrb	r2, [r7, #15]
 8019548:	f502 72d8 	add.w	r2, r2, #432	@ 0x1b0
 801954c:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8019550:	4b10      	ldr	r3, [pc, #64]	@ (8019594 <RegionUS915ChanMaskSet+0xcc>)
 8019552:	681b      	ldr	r3, [r3, #0]
 8019554:	7bfa      	ldrb	r2, [r7, #15]
 8019556:	4001      	ands	r1, r0
 8019558:	b289      	uxth	r1, r1
 801955a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 801955e:	7bfb      	ldrb	r3, [r7, #15]
 8019560:	3301      	adds	r3, #1
 8019562:	73fb      	strb	r3, [r7, #15]
 8019564:	7bfb      	ldrb	r3, [r7, #15]
 8019566:	2b05      	cmp	r3, #5
 8019568:	d9e6      	bls.n	8019538 <RegionUS915ChanMaskSet+0x70>
            }
            break;
 801956a:	e00c      	b.n	8019586 <RegionUS915ChanMaskSet+0xbe>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 801956c:	4b08      	ldr	r3, [pc, #32]	@ (8019590 <RegionUS915ChanMaskSet+0xc8>)
 801956e:	681b      	ldr	r3, [r3, #0]
 8019570:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 8019574:	687b      	ldr	r3, [r7, #4]
 8019576:	681b      	ldr	r3, [r3, #0]
 8019578:	2206      	movs	r2, #6
 801957a:	4619      	mov	r1, r3
 801957c:	f7fd fcae 	bl	8016edc <RegionCommonChanMaskCopy>
            break;
 8019580:	e001      	b.n	8019586 <RegionUS915ChanMaskSet+0xbe>
        }
        default:
            return false;
 8019582:	2300      	movs	r3, #0
 8019584:	e000      	b.n	8019588 <RegionUS915ChanMaskSet+0xc0>
    }
    return true;
 8019586:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 8019588:	4618      	mov	r0, r3
 801958a:	3710      	adds	r7, #16
 801958c:	46bd      	mov	sp, r7
 801958e:	bd80      	pop	{r7, pc}
 8019590:	20001a7c 	.word	0x20001a7c
 8019594:	20001a78 	.word	0x20001a78

08019598 <RegionUS915ComputeRxWindowParameters>:

void RegionUS915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8019598:	b580      	push	{r7, lr}
 801959a:	b088      	sub	sp, #32
 801959c:	af02      	add	r7, sp, #8
 801959e:	60ba      	str	r2, [r7, #8]
 80195a0:	607b      	str	r3, [r7, #4]
 80195a2:	4603      	mov	r3, r0
 80195a4:	73fb      	strb	r3, [r7, #15]
 80195a6:	460b      	mov	r3, r1
 80195a8:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_US915 )
    uint32_t tSymbolInUs = 0;
 80195aa:	2300      	movs	r3, #0
 80195ac:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 80195ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80195b2:	2b0d      	cmp	r3, #13
 80195b4:	bfa8      	it	ge
 80195b6:	230d      	movge	r3, #13
 80195b8:	b25a      	sxtb	r2, r3
 80195ba:	687b      	ldr	r3, [r7, #4]
 80195bc:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 80195be:	687b      	ldr	r3, [r7, #4]
 80195c0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80195c4:	4916      	ldr	r1, [pc, #88]	@ (8019620 <RegionUS915ComputeRxWindowParameters+0x88>)
 80195c6:	4618      	mov	r0, r3
 80195c8:	f7fe f928 	bl	801781c <RegionCommonGetBandwidth>
 80195cc:	4603      	mov	r3, r0
 80195ce:	b2da      	uxtb	r2, r3
 80195d0:	687b      	ldr	r3, [r7, #4]
 80195d2:	709a      	strb	r2, [r3, #2]

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 80195d4:	687b      	ldr	r3, [r7, #4]
 80195d6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80195da:	461a      	mov	r2, r3
 80195dc:	4b11      	ldr	r3, [pc, #68]	@ (8019624 <RegionUS915ComputeRxWindowParameters+0x8c>)
 80195de:	5c9a      	ldrb	r2, [r3, r2]
 80195e0:	687b      	ldr	r3, [r7, #4]
 80195e2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80195e6:	4619      	mov	r1, r3
 80195e8:	4b0d      	ldr	r3, [pc, #52]	@ (8019620 <RegionUS915ComputeRxWindowParameters+0x88>)
 80195ea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80195ee:	4619      	mov	r1, r3
 80195f0:	4610      	mov	r0, r2
 80195f2:	f7fd fe91 	bl	8017318 <RegionCommonComputeSymbolTimeLoRa>
 80195f6:	6178      	str	r0, [r7, #20]

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 80195f8:	4b0b      	ldr	r3, [pc, #44]	@ (8019628 <RegionUS915ComputeRxWindowParameters+0x90>)
 80195fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80195fc:	4798      	blx	r3
 80195fe:	687b      	ldr	r3, [r7, #4]
 8019600:	3308      	adds	r3, #8
 8019602:	687a      	ldr	r2, [r7, #4]
 8019604:	320c      	adds	r2, #12
 8019606:	7bb9      	ldrb	r1, [r7, #14]
 8019608:	9201      	str	r2, [sp, #4]
 801960a:	9300      	str	r3, [sp, #0]
 801960c:	4603      	mov	r3, r0
 801960e:	68ba      	ldr	r2, [r7, #8]
 8019610:	6978      	ldr	r0, [r7, #20]
 8019612:	f7fd fea7 	bl	8017364 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_US915 */
}
 8019616:	bf00      	nop
 8019618:	3718      	adds	r7, #24
 801961a:	46bd      	mov	sp, r7
 801961c:	bd80      	pop	{r7, pc}
 801961e:	bf00      	nop
 8019620:	0801fc58 	.word	0x0801fc58
 8019624:	0801fc48 	.word	0x0801fc48
 8019628:	0801fccc 	.word	0x0801fccc

0801962c <RegionUS915RxConfig>:

bool RegionUS915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 801962c:	b590      	push	{r4, r7, lr}
 801962e:	b091      	sub	sp, #68	@ 0x44
 8019630:	af0a      	add	r7, sp, #40	@ 0x28
 8019632:	6078      	str	r0, [r7, #4]
 8019634:	6039      	str	r1, [r7, #0]
#if defined( REGION_US915 )
    int8_t dr = rxConfig->Datarate;
 8019636:	687b      	ldr	r3, [r7, #4]
 8019638:	785b      	ldrb	r3, [r3, #1]
 801963a:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 801963c:	2300      	movs	r3, #0
 801963e:	75fb      	strb	r3, [r7, #23]
    int8_t phyDr = 0;
 8019640:	2300      	movs	r3, #0
 8019642:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 8019644:	687b      	ldr	r3, [r7, #4]
 8019646:	685b      	ldr	r3, [r3, #4]
 8019648:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 801964a:	4b34      	ldr	r3, [pc, #208]	@ (801971c <RegionUS915RxConfig+0xf0>)
 801964c:	685b      	ldr	r3, [r3, #4]
 801964e:	4798      	blx	r3
 8019650:	4603      	mov	r3, r0
 8019652:	2b00      	cmp	r3, #0
 8019654:	d001      	beq.n	801965a <RegionUS915RxConfig+0x2e>
    {
        return false;
 8019656:	2300      	movs	r3, #0
 8019658:	e05c      	b.n	8019714 <RegionUS915RxConfig+0xe8>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 801965a:	687b      	ldr	r3, [r7, #4]
 801965c:	7cdb      	ldrb	r3, [r3, #19]
 801965e:	2b00      	cmp	r3, #0
 8019660:	d109      	bne.n	8019676 <RegionUS915RxConfig+0x4a>
    {
        // Apply window 1 frequency
        frequency = US915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * US915_STEPWIDTH_RX1_CHANNEL;
 8019662:	687b      	ldr	r3, [r7, #4]
 8019664:	781b      	ldrb	r3, [r3, #0]
 8019666:	f003 0307 	and.w	r3, r3, #7
 801966a:	4a2d      	ldr	r2, [pc, #180]	@ (8019720 <RegionUS915RxConfig+0xf4>)
 801966c:	fb03 f202 	mul.w	r2, r3, r2
 8019670:	4b2c      	ldr	r3, [pc, #176]	@ (8019724 <RegionUS915RxConfig+0xf8>)
 8019672:	4413      	add	r3, r2
 8019674:	613b      	str	r3, [r7, #16]
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesUS915[dr];
 8019676:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801967a:	4a2b      	ldr	r2, [pc, #172]	@ (8019728 <RegionUS915RxConfig+0xfc>)
 801967c:	5cd3      	ldrb	r3, [r2, r3]
 801967e:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 8019680:	4b26      	ldr	r3, [pc, #152]	@ (801971c <RegionUS915RxConfig+0xf0>)
 8019682:	68db      	ldr	r3, [r3, #12]
 8019684:	6938      	ldr	r0, [r7, #16]
 8019686:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8019688:	4b24      	ldr	r3, [pc, #144]	@ (801971c <RegionUS915RxConfig+0xf0>)
 801968a:	699c      	ldr	r4, [r3, #24]
 801968c:	687b      	ldr	r3, [r7, #4]
 801968e:	789b      	ldrb	r3, [r3, #2]
 8019690:	4618      	mov	r0, r3
 8019692:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8019696:	687b      	ldr	r3, [r7, #4]
 8019698:	689b      	ldr	r3, [r3, #8]
 801969a:	b29b      	uxth	r3, r3
 801969c:	687a      	ldr	r2, [r7, #4]
 801969e:	7c92      	ldrb	r2, [r2, #18]
 80196a0:	9209      	str	r2, [sp, #36]	@ 0x24
 80196a2:	2201      	movs	r2, #1
 80196a4:	9208      	str	r2, [sp, #32]
 80196a6:	2200      	movs	r2, #0
 80196a8:	9207      	str	r2, [sp, #28]
 80196aa:	2200      	movs	r2, #0
 80196ac:	9206      	str	r2, [sp, #24]
 80196ae:	2200      	movs	r2, #0
 80196b0:	9205      	str	r2, [sp, #20]
 80196b2:	2200      	movs	r2, #0
 80196b4:	9204      	str	r2, [sp, #16]
 80196b6:	2200      	movs	r2, #0
 80196b8:	9203      	str	r2, [sp, #12]
 80196ba:	9302      	str	r3, [sp, #8]
 80196bc:	2308      	movs	r3, #8
 80196be:	9301      	str	r3, [sp, #4]
 80196c0:	2300      	movs	r3, #0
 80196c2:	9300      	str	r3, [sp, #0]
 80196c4:	2301      	movs	r3, #1
 80196c6:	460a      	mov	r2, r1
 80196c8:	4601      	mov	r1, r0
 80196ca:	2001      	movs	r0, #1
 80196cc:	47a0      	blx	r4

    if( rxConfig->RepeaterSupport == true )
 80196ce:	687b      	ldr	r3, [r7, #4]
 80196d0:	7c5b      	ldrb	r3, [r3, #17]
 80196d2:	2b00      	cmp	r3, #0
 80196d4:	d005      	beq.n	80196e2 <RegionUS915RxConfig+0xb6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterUS915[dr];
 80196d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80196da:	4a14      	ldr	r2, [pc, #80]	@ (801972c <RegionUS915RxConfig+0x100>)
 80196dc:	5cd3      	ldrb	r3, [r2, r3]
 80196de:	75fb      	strb	r3, [r7, #23]
 80196e0:	e004      	b.n	80196ec <RegionUS915RxConfig+0xc0>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateUS915[dr];
 80196e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80196e6:	4a12      	ldr	r2, [pc, #72]	@ (8019730 <RegionUS915RxConfig+0x104>)
 80196e8:	5cd3      	ldrb	r3, [r2, r3]
 80196ea:	75fb      	strb	r3, [r7, #23]
    }

    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 80196ec:	4b0b      	ldr	r3, [pc, #44]	@ (801971c <RegionUS915RxConfig+0xf0>)
 80196ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80196f0:	7dfa      	ldrb	r2, [r7, #23]
 80196f2:	320d      	adds	r2, #13
 80196f4:	b2d2      	uxtb	r2, r2
 80196f6:	4611      	mov	r1, r2
 80196f8:	2001      	movs	r0, #1
 80196fa:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 80196fc:	687b      	ldr	r3, [r7, #4]
 80196fe:	7cdb      	ldrb	r3, [r3, #19]
 8019700:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8019704:	6939      	ldr	r1, [r7, #16]
 8019706:	4618      	mov	r0, r3
 8019708:	f7fe f8a6 	bl	8017858 <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 801970c:	683b      	ldr	r3, [r7, #0]
 801970e:	7bfa      	ldrb	r2, [r7, #15]
 8019710:	701a      	strb	r2, [r3, #0]
    return true;
 8019712:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 8019714:	4618      	mov	r0, r3
 8019716:	371c      	adds	r7, #28
 8019718:	46bd      	mov	sp, r7
 801971a:	bd90      	pop	{r4, r7, pc}
 801971c:	0801fccc 	.word	0x0801fccc
 8019720:	000927c0 	.word	0x000927c0
 8019724:	370870a0 	.word	0x370870a0
 8019728:	0801fc48 	.word	0x0801fc48
 801972c:	0801fcbc 	.word	0x0801fcbc
 8019730:	0801fcac 	.word	0x0801fcac

08019734 <RegionUS915TxConfig>:

bool RegionUS915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8019734:	b590      	push	{r4, r7, lr}
 8019736:	b093      	sub	sp, #76	@ 0x4c
 8019738:	af0a      	add	r7, sp, #40	@ 0x28
 801973a:	60f8      	str	r0, [r7, #12]
 801973c:	60b9      	str	r1, [r7, #8]
 801973e:	607a      	str	r2, [r7, #4]
#if defined( REGION_US915 )
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 8019740:	68fb      	ldr	r3, [r7, #12]
 8019742:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019746:	461a      	mov	r2, r3
 8019748:	4b49      	ldr	r3, [pc, #292]	@ (8019870 <RegionUS915TxConfig+0x13c>)
 801974a:	5c9b      	ldrb	r3, [r3, r2]
 801974c:	77fb      	strb	r3, [r7, #31]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 801974e:	68fb      	ldr	r3, [r7, #12]
 8019750:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8019754:	4b47      	ldr	r3, [pc, #284]	@ (8019874 <RegionUS915TxConfig+0x140>)
 8019756:	681a      	ldr	r2, [r3, #0]
 8019758:	4b47      	ldr	r3, [pc, #284]	@ (8019878 <RegionUS915TxConfig+0x144>)
 801975a:	6819      	ldr	r1, [r3, #0]
 801975c:	68fb      	ldr	r3, [r7, #12]
 801975e:	781b      	ldrb	r3, [r3, #0]
 8019760:	461c      	mov	r4, r3
 8019762:	4623      	mov	r3, r4
 8019764:	005b      	lsls	r3, r3, #1
 8019766:	4423      	add	r3, r4
 8019768:	009b      	lsls	r3, r3, #2
 801976a:	440b      	add	r3, r1
 801976c:	3309      	adds	r3, #9
 801976e:	781b      	ldrb	r3, [r3, #0]
 8019770:	4619      	mov	r1, r3
 8019772:	460b      	mov	r3, r1
 8019774:	005b      	lsls	r3, r3, #1
 8019776:	440b      	add	r3, r1
 8019778:	00db      	lsls	r3, r3, #3
 801977a:	4413      	add	r3, r2
 801977c:	f993 1002 	ldrsb.w	r1, [r3, #2]
 8019780:	68fb      	ldr	r3, [r7, #12]
 8019782:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8019786:	4b3c      	ldr	r3, [pc, #240]	@ (8019878 <RegionUS915TxConfig+0x144>)
 8019788:	681b      	ldr	r3, [r3, #0]
 801978a:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 801978e:	f7ff fa4f 	bl	8018c30 <LimitTxPower>
 8019792:	4603      	mov	r3, r0
 8019794:	77bb      	strb	r3, [r7, #30]
#endif /* REGION_VERSION */

    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 8019796:	68fb      	ldr	r3, [r7, #12]
 8019798:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801979c:	4937      	ldr	r1, [pc, #220]	@ (801987c <RegionUS915TxConfig+0x148>)
 801979e:	4618      	mov	r0, r3
 80197a0:	f7fe f83c 	bl	801781c <RegionCommonGetBandwidth>
 80197a4:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 80197a6:	2300      	movs	r3, #0
 80197a8:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 80197aa:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80197ae:	f04f 0200 	mov.w	r2, #0
 80197b2:	4933      	ldr	r1, [pc, #204]	@ (8019880 <RegionUS915TxConfig+0x14c>)
 80197b4:	4618      	mov	r0, r3
 80197b6:	f7fd fe8d 	bl	80174d4 <RegionCommonComputeTxPower>
 80197ba:	4603      	mov	r3, r0
 80197bc:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 80197be:	4b31      	ldr	r3, [pc, #196]	@ (8019884 <RegionUS915TxConfig+0x150>)
 80197c0:	68da      	ldr	r2, [r3, #12]
 80197c2:	4b2d      	ldr	r3, [pc, #180]	@ (8019878 <RegionUS915TxConfig+0x144>)
 80197c4:	6819      	ldr	r1, [r3, #0]
 80197c6:	68fb      	ldr	r3, [r7, #12]
 80197c8:	781b      	ldrb	r3, [r3, #0]
 80197ca:	4618      	mov	r0, r3
 80197cc:	4603      	mov	r3, r0
 80197ce:	005b      	lsls	r3, r3, #1
 80197d0:	4403      	add	r3, r0
 80197d2:	009b      	lsls	r3, r3, #2
 80197d4:	440b      	add	r3, r1
 80197d6:	681b      	ldr	r3, [r3, #0]
 80197d8:	4618      	mov	r0, r3
 80197da:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 80197dc:	4b29      	ldr	r3, [pc, #164]	@ (8019884 <RegionUS915TxConfig+0x150>)
 80197de:	69dc      	ldr	r4, [r3, #28]
 80197e0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80197e4:	f997 1017 	ldrsb.w	r1, [r7, #23]
 80197e8:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 80197ec:	9208      	str	r2, [sp, #32]
 80197ee:	2200      	movs	r2, #0
 80197f0:	9207      	str	r2, [sp, #28]
 80197f2:	2200      	movs	r2, #0
 80197f4:	9206      	str	r2, [sp, #24]
 80197f6:	2200      	movs	r2, #0
 80197f8:	9205      	str	r2, [sp, #20]
 80197fa:	2201      	movs	r2, #1
 80197fc:	9204      	str	r2, [sp, #16]
 80197fe:	2200      	movs	r2, #0
 8019800:	9203      	str	r2, [sp, #12]
 8019802:	2208      	movs	r2, #8
 8019804:	9202      	str	r2, [sp, #8]
 8019806:	2201      	movs	r2, #1
 8019808:	9201      	str	r2, [sp, #4]
 801980a:	9300      	str	r3, [sp, #0]
 801980c:	69bb      	ldr	r3, [r7, #24]
 801980e:	2200      	movs	r2, #0
 8019810:	2001      	movs	r0, #1
 8019812:	47a0      	blx	r4
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8019814:	4b18      	ldr	r3, [pc, #96]	@ (8019878 <RegionUS915TxConfig+0x144>)
 8019816:	681a      	ldr	r2, [r3, #0]
 8019818:	68fb      	ldr	r3, [r7, #12]
 801981a:	781b      	ldrb	r3, [r3, #0]
 801981c:	4619      	mov	r1, r3
 801981e:	460b      	mov	r3, r1
 8019820:	005b      	lsls	r3, r3, #1
 8019822:	440b      	add	r3, r1
 8019824:	009b      	lsls	r3, r3, #2
 8019826:	4413      	add	r3, r2
 8019828:	681a      	ldr	r2, [r3, #0]
 801982a:	68fb      	ldr	r3, [r7, #12]
 801982c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019830:	4619      	mov	r1, r3
 8019832:	4610      	mov	r0, r2
 8019834:	f7fe f842 	bl	80178bc <RegionCommonTxConfigPrint>

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 8019838:	4b12      	ldr	r3, [pc, #72]	@ (8019884 <RegionUS915TxConfig+0x150>)
 801983a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801983c:	68fa      	ldr	r2, [r7, #12]
 801983e:	8992      	ldrh	r2, [r2, #12]
 8019840:	b2d2      	uxtb	r2, r2
 8019842:	4611      	mov	r1, r2
 8019844:	2001      	movs	r0, #1
 8019846:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8019848:	68fb      	ldr	r3, [r7, #12]
 801984a:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801984e:	68fb      	ldr	r3, [r7, #12]
 8019850:	899b      	ldrh	r3, [r3, #12]
 8019852:	4619      	mov	r1, r3
 8019854:	4610      	mov	r0, r2
 8019856:	f7ff fa65 	bl	8018d24 <GetTimeOnAir>
 801985a:	4602      	mov	r2, r0
 801985c:	687b      	ldr	r3, [r7, #4]
 801985e:	601a      	str	r2, [r3, #0]

    *txPower = txPowerLimited;
 8019860:	68bb      	ldr	r3, [r7, #8]
 8019862:	7fba      	ldrb	r2, [r7, #30]
 8019864:	701a      	strb	r2, [r3, #0]
    return true;
 8019866:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 8019868:	4618      	mov	r0, r3
 801986a:	3724      	adds	r7, #36	@ 0x24
 801986c:	46bd      	mov	sp, r7
 801986e:	bd90      	pop	{r4, r7, pc}
 8019870:	0801fc48 	.word	0x0801fc48
 8019874:	20001a80 	.word	0x20001a80
 8019878:	20001a7c 	.word	0x20001a7c
 801987c:	0801fc58 	.word	0x0801fc58
 8019880:	41f00000 	.word	0x41f00000
 8019884:	0801fccc 	.word	0x0801fccc

08019888 <RegionUS915LinkAdrReq>:

uint8_t RegionUS915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8019888:	b590      	push	{r4, r7, lr}
 801988a:	b097      	sub	sp, #92	@ 0x5c
 801988c:	af00      	add	r7, sp, #0
 801988e:	60f8      	str	r0, [r7, #12]
 8019890:	60b9      	str	r1, [r7, #8]
 8019892:	607a      	str	r2, [r7, #4]
 8019894:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8019896:	2307      	movs	r3, #7
 8019898:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
#if defined( REGION_US915 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 801989c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80198a0:	2200      	movs	r2, #0
 80198a2:	601a      	str	r2, [r3, #0]
 80198a4:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 80198a6:	2300      	movs	r3, #0
 80198a8:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
    uint8_t bytesProcessed = 0;
 80198ac:	2300      	movs	r3, #0
 80198ae:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    uint16_t channelsMask[CHANNELS_MASK_SIZE] = { 0, 0, 0, 0, 0, 0 };
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 80198b2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80198b6:	2200      	movs	r2, #0
 80198b8:	601a      	str	r2, [r3, #0]
 80198ba:	605a      	str	r2, [r3, #4]
 80198bc:	609a      	str	r2, [r3, #8]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 80198be:	4b97      	ldr	r3, [pc, #604]	@ (8019b1c <RegionUS915LinkAdrReq+0x294>)
 80198c0:	681b      	ldr	r3, [r3, #0]
 80198c2:	f503 7158 	add.w	r1, r3, #864	@ 0x360
 80198c6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80198ca:	2206      	movs	r2, #6
 80198cc:	4618      	mov	r0, r3
 80198ce:	f7fd fb05 	bl	8016edc <RegionCommonChanMaskCopy>

    while( bytesProcessed < linkAdrReq->PayloadSize )
 80198d2:	e11b      	b.n	8019b0c <RegionUS915LinkAdrReq+0x284>
    {
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 80198d4:	68fb      	ldr	r3, [r7, #12]
 80198d6:	685a      	ldr	r2, [r3, #4]
 80198d8:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 80198dc:	4413      	add	r3, r2
 80198de:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 80198e2:	4611      	mov	r1, r2
 80198e4:	4618      	mov	r0, r3
 80198e6:	f7fd fc3d 	bl	8017164 <RegionCommonParseLinkAdrReq>
 80198ea:	4603      	mov	r3, r0
 80198ec:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53

        if( nextIndex == 0 )
 80198f0:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80198f4:	2b00      	cmp	r3, #0
 80198f6:	f000 8113 	beq.w	8019b20 <RegionUS915LinkAdrReq+0x298>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 80198fa:	f897 2056 	ldrb.w	r2, [r7, #86]	@ 0x56
 80198fe:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8019902:	4413      	add	r3, r2
 8019904:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8019908:	2307      	movs	r3, #7
 801990a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

        if( linkAdrParams.ChMaskCtrl == 6 )
 801990e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8019912:	2b06      	cmp	r3, #6
 8019914:	d116      	bne.n	8019944 <RegionUS915LinkAdrReq+0xbc>
        {
            // Enable all 125 kHz channels
            channelsMask[0] = 0xFFFF;
 8019916:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801991a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
            channelsMask[1] = 0xFFFF;
 801991e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019922:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
            channelsMask[2] = 0xFFFF;
 8019926:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801992a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
            channelsMask[3] = 0xFFFF;
 801992e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019932:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 8019936:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 801993a:	b2db      	uxtb	r3, r3
 801993c:	b29b      	uxth	r3, r3
 801993e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8019942:	e0e3      	b.n	8019b0c <RegionUS915LinkAdrReq+0x284>
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
 8019944:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8019948:	2b07      	cmp	r3, #7
 801994a:	d112      	bne.n	8019972 <RegionUS915LinkAdrReq+0xea>
        {
            // Disable all 125 kHz channels
            channelsMask[0] = 0x0000;
 801994c:	2300      	movs	r3, #0
 801994e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
            channelsMask[1] = 0x0000;
 8019952:	2300      	movs	r3, #0
 8019954:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
            channelsMask[2] = 0x0000;
 8019958:	2300      	movs	r3, #0
 801995a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
            channelsMask[3] = 0x0000;
 801995e:	2300      	movs	r3, #0
 8019960:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 8019964:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8019968:	b2db      	uxtb	r3, r3
 801996a:	b29b      	uxth	r3, r3
 801996c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8019970:	e0cc      	b.n	8019b0c <RegionUS915LinkAdrReq+0x284>
        }
        else if( linkAdrParams.ChMaskCtrl == 5 )
 8019972:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8019976:	2b05      	cmp	r3, #5
 8019978:	f040 80bf 	bne.w	8019afa <RegionUS915LinkAdrReq+0x272>
        {
            // Start value for comparison
            uint8_t bitMask = 1;
 801997c:	2301      	movs	r3, #1
 801997e:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52

            // cntChannelMask for channelsMask[0] until channelsMask[3]
            uint8_t cntChannelMask = 0;
 8019982:	2300      	movs	r3, #0
 8019984:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55

            // i will be 1, 2, 3, ..., 7
            for( uint8_t i = 0; i <= 7; i++ )
 8019988:	2300      	movs	r3, #0
 801998a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
 801998e:	e0ae      	b.n	8019aee <RegionUS915LinkAdrReq+0x266>
            {
                // 8 MSBs of ChMask are RFU
                // Checking if the ChMask is set, then true
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 8019990:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8019994:	b2da      	uxtb	r2, r3
 8019996:	f897 1052 	ldrb.w	r1, [r7, #82]	@ 0x52
 801999a:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 801999e:	fa01 f303 	lsl.w	r3, r1, r3
 80199a2:	4013      	ands	r3, r2
 80199a4:	2b00      	cmp	r3, #0
 80199a6:	d04d      	beq.n	8019a44 <RegionUS915LinkAdrReq+0x1bc>
                {
                    if( ( i % 2 ) == 0 )
 80199a8:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80199ac:	f003 0301 	and.w	r3, r3, #1
 80199b0:	b2db      	uxtb	r3, r3
 80199b2:	2b00      	cmp	r3, #0
 80199b4:	d120      	bne.n	80199f8 <RegionUS915LinkAdrReq+0x170>
                    {
                        // Enable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] |= 0x00FF;
 80199b6:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80199ba:	005b      	lsls	r3, r3, #1
 80199bc:	3358      	adds	r3, #88	@ 0x58
 80199be:	443b      	add	r3, r7
 80199c0:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 80199c4:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80199c8:	f042 02ff 	orr.w	r2, r2, #255	@ 0xff
 80199cc:	b292      	uxth	r2, r2
 80199ce:	005b      	lsls	r3, r3, #1
 80199d0:	3358      	adds	r3, #88	@ 0x58
 80199d2:	443b      	add	r3, r7
 80199d4:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 80199d8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80199dc:	b21a      	sxth	r2, r3
 80199de:	f897 1052 	ldrb.w	r1, [r7, #82]	@ 0x52
 80199e2:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80199e6:	fa01 f303 	lsl.w	r3, r1, r3
 80199ea:	b21b      	sxth	r3, r3
 80199ec:	4313      	orrs	r3, r2
 80199ee:	b21b      	sxth	r3, r3
 80199f0:	b29b      	uxth	r3, r3
 80199f2:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80199f6:	e075      	b.n	8019ae4 <RegionUS915LinkAdrReq+0x25c>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] |= 0xFF00;
 80199f8:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80199fc:	005b      	lsls	r3, r3, #1
 80199fe:	3358      	adds	r3, #88	@ 0x58
 8019a00:	443b      	add	r3, r7
 8019a02:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8019a06:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8019a0a:	f062 02ff 	orn	r2, r2, #255	@ 0xff
 8019a0e:	b292      	uxth	r2, r2
 8019a10:	005b      	lsls	r3, r3, #1
 8019a12:	3358      	adds	r3, #88	@ 0x58
 8019a14:	443b      	add	r3, r7
 8019a16:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 8019a1a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8019a1e:	b21a      	sxth	r2, r3
 8019a20:	f897 1052 	ldrb.w	r1, [r7, #82]	@ 0x52
 8019a24:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8019a28:	fa01 f303 	lsl.w	r3, r1, r3
 8019a2c:	b21b      	sxth	r3, r3
 8019a2e:	4313      	orrs	r3, r2
 8019a30:	b21b      	sxth	r3, r3
 8019a32:	b29b      	uxth	r3, r3
 8019a34:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 8019a38:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8019a3c:	3301      	adds	r3, #1
 8019a3e:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
 8019a42:	e04f      	b.n	8019ae4 <RegionUS915LinkAdrReq+0x25c>
                    }
                }
                // ChMask is not set
                else
                {
                    if( ( i % 2 ) == 0 )
 8019a44:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8019a48:	f003 0301 	and.w	r3, r3, #1
 8019a4c:	b2db      	uxtb	r3, r3
 8019a4e:	2b00      	cmp	r3, #0
 8019a50:	d122      	bne.n	8019a98 <RegionUS915LinkAdrReq+0x210>
                    {
                        // Disable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] &= 0xFF00;
 8019a52:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8019a56:	005b      	lsls	r3, r3, #1
 8019a58:	3358      	adds	r3, #88	@ 0x58
 8019a5a:	443b      	add	r3, r7
 8019a5c:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8019a60:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8019a64:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8019a68:	b292      	uxth	r2, r2
 8019a6a:	005b      	lsls	r3, r3, #1
 8019a6c:	3358      	adds	r3, #88	@ 0x58
 8019a6e:	443b      	add	r3, r7
 8019a70:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 8019a74:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8019a78:	b21a      	sxth	r2, r3
 8019a7a:	f897 1052 	ldrb.w	r1, [r7, #82]	@ 0x52
 8019a7e:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8019a82:	fa01 f303 	lsl.w	r3, r1, r3
 8019a86:	b21b      	sxth	r3, r3
 8019a88:	43db      	mvns	r3, r3
 8019a8a:	b21b      	sxth	r3, r3
 8019a8c:	4013      	ands	r3, r2
 8019a8e:	b21b      	sxth	r3, r3
 8019a90:	b29b      	uxth	r3, r3
 8019a92:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8019a96:	e025      	b.n	8019ae4 <RegionUS915LinkAdrReq+0x25c>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] &= 0x00FF;
 8019a98:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8019a9c:	005b      	lsls	r3, r3, #1
 8019a9e:	3358      	adds	r3, #88	@ 0x58
 8019aa0:	443b      	add	r3, r7
 8019aa2:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8019aa6:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8019aaa:	b2d2      	uxtb	r2, r2
 8019aac:	b292      	uxth	r2, r2
 8019aae:	005b      	lsls	r3, r3, #1
 8019ab0:	3358      	adds	r3, #88	@ 0x58
 8019ab2:	443b      	add	r3, r7
 8019ab4:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 8019ab8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8019abc:	b21a      	sxth	r2, r3
 8019abe:	f897 1052 	ldrb.w	r1, [r7, #82]	@ 0x52
 8019ac2:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8019ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8019aca:	b21b      	sxth	r3, r3
 8019acc:	43db      	mvns	r3, r3
 8019ace:	b21b      	sxth	r3, r3
 8019ad0:	4013      	ands	r3, r2
 8019ad2:	b21b      	sxth	r3, r3
 8019ad4:	b29b      	uxth	r3, r3
 8019ad6:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 8019ada:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8019ade:	3301      	adds	r3, #1
 8019ae0:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
            for( uint8_t i = 0; i <= 7; i++ )
 8019ae4:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8019ae8:	3301      	adds	r3, #1
 8019aea:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
 8019aee:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8019af2:	2b07      	cmp	r3, #7
 8019af4:	f67f af4c 	bls.w	8019990 <RegionUS915LinkAdrReq+0x108>
 8019af8:	e008      	b.n	8019b0c <RegionUS915LinkAdrReq+0x284>
                }
            }
        }
        else
        {
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 8019afa:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8019afe:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8019b02:	005b      	lsls	r3, r3, #1
 8019b04:	3358      	adds	r3, #88	@ 0x58
 8019b06:	443b      	add	r3, r7
 8019b08:	f823 2c18 	strh.w	r2, [r3, #-24]
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8019b0c:	68fb      	ldr	r3, [r7, #12]
 8019b0e:	7a1b      	ldrb	r3, [r3, #8]
 8019b10:	f897 2056 	ldrb.w	r2, [r7, #86]	@ 0x56
 8019b14:	429a      	cmp	r2, r3
 8019b16:	f4ff aedd 	bcc.w	80198d4 <RegionUS915LinkAdrReq+0x4c>
 8019b1a:	e002      	b.n	8019b22 <RegionUS915LinkAdrReq+0x29a>
 8019b1c:	20001a7c 	.word	0x20001a7c
            break; // break loop, since no more request has been found
 8019b20:	bf00      	nop
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 8019b22:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 8019b26:	2b03      	cmp	r3, #3
 8019b28:	dc0f      	bgt.n	8019b4a <RegionUS915LinkAdrReq+0x2c2>
 8019b2a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8019b2e:	2204      	movs	r2, #4
 8019b30:	2100      	movs	r1, #0
 8019b32:	4618      	mov	r0, r3
 8019b34:	f7fd f9a6 	bl	8016e84 <RegionCommonCountChannels>
 8019b38:	4603      	mov	r3, r0
 8019b3a:	2b01      	cmp	r3, #1
 8019b3c:	d805      	bhi.n	8019b4a <RegionUS915LinkAdrReq+0x2c2>
    {
        status &= 0xFE; // Channel mask KO
 8019b3e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8019b42:	f023 0301 	bic.w	r3, r3, #1
 8019b46:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8019b4a:	2302      	movs	r3, #2
 8019b4c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8019b50:	68fb      	ldr	r3, [r7, #12]
 8019b52:	7a5b      	ldrb	r3, [r3, #9]
 8019b54:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
    phyParam = RegionUS915GetPhyParam( &getPhy );
 8019b58:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8019b5c:	4618      	mov	r0, r3
 8019b5e:	f7ff f911 	bl	8018d84 <RegionUS915GetPhyParam>
 8019b62:	4603      	mov	r3, r0
 8019b64:	637b      	str	r3, [r7, #52]	@ 0x34

    linkAdrVerifyParams.Status = status;
 8019b66:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8019b6a:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8019b6c:	68fb      	ldr	r3, [r7, #12]
 8019b6e:	7a9b      	ldrb	r3, [r3, #10]
 8019b70:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8019b72:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 8019b76:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8019b78:	f997 304e 	ldrsb.w	r3, [r7, #78]	@ 0x4e
 8019b7c:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8019b7e:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8019b82:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8019b84:	68fb      	ldr	r3, [r7, #12]
 8019b86:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8019b8a:	777b      	strb	r3, [r7, #29]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8019b8c:	68fb      	ldr	r3, [r7, #12]
 8019b8e:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8019b92:	77bb      	strb	r3, [r7, #30]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8019b94:	68fb      	ldr	r3, [r7, #12]
 8019b96:	7b5b      	ldrb	r3, [r3, #13]
 8019b98:	b25b      	sxtb	r3, r3
 8019b9a:	77fb      	strb	r3, [r7, #31]
    linkAdrVerifyParams.NbChannels = US915_MAX_NB_CHANNELS;
 8019b9c:	2348      	movs	r3, #72	@ 0x48
 8019b9e:	f887 3020 	strb.w	r3, [r7, #32]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 8019ba2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8019ba6:	627b      	str	r3, [r7, #36]	@ 0x24
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8019ba8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019baa:	b25b      	sxtb	r3, r3
 8019bac:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    linkAdrVerifyParams.MaxDatarate = US915_TX_MAX_DATARATE;
 8019bb0:	2304      	movs	r3, #4
 8019bb2:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8019bb6:	4b3f      	ldr	r3, [pc, #252]	@ (8019cb4 <RegionUS915LinkAdrReq+0x42c>)
 8019bb8:	681b      	ldr	r3, [r3, #0]
 8019bba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    linkAdrVerifyParams.MinTxPower = US915_MIN_TX_POWER;
 8019bbc:	230e      	movs	r3, #14
 8019bbe:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    linkAdrVerifyParams.MaxTxPower = US915_MAX_TX_POWER;
 8019bc2:	2300      	movs	r3, #0
 8019bc4:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8019bc8:	68fb      	ldr	r3, [r7, #12]
 8019bca:	681b      	ldr	r3, [r3, #0]
 8019bcc:	617b      	str	r3, [r7, #20]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8019bce:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 8019bd2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8019bd6:	1c9a      	adds	r2, r3, #2
 8019bd8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8019bdc:	1c59      	adds	r1, r3, #1
 8019bde:	f107 0014 	add.w	r0, r7, #20
 8019be2:	4623      	mov	r3, r4
 8019be4:	f7fd fb0f 	bl	8017206 <RegionCommonLinkAdrReqVerifyParams>
 8019be8:	4603      	mov	r3, r0
 8019bea:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8019bee:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8019bf2:	2b07      	cmp	r3, #7
 8019bf4:	d147      	bne.n	8019c86 <RegionUS915LinkAdrReq+0x3fe>
    {
        // Copy Mask
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
 8019bf6:	4b2f      	ldr	r3, [pc, #188]	@ (8019cb4 <RegionUS915LinkAdrReq+0x42c>)
 8019bf8:	681b      	ldr	r3, [r3, #0]
 8019bfa:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8019bfe:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8019c02:	2206      	movs	r2, #6
 8019c04:	4618      	mov	r0, r3
 8019c06:	f7fd f969 	bl	8016edc <RegionCommonChanMaskCopy>

        RegionNvmGroup1->ChannelsMaskRemaining[0] &= RegionNvmGroup2->ChannelsMask[0];
 8019c0a:	4b2b      	ldr	r3, [pc, #172]	@ (8019cb8 <RegionUS915LinkAdrReq+0x430>)
 8019c0c:	681b      	ldr	r3, [r3, #0]
 8019c0e:	8819      	ldrh	r1, [r3, #0]
 8019c10:	4b28      	ldr	r3, [pc, #160]	@ (8019cb4 <RegionUS915LinkAdrReq+0x42c>)
 8019c12:	681b      	ldr	r3, [r3, #0]
 8019c14:	f8b3 2360 	ldrh.w	r2, [r3, #864]	@ 0x360
 8019c18:	4b27      	ldr	r3, [pc, #156]	@ (8019cb8 <RegionUS915LinkAdrReq+0x430>)
 8019c1a:	681b      	ldr	r3, [r3, #0]
 8019c1c:	400a      	ands	r2, r1
 8019c1e:	b292      	uxth	r2, r2
 8019c20:	801a      	strh	r2, [r3, #0]
        RegionNvmGroup1->ChannelsMaskRemaining[1] &= RegionNvmGroup2->ChannelsMask[1];
 8019c22:	4b25      	ldr	r3, [pc, #148]	@ (8019cb8 <RegionUS915LinkAdrReq+0x430>)
 8019c24:	681b      	ldr	r3, [r3, #0]
 8019c26:	8859      	ldrh	r1, [r3, #2]
 8019c28:	4b22      	ldr	r3, [pc, #136]	@ (8019cb4 <RegionUS915LinkAdrReq+0x42c>)
 8019c2a:	681b      	ldr	r3, [r3, #0]
 8019c2c:	f8b3 2362 	ldrh.w	r2, [r3, #866]	@ 0x362
 8019c30:	4b21      	ldr	r3, [pc, #132]	@ (8019cb8 <RegionUS915LinkAdrReq+0x430>)
 8019c32:	681b      	ldr	r3, [r3, #0]
 8019c34:	400a      	ands	r2, r1
 8019c36:	b292      	uxth	r2, r2
 8019c38:	805a      	strh	r2, [r3, #2]
        RegionNvmGroup1->ChannelsMaskRemaining[2] &= RegionNvmGroup2->ChannelsMask[2];
 8019c3a:	4b1f      	ldr	r3, [pc, #124]	@ (8019cb8 <RegionUS915LinkAdrReq+0x430>)
 8019c3c:	681b      	ldr	r3, [r3, #0]
 8019c3e:	8899      	ldrh	r1, [r3, #4]
 8019c40:	4b1c      	ldr	r3, [pc, #112]	@ (8019cb4 <RegionUS915LinkAdrReq+0x42c>)
 8019c42:	681b      	ldr	r3, [r3, #0]
 8019c44:	f8b3 2364 	ldrh.w	r2, [r3, #868]	@ 0x364
 8019c48:	4b1b      	ldr	r3, [pc, #108]	@ (8019cb8 <RegionUS915LinkAdrReq+0x430>)
 8019c4a:	681b      	ldr	r3, [r3, #0]
 8019c4c:	400a      	ands	r2, r1
 8019c4e:	b292      	uxth	r2, r2
 8019c50:	809a      	strh	r2, [r3, #4]
        RegionNvmGroup1->ChannelsMaskRemaining[3] &= RegionNvmGroup2->ChannelsMask[3];
 8019c52:	4b19      	ldr	r3, [pc, #100]	@ (8019cb8 <RegionUS915LinkAdrReq+0x430>)
 8019c54:	681b      	ldr	r3, [r3, #0]
 8019c56:	88d9      	ldrh	r1, [r3, #6]
 8019c58:	4b16      	ldr	r3, [pc, #88]	@ (8019cb4 <RegionUS915LinkAdrReq+0x42c>)
 8019c5a:	681b      	ldr	r3, [r3, #0]
 8019c5c:	f8b3 2366 	ldrh.w	r2, [r3, #870]	@ 0x366
 8019c60:	4b15      	ldr	r3, [pc, #84]	@ (8019cb8 <RegionUS915LinkAdrReq+0x430>)
 8019c62:	681b      	ldr	r3, [r3, #0]
 8019c64:	400a      	ands	r2, r1
 8019c66:	b292      	uxth	r2, r2
 8019c68:	80da      	strh	r2, [r3, #6]
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 8019c6a:	4b12      	ldr	r3, [pc, #72]	@ (8019cb4 <RegionUS915LinkAdrReq+0x42c>)
 8019c6c:	681a      	ldr	r2, [r3, #0]
 8019c6e:	4b12      	ldr	r3, [pc, #72]	@ (8019cb8 <RegionUS915LinkAdrReq+0x430>)
 8019c70:	681b      	ldr	r3, [r3, #0]
 8019c72:	f8b2 2368 	ldrh.w	r2, [r2, #872]	@ 0x368
 8019c76:	811a      	strh	r2, [r3, #8]
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 8019c78:	4b0e      	ldr	r3, [pc, #56]	@ (8019cb4 <RegionUS915LinkAdrReq+0x42c>)
 8019c7a:	681a      	ldr	r2, [r3, #0]
 8019c7c:	4b0e      	ldr	r3, [pc, #56]	@ (8019cb8 <RegionUS915LinkAdrReq+0x430>)
 8019c7e:	681b      	ldr	r3, [r3, #0]
 8019c80:	f8b2 236a 	ldrh.w	r2, [r2, #874]	@ 0x36a
 8019c84:	815a      	strh	r2, [r3, #10]
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8019c86:	f997 204d 	ldrsb.w	r2, [r7, #77]	@ 0x4d
 8019c8a:	68bb      	ldr	r3, [r7, #8]
 8019c8c:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8019c8e:	f997 204e 	ldrsb.w	r2, [r7, #78]	@ 0x4e
 8019c92:	687b      	ldr	r3, [r7, #4]
 8019c94:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8019c96:	f897 204c 	ldrb.w	r2, [r7, #76]	@ 0x4c
 8019c9a:	683b      	ldr	r3, [r7, #0]
 8019c9c:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8019c9e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019ca0:	f897 2056 	ldrb.w	r2, [r7, #86]	@ 0x56
 8019ca4:	701a      	strb	r2, [r3, #0]

#endif /* REGION_US915 */
    return status;
 8019ca6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
}
 8019caa:	4618      	mov	r0, r3
 8019cac:	375c      	adds	r7, #92	@ 0x5c
 8019cae:	46bd      	mov	sp, r7
 8019cb0:	bd90      	pop	{r4, r7, pc}
 8019cb2:	bf00      	nop
 8019cb4:	20001a7c 	.word	0x20001a7c
 8019cb8:	20001a78 	.word	0x20001a78

08019cbc <RegionUS915RxParamSetupReq>:

uint8_t RegionUS915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8019cbc:	b580      	push	{r7, lr}
 8019cbe:	b084      	sub	sp, #16
 8019cc0:	af00      	add	r7, sp, #0
 8019cc2:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8019cc4:	2307      	movs	r3, #7
 8019cc6:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_US915 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 8019cc8:	687b      	ldr	r3, [r7, #4]
 8019cca:	685b      	ldr	r3, [r3, #4]
 8019ccc:	4618      	mov	r0, r3
 8019cce:	f7fe ffe5 	bl	8018c9c <VerifyRfFreq>
 8019cd2:	4603      	mov	r3, r0
 8019cd4:	f083 0301 	eor.w	r3, r3, #1
 8019cd8:	b2db      	uxtb	r3, r3
 8019cda:	2b00      	cmp	r3, #0
 8019cdc:	d003      	beq.n	8019ce6 <RegionUS915RxParamSetupReq+0x2a>
    {
        status &= 0xFE; // Channel frequency KO
 8019cde:	7bfb      	ldrb	r3, [r7, #15]
 8019ce0:	f023 0301 	bic.w	r3, r3, #1
 8019ce4:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 8019ce6:	687b      	ldr	r3, [r7, #4]
 8019ce8:	f993 3000 	ldrsb.w	r3, [r3]
 8019cec:	220d      	movs	r2, #13
 8019cee:	2108      	movs	r1, #8
 8019cf0:	4618      	mov	r0, r3
 8019cf2:	f7fd f876 	bl	8016de2 <RegionCommonValueInRange>
 8019cf6:	4603      	mov	r3, r0
 8019cf8:	2b00      	cmp	r3, #0
 8019cfa:	d103      	bne.n	8019d04 <RegionUS915RxParamSetupReq+0x48>
    {
        status &= 0xFD; // Datarate KO
 8019cfc:	7bfb      	ldrb	r3, [r7, #15]
 8019cfe:	f023 0302 	bic.w	r3, r3, #2
 8019d02:	73fb      	strb	r3, [r7, #15]
    }
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 8019d04:	687b      	ldr	r3, [r7, #4]
 8019d06:	f993 3000 	ldrsb.w	r3, [r3]
 8019d0a:	2207      	movs	r2, #7
 8019d0c:	2105      	movs	r1, #5
 8019d0e:	4618      	mov	r0, r3
 8019d10:	f7fd f867 	bl	8016de2 <RegionCommonValueInRange>
 8019d14:	4603      	mov	r3, r0
 8019d16:	2b01      	cmp	r3, #1
 8019d18:	d004      	beq.n	8019d24 <RegionUS915RxParamSetupReq+0x68>
        ( rxParamSetupReq->Datarate > DR_13 ) )
 8019d1a:	687b      	ldr	r3, [r7, #4]
 8019d1c:	f993 3000 	ldrsb.w	r3, [r3]
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 8019d20:	2b0d      	cmp	r3, #13
 8019d22:	dd03      	ble.n	8019d2c <RegionUS915RxParamSetupReq+0x70>
    {
        status &= 0xFD; // Datarate KO
 8019d24:	7bfb      	ldrb	r3, [r7, #15]
 8019d26:	f023 0302 	bic.w	r3, r3, #2
 8019d2a:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, US915_MIN_RX1_DR_OFFSET, US915_MAX_RX1_DR_OFFSET ) == false )
 8019d2c:	687b      	ldr	r3, [r7, #4]
 8019d2e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019d32:	2203      	movs	r2, #3
 8019d34:	2100      	movs	r1, #0
 8019d36:	4618      	mov	r0, r3
 8019d38:	f7fd f853 	bl	8016de2 <RegionCommonValueInRange>
 8019d3c:	4603      	mov	r3, r0
 8019d3e:	2b00      	cmp	r3, #0
 8019d40:	d103      	bne.n	8019d4a <RegionUS915RxParamSetupReq+0x8e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8019d42:	7bfb      	ldrb	r3, [r7, #15]
 8019d44:	f023 0304 	bic.w	r3, r3, #4
 8019d48:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_US915 */
    return status;
 8019d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8019d4c:	4618      	mov	r0, r3
 8019d4e:	3710      	adds	r7, #16
 8019d50:	46bd      	mov	sp, r7
 8019d52:	bd80      	pop	{r7, pc}

08019d54 <RegionUS915NewChannelReq>:

int8_t RegionUS915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8019d54:	b480      	push	{r7}
 8019d56:	b083      	sub	sp, #12
 8019d58:	af00      	add	r7, sp, #0
 8019d5a:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8019d5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8019d60:	4618      	mov	r0, r3
 8019d62:	370c      	adds	r7, #12
 8019d64:	46bd      	mov	sp, r7
 8019d66:	bc80      	pop	{r7}
 8019d68:	4770      	bx	lr

08019d6a <RegionUS915TxParamSetupReq>:

int8_t RegionUS915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8019d6a:	b480      	push	{r7}
 8019d6c:	b083      	sub	sp, #12
 8019d6e:	af00      	add	r7, sp, #0
 8019d70:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8019d72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8019d76:	4618      	mov	r0, r3
 8019d78:	370c      	adds	r7, #12
 8019d7a:	46bd      	mov	sp, r7
 8019d7c:	bc80      	pop	{r7}
 8019d7e:	4770      	bx	lr

08019d80 <RegionUS915DlChannelReq>:

int8_t RegionUS915DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8019d80:	b480      	push	{r7}
 8019d82:	b083      	sub	sp, #12
 8019d84:	af00      	add	r7, sp, #0
 8019d86:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8019d88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8019d8c:	4618      	mov	r0, r3
 8019d8e:	370c      	adds	r7, #12
 8019d90:	46bd      	mov	sp, r7
 8019d92:	bc80      	pop	{r7}
 8019d94:	4770      	bx	lr
	...

08019d98 <RegionUS915AlternateDr>:

int8_t RegionUS915AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8019d98:	b480      	push	{r7}
 8019d9a:	b083      	sub	sp, #12
 8019d9c:	af00      	add	r7, sp, #0
 8019d9e:	4603      	mov	r3, r0
 8019da0:	460a      	mov	r2, r1
 8019da2:	71fb      	strb	r3, [r7, #7]
 8019da4:	4613      	mov	r3, r2
 8019da6:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_US915 )
    // Alternates the data rate according to the channel sequence:
    // Eight times a 125kHz DR_0 and then one 500kHz DR_4 channel
    if( type == ALTERNATE_DR )
 8019da8:	79bb      	ldrb	r3, [r7, #6]
 8019daa:	2b00      	cmp	r3, #0
 8019dac:	d106      	bne.n	8019dbc <RegionUS915AlternateDr+0x24>
    {
        RegionNvmGroup1->JoinTrialsCounter++;
 8019dae:	4b13      	ldr	r3, [pc, #76]	@ (8019dfc <RegionUS915AlternateDr+0x64>)
 8019db0:	681b      	ldr	r3, [r3, #0]
 8019db2:	7b5a      	ldrb	r2, [r3, #13]
 8019db4:	3201      	adds	r2, #1
 8019db6:	b2d2      	uxtb	r2, r2
 8019db8:	735a      	strb	r2, [r3, #13]
 8019dba:	e005      	b.n	8019dc8 <RegionUS915AlternateDr+0x30>
    }
    else
    {
        RegionNvmGroup1->JoinTrialsCounter--;
 8019dbc:	4b0f      	ldr	r3, [pc, #60]	@ (8019dfc <RegionUS915AlternateDr+0x64>)
 8019dbe:	681b      	ldr	r3, [r3, #0]
 8019dc0:	7b5a      	ldrb	r2, [r3, #13]
 8019dc2:	3a01      	subs	r2, #1
 8019dc4:	b2d2      	uxtb	r2, r2
 8019dc6:	735a      	strb	r2, [r3, #13]
    }

    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
 8019dc8:	4b0c      	ldr	r3, [pc, #48]	@ (8019dfc <RegionUS915AlternateDr+0x64>)
 8019dca:	681b      	ldr	r3, [r3, #0]
 8019dcc:	7b5a      	ldrb	r2, [r3, #13]
 8019dce:	4b0c      	ldr	r3, [pc, #48]	@ (8019e00 <RegionUS915AlternateDr+0x68>)
 8019dd0:	fba3 1302 	umull	r1, r3, r3, r2
 8019dd4:	0859      	lsrs	r1, r3, #1
 8019dd6:	460b      	mov	r3, r1
 8019dd8:	00db      	lsls	r3, r3, #3
 8019dda:	440b      	add	r3, r1
 8019ddc:	1ad3      	subs	r3, r2, r3
 8019dde:	b2db      	uxtb	r3, r3
 8019de0:	2b00      	cmp	r3, #0
 8019de2:	d102      	bne.n	8019dea <RegionUS915AlternateDr+0x52>
    {
        // Use DR_4 every 9th times.
        currentDr = DR_4;
 8019de4:	2304      	movs	r3, #4
 8019de6:	71fb      	strb	r3, [r7, #7]
 8019de8:	e001      	b.n	8019dee <RegionUS915AlternateDr+0x56>
    }
    else
    {
        currentDr = DR_0;
 8019dea:	2300      	movs	r3, #0
 8019dec:	71fb      	strb	r3, [r7, #7]
    }
    return currentDr;
 8019dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_US915 */
}
 8019df2:	4618      	mov	r0, r3
 8019df4:	370c      	adds	r7, #12
 8019df6:	46bd      	mov	sp, r7
 8019df8:	bc80      	pop	{r7}
 8019dfa:	4770      	bx	lr
 8019dfc:	20001a78 	.word	0x20001a78
 8019e00:	38e38e39 	.word	0x38e38e39

08019e04 <RegionUS915NextChannel>:

LoRaMacStatus_t RegionUS915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8019e04:	b580      	push	{r7, lr}
 8019e06:	b0a8      	sub	sp, #160	@ 0xa0
 8019e08:	af02      	add	r7, sp, #8
 8019e0a:	60f8      	str	r0, [r7, #12]
 8019e0c:	60b9      	str	r1, [r7, #8]
 8019e0e:	607a      	str	r2, [r7, #4]
 8019e10:	603b      	str	r3, [r7, #0]
#if defined( REGION_US915 )
    uint8_t nbEnabledChannels = 0;
 8019e12:	2300      	movs	r3, #0
 8019e14:	f887 3095 	strb.w	r3, [r7, #149]	@ 0x95
    uint8_t nbRestrictedChannels = 0;
 8019e18:	2300      	movs	r3, #0
 8019e1a:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 8019e1e:	2300      	movs	r3, #0
 8019e20:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8019e22:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8019e26:	2244      	movs	r2, #68	@ 0x44
 8019e28:	2100      	movs	r1, #0
 8019e2a:	4618      	mov	r0, r3
 8019e2c:	f004 ff5a 	bl	801ece4 <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8019e30:	230c      	movs	r3, #12
 8019e32:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 8019e36:	4b67      	ldr	r3, [pc, #412]	@ (8019fd4 <RegionUS915NextChannel+0x1d0>)
 8019e38:	681b      	ldr	r3, [r3, #0]
 8019e3a:	2204      	movs	r2, #4
 8019e3c:	2100      	movs	r1, #0
 8019e3e:	4618      	mov	r0, r3
 8019e40:	f7fd f820 	bl	8016e84 <RegionCommonCountChannels>
 8019e44:	4603      	mov	r3, r0
 8019e46:	2b00      	cmp	r3, #0
 8019e48:	d10e      	bne.n	8019e68 <RegionUS915NextChannel+0x64>
    { // Reactivate default channels
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );
 8019e4a:	4b62      	ldr	r3, [pc, #392]	@ (8019fd4 <RegionUS915NextChannel+0x1d0>)
 8019e4c:	681b      	ldr	r3, [r3, #0]
 8019e4e:	4618      	mov	r0, r3
 8019e50:	4b61      	ldr	r3, [pc, #388]	@ (8019fd8 <RegionUS915NextChannel+0x1d4>)
 8019e52:	681b      	ldr	r3, [r3, #0]
 8019e54:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8019e58:	2204      	movs	r2, #4
 8019e5a:	4619      	mov	r1, r3
 8019e5c:	f7fd f83e 	bl	8016edc <RegionCommonChanMaskCopy>

        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 8019e60:	4b5c      	ldr	r3, [pc, #368]	@ (8019fd4 <RegionUS915NextChannel+0x1d0>)
 8019e62:	681b      	ldr	r3, [r3, #0]
 8019e64:	2200      	movs	r2, #0
 8019e66:	731a      	strb	r2, [r3, #12]
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_4 )
 8019e68:	68fb      	ldr	r3, [r7, #12]
 8019e6a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8019e6e:	2b03      	cmp	r3, #3
 8019e70:	dd0c      	ble.n	8019e8c <RegionUS915NextChannel+0x88>
    {
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 8019e72:	4b58      	ldr	r3, [pc, #352]	@ (8019fd4 <RegionUS915NextChannel+0x1d0>)
 8019e74:	681b      	ldr	r3, [r3, #0]
 8019e76:	891b      	ldrh	r3, [r3, #8]
 8019e78:	b2db      	uxtb	r3, r3
 8019e7a:	2b00      	cmp	r3, #0
 8019e7c:	d106      	bne.n	8019e8c <RegionUS915NextChannel+0x88>
        {
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 8019e7e:	4b56      	ldr	r3, [pc, #344]	@ (8019fd8 <RegionUS915NextChannel+0x1d4>)
 8019e80:	681a      	ldr	r2, [r3, #0]
 8019e82:	4b54      	ldr	r3, [pc, #336]	@ (8019fd4 <RegionUS915NextChannel+0x1d0>)
 8019e84:	681b      	ldr	r3, [r3, #0]
 8019e86:	f8b2 2368 	ldrh.w	r2, [r2, #872]	@ 0x368
 8019e8a:	811a      	strh	r2, [r3, #8]
        }
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8019e8c:	68fb      	ldr	r3, [r7, #12]
 8019e8e:	7a5b      	ldrb	r3, [r3, #9]
 8019e90:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8019e92:	68fb      	ldr	r3, [r7, #12]
 8019e94:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8019e98:	b2db      	uxtb	r3, r3
 8019e9a:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
 8019e9c:	4b4d      	ldr	r3, [pc, #308]	@ (8019fd4 <RegionUS915NextChannel+0x1d0>)
 8019e9e:	681b      	ldr	r3, [r3, #0]
 8019ea0:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8019ea2:	4b4d      	ldr	r3, [pc, #308]	@ (8019fd8 <RegionUS915NextChannel+0x1d4>)
 8019ea4:	681b      	ldr	r3, [r3, #0]
 8019ea6:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 8019ea8:	4b4c      	ldr	r3, [pc, #304]	@ (8019fdc <RegionUS915NextChannel+0x1d8>)
 8019eaa:	681b      	ldr	r3, [r3, #0]
 8019eac:	623b      	str	r3, [r7, #32]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = US915_MAX_NB_CHANNELS;
 8019eae:	2348      	movs	r3, #72	@ 0x48
 8019eb0:	84bb      	strh	r3, [r7, #36]	@ 0x24
    countChannelsParams.JoinChannels = NULL;
 8019eb2:	2300      	movs	r3, #0
 8019eb4:	62bb      	str	r3, [r7, #40]	@ 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8019eb6:	68fb      	ldr	r3, [r7, #12]
 8019eb8:	681b      	ldr	r3, [r3, #0]
 8019eba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8019ebc:	68fb      	ldr	r3, [r7, #12]
 8019ebe:	685b      	ldr	r3, [r3, #4]
 8019ec0:	633b      	str	r3, [r7, #48]	@ 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8019ec2:	68fb      	ldr	r3, [r7, #12]
 8019ec4:	7a9b      	ldrb	r3, [r3, #10]
 8019ec6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    identifyChannelsParam.MaxBands = US915_MAX_NB_BANDS;
 8019eca:	2301      	movs	r3, #1
 8019ecc:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8019ed0:	f107 0314 	add.w	r3, r7, #20
 8019ed4:	64bb      	str	r3, [r7, #72]	@ 0x48

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8019ed6:	68fa      	ldr	r2, [r7, #12]
 8019ed8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8019edc:	320c      	adds	r2, #12
 8019ede:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019ee2:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8019ee6:	68fb      	ldr	r3, [r7, #12]
 8019ee8:	7d1b      	ldrb	r3, [r3, #20]
 8019eea:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8019eee:	68fb      	ldr	r3, [r7, #12]
 8019ef0:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8019ef4:	68fb      	ldr	r3, [r7, #12]
 8019ef6:	8adb      	ldrh	r3, [r3, #22]
 8019ef8:	4619      	mov	r1, r3
 8019efa:	4610      	mov	r0, r2
 8019efc:	f7fe ff12 	bl	8018d24 <GetTimeOnAir>
 8019f00:	4603      	mov	r3, r0
 8019f02:	647b      	str	r3, [r7, #68]	@ 0x44
#endif /* REGION_VERSION */

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8019f04:	f107 0195 	add.w	r1, r7, #149	@ 0x95
 8019f08:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8019f0c:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8019f10:	687b      	ldr	r3, [r7, #4]
 8019f12:	9301      	str	r3, [sp, #4]
 8019f14:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8019f18:	9300      	str	r3, [sp, #0]
 8019f1a:	460b      	mov	r3, r1
 8019f1c:	6839      	ldr	r1, [r7, #0]
 8019f1e:	f7fd fbc8 	bl	80176b2 <RegionCommonIdentifyChannels>
 8019f22:	4603      	mov	r3, r0
 8019f24:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8019f28:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8019f2c:	2b00      	cmp	r3, #0
 8019f2e:	d14a      	bne.n	8019fc6 <RegionUS915NextChannel+0x1c2>
    {
        if( nextChanParams->Joined == true )
 8019f30:	68fb      	ldr	r3, [r7, #12]
 8019f32:	7a5b      	ldrb	r3, [r3, #9]
 8019f34:	2b00      	cmp	r3, #0
 8019f36:	d00e      	beq.n	8019f56 <RegionUS915NextChannel+0x152>
        {
            // Choose randomly on of the remaining channels
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8019f38:	f897 3095 	ldrb.w	r3, [r7, #149]	@ 0x95
 8019f3c:	3b01      	subs	r3, #1
 8019f3e:	4619      	mov	r1, r3
 8019f40:	2000      	movs	r0, #0
 8019f42:	f000 f89f 	bl	801a084 <randr>
 8019f46:	4603      	mov	r3, r0
 8019f48:	3398      	adds	r3, #152	@ 0x98
 8019f4a:	443b      	add	r3, r7
 8019f4c:	f813 2c4c 	ldrb.w	r2, [r3, #-76]
 8019f50:	68bb      	ldr	r3, [r7, #8]
 8019f52:	701a      	strb	r2, [r3, #0]
 8019f54:	e02e      	b.n	8019fb4 <RegionUS915NextChannel+0x1b0>
            // follow a random channel selection sequence. It probes alternating one out of a
            // group of eight 125 kHz channels followed by probing one 500 kHz channel each pass.
            // Each time a 125 kHz channel will be selected from another group.

            // 125kHz Channels (0 - 63) DR0
            if( nextChanParams->Datarate == DR_0 )
 8019f56:	68fb      	ldr	r3, [r7, #12]
 8019f58:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8019f5c:	2b00      	cmp	r3, #0
 8019f5e:	d10e      	bne.n	8019f7e <RegionUS915NextChannel+0x17a>
            {
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 8019f60:	4b1c      	ldr	r3, [pc, #112]	@ (8019fd4 <RegionUS915NextChannel+0x1d0>)
 8019f62:	681b      	ldr	r3, [r3, #0]
 8019f64:	4618      	mov	r0, r3
                    &RegionNvmGroup1->JoinChannelGroupsCurrentIndex, channel ) == LORAMAC_STATUS_PARAMETER_INVALID )
 8019f66:	4b1b      	ldr	r3, [pc, #108]	@ (8019fd4 <RegionUS915NextChannel+0x1d0>)
 8019f68:	681b      	ldr	r3, [r3, #0]
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 8019f6a:	330c      	adds	r3, #12
 8019f6c:	68ba      	ldr	r2, [r7, #8]
 8019f6e:	4619      	mov	r1, r3
 8019f70:	f7fc fcf2 	bl	8016958 <RegionBaseUSComputeNext125kHzJoinChannel>
 8019f74:	4603      	mov	r3, r0
 8019f76:	2b03      	cmp	r3, #3
 8019f78:	d11c      	bne.n	8019fb4 <RegionUS915NextChannel+0x1b0>
                {
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 8019f7a:	2303      	movs	r3, #3
 8019f7c:	e025      	b.n	8019fca <RegionUS915NextChannel+0x1c6>
            }
            // 500kHz Channels (64 - 71) DR4
            else
            {
                // Choose the next available channel
                uint8_t i = 0;
 8019f7e:	2300      	movs	r3, #0
 8019f80:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 8019f84:	e004      	b.n	8019f90 <RegionUS915NextChannel+0x18c>
                {
                    i++;
 8019f86:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8019f8a:	3301      	adds	r3, #1
 8019f8c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 8019f90:	4b10      	ldr	r3, [pc, #64]	@ (8019fd4 <RegionUS915NextChannel+0x1d0>)
 8019f92:	681b      	ldr	r3, [r3, #0]
 8019f94:	891b      	ldrh	r3, [r3, #8]
 8019f96:	b2da      	uxtb	r2, r3
 8019f98:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8019f9c:	fa42 f303 	asr.w	r3, r2, r3
 8019fa0:	f003 0301 	and.w	r3, r3, #1
 8019fa4:	2b00      	cmp	r3, #0
 8019fa6:	d0ee      	beq.n	8019f86 <RegionUS915NextChannel+0x182>
                }
                *channel = 64 + i;
 8019fa8:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8019fac:	3340      	adds	r3, #64	@ 0x40
 8019fae:	b2da      	uxtb	r2, r3
 8019fb0:	68bb      	ldr	r3, [r7, #8]
 8019fb2:	701a      	strb	r2, [r3, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( RegionNvmGroup1->ChannelsMaskRemaining, *channel, US915_MAX_NB_CHANNELS );
 8019fb4:	4b07      	ldr	r3, [pc, #28]	@ (8019fd4 <RegionUS915NextChannel+0x1d0>)
 8019fb6:	681b      	ldr	r3, [r3, #0]
 8019fb8:	4618      	mov	r0, r3
 8019fba:	68bb      	ldr	r3, [r7, #8]
 8019fbc:	781b      	ldrb	r3, [r3, #0]
 8019fbe:	2248      	movs	r2, #72	@ 0x48
 8019fc0:	4619      	mov	r1, r3
 8019fc2:	f7fc ff2b 	bl	8016e1c <RegionCommonChanDisable>
    }
    return status;
 8019fc6:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_US915 */
}
 8019fca:	4618      	mov	r0, r3
 8019fcc:	3798      	adds	r7, #152	@ 0x98
 8019fce:	46bd      	mov	sp, r7
 8019fd0:	bd80      	pop	{r7, pc}
 8019fd2:	bf00      	nop
 8019fd4:	20001a78 	.word	0x20001a78
 8019fd8:	20001a7c 	.word	0x20001a7c
 8019fdc:	20001a80 	.word	0x20001a80

08019fe0 <RegionUS915ApplyDrOffset>:
#endif /* REGION_US915 */
}
#endif /* REGION_VERSION */

uint8_t RegionUS915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8019fe0:	b480      	push	{r7}
 8019fe2:	b085      	sub	sp, #20
 8019fe4:	af00      	add	r7, sp, #0
 8019fe6:	4603      	mov	r3, r0
 8019fe8:	71fb      	strb	r3, [r7, #7]
 8019fea:	460b      	mov	r3, r1
 8019fec:	71bb      	strb	r3, [r7, #6]
 8019fee:	4613      	mov	r3, r2
 8019ff0:	717b      	strb	r3, [r7, #5]
#if defined( REGION_US915 )
    int8_t datarate = DatarateOffsetsUS915[dr][drOffset];
 8019ff2:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8019ff6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8019ffa:	4909      	ldr	r1, [pc, #36]	@ (801a020 <RegionUS915ApplyDrOffset+0x40>)
 8019ffc:	0092      	lsls	r2, r2, #2
 8019ffe:	440a      	add	r2, r1
 801a000:	4413      	add	r3, r2
 801a002:	781b      	ldrb	r3, [r3, #0]
 801a004:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 801a006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a00a:	2b00      	cmp	r3, #0
 801a00c:	da01      	bge.n	801a012 <RegionUS915ApplyDrOffset+0x32>
    {
        datarate = DR_0;
 801a00e:	2300      	movs	r3, #0
 801a010:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 801a012:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_US915 */
}
 801a014:	4618      	mov	r0, r3
 801a016:	3714      	adds	r7, #20
 801a018:	46bd      	mov	sp, r7
 801a01a:	bc80      	pop	{r7}
 801a01c:	4770      	bx	lr
 801a01e:	bf00      	nop
 801a020:	0801fc98 	.word	0x0801fc98

0801a024 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 801a024:	b480      	push	{r7}
 801a026:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 801a028:	4b0d      	ldr	r3, [pc, #52]	@ (801a060 <rand1+0x3c>)
 801a02a:	681b      	ldr	r3, [r3, #0]
 801a02c:	4a0d      	ldr	r2, [pc, #52]	@ (801a064 <rand1+0x40>)
 801a02e:	fb02 f303 	mul.w	r3, r2, r3
 801a032:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 801a036:	3339      	adds	r3, #57	@ 0x39
 801a038:	4a09      	ldr	r2, [pc, #36]	@ (801a060 <rand1+0x3c>)
 801a03a:	6013      	str	r3, [r2, #0]
 801a03c:	4b08      	ldr	r3, [pc, #32]	@ (801a060 <rand1+0x3c>)
 801a03e:	681a      	ldr	r2, [r3, #0]
 801a040:	2303      	movs	r3, #3
 801a042:	fba3 1302 	umull	r1, r3, r3, r2
 801a046:	1ad1      	subs	r1, r2, r3
 801a048:	0849      	lsrs	r1, r1, #1
 801a04a:	440b      	add	r3, r1
 801a04c:	0f99      	lsrs	r1, r3, #30
 801a04e:	460b      	mov	r3, r1
 801a050:	07db      	lsls	r3, r3, #31
 801a052:	1a5b      	subs	r3, r3, r1
 801a054:	1ad1      	subs	r1, r2, r3
 801a056:	460b      	mov	r3, r1
}
 801a058:	4618      	mov	r0, r3
 801a05a:	46bd      	mov	sp, r7
 801a05c:	bc80      	pop	{r7}
 801a05e:	4770      	bx	lr
 801a060:	20000134 	.word	0x20000134
 801a064:	41c64e6d 	.word	0x41c64e6d

0801a068 <srand1>:

void srand1( uint32_t seed )
{
 801a068:	b480      	push	{r7}
 801a06a:	b083      	sub	sp, #12
 801a06c:	af00      	add	r7, sp, #0
 801a06e:	6078      	str	r0, [r7, #4]
    next = seed;
 801a070:	4a03      	ldr	r2, [pc, #12]	@ (801a080 <srand1+0x18>)
 801a072:	687b      	ldr	r3, [r7, #4]
 801a074:	6013      	str	r3, [r2, #0]
}
 801a076:	bf00      	nop
 801a078:	370c      	adds	r7, #12
 801a07a:	46bd      	mov	sp, r7
 801a07c:	bc80      	pop	{r7}
 801a07e:	4770      	bx	lr
 801a080:	20000134 	.word	0x20000134

0801a084 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 801a084:	b580      	push	{r7, lr}
 801a086:	b082      	sub	sp, #8
 801a088:	af00      	add	r7, sp, #0
 801a08a:	6078      	str	r0, [r7, #4]
 801a08c:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 801a08e:	f7ff ffc9 	bl	801a024 <rand1>
 801a092:	4602      	mov	r2, r0
 801a094:	6839      	ldr	r1, [r7, #0]
 801a096:	687b      	ldr	r3, [r7, #4]
 801a098:	1acb      	subs	r3, r1, r3
 801a09a:	3301      	adds	r3, #1
 801a09c:	fb92 f1f3 	sdiv	r1, r2, r3
 801a0a0:	fb01 f303 	mul.w	r3, r1, r3
 801a0a4:	1ad2      	subs	r2, r2, r3
 801a0a6:	687b      	ldr	r3, [r7, #4]
 801a0a8:	4413      	add	r3, r2
}
 801a0aa:	4618      	mov	r0, r3
 801a0ac:	3708      	adds	r7, #8
 801a0ae:	46bd      	mov	sp, r7
 801a0b0:	bd80      	pop	{r7, pc}

0801a0b2 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 801a0b2:	b480      	push	{r7}
 801a0b4:	b085      	sub	sp, #20
 801a0b6:	af00      	add	r7, sp, #0
 801a0b8:	60f8      	str	r0, [r7, #12]
 801a0ba:	60b9      	str	r1, [r7, #8]
 801a0bc:	4613      	mov	r3, r2
 801a0be:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 801a0c0:	e007      	b.n	801a0d2 <memcpy1+0x20>
    {
        *dst++ = *src++;
 801a0c2:	68ba      	ldr	r2, [r7, #8]
 801a0c4:	1c53      	adds	r3, r2, #1
 801a0c6:	60bb      	str	r3, [r7, #8]
 801a0c8:	68fb      	ldr	r3, [r7, #12]
 801a0ca:	1c59      	adds	r1, r3, #1
 801a0cc:	60f9      	str	r1, [r7, #12]
 801a0ce:	7812      	ldrb	r2, [r2, #0]
 801a0d0:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801a0d2:	88fb      	ldrh	r3, [r7, #6]
 801a0d4:	1e5a      	subs	r2, r3, #1
 801a0d6:	80fa      	strh	r2, [r7, #6]
 801a0d8:	2b00      	cmp	r3, #0
 801a0da:	d1f2      	bne.n	801a0c2 <memcpy1+0x10>
    }
}
 801a0dc:	bf00      	nop
 801a0de:	bf00      	nop
 801a0e0:	3714      	adds	r7, #20
 801a0e2:	46bd      	mov	sp, r7
 801a0e4:	bc80      	pop	{r7}
 801a0e6:	4770      	bx	lr

0801a0e8 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 801a0e8:	b480      	push	{r7}
 801a0ea:	b085      	sub	sp, #20
 801a0ec:	af00      	add	r7, sp, #0
 801a0ee:	60f8      	str	r0, [r7, #12]
 801a0f0:	60b9      	str	r1, [r7, #8]
 801a0f2:	4613      	mov	r3, r2
 801a0f4:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 801a0f6:	88fb      	ldrh	r3, [r7, #6]
 801a0f8:	3b01      	subs	r3, #1
 801a0fa:	68fa      	ldr	r2, [r7, #12]
 801a0fc:	4413      	add	r3, r2
 801a0fe:	60fb      	str	r3, [r7, #12]
    while( size-- )
 801a100:	e007      	b.n	801a112 <memcpyr+0x2a>
    {
        *dst-- = *src++;
 801a102:	68ba      	ldr	r2, [r7, #8]
 801a104:	1c53      	adds	r3, r2, #1
 801a106:	60bb      	str	r3, [r7, #8]
 801a108:	68fb      	ldr	r3, [r7, #12]
 801a10a:	1e59      	subs	r1, r3, #1
 801a10c:	60f9      	str	r1, [r7, #12]
 801a10e:	7812      	ldrb	r2, [r2, #0]
 801a110:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801a112:	88fb      	ldrh	r3, [r7, #6]
 801a114:	1e5a      	subs	r2, r3, #1
 801a116:	80fa      	strh	r2, [r7, #6]
 801a118:	2b00      	cmp	r3, #0
 801a11a:	d1f2      	bne.n	801a102 <memcpyr+0x1a>
    }
}
 801a11c:	bf00      	nop
 801a11e:	bf00      	nop
 801a120:	3714      	adds	r7, #20
 801a122:	46bd      	mov	sp, r7
 801a124:	bc80      	pop	{r7}
 801a126:	4770      	bx	lr

0801a128 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 801a128:	b480      	push	{r7}
 801a12a:	b083      	sub	sp, #12
 801a12c:	af00      	add	r7, sp, #0
 801a12e:	6078      	str	r0, [r7, #4]
 801a130:	460b      	mov	r3, r1
 801a132:	70fb      	strb	r3, [r7, #3]
 801a134:	4613      	mov	r3, r2
 801a136:	803b      	strh	r3, [r7, #0]
    while( size-- )
 801a138:	e004      	b.n	801a144 <memset1+0x1c>
    {
        *dst++ = value;
 801a13a:	687b      	ldr	r3, [r7, #4]
 801a13c:	1c5a      	adds	r2, r3, #1
 801a13e:	607a      	str	r2, [r7, #4]
 801a140:	78fa      	ldrb	r2, [r7, #3]
 801a142:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801a144:	883b      	ldrh	r3, [r7, #0]
 801a146:	1e5a      	subs	r2, r3, #1
 801a148:	803a      	strh	r2, [r7, #0]
 801a14a:	2b00      	cmp	r3, #0
 801a14c:	d1f5      	bne.n	801a13a <memset1+0x12>
    }
}
 801a14e:	bf00      	nop
 801a150:	bf00      	nop
 801a152:	370c      	adds	r7, #12
 801a154:	46bd      	mov	sp, r7
 801a156:	bc80      	pop	{r7}
 801a158:	4770      	bx	lr
	...

0801a15c <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 801a15c:	b480      	push	{r7}
 801a15e:	b085      	sub	sp, #20
 801a160:	af00      	add	r7, sp, #0
 801a162:	6078      	str	r0, [r7, #4]
 801a164:	460b      	mov	r3, r1
 801a166:	807b      	strh	r3, [r7, #2]
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 801a168:	f04f 33ff 	mov.w	r3, #4294967295
 801a16c:	60fb      	str	r3, [r7, #12]

    if( buffer == NULL )
 801a16e:	687b      	ldr	r3, [r7, #4]
 801a170:	2b00      	cmp	r3, #0
 801a172:	d101      	bne.n	801a178 <Crc32+0x1c>
    {
        return 0;
 801a174:	2300      	movs	r3, #0
 801a176:	e026      	b.n	801a1c6 <Crc32+0x6a>
    }

    for( uint16_t i = 0; i < length; ++i )
 801a178:	2300      	movs	r3, #0
 801a17a:	817b      	strh	r3, [r7, #10]
 801a17c:	e01d      	b.n	801a1ba <Crc32+0x5e>
    {
        crc ^= ( uint32_t )buffer[i];
 801a17e:	897b      	ldrh	r3, [r7, #10]
 801a180:	687a      	ldr	r2, [r7, #4]
 801a182:	4413      	add	r3, r2
 801a184:	781b      	ldrb	r3, [r3, #0]
 801a186:	461a      	mov	r2, r3
 801a188:	68fb      	ldr	r3, [r7, #12]
 801a18a:	4053      	eors	r3, r2
 801a18c:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 801a18e:	2300      	movs	r3, #0
 801a190:	813b      	strh	r3, [r7, #8]
 801a192:	e00c      	b.n	801a1ae <Crc32+0x52>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 801a194:	68fb      	ldr	r3, [r7, #12]
 801a196:	085a      	lsrs	r2, r3, #1
 801a198:	68fb      	ldr	r3, [r7, #12]
 801a19a:	f003 0301 	and.w	r3, r3, #1
 801a19e:	425b      	negs	r3, r3
 801a1a0:	490b      	ldr	r1, [pc, #44]	@ (801a1d0 <Crc32+0x74>)
 801a1a2:	400b      	ands	r3, r1
 801a1a4:	4053      	eors	r3, r2
 801a1a6:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 801a1a8:	893b      	ldrh	r3, [r7, #8]
 801a1aa:	3301      	adds	r3, #1
 801a1ac:	813b      	strh	r3, [r7, #8]
 801a1ae:	893b      	ldrh	r3, [r7, #8]
 801a1b0:	2b07      	cmp	r3, #7
 801a1b2:	d9ef      	bls.n	801a194 <Crc32+0x38>
    for( uint16_t i = 0; i < length; ++i )
 801a1b4:	897b      	ldrh	r3, [r7, #10]
 801a1b6:	3301      	adds	r3, #1
 801a1b8:	817b      	strh	r3, [r7, #10]
 801a1ba:	897a      	ldrh	r2, [r7, #10]
 801a1bc:	887b      	ldrh	r3, [r7, #2]
 801a1be:	429a      	cmp	r2, r3
 801a1c0:	d3dd      	bcc.n	801a17e <Crc32+0x22>
        }
    }

    return ~crc;
 801a1c2:	68fb      	ldr	r3, [r7, #12]
 801a1c4:	43db      	mvns	r3, r3
}
 801a1c6:	4618      	mov	r0, r3
 801a1c8:	3714      	adds	r7, #20
 801a1ca:	46bd      	mov	sp, r7
 801a1cc:	bc80      	pop	{r7}
 801a1ce:	4770      	bx	lr
 801a1d0:	edb88320 	.word	0xedb88320

0801a1d4 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 801a1d4:	b580      	push	{r7, lr}
 801a1d6:	b084      	sub	sp, #16
 801a1d8:	af02      	add	r7, sp, #8
 801a1da:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 801a1dc:	4a24      	ldr	r2, [pc, #144]	@ (801a270 <RadioInit+0x9c>)
 801a1de:	687b      	ldr	r3, [r7, #4]
 801a1e0:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 801a1e2:	4b24      	ldr	r3, [pc, #144]	@ (801a274 <RadioInit+0xa0>)
 801a1e4:	2200      	movs	r2, #0
 801a1e6:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 801a1e8:	4b22      	ldr	r3, [pc, #136]	@ (801a274 <RadioInit+0xa0>)
 801a1ea:	2200      	movs	r2, #0
 801a1ec:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 801a1ee:	4b21      	ldr	r3, [pc, #132]	@ (801a274 <RadioInit+0xa0>)
 801a1f0:	2200      	movs	r2, #0
 801a1f2:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801a1f4:	4b1f      	ldr	r3, [pc, #124]	@ (801a274 <RadioInit+0xa0>)
 801a1f6:	2200      	movs	r2, #0
 801a1f8:	659a      	str	r2, [r3, #88]	@ 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 801a1fa:	481f      	ldr	r0, [pc, #124]	@ (801a278 <RadioInit+0xa4>)
 801a1fc:	f001 ffc0 	bl	801c180 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 801a200:	4b1c      	ldr	r3, [pc, #112]	@ (801a274 <RadioInit+0xa0>)
 801a202:	2200      	movs	r2, #0
 801a204:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 801a206:	4b1b      	ldr	r3, [pc, #108]	@ (801a274 <RadioInit+0xa0>)
 801a208:	2200      	movs	r2, #0
 801a20a:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 801a20c:	f002 fa54 	bl	801c6b8 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 801a210:	2100      	movs	r1, #0
 801a212:	2000      	movs	r0, #0
 801a214:	f002 fe20 	bl	801ce58 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 801a218:	2204      	movs	r2, #4
 801a21a:	2100      	movs	r1, #0
 801a21c:	2001      	movs	r0, #1
 801a21e:	f002 fbdd 	bl	801c9dc <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801a222:	2300      	movs	r3, #0
 801a224:	2200      	movs	r2, #0
 801a226:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801a22a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 801a22e:	f002 fb0d 	bl	801c84c <SUBGRF_SetDioIrqParams>

    RadioSleep();
 801a232:	f000 fe99 	bl	801af68 <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 801a236:	2300      	movs	r3, #0
 801a238:	9300      	str	r3, [sp, #0]
 801a23a:	4b10      	ldr	r3, [pc, #64]	@ (801a27c <RadioInit+0xa8>)
 801a23c:	2200      	movs	r2, #0
 801a23e:	f04f 31ff 	mov.w	r1, #4294967295
 801a242:	480f      	ldr	r0, [pc, #60]	@ (801a280 <RadioInit+0xac>)
 801a244:	f004 f828 	bl	801e298 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 801a248:	2300      	movs	r3, #0
 801a24a:	9300      	str	r3, [sp, #0]
 801a24c:	4b0d      	ldr	r3, [pc, #52]	@ (801a284 <RadioInit+0xb0>)
 801a24e:	2200      	movs	r2, #0
 801a250:	f04f 31ff 	mov.w	r1, #4294967295
 801a254:	480c      	ldr	r0, [pc, #48]	@ (801a288 <RadioInit+0xb4>)
 801a256:	f004 f81f 	bl	801e298 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 801a25a:	4809      	ldr	r0, [pc, #36]	@ (801a280 <RadioInit+0xac>)
 801a25c:	f004 f8c0 	bl	801e3e0 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 801a260:	4809      	ldr	r0, [pc, #36]	@ (801a288 <RadioInit+0xb4>)
 801a262:	f004 f8bd 	bl	801e3e0 <UTIL_TIMER_Stop>
}
 801a266:	bf00      	nop
 801a268:	3708      	adds	r7, #8
 801a26a:	46bd      	mov	sp, r7
 801a26c:	bd80      	pop	{r7, pc}
 801a26e:	bf00      	nop
 801a270:	20001b84 	.word	0x20001b84
 801a274:	20001b88 	.word	0x20001b88
 801a278:	0801b35d 	.word	0x0801b35d
 801a27c:	0801b2e5 	.word	0x0801b2e5
 801a280:	20001be4 	.word	0x20001be4
 801a284:	0801b2f9 	.word	0x0801b2f9
 801a288:	20001bfc 	.word	0x20001bfc

0801a28c <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 801a28c:	b580      	push	{r7, lr}
 801a28e:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 801a290:	f001 ffbe 	bl	801c210 <SUBGRF_GetOperatingMode>
 801a294:	4603      	mov	r3, r0
 801a296:	2b07      	cmp	r3, #7
 801a298:	d00a      	beq.n	801a2b0 <RadioGetStatus+0x24>
 801a29a:	2b07      	cmp	r3, #7
 801a29c:	dc0a      	bgt.n	801a2b4 <RadioGetStatus+0x28>
 801a29e:	2b04      	cmp	r3, #4
 801a2a0:	d002      	beq.n	801a2a8 <RadioGetStatus+0x1c>
 801a2a2:	2b05      	cmp	r3, #5
 801a2a4:	d002      	beq.n	801a2ac <RadioGetStatus+0x20>
 801a2a6:	e005      	b.n	801a2b4 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 801a2a8:	2302      	movs	r3, #2
 801a2aa:	e004      	b.n	801a2b6 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 801a2ac:	2301      	movs	r3, #1
 801a2ae:	e002      	b.n	801a2b6 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 801a2b0:	2303      	movs	r3, #3
 801a2b2:	e000      	b.n	801a2b6 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 801a2b4:	2300      	movs	r3, #0
    }
}
 801a2b6:	4618      	mov	r0, r3
 801a2b8:	bd80      	pop	{r7, pc}
	...

0801a2bc <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 801a2bc:	b580      	push	{r7, lr}
 801a2be:	b082      	sub	sp, #8
 801a2c0:	af00      	add	r7, sp, #0
 801a2c2:	4603      	mov	r3, r0
 801a2c4:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 801a2c6:	4a2a      	ldr	r2, [pc, #168]	@ (801a370 <RadioSetModem+0xb4>)
 801a2c8:	79fb      	ldrb	r3, [r7, #7]
 801a2ca:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 801a2cc:	79fb      	ldrb	r3, [r7, #7]
 801a2ce:	4618      	mov	r0, r3
 801a2d0:	f003 f995 	bl	801d5fe <RFW_SetRadioModem>
    switch( modem )
 801a2d4:	79fb      	ldrb	r3, [r7, #7]
 801a2d6:	2b05      	cmp	r3, #5
 801a2d8:	d80e      	bhi.n	801a2f8 <RadioSetModem+0x3c>
 801a2da:	a201      	add	r2, pc, #4	@ (adr r2, 801a2e0 <RadioSetModem+0x24>)
 801a2dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a2e0:	0801a307 	.word	0x0801a307
 801a2e4:	0801a315 	.word	0x0801a315
 801a2e8:	0801a2f9 	.word	0x0801a2f9
 801a2ec:	0801a33b 	.word	0x0801a33b
 801a2f0:	0801a349 	.word	0x0801a349
 801a2f4:	0801a357 	.word	0x0801a357
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 801a2f8:	2003      	movs	r0, #3
 801a2fa:	f002 fb49 	bl	801c990 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801a2fe:	4b1c      	ldr	r3, [pc, #112]	@ (801a370 <RadioSetModem+0xb4>)
 801a300:	2200      	movs	r2, #0
 801a302:	735a      	strb	r2, [r3, #13]
        break;
 801a304:	e02f      	b.n	801a366 <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 801a306:	2000      	movs	r0, #0
 801a308:	f002 fb42 	bl	801c990 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801a30c:	4b18      	ldr	r3, [pc, #96]	@ (801a370 <RadioSetModem+0xb4>)
 801a30e:	2200      	movs	r2, #0
 801a310:	735a      	strb	r2, [r3, #13]
        break;
 801a312:	e028      	b.n	801a366 <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 801a314:	2001      	movs	r0, #1
 801a316:	f002 fb3b 	bl	801c990 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 801a31a:	4b15      	ldr	r3, [pc, #84]	@ (801a370 <RadioSetModem+0xb4>)
 801a31c:	7b5a      	ldrb	r2, [r3, #13]
 801a31e:	4b14      	ldr	r3, [pc, #80]	@ (801a370 <RadioSetModem+0xb4>)
 801a320:	7b1b      	ldrb	r3, [r3, #12]
 801a322:	429a      	cmp	r2, r3
 801a324:	d01e      	beq.n	801a364 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 801a326:	4b12      	ldr	r3, [pc, #72]	@ (801a370 <RadioSetModem+0xb4>)
 801a328:	7b1a      	ldrb	r2, [r3, #12]
 801a32a:	4b11      	ldr	r3, [pc, #68]	@ (801a370 <RadioSetModem+0xb4>)
 801a32c:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 801a32e:	4b10      	ldr	r3, [pc, #64]	@ (801a370 <RadioSetModem+0xb4>)
 801a330:	7b5b      	ldrb	r3, [r3, #13]
 801a332:	4618      	mov	r0, r3
 801a334:	f000 ffa0 	bl	801b278 <RadioSetPublicNetwork>
        }
        break;
 801a338:	e014      	b.n	801a364 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 801a33a:	2002      	movs	r0, #2
 801a33c:	f002 fb28 	bl	801c990 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801a340:	4b0b      	ldr	r3, [pc, #44]	@ (801a370 <RadioSetModem+0xb4>)
 801a342:	2200      	movs	r2, #0
 801a344:	735a      	strb	r2, [r3, #13]
        break;
 801a346:	e00e      	b.n	801a366 <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 801a348:	2002      	movs	r0, #2
 801a34a:	f002 fb21 	bl	801c990 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801a34e:	4b08      	ldr	r3, [pc, #32]	@ (801a370 <RadioSetModem+0xb4>)
 801a350:	2200      	movs	r2, #0
 801a352:	735a      	strb	r2, [r3, #13]
        break;
 801a354:	e007      	b.n	801a366 <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 801a356:	2000      	movs	r0, #0
 801a358:	f002 fb1a 	bl	801c990 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801a35c:	4b04      	ldr	r3, [pc, #16]	@ (801a370 <RadioSetModem+0xb4>)
 801a35e:	2200      	movs	r2, #0
 801a360:	735a      	strb	r2, [r3, #13]
        break;
 801a362:	e000      	b.n	801a366 <RadioSetModem+0xaa>
        break;
 801a364:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 801a366:	bf00      	nop
 801a368:	3708      	adds	r7, #8
 801a36a:	46bd      	mov	sp, r7
 801a36c:	bd80      	pop	{r7, pc}
 801a36e:	bf00      	nop
 801a370:	20001b88 	.word	0x20001b88

0801a374 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 801a374:	b580      	push	{r7, lr}
 801a376:	b082      	sub	sp, #8
 801a378:	af00      	add	r7, sp, #0
 801a37a:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 801a37c:	6878      	ldr	r0, [r7, #4]
 801a37e:	f002 fac1 	bl	801c904 <SUBGRF_SetRfFrequency>
}
 801a382:	bf00      	nop
 801a384:	3708      	adds	r7, #8
 801a386:	46bd      	mov	sp, r7
 801a388:	bd80      	pop	{r7, pc}

0801a38a <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 801a38a:	b580      	push	{r7, lr}
 801a38c:	b090      	sub	sp, #64	@ 0x40
 801a38e:	af0a      	add	r7, sp, #40	@ 0x28
 801a390:	60f8      	str	r0, [r7, #12]
 801a392:	60b9      	str	r1, [r7, #8]
 801a394:	603b      	str	r3, [r7, #0]
 801a396:	4613      	mov	r3, r2
 801a398:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 801a39a:	2301      	movs	r3, #1
 801a39c:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 801a39e:	2300      	movs	r3, #0
 801a3a0:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 801a3a2:	2300      	movs	r3, #0
 801a3a4:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 801a3a6:	f000 fdf2 	bl	801af8e <RadioStandby>

    RadioSetModem( MODEM_FSK );
 801a3aa:	2000      	movs	r0, #0
 801a3ac:	f7ff ff86 	bl	801a2bc <RadioSetModem>

    RadioSetChannel( freq );
 801a3b0:	68f8      	ldr	r0, [r7, #12]
 801a3b2:	f7ff ffdf 	bl	801a374 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 801a3b6:	2301      	movs	r3, #1
 801a3b8:	9309      	str	r3, [sp, #36]	@ 0x24
 801a3ba:	2300      	movs	r3, #0
 801a3bc:	9308      	str	r3, [sp, #32]
 801a3be:	2300      	movs	r3, #0
 801a3c0:	9307      	str	r3, [sp, #28]
 801a3c2:	2300      	movs	r3, #0
 801a3c4:	9306      	str	r3, [sp, #24]
 801a3c6:	2300      	movs	r3, #0
 801a3c8:	9305      	str	r3, [sp, #20]
 801a3ca:	2300      	movs	r3, #0
 801a3cc:	9304      	str	r3, [sp, #16]
 801a3ce:	2300      	movs	r3, #0
 801a3d0:	9303      	str	r3, [sp, #12]
 801a3d2:	2300      	movs	r3, #0
 801a3d4:	9302      	str	r3, [sp, #8]
 801a3d6:	2303      	movs	r3, #3
 801a3d8:	9301      	str	r3, [sp, #4]
 801a3da:	68bb      	ldr	r3, [r7, #8]
 801a3dc:	9300      	str	r3, [sp, #0]
 801a3de:	2300      	movs	r3, #0
 801a3e0:	f44f 7216 	mov.w	r2, #600	@ 0x258
 801a3e4:	68b9      	ldr	r1, [r7, #8]
 801a3e6:	2000      	movs	r0, #0
 801a3e8:	f000 f83c 	bl	801a464 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 801a3ec:	2000      	movs	r0, #0
 801a3ee:	f000 fdd5 	bl	801af9c <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 801a3f2:	f000 ff6f 	bl	801b2d4 <RadioGetWakeupTime>
 801a3f6:	4603      	mov	r3, r0
 801a3f8:	4618      	mov	r0, r3
 801a3fa:	f7e8 fa87 	bl	800290c <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 801a3fe:	f004 f909 	bl	801e614 <UTIL_TIMER_GetCurrentTime>
 801a402:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 801a404:	e00d      	b.n	801a422 <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 801a406:	2000      	movs	r0, #0
 801a408:	f000 feb6 	bl	801b178 <RadioRssi>
 801a40c:	4603      	mov	r3, r0
 801a40e:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 801a410:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801a414:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801a418:	429a      	cmp	r2, r3
 801a41a:	dd02      	ble.n	801a422 <RadioIsChannelFree+0x98>
        {
            status = false;
 801a41c:	2300      	movs	r3, #0
 801a41e:	75fb      	strb	r3, [r7, #23]
            break;
 801a420:	e006      	b.n	801a430 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 801a422:	6938      	ldr	r0, [r7, #16]
 801a424:	f004 f908 	bl	801e638 <UTIL_TIMER_GetElapsedTime>
 801a428:	4602      	mov	r2, r0
 801a42a:	683b      	ldr	r3, [r7, #0]
 801a42c:	4293      	cmp	r3, r2
 801a42e:	d8ea      	bhi.n	801a406 <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 801a430:	f000 fdad 	bl	801af8e <RadioStandby>

    return status;
 801a434:	7dfb      	ldrb	r3, [r7, #23]
}
 801a436:	4618      	mov	r0, r3
 801a438:	3718      	adds	r7, #24
 801a43a:	46bd      	mov	sp, r7
 801a43c:	bd80      	pop	{r7, pc}

0801a43e <RadioRandom>:

static uint32_t RadioRandom( void )
{
 801a43e:	b580      	push	{r7, lr}
 801a440:	b082      	sub	sp, #8
 801a442:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 801a444:	2300      	movs	r3, #0
 801a446:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801a448:	2300      	movs	r3, #0
 801a44a:	2200      	movs	r2, #0
 801a44c:	2100      	movs	r1, #0
 801a44e:	2000      	movs	r0, #0
 801a450:	f002 f9fc 	bl	801c84c <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 801a454:	f001 ffad 	bl	801c3b2 <SUBGRF_GetRandom>
 801a458:	6078      	str	r0, [r7, #4]

    return rnd;
 801a45a:	687b      	ldr	r3, [r7, #4]
}
 801a45c:	4618      	mov	r0, r3
 801a45e:	3708      	adds	r7, #8
 801a460:	46bd      	mov	sp, r7
 801a462:	bd80      	pop	{r7, pc}

0801a464 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 801a464:	b580      	push	{r7, lr}
 801a466:	b08a      	sub	sp, #40	@ 0x28
 801a468:	af00      	add	r7, sp, #0
 801a46a:	60b9      	str	r1, [r7, #8]
 801a46c:	607a      	str	r2, [r7, #4]
 801a46e:	461a      	mov	r2, r3
 801a470:	4603      	mov	r3, r0
 801a472:	73fb      	strb	r3, [r7, #15]
 801a474:	4613      	mov	r3, r2
 801a476:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 801a478:	4ab9      	ldr	r2, [pc, #740]	@ (801a760 <RadioSetRxConfig+0x2fc>)
 801a47a:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 801a47e:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 801a480:	f003 f87b 	bl	801d57a <RFW_DeInit>
    if( rxContinuous == true )
 801a484:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 801a488:	2b00      	cmp	r3, #0
 801a48a:	d001      	beq.n	801a490 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 801a48c:	2300      	movs	r3, #0
 801a48e:	873b      	strh	r3, [r7, #56]	@ 0x38
    }
    if( fixLen == true )
 801a490:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 801a494:	2b00      	cmp	r3, #0
 801a496:	d004      	beq.n	801a4a2 <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 801a498:	4ab2      	ldr	r2, [pc, #712]	@ (801a764 <RadioSetRxConfig+0x300>)
 801a49a:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 801a49e:	7013      	strb	r3, [r2, #0]
 801a4a0:	e002      	b.n	801a4a8 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 801a4a2:	4bb0      	ldr	r3, [pc, #704]	@ (801a764 <RadioSetRxConfig+0x300>)
 801a4a4:	22ff      	movs	r2, #255	@ 0xff
 801a4a6:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 801a4a8:	7bfb      	ldrb	r3, [r7, #15]
 801a4aa:	2b05      	cmp	r3, #5
 801a4ac:	d009      	beq.n	801a4c2 <RadioSetRxConfig+0x5e>
 801a4ae:	2b05      	cmp	r3, #5
 801a4b0:	f300 81d7 	bgt.w	801a862 <RadioSetRxConfig+0x3fe>
 801a4b4:	2b00      	cmp	r3, #0
 801a4b6:	f000 80bf 	beq.w	801a638 <RadioSetRxConfig+0x1d4>
 801a4ba:	2b01      	cmp	r3, #1
 801a4bc:	f000 8124 	beq.w	801a708 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 801a4c0:	e1cf      	b.n	801a862 <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 801a4c2:	2001      	movs	r0, #1
 801a4c4:	f002 f8ba 	bl	801c63c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801a4c8:	4ba5      	ldr	r3, [pc, #660]	@ (801a760 <RadioSetRxConfig+0x2fc>)
 801a4ca:	2200      	movs	r2, #0
 801a4cc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801a4d0:	4aa3      	ldr	r2, [pc, #652]	@ (801a760 <RadioSetRxConfig+0x2fc>)
 801a4d2:	687b      	ldr	r3, [r7, #4]
 801a4d4:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 801a4d6:	4ba2      	ldr	r3, [pc, #648]	@ (801a760 <RadioSetRxConfig+0x2fc>)
 801a4d8:	2209      	movs	r2, #9
 801a4da:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 801a4de:	4ba0      	ldr	r3, [pc, #640]	@ (801a760 <RadioSetRxConfig+0x2fc>)
 801a4e0:	f44f 7248 	mov.w	r2, #800	@ 0x320
 801a4e4:	641a      	str	r2, [r3, #64]	@ 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801a4e6:	68b8      	ldr	r0, [r7, #8]
 801a4e8:	f002 ff7a 	bl	801d3e0 <SUBGRF_GetFskBandwidthRegValue>
 801a4ec:	4603      	mov	r3, r0
 801a4ee:	461a      	mov	r2, r3
 801a4f0:	4b9b      	ldr	r3, [pc, #620]	@ (801a760 <RadioSetRxConfig+0x2fc>)
 801a4f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801a4f6:	4b9a      	ldr	r3, [pc, #616]	@ (801a760 <RadioSetRxConfig+0x2fc>)
 801a4f8:	2200      	movs	r2, #0
 801a4fa:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801a4fc:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801a4fe:	00db      	lsls	r3, r3, #3
 801a500:	b29a      	uxth	r2, r3
 801a502:	4b97      	ldr	r3, [pc, #604]	@ (801a760 <RadioSetRxConfig+0x2fc>)
 801a504:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 801a506:	4b96      	ldr	r3, [pc, #600]	@ (801a760 <RadioSetRxConfig+0x2fc>)
 801a508:	2200      	movs	r2, #0
 801a50a:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 801a50c:	4b94      	ldr	r3, [pc, #592]	@ (801a760 <RadioSetRxConfig+0x2fc>)
 801a50e:	2210      	movs	r2, #16
 801a510:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801a512:	4b93      	ldr	r3, [pc, #588]	@ (801a760 <RadioSetRxConfig+0x2fc>)
 801a514:	2200      	movs	r2, #0
 801a516:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 801a518:	4b91      	ldr	r3, [pc, #580]	@ (801a760 <RadioSetRxConfig+0x2fc>)
 801a51a:	2200      	movs	r2, #0
 801a51c:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 801a51e:	4b91      	ldr	r3, [pc, #580]	@ (801a764 <RadioSetRxConfig+0x300>)
 801a520:	781a      	ldrb	r2, [r3, #0]
 801a522:	4b8f      	ldr	r3, [pc, #572]	@ (801a760 <RadioSetRxConfig+0x2fc>)
 801a524:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801a526:	4b8e      	ldr	r3, [pc, #568]	@ (801a760 <RadioSetRxConfig+0x2fc>)
 801a528:	2201      	movs	r2, #1
 801a52a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 801a52c:	4b8c      	ldr	r3, [pc, #560]	@ (801a760 <RadioSetRxConfig+0x2fc>)
 801a52e:	2200      	movs	r2, #0
 801a530:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 801a532:	2005      	movs	r0, #5
 801a534:	f7ff fec2 	bl	801a2bc <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a538:	488b      	ldr	r0, [pc, #556]	@ (801a768 <RadioSetRxConfig+0x304>)
 801a53a:	f002 fb1d 	bl	801cb78 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a53e:	488b      	ldr	r0, [pc, #556]	@ (801a76c <RadioSetRxConfig+0x308>)
 801a540:	f002 fbec 	bl	801cd1c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801a544:	4a8a      	ldr	r2, [pc, #552]	@ (801a770 <RadioSetRxConfig+0x30c>)
 801a546:	f107 031c 	add.w	r3, r7, #28
 801a54a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a54e:	e883 0003 	stmia.w	r3, {r0, r1}
 801a552:	f107 031c 	add.w	r3, r7, #28
 801a556:	4618      	mov	r0, r3
 801a558:	f001 fea9 	bl	801c2ae <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801a55c:	f240 10ff 	movw	r0, #511	@ 0x1ff
 801a560:	f001 fef4 	bl	801c34c <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 801a564:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 801a568:	f000 fe24 	bl	801b1b4 <RadioRead>
 801a56c:	4603      	mov	r3, r0
 801a56e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=RADIO_BIT_MASK(4);
 801a572:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a576:	f023 0310 	bic.w	r3, r3, #16
 801a57a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 801a57e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a582:	4619      	mov	r1, r3
 801a584:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 801a588:	f000 fe02 	bl	801b190 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 801a58c:	2104      	movs	r1, #4
 801a58e:	f640 00b9 	movw	r0, #2233	@ 0x8b9
 801a592:	f000 fdfd 	bl	801b190 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 801a596:	f640 009b 	movw	r0, #2203	@ 0x89b
 801a59a:	f000 fe0b 	bl	801b1b4 <RadioRead>
 801a59e:	4603      	mov	r3, r0
 801a5a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 801a5a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a5a8:	f023 031c 	bic.w	r3, r3, #28
 801a5ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 801a5b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a5b4:	f043 0308 	orr.w	r3, r3, #8
 801a5b8:	b2db      	uxtb	r3, r3
 801a5ba:	4619      	mov	r1, r3
 801a5bc:	f640 009b 	movw	r0, #2203	@ 0x89b
 801a5c0:	f000 fde6 	bl	801b190 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 801a5c4:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 801a5c8:	f000 fdf4 	bl	801b1b4 <RadioRead>
 801a5cc:	4603      	mov	r3, r0
 801a5ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 801a5d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a5d6:	f023 0318 	bic.w	r3, r3, #24
 801a5da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 801a5de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a5e2:	f043 0318 	orr.w	r3, r3, #24
 801a5e6:	b2db      	uxtb	r3, r3
 801a5e8:	4619      	mov	r1, r3
 801a5ea:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 801a5ee:	f000 fdcf 	bl	801b190 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 801a5f2:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 801a5f6:	f000 fddd 	bl	801b1b4 <RadioRead>
 801a5fa:	4603      	mov	r3, r0
 801a5fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 801a600:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a604:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801a608:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 801a60c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a610:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 801a614:	b2db      	uxtb	r3, r3
 801a616:	4619      	mov	r1, r3
 801a618:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 801a61c:	f000 fdb8 	bl	801b190 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 801a620:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 801a622:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 801a626:	fb02 f303 	mul.w	r3, r2, r3
 801a62a:	461a      	mov	r2, r3
 801a62c:	687b      	ldr	r3, [r7, #4]
 801a62e:	fbb2 f3f3 	udiv	r3, r2, r3
 801a632:	4a4b      	ldr	r2, [pc, #300]	@ (801a760 <RadioSetRxConfig+0x2fc>)
 801a634:	6093      	str	r3, [r2, #8]
            break;
 801a636:	e115      	b.n	801a864 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 801a638:	2000      	movs	r0, #0
 801a63a:	f001 ffff 	bl	801c63c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801a63e:	4b48      	ldr	r3, [pc, #288]	@ (801a760 <RadioSetRxConfig+0x2fc>)
 801a640:	2200      	movs	r2, #0
 801a642:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801a646:	4a46      	ldr	r2, [pc, #280]	@ (801a760 <RadioSetRxConfig+0x2fc>)
 801a648:	687b      	ldr	r3, [r7, #4]
 801a64a:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 801a64c:	4b44      	ldr	r3, [pc, #272]	@ (801a760 <RadioSetRxConfig+0x2fc>)
 801a64e:	220b      	movs	r2, #11
 801a650:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801a654:	68b8      	ldr	r0, [r7, #8]
 801a656:	f002 fec3 	bl	801d3e0 <SUBGRF_GetFskBandwidthRegValue>
 801a65a:	4603      	mov	r3, r0
 801a65c:	461a      	mov	r2, r3
 801a65e:	4b40      	ldr	r3, [pc, #256]	@ (801a760 <RadioSetRxConfig+0x2fc>)
 801a660:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801a664:	4b3e      	ldr	r3, [pc, #248]	@ (801a760 <RadioSetRxConfig+0x2fc>)
 801a666:	2200      	movs	r2, #0
 801a668:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801a66a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801a66c:	00db      	lsls	r3, r3, #3
 801a66e:	b29a      	uxth	r2, r3
 801a670:	4b3b      	ldr	r3, [pc, #236]	@ (801a760 <RadioSetRxConfig+0x2fc>)
 801a672:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801a674:	4b3a      	ldr	r3, [pc, #232]	@ (801a760 <RadioSetRxConfig+0x2fc>)
 801a676:	2204      	movs	r2, #4
 801a678:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 801a67a:	4b39      	ldr	r3, [pc, #228]	@ (801a760 <RadioSetRxConfig+0x2fc>)
 801a67c:	2218      	movs	r2, #24
 801a67e:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801a680:	4b37      	ldr	r3, [pc, #220]	@ (801a760 <RadioSetRxConfig+0x2fc>)
 801a682:	2200      	movs	r2, #0
 801a684:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 801a686:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 801a68a:	f083 0301 	eor.w	r3, r3, #1
 801a68e:	b2db      	uxtb	r3, r3
 801a690:	461a      	mov	r2, r3
 801a692:	4b33      	ldr	r3, [pc, #204]	@ (801a760 <RadioSetRxConfig+0x2fc>)
 801a694:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 801a696:	4b33      	ldr	r3, [pc, #204]	@ (801a764 <RadioSetRxConfig+0x300>)
 801a698:	781a      	ldrb	r2, [r3, #0]
 801a69a:	4b31      	ldr	r3, [pc, #196]	@ (801a760 <RadioSetRxConfig+0x2fc>)
 801a69c:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 801a69e:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 801a6a2:	2b00      	cmp	r3, #0
 801a6a4:	d003      	beq.n	801a6ae <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 801a6a6:	4b2e      	ldr	r3, [pc, #184]	@ (801a760 <RadioSetRxConfig+0x2fc>)
 801a6a8:	22f2      	movs	r2, #242	@ 0xf2
 801a6aa:	75da      	strb	r2, [r3, #23]
 801a6ac:	e002      	b.n	801a6b4 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801a6ae:	4b2c      	ldr	r3, [pc, #176]	@ (801a760 <RadioSetRxConfig+0x2fc>)
 801a6b0:	2201      	movs	r2, #1
 801a6b2:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 801a6b4:	4b2a      	ldr	r3, [pc, #168]	@ (801a760 <RadioSetRxConfig+0x2fc>)
 801a6b6:	2201      	movs	r2, #1
 801a6b8:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 801a6ba:	f000 fc68 	bl	801af8e <RadioStandby>
            RadioSetModem( MODEM_FSK );
 801a6be:	2000      	movs	r0, #0
 801a6c0:	f7ff fdfc 	bl	801a2bc <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a6c4:	4828      	ldr	r0, [pc, #160]	@ (801a768 <RadioSetRxConfig+0x304>)
 801a6c6:	f002 fa57 	bl	801cb78 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a6ca:	4828      	ldr	r0, [pc, #160]	@ (801a76c <RadioSetRxConfig+0x308>)
 801a6cc:	f002 fb26 	bl	801cd1c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801a6d0:	4a28      	ldr	r2, [pc, #160]	@ (801a774 <RadioSetRxConfig+0x310>)
 801a6d2:	f107 0314 	add.w	r3, r7, #20
 801a6d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a6da:	e883 0003 	stmia.w	r3, {r0, r1}
 801a6de:	f107 0314 	add.w	r3, r7, #20
 801a6e2:	4618      	mov	r0, r3
 801a6e4:	f001 fde3 	bl	801c2ae <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801a6e8:	f240 10ff 	movw	r0, #511	@ 0x1ff
 801a6ec:	f001 fe2e 	bl	801c34c <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 801a6f0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 801a6f2:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 801a6f6:	fb02 f303 	mul.w	r3, r2, r3
 801a6fa:	461a      	mov	r2, r3
 801a6fc:	687b      	ldr	r3, [r7, #4]
 801a6fe:	fbb2 f3f3 	udiv	r3, r2, r3
 801a702:	4a17      	ldr	r2, [pc, #92]	@ (801a760 <RadioSetRxConfig+0x2fc>)
 801a704:	6093      	str	r3, [r2, #8]
            break;
 801a706:	e0ad      	b.n	801a864 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 801a708:	2000      	movs	r0, #0
 801a70a:	f001 ff97 	bl	801c63c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801a70e:	4b14      	ldr	r3, [pc, #80]	@ (801a760 <RadioSetRxConfig+0x2fc>)
 801a710:	2201      	movs	r2, #1
 801a712:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 801a716:	687b      	ldr	r3, [r7, #4]
 801a718:	b2da      	uxtb	r2, r3
 801a71a:	4b11      	ldr	r3, [pc, #68]	@ (801a760 <RadioSetRxConfig+0x2fc>)
 801a71c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 801a720:	4a15      	ldr	r2, [pc, #84]	@ (801a778 <RadioSetRxConfig+0x314>)
 801a722:	68bb      	ldr	r3, [r7, #8]
 801a724:	4413      	add	r3, r2
 801a726:	781a      	ldrb	r2, [r3, #0]
 801a728:	4b0d      	ldr	r3, [pc, #52]	@ (801a760 <RadioSetRxConfig+0x2fc>)
 801a72a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 801a72e:	4a0c      	ldr	r2, [pc, #48]	@ (801a760 <RadioSetRxConfig+0x2fc>)
 801a730:	7bbb      	ldrb	r3, [r7, #14]
 801a732:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801a736:	68bb      	ldr	r3, [r7, #8]
 801a738:	2b00      	cmp	r3, #0
 801a73a:	d105      	bne.n	801a748 <RadioSetRxConfig+0x2e4>
 801a73c:	687b      	ldr	r3, [r7, #4]
 801a73e:	2b0b      	cmp	r3, #11
 801a740:	d008      	beq.n	801a754 <RadioSetRxConfig+0x2f0>
 801a742:	687b      	ldr	r3, [r7, #4]
 801a744:	2b0c      	cmp	r3, #12
 801a746:	d005      	beq.n	801a754 <RadioSetRxConfig+0x2f0>
 801a748:	68bb      	ldr	r3, [r7, #8]
 801a74a:	2b01      	cmp	r3, #1
 801a74c:	d116      	bne.n	801a77c <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801a74e:	687b      	ldr	r3, [r7, #4]
 801a750:	2b0c      	cmp	r3, #12
 801a752:	d113      	bne.n	801a77c <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 801a754:	4b02      	ldr	r3, [pc, #8]	@ (801a760 <RadioSetRxConfig+0x2fc>)
 801a756:	2201      	movs	r2, #1
 801a758:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 801a75c:	e012      	b.n	801a784 <RadioSetRxConfig+0x320>
 801a75e:	bf00      	nop
 801a760:	20001b88 	.word	0x20001b88
 801a764:	20000138 	.word	0x20000138
 801a768:	20001bc0 	.word	0x20001bc0
 801a76c:	20001b96 	.word	0x20001b96
 801a770:	0801f664 	.word	0x0801f664
 801a774:	0801f66c 	.word	0x0801f66c
 801a778:	0801fd58 	.word	0x0801fd58
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 801a77c:	4b3b      	ldr	r3, [pc, #236]	@ (801a86c <RadioSetRxConfig+0x408>)
 801a77e:	2200      	movs	r2, #0
 801a780:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801a784:	4b39      	ldr	r3, [pc, #228]	@ (801a86c <RadioSetRxConfig+0x408>)
 801a786:	2201      	movs	r2, #1
 801a788:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801a78a:	4b38      	ldr	r3, [pc, #224]	@ (801a86c <RadioSetRxConfig+0x408>)
 801a78c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 801a790:	2b05      	cmp	r3, #5
 801a792:	d004      	beq.n	801a79e <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 801a794:	4b35      	ldr	r3, [pc, #212]	@ (801a86c <RadioSetRxConfig+0x408>)
 801a796:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801a79a:	2b06      	cmp	r3, #6
 801a79c:	d10a      	bne.n	801a7b4 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 801a79e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801a7a0:	2b0b      	cmp	r3, #11
 801a7a2:	d803      	bhi.n	801a7ac <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801a7a4:	4b31      	ldr	r3, [pc, #196]	@ (801a86c <RadioSetRxConfig+0x408>)
 801a7a6:	220c      	movs	r2, #12
 801a7a8:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 801a7aa:	e006      	b.n	801a7ba <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801a7ac:	4a2f      	ldr	r2, [pc, #188]	@ (801a86c <RadioSetRxConfig+0x408>)
 801a7ae:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801a7b0:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 801a7b2:	e002      	b.n	801a7ba <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801a7b4:	4a2d      	ldr	r2, [pc, #180]	@ (801a86c <RadioSetRxConfig+0x408>)
 801a7b6:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801a7b8:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 801a7ba:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 801a7be:	4b2b      	ldr	r3, [pc, #172]	@ (801a86c <RadioSetRxConfig+0x408>)
 801a7c0:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801a7c2:	4b2b      	ldr	r3, [pc, #172]	@ (801a870 <RadioSetRxConfig+0x40c>)
 801a7c4:	781a      	ldrb	r2, [r3, #0]
 801a7c6:	4b29      	ldr	r3, [pc, #164]	@ (801a86c <RadioSetRxConfig+0x408>)
 801a7c8:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 801a7ca:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 801a7ce:	4b27      	ldr	r3, [pc, #156]	@ (801a86c <RadioSetRxConfig+0x408>)
 801a7d0:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801a7d4:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 801a7d8:	4b24      	ldr	r3, [pc, #144]	@ (801a86c <RadioSetRxConfig+0x408>)
 801a7da:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 801a7de:	f000 fbd6 	bl	801af8e <RadioStandby>
            RadioSetModem( MODEM_LORA );
 801a7e2:	2001      	movs	r0, #1
 801a7e4:	f7ff fd6a 	bl	801a2bc <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a7e8:	4822      	ldr	r0, [pc, #136]	@ (801a874 <RadioSetRxConfig+0x410>)
 801a7ea:	f002 f9c5 	bl	801cb78 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a7ee:	4822      	ldr	r0, [pc, #136]	@ (801a878 <RadioSetRxConfig+0x414>)
 801a7f0:	f002 fa94 	bl	801cd1c <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801a7f4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 801a7f6:	b2db      	uxtb	r3, r3
 801a7f8:	4618      	mov	r0, r3
 801a7fa:	f001 ff2e 	bl	801c65a <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 801a7fe:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 801a802:	f002 fbe7 	bl	801cfd4 <SUBGRF_ReadRegister>
 801a806:	4603      	mov	r3, r0
 801a808:	f003 0301 	and.w	r3, r3, #1
 801a80c:	b2db      	uxtb	r3, r3
 801a80e:	4619      	mov	r1, r3
 801a810:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 801a814:	f002 fbca 	bl	801cfac <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801a818:	4b14      	ldr	r3, [pc, #80]	@ (801a86c <RadioSetRxConfig+0x408>)
 801a81a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 801a81e:	2b01      	cmp	r3, #1
 801a820:	d10d      	bne.n	801a83e <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 801a822:	f240 7036 	movw	r0, #1846	@ 0x736
 801a826:	f002 fbd5 	bl	801cfd4 <SUBGRF_ReadRegister>
 801a82a:	4603      	mov	r3, r0
 801a82c:	f023 0304 	bic.w	r3, r3, #4
 801a830:	b2db      	uxtb	r3, r3
 801a832:	4619      	mov	r1, r3
 801a834:	f240 7036 	movw	r0, #1846	@ 0x736
 801a838:	f002 fbb8 	bl	801cfac <SUBGRF_WriteRegister>
 801a83c:	e00c      	b.n	801a858 <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 801a83e:	f240 7036 	movw	r0, #1846	@ 0x736
 801a842:	f002 fbc7 	bl	801cfd4 <SUBGRF_ReadRegister>
 801a846:	4603      	mov	r3, r0
 801a848:	f043 0304 	orr.w	r3, r3, #4
 801a84c:	b2db      	uxtb	r3, r3
 801a84e:	4619      	mov	r1, r3
 801a850:	f240 7036 	movw	r0, #1846	@ 0x736
 801a854:	f002 fbaa 	bl	801cfac <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 801a858:	4b04      	ldr	r3, [pc, #16]	@ (801a86c <RadioSetRxConfig+0x408>)
 801a85a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801a85e:	609a      	str	r2, [r3, #8]
            break;
 801a860:	e000      	b.n	801a864 <RadioSetRxConfig+0x400>
            break;
 801a862:	bf00      	nop
    }
}
 801a864:	bf00      	nop
 801a866:	3728      	adds	r7, #40	@ 0x28
 801a868:	46bd      	mov	sp, r7
 801a86a:	bd80      	pop	{r7, pc}
 801a86c:	20001b88 	.word	0x20001b88
 801a870:	20000138 	.word	0x20000138
 801a874:	20001bc0 	.word	0x20001bc0
 801a878:	20001b96 	.word	0x20001b96

0801a87c <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 801a87c:	b580      	push	{r7, lr}
 801a87e:	b086      	sub	sp, #24
 801a880:	af00      	add	r7, sp, #0
 801a882:	60ba      	str	r2, [r7, #8]
 801a884:	607b      	str	r3, [r7, #4]
 801a886:	4603      	mov	r3, r0
 801a888:	73fb      	strb	r3, [r7, #15]
 801a88a:	460b      	mov	r3, r1
 801a88c:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 801a88e:	f002 fe74 	bl	801d57a <RFW_DeInit>
    switch( modem )
 801a892:	7bfb      	ldrb	r3, [r7, #15]
 801a894:	2b04      	cmp	r3, #4
 801a896:	f000 80c7 	beq.w	801aa28 <RadioSetTxConfig+0x1ac>
 801a89a:	2b04      	cmp	r3, #4
 801a89c:	f300 80d6 	bgt.w	801aa4c <RadioSetTxConfig+0x1d0>
 801a8a0:	2b00      	cmp	r3, #0
 801a8a2:	d002      	beq.n	801a8aa <RadioSetTxConfig+0x2e>
 801a8a4:	2b01      	cmp	r3, #1
 801a8a6:	d059      	beq.n	801a95c <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 801a8a8:	e0d0      	b.n	801aa4c <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801a8aa:	4b77      	ldr	r3, [pc, #476]	@ (801aa88 <RadioSetTxConfig+0x20c>)
 801a8ac:	2200      	movs	r2, #0
 801a8ae:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801a8b2:	4a75      	ldr	r2, [pc, #468]	@ (801aa88 <RadioSetTxConfig+0x20c>)
 801a8b4:	6a3b      	ldr	r3, [r7, #32]
 801a8b6:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 801a8b8:	4b73      	ldr	r3, [pc, #460]	@ (801aa88 <RadioSetTxConfig+0x20c>)
 801a8ba:	220b      	movs	r2, #11
 801a8bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801a8c0:	6878      	ldr	r0, [r7, #4]
 801a8c2:	f002 fd8d 	bl	801d3e0 <SUBGRF_GetFskBandwidthRegValue>
 801a8c6:	4603      	mov	r3, r0
 801a8c8:	461a      	mov	r2, r3
 801a8ca:	4b6f      	ldr	r3, [pc, #444]	@ (801aa88 <RadioSetTxConfig+0x20c>)
 801a8cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 801a8d0:	4a6d      	ldr	r2, [pc, #436]	@ (801aa88 <RadioSetTxConfig+0x20c>)
 801a8d2:	68bb      	ldr	r3, [r7, #8]
 801a8d4:	6413      	str	r3, [r2, #64]	@ 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801a8d6:	4b6c      	ldr	r3, [pc, #432]	@ (801aa88 <RadioSetTxConfig+0x20c>)
 801a8d8:	2200      	movs	r2, #0
 801a8da:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801a8dc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801a8de:	00db      	lsls	r3, r3, #3
 801a8e0:	b29a      	uxth	r2, r3
 801a8e2:	4b69      	ldr	r3, [pc, #420]	@ (801aa88 <RadioSetTxConfig+0x20c>)
 801a8e4:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801a8e6:	4b68      	ldr	r3, [pc, #416]	@ (801aa88 <RadioSetTxConfig+0x20c>)
 801a8e8:	2204      	movs	r2, #4
 801a8ea:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 801a8ec:	4b66      	ldr	r3, [pc, #408]	@ (801aa88 <RadioSetTxConfig+0x20c>)
 801a8ee:	2218      	movs	r2, #24
 801a8f0:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801a8f2:	4b65      	ldr	r3, [pc, #404]	@ (801aa88 <RadioSetTxConfig+0x20c>)
 801a8f4:	2200      	movs	r2, #0
 801a8f6:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 801a8f8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 801a8fc:	f083 0301 	eor.w	r3, r3, #1
 801a900:	b2db      	uxtb	r3, r3
 801a902:	461a      	mov	r2, r3
 801a904:	4b60      	ldr	r3, [pc, #384]	@ (801aa88 <RadioSetTxConfig+0x20c>)
 801a906:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 801a908:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 801a90c:	2b00      	cmp	r3, #0
 801a90e:	d003      	beq.n	801a918 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 801a910:	4b5d      	ldr	r3, [pc, #372]	@ (801aa88 <RadioSetTxConfig+0x20c>)
 801a912:	22f2      	movs	r2, #242	@ 0xf2
 801a914:	75da      	strb	r2, [r3, #23]
 801a916:	e002      	b.n	801a91e <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801a918:	4b5b      	ldr	r3, [pc, #364]	@ (801aa88 <RadioSetTxConfig+0x20c>)
 801a91a:	2201      	movs	r2, #1
 801a91c:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 801a91e:	4b5a      	ldr	r3, [pc, #360]	@ (801aa88 <RadioSetTxConfig+0x20c>)
 801a920:	2201      	movs	r2, #1
 801a922:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 801a924:	f000 fb33 	bl	801af8e <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 801a928:	2000      	movs	r0, #0
 801a92a:	f7ff fcc7 	bl	801a2bc <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a92e:	4857      	ldr	r0, [pc, #348]	@ (801aa8c <RadioSetTxConfig+0x210>)
 801a930:	f002 f922 	bl	801cb78 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a934:	4856      	ldr	r0, [pc, #344]	@ (801aa90 <RadioSetTxConfig+0x214>)
 801a936:	f002 f9f1 	bl	801cd1c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801a93a:	4a56      	ldr	r2, [pc, #344]	@ (801aa94 <RadioSetTxConfig+0x218>)
 801a93c:	f107 0310 	add.w	r3, r7, #16
 801a940:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a944:	e883 0003 	stmia.w	r3, {r0, r1}
 801a948:	f107 0310 	add.w	r3, r7, #16
 801a94c:	4618      	mov	r0, r3
 801a94e:	f001 fcae 	bl	801c2ae <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801a952:	f240 10ff 	movw	r0, #511	@ 0x1ff
 801a956:	f001 fcf9 	bl	801c34c <SUBGRF_SetWhiteningSeed>
            break;
 801a95a:	e078      	b.n	801aa4e <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801a95c:	4b4a      	ldr	r3, [pc, #296]	@ (801aa88 <RadioSetTxConfig+0x20c>)
 801a95e:	2201      	movs	r2, #1
 801a960:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 801a964:	6a3b      	ldr	r3, [r7, #32]
 801a966:	b2da      	uxtb	r2, r3
 801a968:	4b47      	ldr	r3, [pc, #284]	@ (801aa88 <RadioSetTxConfig+0x20c>)
 801a96a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 801a96e:	4a4a      	ldr	r2, [pc, #296]	@ (801aa98 <RadioSetTxConfig+0x21c>)
 801a970:	687b      	ldr	r3, [r7, #4]
 801a972:	4413      	add	r3, r2
 801a974:	781a      	ldrb	r2, [r3, #0]
 801a976:	4b44      	ldr	r3, [pc, #272]	@ (801aa88 <RadioSetTxConfig+0x20c>)
 801a978:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 801a97c:	4a42      	ldr	r2, [pc, #264]	@ (801aa88 <RadioSetTxConfig+0x20c>)
 801a97e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801a982:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801a986:	687b      	ldr	r3, [r7, #4]
 801a988:	2b00      	cmp	r3, #0
 801a98a:	d105      	bne.n	801a998 <RadioSetTxConfig+0x11c>
 801a98c:	6a3b      	ldr	r3, [r7, #32]
 801a98e:	2b0b      	cmp	r3, #11
 801a990:	d008      	beq.n	801a9a4 <RadioSetTxConfig+0x128>
 801a992:	6a3b      	ldr	r3, [r7, #32]
 801a994:	2b0c      	cmp	r3, #12
 801a996:	d005      	beq.n	801a9a4 <RadioSetTxConfig+0x128>
 801a998:	687b      	ldr	r3, [r7, #4]
 801a99a:	2b01      	cmp	r3, #1
 801a99c:	d107      	bne.n	801a9ae <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801a99e:	6a3b      	ldr	r3, [r7, #32]
 801a9a0:	2b0c      	cmp	r3, #12
 801a9a2:	d104      	bne.n	801a9ae <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 801a9a4:	4b38      	ldr	r3, [pc, #224]	@ (801aa88 <RadioSetTxConfig+0x20c>)
 801a9a6:	2201      	movs	r2, #1
 801a9a8:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 801a9ac:	e003      	b.n	801a9b6 <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 801a9ae:	4b36      	ldr	r3, [pc, #216]	@ (801aa88 <RadioSetTxConfig+0x20c>)
 801a9b0:	2200      	movs	r2, #0
 801a9b2:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801a9b6:	4b34      	ldr	r3, [pc, #208]	@ (801aa88 <RadioSetTxConfig+0x20c>)
 801a9b8:	2201      	movs	r2, #1
 801a9ba:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801a9bc:	4b32      	ldr	r3, [pc, #200]	@ (801aa88 <RadioSetTxConfig+0x20c>)
 801a9be:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 801a9c2:	2b05      	cmp	r3, #5
 801a9c4:	d004      	beq.n	801a9d0 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 801a9c6:	4b30      	ldr	r3, [pc, #192]	@ (801aa88 <RadioSetTxConfig+0x20c>)
 801a9c8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801a9cc:	2b06      	cmp	r3, #6
 801a9ce:	d10a      	bne.n	801a9e6 <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 801a9d0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801a9d2:	2b0b      	cmp	r3, #11
 801a9d4:	d803      	bhi.n	801a9de <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801a9d6:	4b2c      	ldr	r3, [pc, #176]	@ (801aa88 <RadioSetTxConfig+0x20c>)
 801a9d8:	220c      	movs	r2, #12
 801a9da:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 801a9dc:	e006      	b.n	801a9ec <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801a9de:	4a2a      	ldr	r2, [pc, #168]	@ (801aa88 <RadioSetTxConfig+0x20c>)
 801a9e0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801a9e2:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 801a9e4:	e002      	b.n	801a9ec <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801a9e6:	4a28      	ldr	r2, [pc, #160]	@ (801aa88 <RadioSetTxConfig+0x20c>)
 801a9e8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801a9ea:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 801a9ec:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 801a9f0:	4b25      	ldr	r3, [pc, #148]	@ (801aa88 <RadioSetTxConfig+0x20c>)
 801a9f2:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801a9f4:	4b29      	ldr	r3, [pc, #164]	@ (801aa9c <RadioSetTxConfig+0x220>)
 801a9f6:	781a      	ldrb	r2, [r3, #0]
 801a9f8:	4b23      	ldr	r3, [pc, #140]	@ (801aa88 <RadioSetTxConfig+0x20c>)
 801a9fa:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 801a9fc:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 801aa00:	4b21      	ldr	r3, [pc, #132]	@ (801aa88 <RadioSetTxConfig+0x20c>)
 801aa02:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801aa06:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 801aa0a:	4b1f      	ldr	r3, [pc, #124]	@ (801aa88 <RadioSetTxConfig+0x20c>)
 801aa0c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 801aa10:	f000 fabd 	bl	801af8e <RadioStandby>
            RadioSetModem( MODEM_LORA );
 801aa14:	2001      	movs	r0, #1
 801aa16:	f7ff fc51 	bl	801a2bc <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801aa1a:	481c      	ldr	r0, [pc, #112]	@ (801aa8c <RadioSetTxConfig+0x210>)
 801aa1c:	f002 f8ac 	bl	801cb78 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801aa20:	481b      	ldr	r0, [pc, #108]	@ (801aa90 <RadioSetTxConfig+0x214>)
 801aa22:	f002 f97b 	bl	801cd1c <SUBGRF_SetPacketParams>
            break;
 801aa26:	e012      	b.n	801aa4e <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 801aa28:	2004      	movs	r0, #4
 801aa2a:	f7ff fc47 	bl	801a2bc <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801aa2e:	4b16      	ldr	r3, [pc, #88]	@ (801aa88 <RadioSetTxConfig+0x20c>)
 801aa30:	2202      	movs	r2, #2
 801aa32:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 801aa36:	4a14      	ldr	r2, [pc, #80]	@ (801aa88 <RadioSetTxConfig+0x20c>)
 801aa38:	6a3b      	ldr	r3, [r7, #32]
 801aa3a:	6493      	str	r3, [r2, #72]	@ 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801aa3c:	4b12      	ldr	r3, [pc, #72]	@ (801aa88 <RadioSetTxConfig+0x20c>)
 801aa3e:	2216      	movs	r2, #22
 801aa40:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801aa44:	4811      	ldr	r0, [pc, #68]	@ (801aa8c <RadioSetTxConfig+0x210>)
 801aa46:	f002 f897 	bl	801cb78 <SUBGRF_SetModulationParams>
            break;
 801aa4a:	e000      	b.n	801aa4e <RadioSetTxConfig+0x1d2>
            break;
 801aa4c:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801aa4e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801aa52:	4618      	mov	r0, r3
 801aa54:	f002 fbc6 	bl	801d1e4 <SUBGRF_SetRfTxPower>
 801aa58:	4603      	mov	r3, r0
 801aa5a:	461a      	mov	r2, r3
 801aa5c:	4b0a      	ldr	r3, [pc, #40]	@ (801aa88 <RadioSetTxConfig+0x20c>)
 801aa5e:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801aa62:	210e      	movs	r1, #14
 801aa64:	f640 101f 	movw	r0, #2335	@ 0x91f
 801aa68:	f002 faa0 	bl	801cfac <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 801aa6c:	4b06      	ldr	r3, [pc, #24]	@ (801aa88 <RadioSetTxConfig+0x20c>)
 801aa6e:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 801aa72:	4618      	mov	r0, r3
 801aa74:	f002 fd95 	bl	801d5a2 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801aa78:	4a03      	ldr	r2, [pc, #12]	@ (801aa88 <RadioSetTxConfig+0x20c>)
 801aa7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801aa7c:	6053      	str	r3, [r2, #4]
}
 801aa7e:	bf00      	nop
 801aa80:	3718      	adds	r7, #24
 801aa82:	46bd      	mov	sp, r7
 801aa84:	bd80      	pop	{r7, pc}
 801aa86:	bf00      	nop
 801aa88:	20001b88 	.word	0x20001b88
 801aa8c:	20001bc0 	.word	0x20001bc0
 801aa90:	20001b96 	.word	0x20001b96
 801aa94:	0801f66c 	.word	0x0801f66c
 801aa98:	0801fd58 	.word	0x0801fd58
 801aa9c:	20000138 	.word	0x20000138

0801aaa0 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 801aaa0:	b480      	push	{r7}
 801aaa2:	b083      	sub	sp, #12
 801aaa4:	af00      	add	r7, sp, #0
 801aaa6:	6078      	str	r0, [r7, #4]
    return true;
 801aaa8:	2301      	movs	r3, #1
}
 801aaaa:	4618      	mov	r0, r3
 801aaac:	370c      	adds	r7, #12
 801aaae:	46bd      	mov	sp, r7
 801aab0:	bc80      	pop	{r7}
 801aab2:	4770      	bx	lr

0801aab4 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 801aab4:	b480      	push	{r7}
 801aab6:	b085      	sub	sp, #20
 801aab8:	af00      	add	r7, sp, #0
 801aaba:	4603      	mov	r3, r0
 801aabc:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 801aabe:	2300      	movs	r3, #0
 801aac0:	60fb      	str	r3, [r7, #12]

    switch( bw )
 801aac2:	79fb      	ldrb	r3, [r7, #7]
 801aac4:	2b0a      	cmp	r3, #10
 801aac6:	d83e      	bhi.n	801ab46 <RadioGetLoRaBandwidthInHz+0x92>
 801aac8:	a201      	add	r2, pc, #4	@ (adr r2, 801aad0 <RadioGetLoRaBandwidthInHz+0x1c>)
 801aaca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801aace:	bf00      	nop
 801aad0:	0801aafd 	.word	0x0801aafd
 801aad4:	0801ab0d 	.word	0x0801ab0d
 801aad8:	0801ab1d 	.word	0x0801ab1d
 801aadc:	0801ab2d 	.word	0x0801ab2d
 801aae0:	0801ab35 	.word	0x0801ab35
 801aae4:	0801ab3b 	.word	0x0801ab3b
 801aae8:	0801ab41 	.word	0x0801ab41
 801aaec:	0801ab47 	.word	0x0801ab47
 801aaf0:	0801ab05 	.word	0x0801ab05
 801aaf4:	0801ab15 	.word	0x0801ab15
 801aaf8:	0801ab25 	.word	0x0801ab25
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 801aafc:	f641 6384 	movw	r3, #7812	@ 0x1e84
 801ab00:	60fb      	str	r3, [r7, #12]
        break;
 801ab02:	e020      	b.n	801ab46 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 801ab04:	f642 03b1 	movw	r3, #10417	@ 0x28b1
 801ab08:	60fb      	str	r3, [r7, #12]
        break;
 801ab0a:	e01c      	b.n	801ab46 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 801ab0c:	f643 5309 	movw	r3, #15625	@ 0x3d09
 801ab10:	60fb      	str	r3, [r7, #12]
        break;
 801ab12:	e018      	b.n	801ab46 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 801ab14:	f245 1361 	movw	r3, #20833	@ 0x5161
 801ab18:	60fb      	str	r3, [r7, #12]
        break;
 801ab1a:	e014      	b.n	801ab46 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 801ab1c:	f647 2312 	movw	r3, #31250	@ 0x7a12
 801ab20:	60fb      	str	r3, [r7, #12]
        break;
 801ab22:	e010      	b.n	801ab46 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 801ab24:	f24a 23c3 	movw	r3, #41667	@ 0xa2c3
 801ab28:	60fb      	str	r3, [r7, #12]
        break;
 801ab2a:	e00c      	b.n	801ab46 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 801ab2c:	f24f 4324 	movw	r3, #62500	@ 0xf424
 801ab30:	60fb      	str	r3, [r7, #12]
        break;
 801ab32:	e008      	b.n	801ab46 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 801ab34:	4b07      	ldr	r3, [pc, #28]	@ (801ab54 <RadioGetLoRaBandwidthInHz+0xa0>)
 801ab36:	60fb      	str	r3, [r7, #12]
        break;
 801ab38:	e005      	b.n	801ab46 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 801ab3a:	4b07      	ldr	r3, [pc, #28]	@ (801ab58 <RadioGetLoRaBandwidthInHz+0xa4>)
 801ab3c:	60fb      	str	r3, [r7, #12]
        break;
 801ab3e:	e002      	b.n	801ab46 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 801ab40:	4b06      	ldr	r3, [pc, #24]	@ (801ab5c <RadioGetLoRaBandwidthInHz+0xa8>)
 801ab42:	60fb      	str	r3, [r7, #12]
        break;
 801ab44:	bf00      	nop
    }

    return bandwidthInHz;
 801ab46:	68fb      	ldr	r3, [r7, #12]
}
 801ab48:	4618      	mov	r0, r3
 801ab4a:	3714      	adds	r7, #20
 801ab4c:	46bd      	mov	sp, r7
 801ab4e:	bc80      	pop	{r7}
 801ab50:	4770      	bx	lr
 801ab52:	bf00      	nop
 801ab54:	0001e848 	.word	0x0001e848
 801ab58:	0003d090 	.word	0x0003d090
 801ab5c:	0007a120 	.word	0x0007a120

0801ab60 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 801ab60:	b480      	push	{r7}
 801ab62:	b083      	sub	sp, #12
 801ab64:	af00      	add	r7, sp, #0
 801ab66:	6078      	str	r0, [r7, #4]
 801ab68:	4608      	mov	r0, r1
 801ab6a:	4611      	mov	r1, r2
 801ab6c:	461a      	mov	r2, r3
 801ab6e:	4603      	mov	r3, r0
 801ab70:	70fb      	strb	r3, [r7, #3]
 801ab72:	460b      	mov	r3, r1
 801ab74:	803b      	strh	r3, [r7, #0]
 801ab76:	4613      	mov	r3, r2
 801ab78:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 801ab7a:	883b      	ldrh	r3, [r7, #0]
 801ab7c:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801ab7e:	78ba      	ldrb	r2, [r7, #2]
 801ab80:	f082 0201 	eor.w	r2, r2, #1
 801ab84:	b2d2      	uxtb	r2, r2
 801ab86:	2a00      	cmp	r2, #0
 801ab88:	d001      	beq.n	801ab8e <RadioGetGfskTimeOnAirNumerator+0x2e>
 801ab8a:	2208      	movs	r2, #8
 801ab8c:	e000      	b.n	801ab90 <RadioGetGfskTimeOnAirNumerator+0x30>
 801ab8e:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 801ab90:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801ab92:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 801ab96:	7c3b      	ldrb	r3, [r7, #16]
 801ab98:	7d39      	ldrb	r1, [r7, #20]
 801ab9a:	2900      	cmp	r1, #0
 801ab9c:	d001      	beq.n	801aba2 <RadioGetGfskTimeOnAirNumerator+0x42>
 801ab9e:	2102      	movs	r1, #2
 801aba0:	e000      	b.n	801aba4 <RadioGetGfskTimeOnAirNumerator+0x44>
 801aba2:	2100      	movs	r1, #0
 801aba4:	440b      	add	r3, r1
 801aba6:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801aba8:	4413      	add	r3, r2
}
 801abaa:	4618      	mov	r0, r3
 801abac:	370c      	adds	r7, #12
 801abae:	46bd      	mov	sp, r7
 801abb0:	bc80      	pop	{r7}
 801abb2:	4770      	bx	lr

0801abb4 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 801abb4:	b480      	push	{r7}
 801abb6:	b08b      	sub	sp, #44	@ 0x2c
 801abb8:	af00      	add	r7, sp, #0
 801abba:	60f8      	str	r0, [r7, #12]
 801abbc:	60b9      	str	r1, [r7, #8]
 801abbe:	4611      	mov	r1, r2
 801abc0:	461a      	mov	r2, r3
 801abc2:	460b      	mov	r3, r1
 801abc4:	71fb      	strb	r3, [r7, #7]
 801abc6:	4613      	mov	r3, r2
 801abc8:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 801abca:	79fb      	ldrb	r3, [r7, #7]
 801abcc:	3304      	adds	r3, #4
 801abce:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 801abd0:	2300      	movs	r3, #0
 801abd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 801abd6:	68bb      	ldr	r3, [r7, #8]
 801abd8:	2b05      	cmp	r3, #5
 801abda:	d002      	beq.n	801abe2 <RadioGetLoRaTimeOnAirNumerator+0x2e>
 801abdc:	68bb      	ldr	r3, [r7, #8]
 801abde:	2b06      	cmp	r3, #6
 801abe0:	d104      	bne.n	801abec <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 801abe2:	88bb      	ldrh	r3, [r7, #4]
 801abe4:	2b0b      	cmp	r3, #11
 801abe6:	d801      	bhi.n	801abec <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 801abe8:	230c      	movs	r3, #12
 801abea:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801abec:	68fb      	ldr	r3, [r7, #12]
 801abee:	2b00      	cmp	r3, #0
 801abf0:	d105      	bne.n	801abfe <RadioGetLoRaTimeOnAirNumerator+0x4a>
 801abf2:	68bb      	ldr	r3, [r7, #8]
 801abf4:	2b0b      	cmp	r3, #11
 801abf6:	d008      	beq.n	801ac0a <RadioGetLoRaTimeOnAirNumerator+0x56>
 801abf8:	68bb      	ldr	r3, [r7, #8]
 801abfa:	2b0c      	cmp	r3, #12
 801abfc:	d005      	beq.n	801ac0a <RadioGetLoRaTimeOnAirNumerator+0x56>
 801abfe:	68fb      	ldr	r3, [r7, #12]
 801ac00:	2b01      	cmp	r3, #1
 801ac02:	d105      	bne.n	801ac10 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801ac04:	68bb      	ldr	r3, [r7, #8]
 801ac06:	2b0c      	cmp	r3, #12
 801ac08:	d102      	bne.n	801ac10 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 801ac0a:	2301      	movs	r3, #1
 801ac0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801ac10:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 801ac14:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 801ac16:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 801ac1a:	2a00      	cmp	r2, #0
 801ac1c:	d001      	beq.n	801ac22 <RadioGetLoRaTimeOnAirNumerator+0x6e>
 801ac1e:	2210      	movs	r2, #16
 801ac20:	e000      	b.n	801ac24 <RadioGetLoRaTimeOnAirNumerator+0x70>
 801ac22:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801ac24:	4413      	add	r3, r2
 801ac26:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 801ac28:	68bb      	ldr	r3, [r7, #8]
 801ac2a:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 801ac2c:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 801ac2e:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 801ac32:	2a00      	cmp	r2, #0
 801ac34:	d001      	beq.n	801ac3a <RadioGetLoRaTimeOnAirNumerator+0x86>
 801ac36:	2200      	movs	r2, #0
 801ac38:	e000      	b.n	801ac3c <RadioGetLoRaTimeOnAirNumerator+0x88>
 801ac3a:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 801ac3c:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801ac3e:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 801ac40:	68bb      	ldr	r3, [r7, #8]
 801ac42:	2b06      	cmp	r3, #6
 801ac44:	d803      	bhi.n	801ac4e <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 801ac46:	68bb      	ldr	r3, [r7, #8]
 801ac48:	009b      	lsls	r3, r3, #2
 801ac4a:	623b      	str	r3, [r7, #32]
 801ac4c:	e00e      	b.n	801ac6c <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 801ac4e:	69fb      	ldr	r3, [r7, #28]
 801ac50:	3308      	adds	r3, #8
 801ac52:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 801ac54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801ac58:	2b00      	cmp	r3, #0
 801ac5a:	d004      	beq.n	801ac66 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 801ac5c:	68bb      	ldr	r3, [r7, #8]
 801ac5e:	3b02      	subs	r3, #2
 801ac60:	009b      	lsls	r3, r3, #2
 801ac62:	623b      	str	r3, [r7, #32]
 801ac64:	e002      	b.n	801ac6c <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 801ac66:	68bb      	ldr	r3, [r7, #8]
 801ac68:	009b      	lsls	r3, r3, #2
 801ac6a:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 801ac6c:	69fb      	ldr	r3, [r7, #28]
 801ac6e:	2b00      	cmp	r3, #0
 801ac70:	da01      	bge.n	801ac76 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 801ac72:	2300      	movs	r3, #0
 801ac74:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 801ac76:	69fa      	ldr	r2, [r7, #28]
 801ac78:	6a3b      	ldr	r3, [r7, #32]
 801ac7a:	4413      	add	r3, r2
 801ac7c:	1e5a      	subs	r2, r3, #1
 801ac7e:	6a3b      	ldr	r3, [r7, #32]
 801ac80:	fb92 f3f3 	sdiv	r3, r2, r3
 801ac84:	697a      	ldr	r2, [r7, #20]
 801ac86:	fb03 f202 	mul.w	r2, r3, r2
 801ac8a:	88bb      	ldrh	r3, [r7, #4]
 801ac8c:	4413      	add	r3, r2
    int32_t intermediate =
 801ac8e:	330c      	adds	r3, #12
 801ac90:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 801ac92:	68bb      	ldr	r3, [r7, #8]
 801ac94:	2b06      	cmp	r3, #6
 801ac96:	d802      	bhi.n	801ac9e <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 801ac98:	69bb      	ldr	r3, [r7, #24]
 801ac9a:	3302      	adds	r3, #2
 801ac9c:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 801ac9e:	69bb      	ldr	r3, [r7, #24]
 801aca0:	009b      	lsls	r3, r3, #2
 801aca2:	1c5a      	adds	r2, r3, #1
 801aca4:	68bb      	ldr	r3, [r7, #8]
 801aca6:	3b02      	subs	r3, #2
 801aca8:	fa02 f303 	lsl.w	r3, r2, r3
}
 801acac:	4618      	mov	r0, r3
 801acae:	372c      	adds	r7, #44	@ 0x2c
 801acb0:	46bd      	mov	sp, r7
 801acb2:	bc80      	pop	{r7}
 801acb4:	4770      	bx	lr
	...

0801acb8 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 801acb8:	b580      	push	{r7, lr}
 801acba:	b08a      	sub	sp, #40	@ 0x28
 801acbc:	af04      	add	r7, sp, #16
 801acbe:	60b9      	str	r1, [r7, #8]
 801acc0:	607a      	str	r2, [r7, #4]
 801acc2:	461a      	mov	r2, r3
 801acc4:	4603      	mov	r3, r0
 801acc6:	73fb      	strb	r3, [r7, #15]
 801acc8:	4613      	mov	r3, r2
 801acca:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 801accc:	2300      	movs	r3, #0
 801acce:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 801acd0:	2301      	movs	r3, #1
 801acd2:	613b      	str	r3, [r7, #16]

    switch( modem )
 801acd4:	7bfb      	ldrb	r3, [r7, #15]
 801acd6:	2b00      	cmp	r3, #0
 801acd8:	d002      	beq.n	801ace0 <RadioTimeOnAir+0x28>
 801acda:	2b01      	cmp	r3, #1
 801acdc:	d017      	beq.n	801ad0e <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 801acde:	e035      	b.n	801ad4c <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 801ace0:	f897 0024 	ldrb.w	r0, [r7, #36]	@ 0x24
 801ace4:	8c3a      	ldrh	r2, [r7, #32]
 801ace6:	7bb9      	ldrb	r1, [r7, #14]
 801ace8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 801acec:	9301      	str	r3, [sp, #4]
 801acee:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801acf2:	9300      	str	r3, [sp, #0]
 801acf4:	4603      	mov	r3, r0
 801acf6:	6878      	ldr	r0, [r7, #4]
 801acf8:	f7ff ff32 	bl	801ab60 <RadioGetGfskTimeOnAirNumerator>
 801acfc:	4603      	mov	r3, r0
 801acfe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801ad02:	fb02 f303 	mul.w	r3, r2, r3
 801ad06:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 801ad08:	687b      	ldr	r3, [r7, #4]
 801ad0a:	613b      	str	r3, [r7, #16]
        break;
 801ad0c:	e01e      	b.n	801ad4c <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 801ad0e:	8c39      	ldrh	r1, [r7, #32]
 801ad10:	7bba      	ldrb	r2, [r7, #14]
 801ad12:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 801ad16:	9302      	str	r3, [sp, #8]
 801ad18:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801ad1c:	9301      	str	r3, [sp, #4]
 801ad1e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801ad22:	9300      	str	r3, [sp, #0]
 801ad24:	460b      	mov	r3, r1
 801ad26:	6879      	ldr	r1, [r7, #4]
 801ad28:	68b8      	ldr	r0, [r7, #8]
 801ad2a:	f7ff ff43 	bl	801abb4 <RadioGetLoRaTimeOnAirNumerator>
 801ad2e:	4603      	mov	r3, r0
 801ad30:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801ad34:	fb02 f303 	mul.w	r3, r2, r3
 801ad38:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 801ad3a:	4a0a      	ldr	r2, [pc, #40]	@ (801ad64 <RadioTimeOnAir+0xac>)
 801ad3c:	68bb      	ldr	r3, [r7, #8]
 801ad3e:	4413      	add	r3, r2
 801ad40:	781b      	ldrb	r3, [r3, #0]
 801ad42:	4618      	mov	r0, r3
 801ad44:	f7ff feb6 	bl	801aab4 <RadioGetLoRaBandwidthInHz>
 801ad48:	6138      	str	r0, [r7, #16]
        break;
 801ad4a:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 801ad4c:	697a      	ldr	r2, [r7, #20]
 801ad4e:	693b      	ldr	r3, [r7, #16]
 801ad50:	4413      	add	r3, r2
 801ad52:	1e5a      	subs	r2, r3, #1
 801ad54:	693b      	ldr	r3, [r7, #16]
 801ad56:	fbb2 f3f3 	udiv	r3, r2, r3
}
 801ad5a:	4618      	mov	r0, r3
 801ad5c:	3718      	adds	r7, #24
 801ad5e:	46bd      	mov	sp, r7
 801ad60:	bd80      	pop	{r7, pc}
 801ad62:	bf00      	nop
 801ad64:	0801fd58 	.word	0x0801fd58

0801ad68 <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 801ad68:	b580      	push	{r7, lr}
 801ad6a:	b084      	sub	sp, #16
 801ad6c:	af00      	add	r7, sp, #0
 801ad6e:	6078      	str	r0, [r7, #4]
 801ad70:	460b      	mov	r3, r1
 801ad72:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 801ad74:	2300      	movs	r3, #0
 801ad76:	2200      	movs	r2, #0
 801ad78:	f240 2101 	movw	r1, #513	@ 0x201
 801ad7c:	f240 2001 	movw	r0, #513	@ 0x201
 801ad80:	f001 fd64 	bl	801c84c <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801ad84:	4b73      	ldr	r3, [pc, #460]	@ (801af54 <RadioSend+0x1ec>)
 801ad86:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 801ad8a:	2101      	movs	r1, #1
 801ad8c:	4618      	mov	r0, r3
 801ad8e:	f002 fa01 	bl	801d194 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 801ad92:	4b70      	ldr	r3, [pc, #448]	@ (801af54 <RadioSend+0x1ec>)
 801ad94:	781b      	ldrb	r3, [r3, #0]
 801ad96:	2b01      	cmp	r3, #1
 801ad98:	d112      	bne.n	801adc0 <RadioSend+0x58>
 801ad9a:	4b6e      	ldr	r3, [pc, #440]	@ (801af54 <RadioSend+0x1ec>)
 801ad9c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 801ada0:	2b06      	cmp	r3, #6
 801ada2:	d10d      	bne.n	801adc0 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801ada4:	f640 0089 	movw	r0, #2185	@ 0x889
 801ada8:	f002 f914 	bl	801cfd4 <SUBGRF_ReadRegister>
 801adac:	4603      	mov	r3, r0
 801adae:	f023 0304 	bic.w	r3, r3, #4
 801adb2:	b2db      	uxtb	r3, r3
 801adb4:	4619      	mov	r1, r3
 801adb6:	f640 0089 	movw	r0, #2185	@ 0x889
 801adba:	f002 f8f7 	bl	801cfac <SUBGRF_WriteRegister>
 801adbe:	e00c      	b.n	801adda <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 801adc0:	f640 0089 	movw	r0, #2185	@ 0x889
 801adc4:	f002 f906 	bl	801cfd4 <SUBGRF_ReadRegister>
 801adc8:	4603      	mov	r3, r0
 801adca:	f043 0304 	orr.w	r3, r3, #4
 801adce:	b2db      	uxtb	r3, r3
 801add0:	4619      	mov	r1, r3
 801add2:	f640 0089 	movw	r0, #2185	@ 0x889
 801add6:	f002 f8e9 	bl	801cfac <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 801adda:	4b5e      	ldr	r3, [pc, #376]	@ (801af54 <RadioSend+0x1ec>)
 801addc:	781b      	ldrb	r3, [r3, #0]
 801adde:	2b04      	cmp	r3, #4
 801ade0:	f200 80a8 	bhi.w	801af34 <RadioSend+0x1cc>
 801ade4:	a201      	add	r2, pc, #4	@ (adr r2, 801adec <RadioSend+0x84>)
 801ade6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801adea:	bf00      	nop
 801adec:	0801ae1b 	.word	0x0801ae1b
 801adf0:	0801ae01 	.word	0x0801ae01
 801adf4:	0801ae1b 	.word	0x0801ae1b
 801adf8:	0801ae7d 	.word	0x0801ae7d
 801adfc:	0801ae9d 	.word	0x0801ae9d
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 801ae00:	4a54      	ldr	r2, [pc, #336]	@ (801af54 <RadioSend+0x1ec>)
 801ae02:	78fb      	ldrb	r3, [r7, #3]
 801ae04:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801ae06:	4854      	ldr	r0, [pc, #336]	@ (801af58 <RadioSend+0x1f0>)
 801ae08:	f001 ff88 	bl	801cd1c <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 801ae0c:	78fb      	ldrb	r3, [r7, #3]
 801ae0e:	2200      	movs	r2, #0
 801ae10:	4619      	mov	r1, r3
 801ae12:	6878      	ldr	r0, [r7, #4]
 801ae14:	f001 fa38 	bl	801c288 <SUBGRF_SendPayload>
            break;
 801ae18:	e08d      	b.n	801af36 <RadioSend+0x1ce>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 801ae1a:	f002 fbb4 	bl	801d586 <RFW_Is_Init>
 801ae1e:	4603      	mov	r3, r0
 801ae20:	2b01      	cmp	r3, #1
 801ae22:	d11e      	bne.n	801ae62 <RadioSend+0xfa>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 801ae24:	f107 020d 	add.w	r2, r7, #13
 801ae28:	78fb      	ldrb	r3, [r7, #3]
 801ae2a:	4619      	mov	r1, r3
 801ae2c:	6878      	ldr	r0, [r7, #4]
 801ae2e:	f002 fbc2 	bl	801d5b6 <RFW_TransmitInit>
 801ae32:	4603      	mov	r3, r0
 801ae34:	2b00      	cmp	r3, #0
 801ae36:	d10c      	bne.n	801ae52 <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 801ae38:	7b7a      	ldrb	r2, [r7, #13]
 801ae3a:	4b46      	ldr	r3, [pc, #280]	@ (801af54 <RadioSend+0x1ec>)
 801ae3c:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801ae3e:	4846      	ldr	r0, [pc, #280]	@ (801af58 <RadioSend+0x1f0>)
 801ae40:	f001 ff6c 	bl	801cd1c <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 801ae44:	7b7b      	ldrb	r3, [r7, #13]
 801ae46:	2200      	movs	r2, #0
 801ae48:	4619      	mov	r1, r3
 801ae4a:	6878      	ldr	r0, [r7, #4]
 801ae4c:	f001 fa1c 	bl	801c288 <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 801ae50:	e071      	b.n	801af36 <RadioSend+0x1ce>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 801ae52:	4b42      	ldr	r3, [pc, #264]	@ (801af5c <RadioSend+0x1f4>)
 801ae54:	2201      	movs	r2, #1
 801ae56:	2100      	movs	r1, #0
 801ae58:	2002      	movs	r0, #2
 801ae5a:	f003 fccb 	bl	801e7f4 <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 801ae5e:	2303      	movs	r3, #3
 801ae60:	e073      	b.n	801af4a <RadioSend+0x1e2>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 801ae62:	4a3c      	ldr	r2, [pc, #240]	@ (801af54 <RadioSend+0x1ec>)
 801ae64:	78fb      	ldrb	r3, [r7, #3]
 801ae66:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801ae68:	483b      	ldr	r0, [pc, #236]	@ (801af58 <RadioSend+0x1f0>)
 801ae6a:	f001 ff57 	bl	801cd1c <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 801ae6e:	78fb      	ldrb	r3, [r7, #3]
 801ae70:	2200      	movs	r2, #0
 801ae72:	4619      	mov	r1, r3
 801ae74:	6878      	ldr	r0, [r7, #4]
 801ae76:	f001 fa07 	bl	801c288 <SUBGRF_SendPayload>
            break;
 801ae7a:	e05c      	b.n	801af36 <RadioSend+0x1ce>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 801ae7c:	4b35      	ldr	r3, [pc, #212]	@ (801af54 <RadioSend+0x1ec>)
 801ae7e:	2202      	movs	r2, #2
 801ae80:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 801ae82:	4a34      	ldr	r2, [pc, #208]	@ (801af54 <RadioSend+0x1ec>)
 801ae84:	78fb      	ldrb	r3, [r7, #3]
 801ae86:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801ae88:	4833      	ldr	r0, [pc, #204]	@ (801af58 <RadioSend+0x1f0>)
 801ae8a:	f001 ff47 	bl	801cd1c <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 801ae8e:	78fb      	ldrb	r3, [r7, #3]
 801ae90:	2200      	movs	r2, #0
 801ae92:	4619      	mov	r1, r3
 801ae94:	6878      	ldr	r0, [r7, #4]
 801ae96:	f001 f9f7 	bl	801c288 <SUBGRF_SendPayload>
            break;
 801ae9a:	e04c      	b.n	801af36 <RadioSend+0x1ce>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 801ae9c:	78fb      	ldrb	r3, [r7, #3]
 801ae9e:	461a      	mov	r2, r3
 801aea0:	6879      	ldr	r1, [r7, #4]
 801aea2:	482f      	ldr	r0, [pc, #188]	@ (801af60 <RadioSend+0x1f8>)
 801aea4:	f000 fcca 	bl	801b83c <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 801aea8:	4b2a      	ldr	r3, [pc, #168]	@ (801af54 <RadioSend+0x1ec>)
 801aeaa:	2202      	movs	r2, #2
 801aeac:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 801aeae:	78fb      	ldrb	r3, [r7, #3]
 801aeb0:	3301      	adds	r3, #1
 801aeb2:	b2da      	uxtb	r2, r3
 801aeb4:	4b27      	ldr	r3, [pc, #156]	@ (801af54 <RadioSend+0x1ec>)
 801aeb6:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801aeb8:	4827      	ldr	r0, [pc, #156]	@ (801af58 <RadioSend+0x1f0>)
 801aeba:	f001 ff2f 	bl	801cd1c <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 801aebe:	2100      	movs	r1, #0
 801aec0:	20f1      	movs	r0, #241	@ 0xf1
 801aec2:	f000 f965 	bl	801b190 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 801aec6:	2100      	movs	r1, #0
 801aec8:	20f0      	movs	r0, #240	@ 0xf0
 801aeca:	f000 f961 	bl	801b190 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 801aece:	4b21      	ldr	r3, [pc, #132]	@ (801af54 <RadioSend+0x1ec>)
 801aed0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801aed2:	2b64      	cmp	r3, #100	@ 0x64
 801aed4:	d108      	bne.n	801aee8 <RadioSend+0x180>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 801aed6:	2170      	movs	r1, #112	@ 0x70
 801aed8:	20f3      	movs	r0, #243	@ 0xf3
 801aeda:	f000 f959 	bl	801b190 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 801aede:	211d      	movs	r1, #29
 801aee0:	20f2      	movs	r0, #242	@ 0xf2
 801aee2:	f000 f955 	bl	801b190 <RadioWrite>
 801aee6:	e007      	b.n	801aef8 <RadioSend+0x190>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 801aee8:	21e1      	movs	r1, #225	@ 0xe1
 801aeea:	20f3      	movs	r0, #243	@ 0xf3
 801aeec:	f000 f950 	bl	801b190 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 801aef0:	2104      	movs	r1, #4
 801aef2:	20f2      	movs	r0, #242	@ 0xf2
 801aef4:	f000 f94c 	bl	801b190 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 801aef8:	78fb      	ldrb	r3, [r7, #3]
 801aefa:	b29b      	uxth	r3, r3
 801aefc:	00db      	lsls	r3, r3, #3
 801aefe:	b29b      	uxth	r3, r3
 801af00:	3302      	adds	r3, #2
 801af02:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 801af04:	89fb      	ldrh	r3, [r7, #14]
 801af06:	0a1b      	lsrs	r3, r3, #8
 801af08:	b29b      	uxth	r3, r3
 801af0a:	b2db      	uxtb	r3, r3
 801af0c:	4619      	mov	r1, r3
 801af0e:	20f4      	movs	r0, #244	@ 0xf4
 801af10:	f000 f93e 	bl	801b190 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 801af14:	89fb      	ldrh	r3, [r7, #14]
 801af16:	b2db      	uxtb	r3, r3
 801af18:	4619      	mov	r1, r3
 801af1a:	20f5      	movs	r0, #245	@ 0xf5
 801af1c:	f000 f938 	bl	801b190 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 801af20:	78fb      	ldrb	r3, [r7, #3]
 801af22:	3301      	adds	r3, #1
 801af24:	b2db      	uxtb	r3, r3
 801af26:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 801af2a:	4619      	mov	r1, r3
 801af2c:	480c      	ldr	r0, [pc, #48]	@ (801af60 <RadioSend+0x1f8>)
 801af2e:	f001 f9ab 	bl	801c288 <SUBGRF_SendPayload>
            break;
 801af32:	e000      	b.n	801af36 <RadioSend+0x1ce>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 801af34:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 801af36:	4b07      	ldr	r3, [pc, #28]	@ (801af54 <RadioSend+0x1ec>)
 801af38:	685b      	ldr	r3, [r3, #4]
 801af3a:	4619      	mov	r1, r3
 801af3c:	4809      	ldr	r0, [pc, #36]	@ (801af64 <RadioSend+0x1fc>)
 801af3e:	f003 fabf 	bl	801e4c0 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 801af42:	4808      	ldr	r0, [pc, #32]	@ (801af64 <RadioSend+0x1fc>)
 801af44:	f003 f9de 	bl	801e304 <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 801af48:	2300      	movs	r3, #0
}
 801af4a:	4618      	mov	r0, r3
 801af4c:	3710      	adds	r7, #16
 801af4e:	46bd      	mov	sp, r7
 801af50:	bd80      	pop	{r7, pc}
 801af52:	bf00      	nop
 801af54:	20001b88 	.word	0x20001b88
 801af58:	20001b96 	.word	0x20001b96
 801af5c:	0801f674 	.word	0x0801f674
 801af60:	20001a84 	.word	0x20001a84
 801af64:	20001be4 	.word	0x20001be4

0801af68 <RadioSleep>:

static void RadioSleep( void )
{
 801af68:	b580      	push	{r7, lr}
 801af6a:	b082      	sub	sp, #8
 801af6c:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 801af6e:	2300      	movs	r3, #0
 801af70:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 801af72:	793b      	ldrb	r3, [r7, #4]
 801af74:	f043 0304 	orr.w	r3, r3, #4
 801af78:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 801af7a:	7938      	ldrb	r0, [r7, #4]
 801af7c:	f001 fa60 	bl	801c440 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 801af80:	2002      	movs	r0, #2
 801af82:	f7e7 fcc3 	bl	800290c <HAL_Delay>
}
 801af86:	bf00      	nop
 801af88:	3708      	adds	r7, #8
 801af8a:	46bd      	mov	sp, r7
 801af8c:	bd80      	pop	{r7, pc}

0801af8e <RadioStandby>:

static void RadioStandby( void )
{
 801af8e:	b580      	push	{r7, lr}
 801af90:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 801af92:	2000      	movs	r0, #0
 801af94:	f001 fa86 	bl	801c4a4 <SUBGRF_SetStandby>
}
 801af98:	bf00      	nop
 801af9a:	bd80      	pop	{r7, pc}

0801af9c <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 801af9c:	b580      	push	{r7, lr}
 801af9e:	b082      	sub	sp, #8
 801afa0:	af00      	add	r7, sp, #0
 801afa2:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 801afa4:	f002 faef 	bl	801d586 <RFW_Is_Init>
 801afa8:	4603      	mov	r3, r0
 801afaa:	2b01      	cmp	r3, #1
 801afac:	d102      	bne.n	801afb4 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 801afae:	f002 fb12 	bl	801d5d6 <RFW_ReceiveInit>
 801afb2:	e007      	b.n	801afc4 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801afb4:	2300      	movs	r3, #0
 801afb6:	2200      	movs	r2, #0
 801afb8:	f240 2162 	movw	r1, #610	@ 0x262
 801afbc:	f240 2062 	movw	r0, #610	@ 0x262
 801afc0:	f001 fc44 	bl	801c84c <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 801afc4:	687b      	ldr	r3, [r7, #4]
 801afc6:	2b00      	cmp	r3, #0
 801afc8:	d006      	beq.n	801afd8 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801afca:	6879      	ldr	r1, [r7, #4]
 801afcc:	4811      	ldr	r0, [pc, #68]	@ (801b014 <RadioRx+0x78>)
 801afce:	f003 fa77 	bl	801e4c0 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801afd2:	4810      	ldr	r0, [pc, #64]	@ (801b014 <RadioRx+0x78>)
 801afd4:	f003 f996 	bl	801e304 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801afd8:	4b0f      	ldr	r3, [pc, #60]	@ (801b018 <RadioRx+0x7c>)
 801afda:	2200      	movs	r2, #0
 801afdc:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801afde:	4b0e      	ldr	r3, [pc, #56]	@ (801b018 <RadioRx+0x7c>)
 801afe0:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 801afe4:	2100      	movs	r1, #0
 801afe6:	4618      	mov	r0, r3
 801afe8:	f002 f8d4 	bl	801d194 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 801afec:	4b0a      	ldr	r3, [pc, #40]	@ (801b018 <RadioRx+0x7c>)
 801afee:	785b      	ldrb	r3, [r3, #1]
 801aff0:	2b00      	cmp	r3, #0
 801aff2:	d004      	beq.n	801affe <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801aff4:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 801aff8:	f001 fa90 	bl	801c51c <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 801affc:	e005      	b.n	801b00a <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 801affe:	4b06      	ldr	r3, [pc, #24]	@ (801b018 <RadioRx+0x7c>)
 801b000:	689b      	ldr	r3, [r3, #8]
 801b002:	019b      	lsls	r3, r3, #6
 801b004:	4618      	mov	r0, r3
 801b006:	f001 fa89 	bl	801c51c <SUBGRF_SetRx>
}
 801b00a:	bf00      	nop
 801b00c:	3708      	adds	r7, #8
 801b00e:	46bd      	mov	sp, r7
 801b010:	bd80      	pop	{r7, pc}
 801b012:	bf00      	nop
 801b014:	20001bfc 	.word	0x20001bfc
 801b018:	20001b88 	.word	0x20001b88

0801b01c <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 801b01c:	b580      	push	{r7, lr}
 801b01e:	b082      	sub	sp, #8
 801b020:	af00      	add	r7, sp, #0
 801b022:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 801b024:	f002 faaf 	bl	801d586 <RFW_Is_Init>
 801b028:	4603      	mov	r3, r0
 801b02a:	2b01      	cmp	r3, #1
 801b02c:	d102      	bne.n	801b034 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 801b02e:	f002 fad2 	bl	801d5d6 <RFW_ReceiveInit>
 801b032:	e007      	b.n	801b044 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801b034:	2300      	movs	r3, #0
 801b036:	2200      	movs	r2, #0
 801b038:	f240 2162 	movw	r1, #610	@ 0x262
 801b03c:	f240 2062 	movw	r0, #610	@ 0x262
 801b040:	f001 fc04 	bl	801c84c <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 801b044:	687b      	ldr	r3, [r7, #4]
 801b046:	2b00      	cmp	r3, #0
 801b048:	d006      	beq.n	801b058 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801b04a:	6879      	ldr	r1, [r7, #4]
 801b04c:	4811      	ldr	r0, [pc, #68]	@ (801b094 <RadioRxBoosted+0x78>)
 801b04e:	f003 fa37 	bl	801e4c0 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801b052:	4810      	ldr	r0, [pc, #64]	@ (801b094 <RadioRxBoosted+0x78>)
 801b054:	f003 f956 	bl	801e304 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801b058:	4b0f      	ldr	r3, [pc, #60]	@ (801b098 <RadioRxBoosted+0x7c>)
 801b05a:	2200      	movs	r2, #0
 801b05c:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801b05e:	4b0e      	ldr	r3, [pc, #56]	@ (801b098 <RadioRxBoosted+0x7c>)
 801b060:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 801b064:	2100      	movs	r1, #0
 801b066:	4618      	mov	r0, r3
 801b068:	f002 f894 	bl	801d194 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 801b06c:	4b0a      	ldr	r3, [pc, #40]	@ (801b098 <RadioRxBoosted+0x7c>)
 801b06e:	785b      	ldrb	r3, [r3, #1]
 801b070:	2b00      	cmp	r3, #0
 801b072:	d004      	beq.n	801b07e <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 801b074:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 801b078:	f001 fa70 	bl	801c55c <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 801b07c:	e005      	b.n	801b08a <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 801b07e:	4b06      	ldr	r3, [pc, #24]	@ (801b098 <RadioRxBoosted+0x7c>)
 801b080:	689b      	ldr	r3, [r3, #8]
 801b082:	019b      	lsls	r3, r3, #6
 801b084:	4618      	mov	r0, r3
 801b086:	f001 fa69 	bl	801c55c <SUBGRF_SetRxBoosted>
}
 801b08a:	bf00      	nop
 801b08c:	3708      	adds	r7, #8
 801b08e:	46bd      	mov	sp, r7
 801b090:	bd80      	pop	{r7, pc}
 801b092:	bf00      	nop
 801b094:	20001bfc 	.word	0x20001bfc
 801b098:	20001b88 	.word	0x20001b88

0801b09c <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801b09c:	b580      	push	{r7, lr}
 801b09e:	b082      	sub	sp, #8
 801b0a0:	af00      	add	r7, sp, #0
 801b0a2:	6078      	str	r0, [r7, #4]
 801b0a4:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 801b0a6:	687b      	ldr	r3, [r7, #4]
 801b0a8:	005a      	lsls	r2, r3, #1
 801b0aa:	683b      	ldr	r3, [r7, #0]
 801b0ac:	4413      	add	r3, r2
 801b0ae:	4a0c      	ldr	r2, [pc, #48]	@ (801b0e0 <RadioSetRxDutyCycle+0x44>)
 801b0b0:	6593      	str	r3, [r2, #88]	@ 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801b0b2:	2300      	movs	r3, #0
 801b0b4:	2200      	movs	r2, #0
 801b0b6:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801b0ba:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 801b0be:	f001 fbc5 	bl	801c84c <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801b0c2:	4b07      	ldr	r3, [pc, #28]	@ (801b0e0 <RadioSetRxDutyCycle+0x44>)
 801b0c4:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 801b0c8:	2100      	movs	r1, #0
 801b0ca:	4618      	mov	r0, r3
 801b0cc:	f002 f862 	bl	801d194 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 801b0d0:	6839      	ldr	r1, [r7, #0]
 801b0d2:	6878      	ldr	r0, [r7, #4]
 801b0d4:	f001 fa66 	bl	801c5a4 <SUBGRF_SetRxDutyCycle>
}
 801b0d8:	bf00      	nop
 801b0da:	3708      	adds	r7, #8
 801b0dc:	46bd      	mov	sp, r7
 801b0de:	bd80      	pop	{r7, pc}
 801b0e0:	20001b88 	.word	0x20001b88

0801b0e4 <RadioStartCad>:

static void RadioStartCad( void )
{
 801b0e4:	b580      	push	{r7, lr}
 801b0e6:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801b0e8:	4b09      	ldr	r3, [pc, #36]	@ (801b110 <RadioStartCad+0x2c>)
 801b0ea:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 801b0ee:	2100      	movs	r1, #0
 801b0f0:	4618      	mov	r0, r3
 801b0f2:	f002 f84f 	bl	801d194 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 801b0f6:	2300      	movs	r3, #0
 801b0f8:	2200      	movs	r2, #0
 801b0fa:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 801b0fe:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 801b102:	f001 fba3 	bl	801c84c <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 801b106:	f001 fa79 	bl	801c5fc <SUBGRF_SetCad>
}
 801b10a:	bf00      	nop
 801b10c:	bd80      	pop	{r7, pc}
 801b10e:	bf00      	nop
 801b110:	20001b88 	.word	0x20001b88

0801b114 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 801b114:	b580      	push	{r7, lr}
 801b116:	b084      	sub	sp, #16
 801b118:	af00      	add	r7, sp, #0
 801b11a:	6078      	str	r0, [r7, #4]
 801b11c:	460b      	mov	r3, r1
 801b11e:	70fb      	strb	r3, [r7, #3]
 801b120:	4613      	mov	r3, r2
 801b122:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 801b124:	883b      	ldrh	r3, [r7, #0]
 801b126:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801b12a:	fb02 f303 	mul.w	r3, r2, r3
 801b12e:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 801b130:	6878      	ldr	r0, [r7, #4]
 801b132:	f001 fbe7 	bl	801c904 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 801b136:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801b13a:	4618      	mov	r0, r3
 801b13c:	f002 f852 	bl	801d1e4 <SUBGRF_SetRfTxPower>
 801b140:	4603      	mov	r3, r0
 801b142:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801b144:	210e      	movs	r1, #14
 801b146:	f640 101f 	movw	r0, #2335	@ 0x91f
 801b14a:	f001 ff2f 	bl	801cfac <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 801b14e:	7afb      	ldrb	r3, [r7, #11]
 801b150:	2101      	movs	r1, #1
 801b152:	4618      	mov	r0, r3
 801b154:	f002 f81e 	bl	801d194 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 801b158:	f001 fa5e 	bl	801c618 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 801b15c:	68f9      	ldr	r1, [r7, #12]
 801b15e:	4805      	ldr	r0, [pc, #20]	@ (801b174 <RadioSetTxContinuousWave+0x60>)
 801b160:	f003 f9ae 	bl	801e4c0 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 801b164:	4803      	ldr	r0, [pc, #12]	@ (801b174 <RadioSetTxContinuousWave+0x60>)
 801b166:	f003 f8cd 	bl	801e304 <UTIL_TIMER_Start>
}
 801b16a:	bf00      	nop
 801b16c:	3710      	adds	r7, #16
 801b16e:	46bd      	mov	sp, r7
 801b170:	bd80      	pop	{r7, pc}
 801b172:	bf00      	nop
 801b174:	20001be4 	.word	0x20001be4

0801b178 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 801b178:	b580      	push	{r7, lr}
 801b17a:	b082      	sub	sp, #8
 801b17c:	af00      	add	r7, sp, #0
 801b17e:	4603      	mov	r3, r0
 801b180:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 801b182:	f001 fe80 	bl	801ce86 <SUBGRF_GetRssiInst>
 801b186:	4603      	mov	r3, r0
}
 801b188:	4618      	mov	r0, r3
 801b18a:	3708      	adds	r7, #8
 801b18c:	46bd      	mov	sp, r7
 801b18e:	bd80      	pop	{r7, pc}

0801b190 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 801b190:	b580      	push	{r7, lr}
 801b192:	b082      	sub	sp, #8
 801b194:	af00      	add	r7, sp, #0
 801b196:	4603      	mov	r3, r0
 801b198:	460a      	mov	r2, r1
 801b19a:	80fb      	strh	r3, [r7, #6]
 801b19c:	4613      	mov	r3, r2
 801b19e:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 801b1a0:	797a      	ldrb	r2, [r7, #5]
 801b1a2:	88fb      	ldrh	r3, [r7, #6]
 801b1a4:	4611      	mov	r1, r2
 801b1a6:	4618      	mov	r0, r3
 801b1a8:	f001 ff00 	bl	801cfac <SUBGRF_WriteRegister>
}
 801b1ac:	bf00      	nop
 801b1ae:	3708      	adds	r7, #8
 801b1b0:	46bd      	mov	sp, r7
 801b1b2:	bd80      	pop	{r7, pc}

0801b1b4 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 801b1b4:	b580      	push	{r7, lr}
 801b1b6:	b082      	sub	sp, #8
 801b1b8:	af00      	add	r7, sp, #0
 801b1ba:	4603      	mov	r3, r0
 801b1bc:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 801b1be:	88fb      	ldrh	r3, [r7, #6]
 801b1c0:	4618      	mov	r0, r3
 801b1c2:	f001 ff07 	bl	801cfd4 <SUBGRF_ReadRegister>
 801b1c6:	4603      	mov	r3, r0
}
 801b1c8:	4618      	mov	r0, r3
 801b1ca:	3708      	adds	r7, #8
 801b1cc:	46bd      	mov	sp, r7
 801b1ce:	bd80      	pop	{r7, pc}

0801b1d0 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801b1d0:	b580      	push	{r7, lr}
 801b1d2:	b082      	sub	sp, #8
 801b1d4:	af00      	add	r7, sp, #0
 801b1d6:	4603      	mov	r3, r0
 801b1d8:	6039      	str	r1, [r7, #0]
 801b1da:	80fb      	strh	r3, [r7, #6]
 801b1dc:	4613      	mov	r3, r2
 801b1de:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 801b1e0:	797b      	ldrb	r3, [r7, #5]
 801b1e2:	b29a      	uxth	r2, r3
 801b1e4:	88fb      	ldrh	r3, [r7, #6]
 801b1e6:	6839      	ldr	r1, [r7, #0]
 801b1e8:	4618      	mov	r0, r3
 801b1ea:	f001 ff07 	bl	801cffc <SUBGRF_WriteRegisters>
}
 801b1ee:	bf00      	nop
 801b1f0:	3708      	adds	r7, #8
 801b1f2:	46bd      	mov	sp, r7
 801b1f4:	bd80      	pop	{r7, pc}

0801b1f6 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801b1f6:	b580      	push	{r7, lr}
 801b1f8:	b082      	sub	sp, #8
 801b1fa:	af00      	add	r7, sp, #0
 801b1fc:	4603      	mov	r3, r0
 801b1fe:	6039      	str	r1, [r7, #0]
 801b200:	80fb      	strh	r3, [r7, #6]
 801b202:	4613      	mov	r3, r2
 801b204:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 801b206:	797b      	ldrb	r3, [r7, #5]
 801b208:	b29a      	uxth	r2, r3
 801b20a:	88fb      	ldrh	r3, [r7, #6]
 801b20c:	6839      	ldr	r1, [r7, #0]
 801b20e:	4618      	mov	r0, r3
 801b210:	f001 ff16 	bl	801d040 <SUBGRF_ReadRegisters>
}
 801b214:	bf00      	nop
 801b216:	3708      	adds	r7, #8
 801b218:	46bd      	mov	sp, r7
 801b21a:	bd80      	pop	{r7, pc}

0801b21c <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 801b21c:	b580      	push	{r7, lr}
 801b21e:	b082      	sub	sp, #8
 801b220:	af00      	add	r7, sp, #0
 801b222:	4603      	mov	r3, r0
 801b224:	460a      	mov	r2, r1
 801b226:	71fb      	strb	r3, [r7, #7]
 801b228:	4613      	mov	r3, r2
 801b22a:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 801b22c:	79fb      	ldrb	r3, [r7, #7]
 801b22e:	2b01      	cmp	r3, #1
 801b230:	d10a      	bne.n	801b248 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 801b232:	4a0e      	ldr	r2, [pc, #56]	@ (801b26c <RadioSetMaxPayloadLength+0x50>)
 801b234:	79bb      	ldrb	r3, [r7, #6]
 801b236:	7013      	strb	r3, [r2, #0]
 801b238:	4b0c      	ldr	r3, [pc, #48]	@ (801b26c <RadioSetMaxPayloadLength+0x50>)
 801b23a:	781a      	ldrb	r2, [r3, #0]
 801b23c:	4b0c      	ldr	r3, [pc, #48]	@ (801b270 <RadioSetMaxPayloadLength+0x54>)
 801b23e:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801b240:	480c      	ldr	r0, [pc, #48]	@ (801b274 <RadioSetMaxPayloadLength+0x58>)
 801b242:	f001 fd6b 	bl	801cd1c <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 801b246:	e00d      	b.n	801b264 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 801b248:	4b09      	ldr	r3, [pc, #36]	@ (801b270 <RadioSetMaxPayloadLength+0x54>)
 801b24a:	7d5b      	ldrb	r3, [r3, #21]
 801b24c:	2b01      	cmp	r3, #1
 801b24e:	d109      	bne.n	801b264 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 801b250:	4a06      	ldr	r2, [pc, #24]	@ (801b26c <RadioSetMaxPayloadLength+0x50>)
 801b252:	79bb      	ldrb	r3, [r7, #6]
 801b254:	7013      	strb	r3, [r2, #0]
 801b256:	4b05      	ldr	r3, [pc, #20]	@ (801b26c <RadioSetMaxPayloadLength+0x50>)
 801b258:	781a      	ldrb	r2, [r3, #0]
 801b25a:	4b05      	ldr	r3, [pc, #20]	@ (801b270 <RadioSetMaxPayloadLength+0x54>)
 801b25c:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801b25e:	4805      	ldr	r0, [pc, #20]	@ (801b274 <RadioSetMaxPayloadLength+0x58>)
 801b260:	f001 fd5c 	bl	801cd1c <SUBGRF_SetPacketParams>
}
 801b264:	bf00      	nop
 801b266:	3708      	adds	r7, #8
 801b268:	46bd      	mov	sp, r7
 801b26a:	bd80      	pop	{r7, pc}
 801b26c:	20000138 	.word	0x20000138
 801b270:	20001b88 	.word	0x20001b88
 801b274:	20001b96 	.word	0x20001b96

0801b278 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 801b278:	b580      	push	{r7, lr}
 801b27a:	b082      	sub	sp, #8
 801b27c:	af00      	add	r7, sp, #0
 801b27e:	4603      	mov	r3, r0
 801b280:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 801b282:	4a13      	ldr	r2, [pc, #76]	@ (801b2d0 <RadioSetPublicNetwork+0x58>)
 801b284:	79fb      	ldrb	r3, [r7, #7]
 801b286:	7313      	strb	r3, [r2, #12]
 801b288:	4b11      	ldr	r3, [pc, #68]	@ (801b2d0 <RadioSetPublicNetwork+0x58>)
 801b28a:	7b1a      	ldrb	r2, [r3, #12]
 801b28c:	4b10      	ldr	r3, [pc, #64]	@ (801b2d0 <RadioSetPublicNetwork+0x58>)
 801b28e:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 801b290:	2001      	movs	r0, #1
 801b292:	f7ff f813 	bl	801a2bc <RadioSetModem>
    if( enable == true )
 801b296:	79fb      	ldrb	r3, [r7, #7]
 801b298:	2b00      	cmp	r3, #0
 801b29a:	d00a      	beq.n	801b2b2 <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 801b29c:	2134      	movs	r1, #52	@ 0x34
 801b29e:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 801b2a2:	f001 fe83 	bl	801cfac <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 801b2a6:	2144      	movs	r1, #68	@ 0x44
 801b2a8:	f240 7041 	movw	r0, #1857	@ 0x741
 801b2ac:	f001 fe7e 	bl	801cfac <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 801b2b0:	e009      	b.n	801b2c6 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 801b2b2:	2114      	movs	r1, #20
 801b2b4:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 801b2b8:	f001 fe78 	bl	801cfac <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 801b2bc:	2124      	movs	r1, #36	@ 0x24
 801b2be:	f240 7041 	movw	r0, #1857	@ 0x741
 801b2c2:	f001 fe73 	bl	801cfac <SUBGRF_WriteRegister>
}
 801b2c6:	bf00      	nop
 801b2c8:	3708      	adds	r7, #8
 801b2ca:	46bd      	mov	sp, r7
 801b2cc:	bd80      	pop	{r7, pc}
 801b2ce:	bf00      	nop
 801b2d0:	20001b88 	.word	0x20001b88

0801b2d4 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 801b2d4:	b580      	push	{r7, lr}
 801b2d6:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 801b2d8:	f001 ffb8 	bl	801d24c <SUBGRF_GetRadioWakeUpTime>
 801b2dc:	4603      	mov	r3, r0
 801b2de:	3303      	adds	r3, #3
}
 801b2e0:	4618      	mov	r0, r3
 801b2e2:	bd80      	pop	{r7, pc}

0801b2e4 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 801b2e4:	b580      	push	{r7, lr}
 801b2e6:	b082      	sub	sp, #8
 801b2e8:	af00      	add	r7, sp, #0
 801b2ea:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 801b2ec:	f000 f80e 	bl	801b30c <RadioOnTxTimeoutProcess>
}
 801b2f0:	bf00      	nop
 801b2f2:	3708      	adds	r7, #8
 801b2f4:	46bd      	mov	sp, r7
 801b2f6:	bd80      	pop	{r7, pc}

0801b2f8 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 801b2f8:	b580      	push	{r7, lr}
 801b2fa:	b082      	sub	sp, #8
 801b2fc:	af00      	add	r7, sp, #0
 801b2fe:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 801b300:	f000 f818 	bl	801b334 <RadioOnRxTimeoutProcess>
}
 801b304:	bf00      	nop
 801b306:	3708      	adds	r7, #8
 801b308:	46bd      	mov	sp, r7
 801b30a:	bd80      	pop	{r7, pc}

0801b30c <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 801b30c:	b580      	push	{r7, lr}
 801b30e:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801b310:	4b07      	ldr	r3, [pc, #28]	@ (801b330 <RadioOnTxTimeoutProcess+0x24>)
 801b312:	681b      	ldr	r3, [r3, #0]
 801b314:	2b00      	cmp	r3, #0
 801b316:	d008      	beq.n	801b32a <RadioOnTxTimeoutProcess+0x1e>
 801b318:	4b05      	ldr	r3, [pc, #20]	@ (801b330 <RadioOnTxTimeoutProcess+0x24>)
 801b31a:	681b      	ldr	r3, [r3, #0]
 801b31c:	685b      	ldr	r3, [r3, #4]
 801b31e:	2b00      	cmp	r3, #0
 801b320:	d003      	beq.n	801b32a <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 801b322:	4b03      	ldr	r3, [pc, #12]	@ (801b330 <RadioOnTxTimeoutProcess+0x24>)
 801b324:	681b      	ldr	r3, [r3, #0]
 801b326:	685b      	ldr	r3, [r3, #4]
 801b328:	4798      	blx	r3
    }
}
 801b32a:	bf00      	nop
 801b32c:	bd80      	pop	{r7, pc}
 801b32e:	bf00      	nop
 801b330:	20001b84 	.word	0x20001b84

0801b334 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 801b334:	b580      	push	{r7, lr}
 801b336:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801b338:	4b07      	ldr	r3, [pc, #28]	@ (801b358 <RadioOnRxTimeoutProcess+0x24>)
 801b33a:	681b      	ldr	r3, [r3, #0]
 801b33c:	2b00      	cmp	r3, #0
 801b33e:	d008      	beq.n	801b352 <RadioOnRxTimeoutProcess+0x1e>
 801b340:	4b05      	ldr	r3, [pc, #20]	@ (801b358 <RadioOnRxTimeoutProcess+0x24>)
 801b342:	681b      	ldr	r3, [r3, #0]
 801b344:	68db      	ldr	r3, [r3, #12]
 801b346:	2b00      	cmp	r3, #0
 801b348:	d003      	beq.n	801b352 <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 801b34a:	4b03      	ldr	r3, [pc, #12]	@ (801b358 <RadioOnRxTimeoutProcess+0x24>)
 801b34c:	681b      	ldr	r3, [r3, #0]
 801b34e:	68db      	ldr	r3, [r3, #12]
 801b350:	4798      	blx	r3
    }
}
 801b352:	bf00      	nop
 801b354:	bd80      	pop	{r7, pc}
 801b356:	bf00      	nop
 801b358:	20001b84 	.word	0x20001b84

0801b35c <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 801b35c:	b580      	push	{r7, lr}
 801b35e:	b082      	sub	sp, #8
 801b360:	af00      	add	r7, sp, #0
 801b362:	4603      	mov	r3, r0
 801b364:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 801b366:	4a05      	ldr	r2, [pc, #20]	@ (801b37c <RadioOnDioIrq+0x20>)
 801b368:	88fb      	ldrh	r3, [r7, #6]
 801b36a:	f8a2 3054 	strh.w	r3, [r2, #84]	@ 0x54

    RADIO_IRQ_PROCESS();
 801b36e:	f000 f807 	bl	801b380 <RadioIrqProcess>
}
 801b372:	bf00      	nop
 801b374:	3708      	adds	r7, #8
 801b376:	46bd      	mov	sp, r7
 801b378:	bd80      	pop	{r7, pc}
 801b37a:	bf00      	nop
 801b37c:	20001b88 	.word	0x20001b88

0801b380 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 801b380:	b5b0      	push	{r4, r5, r7, lr}
 801b382:	b082      	sub	sp, #8
 801b384:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 801b386:	2300      	movs	r3, #0
 801b388:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 801b38a:	2300      	movs	r3, #0
 801b38c:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 801b38e:	4ba8      	ldr	r3, [pc, #672]	@ (801b630 <RadioIrqProcess+0x2b0>)
 801b390:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 801b394:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801b398:	f000 810d 	beq.w	801b5b6 <RadioIrqProcess+0x236>
 801b39c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801b3a0:	f300 81e8 	bgt.w	801b774 <RadioIrqProcess+0x3f4>
 801b3a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801b3a8:	f000 80f1 	beq.w	801b58e <RadioIrqProcess+0x20e>
 801b3ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801b3b0:	f300 81e0 	bgt.w	801b774 <RadioIrqProcess+0x3f4>
 801b3b4:	2b80      	cmp	r3, #128	@ 0x80
 801b3b6:	f000 80d6 	beq.w	801b566 <RadioIrqProcess+0x1e6>
 801b3ba:	2b80      	cmp	r3, #128	@ 0x80
 801b3bc:	f300 81da 	bgt.w	801b774 <RadioIrqProcess+0x3f4>
 801b3c0:	2b20      	cmp	r3, #32
 801b3c2:	dc49      	bgt.n	801b458 <RadioIrqProcess+0xd8>
 801b3c4:	2b00      	cmp	r3, #0
 801b3c6:	f340 81d5 	ble.w	801b774 <RadioIrqProcess+0x3f4>
 801b3ca:	3b01      	subs	r3, #1
 801b3cc:	2b1f      	cmp	r3, #31
 801b3ce:	f200 81d1 	bhi.w	801b774 <RadioIrqProcess+0x3f4>
 801b3d2:	a201      	add	r2, pc, #4	@ (adr r2, 801b3d8 <RadioIrqProcess+0x58>)
 801b3d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b3d8:	0801b461 	.word	0x0801b461
 801b3dc:	0801b49b 	.word	0x0801b49b
 801b3e0:	0801b775 	.word	0x0801b775
 801b3e4:	0801b651 	.word	0x0801b651
 801b3e8:	0801b775 	.word	0x0801b775
 801b3ec:	0801b775 	.word	0x0801b775
 801b3f0:	0801b775 	.word	0x0801b775
 801b3f4:	0801b6cd 	.word	0x0801b6cd
 801b3f8:	0801b775 	.word	0x0801b775
 801b3fc:	0801b775 	.word	0x0801b775
 801b400:	0801b775 	.word	0x0801b775
 801b404:	0801b775 	.word	0x0801b775
 801b408:	0801b775 	.word	0x0801b775
 801b40c:	0801b775 	.word	0x0801b775
 801b410:	0801b775 	.word	0x0801b775
 801b414:	0801b6e9 	.word	0x0801b6e9
 801b418:	0801b775 	.word	0x0801b775
 801b41c:	0801b775 	.word	0x0801b775
 801b420:	0801b775 	.word	0x0801b775
 801b424:	0801b775 	.word	0x0801b775
 801b428:	0801b775 	.word	0x0801b775
 801b42c:	0801b775 	.word	0x0801b775
 801b430:	0801b775 	.word	0x0801b775
 801b434:	0801b775 	.word	0x0801b775
 801b438:	0801b775 	.word	0x0801b775
 801b43c:	0801b775 	.word	0x0801b775
 801b440:	0801b775 	.word	0x0801b775
 801b444:	0801b775 	.word	0x0801b775
 801b448:	0801b775 	.word	0x0801b775
 801b44c:	0801b775 	.word	0x0801b775
 801b450:	0801b775 	.word	0x0801b775
 801b454:	0801b6f7 	.word	0x0801b6f7
 801b458:	2b40      	cmp	r3, #64	@ 0x40
 801b45a:	f000 816d 	beq.w	801b738 <RadioIrqProcess+0x3b8>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 801b45e:	e189      	b.n	801b774 <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 801b460:	4874      	ldr	r0, [pc, #464]	@ (801b634 <RadioIrqProcess+0x2b4>)
 801b462:	f002 ffbd 	bl	801e3e0 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 801b466:	2000      	movs	r0, #0
 801b468:	f001 f81c 	bl	801c4a4 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 801b46c:	f002 f892 	bl	801d594 <RFW_Is_LongPacketModeEnabled>
 801b470:	4603      	mov	r3, r0
 801b472:	2b01      	cmp	r3, #1
 801b474:	d101      	bne.n	801b47a <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 801b476:	f002 f8b6 	bl	801d5e6 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 801b47a:	4b6f      	ldr	r3, [pc, #444]	@ (801b638 <RadioIrqProcess+0x2b8>)
 801b47c:	681b      	ldr	r3, [r3, #0]
 801b47e:	2b00      	cmp	r3, #0
 801b480:	f000 817a 	beq.w	801b778 <RadioIrqProcess+0x3f8>
 801b484:	4b6c      	ldr	r3, [pc, #432]	@ (801b638 <RadioIrqProcess+0x2b8>)
 801b486:	681b      	ldr	r3, [r3, #0]
 801b488:	681b      	ldr	r3, [r3, #0]
 801b48a:	2b00      	cmp	r3, #0
 801b48c:	f000 8174 	beq.w	801b778 <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 801b490:	4b69      	ldr	r3, [pc, #420]	@ (801b638 <RadioIrqProcess+0x2b8>)
 801b492:	681b      	ldr	r3, [r3, #0]
 801b494:	681b      	ldr	r3, [r3, #0]
 801b496:	4798      	blx	r3
        break;
 801b498:	e16e      	b.n	801b778 <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 801b49a:	4868      	ldr	r0, [pc, #416]	@ (801b63c <RadioIrqProcess+0x2bc>)
 801b49c:	f002 ffa0 	bl	801e3e0 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801b4a0:	4b63      	ldr	r3, [pc, #396]	@ (801b630 <RadioIrqProcess+0x2b0>)
 801b4a2:	785b      	ldrb	r3, [r3, #1]
 801b4a4:	f083 0301 	eor.w	r3, r3, #1
 801b4a8:	b2db      	uxtb	r3, r3
 801b4aa:	2b00      	cmp	r3, #0
 801b4ac:	d014      	beq.n	801b4d8 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 801b4ae:	2000      	movs	r0, #0
 801b4b0:	f000 fff8 	bl	801c4a4 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 801b4b4:	2100      	movs	r1, #0
 801b4b6:	f640 1002 	movw	r0, #2306	@ 0x902
 801b4ba:	f001 fd77 	bl	801cfac <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 801b4be:	f640 1044 	movw	r0, #2372	@ 0x944
 801b4c2:	f001 fd87 	bl	801cfd4 <SUBGRF_ReadRegister>
 801b4c6:	4603      	mov	r3, r0
 801b4c8:	f043 0302 	orr.w	r3, r3, #2
 801b4cc:	b2db      	uxtb	r3, r3
 801b4ce:	4619      	mov	r1, r3
 801b4d0:	f640 1044 	movw	r0, #2372	@ 0x944
 801b4d4:	f001 fd6a 	bl	801cfac <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 801b4d8:	1dfb      	adds	r3, r7, #7
 801b4da:	22ff      	movs	r2, #255	@ 0xff
 801b4dc:	4619      	mov	r1, r3
 801b4de:	4858      	ldr	r0, [pc, #352]	@ (801b640 <RadioIrqProcess+0x2c0>)
 801b4e0:	f000 feb0 	bl	801c244 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 801b4e4:	4857      	ldr	r0, [pc, #348]	@ (801b644 <RadioIrqProcess+0x2c4>)
 801b4e6:	f001 fd0f 	bl	801cf08 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 801b4ea:	4b53      	ldr	r3, [pc, #332]	@ (801b638 <RadioIrqProcess+0x2b8>)
 801b4ec:	681b      	ldr	r3, [r3, #0]
 801b4ee:	2b00      	cmp	r3, #0
 801b4f0:	f000 8144 	beq.w	801b77c <RadioIrqProcess+0x3fc>
 801b4f4:	4b50      	ldr	r3, [pc, #320]	@ (801b638 <RadioIrqProcess+0x2b8>)
 801b4f6:	681b      	ldr	r3, [r3, #0]
 801b4f8:	689b      	ldr	r3, [r3, #8]
 801b4fa:	2b00      	cmp	r3, #0
 801b4fc:	f000 813e 	beq.w	801b77c <RadioIrqProcess+0x3fc>
            switch( SubgRf.PacketStatus.packetType )
 801b500:	4b4b      	ldr	r3, [pc, #300]	@ (801b630 <RadioIrqProcess+0x2b0>)
 801b502:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 801b506:	2b01      	cmp	r3, #1
 801b508:	d10e      	bne.n	801b528 <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 801b50a:	4b4b      	ldr	r3, [pc, #300]	@ (801b638 <RadioIrqProcess+0x2b8>)
 801b50c:	681b      	ldr	r3, [r3, #0]
 801b50e:	689c      	ldr	r4, [r3, #8]
 801b510:	79fb      	ldrb	r3, [r7, #7]
 801b512:	4619      	mov	r1, r3
 801b514:	4b46      	ldr	r3, [pc, #280]	@ (801b630 <RadioIrqProcess+0x2b0>)
 801b516:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 801b51a:	461a      	mov	r2, r3
 801b51c:	4b44      	ldr	r3, [pc, #272]	@ (801b630 <RadioIrqProcess+0x2b0>)
 801b51e:	f993 3031 	ldrsb.w	r3, [r3, #49]	@ 0x31
 801b522:	4847      	ldr	r0, [pc, #284]	@ (801b640 <RadioIrqProcess+0x2c0>)
 801b524:	47a0      	blx	r4
                break;
 801b526:	e01d      	b.n	801b564 <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 801b528:	4b41      	ldr	r3, [pc, #260]	@ (801b630 <RadioIrqProcess+0x2b0>)
 801b52a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801b52c:	463a      	mov	r2, r7
 801b52e:	4611      	mov	r1, r2
 801b530:	4618      	mov	r0, r3
 801b532:	f001 ff7d 	bl	801d430 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 801b536:	4b40      	ldr	r3, [pc, #256]	@ (801b638 <RadioIrqProcess+0x2b8>)
 801b538:	681b      	ldr	r3, [r3, #0]
 801b53a:	689c      	ldr	r4, [r3, #8]
 801b53c:	79fb      	ldrb	r3, [r7, #7]
 801b53e:	4619      	mov	r1, r3
 801b540:	4b3b      	ldr	r3, [pc, #236]	@ (801b630 <RadioIrqProcess+0x2b0>)
 801b542:	f993 3029 	ldrsb.w	r3, [r3, #41]	@ 0x29
 801b546:	4618      	mov	r0, r3
 801b548:	683b      	ldr	r3, [r7, #0]
 801b54a:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 801b54e:	4a3e      	ldr	r2, [pc, #248]	@ (801b648 <RadioIrqProcess+0x2c8>)
 801b550:	fb82 5203 	smull	r5, r2, r2, r3
 801b554:	1192      	asrs	r2, r2, #6
 801b556:	17db      	asrs	r3, r3, #31
 801b558:	1ad3      	subs	r3, r2, r3
 801b55a:	b25b      	sxtb	r3, r3
 801b55c:	4602      	mov	r2, r0
 801b55e:	4838      	ldr	r0, [pc, #224]	@ (801b640 <RadioIrqProcess+0x2c0>)
 801b560:	47a0      	blx	r4
                break;
 801b562:	bf00      	nop
        break;
 801b564:	e10a      	b.n	801b77c <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 801b566:	2000      	movs	r0, #0
 801b568:	f000 ff9c 	bl	801c4a4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801b56c:	4b32      	ldr	r3, [pc, #200]	@ (801b638 <RadioIrqProcess+0x2b8>)
 801b56e:	681b      	ldr	r3, [r3, #0]
 801b570:	2b00      	cmp	r3, #0
 801b572:	f000 8105 	beq.w	801b780 <RadioIrqProcess+0x400>
 801b576:	4b30      	ldr	r3, [pc, #192]	@ (801b638 <RadioIrqProcess+0x2b8>)
 801b578:	681b      	ldr	r3, [r3, #0]
 801b57a:	699b      	ldr	r3, [r3, #24]
 801b57c:	2b00      	cmp	r3, #0
 801b57e:	f000 80ff 	beq.w	801b780 <RadioIrqProcess+0x400>
            RadioEvents->CadDone( false );
 801b582:	4b2d      	ldr	r3, [pc, #180]	@ (801b638 <RadioIrqProcess+0x2b8>)
 801b584:	681b      	ldr	r3, [r3, #0]
 801b586:	699b      	ldr	r3, [r3, #24]
 801b588:	2000      	movs	r0, #0
 801b58a:	4798      	blx	r3
        break;
 801b58c:	e0f8      	b.n	801b780 <RadioIrqProcess+0x400>
        SUBGRF_SetStandby( STDBY_RC );
 801b58e:	2000      	movs	r0, #0
 801b590:	f000 ff88 	bl	801c4a4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801b594:	4b28      	ldr	r3, [pc, #160]	@ (801b638 <RadioIrqProcess+0x2b8>)
 801b596:	681b      	ldr	r3, [r3, #0]
 801b598:	2b00      	cmp	r3, #0
 801b59a:	f000 80f3 	beq.w	801b784 <RadioIrqProcess+0x404>
 801b59e:	4b26      	ldr	r3, [pc, #152]	@ (801b638 <RadioIrqProcess+0x2b8>)
 801b5a0:	681b      	ldr	r3, [r3, #0]
 801b5a2:	699b      	ldr	r3, [r3, #24]
 801b5a4:	2b00      	cmp	r3, #0
 801b5a6:	f000 80ed 	beq.w	801b784 <RadioIrqProcess+0x404>
            RadioEvents->CadDone( true );
 801b5aa:	4b23      	ldr	r3, [pc, #140]	@ (801b638 <RadioIrqProcess+0x2b8>)
 801b5ac:	681b      	ldr	r3, [r3, #0]
 801b5ae:	699b      	ldr	r3, [r3, #24]
 801b5b0:	2001      	movs	r0, #1
 801b5b2:	4798      	blx	r3
        break;
 801b5b4:	e0e6      	b.n	801b784 <RadioIrqProcess+0x404>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 801b5b6:	4b25      	ldr	r3, [pc, #148]	@ (801b64c <RadioIrqProcess+0x2cc>)
 801b5b8:	2201      	movs	r2, #1
 801b5ba:	2100      	movs	r1, #0
 801b5bc:	2002      	movs	r0, #2
 801b5be:	f003 f919 	bl	801e7f4 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 801b5c2:	f000 fe25 	bl	801c210 <SUBGRF_GetOperatingMode>
 801b5c6:	4603      	mov	r3, r0
 801b5c8:	2b04      	cmp	r3, #4
 801b5ca:	d115      	bne.n	801b5f8 <RadioIrqProcess+0x278>
            TimerStop( &TxTimeoutTimer );
 801b5cc:	4819      	ldr	r0, [pc, #100]	@ (801b634 <RadioIrqProcess+0x2b4>)
 801b5ce:	f002 ff07 	bl	801e3e0 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801b5d2:	2000      	movs	r0, #0
 801b5d4:	f000 ff66 	bl	801c4a4 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801b5d8:	4b17      	ldr	r3, [pc, #92]	@ (801b638 <RadioIrqProcess+0x2b8>)
 801b5da:	681b      	ldr	r3, [r3, #0]
 801b5dc:	2b00      	cmp	r3, #0
 801b5de:	f000 80d3 	beq.w	801b788 <RadioIrqProcess+0x408>
 801b5e2:	4b15      	ldr	r3, [pc, #84]	@ (801b638 <RadioIrqProcess+0x2b8>)
 801b5e4:	681b      	ldr	r3, [r3, #0]
 801b5e6:	685b      	ldr	r3, [r3, #4]
 801b5e8:	2b00      	cmp	r3, #0
 801b5ea:	f000 80cd 	beq.w	801b788 <RadioIrqProcess+0x408>
                RadioEvents->TxTimeout( );
 801b5ee:	4b12      	ldr	r3, [pc, #72]	@ (801b638 <RadioIrqProcess+0x2b8>)
 801b5f0:	681b      	ldr	r3, [r3, #0]
 801b5f2:	685b      	ldr	r3, [r3, #4]
 801b5f4:	4798      	blx	r3
        break;
 801b5f6:	e0c7      	b.n	801b788 <RadioIrqProcess+0x408>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 801b5f8:	f000 fe0a 	bl	801c210 <SUBGRF_GetOperatingMode>
 801b5fc:	4603      	mov	r3, r0
 801b5fe:	2b05      	cmp	r3, #5
 801b600:	f040 80c2 	bne.w	801b788 <RadioIrqProcess+0x408>
            TimerStop( &RxTimeoutTimer );
 801b604:	480d      	ldr	r0, [pc, #52]	@ (801b63c <RadioIrqProcess+0x2bc>)
 801b606:	f002 feeb 	bl	801e3e0 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801b60a:	2000      	movs	r0, #0
 801b60c:	f000 ff4a 	bl	801c4a4 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801b610:	4b09      	ldr	r3, [pc, #36]	@ (801b638 <RadioIrqProcess+0x2b8>)
 801b612:	681b      	ldr	r3, [r3, #0]
 801b614:	2b00      	cmp	r3, #0
 801b616:	f000 80b7 	beq.w	801b788 <RadioIrqProcess+0x408>
 801b61a:	4b07      	ldr	r3, [pc, #28]	@ (801b638 <RadioIrqProcess+0x2b8>)
 801b61c:	681b      	ldr	r3, [r3, #0]
 801b61e:	68db      	ldr	r3, [r3, #12]
 801b620:	2b00      	cmp	r3, #0
 801b622:	f000 80b1 	beq.w	801b788 <RadioIrqProcess+0x408>
                RadioEvents->RxTimeout( );
 801b626:	4b04      	ldr	r3, [pc, #16]	@ (801b638 <RadioIrqProcess+0x2b8>)
 801b628:	681b      	ldr	r3, [r3, #0]
 801b62a:	68db      	ldr	r3, [r3, #12]
 801b62c:	4798      	blx	r3
        break;
 801b62e:	e0ab      	b.n	801b788 <RadioIrqProcess+0x408>
 801b630:	20001b88 	.word	0x20001b88
 801b634:	20001be4 	.word	0x20001be4
 801b638:	20001b84 	.word	0x20001b84
 801b63c:	20001bfc 	.word	0x20001bfc
 801b640:	20001a84 	.word	0x20001a84
 801b644:	20001bac 	.word	0x20001bac
 801b648:	10624dd3 	.word	0x10624dd3
 801b64c:	0801f68c 	.word	0x0801f68c
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 801b650:	4b54      	ldr	r3, [pc, #336]	@ (801b7a4 <RadioIrqProcess+0x424>)
 801b652:	2201      	movs	r2, #1
 801b654:	2100      	movs	r1, #0
 801b656:	2002      	movs	r0, #2
 801b658:	f003 f8cc 	bl	801e7f4 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 801b65c:	4b52      	ldr	r3, [pc, #328]	@ (801b7a8 <RadioIrqProcess+0x428>)
 801b65e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801b660:	2b00      	cmp	r3, #0
 801b662:	f000 8093 	beq.w	801b78c <RadioIrqProcess+0x40c>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 801b666:	4a51      	ldr	r2, [pc, #324]	@ (801b7ac <RadioIrqProcess+0x42c>)
 801b668:	4b4f      	ldr	r3, [pc, #316]	@ (801b7a8 <RadioIrqProcess+0x428>)
 801b66a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801b66c:	0c1b      	lsrs	r3, r3, #16
 801b66e:	b2db      	uxtb	r3, r3
 801b670:	4619      	mov	r1, r3
 801b672:	f640 1003 	movw	r0, #2307	@ 0x903
 801b676:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 801b678:	4a4c      	ldr	r2, [pc, #304]	@ (801b7ac <RadioIrqProcess+0x42c>)
 801b67a:	4b4b      	ldr	r3, [pc, #300]	@ (801b7a8 <RadioIrqProcess+0x428>)
 801b67c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801b67e:	0a1b      	lsrs	r3, r3, #8
 801b680:	b2db      	uxtb	r3, r3
 801b682:	4619      	mov	r1, r3
 801b684:	f640 1004 	movw	r0, #2308	@ 0x904
 801b688:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 801b68a:	4a48      	ldr	r2, [pc, #288]	@ (801b7ac <RadioIrqProcess+0x42c>)
 801b68c:	4b46      	ldr	r3, [pc, #280]	@ (801b7a8 <RadioIrqProcess+0x428>)
 801b68e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801b690:	b2db      	uxtb	r3, r3
 801b692:	4619      	mov	r1, r3
 801b694:	f640 1005 	movw	r0, #2309	@ 0x905
 801b698:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 801b69a:	4c44      	ldr	r4, [pc, #272]	@ (801b7ac <RadioIrqProcess+0x42c>)
 801b69c:	4b44      	ldr	r3, [pc, #272]	@ (801b7b0 <RadioIrqProcess+0x430>)
 801b69e:	f640 1002 	movw	r0, #2306	@ 0x902
 801b6a2:	4798      	blx	r3
 801b6a4:	4603      	mov	r3, r0
 801b6a6:	f043 0301 	orr.w	r3, r3, #1
 801b6aa:	b2db      	uxtb	r3, r3
 801b6ac:	4619      	mov	r1, r3
 801b6ae:	f640 1002 	movw	r0, #2306	@ 0x902
 801b6b2:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 801b6b4:	4b3c      	ldr	r3, [pc, #240]	@ (801b7a8 <RadioIrqProcess+0x428>)
 801b6b6:	2200      	movs	r2, #0
 801b6b8:	659a      	str	r2, [r3, #88]	@ 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801b6ba:	2300      	movs	r3, #0
 801b6bc:	2200      	movs	r2, #0
 801b6be:	f240 2162 	movw	r1, #610	@ 0x262
 801b6c2:	f240 2062 	movw	r0, #610	@ 0x262
 801b6c6:	f001 f8c1 	bl	801c84c <SUBGRF_SetDioIrqParams>
        break;
 801b6ca:	e05f      	b.n	801b78c <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 801b6cc:	4b39      	ldr	r3, [pc, #228]	@ (801b7b4 <RadioIrqProcess+0x434>)
 801b6ce:	2201      	movs	r2, #1
 801b6d0:	2100      	movs	r1, #0
 801b6d2:	2002      	movs	r0, #2
 801b6d4:	f003 f88e 	bl	801e7f4 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 801b6d8:	f001 ff55 	bl	801d586 <RFW_Is_Init>
 801b6dc:	4603      	mov	r3, r0
 801b6de:	2b01      	cmp	r3, #1
 801b6e0:	d156      	bne.n	801b790 <RadioIrqProcess+0x410>
            RFW_ReceivePayload( );
 801b6e2:	f001 ff86 	bl	801d5f2 <RFW_ReceivePayload>
        break;
 801b6e6:	e053      	b.n	801b790 <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 801b6e8:	4b33      	ldr	r3, [pc, #204]	@ (801b7b8 <RadioIrqProcess+0x438>)
 801b6ea:	2201      	movs	r2, #1
 801b6ec:	2100      	movs	r1, #0
 801b6ee:	2002      	movs	r0, #2
 801b6f0:	f003 f880 	bl	801e7f4 <UTIL_ADV_TRACE_COND_FSend>
        break;
 801b6f4:	e051      	b.n	801b79a <RadioIrqProcess+0x41a>
        TimerStop( &RxTimeoutTimer );
 801b6f6:	4831      	ldr	r0, [pc, #196]	@ (801b7bc <RadioIrqProcess+0x43c>)
 801b6f8:	f002 fe72 	bl	801e3e0 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801b6fc:	4b2a      	ldr	r3, [pc, #168]	@ (801b7a8 <RadioIrqProcess+0x428>)
 801b6fe:	785b      	ldrb	r3, [r3, #1]
 801b700:	f083 0301 	eor.w	r3, r3, #1
 801b704:	b2db      	uxtb	r3, r3
 801b706:	2b00      	cmp	r3, #0
 801b708:	d002      	beq.n	801b710 <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 801b70a:	2000      	movs	r0, #0
 801b70c:	f000 feca 	bl	801c4a4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801b710:	4b2b      	ldr	r3, [pc, #172]	@ (801b7c0 <RadioIrqProcess+0x440>)
 801b712:	681b      	ldr	r3, [r3, #0]
 801b714:	2b00      	cmp	r3, #0
 801b716:	d03d      	beq.n	801b794 <RadioIrqProcess+0x414>
 801b718:	4b29      	ldr	r3, [pc, #164]	@ (801b7c0 <RadioIrqProcess+0x440>)
 801b71a:	681b      	ldr	r3, [r3, #0]
 801b71c:	68db      	ldr	r3, [r3, #12]
 801b71e:	2b00      	cmp	r3, #0
 801b720:	d038      	beq.n	801b794 <RadioIrqProcess+0x414>
            RadioEvents->RxTimeout( );
 801b722:	4b27      	ldr	r3, [pc, #156]	@ (801b7c0 <RadioIrqProcess+0x440>)
 801b724:	681b      	ldr	r3, [r3, #0]
 801b726:	68db      	ldr	r3, [r3, #12]
 801b728:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 801b72a:	4b26      	ldr	r3, [pc, #152]	@ (801b7c4 <RadioIrqProcess+0x444>)
 801b72c:	2201      	movs	r2, #1
 801b72e:	2100      	movs	r1, #0
 801b730:	2002      	movs	r0, #2
 801b732:	f003 f85f 	bl	801e7f4 <UTIL_ADV_TRACE_COND_FSend>
        break;
 801b736:	e02d      	b.n	801b794 <RadioIrqProcess+0x414>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 801b738:	4b23      	ldr	r3, [pc, #140]	@ (801b7c8 <RadioIrqProcess+0x448>)
 801b73a:	2201      	movs	r2, #1
 801b73c:	2100      	movs	r1, #0
 801b73e:	2002      	movs	r0, #2
 801b740:	f003 f858 	bl	801e7f4 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 801b744:	4b18      	ldr	r3, [pc, #96]	@ (801b7a8 <RadioIrqProcess+0x428>)
 801b746:	785b      	ldrb	r3, [r3, #1]
 801b748:	f083 0301 	eor.w	r3, r3, #1
 801b74c:	b2db      	uxtb	r3, r3
 801b74e:	2b00      	cmp	r3, #0
 801b750:	d002      	beq.n	801b758 <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 801b752:	2000      	movs	r0, #0
 801b754:	f000 fea6 	bl	801c4a4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 801b758:	4b19      	ldr	r3, [pc, #100]	@ (801b7c0 <RadioIrqProcess+0x440>)
 801b75a:	681b      	ldr	r3, [r3, #0]
 801b75c:	2b00      	cmp	r3, #0
 801b75e:	d01b      	beq.n	801b798 <RadioIrqProcess+0x418>
 801b760:	4b17      	ldr	r3, [pc, #92]	@ (801b7c0 <RadioIrqProcess+0x440>)
 801b762:	681b      	ldr	r3, [r3, #0]
 801b764:	691b      	ldr	r3, [r3, #16]
 801b766:	2b00      	cmp	r3, #0
 801b768:	d016      	beq.n	801b798 <RadioIrqProcess+0x418>
            RadioEvents->RxError( );
 801b76a:	4b15      	ldr	r3, [pc, #84]	@ (801b7c0 <RadioIrqProcess+0x440>)
 801b76c:	681b      	ldr	r3, [r3, #0]
 801b76e:	691b      	ldr	r3, [r3, #16]
 801b770:	4798      	blx	r3
        break;
 801b772:	e011      	b.n	801b798 <RadioIrqProcess+0x418>
        break;
 801b774:	bf00      	nop
 801b776:	e010      	b.n	801b79a <RadioIrqProcess+0x41a>
        break;
 801b778:	bf00      	nop
 801b77a:	e00e      	b.n	801b79a <RadioIrqProcess+0x41a>
        break;
 801b77c:	bf00      	nop
 801b77e:	e00c      	b.n	801b79a <RadioIrqProcess+0x41a>
        break;
 801b780:	bf00      	nop
 801b782:	e00a      	b.n	801b79a <RadioIrqProcess+0x41a>
        break;
 801b784:	bf00      	nop
 801b786:	e008      	b.n	801b79a <RadioIrqProcess+0x41a>
        break;
 801b788:	bf00      	nop
 801b78a:	e006      	b.n	801b79a <RadioIrqProcess+0x41a>
        break;
 801b78c:	bf00      	nop
 801b78e:	e004      	b.n	801b79a <RadioIrqProcess+0x41a>
        break;
 801b790:	bf00      	nop
 801b792:	e002      	b.n	801b79a <RadioIrqProcess+0x41a>
        break;
 801b794:	bf00      	nop
 801b796:	e000      	b.n	801b79a <RadioIrqProcess+0x41a>
        break;
 801b798:	bf00      	nop
    }
}
 801b79a:	bf00      	nop
 801b79c:	3708      	adds	r7, #8
 801b79e:	46bd      	mov	sp, r7
 801b7a0:	bdb0      	pop	{r4, r5, r7, pc}
 801b7a2:	bf00      	nop
 801b7a4:	0801f6a0 	.word	0x0801f6a0
 801b7a8:	20001b88 	.word	0x20001b88
 801b7ac:	0801b191 	.word	0x0801b191
 801b7b0:	0801b1b5 	.word	0x0801b1b5
 801b7b4:	0801f6ac 	.word	0x0801f6ac
 801b7b8:	0801f6b8 	.word	0x0801f6b8
 801b7bc:	20001bfc 	.word	0x20001bfc
 801b7c0:	20001b84 	.word	0x20001b84
 801b7c4:	0801f6c4 	.word	0x0801f6c4
 801b7c8:	0801f6d0 	.word	0x0801f6d0

0801b7cc <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 801b7cc:	b580      	push	{r7, lr}
 801b7ce:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801b7d0:	4b09      	ldr	r3, [pc, #36]	@ (801b7f8 <RadioTxPrbs+0x2c>)
 801b7d2:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 801b7d6:	2101      	movs	r1, #1
 801b7d8:	4618      	mov	r0, r3
 801b7da:	f001 fcdb 	bl	801d194 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 801b7de:	4b07      	ldr	r3, [pc, #28]	@ (801b7fc <RadioTxPrbs+0x30>)
 801b7e0:	212d      	movs	r1, #45	@ 0x2d
 801b7e2:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 801b7e6:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 801b7e8:	f000 ff1f 	bl	801c62a <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 801b7ec:	4804      	ldr	r0, [pc, #16]	@ (801b800 <RadioTxPrbs+0x34>)
 801b7ee:	f000 fe75 	bl	801c4dc <SUBGRF_SetTx>
}
 801b7f2:	bf00      	nop
 801b7f4:	bd80      	pop	{r7, pc}
 801b7f6:	bf00      	nop
 801b7f8:	20001b88 	.word	0x20001b88
 801b7fc:	0801b191 	.word	0x0801b191
 801b800:	000fffff 	.word	0x000fffff

0801b804 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 801b804:	b580      	push	{r7, lr}
 801b806:	b084      	sub	sp, #16
 801b808:	af00      	add	r7, sp, #0
 801b80a:	4603      	mov	r3, r0
 801b80c:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 801b80e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b812:	4618      	mov	r0, r3
 801b814:	f001 fce6 	bl	801d1e4 <SUBGRF_SetRfTxPower>
 801b818:	4603      	mov	r3, r0
 801b81a:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801b81c:	210e      	movs	r1, #14
 801b81e:	f640 101f 	movw	r0, #2335	@ 0x91f
 801b822:	f001 fbc3 	bl	801cfac <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 801b826:	7bfb      	ldrb	r3, [r7, #15]
 801b828:	2101      	movs	r1, #1
 801b82a:	4618      	mov	r0, r3
 801b82c:	f001 fcb2 	bl	801d194 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 801b830:	f000 fef2 	bl	801c618 <SUBGRF_SetTxContinuousWave>
}
 801b834:	bf00      	nop
 801b836:	3710      	adds	r7, #16
 801b838:	46bd      	mov	sp, r7
 801b83a:	bd80      	pop	{r7, pc}

0801b83c <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 801b83c:	b480      	push	{r7}
 801b83e:	b089      	sub	sp, #36	@ 0x24
 801b840:	af00      	add	r7, sp, #0
 801b842:	60f8      	str	r0, [r7, #12]
 801b844:	60b9      	str	r1, [r7, #8]
 801b846:	4613      	mov	r3, r2
 801b848:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 801b84a:	2300      	movs	r3, #0
 801b84c:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 801b84e:	2300      	movs	r3, #0
 801b850:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 801b852:	2300      	movs	r3, #0
 801b854:	61bb      	str	r3, [r7, #24]
 801b856:	e011      	b.n	801b87c <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 801b858:	69bb      	ldr	r3, [r7, #24]
 801b85a:	68ba      	ldr	r2, [r7, #8]
 801b85c:	4413      	add	r3, r2
 801b85e:	781a      	ldrb	r2, [r3, #0]
 801b860:	69bb      	ldr	r3, [r7, #24]
 801b862:	68b9      	ldr	r1, [r7, #8]
 801b864:	440b      	add	r3, r1
 801b866:	43d2      	mvns	r2, r2
 801b868:	b2d2      	uxtb	r2, r2
 801b86a:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 801b86c:	69bb      	ldr	r3, [r7, #24]
 801b86e:	68fa      	ldr	r2, [r7, #12]
 801b870:	4413      	add	r3, r2
 801b872:	2200      	movs	r2, #0
 801b874:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 801b876:	69bb      	ldr	r3, [r7, #24]
 801b878:	3301      	adds	r3, #1
 801b87a:	61bb      	str	r3, [r7, #24]
 801b87c:	79fb      	ldrb	r3, [r7, #7]
 801b87e:	69ba      	ldr	r2, [r7, #24]
 801b880:	429a      	cmp	r2, r3
 801b882:	dbe9      	blt.n	801b858 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 801b884:	2300      	movs	r3, #0
 801b886:	61bb      	str	r3, [r7, #24]
 801b888:	e049      	b.n	801b91e <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 801b88a:	69bb      	ldr	r3, [r7, #24]
 801b88c:	425a      	negs	r2, r3
 801b88e:	f003 0307 	and.w	r3, r3, #7
 801b892:	f002 0207 	and.w	r2, r2, #7
 801b896:	bf58      	it	pl
 801b898:	4253      	negpl	r3, r2
 801b89a:	b2db      	uxtb	r3, r3
 801b89c:	f1c3 0307 	rsb	r3, r3, #7
 801b8a0:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 801b8a2:	69bb      	ldr	r3, [r7, #24]
 801b8a4:	2b00      	cmp	r3, #0
 801b8a6:	da00      	bge.n	801b8aa <payload_integration+0x6e>
 801b8a8:	3307      	adds	r3, #7
 801b8aa:	10db      	asrs	r3, r3, #3
 801b8ac:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 801b8ae:	69bb      	ldr	r3, [r7, #24]
 801b8b0:	3301      	adds	r3, #1
 801b8b2:	425a      	negs	r2, r3
 801b8b4:	f003 0307 	and.w	r3, r3, #7
 801b8b8:	f002 0207 	and.w	r2, r2, #7
 801b8bc:	bf58      	it	pl
 801b8be:	4253      	negpl	r3, r2
 801b8c0:	b2db      	uxtb	r3, r3
 801b8c2:	f1c3 0307 	rsb	r3, r3, #7
 801b8c6:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 801b8c8:	69bb      	ldr	r3, [r7, #24]
 801b8ca:	3301      	adds	r3, #1
 801b8cc:	2b00      	cmp	r3, #0
 801b8ce:	da00      	bge.n	801b8d2 <payload_integration+0x96>
 801b8d0:	3307      	adds	r3, #7
 801b8d2:	10db      	asrs	r3, r3, #3
 801b8d4:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 801b8d6:	7dbb      	ldrb	r3, [r7, #22]
 801b8d8:	68ba      	ldr	r2, [r7, #8]
 801b8da:	4413      	add	r3, r2
 801b8dc:	781b      	ldrb	r3, [r3, #0]
 801b8de:	461a      	mov	r2, r3
 801b8e0:	7dfb      	ldrb	r3, [r7, #23]
 801b8e2:	fa42 f303 	asr.w	r3, r2, r3
 801b8e6:	b2db      	uxtb	r3, r3
 801b8e8:	f003 0301 	and.w	r3, r3, #1
 801b8ec:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 801b8ee:	7ffa      	ldrb	r2, [r7, #31]
 801b8f0:	7cfb      	ldrb	r3, [r7, #19]
 801b8f2:	4053      	eors	r3, r2
 801b8f4:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 801b8f6:	7d3b      	ldrb	r3, [r7, #20]
 801b8f8:	68fa      	ldr	r2, [r7, #12]
 801b8fa:	4413      	add	r3, r2
 801b8fc:	781b      	ldrb	r3, [r3, #0]
 801b8fe:	b25a      	sxtb	r2, r3
 801b900:	7ff9      	ldrb	r1, [r7, #31]
 801b902:	7d7b      	ldrb	r3, [r7, #21]
 801b904:	fa01 f303 	lsl.w	r3, r1, r3
 801b908:	b25b      	sxtb	r3, r3
 801b90a:	4313      	orrs	r3, r2
 801b90c:	b259      	sxtb	r1, r3
 801b90e:	7d3b      	ldrb	r3, [r7, #20]
 801b910:	68fa      	ldr	r2, [r7, #12]
 801b912:	4413      	add	r3, r2
 801b914:	b2ca      	uxtb	r2, r1
 801b916:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 801b918:	69bb      	ldr	r3, [r7, #24]
 801b91a:	3301      	adds	r3, #1
 801b91c:	61bb      	str	r3, [r7, #24]
 801b91e:	79fb      	ldrb	r3, [r7, #7]
 801b920:	00db      	lsls	r3, r3, #3
 801b922:	69ba      	ldr	r2, [r7, #24]
 801b924:	429a      	cmp	r2, r3
 801b926:	dbb0      	blt.n	801b88a <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 801b928:	7ffb      	ldrb	r3, [r7, #31]
 801b92a:	01db      	lsls	r3, r3, #7
 801b92c:	b25a      	sxtb	r2, r3
 801b92e:	7ffb      	ldrb	r3, [r7, #31]
 801b930:	019b      	lsls	r3, r3, #6
 801b932:	b25b      	sxtb	r3, r3
 801b934:	4313      	orrs	r3, r2
 801b936:	b25b      	sxtb	r3, r3
 801b938:	7ffa      	ldrb	r2, [r7, #31]
 801b93a:	2a00      	cmp	r2, #0
 801b93c:	d101      	bne.n	801b942 <payload_integration+0x106>
 801b93e:	2220      	movs	r2, #32
 801b940:	e000      	b.n	801b944 <payload_integration+0x108>
 801b942:	2200      	movs	r2, #0
 801b944:	4313      	orrs	r3, r2
 801b946:	b259      	sxtb	r1, r3
 801b948:	79fb      	ldrb	r3, [r7, #7]
 801b94a:	68fa      	ldr	r2, [r7, #12]
 801b94c:	4413      	add	r3, r2
 801b94e:	b2ca      	uxtb	r2, r1
 801b950:	701a      	strb	r2, [r3, #0]
}
 801b952:	bf00      	nop
 801b954:	3724      	adds	r7, #36	@ 0x24
 801b956:	46bd      	mov	sp, r7
 801b958:	bc80      	pop	{r7}
 801b95a:	4770      	bx	lr

0801b95c <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 801b95c:	b580      	push	{r7, lr}
 801b95e:	b08c      	sub	sp, #48	@ 0x30
 801b960:	af00      	add	r7, sp, #0
 801b962:	60b9      	str	r1, [r7, #8]
 801b964:	607a      	str	r2, [r7, #4]
 801b966:	603b      	str	r3, [r7, #0]
 801b968:	4603      	mov	r3, r0
 801b96a:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 801b96c:	2300      	movs	r3, #0
 801b96e:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint8_t syncword[8] = {0};
 801b970:	2300      	movs	r3, #0
 801b972:	623b      	str	r3, [r7, #32]
 801b974:	2300      	movs	r3, #0
 801b976:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801b978:	f001 fdff 	bl	801d57a <RFW_DeInit>

    if( rxContinuous != 0 )
 801b97c:	687b      	ldr	r3, [r7, #4]
 801b97e:	2b00      	cmp	r3, #0
 801b980:	d001      	beq.n	801b986 <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 801b982:	2300      	movs	r3, #0
 801b984:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 801b986:	687b      	ldr	r3, [r7, #4]
 801b988:	2b00      	cmp	r3, #0
 801b98a:	bf14      	ite	ne
 801b98c:	2301      	movne	r3, #1
 801b98e:	2300      	moveq	r3, #0
 801b990:	b2da      	uxtb	r2, r3
 801b992:	4ba3      	ldr	r3, [pc, #652]	@ (801bc20 <RadioSetRxGenericConfig+0x2c4>)
 801b994:	705a      	strb	r2, [r3, #1]

    switch( modem )
 801b996:	7bfb      	ldrb	r3, [r7, #15]
 801b998:	2b00      	cmp	r3, #0
 801b99a:	d003      	beq.n	801b9a4 <RadioSetRxGenericConfig+0x48>
 801b99c:	2b01      	cmp	r3, #1
 801b99e:	f000 80dc 	beq.w	801bb5a <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 801b9a2:	e194      	b.n	801bcce <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 801b9a4:	68bb      	ldr	r3, [r7, #8]
 801b9a6:	689b      	ldr	r3, [r3, #8]
 801b9a8:	2b00      	cmp	r3, #0
 801b9aa:	d003      	beq.n	801b9b4 <RadioSetRxGenericConfig+0x58>
 801b9ac:	68bb      	ldr	r3, [r7, #8]
 801b9ae:	68db      	ldr	r3, [r3, #12]
 801b9b0:	2b00      	cmp	r3, #0
 801b9b2:	d102      	bne.n	801b9ba <RadioSetRxGenericConfig+0x5e>
            return -1;
 801b9b4:	f04f 33ff 	mov.w	r3, #4294967295
 801b9b8:	e18a      	b.n	801bcd0 <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 801b9ba:	68bb      	ldr	r3, [r7, #8]
 801b9bc:	7f9b      	ldrb	r3, [r3, #30]
 801b9be:	2b08      	cmp	r3, #8
 801b9c0:	d902      	bls.n	801b9c8 <RadioSetRxGenericConfig+0x6c>
            return -1;
 801b9c2:	f04f 33ff 	mov.w	r3, #4294967295
 801b9c6:	e183      	b.n	801bcd0 <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 801b9c8:	68bb      	ldr	r3, [r7, #8]
 801b9ca:	6919      	ldr	r1, [r3, #16]
 801b9cc:	68bb      	ldr	r3, [r7, #8]
 801b9ce:	7f9b      	ldrb	r3, [r3, #30]
 801b9d0:	461a      	mov	r2, r3
 801b9d2:	f107 0320 	add.w	r3, r7, #32
 801b9d6:	4618      	mov	r0, r3
 801b9d8:	f001 fec2 	bl	801d760 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801b9dc:	68bb      	ldr	r3, [r7, #8]
 801b9de:	681b      	ldr	r3, [r3, #0]
 801b9e0:	2b00      	cmp	r3, #0
 801b9e2:	bf14      	ite	ne
 801b9e4:	2301      	movne	r3, #1
 801b9e6:	2300      	moveq	r3, #0
 801b9e8:	b2db      	uxtb	r3, r3
 801b9ea:	4618      	mov	r0, r3
 801b9ec:	f000 fe26 	bl	801c63c <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801b9f0:	4b8b      	ldr	r3, [pc, #556]	@ (801bc20 <RadioSetRxGenericConfig+0x2c4>)
 801b9f2:	2200      	movs	r2, #0
 801b9f4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801b9f8:	68bb      	ldr	r3, [r7, #8]
 801b9fa:	689b      	ldr	r3, [r3, #8]
 801b9fc:	4a88      	ldr	r2, [pc, #544]	@ (801bc20 <RadioSetRxGenericConfig+0x2c4>)
 801b9fe:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801ba00:	68bb      	ldr	r3, [r7, #8]
 801ba02:	f893 2020 	ldrb.w	r2, [r3, #32]
 801ba06:	4b86      	ldr	r3, [pc, #536]	@ (801bc20 <RadioSetRxGenericConfig+0x2c4>)
 801ba08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 801ba0c:	68bb      	ldr	r3, [r7, #8]
 801ba0e:	685b      	ldr	r3, [r3, #4]
 801ba10:	4618      	mov	r0, r3
 801ba12:	f001 fce5 	bl	801d3e0 <SUBGRF_GetFskBandwidthRegValue>
 801ba16:	4603      	mov	r3, r0
 801ba18:	461a      	mov	r2, r3
 801ba1a:	4b81      	ldr	r3, [pc, #516]	@ (801bc20 <RadioSetRxGenericConfig+0x2c4>)
 801ba1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801ba20:	4b7f      	ldr	r3, [pc, #508]	@ (801bc20 <RadioSetRxGenericConfig+0x2c4>)
 801ba22:	2200      	movs	r2, #0
 801ba24:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 801ba26:	68bb      	ldr	r3, [r7, #8]
 801ba28:	68db      	ldr	r3, [r3, #12]
 801ba2a:	b29b      	uxth	r3, r3
 801ba2c:	00db      	lsls	r3, r3, #3
 801ba2e:	b29a      	uxth	r2, r3
 801ba30:	4b7b      	ldr	r3, [pc, #492]	@ (801bc20 <RadioSetRxGenericConfig+0x2c4>)
 801ba32:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 801ba34:	68bb      	ldr	r3, [r7, #8]
 801ba36:	7fda      	ldrb	r2, [r3, #31]
 801ba38:	4b79      	ldr	r3, [pc, #484]	@ (801bc20 <RadioSetRxGenericConfig+0x2c4>)
 801ba3a:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801ba3c:	68bb      	ldr	r3, [r7, #8]
 801ba3e:	7f9b      	ldrb	r3, [r3, #30]
 801ba40:	00db      	lsls	r3, r3, #3
 801ba42:	b2da      	uxtb	r2, r3
 801ba44:	4b76      	ldr	r3, [pc, #472]	@ (801bc20 <RadioSetRxGenericConfig+0x2c4>)
 801ba46:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 801ba48:	68bb      	ldr	r3, [r7, #8]
 801ba4a:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 801ba4e:	4b74      	ldr	r3, [pc, #464]	@ (801bc20 <RadioSetRxGenericConfig+0x2c4>)
 801ba50:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 801ba52:	68bb      	ldr	r3, [r7, #8]
 801ba54:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 801ba58:	2b00      	cmp	r3, #0
 801ba5a:	d105      	bne.n	801ba68 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 801ba5c:	68bb      	ldr	r3, [r7, #8]
 801ba5e:	695b      	ldr	r3, [r3, #20]
 801ba60:	b2da      	uxtb	r2, r3
 801ba62:	4b6f      	ldr	r3, [pc, #444]	@ (801bc20 <RadioSetRxGenericConfig+0x2c4>)
 801ba64:	759a      	strb	r2, [r3, #22]
 801ba66:	e00b      	b.n	801ba80 <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 801ba68:	68bb      	ldr	r3, [r7, #8]
 801ba6a:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 801ba6e:	2b02      	cmp	r3, #2
 801ba70:	d103      	bne.n	801ba7a <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801ba72:	4b6b      	ldr	r3, [pc, #428]	@ (801bc20 <RadioSetRxGenericConfig+0x2c4>)
 801ba74:	22ff      	movs	r2, #255	@ 0xff
 801ba76:	759a      	strb	r2, [r3, #22]
 801ba78:	e002      	b.n	801ba80 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801ba7a:	4b69      	ldr	r3, [pc, #420]	@ (801bc20 <RadioSetRxGenericConfig+0x2c4>)
 801ba7c:	22ff      	movs	r2, #255	@ 0xff
 801ba7e:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801ba80:	68bb      	ldr	r3, [r7, #8]
 801ba82:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 801ba86:	2b02      	cmp	r3, #2
 801ba88:	d004      	beq.n	801ba94 <RadioSetRxGenericConfig+0x138>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801ba8a:	68bb      	ldr	r3, [r7, #8]
 801ba8c:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 801ba90:	2b02      	cmp	r3, #2
 801ba92:	d12d      	bne.n	801baf0 <RadioSetRxGenericConfig+0x194>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801ba94:	68bb      	ldr	r3, [r7, #8]
 801ba96:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 801ba9a:	2bf1      	cmp	r3, #241	@ 0xf1
 801ba9c:	d00c      	beq.n	801bab8 <RadioSetRxGenericConfig+0x15c>
 801ba9e:	68bb      	ldr	r3, [r7, #8]
 801baa0:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 801baa4:	2bf2      	cmp	r3, #242	@ 0xf2
 801baa6:	d007      	beq.n	801bab8 <RadioSetRxGenericConfig+0x15c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801baa8:	68bb      	ldr	r3, [r7, #8]
 801baaa:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 801baae:	2b01      	cmp	r3, #1
 801bab0:	d002      	beq.n	801bab8 <RadioSetRxGenericConfig+0x15c>
                return -1;
 801bab2:	f04f 33ff 	mov.w	r3, #4294967295
 801bab6:	e10b      	b.n	801bcd0 <RadioSetRxGenericConfig+0x374>
            ConfigGeneric.rtx = CONFIG_RX;
 801bab8:	2300      	movs	r3, #0
 801baba:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 801babc:	68bb      	ldr	r3, [r7, #8]
 801babe:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 801bac0:	4b58      	ldr	r3, [pc, #352]	@ (801bc24 <RadioSetRxGenericConfig+0x2c8>)
 801bac2:	6819      	ldr	r1, [r3, #0]
 801bac4:	f107 0314 	add.w	r3, r7, #20
 801bac8:	4a57      	ldr	r2, [pc, #348]	@ (801bc28 <RadioSetRxGenericConfig+0x2cc>)
 801baca:	4618      	mov	r0, r3
 801bacc:	f001 fd48 	bl	801d560 <RFW_Init>
 801bad0:	4603      	mov	r3, r0
 801bad2:	2b00      	cmp	r3, #0
 801bad4:	d002      	beq.n	801badc <RadioSetRxGenericConfig+0x180>
                return -1;
 801bad6:	f04f 33ff 	mov.w	r3, #4294967295
 801bada:	e0f9      	b.n	801bcd0 <RadioSetRxGenericConfig+0x374>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801badc:	4b50      	ldr	r3, [pc, #320]	@ (801bc20 <RadioSetRxGenericConfig+0x2c4>)
 801bade:	2200      	movs	r2, #0
 801bae0:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801bae2:	4b4f      	ldr	r3, [pc, #316]	@ (801bc20 <RadioSetRxGenericConfig+0x2c4>)
 801bae4:	2201      	movs	r2, #1
 801bae6:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801bae8:	4b4d      	ldr	r3, [pc, #308]	@ (801bc20 <RadioSetRxGenericConfig+0x2c4>)
 801baea:	2200      	movs	r2, #0
 801baec:	755a      	strb	r2, [r3, #21]
        {
 801baee:	e00e      	b.n	801bb0e <RadioSetRxGenericConfig+0x1b2>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801baf0:	68bb      	ldr	r3, [r7, #8]
 801baf2:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 801baf6:	4b4a      	ldr	r3, [pc, #296]	@ (801bc20 <RadioSetRxGenericConfig+0x2c4>)
 801baf8:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801bafa:	68bb      	ldr	r3, [r7, #8]
 801bafc:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 801bb00:	4b47      	ldr	r3, [pc, #284]	@ (801bc20 <RadioSetRxGenericConfig+0x2c4>)
 801bb02:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 801bb04:	68bb      	ldr	r3, [r7, #8]
 801bb06:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 801bb0a:	4b45      	ldr	r3, [pc, #276]	@ (801bc20 <RadioSetRxGenericConfig+0x2c4>)
 801bb0c:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 801bb0e:	f7ff fa3e 	bl	801af8e <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801bb12:	2000      	movs	r0, #0
 801bb14:	f7fe fbd2 	bl	801a2bc <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801bb18:	4844      	ldr	r0, [pc, #272]	@ (801bc2c <RadioSetRxGenericConfig+0x2d0>)
 801bb1a:	f001 f82d 	bl	801cb78 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801bb1e:	4844      	ldr	r0, [pc, #272]	@ (801bc30 <RadioSetRxGenericConfig+0x2d4>)
 801bb20:	f001 f8fc 	bl	801cd1c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801bb24:	f107 0320 	add.w	r3, r7, #32
 801bb28:	4618      	mov	r0, r3
 801bb2a:	f000 fbc0 	bl	801c2ae <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801bb2e:	68bb      	ldr	r3, [r7, #8]
 801bb30:	8b9b      	ldrh	r3, [r3, #28]
 801bb32:	4618      	mov	r0, r3
 801bb34:	f000 fc0a 	bl	801c34c <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 801bb38:	68bb      	ldr	r3, [r7, #8]
 801bb3a:	8b1b      	ldrh	r3, [r3, #24]
 801bb3c:	4618      	mov	r0, r3
 801bb3e:	f000 fbe5 	bl	801c30c <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 801bb42:	683b      	ldr	r3, [r7, #0]
 801bb44:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 801bb48:	fb03 f202 	mul.w	r2, r3, r2
 801bb4c:	68bb      	ldr	r3, [r7, #8]
 801bb4e:	689b      	ldr	r3, [r3, #8]
 801bb50:	fbb2 f3f3 	udiv	r3, r2, r3
 801bb54:	4a32      	ldr	r2, [pc, #200]	@ (801bc20 <RadioSetRxGenericConfig+0x2c4>)
 801bb56:	6093      	str	r3, [r2, #8]
        break;
 801bb58:	e0b9      	b.n	801bcce <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 801bb5a:	68bb      	ldr	r3, [r7, #8]
 801bb5c:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 801bb5e:	2b00      	cmp	r3, #0
 801bb60:	d102      	bne.n	801bb68 <RadioSetRxGenericConfig+0x20c>
            return -1;
 801bb62:	f04f 33ff 	mov.w	r3, #4294967295
 801bb66:	e0b3      	b.n	801bcd0 <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 801bb68:	68bb      	ldr	r3, [r7, #8]
 801bb6a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 801bb6e:	2b01      	cmp	r3, #1
 801bb70:	d104      	bne.n	801bb7c <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 801bb72:	68bb      	ldr	r3, [r7, #8]
 801bb74:	695b      	ldr	r3, [r3, #20]
 801bb76:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 801bb7a:	e002      	b.n	801bb82 <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 801bb7c:	23ff      	movs	r3, #255	@ 0xff
 801bb7e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801bb82:	68bb      	ldr	r3, [r7, #8]
 801bb84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801bb86:	2b00      	cmp	r3, #0
 801bb88:	bf14      	ite	ne
 801bb8a:	2301      	movne	r3, #1
 801bb8c:	2300      	moveq	r3, #0
 801bb8e:	b2db      	uxtb	r3, r3
 801bb90:	4618      	mov	r0, r3
 801bb92:	f000 fd53 	bl	801c63c <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801bb96:	683b      	ldr	r3, [r7, #0]
 801bb98:	b2db      	uxtb	r3, r3
 801bb9a:	4618      	mov	r0, r3
 801bb9c:	f000 fd5d 	bl	801c65a <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801bba0:	4b1f      	ldr	r3, [pc, #124]	@ (801bc20 <RadioSetRxGenericConfig+0x2c4>)
 801bba2:	2201      	movs	r2, #1
 801bba4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801bba8:	68bb      	ldr	r3, [r7, #8]
 801bbaa:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 801bbae:	4b1c      	ldr	r3, [pc, #112]	@ (801bc20 <RadioSetRxGenericConfig+0x2c4>)
 801bbb0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801bbb4:	68bb      	ldr	r3, [r7, #8]
 801bbb6:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 801bbba:	4b19      	ldr	r3, [pc, #100]	@ (801bc20 <RadioSetRxGenericConfig+0x2c4>)
 801bbbc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801bbc0:	68bb      	ldr	r3, [r7, #8]
 801bbc2:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 801bbc6:	4b16      	ldr	r3, [pc, #88]	@ (801bc20 <RadioSetRxGenericConfig+0x2c4>)
 801bbc8:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 801bbcc:	68bb      	ldr	r3, [r7, #8]
 801bbce:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801bbd2:	2b02      	cmp	r3, #2
 801bbd4:	d010      	beq.n	801bbf8 <RadioSetRxGenericConfig+0x29c>
 801bbd6:	2b02      	cmp	r3, #2
 801bbd8:	dc2c      	bgt.n	801bc34 <RadioSetRxGenericConfig+0x2d8>
 801bbda:	2b00      	cmp	r3, #0
 801bbdc:	d002      	beq.n	801bbe4 <RadioSetRxGenericConfig+0x288>
 801bbde:	2b01      	cmp	r3, #1
 801bbe0:	d005      	beq.n	801bbee <RadioSetRxGenericConfig+0x292>
            break;
 801bbe2:	e027      	b.n	801bc34 <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801bbe4:	4b0e      	ldr	r3, [pc, #56]	@ (801bc20 <RadioSetRxGenericConfig+0x2c4>)
 801bbe6:	2200      	movs	r2, #0
 801bbe8:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801bbec:	e023      	b.n	801bc36 <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801bbee:	4b0c      	ldr	r3, [pc, #48]	@ (801bc20 <RadioSetRxGenericConfig+0x2c4>)
 801bbf0:	2201      	movs	r2, #1
 801bbf2:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801bbf6:	e01e      	b.n	801bc36 <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801bbf8:	68bb      	ldr	r3, [r7, #8]
 801bbfa:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801bbfe:	2b0b      	cmp	r3, #11
 801bc00:	d004      	beq.n	801bc0c <RadioSetRxGenericConfig+0x2b0>
 801bc02:	68bb      	ldr	r3, [r7, #8]
 801bc04:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801bc08:	2b0c      	cmp	r3, #12
 801bc0a:	d104      	bne.n	801bc16 <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801bc0c:	4b04      	ldr	r3, [pc, #16]	@ (801bc20 <RadioSetRxGenericConfig+0x2c4>)
 801bc0e:	2201      	movs	r2, #1
 801bc10:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801bc14:	e00f      	b.n	801bc36 <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801bc16:	4b02      	ldr	r3, [pc, #8]	@ (801bc20 <RadioSetRxGenericConfig+0x2c4>)
 801bc18:	2200      	movs	r2, #0
 801bc1a:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801bc1e:	e00a      	b.n	801bc36 <RadioSetRxGenericConfig+0x2da>
 801bc20:	20001b88 	.word	0x20001b88
 801bc24:	20001b84 	.word	0x20001b84
 801bc28:	20001bfc 	.word	0x20001bfc
 801bc2c:	20001bc0 	.word	0x20001bc0
 801bc30:	20001b96 	.word	0x20001b96
            break;
 801bc34:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801bc36:	4b28      	ldr	r3, [pc, #160]	@ (801bcd8 <RadioSetRxGenericConfig+0x37c>)
 801bc38:	2201      	movs	r2, #1
 801bc3a:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801bc3c:	68bb      	ldr	r3, [r7, #8]
 801bc3e:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 801bc40:	4b25      	ldr	r3, [pc, #148]	@ (801bcd8 <RadioSetRxGenericConfig+0x37c>)
 801bc42:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801bc44:	68bb      	ldr	r3, [r7, #8]
 801bc46:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 801bc4a:	4b23      	ldr	r3, [pc, #140]	@ (801bcd8 <RadioSetRxGenericConfig+0x37c>)
 801bc4c:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801bc4e:	4a22      	ldr	r2, [pc, #136]	@ (801bcd8 <RadioSetRxGenericConfig+0x37c>)
 801bc50:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801bc54:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801bc56:	68bb      	ldr	r3, [r7, #8]
 801bc58:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 801bc5c:	4b1e      	ldr	r3, [pc, #120]	@ (801bcd8 <RadioSetRxGenericConfig+0x37c>)
 801bc5e:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801bc62:	68bb      	ldr	r3, [r7, #8]
 801bc64:	f893 2035 	ldrb.w	r2, [r3, #53]	@ 0x35
 801bc68:	4b1b      	ldr	r3, [pc, #108]	@ (801bcd8 <RadioSetRxGenericConfig+0x37c>)
 801bc6a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        RadioStandby( );
 801bc6e:	f7ff f98e 	bl	801af8e <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801bc72:	2001      	movs	r0, #1
 801bc74:	f7fe fb22 	bl	801a2bc <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801bc78:	4818      	ldr	r0, [pc, #96]	@ (801bcdc <RadioSetRxGenericConfig+0x380>)
 801bc7a:	f000 ff7d 	bl	801cb78 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801bc7e:	4818      	ldr	r0, [pc, #96]	@ (801bce0 <RadioSetRxGenericConfig+0x384>)
 801bc80:	f001 f84c 	bl	801cd1c <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801bc84:	4b14      	ldr	r3, [pc, #80]	@ (801bcd8 <RadioSetRxGenericConfig+0x37c>)
 801bc86:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 801bc8a:	2b01      	cmp	r3, #1
 801bc8c:	d10d      	bne.n	801bcaa <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 801bc8e:	f240 7036 	movw	r0, #1846	@ 0x736
 801bc92:	f001 f99f 	bl	801cfd4 <SUBGRF_ReadRegister>
 801bc96:	4603      	mov	r3, r0
 801bc98:	f023 0304 	bic.w	r3, r3, #4
 801bc9c:	b2db      	uxtb	r3, r3
 801bc9e:	4619      	mov	r1, r3
 801bca0:	f240 7036 	movw	r0, #1846	@ 0x736
 801bca4:	f001 f982 	bl	801cfac <SUBGRF_WriteRegister>
 801bca8:	e00c      	b.n	801bcc4 <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 801bcaa:	f240 7036 	movw	r0, #1846	@ 0x736
 801bcae:	f001 f991 	bl	801cfd4 <SUBGRF_ReadRegister>
 801bcb2:	4603      	mov	r3, r0
 801bcb4:	f043 0304 	orr.w	r3, r3, #4
 801bcb8:	b2db      	uxtb	r3, r3
 801bcba:	4619      	mov	r1, r3
 801bcbc:	f240 7036 	movw	r0, #1846	@ 0x736
 801bcc0:	f001 f974 	bl	801cfac <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 801bcc4:	4b04      	ldr	r3, [pc, #16]	@ (801bcd8 <RadioSetRxGenericConfig+0x37c>)
 801bcc6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801bcca:	609a      	str	r2, [r3, #8]
        break;
 801bccc:	bf00      	nop
    }
    return status;
 801bcce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801bcd0:	4618      	mov	r0, r3
 801bcd2:	3730      	adds	r7, #48	@ 0x30
 801bcd4:	46bd      	mov	sp, r7
 801bcd6:	bd80      	pop	{r7, pc}
 801bcd8:	20001b88 	.word	0x20001b88
 801bcdc:	20001bc0 	.word	0x20001bc0
 801bce0:	20001b96 	.word	0x20001b96

0801bce4 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 801bce4:	b580      	push	{r7, lr}
 801bce6:	b08e      	sub	sp, #56	@ 0x38
 801bce8:	af00      	add	r7, sp, #0
 801bcea:	60b9      	str	r1, [r7, #8]
 801bcec:	607b      	str	r3, [r7, #4]
 801bcee:	4603      	mov	r3, r0
 801bcf0:	73fb      	strb	r3, [r7, #15]
 801bcf2:	4613      	mov	r3, r2
 801bcf4:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 801bcf6:	2300      	movs	r3, #0
 801bcf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801bcfa:	2300      	movs	r3, #0
 801bcfc:	633b      	str	r3, [r7, #48]	@ 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801bcfe:	f001 fc3c 	bl	801d57a <RFW_DeInit>
    switch( modem )
 801bd02:	7bfb      	ldrb	r3, [r7, #15]
 801bd04:	2b03      	cmp	r3, #3
 801bd06:	f200 8204 	bhi.w	801c112 <RadioSetTxGenericConfig+0x42e>
 801bd0a:	a201      	add	r2, pc, #4	@ (adr r2, 801bd10 <RadioSetTxGenericConfig+0x2c>)
 801bd0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bd10:	0801be95 	.word	0x0801be95
 801bd14:	0801bfdd 	.word	0x0801bfdd
 801bd18:	0801c0d5 	.word	0x0801c0d5
 801bd1c:	0801bd21 	.word	0x0801bd21
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 801bd20:	68bb      	ldr	r3, [r7, #8]
 801bd22:	7c9b      	ldrb	r3, [r3, #18]
 801bd24:	2b08      	cmp	r3, #8
 801bd26:	d902      	bls.n	801bd2e <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 801bd28:	f04f 33ff 	mov.w	r3, #4294967295
 801bd2c:	e206      	b.n	801c13c <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 801bd2e:	68bb      	ldr	r3, [r7, #8]
 801bd30:	6899      	ldr	r1, [r3, #8]
 801bd32:	68bb      	ldr	r3, [r7, #8]
 801bd34:	7c9b      	ldrb	r3, [r3, #18]
 801bd36:	461a      	mov	r2, r3
 801bd38:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801bd3c:	4618      	mov	r0, r3
 801bd3e:	f001 fd0f 	bl	801d760 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 801bd42:	68bb      	ldr	r3, [r7, #8]
 801bd44:	681b      	ldr	r3, [r3, #0]
 801bd46:	2b00      	cmp	r3, #0
 801bd48:	d102      	bne.n	801bd50 <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 801bd4a:	f04f 33ff 	mov.w	r3, #4294967295
 801bd4e:	e1f5      	b.n	801c13c <RadioSetTxGenericConfig+0x458>
        }
        else if( config->msk.BitRate <= 10000 )
 801bd50:	68bb      	ldr	r3, [r7, #8]
 801bd52:	681b      	ldr	r3, [r3, #0]
 801bd54:	f242 7210 	movw	r2, #10000	@ 0x2710
 801bd58:	4293      	cmp	r3, r2
 801bd5a:	d813      	bhi.n	801bd84 <RadioSetTxGenericConfig+0xa0>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 801bd5c:	2302      	movs	r3, #2
 801bd5e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 801bd62:	4b99      	ldr	r3, [pc, #612]	@ (801bfc8 <RadioSetTxGenericConfig+0x2e4>)
 801bd64:	2203      	movs	r2, #3
 801bd66:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 801bd68:	4b97      	ldr	r3, [pc, #604]	@ (801bfc8 <RadioSetTxGenericConfig+0x2e4>)
 801bd6a:	2203      	movs	r2, #3
 801bd6c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801bd70:	68bb      	ldr	r3, [r7, #8]
 801bd72:	681b      	ldr	r3, [r3, #0]
 801bd74:	4a94      	ldr	r2, [pc, #592]	@ (801bfc8 <RadioSetTxGenericConfig+0x2e4>)
 801bd76:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801bd78:	68bb      	ldr	r3, [r7, #8]
 801bd7a:	7cda      	ldrb	r2, [r3, #19]
 801bd7c:	4b92      	ldr	r3, [pc, #584]	@ (801bfc8 <RadioSetTxGenericConfig+0x2e4>)
 801bd7e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801bd82:	e017      	b.n	801bdb4 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
            radio_modem = MODEM_FSK;
 801bd84:	2300      	movs	r3, #0
 801bd86:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801bd8a:	4b8f      	ldr	r3, [pc, #572]	@ (801bfc8 <RadioSetTxGenericConfig+0x2e4>)
 801bd8c:	2200      	movs	r2, #0
 801bd8e:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801bd90:	4b8d      	ldr	r3, [pc, #564]	@ (801bfc8 <RadioSetTxGenericConfig+0x2e4>)
 801bd92:	2200      	movs	r2, #0
 801bd94:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801bd98:	68bb      	ldr	r3, [r7, #8]
 801bd9a:	681b      	ldr	r3, [r3, #0]
 801bd9c:	4a8a      	ldr	r2, [pc, #552]	@ (801bfc8 <RadioSetTxGenericConfig+0x2e4>)
 801bd9e:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801bda0:	68bb      	ldr	r3, [r7, #8]
 801bda2:	7cda      	ldrb	r2, [r3, #19]
 801bda4:	4b88      	ldr	r3, [pc, #544]	@ (801bfc8 <RadioSetTxGenericConfig+0x2e4>)
 801bda6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 801bdaa:	68bb      	ldr	r3, [r7, #8]
 801bdac:	681b      	ldr	r3, [r3, #0]
 801bdae:	089b      	lsrs	r3, r3, #2
 801bdb0:	4a85      	ldr	r2, [pc, #532]	@ (801bfc8 <RadioSetTxGenericConfig+0x2e4>)
 801bdb2:	6413      	str	r3, [r2, #64]	@ 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 801bdb4:	68bb      	ldr	r3, [r7, #8]
 801bdb6:	685b      	ldr	r3, [r3, #4]
 801bdb8:	b29b      	uxth	r3, r3
 801bdba:	00db      	lsls	r3, r3, #3
 801bdbc:	b29a      	uxth	r2, r3
 801bdbe:	4b82      	ldr	r3, [pc, #520]	@ (801bfc8 <RadioSetTxGenericConfig+0x2e4>)
 801bdc0:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801bdc2:	4b81      	ldr	r3, [pc, #516]	@ (801bfc8 <RadioSetTxGenericConfig+0x2e4>)
 801bdc4:	2204      	movs	r2, #4
 801bdc6:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 801bdc8:	68bb      	ldr	r3, [r7, #8]
 801bdca:	7c9b      	ldrb	r3, [r3, #18]
 801bdcc:	00db      	lsls	r3, r3, #3
 801bdce:	b2da      	uxtb	r2, r3
 801bdd0:	4b7d      	ldr	r3, [pc, #500]	@ (801bfc8 <RadioSetTxGenericConfig+0x2e4>)
 801bdd2:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801bdd4:	4b7c      	ldr	r3, [pc, #496]	@ (801bfc8 <RadioSetTxGenericConfig+0x2e4>)
 801bdd6:	2200      	movs	r2, #0
 801bdd8:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801bdda:	68bb      	ldr	r3, [r7, #8]
 801bddc:	7d9b      	ldrb	r3, [r3, #22]
 801bdde:	2b02      	cmp	r3, #2
 801bde0:	d003      	beq.n	801bdea <RadioSetTxGenericConfig+0x106>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801bde2:	68bb      	ldr	r3, [r7, #8]
 801bde4:	7d1b      	ldrb	r3, [r3, #20]
 801bde6:	2b02      	cmp	r3, #2
 801bde8:	d12b      	bne.n	801be42 <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801bdea:	68bb      	ldr	r3, [r7, #8]
 801bdec:	7d5b      	ldrb	r3, [r3, #21]
 801bdee:	2bf1      	cmp	r3, #241	@ 0xf1
 801bdf0:	d00a      	beq.n	801be08 <RadioSetTxGenericConfig+0x124>
 801bdf2:	68bb      	ldr	r3, [r7, #8]
 801bdf4:	7d5b      	ldrb	r3, [r3, #21]
 801bdf6:	2bf2      	cmp	r3, #242	@ 0xf2
 801bdf8:	d006      	beq.n	801be08 <RadioSetTxGenericConfig+0x124>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801bdfa:	68bb      	ldr	r3, [r7, #8]
 801bdfc:	7d5b      	ldrb	r3, [r3, #21]
 801bdfe:	2b01      	cmp	r3, #1
 801be00:	d002      	beq.n	801be08 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 801be02:	f04f 33ff 	mov.w	r3, #4294967295
 801be06:	e199      	b.n	801c13c <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 801be08:	68bb      	ldr	r3, [r7, #8]
 801be0a:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 801be0c:	2301      	movs	r3, #1
 801be0e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801be12:	4b6e      	ldr	r3, [pc, #440]	@ (801bfcc <RadioSetTxGenericConfig+0x2e8>)
 801be14:	6819      	ldr	r1, [r3, #0]
 801be16:	f107 0320 	add.w	r3, r7, #32
 801be1a:	4a6d      	ldr	r2, [pc, #436]	@ (801bfd0 <RadioSetTxGenericConfig+0x2ec>)
 801be1c:	4618      	mov	r0, r3
 801be1e:	f001 fb9f 	bl	801d560 <RFW_Init>
 801be22:	4603      	mov	r3, r0
 801be24:	2b00      	cmp	r3, #0
 801be26:	d002      	beq.n	801be2e <RadioSetTxGenericConfig+0x14a>
            {
                return -1;
 801be28:	f04f 33ff 	mov.w	r3, #4294967295
 801be2c:	e186      	b.n	801c13c <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801be2e:	4b66      	ldr	r3, [pc, #408]	@ (801bfc8 <RadioSetTxGenericConfig+0x2e4>)
 801be30:	2200      	movs	r2, #0
 801be32:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801be34:	4b64      	ldr	r3, [pc, #400]	@ (801bfc8 <RadioSetTxGenericConfig+0x2e4>)
 801be36:	2201      	movs	r2, #1
 801be38:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801be3a:	4b63      	ldr	r3, [pc, #396]	@ (801bfc8 <RadioSetTxGenericConfig+0x2e4>)
 801be3c:	2200      	movs	r2, #0
 801be3e:	755a      	strb	r2, [r3, #21]
        {
 801be40:	e00b      	b.n	801be5a <RadioSetTxGenericConfig+0x176>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 801be42:	68bb      	ldr	r3, [r7, #8]
 801be44:	7d5a      	ldrb	r2, [r3, #21]
 801be46:	4b60      	ldr	r3, [pc, #384]	@ (801bfc8 <RadioSetTxGenericConfig+0x2e4>)
 801be48:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 801be4a:	68bb      	ldr	r3, [r7, #8]
 801be4c:	7d9a      	ldrb	r2, [r3, #22]
 801be4e:	4b5e      	ldr	r3, [pc, #376]	@ (801bfc8 <RadioSetTxGenericConfig+0x2e4>)
 801be50:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 801be52:	68bb      	ldr	r3, [r7, #8]
 801be54:	7d1a      	ldrb	r2, [r3, #20]
 801be56:	4b5c      	ldr	r3, [pc, #368]	@ (801bfc8 <RadioSetTxGenericConfig+0x2e4>)
 801be58:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801be5a:	f7ff f898 	bl	801af8e <RadioStandby>
        RadioSetModem( radio_modem );
 801be5e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801be62:	4618      	mov	r0, r3
 801be64:	f7fe fa2a 	bl	801a2bc <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801be68:	485a      	ldr	r0, [pc, #360]	@ (801bfd4 <RadioSetTxGenericConfig+0x2f0>)
 801be6a:	f000 fe85 	bl	801cb78 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801be6e:	485a      	ldr	r0, [pc, #360]	@ (801bfd8 <RadioSetTxGenericConfig+0x2f4>)
 801be70:	f000 ff54 	bl	801cd1c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801be74:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801be78:	4618      	mov	r0, r3
 801be7a:	f000 fa18 	bl	801c2ae <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 801be7e:	68bb      	ldr	r3, [r7, #8]
 801be80:	8a1b      	ldrh	r3, [r3, #16]
 801be82:	4618      	mov	r0, r3
 801be84:	f000 fa62 	bl	801c34c <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 801be88:	68bb      	ldr	r3, [r7, #8]
 801be8a:	899b      	ldrh	r3, [r3, #12]
 801be8c:	4618      	mov	r0, r3
 801be8e:	f000 fa3d 	bl	801c30c <SUBGRF_SetCrcPolynomial>
        break;
 801be92:	e13f      	b.n	801c114 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 801be94:	68bb      	ldr	r3, [r7, #8]
 801be96:	681b      	ldr	r3, [r3, #0]
 801be98:	2b00      	cmp	r3, #0
 801be9a:	d102      	bne.n	801bea2 <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 801be9c:	f04f 33ff 	mov.w	r3, #4294967295
 801bea0:	e14c      	b.n	801c13c <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 801bea2:	68bb      	ldr	r3, [r7, #8]
 801bea4:	7c9b      	ldrb	r3, [r3, #18]
 801bea6:	2b08      	cmp	r3, #8
 801bea8:	d902      	bls.n	801beb0 <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 801beaa:	f04f 33ff 	mov.w	r3, #4294967295
 801beae:	e145      	b.n	801c13c <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 801beb0:	68bb      	ldr	r3, [r7, #8]
 801beb2:	6899      	ldr	r1, [r3, #8]
 801beb4:	68bb      	ldr	r3, [r7, #8]
 801beb6:	7c9b      	ldrb	r3, [r3, #18]
 801beb8:	461a      	mov	r2, r3
 801beba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801bebe:	4618      	mov	r0, r3
 801bec0:	f001 fc4e 	bl	801d760 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801bec4:	4b40      	ldr	r3, [pc, #256]	@ (801bfc8 <RadioSetTxGenericConfig+0x2e4>)
 801bec6:	2200      	movs	r2, #0
 801bec8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801becc:	68bb      	ldr	r3, [r7, #8]
 801bece:	681b      	ldr	r3, [r3, #0]
 801bed0:	4a3d      	ldr	r2, [pc, #244]	@ (801bfc8 <RadioSetTxGenericConfig+0x2e4>)
 801bed2:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801bed4:	68bb      	ldr	r3, [r7, #8]
 801bed6:	7cda      	ldrb	r2, [r3, #19]
 801bed8:	4b3b      	ldr	r3, [pc, #236]	@ (801bfc8 <RadioSetTxGenericConfig+0x2e4>)
 801beda:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 801bede:	68bb      	ldr	r3, [r7, #8]
 801bee0:	699b      	ldr	r3, [r3, #24]
 801bee2:	4a39      	ldr	r2, [pc, #228]	@ (801bfc8 <RadioSetTxGenericConfig+0x2e4>)
 801bee4:	6413      	str	r3, [r2, #64]	@ 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801bee6:	4b38      	ldr	r3, [pc, #224]	@ (801bfc8 <RadioSetTxGenericConfig+0x2e4>)
 801bee8:	2200      	movs	r2, #0
 801beea:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 801beec:	68bb      	ldr	r3, [r7, #8]
 801beee:	685b      	ldr	r3, [r3, #4]
 801bef0:	b29b      	uxth	r3, r3
 801bef2:	00db      	lsls	r3, r3, #3
 801bef4:	b29a      	uxth	r2, r3
 801bef6:	4b34      	ldr	r3, [pc, #208]	@ (801bfc8 <RadioSetTxGenericConfig+0x2e4>)
 801bef8:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801befa:	4b33      	ldr	r3, [pc, #204]	@ (801bfc8 <RadioSetTxGenericConfig+0x2e4>)
 801befc:	2204      	movs	r2, #4
 801befe:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801bf00:	68bb      	ldr	r3, [r7, #8]
 801bf02:	7c9b      	ldrb	r3, [r3, #18]
 801bf04:	00db      	lsls	r3, r3, #3
 801bf06:	b2da      	uxtb	r2, r3
 801bf08:	4b2f      	ldr	r3, [pc, #188]	@ (801bfc8 <RadioSetTxGenericConfig+0x2e4>)
 801bf0a:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801bf0c:	4b2e      	ldr	r3, [pc, #184]	@ (801bfc8 <RadioSetTxGenericConfig+0x2e4>)
 801bf0e:	2200      	movs	r2, #0
 801bf10:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801bf12:	68bb      	ldr	r3, [r7, #8]
 801bf14:	7d9b      	ldrb	r3, [r3, #22]
 801bf16:	2b02      	cmp	r3, #2
 801bf18:	d003      	beq.n	801bf22 <RadioSetTxGenericConfig+0x23e>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801bf1a:	68bb      	ldr	r3, [r7, #8]
 801bf1c:	7d1b      	ldrb	r3, [r3, #20]
 801bf1e:	2b02      	cmp	r3, #2
 801bf20:	d12a      	bne.n	801bf78 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801bf22:	68bb      	ldr	r3, [r7, #8]
 801bf24:	7d5b      	ldrb	r3, [r3, #21]
 801bf26:	2bf1      	cmp	r3, #241	@ 0xf1
 801bf28:	d00a      	beq.n	801bf40 <RadioSetTxGenericConfig+0x25c>
 801bf2a:	68bb      	ldr	r3, [r7, #8]
 801bf2c:	7d5b      	ldrb	r3, [r3, #21]
 801bf2e:	2bf2      	cmp	r3, #242	@ 0xf2
 801bf30:	d006      	beq.n	801bf40 <RadioSetTxGenericConfig+0x25c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801bf32:	68bb      	ldr	r3, [r7, #8]
 801bf34:	7d5b      	ldrb	r3, [r3, #21]
 801bf36:	2b01      	cmp	r3, #1
 801bf38:	d002      	beq.n	801bf40 <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 801bf3a:	f04f 33ff 	mov.w	r3, #4294967295
 801bf3e:	e0fd      	b.n	801c13c <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 801bf40:	2301      	movs	r3, #1
 801bf42:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 801bf44:	68bb      	ldr	r3, [r7, #8]
 801bf46:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801bf48:	4b20      	ldr	r3, [pc, #128]	@ (801bfcc <RadioSetTxGenericConfig+0x2e8>)
 801bf4a:	6819      	ldr	r1, [r3, #0]
 801bf4c:	f107 0314 	add.w	r3, r7, #20
 801bf50:	4a1f      	ldr	r2, [pc, #124]	@ (801bfd0 <RadioSetTxGenericConfig+0x2ec>)
 801bf52:	4618      	mov	r0, r3
 801bf54:	f001 fb04 	bl	801d560 <RFW_Init>
 801bf58:	4603      	mov	r3, r0
 801bf5a:	2b00      	cmp	r3, #0
 801bf5c:	d002      	beq.n	801bf64 <RadioSetTxGenericConfig+0x280>
            {
                return -1;
 801bf5e:	f04f 33ff 	mov.w	r3, #4294967295
 801bf62:	e0eb      	b.n	801c13c <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801bf64:	4b18      	ldr	r3, [pc, #96]	@ (801bfc8 <RadioSetTxGenericConfig+0x2e4>)
 801bf66:	2200      	movs	r2, #0
 801bf68:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801bf6a:	4b17      	ldr	r3, [pc, #92]	@ (801bfc8 <RadioSetTxGenericConfig+0x2e4>)
 801bf6c:	2201      	movs	r2, #1
 801bf6e:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801bf70:	4b15      	ldr	r3, [pc, #84]	@ (801bfc8 <RadioSetTxGenericConfig+0x2e4>)
 801bf72:	2200      	movs	r2, #0
 801bf74:	755a      	strb	r2, [r3, #21]
        {
 801bf76:	e00b      	b.n	801bf90 <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801bf78:	68bb      	ldr	r3, [r7, #8]
 801bf7a:	7d5a      	ldrb	r2, [r3, #21]
 801bf7c:	4b12      	ldr	r3, [pc, #72]	@ (801bfc8 <RadioSetTxGenericConfig+0x2e4>)
 801bf7e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801bf80:	68bb      	ldr	r3, [r7, #8]
 801bf82:	7d9a      	ldrb	r2, [r3, #22]
 801bf84:	4b10      	ldr	r3, [pc, #64]	@ (801bfc8 <RadioSetTxGenericConfig+0x2e4>)
 801bf86:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 801bf88:	68bb      	ldr	r3, [r7, #8]
 801bf8a:	7d1a      	ldrb	r2, [r3, #20]
 801bf8c:	4b0e      	ldr	r3, [pc, #56]	@ (801bfc8 <RadioSetTxGenericConfig+0x2e4>)
 801bf8e:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801bf90:	f7fe fffd 	bl	801af8e <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801bf94:	2000      	movs	r0, #0
 801bf96:	f7fe f991 	bl	801a2bc <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801bf9a:	480e      	ldr	r0, [pc, #56]	@ (801bfd4 <RadioSetTxGenericConfig+0x2f0>)
 801bf9c:	f000 fdec 	bl	801cb78 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801bfa0:	480d      	ldr	r0, [pc, #52]	@ (801bfd8 <RadioSetTxGenericConfig+0x2f4>)
 801bfa2:	f000 febb 	bl	801cd1c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801bfa6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801bfaa:	4618      	mov	r0, r3
 801bfac:	f000 f97f 	bl	801c2ae <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801bfb0:	68bb      	ldr	r3, [r7, #8]
 801bfb2:	8a1b      	ldrh	r3, [r3, #16]
 801bfb4:	4618      	mov	r0, r3
 801bfb6:	f000 f9c9 	bl	801c34c <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 801bfba:	68bb      	ldr	r3, [r7, #8]
 801bfbc:	899b      	ldrh	r3, [r3, #12]
 801bfbe:	4618      	mov	r0, r3
 801bfc0:	f000 f9a4 	bl	801c30c <SUBGRF_SetCrcPolynomial>
        break;
 801bfc4:	e0a6      	b.n	801c114 <RadioSetTxGenericConfig+0x430>
 801bfc6:	bf00      	nop
 801bfc8:	20001b88 	.word	0x20001b88
 801bfcc:	20001b84 	.word	0x20001b84
 801bfd0:	20001be4 	.word	0x20001be4
 801bfd4:	20001bc0 	.word	0x20001bc0
 801bfd8:	20001b96 	.word	0x20001b96
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801bfdc:	4b59      	ldr	r3, [pc, #356]	@ (801c144 <RadioSetTxGenericConfig+0x460>)
 801bfde:	2201      	movs	r2, #1
 801bfe0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801bfe4:	68bb      	ldr	r3, [r7, #8]
 801bfe6:	781a      	ldrb	r2, [r3, #0]
 801bfe8:	4b56      	ldr	r3, [pc, #344]	@ (801c144 <RadioSetTxGenericConfig+0x460>)
 801bfea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801bfee:	68bb      	ldr	r3, [r7, #8]
 801bff0:	785a      	ldrb	r2, [r3, #1]
 801bff2:	4b54      	ldr	r3, [pc, #336]	@ (801c144 <RadioSetTxGenericConfig+0x460>)
 801bff4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801bff8:	68bb      	ldr	r3, [r7, #8]
 801bffa:	789a      	ldrb	r2, [r3, #2]
 801bffc:	4b51      	ldr	r3, [pc, #324]	@ (801c144 <RadioSetTxGenericConfig+0x460>)
 801bffe:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 801c002:	68bb      	ldr	r3, [r7, #8]
 801c004:	78db      	ldrb	r3, [r3, #3]
 801c006:	2b02      	cmp	r3, #2
 801c008:	d010      	beq.n	801c02c <RadioSetTxGenericConfig+0x348>
 801c00a:	2b02      	cmp	r3, #2
 801c00c:	dc20      	bgt.n	801c050 <RadioSetTxGenericConfig+0x36c>
 801c00e:	2b00      	cmp	r3, #0
 801c010:	d002      	beq.n	801c018 <RadioSetTxGenericConfig+0x334>
 801c012:	2b01      	cmp	r3, #1
 801c014:	d005      	beq.n	801c022 <RadioSetTxGenericConfig+0x33e>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 801c016:	e01b      	b.n	801c050 <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801c018:	4b4a      	ldr	r3, [pc, #296]	@ (801c144 <RadioSetTxGenericConfig+0x460>)
 801c01a:	2200      	movs	r2, #0
 801c01c:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801c020:	e017      	b.n	801c052 <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801c022:	4b48      	ldr	r3, [pc, #288]	@ (801c144 <RadioSetTxGenericConfig+0x460>)
 801c024:	2201      	movs	r2, #1
 801c026:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801c02a:	e012      	b.n	801c052 <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801c02c:	68bb      	ldr	r3, [r7, #8]
 801c02e:	781b      	ldrb	r3, [r3, #0]
 801c030:	2b0b      	cmp	r3, #11
 801c032:	d003      	beq.n	801c03c <RadioSetTxGenericConfig+0x358>
 801c034:	68bb      	ldr	r3, [r7, #8]
 801c036:	781b      	ldrb	r3, [r3, #0]
 801c038:	2b0c      	cmp	r3, #12
 801c03a:	d104      	bne.n	801c046 <RadioSetTxGenericConfig+0x362>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801c03c:	4b41      	ldr	r3, [pc, #260]	@ (801c144 <RadioSetTxGenericConfig+0x460>)
 801c03e:	2201      	movs	r2, #1
 801c040:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801c044:	e005      	b.n	801c052 <RadioSetTxGenericConfig+0x36e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801c046:	4b3f      	ldr	r3, [pc, #252]	@ (801c144 <RadioSetTxGenericConfig+0x460>)
 801c048:	2200      	movs	r2, #0
 801c04a:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801c04e:	e000      	b.n	801c052 <RadioSetTxGenericConfig+0x36e>
            break;
 801c050:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801c052:	4b3c      	ldr	r3, [pc, #240]	@ (801c144 <RadioSetTxGenericConfig+0x460>)
 801c054:	2201      	movs	r2, #1
 801c056:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801c058:	68bb      	ldr	r3, [r7, #8]
 801c05a:	889a      	ldrh	r2, [r3, #4]
 801c05c:	4b39      	ldr	r3, [pc, #228]	@ (801c144 <RadioSetTxGenericConfig+0x460>)
 801c05e:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801c060:	68bb      	ldr	r3, [r7, #8]
 801c062:	799a      	ldrb	r2, [r3, #6]
 801c064:	4b37      	ldr	r3, [pc, #220]	@ (801c144 <RadioSetTxGenericConfig+0x460>)
 801c066:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801c068:	68bb      	ldr	r3, [r7, #8]
 801c06a:	79da      	ldrb	r2, [r3, #7]
 801c06c:	4b35      	ldr	r3, [pc, #212]	@ (801c144 <RadioSetTxGenericConfig+0x460>)
 801c06e:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801c072:	68bb      	ldr	r3, [r7, #8]
 801c074:	7a1a      	ldrb	r2, [r3, #8]
 801c076:	4b33      	ldr	r3, [pc, #204]	@ (801c144 <RadioSetTxGenericConfig+0x460>)
 801c078:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        RadioStandby( );
 801c07c:	f7fe ff87 	bl	801af8e <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801c080:	2001      	movs	r0, #1
 801c082:	f7fe f91b 	bl	801a2bc <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801c086:	4830      	ldr	r0, [pc, #192]	@ (801c148 <RadioSetTxGenericConfig+0x464>)
 801c088:	f000 fd76 	bl	801cb78 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c08c:	482f      	ldr	r0, [pc, #188]	@ (801c14c <RadioSetTxGenericConfig+0x468>)
 801c08e:	f000 fe45 	bl	801cd1c <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 801c092:	4b2c      	ldr	r3, [pc, #176]	@ (801c144 <RadioSetTxGenericConfig+0x460>)
 801c094:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 801c098:	2b06      	cmp	r3, #6
 801c09a:	d10d      	bne.n	801c0b8 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801c09c:	f640 0089 	movw	r0, #2185	@ 0x889
 801c0a0:	f000 ff98 	bl	801cfd4 <SUBGRF_ReadRegister>
 801c0a4:	4603      	mov	r3, r0
 801c0a6:	f023 0304 	bic.w	r3, r3, #4
 801c0aa:	b2db      	uxtb	r3, r3
 801c0ac:	4619      	mov	r1, r3
 801c0ae:	f640 0089 	movw	r0, #2185	@ 0x889
 801c0b2:	f000 ff7b 	bl	801cfac <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 801c0b6:	e02d      	b.n	801c114 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 801c0b8:	f640 0089 	movw	r0, #2185	@ 0x889
 801c0bc:	f000 ff8a 	bl	801cfd4 <SUBGRF_ReadRegister>
 801c0c0:	4603      	mov	r3, r0
 801c0c2:	f043 0304 	orr.w	r3, r3, #4
 801c0c6:	b2db      	uxtb	r3, r3
 801c0c8:	4619      	mov	r1, r3
 801c0ca:	f640 0089 	movw	r0, #2185	@ 0x889
 801c0ce:	f000 ff6d 	bl	801cfac <SUBGRF_WriteRegister>
        break;
 801c0d2:	e01f      	b.n	801c114 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 801c0d4:	68bb      	ldr	r3, [r7, #8]
 801c0d6:	681b      	ldr	r3, [r3, #0]
 801c0d8:	2b00      	cmp	r3, #0
 801c0da:	d004      	beq.n	801c0e6 <RadioSetTxGenericConfig+0x402>
 801c0dc:	68bb      	ldr	r3, [r7, #8]
 801c0de:	681b      	ldr	r3, [r3, #0]
 801c0e0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801c0e4:	d902      	bls.n	801c0ec <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 801c0e6:	f04f 33ff 	mov.w	r3, #4294967295
 801c0ea:	e027      	b.n	801c13c <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 801c0ec:	2003      	movs	r0, #3
 801c0ee:	f7fe f8e5 	bl	801a2bc <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801c0f2:	4b14      	ldr	r3, [pc, #80]	@ (801c144 <RadioSetTxGenericConfig+0x460>)
 801c0f4:	2202      	movs	r2, #2
 801c0f6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 801c0fa:	68bb      	ldr	r3, [r7, #8]
 801c0fc:	681b      	ldr	r3, [r3, #0]
 801c0fe:	4a11      	ldr	r2, [pc, #68]	@ (801c144 <RadioSetTxGenericConfig+0x460>)
 801c100:	6493      	str	r3, [r2, #72]	@ 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801c102:	4b10      	ldr	r3, [pc, #64]	@ (801c144 <RadioSetTxGenericConfig+0x460>)
 801c104:	2216      	movs	r2, #22
 801c106:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801c10a:	480f      	ldr	r0, [pc, #60]	@ (801c148 <RadioSetTxGenericConfig+0x464>)
 801c10c:	f000 fd34 	bl	801cb78 <SUBGRF_SetModulationParams>
        break;
 801c110:	e000      	b.n	801c114 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 801c112:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801c114:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801c118:	4618      	mov	r0, r3
 801c11a:	f001 f863 	bl	801d1e4 <SUBGRF_SetRfTxPower>
 801c11e:	4603      	mov	r3, r0
 801c120:	461a      	mov	r2, r3
 801c122:	4b08      	ldr	r3, [pc, #32]	@ (801c144 <RadioSetTxGenericConfig+0x460>)
 801c124:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 801c128:	4b06      	ldr	r3, [pc, #24]	@ (801c144 <RadioSetTxGenericConfig+0x460>)
 801c12a:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 801c12e:	4618      	mov	r0, r3
 801c130:	f001 fa37 	bl	801d5a2 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801c134:	4a03      	ldr	r2, [pc, #12]	@ (801c144 <RadioSetTxGenericConfig+0x460>)
 801c136:	687b      	ldr	r3, [r7, #4]
 801c138:	6053      	str	r3, [r2, #4]
    return 0;
 801c13a:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801c13c:	4618      	mov	r0, r3
 801c13e:	3738      	adds	r7, #56	@ 0x38
 801c140:	46bd      	mov	sp, r7
 801c142:	bd80      	pop	{r7, pc}
 801c144:	20001b88 	.word	0x20001b88
 801c148:	20001bc0 	.word	0x20001bc0
 801c14c:	20001b96 	.word	0x20001b96

0801c150 <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 801c150:	b480      	push	{r7}
 801c152:	b085      	sub	sp, #20
 801c154:	af00      	add	r7, sp, #0
 801c156:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 801c158:	2301      	movs	r3, #1
 801c15a:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 801c15c:	7bfb      	ldrb	r3, [r7, #15]
}
 801c15e:	4618      	mov	r0, r3
 801c160:	3714      	adds	r7, #20
 801c162:	46bd      	mov	sp, r7
 801c164:	bc80      	pop	{r7}
 801c166:	4770      	bx	lr

0801c168 <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 801c168:	b480      	push	{r7}
 801c16a:	b083      	sub	sp, #12
 801c16c:	af00      	add	r7, sp, #0
 801c16e:	6078      	str	r0, [r7, #4]
 801c170:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 801c172:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 801c174:	4618      	mov	r0, r3
 801c176:	370c      	adds	r7, #12
 801c178:	46bd      	mov	sp, r7
 801c17a:	bc80      	pop	{r7}
 801c17c:	4770      	bx	lr
	...

0801c180 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 801c180:	b580      	push	{r7, lr}
 801c182:	b084      	sub	sp, #16
 801c184:	af00      	add	r7, sp, #0
 801c186:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 801c188:	687b      	ldr	r3, [r7, #4]
 801c18a:	2b00      	cmp	r3, #0
 801c18c:	d002      	beq.n	801c194 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 801c18e:	4a1d      	ldr	r2, [pc, #116]	@ (801c204 <SUBGRF_Init+0x84>)
 801c190:	687b      	ldr	r3, [r7, #4]
 801c192:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 801c194:	f7e6 f9ec 	bl	8002570 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801c198:	2002      	movs	r0, #2
 801c19a:	f001 f8ff 	bl	801d39c <Radio_SMPS_Set>

    ImageCalibrated = false;
 801c19e:	4b1a      	ldr	r3, [pc, #104]	@ (801c208 <SUBGRF_Init+0x88>)
 801c1a0:	2200      	movs	r2, #0
 801c1a2:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 801c1a4:	2000      	movs	r0, #0
 801c1a6:	f000 f97d 	bl	801c4a4 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 801c1aa:	f7ef ff71 	bl	800c090 <RBI_IsTCXO>
 801c1ae:	4603      	mov	r3, r0
 801c1b0:	2b01      	cmp	r3, #1
 801c1b2:	d10e      	bne.n	801c1d2 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 801c1b4:	2140      	movs	r1, #64	@ 0x40
 801c1b6:	2001      	movs	r0, #1
 801c1b8:	f000 fb82 	bl	801c8c0 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 801c1bc:	2100      	movs	r1, #0
 801c1be:	f640 1011 	movw	r0, #2321	@ 0x911
 801c1c2:	f000 fef3 	bl	801cfac <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 801c1c6:	237f      	movs	r3, #127	@ 0x7f
 801c1c8:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 801c1ca:	7b38      	ldrb	r0, [r7, #12]
 801c1cc:	f000 fa8b 	bl	801c6e6 <SUBGRF_Calibrate>
 801c1d0:	e009      	b.n	801c1e6 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801c1d2:	2120      	movs	r1, #32
 801c1d4:	f640 1011 	movw	r0, #2321	@ 0x911
 801c1d8:	f000 fee8 	bl	801cfac <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801c1dc:	2120      	movs	r1, #32
 801c1de:	f640 1012 	movw	r0, #2322	@ 0x912
 801c1e2:	f000 fee3 	bl	801cfac <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801c1e6:	210e      	movs	r1, #14
 801c1e8:	f640 101f 	movw	r0, #2335	@ 0x91f
 801c1ec:	f000 fede 	bl	801cfac <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 801c1f0:	f7ef ff32 	bl	800c058 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 801c1f4:	4b05      	ldr	r3, [pc, #20]	@ (801c20c <SUBGRF_Init+0x8c>)
 801c1f6:	2201      	movs	r2, #1
 801c1f8:	701a      	strb	r2, [r3, #0]
}
 801c1fa:	bf00      	nop
 801c1fc:	3710      	adds	r7, #16
 801c1fe:	46bd      	mov	sp, r7
 801c200:	bd80      	pop	{r7, pc}
 801c202:	bf00      	nop
 801c204:	20001c20 	.word	0x20001c20
 801c208:	20001c1c 	.word	0x20001c1c
 801c20c:	20001c14 	.word	0x20001c14

0801c210 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 801c210:	b480      	push	{r7}
 801c212:	af00      	add	r7, sp, #0
    return OperatingMode;
 801c214:	4b02      	ldr	r3, [pc, #8]	@ (801c220 <SUBGRF_GetOperatingMode+0x10>)
 801c216:	781b      	ldrb	r3, [r3, #0]
}
 801c218:	4618      	mov	r0, r3
 801c21a:	46bd      	mov	sp, r7
 801c21c:	bc80      	pop	{r7}
 801c21e:	4770      	bx	lr
 801c220:	20001c14 	.word	0x20001c14

0801c224 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 801c224:	b580      	push	{r7, lr}
 801c226:	b082      	sub	sp, #8
 801c228:	af00      	add	r7, sp, #0
 801c22a:	6078      	str	r0, [r7, #4]
 801c22c:	460b      	mov	r3, r1
 801c22e:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 801c230:	78fb      	ldrb	r3, [r7, #3]
 801c232:	461a      	mov	r2, r3
 801c234:	6879      	ldr	r1, [r7, #4]
 801c236:	2000      	movs	r0, #0
 801c238:	f000 ff24 	bl	801d084 <SUBGRF_WriteBuffer>
}
 801c23c:	bf00      	nop
 801c23e:	3708      	adds	r7, #8
 801c240:	46bd      	mov	sp, r7
 801c242:	bd80      	pop	{r7, pc}

0801c244 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 801c244:	b580      	push	{r7, lr}
 801c246:	b086      	sub	sp, #24
 801c248:	af00      	add	r7, sp, #0
 801c24a:	60f8      	str	r0, [r7, #12]
 801c24c:	60b9      	str	r1, [r7, #8]
 801c24e:	4613      	mov	r3, r2
 801c250:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 801c252:	2300      	movs	r3, #0
 801c254:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 801c256:	f107 0317 	add.w	r3, r7, #23
 801c25a:	4619      	mov	r1, r3
 801c25c:	68b8      	ldr	r0, [r7, #8]
 801c25e:	f000 fe27 	bl	801ceb0 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 801c262:	68bb      	ldr	r3, [r7, #8]
 801c264:	781b      	ldrb	r3, [r3, #0]
 801c266:	79fa      	ldrb	r2, [r7, #7]
 801c268:	429a      	cmp	r2, r3
 801c26a:	d201      	bcs.n	801c270 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 801c26c:	2301      	movs	r3, #1
 801c26e:	e007      	b.n	801c280 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 801c270:	7df8      	ldrb	r0, [r7, #23]
 801c272:	68bb      	ldr	r3, [r7, #8]
 801c274:	781b      	ldrb	r3, [r3, #0]
 801c276:	461a      	mov	r2, r3
 801c278:	68f9      	ldr	r1, [r7, #12]
 801c27a:	f000 ff25 	bl	801d0c8 <SUBGRF_ReadBuffer>

    return 0;
 801c27e:	2300      	movs	r3, #0
}
 801c280:	4618      	mov	r0, r3
 801c282:	3718      	adds	r7, #24
 801c284:	46bd      	mov	sp, r7
 801c286:	bd80      	pop	{r7, pc}

0801c288 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 801c288:	b580      	push	{r7, lr}
 801c28a:	b084      	sub	sp, #16
 801c28c:	af00      	add	r7, sp, #0
 801c28e:	60f8      	str	r0, [r7, #12]
 801c290:	460b      	mov	r3, r1
 801c292:	607a      	str	r2, [r7, #4]
 801c294:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 801c296:	7afb      	ldrb	r3, [r7, #11]
 801c298:	4619      	mov	r1, r3
 801c29a:	68f8      	ldr	r0, [r7, #12]
 801c29c:	f7ff ffc2 	bl	801c224 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 801c2a0:	6878      	ldr	r0, [r7, #4]
 801c2a2:	f000 f91b 	bl	801c4dc <SUBGRF_SetTx>
}
 801c2a6:	bf00      	nop
 801c2a8:	3710      	adds	r7, #16
 801c2aa:	46bd      	mov	sp, r7
 801c2ac:	bd80      	pop	{r7, pc}

0801c2ae <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 801c2ae:	b580      	push	{r7, lr}
 801c2b0:	b082      	sub	sp, #8
 801c2b2:	af00      	add	r7, sp, #0
 801c2b4:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 801c2b6:	2208      	movs	r2, #8
 801c2b8:	6879      	ldr	r1, [r7, #4]
 801c2ba:	f44f 60d8 	mov.w	r0, #1728	@ 0x6c0
 801c2be:	f000 fe9d 	bl	801cffc <SUBGRF_WriteRegisters>
    return 0;
 801c2c2:	2300      	movs	r3, #0
}
 801c2c4:	4618      	mov	r0, r3
 801c2c6:	3708      	adds	r7, #8
 801c2c8:	46bd      	mov	sp, r7
 801c2ca:	bd80      	pop	{r7, pc}

0801c2cc <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 801c2cc:	b580      	push	{r7, lr}
 801c2ce:	b084      	sub	sp, #16
 801c2d0:	af00      	add	r7, sp, #0
 801c2d2:	4603      	mov	r3, r0
 801c2d4:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 801c2d6:	88fb      	ldrh	r3, [r7, #6]
 801c2d8:	0a1b      	lsrs	r3, r3, #8
 801c2da:	b29b      	uxth	r3, r3
 801c2dc:	b2db      	uxtb	r3, r3
 801c2de:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 801c2e0:	88fb      	ldrh	r3, [r7, #6]
 801c2e2:	b2db      	uxtb	r3, r3
 801c2e4:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801c2e6:	f000 fb6f 	bl	801c9c8 <SUBGRF_GetPacketType>
 801c2ea:	4603      	mov	r3, r0
 801c2ec:	2b00      	cmp	r3, #0
 801c2ee:	d108      	bne.n	801c302 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 801c2f0:	f107 030c 	add.w	r3, r7, #12
 801c2f4:	2202      	movs	r2, #2
 801c2f6:	4619      	mov	r1, r3
 801c2f8:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 801c2fc:	f000 fe7e 	bl	801cffc <SUBGRF_WriteRegisters>
            break;
 801c300:	e000      	b.n	801c304 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 801c302:	bf00      	nop
    }
}
 801c304:	bf00      	nop
 801c306:	3710      	adds	r7, #16
 801c308:	46bd      	mov	sp, r7
 801c30a:	bd80      	pop	{r7, pc}

0801c30c <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 801c30c:	b580      	push	{r7, lr}
 801c30e:	b084      	sub	sp, #16
 801c310:	af00      	add	r7, sp, #0
 801c312:	4603      	mov	r3, r0
 801c314:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 801c316:	88fb      	ldrh	r3, [r7, #6]
 801c318:	0a1b      	lsrs	r3, r3, #8
 801c31a:	b29b      	uxth	r3, r3
 801c31c:	b2db      	uxtb	r3, r3
 801c31e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 801c320:	88fb      	ldrh	r3, [r7, #6]
 801c322:	b2db      	uxtb	r3, r3
 801c324:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801c326:	f000 fb4f 	bl	801c9c8 <SUBGRF_GetPacketType>
 801c32a:	4603      	mov	r3, r0
 801c32c:	2b00      	cmp	r3, #0
 801c32e:	d108      	bne.n	801c342 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 801c330:	f107 030c 	add.w	r3, r7, #12
 801c334:	2202      	movs	r2, #2
 801c336:	4619      	mov	r1, r3
 801c338:	f240 60be 	movw	r0, #1726	@ 0x6be
 801c33c:	f000 fe5e 	bl	801cffc <SUBGRF_WriteRegisters>
            break;
 801c340:	e000      	b.n	801c344 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 801c342:	bf00      	nop
    }
}
 801c344:	bf00      	nop
 801c346:	3710      	adds	r7, #16
 801c348:	46bd      	mov	sp, r7
 801c34a:	bd80      	pop	{r7, pc}

0801c34c <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 801c34c:	b580      	push	{r7, lr}
 801c34e:	b084      	sub	sp, #16
 801c350:	af00      	add	r7, sp, #0
 801c352:	4603      	mov	r3, r0
 801c354:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 801c356:	2300      	movs	r3, #0
 801c358:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 801c35a:	f000 fb35 	bl	801c9c8 <SUBGRF_GetPacketType>
 801c35e:	4603      	mov	r3, r0
 801c360:	2b00      	cmp	r3, #0
 801c362:	d121      	bne.n	801c3a8 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 801c364:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 801c368:	f000 fe34 	bl	801cfd4 <SUBGRF_ReadRegister>
 801c36c:	4603      	mov	r3, r0
 801c36e:	f023 0301 	bic.w	r3, r3, #1
 801c372:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 801c374:	88fb      	ldrh	r3, [r7, #6]
 801c376:	0a1b      	lsrs	r3, r3, #8
 801c378:	b29b      	uxth	r3, r3
 801c37a:	b25b      	sxtb	r3, r3
 801c37c:	f003 0301 	and.w	r3, r3, #1
 801c380:	b25a      	sxtb	r2, r3
 801c382:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c386:	4313      	orrs	r3, r2
 801c388:	b25b      	sxtb	r3, r3
 801c38a:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 801c38c:	7bfb      	ldrb	r3, [r7, #15]
 801c38e:	4619      	mov	r1, r3
 801c390:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 801c394:	f000 fe0a 	bl	801cfac <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 801c398:	88fb      	ldrh	r3, [r7, #6]
 801c39a:	b2db      	uxtb	r3, r3
 801c39c:	4619      	mov	r1, r3
 801c39e:	f240 60b9 	movw	r0, #1721	@ 0x6b9
 801c3a2:	f000 fe03 	bl	801cfac <SUBGRF_WriteRegister>
            break;
 801c3a6:	e000      	b.n	801c3aa <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 801c3a8:	bf00      	nop
    }
}
 801c3aa:	bf00      	nop
 801c3ac:	3710      	adds	r7, #16
 801c3ae:	46bd      	mov	sp, r7
 801c3b0:	bd80      	pop	{r7, pc}

0801c3b2 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 801c3b2:	b580      	push	{r7, lr}
 801c3b4:	b082      	sub	sp, #8
 801c3b6:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 801c3b8:	2300      	movs	r3, #0
 801c3ba:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 801c3bc:	2300      	movs	r3, #0
 801c3be:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 801c3c0:	2300      	movs	r3, #0
 801c3c2:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 801c3c4:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 801c3c8:	f000 fe04 	bl	801cfd4 <SUBGRF_ReadRegister>
 801c3cc:	4603      	mov	r3, r0
 801c3ce:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 801c3d0:	79fb      	ldrb	r3, [r7, #7]
 801c3d2:	f023 0301 	bic.w	r3, r3, #1
 801c3d6:	b2db      	uxtb	r3, r3
 801c3d8:	4619      	mov	r1, r3
 801c3da:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 801c3de:	f000 fde5 	bl	801cfac <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 801c3e2:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 801c3e6:	f000 fdf5 	bl	801cfd4 <SUBGRF_ReadRegister>
 801c3ea:	4603      	mov	r3, r0
 801c3ec:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 801c3ee:	79bb      	ldrb	r3, [r7, #6]
 801c3f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801c3f4:	b2db      	uxtb	r3, r3
 801c3f6:	4619      	mov	r1, r3
 801c3f8:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 801c3fc:	f000 fdd6 	bl	801cfac <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801c400:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 801c404:	f000 f88a 	bl	801c51c <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 801c408:	463b      	mov	r3, r7
 801c40a:	2204      	movs	r2, #4
 801c40c:	4619      	mov	r1, r3
 801c40e:	f640 0019 	movw	r0, #2073	@ 0x819
 801c412:	f000 fe15 	bl	801d040 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 801c416:	2000      	movs	r0, #0
 801c418:	f000 f844 	bl	801c4a4 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 801c41c:	79fb      	ldrb	r3, [r7, #7]
 801c41e:	4619      	mov	r1, r3
 801c420:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 801c424:	f000 fdc2 	bl	801cfac <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 801c428:	79bb      	ldrb	r3, [r7, #6]
 801c42a:	4619      	mov	r1, r3
 801c42c:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 801c430:	f000 fdbc 	bl	801cfac <SUBGRF_WriteRegister>

    return number;
 801c434:	683b      	ldr	r3, [r7, #0]
}
 801c436:	4618      	mov	r0, r3
 801c438:	3708      	adds	r7, #8
 801c43a:	46bd      	mov	sp, r7
 801c43c:	bd80      	pop	{r7, pc}
	...

0801c440 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 801c440:	b580      	push	{r7, lr}
 801c442:	b084      	sub	sp, #16
 801c444:	af00      	add	r7, sp, #0
 801c446:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 801c448:	2000      	movs	r0, #0
 801c44a:	f7ef fe0c 	bl	800c066 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801c44e:	2002      	movs	r0, #2
 801c450:	f000 ffa4 	bl	801d39c <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801c454:	793b      	ldrb	r3, [r7, #4]
 801c456:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801c45a:	b2db      	uxtb	r3, r3
 801c45c:	009b      	lsls	r3, r3, #2
 801c45e:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801c460:	793b      	ldrb	r3, [r7, #4]
 801c462:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801c466:	b2db      	uxtb	r3, r3
 801c468:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801c46a:	b25b      	sxtb	r3, r3
 801c46c:	4313      	orrs	r3, r2
 801c46e:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 801c470:	793b      	ldrb	r3, [r7, #4]
 801c472:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801c476:	b2db      	uxtb	r3, r3
 801c478:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801c47a:	4313      	orrs	r3, r2
 801c47c:	b25b      	sxtb	r3, r3
 801c47e:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801c480:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 801c482:	f107 030f 	add.w	r3, r7, #15
 801c486:	2201      	movs	r2, #1
 801c488:	4619      	mov	r1, r3
 801c48a:	2084      	movs	r0, #132	@ 0x84
 801c48c:	f000 fe3e 	bl	801d10c <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 801c490:	4b03      	ldr	r3, [pc, #12]	@ (801c4a0 <SUBGRF_SetSleep+0x60>)
 801c492:	2200      	movs	r2, #0
 801c494:	701a      	strb	r2, [r3, #0]
}
 801c496:	bf00      	nop
 801c498:	3710      	adds	r7, #16
 801c49a:	46bd      	mov	sp, r7
 801c49c:	bd80      	pop	{r7, pc}
 801c49e:	bf00      	nop
 801c4a0:	20001c14 	.word	0x20001c14

0801c4a4 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 801c4a4:	b580      	push	{r7, lr}
 801c4a6:	b082      	sub	sp, #8
 801c4a8:	af00      	add	r7, sp, #0
 801c4aa:	4603      	mov	r3, r0
 801c4ac:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 801c4ae:	1dfb      	adds	r3, r7, #7
 801c4b0:	2201      	movs	r2, #1
 801c4b2:	4619      	mov	r1, r3
 801c4b4:	2080      	movs	r0, #128	@ 0x80
 801c4b6:	f000 fe29 	bl	801d10c <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 801c4ba:	79fb      	ldrb	r3, [r7, #7]
 801c4bc:	2b00      	cmp	r3, #0
 801c4be:	d103      	bne.n	801c4c8 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 801c4c0:	4b05      	ldr	r3, [pc, #20]	@ (801c4d8 <SUBGRF_SetStandby+0x34>)
 801c4c2:	2201      	movs	r2, #1
 801c4c4:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 801c4c6:	e002      	b.n	801c4ce <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 801c4c8:	4b03      	ldr	r3, [pc, #12]	@ (801c4d8 <SUBGRF_SetStandby+0x34>)
 801c4ca:	2202      	movs	r2, #2
 801c4cc:	701a      	strb	r2, [r3, #0]
}
 801c4ce:	bf00      	nop
 801c4d0:	3708      	adds	r7, #8
 801c4d2:	46bd      	mov	sp, r7
 801c4d4:	bd80      	pop	{r7, pc}
 801c4d6:	bf00      	nop
 801c4d8:	20001c14 	.word	0x20001c14

0801c4dc <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 801c4dc:	b580      	push	{r7, lr}
 801c4de:	b084      	sub	sp, #16
 801c4e0:	af00      	add	r7, sp, #0
 801c4e2:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 801c4e4:	4b0c      	ldr	r3, [pc, #48]	@ (801c518 <SUBGRF_SetTx+0x3c>)
 801c4e6:	2204      	movs	r2, #4
 801c4e8:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801c4ea:	687b      	ldr	r3, [r7, #4]
 801c4ec:	0c1b      	lsrs	r3, r3, #16
 801c4ee:	b2db      	uxtb	r3, r3
 801c4f0:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801c4f2:	687b      	ldr	r3, [r7, #4]
 801c4f4:	0a1b      	lsrs	r3, r3, #8
 801c4f6:	b2db      	uxtb	r3, r3
 801c4f8:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801c4fa:	687b      	ldr	r3, [r7, #4]
 801c4fc:	b2db      	uxtb	r3, r3
 801c4fe:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 801c500:	f107 030c 	add.w	r3, r7, #12
 801c504:	2203      	movs	r2, #3
 801c506:	4619      	mov	r1, r3
 801c508:	2083      	movs	r0, #131	@ 0x83
 801c50a:	f000 fdff 	bl	801d10c <SUBGRF_WriteCommand>
}
 801c50e:	bf00      	nop
 801c510:	3710      	adds	r7, #16
 801c512:	46bd      	mov	sp, r7
 801c514:	bd80      	pop	{r7, pc}
 801c516:	bf00      	nop
 801c518:	20001c14 	.word	0x20001c14

0801c51c <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 801c51c:	b580      	push	{r7, lr}
 801c51e:	b084      	sub	sp, #16
 801c520:	af00      	add	r7, sp, #0
 801c522:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801c524:	4b0c      	ldr	r3, [pc, #48]	@ (801c558 <SUBGRF_SetRx+0x3c>)
 801c526:	2205      	movs	r2, #5
 801c528:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801c52a:	687b      	ldr	r3, [r7, #4]
 801c52c:	0c1b      	lsrs	r3, r3, #16
 801c52e:	b2db      	uxtb	r3, r3
 801c530:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801c532:	687b      	ldr	r3, [r7, #4]
 801c534:	0a1b      	lsrs	r3, r3, #8
 801c536:	b2db      	uxtb	r3, r3
 801c538:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801c53a:	687b      	ldr	r3, [r7, #4]
 801c53c:	b2db      	uxtb	r3, r3
 801c53e:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801c540:	f107 030c 	add.w	r3, r7, #12
 801c544:	2203      	movs	r2, #3
 801c546:	4619      	mov	r1, r3
 801c548:	2082      	movs	r0, #130	@ 0x82
 801c54a:	f000 fddf 	bl	801d10c <SUBGRF_WriteCommand>
}
 801c54e:	bf00      	nop
 801c550:	3710      	adds	r7, #16
 801c552:	46bd      	mov	sp, r7
 801c554:	bd80      	pop	{r7, pc}
 801c556:	bf00      	nop
 801c558:	20001c14 	.word	0x20001c14

0801c55c <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 801c55c:	b580      	push	{r7, lr}
 801c55e:	b084      	sub	sp, #16
 801c560:	af00      	add	r7, sp, #0
 801c562:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801c564:	4b0e      	ldr	r3, [pc, #56]	@ (801c5a0 <SUBGRF_SetRxBoosted+0x44>)
 801c566:	2205      	movs	r2, #5
 801c568:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 801c56a:	2197      	movs	r1, #151	@ 0x97
 801c56c:	f640 00ac 	movw	r0, #2220	@ 0x8ac
 801c570:	f000 fd1c 	bl	801cfac <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801c574:	687b      	ldr	r3, [r7, #4]
 801c576:	0c1b      	lsrs	r3, r3, #16
 801c578:	b2db      	uxtb	r3, r3
 801c57a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801c57c:	687b      	ldr	r3, [r7, #4]
 801c57e:	0a1b      	lsrs	r3, r3, #8
 801c580:	b2db      	uxtb	r3, r3
 801c582:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801c584:	687b      	ldr	r3, [r7, #4]
 801c586:	b2db      	uxtb	r3, r3
 801c588:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801c58a:	f107 030c 	add.w	r3, r7, #12
 801c58e:	2203      	movs	r2, #3
 801c590:	4619      	mov	r1, r3
 801c592:	2082      	movs	r0, #130	@ 0x82
 801c594:	f000 fdba 	bl	801d10c <SUBGRF_WriteCommand>
}
 801c598:	bf00      	nop
 801c59a:	3710      	adds	r7, #16
 801c59c:	46bd      	mov	sp, r7
 801c59e:	bd80      	pop	{r7, pc}
 801c5a0:	20001c14 	.word	0x20001c14

0801c5a4 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801c5a4:	b580      	push	{r7, lr}
 801c5a6:	b084      	sub	sp, #16
 801c5a8:	af00      	add	r7, sp, #0
 801c5aa:	6078      	str	r0, [r7, #4]
 801c5ac:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 801c5ae:	687b      	ldr	r3, [r7, #4]
 801c5b0:	0c1b      	lsrs	r3, r3, #16
 801c5b2:	b2db      	uxtb	r3, r3
 801c5b4:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 801c5b6:	687b      	ldr	r3, [r7, #4]
 801c5b8:	0a1b      	lsrs	r3, r3, #8
 801c5ba:	b2db      	uxtb	r3, r3
 801c5bc:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 801c5be:	687b      	ldr	r3, [r7, #4]
 801c5c0:	b2db      	uxtb	r3, r3
 801c5c2:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 801c5c4:	683b      	ldr	r3, [r7, #0]
 801c5c6:	0c1b      	lsrs	r3, r3, #16
 801c5c8:	b2db      	uxtb	r3, r3
 801c5ca:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 801c5cc:	683b      	ldr	r3, [r7, #0]
 801c5ce:	0a1b      	lsrs	r3, r3, #8
 801c5d0:	b2db      	uxtb	r3, r3
 801c5d2:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 801c5d4:	683b      	ldr	r3, [r7, #0]
 801c5d6:	b2db      	uxtb	r3, r3
 801c5d8:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 801c5da:	f107 0308 	add.w	r3, r7, #8
 801c5de:	2206      	movs	r2, #6
 801c5e0:	4619      	mov	r1, r3
 801c5e2:	2094      	movs	r0, #148	@ 0x94
 801c5e4:	f000 fd92 	bl	801d10c <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 801c5e8:	4b03      	ldr	r3, [pc, #12]	@ (801c5f8 <SUBGRF_SetRxDutyCycle+0x54>)
 801c5ea:	2206      	movs	r2, #6
 801c5ec:	701a      	strb	r2, [r3, #0]
}
 801c5ee:	bf00      	nop
 801c5f0:	3710      	adds	r7, #16
 801c5f2:	46bd      	mov	sp, r7
 801c5f4:	bd80      	pop	{r7, pc}
 801c5f6:	bf00      	nop
 801c5f8:	20001c14 	.word	0x20001c14

0801c5fc <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 801c5fc:	b580      	push	{r7, lr}
 801c5fe:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 801c600:	2200      	movs	r2, #0
 801c602:	2100      	movs	r1, #0
 801c604:	20c5      	movs	r0, #197	@ 0xc5
 801c606:	f000 fd81 	bl	801d10c <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 801c60a:	4b02      	ldr	r3, [pc, #8]	@ (801c614 <SUBGRF_SetCad+0x18>)
 801c60c:	2207      	movs	r2, #7
 801c60e:	701a      	strb	r2, [r3, #0]
}
 801c610:	bf00      	nop
 801c612:	bd80      	pop	{r7, pc}
 801c614:	20001c14 	.word	0x20001c14

0801c618 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 801c618:	b580      	push	{r7, lr}
 801c61a:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 801c61c:	2200      	movs	r2, #0
 801c61e:	2100      	movs	r1, #0
 801c620:	20d1      	movs	r0, #209	@ 0xd1
 801c622:	f000 fd73 	bl	801d10c <SUBGRF_WriteCommand>
}
 801c626:	bf00      	nop
 801c628:	bd80      	pop	{r7, pc}

0801c62a <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 801c62a:	b580      	push	{r7, lr}
 801c62c:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 801c62e:	2200      	movs	r2, #0
 801c630:	2100      	movs	r1, #0
 801c632:	20d2      	movs	r0, #210	@ 0xd2
 801c634:	f000 fd6a 	bl	801d10c <SUBGRF_WriteCommand>
}
 801c638:	bf00      	nop
 801c63a:	bd80      	pop	{r7, pc}

0801c63c <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 801c63c:	b580      	push	{r7, lr}
 801c63e:	b082      	sub	sp, #8
 801c640:	af00      	add	r7, sp, #0
 801c642:	4603      	mov	r3, r0
 801c644:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 801c646:	1dfb      	adds	r3, r7, #7
 801c648:	2201      	movs	r2, #1
 801c64a:	4619      	mov	r1, r3
 801c64c:	209f      	movs	r0, #159	@ 0x9f
 801c64e:	f000 fd5d 	bl	801d10c <SUBGRF_WriteCommand>
}
 801c652:	bf00      	nop
 801c654:	3708      	adds	r7, #8
 801c656:	46bd      	mov	sp, r7
 801c658:	bd80      	pop	{r7, pc}

0801c65a <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 801c65a:	b580      	push	{r7, lr}
 801c65c:	b084      	sub	sp, #16
 801c65e:	af00      	add	r7, sp, #0
 801c660:	4603      	mov	r3, r0
 801c662:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 801c664:	1dfb      	adds	r3, r7, #7
 801c666:	2201      	movs	r2, #1
 801c668:	4619      	mov	r1, r3
 801c66a:	20a0      	movs	r0, #160	@ 0xa0
 801c66c:	f000 fd4e 	bl	801d10c <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 801c670:	79fb      	ldrb	r3, [r7, #7]
 801c672:	2b3f      	cmp	r3, #63	@ 0x3f
 801c674:	d91c      	bls.n	801c6b0 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 801c676:	79fb      	ldrb	r3, [r7, #7]
 801c678:	085b      	lsrs	r3, r3, #1
 801c67a:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 801c67c:	2300      	movs	r3, #0
 801c67e:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 801c680:	2300      	movs	r3, #0
 801c682:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 801c684:	e005      	b.n	801c692 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 801c686:	7bfb      	ldrb	r3, [r7, #15]
 801c688:	089b      	lsrs	r3, r3, #2
 801c68a:	73fb      	strb	r3, [r7, #15]
            exp++;
 801c68c:	7bbb      	ldrb	r3, [r7, #14]
 801c68e:	3301      	adds	r3, #1
 801c690:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 801c692:	7bfb      	ldrb	r3, [r7, #15]
 801c694:	2b1f      	cmp	r3, #31
 801c696:	d8f6      	bhi.n	801c686 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 801c698:	7bfb      	ldrb	r3, [r7, #15]
 801c69a:	00db      	lsls	r3, r3, #3
 801c69c:	b2da      	uxtb	r2, r3
 801c69e:	7bbb      	ldrb	r3, [r7, #14]
 801c6a0:	4413      	add	r3, r2
 801c6a2:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 801c6a4:	7b7b      	ldrb	r3, [r7, #13]
 801c6a6:	4619      	mov	r1, r3
 801c6a8:	f240 7006 	movw	r0, #1798	@ 0x706
 801c6ac:	f000 fc7e 	bl	801cfac <SUBGRF_WriteRegister>
    }
}
 801c6b0:	bf00      	nop
 801c6b2:	3710      	adds	r7, #16
 801c6b4:	46bd      	mov	sp, r7
 801c6b6:	bd80      	pop	{r7, pc}

0801c6b8 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 801c6b8:	b580      	push	{r7, lr}
 801c6ba:	b082      	sub	sp, #8
 801c6bc:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 801c6be:	f7ef fcee 	bl	800c09e <RBI_IsDCDC>
 801c6c2:	4603      	mov	r3, r0
 801c6c4:	2b01      	cmp	r3, #1
 801c6c6:	d102      	bne.n	801c6ce <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 801c6c8:	2301      	movs	r3, #1
 801c6ca:	71fb      	strb	r3, [r7, #7]
 801c6cc:	e001      	b.n	801c6d2 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 801c6ce:	2300      	movs	r3, #0
 801c6d0:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 801c6d2:	1dfb      	adds	r3, r7, #7
 801c6d4:	2201      	movs	r2, #1
 801c6d6:	4619      	mov	r1, r3
 801c6d8:	2096      	movs	r0, #150	@ 0x96
 801c6da:	f000 fd17 	bl	801d10c <SUBGRF_WriteCommand>
}
 801c6de:	bf00      	nop
 801c6e0:	3708      	adds	r7, #8
 801c6e2:	46bd      	mov	sp, r7
 801c6e4:	bd80      	pop	{r7, pc}

0801c6e6 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 801c6e6:	b580      	push	{r7, lr}
 801c6e8:	b084      	sub	sp, #16
 801c6ea:	af00      	add	r7, sp, #0
 801c6ec:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801c6ee:	793b      	ldrb	r3, [r7, #4]
 801c6f0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 801c6f4:	b2db      	uxtb	r3, r3
 801c6f6:	019b      	lsls	r3, r3, #6
 801c6f8:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801c6fa:	793b      	ldrb	r3, [r7, #4]
 801c6fc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801c700:	b2db      	uxtb	r3, r3
 801c702:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801c704:	b25b      	sxtb	r3, r3
 801c706:	4313      	orrs	r3, r2
 801c708:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801c70a:	793b      	ldrb	r3, [r7, #4]
 801c70c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801c710:	b2db      	uxtb	r3, r3
 801c712:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801c714:	b25b      	sxtb	r3, r3
 801c716:	4313      	orrs	r3, r2
 801c718:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801c71a:	793b      	ldrb	r3, [r7, #4]
 801c71c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801c720:	b2db      	uxtb	r3, r3
 801c722:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801c724:	b25b      	sxtb	r3, r3
 801c726:	4313      	orrs	r3, r2
 801c728:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801c72a:	793b      	ldrb	r3, [r7, #4]
 801c72c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801c730:	b2db      	uxtb	r3, r3
 801c732:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801c734:	b25b      	sxtb	r3, r3
 801c736:	4313      	orrs	r3, r2
 801c738:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801c73a:	793b      	ldrb	r3, [r7, #4]
 801c73c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801c740:	b2db      	uxtb	r3, r3
 801c742:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801c744:	b25b      	sxtb	r3, r3
 801c746:	4313      	orrs	r3, r2
 801c748:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 801c74a:	793b      	ldrb	r3, [r7, #4]
 801c74c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801c750:	b2db      	uxtb	r3, r3
 801c752:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801c754:	4313      	orrs	r3, r2
 801c756:	b25b      	sxtb	r3, r3
 801c758:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801c75a:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 801c75c:	f107 030f 	add.w	r3, r7, #15
 801c760:	2201      	movs	r2, #1
 801c762:	4619      	mov	r1, r3
 801c764:	2089      	movs	r0, #137	@ 0x89
 801c766:	f000 fcd1 	bl	801d10c <SUBGRF_WriteCommand>
}
 801c76a:	bf00      	nop
 801c76c:	3710      	adds	r7, #16
 801c76e:	46bd      	mov	sp, r7
 801c770:	bd80      	pop	{r7, pc}
	...

0801c774 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 801c774:	b580      	push	{r7, lr}
 801c776:	b084      	sub	sp, #16
 801c778:	af00      	add	r7, sp, #0
 801c77a:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 801c77c:	687b      	ldr	r3, [r7, #4]
 801c77e:	4a1d      	ldr	r2, [pc, #116]	@ (801c7f4 <SUBGRF_CalibrateImage+0x80>)
 801c780:	4293      	cmp	r3, r2
 801c782:	d904      	bls.n	801c78e <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 801c784:	23e1      	movs	r3, #225	@ 0xe1
 801c786:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 801c788:	23e9      	movs	r3, #233	@ 0xe9
 801c78a:	737b      	strb	r3, [r7, #13]
 801c78c:	e027      	b.n	801c7de <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 801c78e:	687b      	ldr	r3, [r7, #4]
 801c790:	4a19      	ldr	r2, [pc, #100]	@ (801c7f8 <SUBGRF_CalibrateImage+0x84>)
 801c792:	4293      	cmp	r3, r2
 801c794:	d904      	bls.n	801c7a0 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 801c796:	23d7      	movs	r3, #215	@ 0xd7
 801c798:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 801c79a:	23db      	movs	r3, #219	@ 0xdb
 801c79c:	737b      	strb	r3, [r7, #13]
 801c79e:	e01e      	b.n	801c7de <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 801c7a0:	687b      	ldr	r3, [r7, #4]
 801c7a2:	4a16      	ldr	r2, [pc, #88]	@ (801c7fc <SUBGRF_CalibrateImage+0x88>)
 801c7a4:	4293      	cmp	r3, r2
 801c7a6:	d904      	bls.n	801c7b2 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 801c7a8:	23c1      	movs	r3, #193	@ 0xc1
 801c7aa:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 801c7ac:	23c5      	movs	r3, #197	@ 0xc5
 801c7ae:	737b      	strb	r3, [r7, #13]
 801c7b0:	e015      	b.n	801c7de <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 801c7b2:	687b      	ldr	r3, [r7, #4]
 801c7b4:	4a12      	ldr	r2, [pc, #72]	@ (801c800 <SUBGRF_CalibrateImage+0x8c>)
 801c7b6:	4293      	cmp	r3, r2
 801c7b8:	d904      	bls.n	801c7c4 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 801c7ba:	2375      	movs	r3, #117	@ 0x75
 801c7bc:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 801c7be:	2381      	movs	r3, #129	@ 0x81
 801c7c0:	737b      	strb	r3, [r7, #13]
 801c7c2:	e00c      	b.n	801c7de <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 801c7c4:	687b      	ldr	r3, [r7, #4]
 801c7c6:	4a0f      	ldr	r2, [pc, #60]	@ (801c804 <SUBGRF_CalibrateImage+0x90>)
 801c7c8:	4293      	cmp	r3, r2
 801c7ca:	d904      	bls.n	801c7d6 <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 801c7cc:	236b      	movs	r3, #107	@ 0x6b
 801c7ce:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 801c7d0:	236f      	movs	r3, #111	@ 0x6f
 801c7d2:	737b      	strb	r3, [r7, #13]
 801c7d4:	e003      	b.n	801c7de <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 801c7d6:	2329      	movs	r3, #41	@ 0x29
 801c7d8:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 801c7da:	232b      	movs	r3, #43	@ 0x2b
 801c7dc:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 801c7de:	f107 030c 	add.w	r3, r7, #12
 801c7e2:	2202      	movs	r2, #2
 801c7e4:	4619      	mov	r1, r3
 801c7e6:	2098      	movs	r0, #152	@ 0x98
 801c7e8:	f000 fc90 	bl	801d10c <SUBGRF_WriteCommand>
}
 801c7ec:	bf00      	nop
 801c7ee:	3710      	adds	r7, #16
 801c7f0:	46bd      	mov	sp, r7
 801c7f2:	bd80      	pop	{r7, pc}
 801c7f4:	35a4e900 	.word	0x35a4e900
 801c7f8:	32a9f880 	.word	0x32a9f880
 801c7fc:	2de54480 	.word	0x2de54480
 801c800:	1b6b0b00 	.word	0x1b6b0b00
 801c804:	1954fc40 	.word	0x1954fc40

0801c808 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 801c808:	b590      	push	{r4, r7, lr}
 801c80a:	b085      	sub	sp, #20
 801c80c:	af00      	add	r7, sp, #0
 801c80e:	4604      	mov	r4, r0
 801c810:	4608      	mov	r0, r1
 801c812:	4611      	mov	r1, r2
 801c814:	461a      	mov	r2, r3
 801c816:	4623      	mov	r3, r4
 801c818:	71fb      	strb	r3, [r7, #7]
 801c81a:	4603      	mov	r3, r0
 801c81c:	71bb      	strb	r3, [r7, #6]
 801c81e:	460b      	mov	r3, r1
 801c820:	717b      	strb	r3, [r7, #5]
 801c822:	4613      	mov	r3, r2
 801c824:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 801c826:	79fb      	ldrb	r3, [r7, #7]
 801c828:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 801c82a:	79bb      	ldrb	r3, [r7, #6]
 801c82c:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 801c82e:	797b      	ldrb	r3, [r7, #5]
 801c830:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 801c832:	793b      	ldrb	r3, [r7, #4]
 801c834:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 801c836:	f107 030c 	add.w	r3, r7, #12
 801c83a:	2204      	movs	r2, #4
 801c83c:	4619      	mov	r1, r3
 801c83e:	2095      	movs	r0, #149	@ 0x95
 801c840:	f000 fc64 	bl	801d10c <SUBGRF_WriteCommand>
}
 801c844:	bf00      	nop
 801c846:	3714      	adds	r7, #20
 801c848:	46bd      	mov	sp, r7
 801c84a:	bd90      	pop	{r4, r7, pc}

0801c84c <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 801c84c:	b590      	push	{r4, r7, lr}
 801c84e:	b085      	sub	sp, #20
 801c850:	af00      	add	r7, sp, #0
 801c852:	4604      	mov	r4, r0
 801c854:	4608      	mov	r0, r1
 801c856:	4611      	mov	r1, r2
 801c858:	461a      	mov	r2, r3
 801c85a:	4623      	mov	r3, r4
 801c85c:	80fb      	strh	r3, [r7, #6]
 801c85e:	4603      	mov	r3, r0
 801c860:	80bb      	strh	r3, [r7, #4]
 801c862:	460b      	mov	r3, r1
 801c864:	807b      	strh	r3, [r7, #2]
 801c866:	4613      	mov	r3, r2
 801c868:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 801c86a:	88fb      	ldrh	r3, [r7, #6]
 801c86c:	0a1b      	lsrs	r3, r3, #8
 801c86e:	b29b      	uxth	r3, r3
 801c870:	b2db      	uxtb	r3, r3
 801c872:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 801c874:	88fb      	ldrh	r3, [r7, #6]
 801c876:	b2db      	uxtb	r3, r3
 801c878:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 801c87a:	88bb      	ldrh	r3, [r7, #4]
 801c87c:	0a1b      	lsrs	r3, r3, #8
 801c87e:	b29b      	uxth	r3, r3
 801c880:	b2db      	uxtb	r3, r3
 801c882:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 801c884:	88bb      	ldrh	r3, [r7, #4]
 801c886:	b2db      	uxtb	r3, r3
 801c888:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 801c88a:	887b      	ldrh	r3, [r7, #2]
 801c88c:	0a1b      	lsrs	r3, r3, #8
 801c88e:	b29b      	uxth	r3, r3
 801c890:	b2db      	uxtb	r3, r3
 801c892:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 801c894:	887b      	ldrh	r3, [r7, #2]
 801c896:	b2db      	uxtb	r3, r3
 801c898:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 801c89a:	883b      	ldrh	r3, [r7, #0]
 801c89c:	0a1b      	lsrs	r3, r3, #8
 801c89e:	b29b      	uxth	r3, r3
 801c8a0:	b2db      	uxtb	r3, r3
 801c8a2:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 801c8a4:	883b      	ldrh	r3, [r7, #0]
 801c8a6:	b2db      	uxtb	r3, r3
 801c8a8:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 801c8aa:	f107 0308 	add.w	r3, r7, #8
 801c8ae:	2208      	movs	r2, #8
 801c8b0:	4619      	mov	r1, r3
 801c8b2:	2008      	movs	r0, #8
 801c8b4:	f000 fc2a 	bl	801d10c <SUBGRF_WriteCommand>
}
 801c8b8:	bf00      	nop
 801c8ba:	3714      	adds	r7, #20
 801c8bc:	46bd      	mov	sp, r7
 801c8be:	bd90      	pop	{r4, r7, pc}

0801c8c0 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 801c8c0:	b580      	push	{r7, lr}
 801c8c2:	b084      	sub	sp, #16
 801c8c4:	af00      	add	r7, sp, #0
 801c8c6:	4603      	mov	r3, r0
 801c8c8:	6039      	str	r1, [r7, #0]
 801c8ca:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 801c8cc:	79fb      	ldrb	r3, [r7, #7]
 801c8ce:	f003 0307 	and.w	r3, r3, #7
 801c8d2:	b2db      	uxtb	r3, r3
 801c8d4:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801c8d6:	683b      	ldr	r3, [r7, #0]
 801c8d8:	0c1b      	lsrs	r3, r3, #16
 801c8da:	b2db      	uxtb	r3, r3
 801c8dc:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801c8de:	683b      	ldr	r3, [r7, #0]
 801c8e0:	0a1b      	lsrs	r3, r3, #8
 801c8e2:	b2db      	uxtb	r3, r3
 801c8e4:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 801c8e6:	683b      	ldr	r3, [r7, #0]
 801c8e8:	b2db      	uxtb	r3, r3
 801c8ea:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 801c8ec:	f107 030c 	add.w	r3, r7, #12
 801c8f0:	2204      	movs	r2, #4
 801c8f2:	4619      	mov	r1, r3
 801c8f4:	2097      	movs	r0, #151	@ 0x97
 801c8f6:	f000 fc09 	bl	801d10c <SUBGRF_WriteCommand>
}
 801c8fa:	bf00      	nop
 801c8fc:	3710      	adds	r7, #16
 801c8fe:	46bd      	mov	sp, r7
 801c900:	bd80      	pop	{r7, pc}
	...

0801c904 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 801c904:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801c908:	b084      	sub	sp, #16
 801c90a:	af00      	add	r7, sp, #0
 801c90c:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 801c90e:	2300      	movs	r3, #0
 801c910:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 801c912:	4b1d      	ldr	r3, [pc, #116]	@ (801c988 <SUBGRF_SetRfFrequency+0x84>)
 801c914:	781b      	ldrb	r3, [r3, #0]
 801c916:	f083 0301 	eor.w	r3, r3, #1
 801c91a:	b2db      	uxtb	r3, r3
 801c91c:	2b00      	cmp	r3, #0
 801c91e:	d005      	beq.n	801c92c <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 801c920:	6878      	ldr	r0, [r7, #4]
 801c922:	f7ff ff27 	bl	801c774 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 801c926:	4b18      	ldr	r3, [pc, #96]	@ (801c988 <SUBGRF_SetRfFrequency+0x84>)
 801c928:	2201      	movs	r2, #1
 801c92a:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 801c92c:	687b      	ldr	r3, [r7, #4]
 801c92e:	2200      	movs	r2, #0
 801c930:	461c      	mov	r4, r3
 801c932:	4615      	mov	r5, r2
 801c934:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801c938:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801c93c:	4a13      	ldr	r2, [pc, #76]	@ (801c98c <SUBGRF_SetRfFrequency+0x88>)
 801c93e:	f04f 0300 	mov.w	r3, #0
 801c942:	4640      	mov	r0, r8
 801c944:	4649      	mov	r1, r9
 801c946:	f7e4 fc07 	bl	8001158 <__aeabi_uldivmod>
 801c94a:	4602      	mov	r2, r0
 801c94c:	460b      	mov	r3, r1
 801c94e:	4613      	mov	r3, r2
 801c950:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 801c952:	68fb      	ldr	r3, [r7, #12]
 801c954:	0e1b      	lsrs	r3, r3, #24
 801c956:	b2db      	uxtb	r3, r3
 801c958:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 801c95a:	68fb      	ldr	r3, [r7, #12]
 801c95c:	0c1b      	lsrs	r3, r3, #16
 801c95e:	b2db      	uxtb	r3, r3
 801c960:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 801c962:	68fb      	ldr	r3, [r7, #12]
 801c964:	0a1b      	lsrs	r3, r3, #8
 801c966:	b2db      	uxtb	r3, r3
 801c968:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 801c96a:	68fb      	ldr	r3, [r7, #12]
 801c96c:	b2db      	uxtb	r3, r3
 801c96e:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 801c970:	f107 0308 	add.w	r3, r7, #8
 801c974:	2204      	movs	r2, #4
 801c976:	4619      	mov	r1, r3
 801c978:	2086      	movs	r0, #134	@ 0x86
 801c97a:	f000 fbc7 	bl	801d10c <SUBGRF_WriteCommand>
}
 801c97e:	bf00      	nop
 801c980:	3710      	adds	r7, #16
 801c982:	46bd      	mov	sp, r7
 801c984:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801c988:	20001c1c 	.word	0x20001c1c
 801c98c:	01e84800 	.word	0x01e84800

0801c990 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 801c990:	b580      	push	{r7, lr}
 801c992:	b082      	sub	sp, #8
 801c994:	af00      	add	r7, sp, #0
 801c996:	4603      	mov	r3, r0
 801c998:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 801c99a:	79fa      	ldrb	r2, [r7, #7]
 801c99c:	4b09      	ldr	r3, [pc, #36]	@ (801c9c4 <SUBGRF_SetPacketType+0x34>)
 801c99e:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 801c9a0:	79fb      	ldrb	r3, [r7, #7]
 801c9a2:	2b00      	cmp	r3, #0
 801c9a4:	d104      	bne.n	801c9b0 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 801c9a6:	2100      	movs	r1, #0
 801c9a8:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 801c9ac:	f000 fafe 	bl	801cfac <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 801c9b0:	1dfb      	adds	r3, r7, #7
 801c9b2:	2201      	movs	r2, #1
 801c9b4:	4619      	mov	r1, r3
 801c9b6:	208a      	movs	r0, #138	@ 0x8a
 801c9b8:	f000 fba8 	bl	801d10c <SUBGRF_WriteCommand>
}
 801c9bc:	bf00      	nop
 801c9be:	3708      	adds	r7, #8
 801c9c0:	46bd      	mov	sp, r7
 801c9c2:	bd80      	pop	{r7, pc}
 801c9c4:	20001c15 	.word	0x20001c15

0801c9c8 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 801c9c8:	b480      	push	{r7}
 801c9ca:	af00      	add	r7, sp, #0
    return PacketType;
 801c9cc:	4b02      	ldr	r3, [pc, #8]	@ (801c9d8 <SUBGRF_GetPacketType+0x10>)
 801c9ce:	781b      	ldrb	r3, [r3, #0]
}
 801c9d0:	4618      	mov	r0, r3
 801c9d2:	46bd      	mov	sp, r7
 801c9d4:	bc80      	pop	{r7}
 801c9d6:	4770      	bx	lr
 801c9d8:	20001c15 	.word	0x20001c15

0801c9dc <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 801c9dc:	b580      	push	{r7, lr}
 801c9de:	b084      	sub	sp, #16
 801c9e0:	af00      	add	r7, sp, #0
 801c9e2:	4603      	mov	r3, r0
 801c9e4:	71fb      	strb	r3, [r7, #7]
 801c9e6:	460b      	mov	r3, r1
 801c9e8:	71bb      	strb	r3, [r7, #6]
 801c9ea:	4613      	mov	r3, r2
 801c9ec:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 801c9ee:	79fb      	ldrb	r3, [r7, #7]
 801c9f0:	2b01      	cmp	r3, #1
 801c9f2:	d149      	bne.n	801ca88 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 801c9f4:	2000      	movs	r0, #0
 801c9f6:	f7ef fb59 	bl	800c0ac <RBI_GetRFOMaxPowerConfig>
 801c9fa:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 801c9fc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801ca00:	68fa      	ldr	r2, [r7, #12]
 801ca02:	429a      	cmp	r2, r3
 801ca04:	da01      	bge.n	801ca0a <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 801ca06:	68fb      	ldr	r3, [r7, #12]
 801ca08:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 801ca0a:	68fb      	ldr	r3, [r7, #12]
 801ca0c:	2b0e      	cmp	r3, #14
 801ca0e:	d10e      	bne.n	801ca2e <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 801ca10:	2301      	movs	r3, #1
 801ca12:	2201      	movs	r2, #1
 801ca14:	2100      	movs	r1, #0
 801ca16:	2004      	movs	r0, #4
 801ca18:	f7ff fef6 	bl	801c808 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801ca1c:	79ba      	ldrb	r2, [r7, #6]
 801ca1e:	68fb      	ldr	r3, [r7, #12]
 801ca20:	b2db      	uxtb	r3, r3
 801ca22:	1ad3      	subs	r3, r2, r3
 801ca24:	b2db      	uxtb	r3, r3
 801ca26:	330e      	adds	r3, #14
 801ca28:	b2db      	uxtb	r3, r3
 801ca2a:	71bb      	strb	r3, [r7, #6]
 801ca2c:	e01f      	b.n	801ca6e <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 801ca2e:	68fb      	ldr	r3, [r7, #12]
 801ca30:	2b0a      	cmp	r3, #10
 801ca32:	d10e      	bne.n	801ca52 <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 801ca34:	2301      	movs	r3, #1
 801ca36:	2201      	movs	r2, #1
 801ca38:	2100      	movs	r1, #0
 801ca3a:	2001      	movs	r0, #1
 801ca3c:	f7ff fee4 	bl	801c808 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 801ca40:	79ba      	ldrb	r2, [r7, #6]
 801ca42:	68fb      	ldr	r3, [r7, #12]
 801ca44:	b2db      	uxtb	r3, r3
 801ca46:	1ad3      	subs	r3, r2, r3
 801ca48:	b2db      	uxtb	r3, r3
 801ca4a:	330d      	adds	r3, #13
 801ca4c:	b2db      	uxtb	r3, r3
 801ca4e:	71bb      	strb	r3, [r7, #6]
 801ca50:	e00d      	b.n	801ca6e <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 801ca52:	2301      	movs	r3, #1
 801ca54:	2201      	movs	r2, #1
 801ca56:	2100      	movs	r1, #0
 801ca58:	2007      	movs	r0, #7
 801ca5a:	f7ff fed5 	bl	801c808 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801ca5e:	79ba      	ldrb	r2, [r7, #6]
 801ca60:	68fb      	ldr	r3, [r7, #12]
 801ca62:	b2db      	uxtb	r3, r3
 801ca64:	1ad3      	subs	r3, r2, r3
 801ca66:	b2db      	uxtb	r3, r3
 801ca68:	330e      	adds	r3, #14
 801ca6a:	b2db      	uxtb	r3, r3
 801ca6c:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 801ca6e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801ca72:	f113 0f11 	cmn.w	r3, #17
 801ca76:	da01      	bge.n	801ca7c <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 801ca78:	23ef      	movs	r3, #239	@ 0xef
 801ca7a:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 801ca7c:	2118      	movs	r1, #24
 801ca7e:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 801ca82:	f000 fa93 	bl	801cfac <SUBGRF_WriteRegister>
 801ca86:	e067      	b.n	801cb58 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 801ca88:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 801ca8c:	f000 faa2 	bl	801cfd4 <SUBGRF_ReadRegister>
 801ca90:	4603      	mov	r3, r0
 801ca92:	f043 031e 	orr.w	r3, r3, #30
 801ca96:	b2db      	uxtb	r3, r3
 801ca98:	4619      	mov	r1, r3
 801ca9a:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 801ca9e:	f000 fa85 	bl	801cfac <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 801caa2:	2001      	movs	r0, #1
 801caa4:	f7ef fb02 	bl	800c0ac <RBI_GetRFOMaxPowerConfig>
 801caa8:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 801caaa:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801caae:	68fa      	ldr	r2, [r7, #12]
 801cab0:	429a      	cmp	r2, r3
 801cab2:	da01      	bge.n	801cab8 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 801cab4:	68fb      	ldr	r3, [r7, #12]
 801cab6:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 801cab8:	68fb      	ldr	r3, [r7, #12]
 801caba:	2b14      	cmp	r3, #20
 801cabc:	d10e      	bne.n	801cadc <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 801cabe:	2301      	movs	r3, #1
 801cac0:	2200      	movs	r2, #0
 801cac2:	2105      	movs	r1, #5
 801cac4:	2003      	movs	r0, #3
 801cac6:	f7ff fe9f 	bl	801c808 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801caca:	79ba      	ldrb	r2, [r7, #6]
 801cacc:	68fb      	ldr	r3, [r7, #12]
 801cace:	b2db      	uxtb	r3, r3
 801cad0:	1ad3      	subs	r3, r2, r3
 801cad2:	b2db      	uxtb	r3, r3
 801cad4:	3316      	adds	r3, #22
 801cad6:	b2db      	uxtb	r3, r3
 801cad8:	71bb      	strb	r3, [r7, #6]
 801cada:	e031      	b.n	801cb40 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 801cadc:	68fb      	ldr	r3, [r7, #12]
 801cade:	2b11      	cmp	r3, #17
 801cae0:	d10e      	bne.n	801cb00 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 801cae2:	2301      	movs	r3, #1
 801cae4:	2200      	movs	r2, #0
 801cae6:	2103      	movs	r1, #3
 801cae8:	2002      	movs	r0, #2
 801caea:	f7ff fe8d 	bl	801c808 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801caee:	79ba      	ldrb	r2, [r7, #6]
 801caf0:	68fb      	ldr	r3, [r7, #12]
 801caf2:	b2db      	uxtb	r3, r3
 801caf4:	1ad3      	subs	r3, r2, r3
 801caf6:	b2db      	uxtb	r3, r3
 801caf8:	3316      	adds	r3, #22
 801cafa:	b2db      	uxtb	r3, r3
 801cafc:	71bb      	strb	r3, [r7, #6]
 801cafe:	e01f      	b.n	801cb40 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 801cb00:	68fb      	ldr	r3, [r7, #12]
 801cb02:	2b0e      	cmp	r3, #14
 801cb04:	d10e      	bne.n	801cb24 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 801cb06:	2301      	movs	r3, #1
 801cb08:	2200      	movs	r2, #0
 801cb0a:	2102      	movs	r1, #2
 801cb0c:	2002      	movs	r0, #2
 801cb0e:	f7ff fe7b 	bl	801c808 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801cb12:	79ba      	ldrb	r2, [r7, #6]
 801cb14:	68fb      	ldr	r3, [r7, #12]
 801cb16:	b2db      	uxtb	r3, r3
 801cb18:	1ad3      	subs	r3, r2, r3
 801cb1a:	b2db      	uxtb	r3, r3
 801cb1c:	330e      	adds	r3, #14
 801cb1e:	b2db      	uxtb	r3, r3
 801cb20:	71bb      	strb	r3, [r7, #6]
 801cb22:	e00d      	b.n	801cb40 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 801cb24:	2301      	movs	r3, #1
 801cb26:	2200      	movs	r2, #0
 801cb28:	2107      	movs	r1, #7
 801cb2a:	2004      	movs	r0, #4
 801cb2c:	f7ff fe6c 	bl	801c808 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801cb30:	79ba      	ldrb	r2, [r7, #6]
 801cb32:	68fb      	ldr	r3, [r7, #12]
 801cb34:	b2db      	uxtb	r3, r3
 801cb36:	1ad3      	subs	r3, r2, r3
 801cb38:	b2db      	uxtb	r3, r3
 801cb3a:	3316      	adds	r3, #22
 801cb3c:	b2db      	uxtb	r3, r3
 801cb3e:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 801cb40:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801cb44:	f113 0f09 	cmn.w	r3, #9
 801cb48:	da01      	bge.n	801cb4e <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 801cb4a:	23f7      	movs	r3, #247	@ 0xf7
 801cb4c:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 801cb4e:	2138      	movs	r1, #56	@ 0x38
 801cb50:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 801cb54:	f000 fa2a 	bl	801cfac <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 801cb58:	79bb      	ldrb	r3, [r7, #6]
 801cb5a:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 801cb5c:	797b      	ldrb	r3, [r7, #5]
 801cb5e:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 801cb60:	f107 0308 	add.w	r3, r7, #8
 801cb64:	2202      	movs	r2, #2
 801cb66:	4619      	mov	r1, r3
 801cb68:	208e      	movs	r0, #142	@ 0x8e
 801cb6a:	f000 facf 	bl	801d10c <SUBGRF_WriteCommand>
}
 801cb6e:	bf00      	nop
 801cb70:	3710      	adds	r7, #16
 801cb72:	46bd      	mov	sp, r7
 801cb74:	bd80      	pop	{r7, pc}
	...

0801cb78 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 801cb78:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801cb7c:	b086      	sub	sp, #24
 801cb7e:	af00      	add	r7, sp, #0
 801cb80:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 801cb82:	2300      	movs	r3, #0
 801cb84:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801cb86:	4a61      	ldr	r2, [pc, #388]	@ (801cd0c <SUBGRF_SetModulationParams+0x194>)
 801cb88:	f107 0308 	add.w	r3, r7, #8
 801cb8c:	e892 0003 	ldmia.w	r2, {r0, r1}
 801cb90:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 801cb94:	687b      	ldr	r3, [r7, #4]
 801cb96:	781a      	ldrb	r2, [r3, #0]
 801cb98:	4b5d      	ldr	r3, [pc, #372]	@ (801cd10 <SUBGRF_SetModulationParams+0x198>)
 801cb9a:	781b      	ldrb	r3, [r3, #0]
 801cb9c:	429a      	cmp	r2, r3
 801cb9e:	d004      	beq.n	801cbaa <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 801cba0:	687b      	ldr	r3, [r7, #4]
 801cba2:	781b      	ldrb	r3, [r3, #0]
 801cba4:	4618      	mov	r0, r3
 801cba6:	f7ff fef3 	bl	801c990 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 801cbaa:	687b      	ldr	r3, [r7, #4]
 801cbac:	781b      	ldrb	r3, [r3, #0]
 801cbae:	2b03      	cmp	r3, #3
 801cbb0:	f200 80a5 	bhi.w	801ccfe <SUBGRF_SetModulationParams+0x186>
 801cbb4:	a201      	add	r2, pc, #4	@ (adr r2, 801cbbc <SUBGRF_SetModulationParams+0x44>)
 801cbb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cbba:	bf00      	nop
 801cbbc:	0801cbcd 	.word	0x0801cbcd
 801cbc0:	0801cc8d 	.word	0x0801cc8d
 801cbc4:	0801cc4f 	.word	0x0801cc4f
 801cbc8:	0801ccbb 	.word	0x0801ccbb
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 801cbcc:	2308      	movs	r3, #8
 801cbce:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 801cbd0:	687b      	ldr	r3, [r7, #4]
 801cbd2:	685b      	ldr	r3, [r3, #4]
 801cbd4:	4a4f      	ldr	r2, [pc, #316]	@ (801cd14 <SUBGRF_SetModulationParams+0x19c>)
 801cbd6:	fbb2 f3f3 	udiv	r3, r2, r3
 801cbda:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801cbdc:	697b      	ldr	r3, [r7, #20]
 801cbde:	0c1b      	lsrs	r3, r3, #16
 801cbe0:	b2db      	uxtb	r3, r3
 801cbe2:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801cbe4:	697b      	ldr	r3, [r7, #20]
 801cbe6:	0a1b      	lsrs	r3, r3, #8
 801cbe8:	b2db      	uxtb	r3, r3
 801cbea:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801cbec:	697b      	ldr	r3, [r7, #20]
 801cbee:	b2db      	uxtb	r3, r3
 801cbf0:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801cbf2:	687b      	ldr	r3, [r7, #4]
 801cbf4:	7b1b      	ldrb	r3, [r3, #12]
 801cbf6:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801cbf8:	687b      	ldr	r3, [r7, #4]
 801cbfa:	7b5b      	ldrb	r3, [r3, #13]
 801cbfc:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 801cbfe:	687b      	ldr	r3, [r7, #4]
 801cc00:	689b      	ldr	r3, [r3, #8]
 801cc02:	2200      	movs	r2, #0
 801cc04:	461c      	mov	r4, r3
 801cc06:	4615      	mov	r5, r2
 801cc08:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801cc0c:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801cc10:	4a41      	ldr	r2, [pc, #260]	@ (801cd18 <SUBGRF_SetModulationParams+0x1a0>)
 801cc12:	f04f 0300 	mov.w	r3, #0
 801cc16:	4640      	mov	r0, r8
 801cc18:	4649      	mov	r1, r9
 801cc1a:	f7e4 fa9d 	bl	8001158 <__aeabi_uldivmod>
 801cc1e:	4602      	mov	r2, r0
 801cc20:	460b      	mov	r3, r1
 801cc22:	4613      	mov	r3, r2
 801cc24:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 801cc26:	697b      	ldr	r3, [r7, #20]
 801cc28:	0c1b      	lsrs	r3, r3, #16
 801cc2a:	b2db      	uxtb	r3, r3
 801cc2c:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 801cc2e:	697b      	ldr	r3, [r7, #20]
 801cc30:	0a1b      	lsrs	r3, r3, #8
 801cc32:	b2db      	uxtb	r3, r3
 801cc34:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 801cc36:	697b      	ldr	r3, [r7, #20]
 801cc38:	b2db      	uxtb	r3, r3
 801cc3a:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801cc3c:	7cfb      	ldrb	r3, [r7, #19]
 801cc3e:	b29a      	uxth	r2, r3
 801cc40:	f107 0308 	add.w	r3, r7, #8
 801cc44:	4619      	mov	r1, r3
 801cc46:	208b      	movs	r0, #139	@ 0x8b
 801cc48:	f000 fa60 	bl	801d10c <SUBGRF_WriteCommand>
        break;
 801cc4c:	e058      	b.n	801cd00 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 801cc4e:	2304      	movs	r3, #4
 801cc50:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 801cc52:	687b      	ldr	r3, [r7, #4]
 801cc54:	691b      	ldr	r3, [r3, #16]
 801cc56:	4a2f      	ldr	r2, [pc, #188]	@ (801cd14 <SUBGRF_SetModulationParams+0x19c>)
 801cc58:	fbb2 f3f3 	udiv	r3, r2, r3
 801cc5c:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801cc5e:	697b      	ldr	r3, [r7, #20]
 801cc60:	0c1b      	lsrs	r3, r3, #16
 801cc62:	b2db      	uxtb	r3, r3
 801cc64:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801cc66:	697b      	ldr	r3, [r7, #20]
 801cc68:	0a1b      	lsrs	r3, r3, #8
 801cc6a:	b2db      	uxtb	r3, r3
 801cc6c:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801cc6e:	697b      	ldr	r3, [r7, #20]
 801cc70:	b2db      	uxtb	r3, r3
 801cc72:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 801cc74:	687b      	ldr	r3, [r7, #4]
 801cc76:	7d1b      	ldrb	r3, [r3, #20]
 801cc78:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801cc7a:	7cfb      	ldrb	r3, [r7, #19]
 801cc7c:	b29a      	uxth	r2, r3
 801cc7e:	f107 0308 	add.w	r3, r7, #8
 801cc82:	4619      	mov	r1, r3
 801cc84:	208b      	movs	r0, #139	@ 0x8b
 801cc86:	f000 fa41 	bl	801d10c <SUBGRF_WriteCommand>
        break;
 801cc8a:	e039      	b.n	801cd00 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 801cc8c:	2304      	movs	r3, #4
 801cc8e:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 801cc90:	687b      	ldr	r3, [r7, #4]
 801cc92:	7e1b      	ldrb	r3, [r3, #24]
 801cc94:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 801cc96:	687b      	ldr	r3, [r7, #4]
 801cc98:	7e5b      	ldrb	r3, [r3, #25]
 801cc9a:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 801cc9c:	687b      	ldr	r3, [r7, #4]
 801cc9e:	7e9b      	ldrb	r3, [r3, #26]
 801cca0:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 801cca2:	687b      	ldr	r3, [r7, #4]
 801cca4:	7edb      	ldrb	r3, [r3, #27]
 801cca6:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801cca8:	7cfb      	ldrb	r3, [r7, #19]
 801ccaa:	b29a      	uxth	r2, r3
 801ccac:	f107 0308 	add.w	r3, r7, #8
 801ccb0:	4619      	mov	r1, r3
 801ccb2:	208b      	movs	r0, #139	@ 0x8b
 801ccb4:	f000 fa2a 	bl	801d10c <SUBGRF_WriteCommand>

        break;
 801ccb8:	e022      	b.n	801cd00 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 801ccba:	2305      	movs	r3, #5
 801ccbc:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 801ccbe:	687b      	ldr	r3, [r7, #4]
 801ccc0:	685b      	ldr	r3, [r3, #4]
 801ccc2:	4a14      	ldr	r2, [pc, #80]	@ (801cd14 <SUBGRF_SetModulationParams+0x19c>)
 801ccc4:	fbb2 f3f3 	udiv	r3, r2, r3
 801ccc8:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801ccca:	697b      	ldr	r3, [r7, #20]
 801cccc:	0c1b      	lsrs	r3, r3, #16
 801ccce:	b2db      	uxtb	r3, r3
 801ccd0:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801ccd2:	697b      	ldr	r3, [r7, #20]
 801ccd4:	0a1b      	lsrs	r3, r3, #8
 801ccd6:	b2db      	uxtb	r3, r3
 801ccd8:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801ccda:	697b      	ldr	r3, [r7, #20]
 801ccdc:	b2db      	uxtb	r3, r3
 801ccde:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801cce0:	687b      	ldr	r3, [r7, #4]
 801cce2:	7b1b      	ldrb	r3, [r3, #12]
 801cce4:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801cce6:	687b      	ldr	r3, [r7, #4]
 801cce8:	7b5b      	ldrb	r3, [r3, #13]
 801ccea:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801ccec:	7cfb      	ldrb	r3, [r7, #19]
 801ccee:	b29a      	uxth	r2, r3
 801ccf0:	f107 0308 	add.w	r3, r7, #8
 801ccf4:	4619      	mov	r1, r3
 801ccf6:	208b      	movs	r0, #139	@ 0x8b
 801ccf8:	f000 fa08 	bl	801d10c <SUBGRF_WriteCommand>
        break;
 801ccfc:	e000      	b.n	801cd00 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 801ccfe:	bf00      	nop
    }
}
 801cd00:	bf00      	nop
 801cd02:	3718      	adds	r7, #24
 801cd04:	46bd      	mov	sp, r7
 801cd06:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801cd0a:	bf00      	nop
 801cd0c:	0801f6e0 	.word	0x0801f6e0
 801cd10:	20001c15 	.word	0x20001c15
 801cd14:	3d090000 	.word	0x3d090000
 801cd18:	01e84800 	.word	0x01e84800

0801cd1c <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 801cd1c:	b580      	push	{r7, lr}
 801cd1e:	b086      	sub	sp, #24
 801cd20:	af00      	add	r7, sp, #0
 801cd22:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 801cd24:	2300      	movs	r3, #0
 801cd26:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801cd28:	4a48      	ldr	r2, [pc, #288]	@ (801ce4c <SUBGRF_SetPacketParams+0x130>)
 801cd2a:	f107 030c 	add.w	r3, r7, #12
 801cd2e:	ca07      	ldmia	r2, {r0, r1, r2}
 801cd30:	c303      	stmia	r3!, {r0, r1}
 801cd32:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 801cd34:	687b      	ldr	r3, [r7, #4]
 801cd36:	781a      	ldrb	r2, [r3, #0]
 801cd38:	4b45      	ldr	r3, [pc, #276]	@ (801ce50 <SUBGRF_SetPacketParams+0x134>)
 801cd3a:	781b      	ldrb	r3, [r3, #0]
 801cd3c:	429a      	cmp	r2, r3
 801cd3e:	d004      	beq.n	801cd4a <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 801cd40:	687b      	ldr	r3, [r7, #4]
 801cd42:	781b      	ldrb	r3, [r3, #0]
 801cd44:	4618      	mov	r0, r3
 801cd46:	f7ff fe23 	bl	801c990 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 801cd4a:	687b      	ldr	r3, [r7, #4]
 801cd4c:	781b      	ldrb	r3, [r3, #0]
 801cd4e:	2b03      	cmp	r3, #3
 801cd50:	d878      	bhi.n	801ce44 <SUBGRF_SetPacketParams+0x128>
 801cd52:	a201      	add	r2, pc, #4	@ (adr r2, 801cd58 <SUBGRF_SetPacketParams+0x3c>)
 801cd54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cd58:	0801cd69 	.word	0x0801cd69
 801cd5c:	0801cdf9 	.word	0x0801cdf9
 801cd60:	0801cded 	.word	0x0801cded
 801cd64:	0801cd69 	.word	0x0801cd69
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 801cd68:	687b      	ldr	r3, [r7, #4]
 801cd6a:	7a5b      	ldrb	r3, [r3, #9]
 801cd6c:	2bf1      	cmp	r3, #241	@ 0xf1
 801cd6e:	d10a      	bne.n	801cd86 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 801cd70:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 801cd74:	f7ff faaa 	bl	801c2cc <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 801cd78:	f248 0005 	movw	r0, #32773	@ 0x8005
 801cd7c:	f7ff fac6 	bl	801c30c <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 801cd80:	2302      	movs	r3, #2
 801cd82:	75bb      	strb	r3, [r7, #22]
 801cd84:	e011      	b.n	801cdaa <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 801cd86:	687b      	ldr	r3, [r7, #4]
 801cd88:	7a5b      	ldrb	r3, [r3, #9]
 801cd8a:	2bf2      	cmp	r3, #242	@ 0xf2
 801cd8c:	d10a      	bne.n	801cda4 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 801cd8e:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 801cd92:	f7ff fa9b 	bl	801c2cc <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 801cd96:	f241 0021 	movw	r0, #4129	@ 0x1021
 801cd9a:	f7ff fab7 	bl	801c30c <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 801cd9e:	2306      	movs	r3, #6
 801cda0:	75bb      	strb	r3, [r7, #22]
 801cda2:	e002      	b.n	801cdaa <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 801cda4:	687b      	ldr	r3, [r7, #4]
 801cda6:	7a5b      	ldrb	r3, [r3, #9]
 801cda8:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 801cdaa:	2309      	movs	r3, #9
 801cdac:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 801cdae:	687b      	ldr	r3, [r7, #4]
 801cdb0:	885b      	ldrh	r3, [r3, #2]
 801cdb2:	0a1b      	lsrs	r3, r3, #8
 801cdb4:	b29b      	uxth	r3, r3
 801cdb6:	b2db      	uxtb	r3, r3
 801cdb8:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 801cdba:	687b      	ldr	r3, [r7, #4]
 801cdbc:	885b      	ldrh	r3, [r3, #2]
 801cdbe:	b2db      	uxtb	r3, r3
 801cdc0:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 801cdc2:	687b      	ldr	r3, [r7, #4]
 801cdc4:	791b      	ldrb	r3, [r3, #4]
 801cdc6:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 801cdc8:	687b      	ldr	r3, [r7, #4]
 801cdca:	795b      	ldrb	r3, [r3, #5]
 801cdcc:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 801cdce:	687b      	ldr	r3, [r7, #4]
 801cdd0:	799b      	ldrb	r3, [r3, #6]
 801cdd2:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 801cdd4:	687b      	ldr	r3, [r7, #4]
 801cdd6:	79db      	ldrb	r3, [r3, #7]
 801cdd8:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 801cdda:	687b      	ldr	r3, [r7, #4]
 801cddc:	7a1b      	ldrb	r3, [r3, #8]
 801cdde:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 801cde0:	7dbb      	ldrb	r3, [r7, #22]
 801cde2:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 801cde4:	687b      	ldr	r3, [r7, #4]
 801cde6:	7a9b      	ldrb	r3, [r3, #10]
 801cde8:	753b      	strb	r3, [r7, #20]
        break;
 801cdea:	e022      	b.n	801ce32 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 801cdec:	2301      	movs	r3, #1
 801cdee:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 801cdf0:	687b      	ldr	r3, [r7, #4]
 801cdf2:	7b1b      	ldrb	r3, [r3, #12]
 801cdf4:	733b      	strb	r3, [r7, #12]
        break;
 801cdf6:	e01c      	b.n	801ce32 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 801cdf8:	2306      	movs	r3, #6
 801cdfa:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 801cdfc:	687b      	ldr	r3, [r7, #4]
 801cdfe:	89db      	ldrh	r3, [r3, #14]
 801ce00:	0a1b      	lsrs	r3, r3, #8
 801ce02:	b29b      	uxth	r3, r3
 801ce04:	b2db      	uxtb	r3, r3
 801ce06:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 801ce08:	687b      	ldr	r3, [r7, #4]
 801ce0a:	89db      	ldrh	r3, [r3, #14]
 801ce0c:	b2db      	uxtb	r3, r3
 801ce0e:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 801ce10:	687b      	ldr	r3, [r7, #4]
 801ce12:	7c1a      	ldrb	r2, [r3, #16]
 801ce14:	4b0f      	ldr	r3, [pc, #60]	@ (801ce54 <SUBGRF_SetPacketParams+0x138>)
 801ce16:	4611      	mov	r1, r2
 801ce18:	7019      	strb	r1, [r3, #0]
 801ce1a:	4613      	mov	r3, r2
 801ce1c:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 801ce1e:	687b      	ldr	r3, [r7, #4]
 801ce20:	7c5b      	ldrb	r3, [r3, #17]
 801ce22:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 801ce24:	687b      	ldr	r3, [r7, #4]
 801ce26:	7c9b      	ldrb	r3, [r3, #18]
 801ce28:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 801ce2a:	687b      	ldr	r3, [r7, #4]
 801ce2c:	7cdb      	ldrb	r3, [r3, #19]
 801ce2e:	747b      	strb	r3, [r7, #17]
        break;
 801ce30:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 801ce32:	7dfb      	ldrb	r3, [r7, #23]
 801ce34:	b29a      	uxth	r2, r3
 801ce36:	f107 030c 	add.w	r3, r7, #12
 801ce3a:	4619      	mov	r1, r3
 801ce3c:	208c      	movs	r0, #140	@ 0x8c
 801ce3e:	f000 f965 	bl	801d10c <SUBGRF_WriteCommand>
 801ce42:	e000      	b.n	801ce46 <SUBGRF_SetPacketParams+0x12a>
        return;
 801ce44:	bf00      	nop
}
 801ce46:	3718      	adds	r7, #24
 801ce48:	46bd      	mov	sp, r7
 801ce4a:	bd80      	pop	{r7, pc}
 801ce4c:	0801f6e8 	.word	0x0801f6e8
 801ce50:	20001c15 	.word	0x20001c15
 801ce54:	20001c16 	.word	0x20001c16

0801ce58 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 801ce58:	b580      	push	{r7, lr}
 801ce5a:	b084      	sub	sp, #16
 801ce5c:	af00      	add	r7, sp, #0
 801ce5e:	4603      	mov	r3, r0
 801ce60:	460a      	mov	r2, r1
 801ce62:	71fb      	strb	r3, [r7, #7]
 801ce64:	4613      	mov	r3, r2
 801ce66:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 801ce68:	79fb      	ldrb	r3, [r7, #7]
 801ce6a:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 801ce6c:	79bb      	ldrb	r3, [r7, #6]
 801ce6e:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 801ce70:	f107 030c 	add.w	r3, r7, #12
 801ce74:	2202      	movs	r2, #2
 801ce76:	4619      	mov	r1, r3
 801ce78:	208f      	movs	r0, #143	@ 0x8f
 801ce7a:	f000 f947 	bl	801d10c <SUBGRF_WriteCommand>
}
 801ce7e:	bf00      	nop
 801ce80:	3710      	adds	r7, #16
 801ce82:	46bd      	mov	sp, r7
 801ce84:	bd80      	pop	{r7, pc}

0801ce86 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 801ce86:	b580      	push	{r7, lr}
 801ce88:	b082      	sub	sp, #8
 801ce8a:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 801ce8c:	2300      	movs	r3, #0
 801ce8e:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 801ce90:	1d3b      	adds	r3, r7, #4
 801ce92:	2201      	movs	r2, #1
 801ce94:	4619      	mov	r1, r3
 801ce96:	2015      	movs	r0, #21
 801ce98:	f000 f95a 	bl	801d150 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 801ce9c:	793b      	ldrb	r3, [r7, #4]
 801ce9e:	425b      	negs	r3, r3
 801cea0:	105b      	asrs	r3, r3, #1
 801cea2:	71fb      	strb	r3, [r7, #7]
    return rssi;
 801cea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801cea8:	4618      	mov	r0, r3
 801ceaa:	3708      	adds	r7, #8
 801ceac:	46bd      	mov	sp, r7
 801ceae:	bd80      	pop	{r7, pc}

0801ceb0 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 801ceb0:	b580      	push	{r7, lr}
 801ceb2:	b084      	sub	sp, #16
 801ceb4:	af00      	add	r7, sp, #0
 801ceb6:	6078      	str	r0, [r7, #4]
 801ceb8:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 801ceba:	f107 030c 	add.w	r3, r7, #12
 801cebe:	2202      	movs	r2, #2
 801cec0:	4619      	mov	r1, r3
 801cec2:	2013      	movs	r0, #19
 801cec4:	f000 f944 	bl	801d150 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 801cec8:	f7ff fd7e 	bl	801c9c8 <SUBGRF_GetPacketType>
 801cecc:	4603      	mov	r3, r0
 801cece:	2b01      	cmp	r3, #1
 801ced0:	d10d      	bne.n	801ceee <SUBGRF_GetRxBufferStatus+0x3e>
 801ced2:	4b0c      	ldr	r3, [pc, #48]	@ (801cf04 <SUBGRF_GetRxBufferStatus+0x54>)
 801ced4:	781b      	ldrb	r3, [r3, #0]
 801ced6:	b2db      	uxtb	r3, r3
 801ced8:	2b01      	cmp	r3, #1
 801ceda:	d108      	bne.n	801ceee <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 801cedc:	f240 7002 	movw	r0, #1794	@ 0x702
 801cee0:	f000 f878 	bl	801cfd4 <SUBGRF_ReadRegister>
 801cee4:	4603      	mov	r3, r0
 801cee6:	461a      	mov	r2, r3
 801cee8:	687b      	ldr	r3, [r7, #4]
 801ceea:	701a      	strb	r2, [r3, #0]
 801ceec:	e002      	b.n	801cef4 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 801ceee:	7b3a      	ldrb	r2, [r7, #12]
 801cef0:	687b      	ldr	r3, [r7, #4]
 801cef2:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 801cef4:	7b7a      	ldrb	r2, [r7, #13]
 801cef6:	683b      	ldr	r3, [r7, #0]
 801cef8:	701a      	strb	r2, [r3, #0]
}
 801cefa:	bf00      	nop
 801cefc:	3710      	adds	r7, #16
 801cefe:	46bd      	mov	sp, r7
 801cf00:	bd80      	pop	{r7, pc}
 801cf02:	bf00      	nop
 801cf04:	20001c16 	.word	0x20001c16

0801cf08 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 801cf08:	b580      	push	{r7, lr}
 801cf0a:	b084      	sub	sp, #16
 801cf0c:	af00      	add	r7, sp, #0
 801cf0e:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 801cf10:	f107 030c 	add.w	r3, r7, #12
 801cf14:	2203      	movs	r2, #3
 801cf16:	4619      	mov	r1, r3
 801cf18:	2014      	movs	r0, #20
 801cf1a:	f000 f919 	bl	801d150 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 801cf1e:	f7ff fd53 	bl	801c9c8 <SUBGRF_GetPacketType>
 801cf22:	4603      	mov	r3, r0
 801cf24:	461a      	mov	r2, r3
 801cf26:	687b      	ldr	r3, [r7, #4]
 801cf28:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 801cf2a:	687b      	ldr	r3, [r7, #4]
 801cf2c:	781b      	ldrb	r3, [r3, #0]
 801cf2e:	2b00      	cmp	r3, #0
 801cf30:	d002      	beq.n	801cf38 <SUBGRF_GetPacketStatus+0x30>
 801cf32:	2b01      	cmp	r3, #1
 801cf34:	d013      	beq.n	801cf5e <SUBGRF_GetPacketStatus+0x56>
 801cf36:	e02a      	b.n	801cf8e <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 801cf38:	7b3a      	ldrb	r2, [r7, #12]
 801cf3a:	687b      	ldr	r3, [r7, #4]
 801cf3c:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 801cf3e:	7b7b      	ldrb	r3, [r7, #13]
 801cf40:	425b      	negs	r3, r3
 801cf42:	105b      	asrs	r3, r3, #1
 801cf44:	b25a      	sxtb	r2, r3
 801cf46:	687b      	ldr	r3, [r7, #4]
 801cf48:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 801cf4a:	7bbb      	ldrb	r3, [r7, #14]
 801cf4c:	425b      	negs	r3, r3
 801cf4e:	105b      	asrs	r3, r3, #1
 801cf50:	b25a      	sxtb	r2, r3
 801cf52:	687b      	ldr	r3, [r7, #4]
 801cf54:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 801cf56:	687b      	ldr	r3, [r7, #4]
 801cf58:	2200      	movs	r2, #0
 801cf5a:	609a      	str	r2, [r3, #8]
            break;
 801cf5c:	e020      	b.n	801cfa0 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 801cf5e:	7b3b      	ldrb	r3, [r7, #12]
 801cf60:	425b      	negs	r3, r3
 801cf62:	105b      	asrs	r3, r3, #1
 801cf64:	b25a      	sxtb	r2, r3
 801cf66:	687b      	ldr	r3, [r7, #4]
 801cf68:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 801cf6a:	7b7b      	ldrb	r3, [r7, #13]
 801cf6c:	b25b      	sxtb	r3, r3
 801cf6e:	3302      	adds	r3, #2
 801cf70:	109b      	asrs	r3, r3, #2
 801cf72:	b25a      	sxtb	r2, r3
 801cf74:	687b      	ldr	r3, [r7, #4]
 801cf76:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 801cf78:	7bbb      	ldrb	r3, [r7, #14]
 801cf7a:	425b      	negs	r3, r3
 801cf7c:	105b      	asrs	r3, r3, #1
 801cf7e:	b25a      	sxtb	r2, r3
 801cf80:	687b      	ldr	r3, [r7, #4]
 801cf82:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 801cf84:	4b08      	ldr	r3, [pc, #32]	@ (801cfa8 <SUBGRF_GetPacketStatus+0xa0>)
 801cf86:	681a      	ldr	r2, [r3, #0]
 801cf88:	687b      	ldr	r3, [r7, #4]
 801cf8a:	611a      	str	r2, [r3, #16]
            break;
 801cf8c:	e008      	b.n	801cfa0 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 801cf8e:	2214      	movs	r2, #20
 801cf90:	2100      	movs	r1, #0
 801cf92:	6878      	ldr	r0, [r7, #4]
 801cf94:	f000 fc03 	bl	801d79e <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 801cf98:	687b      	ldr	r3, [r7, #4]
 801cf9a:	220f      	movs	r2, #15
 801cf9c:	701a      	strb	r2, [r3, #0]
            break;
 801cf9e:	bf00      	nop
    }
}
 801cfa0:	bf00      	nop
 801cfa2:	3710      	adds	r7, #16
 801cfa4:	46bd      	mov	sp, r7
 801cfa6:	bd80      	pop	{r7, pc}
 801cfa8:	20001c18 	.word	0x20001c18

0801cfac <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 801cfac:	b580      	push	{r7, lr}
 801cfae:	b082      	sub	sp, #8
 801cfb0:	af00      	add	r7, sp, #0
 801cfb2:	4603      	mov	r3, r0
 801cfb4:	460a      	mov	r2, r1
 801cfb6:	80fb      	strh	r3, [r7, #6]
 801cfb8:	4613      	mov	r3, r2
 801cfba:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 801cfbc:	1d7a      	adds	r2, r7, #5
 801cfbe:	88f9      	ldrh	r1, [r7, #6]
 801cfc0:	2301      	movs	r3, #1
 801cfc2:	4803      	ldr	r0, [pc, #12]	@ (801cfd0 <SUBGRF_WriteRegister+0x24>)
 801cfc4:	f7eb fc22 	bl	800880c <HAL_SUBGHZ_WriteRegisters>
}
 801cfc8:	bf00      	nop
 801cfca:	3708      	adds	r7, #8
 801cfcc:	46bd      	mov	sp, r7
 801cfce:	bd80      	pop	{r7, pc}
 801cfd0:	2000025c 	.word	0x2000025c

0801cfd4 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 801cfd4:	b580      	push	{r7, lr}
 801cfd6:	b084      	sub	sp, #16
 801cfd8:	af00      	add	r7, sp, #0
 801cfda:	4603      	mov	r3, r0
 801cfdc:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 801cfde:	f107 020f 	add.w	r2, r7, #15
 801cfe2:	88f9      	ldrh	r1, [r7, #6]
 801cfe4:	2301      	movs	r3, #1
 801cfe6:	4804      	ldr	r0, [pc, #16]	@ (801cff8 <SUBGRF_ReadRegister+0x24>)
 801cfe8:	f7eb fc6f 	bl	80088ca <HAL_SUBGHZ_ReadRegisters>
    return data;
 801cfec:	7bfb      	ldrb	r3, [r7, #15]
}
 801cfee:	4618      	mov	r0, r3
 801cff0:	3710      	adds	r7, #16
 801cff2:	46bd      	mov	sp, r7
 801cff4:	bd80      	pop	{r7, pc}
 801cff6:	bf00      	nop
 801cff8:	2000025c 	.word	0x2000025c

0801cffc <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801cffc:	b580      	push	{r7, lr}
 801cffe:	b086      	sub	sp, #24
 801d000:	af00      	add	r7, sp, #0
 801d002:	4603      	mov	r3, r0
 801d004:	6039      	str	r1, [r7, #0]
 801d006:	80fb      	strh	r3, [r7, #6]
 801d008:	4613      	mov	r3, r2
 801d00a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d00c:	f3ef 8310 	mrs	r3, PRIMASK
 801d010:	60fb      	str	r3, [r7, #12]
  return(result);
 801d012:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801d014:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801d016:	b672      	cpsid	i
}
 801d018:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 801d01a:	88bb      	ldrh	r3, [r7, #4]
 801d01c:	88f9      	ldrh	r1, [r7, #6]
 801d01e:	683a      	ldr	r2, [r7, #0]
 801d020:	4806      	ldr	r0, [pc, #24]	@ (801d03c <SUBGRF_WriteRegisters+0x40>)
 801d022:	f7eb fbf3 	bl	800880c <HAL_SUBGHZ_WriteRegisters>
 801d026:	697b      	ldr	r3, [r7, #20]
 801d028:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d02a:	693b      	ldr	r3, [r7, #16]
 801d02c:	f383 8810 	msr	PRIMASK, r3
}
 801d030:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801d032:	bf00      	nop
 801d034:	3718      	adds	r7, #24
 801d036:	46bd      	mov	sp, r7
 801d038:	bd80      	pop	{r7, pc}
 801d03a:	bf00      	nop
 801d03c:	2000025c 	.word	0x2000025c

0801d040 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801d040:	b580      	push	{r7, lr}
 801d042:	b086      	sub	sp, #24
 801d044:	af00      	add	r7, sp, #0
 801d046:	4603      	mov	r3, r0
 801d048:	6039      	str	r1, [r7, #0]
 801d04a:	80fb      	strh	r3, [r7, #6]
 801d04c:	4613      	mov	r3, r2
 801d04e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d050:	f3ef 8310 	mrs	r3, PRIMASK
 801d054:	60fb      	str	r3, [r7, #12]
  return(result);
 801d056:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801d058:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801d05a:	b672      	cpsid	i
}
 801d05c:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 801d05e:	88bb      	ldrh	r3, [r7, #4]
 801d060:	88f9      	ldrh	r1, [r7, #6]
 801d062:	683a      	ldr	r2, [r7, #0]
 801d064:	4806      	ldr	r0, [pc, #24]	@ (801d080 <SUBGRF_ReadRegisters+0x40>)
 801d066:	f7eb fc30 	bl	80088ca <HAL_SUBGHZ_ReadRegisters>
 801d06a:	697b      	ldr	r3, [r7, #20]
 801d06c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d06e:	693b      	ldr	r3, [r7, #16]
 801d070:	f383 8810 	msr	PRIMASK, r3
}
 801d074:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801d076:	bf00      	nop
 801d078:	3718      	adds	r7, #24
 801d07a:	46bd      	mov	sp, r7
 801d07c:	bd80      	pop	{r7, pc}
 801d07e:	bf00      	nop
 801d080:	2000025c 	.word	0x2000025c

0801d084 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801d084:	b580      	push	{r7, lr}
 801d086:	b086      	sub	sp, #24
 801d088:	af00      	add	r7, sp, #0
 801d08a:	4603      	mov	r3, r0
 801d08c:	6039      	str	r1, [r7, #0]
 801d08e:	71fb      	strb	r3, [r7, #7]
 801d090:	4613      	mov	r3, r2
 801d092:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d094:	f3ef 8310 	mrs	r3, PRIMASK
 801d098:	60fb      	str	r3, [r7, #12]
  return(result);
 801d09a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801d09c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801d09e:	b672      	cpsid	i
}
 801d0a0:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 801d0a2:	79bb      	ldrb	r3, [r7, #6]
 801d0a4:	b29b      	uxth	r3, r3
 801d0a6:	79f9      	ldrb	r1, [r7, #7]
 801d0a8:	683a      	ldr	r2, [r7, #0]
 801d0aa:	4806      	ldr	r0, [pc, #24]	@ (801d0c4 <SUBGRF_WriteBuffer+0x40>)
 801d0ac:	f7eb fd21 	bl	8008af2 <HAL_SUBGHZ_WriteBuffer>
 801d0b0:	697b      	ldr	r3, [r7, #20]
 801d0b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d0b4:	693b      	ldr	r3, [r7, #16]
 801d0b6:	f383 8810 	msr	PRIMASK, r3
}
 801d0ba:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801d0bc:	bf00      	nop
 801d0be:	3718      	adds	r7, #24
 801d0c0:	46bd      	mov	sp, r7
 801d0c2:	bd80      	pop	{r7, pc}
 801d0c4:	2000025c 	.word	0x2000025c

0801d0c8 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801d0c8:	b580      	push	{r7, lr}
 801d0ca:	b086      	sub	sp, #24
 801d0cc:	af00      	add	r7, sp, #0
 801d0ce:	4603      	mov	r3, r0
 801d0d0:	6039      	str	r1, [r7, #0]
 801d0d2:	71fb      	strb	r3, [r7, #7]
 801d0d4:	4613      	mov	r3, r2
 801d0d6:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d0d8:	f3ef 8310 	mrs	r3, PRIMASK
 801d0dc:	60fb      	str	r3, [r7, #12]
  return(result);
 801d0de:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801d0e0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801d0e2:	b672      	cpsid	i
}
 801d0e4:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 801d0e6:	79bb      	ldrb	r3, [r7, #6]
 801d0e8:	b29b      	uxth	r3, r3
 801d0ea:	79f9      	ldrb	r1, [r7, #7]
 801d0ec:	683a      	ldr	r2, [r7, #0]
 801d0ee:	4806      	ldr	r0, [pc, #24]	@ (801d108 <SUBGRF_ReadBuffer+0x40>)
 801d0f0:	f7eb fd52 	bl	8008b98 <HAL_SUBGHZ_ReadBuffer>
 801d0f4:	697b      	ldr	r3, [r7, #20]
 801d0f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d0f8:	693b      	ldr	r3, [r7, #16]
 801d0fa:	f383 8810 	msr	PRIMASK, r3
}
 801d0fe:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801d100:	bf00      	nop
 801d102:	3718      	adds	r7, #24
 801d104:	46bd      	mov	sp, r7
 801d106:	bd80      	pop	{r7, pc}
 801d108:	2000025c 	.word	0x2000025c

0801d10c <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801d10c:	b580      	push	{r7, lr}
 801d10e:	b086      	sub	sp, #24
 801d110:	af00      	add	r7, sp, #0
 801d112:	4603      	mov	r3, r0
 801d114:	6039      	str	r1, [r7, #0]
 801d116:	71fb      	strb	r3, [r7, #7]
 801d118:	4613      	mov	r3, r2
 801d11a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d11c:	f3ef 8310 	mrs	r3, PRIMASK
 801d120:	60fb      	str	r3, [r7, #12]
  return(result);
 801d122:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801d124:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801d126:	b672      	cpsid	i
}
 801d128:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 801d12a:	88bb      	ldrh	r3, [r7, #4]
 801d12c:	79f9      	ldrb	r1, [r7, #7]
 801d12e:	683a      	ldr	r2, [r7, #0]
 801d130:	4806      	ldr	r0, [pc, #24]	@ (801d14c <SUBGRF_WriteCommand+0x40>)
 801d132:	f7eb fc2b 	bl	800898c <HAL_SUBGHZ_ExecSetCmd>
 801d136:	697b      	ldr	r3, [r7, #20]
 801d138:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d13a:	693b      	ldr	r3, [r7, #16]
 801d13c:	f383 8810 	msr	PRIMASK, r3
}
 801d140:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801d142:	bf00      	nop
 801d144:	3718      	adds	r7, #24
 801d146:	46bd      	mov	sp, r7
 801d148:	bd80      	pop	{r7, pc}
 801d14a:	bf00      	nop
 801d14c:	2000025c 	.word	0x2000025c

0801d150 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801d150:	b580      	push	{r7, lr}
 801d152:	b086      	sub	sp, #24
 801d154:	af00      	add	r7, sp, #0
 801d156:	4603      	mov	r3, r0
 801d158:	6039      	str	r1, [r7, #0]
 801d15a:	71fb      	strb	r3, [r7, #7]
 801d15c:	4613      	mov	r3, r2
 801d15e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d160:	f3ef 8310 	mrs	r3, PRIMASK
 801d164:	60fb      	str	r3, [r7, #12]
  return(result);
 801d166:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801d168:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801d16a:	b672      	cpsid	i
}
 801d16c:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 801d16e:	88bb      	ldrh	r3, [r7, #4]
 801d170:	79f9      	ldrb	r1, [r7, #7]
 801d172:	683a      	ldr	r2, [r7, #0]
 801d174:	4806      	ldr	r0, [pc, #24]	@ (801d190 <SUBGRF_ReadCommand+0x40>)
 801d176:	f7eb fc68 	bl	8008a4a <HAL_SUBGHZ_ExecGetCmd>
 801d17a:	697b      	ldr	r3, [r7, #20]
 801d17c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d17e:	693b      	ldr	r3, [r7, #16]
 801d180:	f383 8810 	msr	PRIMASK, r3
}
 801d184:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801d186:	bf00      	nop
 801d188:	3718      	adds	r7, #24
 801d18a:	46bd      	mov	sp, r7
 801d18c:	bd80      	pop	{r7, pc}
 801d18e:	bf00      	nop
 801d190:	2000025c 	.word	0x2000025c

0801d194 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 801d194:	b580      	push	{r7, lr}
 801d196:	b084      	sub	sp, #16
 801d198:	af00      	add	r7, sp, #0
 801d19a:	4603      	mov	r3, r0
 801d19c:	460a      	mov	r2, r1
 801d19e:	71fb      	strb	r3, [r7, #7]
 801d1a0:	4613      	mov	r3, r2
 801d1a2:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 801d1a4:	2301      	movs	r3, #1
 801d1a6:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 801d1a8:	79bb      	ldrb	r3, [r7, #6]
 801d1aa:	2b01      	cmp	r3, #1
 801d1ac:	d10d      	bne.n	801d1ca <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 801d1ae:	79fb      	ldrb	r3, [r7, #7]
 801d1b0:	2b01      	cmp	r3, #1
 801d1b2:	d104      	bne.n	801d1be <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 801d1b4:	2302      	movs	r3, #2
 801d1b6:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 801d1b8:	2004      	movs	r0, #4
 801d1ba:	f000 f8ef 	bl	801d39c <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 801d1be:	79fb      	ldrb	r3, [r7, #7]
 801d1c0:	2b02      	cmp	r3, #2
 801d1c2:	d107      	bne.n	801d1d4 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 801d1c4:	2303      	movs	r3, #3
 801d1c6:	73fb      	strb	r3, [r7, #15]
 801d1c8:	e004      	b.n	801d1d4 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 801d1ca:	79bb      	ldrb	r3, [r7, #6]
 801d1cc:	2b00      	cmp	r3, #0
 801d1ce:	d101      	bne.n	801d1d4 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 801d1d0:	2301      	movs	r3, #1
 801d1d2:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 801d1d4:	7bfb      	ldrb	r3, [r7, #15]
 801d1d6:	4618      	mov	r0, r3
 801d1d8:	f7ee ff45 	bl	800c066 <RBI_ConfigRFSwitch>
}
 801d1dc:	bf00      	nop
 801d1de:	3710      	adds	r7, #16
 801d1e0:	46bd      	mov	sp, r7
 801d1e2:	bd80      	pop	{r7, pc}

0801d1e4 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 801d1e4:	b580      	push	{r7, lr}
 801d1e6:	b084      	sub	sp, #16
 801d1e8:	af00      	add	r7, sp, #0
 801d1ea:	4603      	mov	r3, r0
 801d1ec:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 801d1ee:	2301      	movs	r3, #1
 801d1f0:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 801d1f2:	f7ee ff46 	bl	800c082 <RBI_GetTxConfig>
 801d1f6:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 801d1f8:	68bb      	ldr	r3, [r7, #8]
 801d1fa:	2b02      	cmp	r3, #2
 801d1fc:	d016      	beq.n	801d22c <SUBGRF_SetRfTxPower+0x48>
 801d1fe:	68bb      	ldr	r3, [r7, #8]
 801d200:	2b02      	cmp	r3, #2
 801d202:	dc16      	bgt.n	801d232 <SUBGRF_SetRfTxPower+0x4e>
 801d204:	68bb      	ldr	r3, [r7, #8]
 801d206:	2b00      	cmp	r3, #0
 801d208:	d003      	beq.n	801d212 <SUBGRF_SetRfTxPower+0x2e>
 801d20a:	68bb      	ldr	r3, [r7, #8]
 801d20c:	2b01      	cmp	r3, #1
 801d20e:	d00a      	beq.n	801d226 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 801d210:	e00f      	b.n	801d232 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 801d212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d216:	2b0f      	cmp	r3, #15
 801d218:	dd02      	ble.n	801d220 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 801d21a:	2302      	movs	r3, #2
 801d21c:	73fb      	strb	r3, [r7, #15]
            break;
 801d21e:	e009      	b.n	801d234 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 801d220:	2301      	movs	r3, #1
 801d222:	73fb      	strb	r3, [r7, #15]
            break;
 801d224:	e006      	b.n	801d234 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 801d226:	2301      	movs	r3, #1
 801d228:	73fb      	strb	r3, [r7, #15]
            break;
 801d22a:	e003      	b.n	801d234 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 801d22c:	2302      	movs	r3, #2
 801d22e:	73fb      	strb	r3, [r7, #15]
            break;
 801d230:	e000      	b.n	801d234 <SUBGRF_SetRfTxPower+0x50>
            break;
 801d232:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 801d234:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801d238:	7bfb      	ldrb	r3, [r7, #15]
 801d23a:	2202      	movs	r2, #2
 801d23c:	4618      	mov	r0, r3
 801d23e:	f7ff fbcd 	bl	801c9dc <SUBGRF_SetTxParams>

    return paSelect;
 801d242:	7bfb      	ldrb	r3, [r7, #15]
}
 801d244:	4618      	mov	r0, r3
 801d246:	3710      	adds	r7, #16
 801d248:	46bd      	mov	sp, r7
 801d24a:	bd80      	pop	{r7, pc}

0801d24c <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 801d24c:	b480      	push	{r7}
 801d24e:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 801d250:	2301      	movs	r3, #1
}
 801d252:	4618      	mov	r0, r3
 801d254:	46bd      	mov	sp, r7
 801d256:	bc80      	pop	{r7}
 801d258:	4770      	bx	lr
	...

0801d25c <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801d25c:	b580      	push	{r7, lr}
 801d25e:	b082      	sub	sp, #8
 801d260:	af00      	add	r7, sp, #0
 801d262:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 801d264:	4b03      	ldr	r3, [pc, #12]	@ (801d274 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 801d266:	681b      	ldr	r3, [r3, #0]
 801d268:	2001      	movs	r0, #1
 801d26a:	4798      	blx	r3
}
 801d26c:	bf00      	nop
 801d26e:	3708      	adds	r7, #8
 801d270:	46bd      	mov	sp, r7
 801d272:	bd80      	pop	{r7, pc}
 801d274:	20001c20 	.word	0x20001c20

0801d278 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801d278:	b580      	push	{r7, lr}
 801d27a:	b082      	sub	sp, #8
 801d27c:	af00      	add	r7, sp, #0
 801d27e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 801d280:	4b03      	ldr	r3, [pc, #12]	@ (801d290 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 801d282:	681b      	ldr	r3, [r3, #0]
 801d284:	2002      	movs	r0, #2
 801d286:	4798      	blx	r3
}
 801d288:	bf00      	nop
 801d28a:	3708      	adds	r7, #8
 801d28c:	46bd      	mov	sp, r7
 801d28e:	bd80      	pop	{r7, pc}
 801d290:	20001c20 	.word	0x20001c20

0801d294 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 801d294:	b580      	push	{r7, lr}
 801d296:	b082      	sub	sp, #8
 801d298:	af00      	add	r7, sp, #0
 801d29a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 801d29c:	4b03      	ldr	r3, [pc, #12]	@ (801d2ac <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 801d29e:	681b      	ldr	r3, [r3, #0]
 801d2a0:	2040      	movs	r0, #64	@ 0x40
 801d2a2:	4798      	blx	r3
}
 801d2a4:	bf00      	nop
 801d2a6:	3708      	adds	r7, #8
 801d2a8:	46bd      	mov	sp, r7
 801d2aa:	bd80      	pop	{r7, pc}
 801d2ac:	20001c20 	.word	0x20001c20

0801d2b0 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 801d2b0:	b580      	push	{r7, lr}
 801d2b2:	b082      	sub	sp, #8
 801d2b4:	af00      	add	r7, sp, #0
 801d2b6:	6078      	str	r0, [r7, #4]
 801d2b8:	460b      	mov	r3, r1
 801d2ba:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 801d2bc:	78fb      	ldrb	r3, [r7, #3]
 801d2be:	2b00      	cmp	r3, #0
 801d2c0:	d002      	beq.n	801d2c8 <HAL_SUBGHZ_CADStatusCallback+0x18>
 801d2c2:	2b01      	cmp	r3, #1
 801d2c4:	d005      	beq.n	801d2d2 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 801d2c6:	e00a      	b.n	801d2de <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 801d2c8:	4b07      	ldr	r3, [pc, #28]	@ (801d2e8 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801d2ca:	681b      	ldr	r3, [r3, #0]
 801d2cc:	2080      	movs	r0, #128	@ 0x80
 801d2ce:	4798      	blx	r3
            break;
 801d2d0:	e005      	b.n	801d2de <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 801d2d2:	4b05      	ldr	r3, [pc, #20]	@ (801d2e8 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801d2d4:	681b      	ldr	r3, [r3, #0]
 801d2d6:	f44f 7080 	mov.w	r0, #256	@ 0x100
 801d2da:	4798      	blx	r3
            break;
 801d2dc:	bf00      	nop
    }
}
 801d2de:	bf00      	nop
 801d2e0:	3708      	adds	r7, #8
 801d2e2:	46bd      	mov	sp, r7
 801d2e4:	bd80      	pop	{r7, pc}
 801d2e6:	bf00      	nop
 801d2e8:	20001c20 	.word	0x20001c20

0801d2ec <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801d2ec:	b580      	push	{r7, lr}
 801d2ee:	b082      	sub	sp, #8
 801d2f0:	af00      	add	r7, sp, #0
 801d2f2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 801d2f4:	4b04      	ldr	r3, [pc, #16]	@ (801d308 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 801d2f6:	681b      	ldr	r3, [r3, #0]
 801d2f8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 801d2fc:	4798      	blx	r3
}
 801d2fe:	bf00      	nop
 801d300:	3708      	adds	r7, #8
 801d302:	46bd      	mov	sp, r7
 801d304:	bd80      	pop	{r7, pc}
 801d306:	bf00      	nop
 801d308:	20001c20 	.word	0x20001c20

0801d30c <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801d30c:	b580      	push	{r7, lr}
 801d30e:	b082      	sub	sp, #8
 801d310:	af00      	add	r7, sp, #0
 801d312:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801d314:	4b03      	ldr	r3, [pc, #12]	@ (801d324 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 801d316:	681b      	ldr	r3, [r3, #0]
 801d318:	2020      	movs	r0, #32
 801d31a:	4798      	blx	r3
}
 801d31c:	bf00      	nop
 801d31e:	3708      	adds	r7, #8
 801d320:	46bd      	mov	sp, r7
 801d322:	bd80      	pop	{r7, pc}
 801d324:	20001c20 	.word	0x20001c20

0801d328 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801d328:	b580      	push	{r7, lr}
 801d32a:	b082      	sub	sp, #8
 801d32c:	af00      	add	r7, sp, #0
 801d32e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 801d330:	4b03      	ldr	r3, [pc, #12]	@ (801d340 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 801d332:	681b      	ldr	r3, [r3, #0]
 801d334:	2004      	movs	r0, #4
 801d336:	4798      	blx	r3
}
 801d338:	bf00      	nop
 801d33a:	3708      	adds	r7, #8
 801d33c:	46bd      	mov	sp, r7
 801d33e:	bd80      	pop	{r7, pc}
 801d340:	20001c20 	.word	0x20001c20

0801d344 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801d344:	b580      	push	{r7, lr}
 801d346:	b082      	sub	sp, #8
 801d348:	af00      	add	r7, sp, #0
 801d34a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 801d34c:	4b03      	ldr	r3, [pc, #12]	@ (801d35c <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 801d34e:	681b      	ldr	r3, [r3, #0]
 801d350:	2008      	movs	r0, #8
 801d352:	4798      	blx	r3
}
 801d354:	bf00      	nop
 801d356:	3708      	adds	r7, #8
 801d358:	46bd      	mov	sp, r7
 801d35a:	bd80      	pop	{r7, pc}
 801d35c:	20001c20 	.word	0x20001c20

0801d360 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801d360:	b580      	push	{r7, lr}
 801d362:	b082      	sub	sp, #8
 801d364:	af00      	add	r7, sp, #0
 801d366:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 801d368:	4b03      	ldr	r3, [pc, #12]	@ (801d378 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 801d36a:	681b      	ldr	r3, [r3, #0]
 801d36c:	2010      	movs	r0, #16
 801d36e:	4798      	blx	r3
}
 801d370:	bf00      	nop
 801d372:	3708      	adds	r7, #8
 801d374:	46bd      	mov	sp, r7
 801d376:	bd80      	pop	{r7, pc}
 801d378:	20001c20 	.word	0x20001c20

0801d37c <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801d37c:	b580      	push	{r7, lr}
 801d37e:	b082      	sub	sp, #8
 801d380:	af00      	add	r7, sp, #0
 801d382:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 801d384:	4b04      	ldr	r3, [pc, #16]	@ (801d398 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 801d386:	681b      	ldr	r3, [r3, #0]
 801d388:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 801d38c:	4798      	blx	r3
}
 801d38e:	bf00      	nop
 801d390:	3708      	adds	r7, #8
 801d392:	46bd      	mov	sp, r7
 801d394:	bd80      	pop	{r7, pc}
 801d396:	bf00      	nop
 801d398:	20001c20 	.word	0x20001c20

0801d39c <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 801d39c:	b580      	push	{r7, lr}
 801d39e:	b084      	sub	sp, #16
 801d3a0:	af00      	add	r7, sp, #0
 801d3a2:	4603      	mov	r3, r0
 801d3a4:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 801d3a6:	f7ee fe7a 	bl	800c09e <RBI_IsDCDC>
 801d3aa:	4603      	mov	r3, r0
 801d3ac:	2b01      	cmp	r3, #1
 801d3ae:	d112      	bne.n	801d3d6 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 801d3b0:	f640 1023 	movw	r0, #2339	@ 0x923
 801d3b4:	f7ff fe0e 	bl	801cfd4 <SUBGRF_ReadRegister>
 801d3b8:	4603      	mov	r3, r0
 801d3ba:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 801d3bc:	7bfb      	ldrb	r3, [r7, #15]
 801d3be:	f023 0306 	bic.w	r3, r3, #6
 801d3c2:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 801d3c4:	7bfa      	ldrb	r2, [r7, #15]
 801d3c6:	79fb      	ldrb	r3, [r7, #7]
 801d3c8:	4313      	orrs	r3, r2
 801d3ca:	b2db      	uxtb	r3, r3
 801d3cc:	4619      	mov	r1, r3
 801d3ce:	f640 1023 	movw	r0, #2339	@ 0x923
 801d3d2:	f7ff fdeb 	bl	801cfac <SUBGRF_WriteRegister>
  }
}
 801d3d6:	bf00      	nop
 801d3d8:	3710      	adds	r7, #16
 801d3da:	46bd      	mov	sp, r7
 801d3dc:	bd80      	pop	{r7, pc}
	...

0801d3e0 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 801d3e0:	b480      	push	{r7}
 801d3e2:	b085      	sub	sp, #20
 801d3e4:	af00      	add	r7, sp, #0
 801d3e6:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 801d3e8:	687b      	ldr	r3, [r7, #4]
 801d3ea:	2b00      	cmp	r3, #0
 801d3ec:	d101      	bne.n	801d3f2 <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 801d3ee:	231f      	movs	r3, #31
 801d3f0:	e017      	b.n	801d422 <SUBGRF_GetFskBandwidthRegValue+0x42>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801d3f2:	2300      	movs	r3, #0
 801d3f4:	73fb      	strb	r3, [r7, #15]
 801d3f6:	e00f      	b.n	801d418 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 801d3f8:	7bfb      	ldrb	r3, [r7, #15]
 801d3fa:	4a0c      	ldr	r2, [pc, #48]	@ (801d42c <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801d3fc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801d400:	687a      	ldr	r2, [r7, #4]
 801d402:	429a      	cmp	r2, r3
 801d404:	d205      	bcs.n	801d412 <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 801d406:	7bfb      	ldrb	r3, [r7, #15]
 801d408:	4a08      	ldr	r2, [pc, #32]	@ (801d42c <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801d40a:	00db      	lsls	r3, r3, #3
 801d40c:	4413      	add	r3, r2
 801d40e:	791b      	ldrb	r3, [r3, #4]
 801d410:	e007      	b.n	801d422 <SUBGRF_GetFskBandwidthRegValue+0x42>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801d412:	7bfb      	ldrb	r3, [r7, #15]
 801d414:	3301      	adds	r3, #1
 801d416:	73fb      	strb	r3, [r7, #15]
 801d418:	7bfb      	ldrb	r3, [r7, #15]
 801d41a:	2b15      	cmp	r3, #21
 801d41c:	d9ec      	bls.n	801d3f8 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 801d41e:	bf00      	nop
 801d420:	e7fd      	b.n	801d41e <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 801d422:	4618      	mov	r0, r3
 801d424:	3714      	adds	r7, #20
 801d426:	46bd      	mov	sp, r7
 801d428:	bc80      	pop	{r7}
 801d42a:	4770      	bx	lr
 801d42c:	0801fd5c 	.word	0x0801fd5c

0801d430 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 801d430:	b580      	push	{r7, lr}
 801d432:	b08a      	sub	sp, #40	@ 0x28
 801d434:	af00      	add	r7, sp, #0
 801d436:	6078      	str	r0, [r7, #4]
 801d438:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 801d43a:	4b35      	ldr	r3, [pc, #212]	@ (801d510 <SUBGRF_GetCFO+0xe0>)
 801d43c:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 801d43e:	f640 0007 	movw	r0, #2055	@ 0x807
 801d442:	f7ff fdc7 	bl	801cfd4 <SUBGRF_ReadRegister>
 801d446:	4603      	mov	r3, r0
 801d448:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 801d44a:	7ffb      	ldrb	r3, [r7, #31]
 801d44c:	08db      	lsrs	r3, r3, #3
 801d44e:	b2db      	uxtb	r3, r3
 801d450:	f003 0303 	and.w	r3, r3, #3
 801d454:	3328      	adds	r3, #40	@ 0x28
 801d456:	443b      	add	r3, r7
 801d458:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 801d45c:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 801d45e:	7ffb      	ldrb	r3, [r7, #31]
 801d460:	f003 0307 	and.w	r3, r3, #7
 801d464:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 801d466:	7fba      	ldrb	r2, [r7, #30]
 801d468:	7f7b      	ldrb	r3, [r7, #29]
 801d46a:	3301      	adds	r3, #1
 801d46c:	fa02 f303 	lsl.w	r3, r2, r3
 801d470:	461a      	mov	r2, r3
 801d472:	4b28      	ldr	r3, [pc, #160]	@ (801d514 <SUBGRF_GetCFO+0xe4>)
 801d474:	fbb3 f3f2 	udiv	r3, r3, r2
 801d478:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 801d47a:	69ba      	ldr	r2, [r7, #24]
 801d47c:	687b      	ldr	r3, [r7, #4]
 801d47e:	fbb2 f3f3 	udiv	r3, r2, r3
 801d482:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 801d484:	2301      	movs	r3, #1
 801d486:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 801d48a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801d48e:	697a      	ldr	r2, [r7, #20]
 801d490:	fb02 f303 	mul.w	r3, r2, r3
 801d494:	2b07      	cmp	r3, #7
 801d496:	d802      	bhi.n	801d49e <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 801d498:	2302      	movs	r3, #2
 801d49a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  if (cf_osr * interp < 4)
 801d49e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801d4a2:	697a      	ldr	r2, [r7, #20]
 801d4a4:	fb02 f303 	mul.w	r3, r2, r3
 801d4a8:	2b03      	cmp	r3, #3
 801d4aa:	d802      	bhi.n	801d4b2 <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 801d4ac:	2304      	movs	r3, #4
 801d4ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 801d4b2:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801d4b6:	69bb      	ldr	r3, [r7, #24]
 801d4b8:	fb02 f303 	mul.w	r3, r2, r3
 801d4bc:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 801d4be:	f44f 60d6 	mov.w	r0, #1712	@ 0x6b0
 801d4c2:	f7ff fd87 	bl	801cfd4 <SUBGRF_ReadRegister>
 801d4c6:	4603      	mov	r3, r0
 801d4c8:	021b      	lsls	r3, r3, #8
 801d4ca:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 801d4ce:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 801d4d0:	f240 60b1 	movw	r0, #1713	@ 0x6b1
 801d4d4:	f7ff fd7e 	bl	801cfd4 <SUBGRF_ReadRegister>
 801d4d8:	4603      	mov	r3, r0
 801d4da:	461a      	mov	r2, r3
 801d4dc:	6a3b      	ldr	r3, [r7, #32]
 801d4de:	4313      	orrs	r3, r2
 801d4e0:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 801d4e2:	6a3b      	ldr	r3, [r7, #32]
 801d4e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801d4e8:	2b00      	cmp	r3, #0
 801d4ea:	d005      	beq.n	801d4f8 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 801d4ec:	6a3b      	ldr	r3, [r7, #32]
 801d4ee:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 801d4f2:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 801d4f6:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 801d4f8:	693b      	ldr	r3, [r7, #16]
 801d4fa:	095b      	lsrs	r3, r3, #5
 801d4fc:	6a3a      	ldr	r2, [r7, #32]
 801d4fe:	fb02 f303 	mul.w	r3, r2, r3
 801d502:	11da      	asrs	r2, r3, #7
 801d504:	683b      	ldr	r3, [r7, #0]
 801d506:	601a      	str	r2, [r3, #0]
}
 801d508:	bf00      	nop
 801d50a:	3728      	adds	r7, #40	@ 0x28
 801d50c:	46bd      	mov	sp, r7
 801d50e:	bd80      	pop	{r7, pc}
 801d510:	0c0a0804 	.word	0x0c0a0804
 801d514:	01e84800 	.word	0x01e84800

0801d518 <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 801d518:	b480      	push	{r7}
 801d51a:	b087      	sub	sp, #28
 801d51c:	af00      	add	r7, sp, #0
 801d51e:	4603      	mov	r3, r0
 801d520:	60b9      	str	r1, [r7, #8]
 801d522:	607a      	str	r2, [r7, #4]
 801d524:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 801d526:	2300      	movs	r3, #0
 801d528:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 801d52a:	f04f 33ff 	mov.w	r3, #4294967295
 801d52e:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 801d530:	697b      	ldr	r3, [r7, #20]
}
 801d532:	4618      	mov	r0, r3
 801d534:	371c      	adds	r7, #28
 801d536:	46bd      	mov	sp, r7
 801d538:	bc80      	pop	{r7}
 801d53a:	4770      	bx	lr

0801d53c <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 801d53c:	b480      	push	{r7}
 801d53e:	b087      	sub	sp, #28
 801d540:	af00      	add	r7, sp, #0
 801d542:	4603      	mov	r3, r0
 801d544:	60b9      	str	r1, [r7, #8]
 801d546:	607a      	str	r2, [r7, #4]
 801d548:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 801d54a:	2300      	movs	r3, #0
 801d54c:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 801d54e:	f04f 33ff 	mov.w	r3, #4294967295
 801d552:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 801d554:	697b      	ldr	r3, [r7, #20]
}
 801d556:	4618      	mov	r0, r3
 801d558:	371c      	adds	r7, #28
 801d55a:	46bd      	mov	sp, r7
 801d55c:	bc80      	pop	{r7}
 801d55e:	4770      	bx	lr

0801d560 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 801d560:	b480      	push	{r7}
 801d562:	b085      	sub	sp, #20
 801d564:	af00      	add	r7, sp, #0
 801d566:	60f8      	str	r0, [r7, #12]
 801d568:	60b9      	str	r1, [r7, #8]
 801d56a:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 801d56c:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 801d570:	4618      	mov	r0, r3
 801d572:	3714      	adds	r7, #20
 801d574:	46bd      	mov	sp, r7
 801d576:	bc80      	pop	{r7}
 801d578:	4770      	bx	lr

0801d57a <RFW_DeInit>:

void RFW_DeInit( void )
{
 801d57a:	b480      	push	{r7}
 801d57c:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 801d57e:	bf00      	nop
 801d580:	46bd      	mov	sp, r7
 801d582:	bc80      	pop	{r7}
 801d584:	4770      	bx	lr

0801d586 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 801d586:	b480      	push	{r7}
 801d588:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 801d58a:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 801d58c:	4618      	mov	r0, r3
 801d58e:	46bd      	mov	sp, r7
 801d590:	bc80      	pop	{r7}
 801d592:	4770      	bx	lr

0801d594 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 801d594:	b480      	push	{r7}
 801d596:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 801d598:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 801d59a:	4618      	mov	r0, r3
 801d59c:	46bd      	mov	sp, r7
 801d59e:	bc80      	pop	{r7}
 801d5a0:	4770      	bx	lr

0801d5a2 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 801d5a2:	b480      	push	{r7}
 801d5a4:	b083      	sub	sp, #12
 801d5a6:	af00      	add	r7, sp, #0
 801d5a8:	4603      	mov	r3, r0
 801d5aa:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 801d5ac:	bf00      	nop
 801d5ae:	370c      	adds	r7, #12
 801d5b0:	46bd      	mov	sp, r7
 801d5b2:	bc80      	pop	{r7}
 801d5b4:	4770      	bx	lr

0801d5b6 <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 801d5b6:	b480      	push	{r7}
 801d5b8:	b087      	sub	sp, #28
 801d5ba:	af00      	add	r7, sp, #0
 801d5bc:	60f8      	str	r0, [r7, #12]
 801d5be:	460b      	mov	r3, r1
 801d5c0:	607a      	str	r2, [r7, #4]
 801d5c2:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 801d5c4:	f04f 33ff 	mov.w	r3, #4294967295
 801d5c8:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 801d5ca:	697b      	ldr	r3, [r7, #20]
}
 801d5cc:	4618      	mov	r0, r3
 801d5ce:	371c      	adds	r7, #28
 801d5d0:	46bd      	mov	sp, r7
 801d5d2:	bc80      	pop	{r7}
 801d5d4:	4770      	bx	lr

0801d5d6 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 801d5d6:	b480      	push	{r7}
 801d5d8:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 801d5da:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 801d5de:	4618      	mov	r0, r3
 801d5e0:	46bd      	mov	sp, r7
 801d5e2:	bc80      	pop	{r7}
 801d5e4:	4770      	bx	lr

0801d5e6 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 801d5e6:	b480      	push	{r7}
 801d5e8:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 801d5ea:	bf00      	nop
 801d5ec:	46bd      	mov	sp, r7
 801d5ee:	bc80      	pop	{r7}
 801d5f0:	4770      	bx	lr

0801d5f2 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 801d5f2:	b480      	push	{r7}
 801d5f4:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 801d5f6:	bf00      	nop
 801d5f8:	46bd      	mov	sp, r7
 801d5fa:	bc80      	pop	{r7}
 801d5fc:	4770      	bx	lr

0801d5fe <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 801d5fe:	b480      	push	{r7}
 801d600:	b083      	sub	sp, #12
 801d602:	af00      	add	r7, sp, #0
 801d604:	4603      	mov	r3, r0
 801d606:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 801d608:	bf00      	nop
 801d60a:	370c      	adds	r7, #12
 801d60c:	46bd      	mov	sp, r7
 801d60e:	bc80      	pop	{r7}
 801d610:	4770      	bx	lr
	...

0801d614 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801d614:	b480      	push	{r7}
 801d616:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801d618:	4b04      	ldr	r3, [pc, #16]	@ (801d62c <UTIL_LPM_Init+0x18>)
 801d61a:	2200      	movs	r2, #0
 801d61c:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801d61e:	4b04      	ldr	r3, [pc, #16]	@ (801d630 <UTIL_LPM_Init+0x1c>)
 801d620:	2200      	movs	r2, #0
 801d622:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801d624:	bf00      	nop
 801d626:	46bd      	mov	sp, r7
 801d628:	bc80      	pop	{r7}
 801d62a:	4770      	bx	lr
 801d62c:	20001c24 	.word	0x20001c24
 801d630:	20001c28 	.word	0x20001c28

0801d634 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801d634:	b480      	push	{r7}
 801d636:	b087      	sub	sp, #28
 801d638:	af00      	add	r7, sp, #0
 801d63a:	6078      	str	r0, [r7, #4]
 801d63c:	460b      	mov	r3, r1
 801d63e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d640:	f3ef 8310 	mrs	r3, PRIMASK
 801d644:	613b      	str	r3, [r7, #16]
  return(result);
 801d646:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801d648:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801d64a:	b672      	cpsid	i
}
 801d64c:	bf00      	nop
  
  switch( state )
 801d64e:	78fb      	ldrb	r3, [r7, #3]
 801d650:	2b00      	cmp	r3, #0
 801d652:	d008      	beq.n	801d666 <UTIL_LPM_SetStopMode+0x32>
 801d654:	2b01      	cmp	r3, #1
 801d656:	d10e      	bne.n	801d676 <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801d658:	4b0d      	ldr	r3, [pc, #52]	@ (801d690 <UTIL_LPM_SetStopMode+0x5c>)
 801d65a:	681a      	ldr	r2, [r3, #0]
 801d65c:	687b      	ldr	r3, [r7, #4]
 801d65e:	4313      	orrs	r3, r2
 801d660:	4a0b      	ldr	r2, [pc, #44]	@ (801d690 <UTIL_LPM_SetStopMode+0x5c>)
 801d662:	6013      	str	r3, [r2, #0]
      break;
 801d664:	e008      	b.n	801d678 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801d666:	687b      	ldr	r3, [r7, #4]
 801d668:	43da      	mvns	r2, r3
 801d66a:	4b09      	ldr	r3, [pc, #36]	@ (801d690 <UTIL_LPM_SetStopMode+0x5c>)
 801d66c:	681b      	ldr	r3, [r3, #0]
 801d66e:	4013      	ands	r3, r2
 801d670:	4a07      	ldr	r2, [pc, #28]	@ (801d690 <UTIL_LPM_SetStopMode+0x5c>)
 801d672:	6013      	str	r3, [r2, #0]
      break;
 801d674:	e000      	b.n	801d678 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 801d676:	bf00      	nop
 801d678:	697b      	ldr	r3, [r7, #20]
 801d67a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d67c:	68fb      	ldr	r3, [r7, #12]
 801d67e:	f383 8810 	msr	PRIMASK, r3
}
 801d682:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801d684:	bf00      	nop
 801d686:	371c      	adds	r7, #28
 801d688:	46bd      	mov	sp, r7
 801d68a:	bc80      	pop	{r7}
 801d68c:	4770      	bx	lr
 801d68e:	bf00      	nop
 801d690:	20001c24 	.word	0x20001c24

0801d694 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801d694:	b480      	push	{r7}
 801d696:	b087      	sub	sp, #28
 801d698:	af00      	add	r7, sp, #0
 801d69a:	6078      	str	r0, [r7, #4]
 801d69c:	460b      	mov	r3, r1
 801d69e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d6a0:	f3ef 8310 	mrs	r3, PRIMASK
 801d6a4:	613b      	str	r3, [r7, #16]
  return(result);
 801d6a6:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801d6a8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801d6aa:	b672      	cpsid	i
}
 801d6ac:	bf00      	nop
  
  switch(state)
 801d6ae:	78fb      	ldrb	r3, [r7, #3]
 801d6b0:	2b00      	cmp	r3, #0
 801d6b2:	d008      	beq.n	801d6c6 <UTIL_LPM_SetOffMode+0x32>
 801d6b4:	2b01      	cmp	r3, #1
 801d6b6:	d10e      	bne.n	801d6d6 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801d6b8:	4b0d      	ldr	r3, [pc, #52]	@ (801d6f0 <UTIL_LPM_SetOffMode+0x5c>)
 801d6ba:	681a      	ldr	r2, [r3, #0]
 801d6bc:	687b      	ldr	r3, [r7, #4]
 801d6be:	4313      	orrs	r3, r2
 801d6c0:	4a0b      	ldr	r2, [pc, #44]	@ (801d6f0 <UTIL_LPM_SetOffMode+0x5c>)
 801d6c2:	6013      	str	r3, [r2, #0]
      break;
 801d6c4:	e008      	b.n	801d6d8 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801d6c6:	687b      	ldr	r3, [r7, #4]
 801d6c8:	43da      	mvns	r2, r3
 801d6ca:	4b09      	ldr	r3, [pc, #36]	@ (801d6f0 <UTIL_LPM_SetOffMode+0x5c>)
 801d6cc:	681b      	ldr	r3, [r3, #0]
 801d6ce:	4013      	ands	r3, r2
 801d6d0:	4a07      	ldr	r2, [pc, #28]	@ (801d6f0 <UTIL_LPM_SetOffMode+0x5c>)
 801d6d2:	6013      	str	r3, [r2, #0]
      break;
 801d6d4:	e000      	b.n	801d6d8 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801d6d6:	bf00      	nop
 801d6d8:	697b      	ldr	r3, [r7, #20]
 801d6da:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d6dc:	68fb      	ldr	r3, [r7, #12]
 801d6de:	f383 8810 	msr	PRIMASK, r3
}
 801d6e2:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801d6e4:	bf00      	nop
 801d6e6:	371c      	adds	r7, #28
 801d6e8:	46bd      	mov	sp, r7
 801d6ea:	bc80      	pop	{r7}
 801d6ec:	4770      	bx	lr
 801d6ee:	bf00      	nop
 801d6f0:	20001c28 	.word	0x20001c28

0801d6f4 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 801d6f4:	b580      	push	{r7, lr}
 801d6f6:	b084      	sub	sp, #16
 801d6f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d6fa:	f3ef 8310 	mrs	r3, PRIMASK
 801d6fe:	60bb      	str	r3, [r7, #8]
  return(result);
 801d700:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 801d702:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801d704:	b672      	cpsid	i
}
 801d706:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801d708:	4b12      	ldr	r3, [pc, #72]	@ (801d754 <UTIL_LPM_EnterLowPower+0x60>)
 801d70a:	681b      	ldr	r3, [r3, #0]
 801d70c:	2b00      	cmp	r3, #0
 801d70e:	d006      	beq.n	801d71e <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 801d710:	4b11      	ldr	r3, [pc, #68]	@ (801d758 <UTIL_LPM_EnterLowPower+0x64>)
 801d712:	681b      	ldr	r3, [r3, #0]
 801d714:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801d716:	4b10      	ldr	r3, [pc, #64]	@ (801d758 <UTIL_LPM_EnterLowPower+0x64>)
 801d718:	685b      	ldr	r3, [r3, #4]
 801d71a:	4798      	blx	r3
 801d71c:	e010      	b.n	801d740 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801d71e:	4b0f      	ldr	r3, [pc, #60]	@ (801d75c <UTIL_LPM_EnterLowPower+0x68>)
 801d720:	681b      	ldr	r3, [r3, #0]
 801d722:	2b00      	cmp	r3, #0
 801d724:	d006      	beq.n	801d734 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 801d726:	4b0c      	ldr	r3, [pc, #48]	@ (801d758 <UTIL_LPM_EnterLowPower+0x64>)
 801d728:	689b      	ldr	r3, [r3, #8]
 801d72a:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 801d72c:	4b0a      	ldr	r3, [pc, #40]	@ (801d758 <UTIL_LPM_EnterLowPower+0x64>)
 801d72e:	68db      	ldr	r3, [r3, #12]
 801d730:	4798      	blx	r3
 801d732:	e005      	b.n	801d740 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 801d734:	4b08      	ldr	r3, [pc, #32]	@ (801d758 <UTIL_LPM_EnterLowPower+0x64>)
 801d736:	691b      	ldr	r3, [r3, #16]
 801d738:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801d73a:	4b07      	ldr	r3, [pc, #28]	@ (801d758 <UTIL_LPM_EnterLowPower+0x64>)
 801d73c:	695b      	ldr	r3, [r3, #20]
 801d73e:	4798      	blx	r3
 801d740:	68fb      	ldr	r3, [r7, #12]
 801d742:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d744:	687b      	ldr	r3, [r7, #4]
 801d746:	f383 8810 	msr	PRIMASK, r3
}
 801d74a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 801d74c:	bf00      	nop
 801d74e:	3710      	adds	r7, #16
 801d750:	46bd      	mov	sp, r7
 801d752:	bd80      	pop	{r7, pc}
 801d754:	20001c24 	.word	0x20001c24
 801d758:	0801f74c 	.word	0x0801f74c
 801d75c:	20001c28 	.word	0x20001c28

0801d760 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801d760:	b480      	push	{r7}
 801d762:	b087      	sub	sp, #28
 801d764:	af00      	add	r7, sp, #0
 801d766:	60f8      	str	r0, [r7, #12]
 801d768:	60b9      	str	r1, [r7, #8]
 801d76a:	4613      	mov	r3, r2
 801d76c:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 801d76e:	68fb      	ldr	r3, [r7, #12]
 801d770:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801d772:	68bb      	ldr	r3, [r7, #8]
 801d774:	613b      	str	r3, [r7, #16]

  while( size-- )
 801d776:	e007      	b.n	801d788 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801d778:	693a      	ldr	r2, [r7, #16]
 801d77a:	1c53      	adds	r3, r2, #1
 801d77c:	613b      	str	r3, [r7, #16]
 801d77e:	697b      	ldr	r3, [r7, #20]
 801d780:	1c59      	adds	r1, r3, #1
 801d782:	6179      	str	r1, [r7, #20]
 801d784:	7812      	ldrb	r2, [r2, #0]
 801d786:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801d788:	88fb      	ldrh	r3, [r7, #6]
 801d78a:	1e5a      	subs	r2, r3, #1
 801d78c:	80fa      	strh	r2, [r7, #6]
 801d78e:	2b00      	cmp	r3, #0
 801d790:	d1f2      	bne.n	801d778 <UTIL_MEM_cpy_8+0x18>
    }
}
 801d792:	bf00      	nop
 801d794:	bf00      	nop
 801d796:	371c      	adds	r7, #28
 801d798:	46bd      	mov	sp, r7
 801d79a:	bc80      	pop	{r7}
 801d79c:	4770      	bx	lr

0801d79e <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801d79e:	b480      	push	{r7}
 801d7a0:	b085      	sub	sp, #20
 801d7a2:	af00      	add	r7, sp, #0
 801d7a4:	6078      	str	r0, [r7, #4]
 801d7a6:	460b      	mov	r3, r1
 801d7a8:	70fb      	strb	r3, [r7, #3]
 801d7aa:	4613      	mov	r3, r2
 801d7ac:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801d7ae:	687b      	ldr	r3, [r7, #4]
 801d7b0:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801d7b2:	e004      	b.n	801d7be <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 801d7b4:	68fb      	ldr	r3, [r7, #12]
 801d7b6:	1c5a      	adds	r2, r3, #1
 801d7b8:	60fa      	str	r2, [r7, #12]
 801d7ba:	78fa      	ldrb	r2, [r7, #3]
 801d7bc:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801d7be:	883b      	ldrh	r3, [r7, #0]
 801d7c0:	1e5a      	subs	r2, r3, #1
 801d7c2:	803a      	strh	r2, [r7, #0]
 801d7c4:	2b00      	cmp	r3, #0
 801d7c6:	d1f5      	bne.n	801d7b4 <UTIL_MEM_set_8+0x16>
  }
}
 801d7c8:	bf00      	nop
 801d7ca:	bf00      	nop
 801d7cc:	3714      	adds	r7, #20
 801d7ce:	46bd      	mov	sp, r7
 801d7d0:	bc80      	pop	{r7}
 801d7d2:	4770      	bx	lr

0801d7d4 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801d7d4:	b082      	sub	sp, #8
 801d7d6:	b480      	push	{r7}
 801d7d8:	b087      	sub	sp, #28
 801d7da:	af00      	add	r7, sp, #0
 801d7dc:	60f8      	str	r0, [r7, #12]
 801d7de:	1d38      	adds	r0, r7, #4
 801d7e0:	e880 0006 	stmia.w	r0, {r1, r2}
 801d7e4:	627b      	str	r3, [r7, #36]	@ 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801d7e6:	2300      	movs	r3, #0
 801d7e8:	613b      	str	r3, [r7, #16]
 801d7ea:	2300      	movs	r3, #0
 801d7ec:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 801d7ee:	687a      	ldr	r2, [r7, #4]
 801d7f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d7f2:	4413      	add	r3, r2
 801d7f4:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801d7f6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801d7fa:	b29a      	uxth	r2, r3
 801d7fc:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 801d800:	b29b      	uxth	r3, r3
 801d802:	4413      	add	r3, r2
 801d804:	b29b      	uxth	r3, r3
 801d806:	b21b      	sxth	r3, r3
 801d808:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 801d80a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801d80e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801d812:	db0a      	blt.n	801d82a <SysTimeAdd+0x56>
  {
    c.Seconds++;
 801d814:	693b      	ldr	r3, [r7, #16]
 801d816:	3301      	adds	r3, #1
 801d818:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 801d81a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801d81e:	b29b      	uxth	r3, r3
 801d820:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 801d824:	b29b      	uxth	r3, r3
 801d826:	b21b      	sxth	r3, r3
 801d828:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801d82a:	68fb      	ldr	r3, [r7, #12]
 801d82c:	461a      	mov	r2, r3
 801d82e:	f107 0310 	add.w	r3, r7, #16
 801d832:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d836:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801d83a:	68f8      	ldr	r0, [r7, #12]
 801d83c:	371c      	adds	r7, #28
 801d83e:	46bd      	mov	sp, r7
 801d840:	bc80      	pop	{r7}
 801d842:	b002      	add	sp, #8
 801d844:	4770      	bx	lr

0801d846 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801d846:	b082      	sub	sp, #8
 801d848:	b480      	push	{r7}
 801d84a:	b087      	sub	sp, #28
 801d84c:	af00      	add	r7, sp, #0
 801d84e:	60f8      	str	r0, [r7, #12]
 801d850:	1d38      	adds	r0, r7, #4
 801d852:	e880 0006 	stmia.w	r0, {r1, r2}
 801d856:	627b      	str	r3, [r7, #36]	@ 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801d858:	2300      	movs	r3, #0
 801d85a:	613b      	str	r3, [r7, #16]
 801d85c:	2300      	movs	r3, #0
 801d85e:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 801d860:	687a      	ldr	r2, [r7, #4]
 801d862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d864:	1ad3      	subs	r3, r2, r3
 801d866:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801d868:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801d86c:	b29a      	uxth	r2, r3
 801d86e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 801d872:	b29b      	uxth	r3, r3
 801d874:	1ad3      	subs	r3, r2, r3
 801d876:	b29b      	uxth	r3, r3
 801d878:	b21b      	sxth	r3, r3
 801d87a:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 801d87c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801d880:	2b00      	cmp	r3, #0
 801d882:	da0a      	bge.n	801d89a <SysTimeSub+0x54>
  {
    c.Seconds--;
 801d884:	693b      	ldr	r3, [r7, #16]
 801d886:	3b01      	subs	r3, #1
 801d888:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 801d88a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801d88e:	b29b      	uxth	r3, r3
 801d890:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 801d894:	b29b      	uxth	r3, r3
 801d896:	b21b      	sxth	r3, r3
 801d898:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801d89a:	68fb      	ldr	r3, [r7, #12]
 801d89c:	461a      	mov	r2, r3
 801d89e:	f107 0310 	add.w	r3, r7, #16
 801d8a2:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d8a6:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801d8aa:	68f8      	ldr	r0, [r7, #12]
 801d8ac:	371c      	adds	r7, #28
 801d8ae:	46bd      	mov	sp, r7
 801d8b0:	bc80      	pop	{r7}
 801d8b2:	b002      	add	sp, #8
 801d8b4:	4770      	bx	lr
	...

0801d8b8 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801d8b8:	b580      	push	{r7, lr}
 801d8ba:	b088      	sub	sp, #32
 801d8bc:	af02      	add	r7, sp, #8
 801d8be:	463b      	mov	r3, r7
 801d8c0:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801d8c4:	2300      	movs	r3, #0
 801d8c6:	60bb      	str	r3, [r7, #8]
 801d8c8:	2300      	movs	r3, #0
 801d8ca:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801d8cc:	4b10      	ldr	r3, [pc, #64]	@ (801d910 <SysTimeSet+0x58>)
 801d8ce:	691b      	ldr	r3, [r3, #16]
 801d8d0:	f107 0208 	add.w	r2, r7, #8
 801d8d4:	3204      	adds	r2, #4
 801d8d6:	4610      	mov	r0, r2
 801d8d8:	4798      	blx	r3
 801d8da:	4603      	mov	r3, r0
 801d8dc:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801d8de:	f107 0010 	add.w	r0, r7, #16
 801d8e2:	68fb      	ldr	r3, [r7, #12]
 801d8e4:	9300      	str	r3, [sp, #0]
 801d8e6:	68bb      	ldr	r3, [r7, #8]
 801d8e8:	463a      	mov	r2, r7
 801d8ea:	ca06      	ldmia	r2, {r1, r2}
 801d8ec:	f7ff ffab 	bl	801d846 <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801d8f0:	4b07      	ldr	r3, [pc, #28]	@ (801d910 <SysTimeSet+0x58>)
 801d8f2:	681b      	ldr	r3, [r3, #0]
 801d8f4:	693a      	ldr	r2, [r7, #16]
 801d8f6:	4610      	mov	r0, r2
 801d8f8:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801d8fa:	4b05      	ldr	r3, [pc, #20]	@ (801d910 <SysTimeSet+0x58>)
 801d8fc:	689b      	ldr	r3, [r3, #8]
 801d8fe:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801d902:	4610      	mov	r0, r2
 801d904:	4798      	blx	r3
}
 801d906:	bf00      	nop
 801d908:	3718      	adds	r7, #24
 801d90a:	46bd      	mov	sp, r7
 801d90c:	bd80      	pop	{r7, pc}
 801d90e:	bf00      	nop
 801d910:	0801f830 	.word	0x0801f830

0801d914 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801d914:	b580      	push	{r7, lr}
 801d916:	b08a      	sub	sp, #40	@ 0x28
 801d918:	af02      	add	r7, sp, #8
 801d91a:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801d91c:	2300      	movs	r3, #0
 801d91e:	61bb      	str	r3, [r7, #24]
 801d920:	2300      	movs	r3, #0
 801d922:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801d924:	2300      	movs	r3, #0
 801d926:	613b      	str	r3, [r7, #16]
 801d928:	2300      	movs	r3, #0
 801d92a:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801d92c:	4b14      	ldr	r3, [pc, #80]	@ (801d980 <SysTimeGet+0x6c>)
 801d92e:	691b      	ldr	r3, [r3, #16]
 801d930:	f107 0218 	add.w	r2, r7, #24
 801d934:	3204      	adds	r2, #4
 801d936:	4610      	mov	r0, r2
 801d938:	4798      	blx	r3
 801d93a:	4603      	mov	r3, r0
 801d93c:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801d93e:	4b10      	ldr	r3, [pc, #64]	@ (801d980 <SysTimeGet+0x6c>)
 801d940:	68db      	ldr	r3, [r3, #12]
 801d942:	4798      	blx	r3
 801d944:	4603      	mov	r3, r0
 801d946:	b21b      	sxth	r3, r3
 801d948:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801d94a:	4b0d      	ldr	r3, [pc, #52]	@ (801d980 <SysTimeGet+0x6c>)
 801d94c:	685b      	ldr	r3, [r3, #4]
 801d94e:	4798      	blx	r3
 801d950:	4603      	mov	r3, r0
 801d952:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801d954:	f107 0010 	add.w	r0, r7, #16
 801d958:	69fb      	ldr	r3, [r7, #28]
 801d95a:	9300      	str	r3, [sp, #0]
 801d95c:	69bb      	ldr	r3, [r7, #24]
 801d95e:	f107 0208 	add.w	r2, r7, #8
 801d962:	ca06      	ldmia	r2, {r1, r2}
 801d964:	f7ff ff36 	bl	801d7d4 <SysTimeAdd>

  return sysTime;
 801d968:	687b      	ldr	r3, [r7, #4]
 801d96a:	461a      	mov	r2, r3
 801d96c:	f107 0310 	add.w	r3, r7, #16
 801d970:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d974:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801d978:	6878      	ldr	r0, [r7, #4]
 801d97a:	3720      	adds	r7, #32
 801d97c:	46bd      	mov	sp, r7
 801d97e:	bd80      	pop	{r7, pc}
 801d980:	0801f830 	.word	0x0801f830

0801d984 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801d984:	b580      	push	{r7, lr}
 801d986:	b084      	sub	sp, #16
 801d988:	af00      	add	r7, sp, #0
 801d98a:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801d98c:	2300      	movs	r3, #0
 801d98e:	60bb      	str	r3, [r7, #8]
 801d990:	2300      	movs	r3, #0
 801d992:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801d994:	4b0a      	ldr	r3, [pc, #40]	@ (801d9c0 <SysTimeGetMcuTime+0x3c>)
 801d996:	691b      	ldr	r3, [r3, #16]
 801d998:	f107 0208 	add.w	r2, r7, #8
 801d99c:	3204      	adds	r2, #4
 801d99e:	4610      	mov	r0, r2
 801d9a0:	4798      	blx	r3
 801d9a2:	4603      	mov	r3, r0
 801d9a4:	60bb      	str	r3, [r7, #8]

  return calendarTime;
 801d9a6:	687b      	ldr	r3, [r7, #4]
 801d9a8:	461a      	mov	r2, r3
 801d9aa:	f107 0308 	add.w	r3, r7, #8
 801d9ae:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d9b2:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801d9b6:	6878      	ldr	r0, [r7, #4]
 801d9b8:	3710      	adds	r7, #16
 801d9ba:	46bd      	mov	sp, r7
 801d9bc:	bd80      	pop	{r7, pc}
 801d9be:	bf00      	nop
 801d9c0:	0801f830 	.word	0x0801f830

0801d9c4 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 801d9c4:	b580      	push	{r7, lr}
 801d9c6:	b088      	sub	sp, #32
 801d9c8:	af02      	add	r7, sp, #8
 801d9ca:	463b      	mov	r3, r7
 801d9cc:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801d9d0:	4b0f      	ldr	r3, [pc, #60]	@ (801da10 <SysTimeToMs+0x4c>)
 801d9d2:	68db      	ldr	r3, [r3, #12]
 801d9d4:	4798      	blx	r3
 801d9d6:	4603      	mov	r3, r0
 801d9d8:	b21b      	sxth	r3, r3
 801d9da:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801d9dc:	4b0c      	ldr	r3, [pc, #48]	@ (801da10 <SysTimeToMs+0x4c>)
 801d9de:	685b      	ldr	r3, [r3, #4]
 801d9e0:	4798      	blx	r3
 801d9e2:	4603      	mov	r3, r0
 801d9e4:	613b      	str	r3, [r7, #16]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 801d9e6:	f107 0008 	add.w	r0, r7, #8
 801d9ea:	697b      	ldr	r3, [r7, #20]
 801d9ec:	9300      	str	r3, [sp, #0]
 801d9ee:	693b      	ldr	r3, [r7, #16]
 801d9f0:	463a      	mov	r2, r7
 801d9f2:	ca06      	ldmia	r2, {r1, r2}
 801d9f4:	f7ff ff27 	bl	801d846 <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 801d9f8:	68bb      	ldr	r3, [r7, #8]
 801d9fa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801d9fe:	fb02 f303 	mul.w	r3, r2, r3
 801da02:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801da06:	4413      	add	r3, r2
}
 801da08:	4618      	mov	r0, r3
 801da0a:	3718      	adds	r7, #24
 801da0c:	46bd      	mov	sp, r7
 801da0e:	bd80      	pop	{r7, pc}
 801da10:	0801f830 	.word	0x0801f830

0801da14 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 801da14:	b580      	push	{r7, lr}
 801da16:	b08a      	sub	sp, #40	@ 0x28
 801da18:	af02      	add	r7, sp, #8
 801da1a:	6078      	str	r0, [r7, #4]
 801da1c:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 801da1e:	683b      	ldr	r3, [r7, #0]
 801da20:	4a19      	ldr	r2, [pc, #100]	@ (801da88 <SysTimeFromMs+0x74>)
 801da22:	fba2 2303 	umull	r2, r3, r2, r3
 801da26:	099b      	lsrs	r3, r3, #6
 801da28:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 801da2a:	69fb      	ldr	r3, [r7, #28]
 801da2c:	617b      	str	r3, [r7, #20]
 801da2e:	683b      	ldr	r3, [r7, #0]
 801da30:	b29a      	uxth	r2, r3
 801da32:	69fb      	ldr	r3, [r7, #28]
 801da34:	b29b      	uxth	r3, r3
 801da36:	4619      	mov	r1, r3
 801da38:	0149      	lsls	r1, r1, #5
 801da3a:	1ac9      	subs	r1, r1, r3
 801da3c:	0089      	lsls	r1, r1, #2
 801da3e:	440b      	add	r3, r1
 801da40:	00db      	lsls	r3, r3, #3
 801da42:	b29b      	uxth	r3, r3
 801da44:	1ad3      	subs	r3, r2, r3
 801da46:	b29b      	uxth	r3, r3
 801da48:	b21b      	sxth	r3, r3
 801da4a:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 801da4c:	f107 030c 	add.w	r3, r7, #12
 801da50:	2200      	movs	r2, #0
 801da52:	601a      	str	r2, [r3, #0]
 801da54:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801da56:	4b0d      	ldr	r3, [pc, #52]	@ (801da8c <SysTimeFromMs+0x78>)
 801da58:	68db      	ldr	r3, [r3, #12]
 801da5a:	4798      	blx	r3
 801da5c:	4603      	mov	r3, r0
 801da5e:	b21b      	sxth	r3, r3
 801da60:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801da62:	4b0a      	ldr	r3, [pc, #40]	@ (801da8c <SysTimeFromMs+0x78>)
 801da64:	685b      	ldr	r3, [r3, #4]
 801da66:	4798      	blx	r3
 801da68:	4603      	mov	r3, r0
 801da6a:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 801da6c:	6878      	ldr	r0, [r7, #4]
 801da6e:	693b      	ldr	r3, [r7, #16]
 801da70:	9300      	str	r3, [sp, #0]
 801da72:	68fb      	ldr	r3, [r7, #12]
 801da74:	f107 0214 	add.w	r2, r7, #20
 801da78:	ca06      	ldmia	r2, {r1, r2}
 801da7a:	f7ff feab 	bl	801d7d4 <SysTimeAdd>
}
 801da7e:	6878      	ldr	r0, [r7, #4]
 801da80:	3720      	adds	r7, #32
 801da82:	46bd      	mov	sp, r7
 801da84:	bd80      	pop	{r7, pc}
 801da86:	bf00      	nop
 801da88:	10624dd3 	.word	0x10624dd3
 801da8c:	0801f830 	.word	0x0801f830

0801da90 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801da90:	b480      	push	{r7}
 801da92:	b085      	sub	sp, #20
 801da94:	af00      	add	r7, sp, #0
 801da96:	6078      	str	r0, [r7, #4]
  int i = 0;
 801da98:	2300      	movs	r3, #0
 801da9a:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801da9c:	e00e      	b.n	801dabc <ee_skip_atoi+0x2c>
 801da9e:	68fa      	ldr	r2, [r7, #12]
 801daa0:	4613      	mov	r3, r2
 801daa2:	009b      	lsls	r3, r3, #2
 801daa4:	4413      	add	r3, r2
 801daa6:	005b      	lsls	r3, r3, #1
 801daa8:	4618      	mov	r0, r3
 801daaa:	687b      	ldr	r3, [r7, #4]
 801daac:	681b      	ldr	r3, [r3, #0]
 801daae:	1c59      	adds	r1, r3, #1
 801dab0:	687a      	ldr	r2, [r7, #4]
 801dab2:	6011      	str	r1, [r2, #0]
 801dab4:	781b      	ldrb	r3, [r3, #0]
 801dab6:	4403      	add	r3, r0
 801dab8:	3b30      	subs	r3, #48	@ 0x30
 801daba:	60fb      	str	r3, [r7, #12]
 801dabc:	687b      	ldr	r3, [r7, #4]
 801dabe:	681b      	ldr	r3, [r3, #0]
 801dac0:	781b      	ldrb	r3, [r3, #0]
 801dac2:	2b2f      	cmp	r3, #47	@ 0x2f
 801dac4:	d904      	bls.n	801dad0 <ee_skip_atoi+0x40>
 801dac6:	687b      	ldr	r3, [r7, #4]
 801dac8:	681b      	ldr	r3, [r3, #0]
 801daca:	781b      	ldrb	r3, [r3, #0]
 801dacc:	2b39      	cmp	r3, #57	@ 0x39
 801dace:	d9e6      	bls.n	801da9e <ee_skip_atoi+0xe>
  return i;
 801dad0:	68fb      	ldr	r3, [r7, #12]
}
 801dad2:	4618      	mov	r0, r3
 801dad4:	3714      	adds	r7, #20
 801dad6:	46bd      	mov	sp, r7
 801dad8:	bc80      	pop	{r7}
 801dada:	4770      	bx	lr

0801dadc <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801dadc:	b480      	push	{r7}
 801dade:	b099      	sub	sp, #100	@ 0x64
 801dae0:	af00      	add	r7, sp, #0
 801dae2:	60f8      	str	r0, [r7, #12]
 801dae4:	60b9      	str	r1, [r7, #8]
 801dae6:	607a      	str	r2, [r7, #4]
 801dae8:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801daea:	4b71      	ldr	r3, [pc, #452]	@ (801dcb0 <ee_number+0x1d4>)
 801daec:	681b      	ldr	r3, [r3, #0]
 801daee:	65bb      	str	r3, [r7, #88]	@ 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801daf0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801daf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801daf6:	2b00      	cmp	r3, #0
 801daf8:	d002      	beq.n	801db00 <ee_number+0x24>
 801dafa:	4b6e      	ldr	r3, [pc, #440]	@ (801dcb4 <ee_number+0x1d8>)
 801dafc:	681b      	ldr	r3, [r3, #0]
 801dafe:	65bb      	str	r3, [r7, #88]	@ 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801db00:	683b      	ldr	r3, [r7, #0]
 801db02:	2b01      	cmp	r3, #1
 801db04:	dd02      	ble.n	801db0c <ee_number+0x30>
 801db06:	683b      	ldr	r3, [r7, #0]
 801db08:	2b24      	cmp	r3, #36	@ 0x24
 801db0a:	dd01      	ble.n	801db10 <ee_number+0x34>
 801db0c:	2300      	movs	r3, #0
 801db0e:	e0ca      	b.n	801dca6 <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 801db10:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801db12:	f003 0301 	and.w	r3, r3, #1
 801db16:	2b00      	cmp	r3, #0
 801db18:	d001      	beq.n	801db1e <ee_number+0x42>
 801db1a:	2330      	movs	r3, #48	@ 0x30
 801db1c:	e000      	b.n	801db20 <ee_number+0x44>
 801db1e:	2320      	movs	r3, #32
 801db20:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  sign = 0;
 801db24:	2300      	movs	r3, #0
 801db26:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if (type & SIGN)
 801db2a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801db2c:	f003 0302 	and.w	r3, r3, #2
 801db30:	2b00      	cmp	r3, #0
 801db32:	d00b      	beq.n	801db4c <ee_number+0x70>
  {
    if (num < 0)
 801db34:	687b      	ldr	r3, [r7, #4]
 801db36:	2b00      	cmp	r3, #0
 801db38:	da08      	bge.n	801db4c <ee_number+0x70>
    {
      sign = '-';
 801db3a:	232d      	movs	r3, #45	@ 0x2d
 801db3c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
      num = -num;
 801db40:	687b      	ldr	r3, [r7, #4]
 801db42:	425b      	negs	r3, r3
 801db44:	607b      	str	r3, [r7, #4]
      size--;
 801db46:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801db48:	3b01      	subs	r3, #1
 801db4a:	66bb      	str	r3, [r7, #104]	@ 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 801db4c:	2300      	movs	r3, #0
 801db4e:	657b      	str	r3, [r7, #84]	@ 0x54

  if (num == 0)
 801db50:	687b      	ldr	r3, [r7, #4]
 801db52:	2b00      	cmp	r3, #0
 801db54:	d11e      	bne.n	801db94 <ee_number+0xb8>
    tmp[i++] = '0';
 801db56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801db58:	1c5a      	adds	r2, r3, #1
 801db5a:	657a      	str	r2, [r7, #84]	@ 0x54
 801db5c:	3360      	adds	r3, #96	@ 0x60
 801db5e:	443b      	add	r3, r7
 801db60:	2230      	movs	r2, #48	@ 0x30
 801db62:	f803 2c50 	strb.w	r2, [r3, #-80]
 801db66:	e018      	b.n	801db9a <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801db68:	687b      	ldr	r3, [r7, #4]
 801db6a:	683a      	ldr	r2, [r7, #0]
 801db6c:	fbb3 f1f2 	udiv	r1, r3, r2
 801db70:	fb01 f202 	mul.w	r2, r1, r2
 801db74:	1a9b      	subs	r3, r3, r2
 801db76:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801db78:	441a      	add	r2, r3
 801db7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801db7c:	1c59      	adds	r1, r3, #1
 801db7e:	6579      	str	r1, [r7, #84]	@ 0x54
 801db80:	7812      	ldrb	r2, [r2, #0]
 801db82:	3360      	adds	r3, #96	@ 0x60
 801db84:	443b      	add	r3, r7
 801db86:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 801db8a:	687a      	ldr	r2, [r7, #4]
 801db8c:	683b      	ldr	r3, [r7, #0]
 801db8e:	fbb2 f3f3 	udiv	r3, r2, r3
 801db92:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801db94:	687b      	ldr	r3, [r7, #4]
 801db96:	2b00      	cmp	r3, #0
 801db98:	d1e6      	bne.n	801db68 <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 801db9a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801db9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801db9e:	429a      	cmp	r2, r3
 801dba0:	dd01      	ble.n	801dba6 <ee_number+0xca>
 801dba2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801dba4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  size -= precision;
 801dba6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801dba8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801dbaa:	1ad3      	subs	r3, r2, r3
 801dbac:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801dbae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801dbb0:	f003 0301 	and.w	r3, r3, #1
 801dbb4:	2b00      	cmp	r3, #0
 801dbb6:	d112      	bne.n	801dbde <ee_number+0x102>
 801dbb8:	e00c      	b.n	801dbd4 <ee_number+0xf8>
 801dbba:	68fb      	ldr	r3, [r7, #12]
 801dbbc:	1c5a      	adds	r2, r3, #1
 801dbbe:	60fa      	str	r2, [r7, #12]
 801dbc0:	2220      	movs	r2, #32
 801dbc2:	701a      	strb	r2, [r3, #0]
 801dbc4:	68bb      	ldr	r3, [r7, #8]
 801dbc6:	3b01      	subs	r3, #1
 801dbc8:	60bb      	str	r3, [r7, #8]
 801dbca:	68bb      	ldr	r3, [r7, #8]
 801dbcc:	2b00      	cmp	r3, #0
 801dbce:	d101      	bne.n	801dbd4 <ee_number+0xf8>
 801dbd0:	68fb      	ldr	r3, [r7, #12]
 801dbd2:	e068      	b.n	801dca6 <ee_number+0x1ca>
 801dbd4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801dbd6:	1e5a      	subs	r2, r3, #1
 801dbd8:	66ba      	str	r2, [r7, #104]	@ 0x68
 801dbda:	2b00      	cmp	r3, #0
 801dbdc:	dced      	bgt.n	801dbba <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801dbde:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801dbe2:	2b00      	cmp	r3, #0
 801dbe4:	d01b      	beq.n	801dc1e <ee_number+0x142>
 801dbe6:	68fb      	ldr	r3, [r7, #12]
 801dbe8:	1c5a      	adds	r2, r3, #1
 801dbea:	60fa      	str	r2, [r7, #12]
 801dbec:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 801dbf0:	701a      	strb	r2, [r3, #0]
 801dbf2:	68bb      	ldr	r3, [r7, #8]
 801dbf4:	3b01      	subs	r3, #1
 801dbf6:	60bb      	str	r3, [r7, #8]
 801dbf8:	68bb      	ldr	r3, [r7, #8]
 801dbfa:	2b00      	cmp	r3, #0
 801dbfc:	d10f      	bne.n	801dc1e <ee_number+0x142>
 801dbfe:	68fb      	ldr	r3, [r7, #12]
 801dc00:	e051      	b.n	801dca6 <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801dc02:	68fb      	ldr	r3, [r7, #12]
 801dc04:	1c5a      	adds	r2, r3, #1
 801dc06:	60fa      	str	r2, [r7, #12]
 801dc08:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 801dc0c:	701a      	strb	r2, [r3, #0]
 801dc0e:	68bb      	ldr	r3, [r7, #8]
 801dc10:	3b01      	subs	r3, #1
 801dc12:	60bb      	str	r3, [r7, #8]
 801dc14:	68bb      	ldr	r3, [r7, #8]
 801dc16:	2b00      	cmp	r3, #0
 801dc18:	d101      	bne.n	801dc1e <ee_number+0x142>
 801dc1a:	68fb      	ldr	r3, [r7, #12]
 801dc1c:	e043      	b.n	801dca6 <ee_number+0x1ca>
 801dc1e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801dc20:	1e5a      	subs	r2, r3, #1
 801dc22:	66ba      	str	r2, [r7, #104]	@ 0x68
 801dc24:	2b00      	cmp	r3, #0
 801dc26:	dcec      	bgt.n	801dc02 <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801dc28:	e00c      	b.n	801dc44 <ee_number+0x168>
 801dc2a:	68fb      	ldr	r3, [r7, #12]
 801dc2c:	1c5a      	adds	r2, r3, #1
 801dc2e:	60fa      	str	r2, [r7, #12]
 801dc30:	2230      	movs	r2, #48	@ 0x30
 801dc32:	701a      	strb	r2, [r3, #0]
 801dc34:	68bb      	ldr	r3, [r7, #8]
 801dc36:	3b01      	subs	r3, #1
 801dc38:	60bb      	str	r3, [r7, #8]
 801dc3a:	68bb      	ldr	r3, [r7, #8]
 801dc3c:	2b00      	cmp	r3, #0
 801dc3e:	d101      	bne.n	801dc44 <ee_number+0x168>
 801dc40:	68fb      	ldr	r3, [r7, #12]
 801dc42:	e030      	b.n	801dca6 <ee_number+0x1ca>
 801dc44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801dc46:	1e5a      	subs	r2, r3, #1
 801dc48:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801dc4a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801dc4c:	429a      	cmp	r2, r3
 801dc4e:	dbec      	blt.n	801dc2a <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801dc50:	e010      	b.n	801dc74 <ee_number+0x198>
 801dc52:	68fb      	ldr	r3, [r7, #12]
 801dc54:	1c5a      	adds	r2, r3, #1
 801dc56:	60fa      	str	r2, [r7, #12]
 801dc58:	f107 0110 	add.w	r1, r7, #16
 801dc5c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801dc5e:	440a      	add	r2, r1
 801dc60:	7812      	ldrb	r2, [r2, #0]
 801dc62:	701a      	strb	r2, [r3, #0]
 801dc64:	68bb      	ldr	r3, [r7, #8]
 801dc66:	3b01      	subs	r3, #1
 801dc68:	60bb      	str	r3, [r7, #8]
 801dc6a:	68bb      	ldr	r3, [r7, #8]
 801dc6c:	2b00      	cmp	r3, #0
 801dc6e:	d101      	bne.n	801dc74 <ee_number+0x198>
 801dc70:	68fb      	ldr	r3, [r7, #12]
 801dc72:	e018      	b.n	801dca6 <ee_number+0x1ca>
 801dc74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801dc76:	1e5a      	subs	r2, r3, #1
 801dc78:	657a      	str	r2, [r7, #84]	@ 0x54
 801dc7a:	2b00      	cmp	r3, #0
 801dc7c:	dce9      	bgt.n	801dc52 <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 801dc7e:	e00c      	b.n	801dc9a <ee_number+0x1be>
 801dc80:	68fb      	ldr	r3, [r7, #12]
 801dc82:	1c5a      	adds	r2, r3, #1
 801dc84:	60fa      	str	r2, [r7, #12]
 801dc86:	2220      	movs	r2, #32
 801dc88:	701a      	strb	r2, [r3, #0]
 801dc8a:	68bb      	ldr	r3, [r7, #8]
 801dc8c:	3b01      	subs	r3, #1
 801dc8e:	60bb      	str	r3, [r7, #8]
 801dc90:	68bb      	ldr	r3, [r7, #8]
 801dc92:	2b00      	cmp	r3, #0
 801dc94:	d101      	bne.n	801dc9a <ee_number+0x1be>
 801dc96:	68fb      	ldr	r3, [r7, #12]
 801dc98:	e005      	b.n	801dca6 <ee_number+0x1ca>
 801dc9a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801dc9c:	1e5a      	subs	r2, r3, #1
 801dc9e:	66ba      	str	r2, [r7, #104]	@ 0x68
 801dca0:	2b00      	cmp	r3, #0
 801dca2:	dced      	bgt.n	801dc80 <ee_number+0x1a4>

  return str;
 801dca4:	68fb      	ldr	r3, [r7, #12]
}
 801dca6:	4618      	mov	r0, r3
 801dca8:	3764      	adds	r7, #100	@ 0x64
 801dcaa:	46bd      	mov	sp, r7
 801dcac:	bc80      	pop	{r7}
 801dcae:	4770      	bx	lr
 801dcb0:	2000013c 	.word	0x2000013c
 801dcb4:	20000140 	.word	0x20000140

0801dcb8 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801dcb8:	b580      	push	{r7, lr}
 801dcba:	b092      	sub	sp, #72	@ 0x48
 801dcbc:	af04      	add	r7, sp, #16
 801dcbe:	60f8      	str	r0, [r7, #12]
 801dcc0:	60b9      	str	r1, [r7, #8]
 801dcc2:	607a      	str	r2, [r7, #4]
 801dcc4:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801dcc6:	68bb      	ldr	r3, [r7, #8]
 801dcc8:	2b00      	cmp	r3, #0
 801dcca:	dc01      	bgt.n	801dcd0 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801dccc:	2300      	movs	r3, #0
 801dcce:	e13e      	b.n	801df4e <tiny_vsnprintf_like+0x296>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801dcd0:	68fb      	ldr	r3, [r7, #12]
 801dcd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801dcd4:	e128      	b.n	801df28 <tiny_vsnprintf_like+0x270>
  {
    CHECK_STR_SIZE(buf, str, size);
 801dcd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801dcd8:	68fb      	ldr	r3, [r7, #12]
 801dcda:	1ad2      	subs	r2, r2, r3
 801dcdc:	68bb      	ldr	r3, [r7, #8]
 801dcde:	3b01      	subs	r3, #1
 801dce0:	429a      	cmp	r2, r3
 801dce2:	f280 812e 	bge.w	801df42 <tiny_vsnprintf_like+0x28a>

    if (*fmt != '%')
 801dce6:	687b      	ldr	r3, [r7, #4]
 801dce8:	781b      	ldrb	r3, [r3, #0]
 801dcea:	2b25      	cmp	r3, #37	@ 0x25
 801dcec:	d006      	beq.n	801dcfc <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801dcee:	687a      	ldr	r2, [r7, #4]
 801dcf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801dcf2:	1c59      	adds	r1, r3, #1
 801dcf4:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801dcf6:	7812      	ldrb	r2, [r2, #0]
 801dcf8:	701a      	strb	r2, [r3, #0]
      continue;
 801dcfa:	e112      	b.n	801df22 <tiny_vsnprintf_like+0x26a>
    }

    // Process flags
    flags = 0;
 801dcfc:	2300      	movs	r3, #0
 801dcfe:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801dd00:	687b      	ldr	r3, [r7, #4]
 801dd02:	3301      	adds	r3, #1
 801dd04:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801dd06:	687b      	ldr	r3, [r7, #4]
 801dd08:	781b      	ldrb	r3, [r3, #0]
 801dd0a:	2b30      	cmp	r3, #48	@ 0x30
 801dd0c:	d103      	bne.n	801dd16 <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801dd0e:	6a3b      	ldr	r3, [r7, #32]
 801dd10:	f043 0301 	orr.w	r3, r3, #1
 801dd14:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 801dd16:	f04f 33ff 	mov.w	r3, #4294967295
 801dd1a:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801dd1c:	687b      	ldr	r3, [r7, #4]
 801dd1e:	781b      	ldrb	r3, [r3, #0]
 801dd20:	2b2f      	cmp	r3, #47	@ 0x2f
 801dd22:	d908      	bls.n	801dd36 <tiny_vsnprintf_like+0x7e>
 801dd24:	687b      	ldr	r3, [r7, #4]
 801dd26:	781b      	ldrb	r3, [r3, #0]
 801dd28:	2b39      	cmp	r3, #57	@ 0x39
 801dd2a:	d804      	bhi.n	801dd36 <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 801dd2c:	1d3b      	adds	r3, r7, #4
 801dd2e:	4618      	mov	r0, r3
 801dd30:	f7ff feae 	bl	801da90 <ee_skip_atoi>
 801dd34:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 801dd36:	f04f 33ff 	mov.w	r3, #4294967295
 801dd3a:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 801dd3c:	f04f 33ff 	mov.w	r3, #4294967295
 801dd40:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 801dd42:	230a      	movs	r3, #10
 801dd44:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (*fmt)
 801dd46:	687b      	ldr	r3, [r7, #4]
 801dd48:	781b      	ldrb	r3, [r3, #0]
 801dd4a:	3b58      	subs	r3, #88	@ 0x58
 801dd4c:	2b20      	cmp	r3, #32
 801dd4e:	f200 8094 	bhi.w	801de7a <tiny_vsnprintf_like+0x1c2>
 801dd52:	a201      	add	r2, pc, #4	@ (adr r2, 801dd58 <tiny_vsnprintf_like+0xa0>)
 801dd54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801dd58:	0801de63 	.word	0x0801de63
 801dd5c:	0801de7b 	.word	0x0801de7b
 801dd60:	0801de7b 	.word	0x0801de7b
 801dd64:	0801de7b 	.word	0x0801de7b
 801dd68:	0801de7b 	.word	0x0801de7b
 801dd6c:	0801de7b 	.word	0x0801de7b
 801dd70:	0801de7b 	.word	0x0801de7b
 801dd74:	0801de7b 	.word	0x0801de7b
 801dd78:	0801de7b 	.word	0x0801de7b
 801dd7c:	0801de7b 	.word	0x0801de7b
 801dd80:	0801de7b 	.word	0x0801de7b
 801dd84:	0801dde7 	.word	0x0801dde7
 801dd88:	0801de71 	.word	0x0801de71
 801dd8c:	0801de7b 	.word	0x0801de7b
 801dd90:	0801de7b 	.word	0x0801de7b
 801dd94:	0801de7b 	.word	0x0801de7b
 801dd98:	0801de7b 	.word	0x0801de7b
 801dd9c:	0801de71 	.word	0x0801de71
 801dda0:	0801de7b 	.word	0x0801de7b
 801dda4:	0801de7b 	.word	0x0801de7b
 801dda8:	0801de7b 	.word	0x0801de7b
 801ddac:	0801de7b 	.word	0x0801de7b
 801ddb0:	0801de7b 	.word	0x0801de7b
 801ddb4:	0801de7b 	.word	0x0801de7b
 801ddb8:	0801de7b 	.word	0x0801de7b
 801ddbc:	0801de7b 	.word	0x0801de7b
 801ddc0:	0801de7b 	.word	0x0801de7b
 801ddc4:	0801de07 	.word	0x0801de07
 801ddc8:	0801de7b 	.word	0x0801de7b
 801ddcc:	0801dec7 	.word	0x0801dec7
 801ddd0:	0801de7b 	.word	0x0801de7b
 801ddd4:	0801de7b 	.word	0x0801de7b
 801ddd8:	0801de6b 	.word	0x0801de6b
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801dddc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ddde:	1c5a      	adds	r2, r3, #1
 801dde0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801dde2:	2220      	movs	r2, #32
 801dde4:	701a      	strb	r2, [r3, #0]
 801dde6:	69fb      	ldr	r3, [r7, #28]
 801dde8:	3b01      	subs	r3, #1
 801ddea:	61fb      	str	r3, [r7, #28]
 801ddec:	69fb      	ldr	r3, [r7, #28]
 801ddee:	2b00      	cmp	r3, #0
 801ddf0:	dcf4      	bgt.n	801dddc <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801ddf2:	683b      	ldr	r3, [r7, #0]
 801ddf4:	1d1a      	adds	r2, r3, #4
 801ddf6:	603a      	str	r2, [r7, #0]
 801ddf8:	6819      	ldr	r1, [r3, #0]
 801ddfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ddfc:	1c5a      	adds	r2, r3, #1
 801ddfe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801de00:	b2ca      	uxtb	r2, r1
 801de02:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801de04:	e08d      	b.n	801df22 <tiny_vsnprintf_like+0x26a>

      case 's':
        s = va_arg(args, char *);
 801de06:	683b      	ldr	r3, [r7, #0]
 801de08:	1d1a      	adds	r2, r3, #4
 801de0a:	603a      	str	r2, [r7, #0]
 801de0c:	681b      	ldr	r3, [r3, #0]
 801de0e:	627b      	str	r3, [r7, #36]	@ 0x24
        if (!s) s = "<NULL>";
 801de10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801de12:	2b00      	cmp	r3, #0
 801de14:	d101      	bne.n	801de1a <tiny_vsnprintf_like+0x162>
 801de16:	4b50      	ldr	r3, [pc, #320]	@ (801df58 <tiny_vsnprintf_like+0x2a0>)
 801de18:	627b      	str	r3, [r7, #36]	@ 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801de1a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801de1c:	f7e2 f9ac 	bl	8000178 <strlen>
 801de20:	4603      	mov	r3, r0
 801de22:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801de24:	e004      	b.n	801de30 <tiny_vsnprintf_like+0x178>
 801de26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801de28:	1c5a      	adds	r2, r3, #1
 801de2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801de2c:	2220      	movs	r2, #32
 801de2e:	701a      	strb	r2, [r3, #0]
 801de30:	69fb      	ldr	r3, [r7, #28]
 801de32:	1e5a      	subs	r2, r3, #1
 801de34:	61fa      	str	r2, [r7, #28]
 801de36:	693a      	ldr	r2, [r7, #16]
 801de38:	429a      	cmp	r2, r3
 801de3a:	dbf4      	blt.n	801de26 <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801de3c:	2300      	movs	r3, #0
 801de3e:	62bb      	str	r3, [r7, #40]	@ 0x28
 801de40:	e00a      	b.n	801de58 <tiny_vsnprintf_like+0x1a0>
 801de42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801de44:	1c53      	adds	r3, r2, #1
 801de46:	627b      	str	r3, [r7, #36]	@ 0x24
 801de48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801de4a:	1c59      	adds	r1, r3, #1
 801de4c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801de4e:	7812      	ldrb	r2, [r2, #0]
 801de50:	701a      	strb	r2, [r3, #0]
 801de52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801de54:	3301      	adds	r3, #1
 801de56:	62bb      	str	r3, [r7, #40]	@ 0x28
 801de58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801de5a:	693b      	ldr	r3, [r7, #16]
 801de5c:	429a      	cmp	r2, r3
 801de5e:	dbf0      	blt.n	801de42 <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801de60:	e05f      	b.n	801df22 <tiny_vsnprintf_like+0x26a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 801de62:	6a3b      	ldr	r3, [r7, #32]
 801de64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801de68:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801de6a:	2310      	movs	r3, #16
 801de6c:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
 801de6e:	e02b      	b.n	801dec8 <tiny_vsnprintf_like+0x210>

      case 'd':
      case 'i':
        flags |= SIGN;
 801de70:	6a3b      	ldr	r3, [r7, #32]
 801de72:	f043 0302 	orr.w	r3, r3, #2
 801de76:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801de78:	e025      	b.n	801dec6 <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801de7a:	687b      	ldr	r3, [r7, #4]
 801de7c:	781b      	ldrb	r3, [r3, #0]
 801de7e:	2b25      	cmp	r3, #37	@ 0x25
 801de80:	d004      	beq.n	801de8c <tiny_vsnprintf_like+0x1d4>
 801de82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801de84:	1c5a      	adds	r2, r3, #1
 801de86:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801de88:	2225      	movs	r2, #37	@ 0x25
 801de8a:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801de8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801de8e:	68fb      	ldr	r3, [r7, #12]
 801de90:	1ad2      	subs	r2, r2, r3
 801de92:	68bb      	ldr	r3, [r7, #8]
 801de94:	3b01      	subs	r3, #1
 801de96:	429a      	cmp	r2, r3
 801de98:	da16      	bge.n	801dec8 <tiny_vsnprintf_like+0x210>
        if (*fmt)
 801de9a:	687b      	ldr	r3, [r7, #4]
 801de9c:	781b      	ldrb	r3, [r3, #0]
 801de9e:	2b00      	cmp	r3, #0
 801dea0:	d006      	beq.n	801deb0 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 801dea2:	687a      	ldr	r2, [r7, #4]
 801dea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801dea6:	1c59      	adds	r1, r3, #1
 801dea8:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801deaa:	7812      	ldrb	r2, [r2, #0]
 801deac:	701a      	strb	r2, [r3, #0]
 801deae:	e002      	b.n	801deb6 <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 801deb0:	687b      	ldr	r3, [r7, #4]
 801deb2:	3b01      	subs	r3, #1
 801deb4:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801deb6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801deb8:	68fb      	ldr	r3, [r7, #12]
 801deba:	1ad2      	subs	r2, r2, r3
 801debc:	68bb      	ldr	r3, [r7, #8]
 801debe:	3b01      	subs	r3, #1
 801dec0:	429a      	cmp	r2, r3
 801dec2:	db2d      	blt.n	801df20 <tiny_vsnprintf_like+0x268>
 801dec4:	e000      	b.n	801dec8 <tiny_vsnprintf_like+0x210>
        break;
 801dec6:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 801dec8:	697b      	ldr	r3, [r7, #20]
 801deca:	2b6c      	cmp	r3, #108	@ 0x6c
 801decc:	d105      	bne.n	801deda <tiny_vsnprintf_like+0x222>
      num = va_arg(args, unsigned long);
 801dece:	683b      	ldr	r3, [r7, #0]
 801ded0:	1d1a      	adds	r2, r3, #4
 801ded2:	603a      	str	r2, [r7, #0]
 801ded4:	681b      	ldr	r3, [r3, #0]
 801ded6:	637b      	str	r3, [r7, #52]	@ 0x34
 801ded8:	e00f      	b.n	801defa <tiny_vsnprintf_like+0x242>
    else if (flags & SIGN)
 801deda:	6a3b      	ldr	r3, [r7, #32]
 801dedc:	f003 0302 	and.w	r3, r3, #2
 801dee0:	2b00      	cmp	r3, #0
 801dee2:	d005      	beq.n	801def0 <tiny_vsnprintf_like+0x238>
      num = va_arg(args, int);
 801dee4:	683b      	ldr	r3, [r7, #0]
 801dee6:	1d1a      	adds	r2, r3, #4
 801dee8:	603a      	str	r2, [r7, #0]
 801deea:	681b      	ldr	r3, [r3, #0]
 801deec:	637b      	str	r3, [r7, #52]	@ 0x34
 801deee:	e004      	b.n	801defa <tiny_vsnprintf_like+0x242>
    else
      num = va_arg(args, unsigned int);
 801def0:	683b      	ldr	r3, [r7, #0]
 801def2:	1d1a      	adds	r2, r3, #4
 801def4:	603a      	str	r2, [r7, #0]
 801def6:	681b      	ldr	r3, [r3, #0]
 801def8:	637b      	str	r3, [r7, #52]	@ 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801defa:	68bb      	ldr	r3, [r7, #8]
 801defc:	1e5a      	subs	r2, r3, #1
 801defe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801df00:	68fb      	ldr	r3, [r7, #12]
 801df02:	1acb      	subs	r3, r1, r3
 801df04:	1ad1      	subs	r1, r2, r3
 801df06:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801df08:	6a3b      	ldr	r3, [r7, #32]
 801df0a:	9302      	str	r3, [sp, #8]
 801df0c:	69bb      	ldr	r3, [r7, #24]
 801df0e:	9301      	str	r3, [sp, #4]
 801df10:	69fb      	ldr	r3, [r7, #28]
 801df12:	9300      	str	r3, [sp, #0]
 801df14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801df16:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801df18:	f7ff fde0 	bl	801dadc <ee_number>
 801df1c:	62f8      	str	r0, [r7, #44]	@ 0x2c
 801df1e:	e000      	b.n	801df22 <tiny_vsnprintf_like+0x26a>
        continue;
 801df20:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801df22:	687b      	ldr	r3, [r7, #4]
 801df24:	3301      	adds	r3, #1
 801df26:	607b      	str	r3, [r7, #4]
 801df28:	687b      	ldr	r3, [r7, #4]
 801df2a:	781b      	ldrb	r3, [r3, #0]
 801df2c:	2b00      	cmp	r3, #0
 801df2e:	f47f aed2 	bne.w	801dcd6 <tiny_vsnprintf_like+0x1e>
 801df32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801df34:	68fb      	ldr	r3, [r7, #12]
 801df36:	1ad2      	subs	r2, r2, r3
 801df38:	68bb      	ldr	r3, [r7, #8]
 801df3a:	3b01      	subs	r3, #1
 801df3c:	429a      	cmp	r2, r3
 801df3e:	f6bf aeca 	bge.w	801dcd6 <tiny_vsnprintf_like+0x1e>
  }

  *str = '\0';
 801df42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801df44:	2200      	movs	r2, #0
 801df46:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801df48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801df4a:	68fb      	ldr	r3, [r7, #12]
 801df4c:	1ad3      	subs	r3, r2, r3
}
 801df4e:	4618      	mov	r0, r3
 801df50:	3738      	adds	r7, #56	@ 0x38
 801df52:	46bd      	mov	sp, r7
 801df54:	bd80      	pop	{r7, pc}
 801df56:	bf00      	nop
 801df58:	0801f744 	.word	0x0801f744

0801df5c <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801df5c:	b580      	push	{r7, lr}
 801df5e:	b090      	sub	sp, #64	@ 0x40
 801df60:	af00      	add	r7, sp, #0
 801df62:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801df64:	4b73      	ldr	r3, [pc, #460]	@ (801e134 <UTIL_SEQ_Run+0x1d8>)
 801df66:	681b      	ldr	r3, [r3, #0]
 801df68:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 801df6a:	4b72      	ldr	r3, [pc, #456]	@ (801e134 <UTIL_SEQ_Run+0x1d8>)
 801df6c:	681a      	ldr	r2, [r3, #0]
 801df6e:	687b      	ldr	r3, [r7, #4]
 801df70:	4013      	ands	r3, r2
 801df72:	4a70      	ldr	r2, [pc, #448]	@ (801e134 <UTIL_SEQ_Run+0x1d8>)
 801df74:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 801df76:	4b70      	ldr	r3, [pc, #448]	@ (801e138 <UTIL_SEQ_Run+0x1dc>)
 801df78:	681b      	ldr	r3, [r3, #0]
 801df7a:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 801df7c:	4b6f      	ldr	r3, [pc, #444]	@ (801e13c <UTIL_SEQ_Run+0x1e0>)
 801df7e:	681b      	ldr	r3, [r3, #0]
 801df80:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801df82:	4b6f      	ldr	r3, [pc, #444]	@ (801e140 <UTIL_SEQ_Run+0x1e4>)
 801df84:	681b      	ldr	r3, [r3, #0]
 801df86:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 801df88:	4b6e      	ldr	r3, [pc, #440]	@ (801e144 <UTIL_SEQ_Run+0x1e8>)
 801df8a:	681b      	ldr	r3, [r3, #0]
 801df8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801df8e:	e08d      	b.n	801e0ac <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 801df90:	2300      	movs	r3, #0
 801df92:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801df94:	e002      	b.n	801df9c <UTIL_SEQ_Run+0x40>
    {
      counter++;
 801df96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801df98:	3301      	adds	r3, #1
 801df9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801df9c:	4a6a      	ldr	r2, [pc, #424]	@ (801e148 <UTIL_SEQ_Run+0x1ec>)
 801df9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801dfa0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801dfa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801dfa6:	401a      	ands	r2, r3
 801dfa8:	4b62      	ldr	r3, [pc, #392]	@ (801e134 <UTIL_SEQ_Run+0x1d8>)
 801dfaa:	681b      	ldr	r3, [r3, #0]
 801dfac:	4013      	ands	r3, r2
 801dfae:	2b00      	cmp	r3, #0
 801dfb0:	d0f1      	beq.n	801df96 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801dfb2:	4a65      	ldr	r2, [pc, #404]	@ (801e148 <UTIL_SEQ_Run+0x1ec>)
 801dfb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801dfb6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801dfba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801dfbc:	401a      	ands	r2, r3
 801dfbe:	4b5d      	ldr	r3, [pc, #372]	@ (801e134 <UTIL_SEQ_Run+0x1d8>)
 801dfc0:	681b      	ldr	r3, [r3, #0]
 801dfc2:	4013      	ands	r3, r2
 801dfc4:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801dfc6:	4a60      	ldr	r2, [pc, #384]	@ (801e148 <UTIL_SEQ_Run+0x1ec>)
 801dfc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801dfca:	00db      	lsls	r3, r3, #3
 801dfcc:	4413      	add	r3, r2
 801dfce:	685a      	ldr	r2, [r3, #4]
 801dfd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dfd2:	4013      	ands	r3, r2
 801dfd4:	2b00      	cmp	r3, #0
 801dfd6:	d106      	bne.n	801dfe6 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801dfd8:	4a5b      	ldr	r2, [pc, #364]	@ (801e148 <UTIL_SEQ_Run+0x1ec>)
 801dfda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801dfdc:	00db      	lsls	r3, r3, #3
 801dfde:	4413      	add	r3, r2
 801dfe0:	f04f 32ff 	mov.w	r2, #4294967295
 801dfe4:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801dfe6:	4a58      	ldr	r2, [pc, #352]	@ (801e148 <UTIL_SEQ_Run+0x1ec>)
 801dfe8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801dfea:	00db      	lsls	r3, r3, #3
 801dfec:	4413      	add	r3, r2
 801dfee:	685a      	ldr	r2, [r3, #4]
 801dff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dff2:	4013      	ands	r3, r2
 801dff4:	4618      	mov	r0, r3
 801dff6:	f000 f907 	bl	801e208 <SEQ_BitPosition>
 801dffa:	4603      	mov	r3, r0
 801dffc:	461a      	mov	r2, r3
 801dffe:	4b53      	ldr	r3, [pc, #332]	@ (801e14c <UTIL_SEQ_Run+0x1f0>)
 801e000:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801e002:	4a51      	ldr	r2, [pc, #324]	@ (801e148 <UTIL_SEQ_Run+0x1ec>)
 801e004:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e006:	00db      	lsls	r3, r3, #3
 801e008:	4413      	add	r3, r2
 801e00a:	685a      	ldr	r2, [r3, #4]
 801e00c:	4b4f      	ldr	r3, [pc, #316]	@ (801e14c <UTIL_SEQ_Run+0x1f0>)
 801e00e:	681b      	ldr	r3, [r3, #0]
 801e010:	2101      	movs	r1, #1
 801e012:	fa01 f303 	lsl.w	r3, r1, r3
 801e016:	43db      	mvns	r3, r3
 801e018:	401a      	ands	r2, r3
 801e01a:	494b      	ldr	r1, [pc, #300]	@ (801e148 <UTIL_SEQ_Run+0x1ec>)
 801e01c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e01e:	00db      	lsls	r3, r3, #3
 801e020:	440b      	add	r3, r1
 801e022:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e024:	f3ef 8310 	mrs	r3, PRIMASK
 801e028:	61bb      	str	r3, [r7, #24]
  return(result);
 801e02a:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801e02c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801e02e:	b672      	cpsid	i
}
 801e030:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801e032:	4b46      	ldr	r3, [pc, #280]	@ (801e14c <UTIL_SEQ_Run+0x1f0>)
 801e034:	681b      	ldr	r3, [r3, #0]
 801e036:	2201      	movs	r2, #1
 801e038:	fa02 f303 	lsl.w	r3, r2, r3
 801e03c:	43da      	mvns	r2, r3
 801e03e:	4b3e      	ldr	r3, [pc, #248]	@ (801e138 <UTIL_SEQ_Run+0x1dc>)
 801e040:	681b      	ldr	r3, [r3, #0]
 801e042:	4013      	ands	r3, r2
 801e044:	4a3c      	ldr	r2, [pc, #240]	@ (801e138 <UTIL_SEQ_Run+0x1dc>)
 801e046:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801e048:	2301      	movs	r3, #1
 801e04a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801e04c:	e013      	b.n	801e076 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801e04e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e050:	3b01      	subs	r3, #1
 801e052:	4a3d      	ldr	r2, [pc, #244]	@ (801e148 <UTIL_SEQ_Run+0x1ec>)
 801e054:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801e058:	4b3c      	ldr	r3, [pc, #240]	@ (801e14c <UTIL_SEQ_Run+0x1f0>)
 801e05a:	681b      	ldr	r3, [r3, #0]
 801e05c:	2201      	movs	r2, #1
 801e05e:	fa02 f303 	lsl.w	r3, r2, r3
 801e062:	43da      	mvns	r2, r3
 801e064:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e066:	3b01      	subs	r3, #1
 801e068:	400a      	ands	r2, r1
 801e06a:	4937      	ldr	r1, [pc, #220]	@ (801e148 <UTIL_SEQ_Run+0x1ec>)
 801e06c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801e070:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e072:	3b01      	subs	r3, #1
 801e074:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801e076:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e078:	2b00      	cmp	r3, #0
 801e07a:	d1e8      	bne.n	801e04e <UTIL_SEQ_Run+0xf2>
 801e07c:	6a3b      	ldr	r3, [r7, #32]
 801e07e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e080:	697b      	ldr	r3, [r7, #20]
 801e082:	f383 8810 	msr	PRIMASK, r3
}
 801e086:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801e088:	4b30      	ldr	r3, [pc, #192]	@ (801e14c <UTIL_SEQ_Run+0x1f0>)
 801e08a:	681b      	ldr	r3, [r3, #0]
 801e08c:	4a30      	ldr	r2, [pc, #192]	@ (801e150 <UTIL_SEQ_Run+0x1f4>)
 801e08e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801e092:	4798      	blx	r3

    local_taskset = TaskSet;
 801e094:	4b28      	ldr	r3, [pc, #160]	@ (801e138 <UTIL_SEQ_Run+0x1dc>)
 801e096:	681b      	ldr	r3, [r3, #0]
 801e098:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 801e09a:	4b28      	ldr	r3, [pc, #160]	@ (801e13c <UTIL_SEQ_Run+0x1e0>)
 801e09c:	681b      	ldr	r3, [r3, #0]
 801e09e:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 801e0a0:	4b27      	ldr	r3, [pc, #156]	@ (801e140 <UTIL_SEQ_Run+0x1e4>)
 801e0a2:	681b      	ldr	r3, [r3, #0]
 801e0a4:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 801e0a6:	4b27      	ldr	r3, [pc, #156]	@ (801e144 <UTIL_SEQ_Run+0x1e8>)
 801e0a8:	681b      	ldr	r3, [r3, #0]
 801e0aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801e0ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801e0ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e0b0:	401a      	ands	r2, r3
 801e0b2:	4b20      	ldr	r3, [pc, #128]	@ (801e134 <UTIL_SEQ_Run+0x1d8>)
 801e0b4:	681b      	ldr	r3, [r3, #0]
 801e0b6:	4013      	ands	r3, r2
 801e0b8:	2b00      	cmp	r3, #0
 801e0ba:	d005      	beq.n	801e0c8 <UTIL_SEQ_Run+0x16c>
 801e0bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801e0be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e0c0:	4013      	ands	r3, r2
 801e0c2:	2b00      	cmp	r3, #0
 801e0c4:	f43f af64 	beq.w	801df90 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801e0c8:	4b20      	ldr	r3, [pc, #128]	@ (801e14c <UTIL_SEQ_Run+0x1f0>)
 801e0ca:	f04f 32ff 	mov.w	r2, #4294967295
 801e0ce:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801e0d0:	f000 f88e 	bl	801e1f0 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e0d4:	f3ef 8310 	mrs	r3, PRIMASK
 801e0d8:	613b      	str	r3, [r7, #16]
  return(result);
 801e0da:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801e0dc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801e0de:	b672      	cpsid	i
}
 801e0e0:	bf00      	nop
  local_taskset = TaskSet;
 801e0e2:	4b15      	ldr	r3, [pc, #84]	@ (801e138 <UTIL_SEQ_Run+0x1dc>)
 801e0e4:	681b      	ldr	r3, [r3, #0]
 801e0e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 801e0e8:	4b14      	ldr	r3, [pc, #80]	@ (801e13c <UTIL_SEQ_Run+0x1e0>)
 801e0ea:	681b      	ldr	r3, [r3, #0]
 801e0ec:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801e0ee:	4b14      	ldr	r3, [pc, #80]	@ (801e140 <UTIL_SEQ_Run+0x1e4>)
 801e0f0:	681b      	ldr	r3, [r3, #0]
 801e0f2:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 801e0f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801e0f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e0f8:	401a      	ands	r2, r3
 801e0fa:	4b0e      	ldr	r3, [pc, #56]	@ (801e134 <UTIL_SEQ_Run+0x1d8>)
 801e0fc:	681b      	ldr	r3, [r3, #0]
 801e0fe:	4013      	ands	r3, r2
 801e100:	2b00      	cmp	r3, #0
 801e102:	d107      	bne.n	801e114 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 801e104:	4b0f      	ldr	r3, [pc, #60]	@ (801e144 <UTIL_SEQ_Run+0x1e8>)
 801e106:	681a      	ldr	r2, [r3, #0]
 801e108:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e10a:	4013      	ands	r3, r2
 801e10c:	2b00      	cmp	r3, #0
 801e10e:	d101      	bne.n	801e114 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 801e110:	f7e4 fab2 	bl	8002678 <UTIL_SEQ_Idle>
 801e114:	69fb      	ldr	r3, [r7, #28]
 801e116:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e118:	68fb      	ldr	r3, [r7, #12]
 801e11a:	f383 8810 	msr	PRIMASK, r3
}
 801e11e:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 801e120:	f000 f86c 	bl	801e1fc <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801e124:	4a03      	ldr	r2, [pc, #12]	@ (801e134 <UTIL_SEQ_Run+0x1d8>)
 801e126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e128:	6013      	str	r3, [r2, #0]

  return;
 801e12a:	bf00      	nop
}
 801e12c:	3740      	adds	r7, #64	@ 0x40
 801e12e:	46bd      	mov	sp, r7
 801e130:	bd80      	pop	{r7, pc}
 801e132:	bf00      	nop
 801e134:	20000148 	.word	0x20000148
 801e138:	20001c2c 	.word	0x20001c2c
 801e13c:	20001c30 	.word	0x20001c30
 801e140:	20000144 	.word	0x20000144
 801e144:	20001c34 	.word	0x20001c34
 801e148:	20001c4c 	.word	0x20001c4c
 801e14c:	20001c38 	.word	0x20001c38
 801e150:	20001c3c 	.word	0x20001c3c

0801e154 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801e154:	b580      	push	{r7, lr}
 801e156:	b088      	sub	sp, #32
 801e158:	af00      	add	r7, sp, #0
 801e15a:	60f8      	str	r0, [r7, #12]
 801e15c:	60b9      	str	r1, [r7, #8]
 801e15e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e160:	f3ef 8310 	mrs	r3, PRIMASK
 801e164:	617b      	str	r3, [r7, #20]
  return(result);
 801e166:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801e168:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801e16a:	b672      	cpsid	i
}
 801e16c:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801e16e:	68f8      	ldr	r0, [r7, #12]
 801e170:	f000 f84a 	bl	801e208 <SEQ_BitPosition>
 801e174:	4603      	mov	r3, r0
 801e176:	4619      	mov	r1, r3
 801e178:	4a06      	ldr	r2, [pc, #24]	@ (801e194 <UTIL_SEQ_RegTask+0x40>)
 801e17a:	687b      	ldr	r3, [r7, #4]
 801e17c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801e180:	69fb      	ldr	r3, [r7, #28]
 801e182:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e184:	69bb      	ldr	r3, [r7, #24]
 801e186:	f383 8810 	msr	PRIMASK, r3
}
 801e18a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801e18c:	bf00      	nop
}
 801e18e:	3720      	adds	r7, #32
 801e190:	46bd      	mov	sp, r7
 801e192:	bd80      	pop	{r7, pc}
 801e194:	20001c3c 	.word	0x20001c3c

0801e198 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801e198:	b480      	push	{r7}
 801e19a:	b087      	sub	sp, #28
 801e19c:	af00      	add	r7, sp, #0
 801e19e:	6078      	str	r0, [r7, #4]
 801e1a0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e1a2:	f3ef 8310 	mrs	r3, PRIMASK
 801e1a6:	60fb      	str	r3, [r7, #12]
  return(result);
 801e1a8:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801e1aa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801e1ac:	b672      	cpsid	i
}
 801e1ae:	bf00      	nop

  TaskSet |= TaskId_bm;
 801e1b0:	4b0d      	ldr	r3, [pc, #52]	@ (801e1e8 <UTIL_SEQ_SetTask+0x50>)
 801e1b2:	681a      	ldr	r2, [r3, #0]
 801e1b4:	687b      	ldr	r3, [r7, #4]
 801e1b6:	4313      	orrs	r3, r2
 801e1b8:	4a0b      	ldr	r2, [pc, #44]	@ (801e1e8 <UTIL_SEQ_SetTask+0x50>)
 801e1ba:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801e1bc:	4a0b      	ldr	r2, [pc, #44]	@ (801e1ec <UTIL_SEQ_SetTask+0x54>)
 801e1be:	683b      	ldr	r3, [r7, #0]
 801e1c0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801e1c4:	687b      	ldr	r3, [r7, #4]
 801e1c6:	431a      	orrs	r2, r3
 801e1c8:	4908      	ldr	r1, [pc, #32]	@ (801e1ec <UTIL_SEQ_SetTask+0x54>)
 801e1ca:	683b      	ldr	r3, [r7, #0]
 801e1cc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801e1d0:	697b      	ldr	r3, [r7, #20]
 801e1d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e1d4:	693b      	ldr	r3, [r7, #16]
 801e1d6:	f383 8810 	msr	PRIMASK, r3
}
 801e1da:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801e1dc:	bf00      	nop
}
 801e1de:	371c      	adds	r7, #28
 801e1e0:	46bd      	mov	sp, r7
 801e1e2:	bc80      	pop	{r7}
 801e1e4:	4770      	bx	lr
 801e1e6:	bf00      	nop
 801e1e8:	20001c2c 	.word	0x20001c2c
 801e1ec:	20001c4c 	.word	0x20001c4c

0801e1f0 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801e1f0:	b480      	push	{r7}
 801e1f2:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801e1f4:	bf00      	nop
}
 801e1f6:	46bd      	mov	sp, r7
 801e1f8:	bc80      	pop	{r7}
 801e1fa:	4770      	bx	lr

0801e1fc <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801e1fc:	b480      	push	{r7}
 801e1fe:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801e200:	bf00      	nop
}
 801e202:	46bd      	mov	sp, r7
 801e204:	bc80      	pop	{r7}
 801e206:	4770      	bx	lr

0801e208 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801e208:	b480      	push	{r7}
 801e20a:	b085      	sub	sp, #20
 801e20c:	af00      	add	r7, sp, #0
 801e20e:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 801e210:	2300      	movs	r3, #0
 801e212:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 801e214:	687b      	ldr	r3, [r7, #4]
 801e216:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 801e218:	68bb      	ldr	r3, [r7, #8]
 801e21a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801e21e:	d204      	bcs.n	801e22a <SEQ_BitPosition+0x22>
 801e220:	2310      	movs	r3, #16
 801e222:	73fb      	strb	r3, [r7, #15]
 801e224:	68bb      	ldr	r3, [r7, #8]
 801e226:	041b      	lsls	r3, r3, #16
 801e228:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801e22a:	68bb      	ldr	r3, [r7, #8]
 801e22c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801e230:	d205      	bcs.n	801e23e <SEQ_BitPosition+0x36>
 801e232:	7bfb      	ldrb	r3, [r7, #15]
 801e234:	3308      	adds	r3, #8
 801e236:	73fb      	strb	r3, [r7, #15]
 801e238:	68bb      	ldr	r3, [r7, #8]
 801e23a:	021b      	lsls	r3, r3, #8
 801e23c:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801e23e:	68bb      	ldr	r3, [r7, #8]
 801e240:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801e244:	d205      	bcs.n	801e252 <SEQ_BitPosition+0x4a>
 801e246:	7bfb      	ldrb	r3, [r7, #15]
 801e248:	3304      	adds	r3, #4
 801e24a:	73fb      	strb	r3, [r7, #15]
 801e24c:	68bb      	ldr	r3, [r7, #8]
 801e24e:	011b      	lsls	r3, r3, #4
 801e250:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801e252:	68bb      	ldr	r3, [r7, #8]
 801e254:	0f1b      	lsrs	r3, r3, #28
 801e256:	4a07      	ldr	r2, [pc, #28]	@ (801e274 <SEQ_BitPosition+0x6c>)
 801e258:	5cd2      	ldrb	r2, [r2, r3]
 801e25a:	7bfb      	ldrb	r3, [r7, #15]
 801e25c:	4413      	add	r3, r2
 801e25e:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801e260:	7bfb      	ldrb	r3, [r7, #15]
 801e262:	f1c3 031f 	rsb	r3, r3, #31
 801e266:	b2db      	uxtb	r3, r3
}
 801e268:	4618      	mov	r0, r3
 801e26a:	3714      	adds	r7, #20
 801e26c:	46bd      	mov	sp, r7
 801e26e:	bc80      	pop	{r7}
 801e270:	4770      	bx	lr
 801e272:	bf00      	nop
 801e274:	0801fe0c 	.word	0x0801fe0c

0801e278 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801e278:	b580      	push	{r7, lr}
 801e27a:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801e27c:	4b04      	ldr	r3, [pc, #16]	@ (801e290 <UTIL_TIMER_Init+0x18>)
 801e27e:	2200      	movs	r2, #0
 801e280:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801e282:	4b04      	ldr	r3, [pc, #16]	@ (801e294 <UTIL_TIMER_Init+0x1c>)
 801e284:	681b      	ldr	r3, [r3, #0]
 801e286:	4798      	blx	r3
 801e288:	4603      	mov	r3, r0
}
 801e28a:	4618      	mov	r0, r3
 801e28c:	bd80      	pop	{r7, pc}
 801e28e:	bf00      	nop
 801e290:	20001c54 	.word	0x20001c54
 801e294:	0801f804 	.word	0x0801f804

0801e298 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801e298:	b580      	push	{r7, lr}
 801e29a:	b084      	sub	sp, #16
 801e29c:	af00      	add	r7, sp, #0
 801e29e:	60f8      	str	r0, [r7, #12]
 801e2a0:	60b9      	str	r1, [r7, #8]
 801e2a2:	603b      	str	r3, [r7, #0]
 801e2a4:	4613      	mov	r3, r2
 801e2a6:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801e2a8:	68fb      	ldr	r3, [r7, #12]
 801e2aa:	2b00      	cmp	r3, #0
 801e2ac:	d023      	beq.n	801e2f6 <UTIL_TIMER_Create+0x5e>
 801e2ae:	683b      	ldr	r3, [r7, #0]
 801e2b0:	2b00      	cmp	r3, #0
 801e2b2:	d020      	beq.n	801e2f6 <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801e2b4:	68fb      	ldr	r3, [r7, #12]
 801e2b6:	2200      	movs	r2, #0
 801e2b8:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801e2ba:	4b11      	ldr	r3, [pc, #68]	@ (801e300 <UTIL_TIMER_Create+0x68>)
 801e2bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e2be:	68b8      	ldr	r0, [r7, #8]
 801e2c0:	4798      	blx	r3
 801e2c2:	4602      	mov	r2, r0
 801e2c4:	68fb      	ldr	r3, [r7, #12]
 801e2c6:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801e2c8:	68fb      	ldr	r3, [r7, #12]
 801e2ca:	2200      	movs	r2, #0
 801e2cc:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801e2ce:	68fb      	ldr	r3, [r7, #12]
 801e2d0:	2200      	movs	r2, #0
 801e2d2:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801e2d4:	68fb      	ldr	r3, [r7, #12]
 801e2d6:	2200      	movs	r2, #0
 801e2d8:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801e2da:	68fb      	ldr	r3, [r7, #12]
 801e2dc:	683a      	ldr	r2, [r7, #0]
 801e2de:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801e2e0:	68fb      	ldr	r3, [r7, #12]
 801e2e2:	69ba      	ldr	r2, [r7, #24]
 801e2e4:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801e2e6:	68fb      	ldr	r3, [r7, #12]
 801e2e8:	79fa      	ldrb	r2, [r7, #7]
 801e2ea:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801e2ec:	68fb      	ldr	r3, [r7, #12]
 801e2ee:	2200      	movs	r2, #0
 801e2f0:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801e2f2:	2300      	movs	r3, #0
 801e2f4:	e000      	b.n	801e2f8 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801e2f6:	2301      	movs	r3, #1
  }
}
 801e2f8:	4618      	mov	r0, r3
 801e2fa:	3710      	adds	r7, #16
 801e2fc:	46bd      	mov	sp, r7
 801e2fe:	bd80      	pop	{r7, pc}
 801e300:	0801f804 	.word	0x0801f804

0801e304 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801e304:	b580      	push	{r7, lr}
 801e306:	b08a      	sub	sp, #40	@ 0x28
 801e308:	af00      	add	r7, sp, #0
 801e30a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801e30c:	2300      	movs	r3, #0
 801e30e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801e312:	687b      	ldr	r3, [r7, #4]
 801e314:	2b00      	cmp	r3, #0
 801e316:	d056      	beq.n	801e3c6 <UTIL_TIMER_Start+0xc2>
 801e318:	6878      	ldr	r0, [r7, #4]
 801e31a:	f000 f9a9 	bl	801e670 <TimerExists>
 801e31e:	4603      	mov	r3, r0
 801e320:	f083 0301 	eor.w	r3, r3, #1
 801e324:	b2db      	uxtb	r3, r3
 801e326:	2b00      	cmp	r3, #0
 801e328:	d04d      	beq.n	801e3c6 <UTIL_TIMER_Start+0xc2>
 801e32a:	687b      	ldr	r3, [r7, #4]
 801e32c:	7a5b      	ldrb	r3, [r3, #9]
 801e32e:	2b00      	cmp	r3, #0
 801e330:	d149      	bne.n	801e3c6 <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e332:	f3ef 8310 	mrs	r3, PRIMASK
 801e336:	613b      	str	r3, [r7, #16]
  return(result);
 801e338:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801e33a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801e33c:	b672      	cpsid	i
}
 801e33e:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801e340:	687b      	ldr	r3, [r7, #4]
 801e342:	685b      	ldr	r3, [r3, #4]
 801e344:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801e346:	4b24      	ldr	r3, [pc, #144]	@ (801e3d8 <UTIL_TIMER_Start+0xd4>)
 801e348:	6a1b      	ldr	r3, [r3, #32]
 801e34a:	4798      	blx	r3
 801e34c:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801e34e:	6a3a      	ldr	r2, [r7, #32]
 801e350:	69bb      	ldr	r3, [r7, #24]
 801e352:	429a      	cmp	r2, r3
 801e354:	d201      	bcs.n	801e35a <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801e356:	69bb      	ldr	r3, [r7, #24]
 801e358:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801e35a:	687b      	ldr	r3, [r7, #4]
 801e35c:	6a3a      	ldr	r2, [r7, #32]
 801e35e:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801e360:	687b      	ldr	r3, [r7, #4]
 801e362:	2200      	movs	r2, #0
 801e364:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801e366:	687b      	ldr	r3, [r7, #4]
 801e368:	2201      	movs	r2, #1
 801e36a:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801e36c:	687b      	ldr	r3, [r7, #4]
 801e36e:	2200      	movs	r2, #0
 801e370:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801e372:	4b1a      	ldr	r3, [pc, #104]	@ (801e3dc <UTIL_TIMER_Start+0xd8>)
 801e374:	681b      	ldr	r3, [r3, #0]
 801e376:	2b00      	cmp	r3, #0
 801e378:	d106      	bne.n	801e388 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801e37a:	4b17      	ldr	r3, [pc, #92]	@ (801e3d8 <UTIL_TIMER_Start+0xd4>)
 801e37c:	691b      	ldr	r3, [r3, #16]
 801e37e:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801e380:	6878      	ldr	r0, [r7, #4]
 801e382:	f000 f9eb 	bl	801e75c <TimerInsertNewHeadTimer>
 801e386:	e017      	b.n	801e3b8 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801e388:	4b13      	ldr	r3, [pc, #76]	@ (801e3d8 <UTIL_TIMER_Start+0xd4>)
 801e38a:	699b      	ldr	r3, [r3, #24]
 801e38c:	4798      	blx	r3
 801e38e:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801e390:	687b      	ldr	r3, [r7, #4]
 801e392:	681a      	ldr	r2, [r3, #0]
 801e394:	697b      	ldr	r3, [r7, #20]
 801e396:	441a      	add	r2, r3
 801e398:	687b      	ldr	r3, [r7, #4]
 801e39a:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801e39c:	687b      	ldr	r3, [r7, #4]
 801e39e:	681a      	ldr	r2, [r3, #0]
 801e3a0:	4b0e      	ldr	r3, [pc, #56]	@ (801e3dc <UTIL_TIMER_Start+0xd8>)
 801e3a2:	681b      	ldr	r3, [r3, #0]
 801e3a4:	681b      	ldr	r3, [r3, #0]
 801e3a6:	429a      	cmp	r2, r3
 801e3a8:	d203      	bcs.n	801e3b2 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801e3aa:	6878      	ldr	r0, [r7, #4]
 801e3ac:	f000 f9d6 	bl	801e75c <TimerInsertNewHeadTimer>
 801e3b0:	e002      	b.n	801e3b8 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801e3b2:	6878      	ldr	r0, [r7, #4]
 801e3b4:	f000 f9a2 	bl	801e6fc <TimerInsertTimer>
 801e3b8:	69fb      	ldr	r3, [r7, #28]
 801e3ba:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e3bc:	68fb      	ldr	r3, [r7, #12]
 801e3be:	f383 8810 	msr	PRIMASK, r3
}
 801e3c2:	bf00      	nop
  {
 801e3c4:	e002      	b.n	801e3cc <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801e3c6:	2301      	movs	r3, #1
 801e3c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  return ret;
 801e3cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 801e3d0:	4618      	mov	r0, r3
 801e3d2:	3728      	adds	r7, #40	@ 0x28
 801e3d4:	46bd      	mov	sp, r7
 801e3d6:	bd80      	pop	{r7, pc}
 801e3d8:	0801f804 	.word	0x0801f804
 801e3dc:	20001c54 	.word	0x20001c54

0801e3e0 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801e3e0:	b580      	push	{r7, lr}
 801e3e2:	b088      	sub	sp, #32
 801e3e4:	af00      	add	r7, sp, #0
 801e3e6:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801e3e8:	2300      	movs	r3, #0
 801e3ea:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801e3ec:	687b      	ldr	r3, [r7, #4]
 801e3ee:	2b00      	cmp	r3, #0
 801e3f0:	d05b      	beq.n	801e4aa <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e3f2:	f3ef 8310 	mrs	r3, PRIMASK
 801e3f6:	60fb      	str	r3, [r7, #12]
  return(result);
 801e3f8:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801e3fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801e3fc:	b672      	cpsid	i
}
 801e3fe:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801e400:	4b2d      	ldr	r3, [pc, #180]	@ (801e4b8 <UTIL_TIMER_Stop+0xd8>)
 801e402:	681b      	ldr	r3, [r3, #0]
 801e404:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801e406:	4b2c      	ldr	r3, [pc, #176]	@ (801e4b8 <UTIL_TIMER_Stop+0xd8>)
 801e408:	681b      	ldr	r3, [r3, #0]
 801e40a:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801e40c:	687b      	ldr	r3, [r7, #4]
 801e40e:	2201      	movs	r2, #1
 801e410:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801e412:	4b29      	ldr	r3, [pc, #164]	@ (801e4b8 <UTIL_TIMER_Stop+0xd8>)
 801e414:	681b      	ldr	r3, [r3, #0]
 801e416:	2b00      	cmp	r3, #0
 801e418:	d041      	beq.n	801e49e <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801e41a:	687b      	ldr	r3, [r7, #4]
 801e41c:	2200      	movs	r2, #0
 801e41e:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801e420:	4b25      	ldr	r3, [pc, #148]	@ (801e4b8 <UTIL_TIMER_Stop+0xd8>)
 801e422:	681b      	ldr	r3, [r3, #0]
 801e424:	687a      	ldr	r2, [r7, #4]
 801e426:	429a      	cmp	r2, r3
 801e428:	d134      	bne.n	801e494 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801e42a:	4b23      	ldr	r3, [pc, #140]	@ (801e4b8 <UTIL_TIMER_Stop+0xd8>)
 801e42c:	681b      	ldr	r3, [r3, #0]
 801e42e:	2200      	movs	r2, #0
 801e430:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801e432:	4b21      	ldr	r3, [pc, #132]	@ (801e4b8 <UTIL_TIMER_Stop+0xd8>)
 801e434:	681b      	ldr	r3, [r3, #0]
 801e436:	695b      	ldr	r3, [r3, #20]
 801e438:	2b00      	cmp	r3, #0
 801e43a:	d00a      	beq.n	801e452 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801e43c:	4b1e      	ldr	r3, [pc, #120]	@ (801e4b8 <UTIL_TIMER_Stop+0xd8>)
 801e43e:	681b      	ldr	r3, [r3, #0]
 801e440:	695b      	ldr	r3, [r3, #20]
 801e442:	4a1d      	ldr	r2, [pc, #116]	@ (801e4b8 <UTIL_TIMER_Stop+0xd8>)
 801e444:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801e446:	4b1c      	ldr	r3, [pc, #112]	@ (801e4b8 <UTIL_TIMER_Stop+0xd8>)
 801e448:	681b      	ldr	r3, [r3, #0]
 801e44a:	4618      	mov	r0, r3
 801e44c:	f000 f92c 	bl	801e6a8 <TimerSetTimeout>
 801e450:	e023      	b.n	801e49a <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801e452:	4b1a      	ldr	r3, [pc, #104]	@ (801e4bc <UTIL_TIMER_Stop+0xdc>)
 801e454:	68db      	ldr	r3, [r3, #12]
 801e456:	4798      	blx	r3
            TimerListHead = NULL;
 801e458:	4b17      	ldr	r3, [pc, #92]	@ (801e4b8 <UTIL_TIMER_Stop+0xd8>)
 801e45a:	2200      	movs	r2, #0
 801e45c:	601a      	str	r2, [r3, #0]
 801e45e:	e01c      	b.n	801e49a <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801e460:	697a      	ldr	r2, [r7, #20]
 801e462:	687b      	ldr	r3, [r7, #4]
 801e464:	429a      	cmp	r2, r3
 801e466:	d110      	bne.n	801e48a <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801e468:	697b      	ldr	r3, [r7, #20]
 801e46a:	695b      	ldr	r3, [r3, #20]
 801e46c:	2b00      	cmp	r3, #0
 801e46e:	d006      	beq.n	801e47e <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801e470:	697b      	ldr	r3, [r7, #20]
 801e472:	695b      	ldr	r3, [r3, #20]
 801e474:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801e476:	69bb      	ldr	r3, [r7, #24]
 801e478:	697a      	ldr	r2, [r7, #20]
 801e47a:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801e47c:	e00d      	b.n	801e49a <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801e47e:	2300      	movs	r3, #0
 801e480:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801e482:	69bb      	ldr	r3, [r7, #24]
 801e484:	697a      	ldr	r2, [r7, #20]
 801e486:	615a      	str	r2, [r3, #20]
            break;
 801e488:	e007      	b.n	801e49a <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801e48a:	697b      	ldr	r3, [r7, #20]
 801e48c:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801e48e:	697b      	ldr	r3, [r7, #20]
 801e490:	695b      	ldr	r3, [r3, #20]
 801e492:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801e494:	697b      	ldr	r3, [r7, #20]
 801e496:	2b00      	cmp	r3, #0
 801e498:	d1e2      	bne.n	801e460 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801e49a:	2300      	movs	r3, #0
 801e49c:	77fb      	strb	r3, [r7, #31]
 801e49e:	693b      	ldr	r3, [r7, #16]
 801e4a0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e4a2:	68bb      	ldr	r3, [r7, #8]
 801e4a4:	f383 8810 	msr	PRIMASK, r3
}
 801e4a8:	e001      	b.n	801e4ae <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801e4aa:	2301      	movs	r3, #1
 801e4ac:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801e4ae:	7ffb      	ldrb	r3, [r7, #31]
}
 801e4b0:	4618      	mov	r0, r3
 801e4b2:	3720      	adds	r7, #32
 801e4b4:	46bd      	mov	sp, r7
 801e4b6:	bd80      	pop	{r7, pc}
 801e4b8:	20001c54 	.word	0x20001c54
 801e4bc:	0801f804 	.word	0x0801f804

0801e4c0 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801e4c0:	b580      	push	{r7, lr}
 801e4c2:	b084      	sub	sp, #16
 801e4c4:	af00      	add	r7, sp, #0
 801e4c6:	6078      	str	r0, [r7, #4]
 801e4c8:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801e4ca:	2300      	movs	r3, #0
 801e4cc:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801e4ce:	687b      	ldr	r3, [r7, #4]
 801e4d0:	2b00      	cmp	r3, #0
 801e4d2:	d102      	bne.n	801e4da <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801e4d4:	2301      	movs	r3, #1
 801e4d6:	73fb      	strb	r3, [r7, #15]
 801e4d8:	e014      	b.n	801e504 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801e4da:	4b0d      	ldr	r3, [pc, #52]	@ (801e510 <UTIL_TIMER_SetPeriod+0x50>)
 801e4dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e4de:	6838      	ldr	r0, [r7, #0]
 801e4e0:	4798      	blx	r3
 801e4e2:	4602      	mov	r2, r0
 801e4e4:	687b      	ldr	r3, [r7, #4]
 801e4e6:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801e4e8:	6878      	ldr	r0, [r7, #4]
 801e4ea:	f000 f8c1 	bl	801e670 <TimerExists>
 801e4ee:	4603      	mov	r3, r0
 801e4f0:	2b00      	cmp	r3, #0
 801e4f2:	d007      	beq.n	801e504 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801e4f4:	6878      	ldr	r0, [r7, #4]
 801e4f6:	f7ff ff73 	bl	801e3e0 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801e4fa:	6878      	ldr	r0, [r7, #4]
 801e4fc:	f7ff ff02 	bl	801e304 <UTIL_TIMER_Start>
 801e500:	4603      	mov	r3, r0
 801e502:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801e504:	7bfb      	ldrb	r3, [r7, #15]
}
 801e506:	4618      	mov	r0, r3
 801e508:	3710      	adds	r7, #16
 801e50a:	46bd      	mov	sp, r7
 801e50c:	bd80      	pop	{r7, pc}
 801e50e:	bf00      	nop
 801e510:	0801f804 	.word	0x0801f804

0801e514 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801e514:	b590      	push	{r4, r7, lr}
 801e516:	b089      	sub	sp, #36	@ 0x24
 801e518:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e51a:	f3ef 8310 	mrs	r3, PRIMASK
 801e51e:	60bb      	str	r3, [r7, #8]
  return(result);
 801e520:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801e522:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801e524:	b672      	cpsid	i
}
 801e526:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801e528:	4b38      	ldr	r3, [pc, #224]	@ (801e60c <UTIL_TIMER_IRQ_Handler+0xf8>)
 801e52a:	695b      	ldr	r3, [r3, #20]
 801e52c:	4798      	blx	r3
 801e52e:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801e530:	4b36      	ldr	r3, [pc, #216]	@ (801e60c <UTIL_TIMER_IRQ_Handler+0xf8>)
 801e532:	691b      	ldr	r3, [r3, #16]
 801e534:	4798      	blx	r3
 801e536:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801e538:	693a      	ldr	r2, [r7, #16]
 801e53a:	697b      	ldr	r3, [r7, #20]
 801e53c:	1ad3      	subs	r3, r2, r3
 801e53e:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801e540:	4b33      	ldr	r3, [pc, #204]	@ (801e610 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e542:	681b      	ldr	r3, [r3, #0]
 801e544:	2b00      	cmp	r3, #0
 801e546:	d037      	beq.n	801e5b8 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 801e548:	4b31      	ldr	r3, [pc, #196]	@ (801e610 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e54a:	681b      	ldr	r3, [r3, #0]
 801e54c:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801e54e:	69fb      	ldr	r3, [r7, #28]
 801e550:	681b      	ldr	r3, [r3, #0]
 801e552:	68fa      	ldr	r2, [r7, #12]
 801e554:	429a      	cmp	r2, r3
 801e556:	d206      	bcs.n	801e566 <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 801e558:	69fb      	ldr	r3, [r7, #28]
 801e55a:	681a      	ldr	r2, [r3, #0]
 801e55c:	68fb      	ldr	r3, [r7, #12]
 801e55e:	1ad2      	subs	r2, r2, r3
 801e560:	69fb      	ldr	r3, [r7, #28]
 801e562:	601a      	str	r2, [r3, #0]
 801e564:	e002      	b.n	801e56c <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801e566:	69fb      	ldr	r3, [r7, #28]
 801e568:	2200      	movs	r2, #0
 801e56a:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801e56c:	69fb      	ldr	r3, [r7, #28]
 801e56e:	695b      	ldr	r3, [r3, #20]
 801e570:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801e572:	69fb      	ldr	r3, [r7, #28]
 801e574:	2b00      	cmp	r3, #0
 801e576:	d1ea      	bne.n	801e54e <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801e578:	e01e      	b.n	801e5b8 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 801e57a:	4b25      	ldr	r3, [pc, #148]	@ (801e610 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e57c:	681b      	ldr	r3, [r3, #0]
 801e57e:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801e580:	4b23      	ldr	r3, [pc, #140]	@ (801e610 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e582:	681b      	ldr	r3, [r3, #0]
 801e584:	695b      	ldr	r3, [r3, #20]
 801e586:	4a22      	ldr	r2, [pc, #136]	@ (801e610 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e588:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 801e58a:	69fb      	ldr	r3, [r7, #28]
 801e58c:	2200      	movs	r2, #0
 801e58e:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801e590:	69fb      	ldr	r3, [r7, #28]
 801e592:	2200      	movs	r2, #0
 801e594:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801e596:	69fb      	ldr	r3, [r7, #28]
 801e598:	68db      	ldr	r3, [r3, #12]
 801e59a:	69fa      	ldr	r2, [r7, #28]
 801e59c:	6912      	ldr	r2, [r2, #16]
 801e59e:	4610      	mov	r0, r2
 801e5a0:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801e5a2:	69fb      	ldr	r3, [r7, #28]
 801e5a4:	7adb      	ldrb	r3, [r3, #11]
 801e5a6:	2b01      	cmp	r3, #1
 801e5a8:	d106      	bne.n	801e5b8 <UTIL_TIMER_IRQ_Handler+0xa4>
 801e5aa:	69fb      	ldr	r3, [r7, #28]
 801e5ac:	7a9b      	ldrb	r3, [r3, #10]
 801e5ae:	2b00      	cmp	r3, #0
 801e5b0:	d102      	bne.n	801e5b8 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801e5b2:	69f8      	ldr	r0, [r7, #28]
 801e5b4:	f7ff fea6 	bl	801e304 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801e5b8:	4b15      	ldr	r3, [pc, #84]	@ (801e610 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e5ba:	681b      	ldr	r3, [r3, #0]
 801e5bc:	2b00      	cmp	r3, #0
 801e5be:	d00d      	beq.n	801e5dc <UTIL_TIMER_IRQ_Handler+0xc8>
 801e5c0:	4b13      	ldr	r3, [pc, #76]	@ (801e610 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e5c2:	681b      	ldr	r3, [r3, #0]
 801e5c4:	681b      	ldr	r3, [r3, #0]
 801e5c6:	2b00      	cmp	r3, #0
 801e5c8:	d0d7      	beq.n	801e57a <UTIL_TIMER_IRQ_Handler+0x66>
 801e5ca:	4b11      	ldr	r3, [pc, #68]	@ (801e610 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e5cc:	681b      	ldr	r3, [r3, #0]
 801e5ce:	681c      	ldr	r4, [r3, #0]
 801e5d0:	4b0e      	ldr	r3, [pc, #56]	@ (801e60c <UTIL_TIMER_IRQ_Handler+0xf8>)
 801e5d2:	699b      	ldr	r3, [r3, #24]
 801e5d4:	4798      	blx	r3
 801e5d6:	4603      	mov	r3, r0
 801e5d8:	429c      	cmp	r4, r3
 801e5da:	d3ce      	bcc.n	801e57a <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801e5dc:	4b0c      	ldr	r3, [pc, #48]	@ (801e610 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e5de:	681b      	ldr	r3, [r3, #0]
 801e5e0:	2b00      	cmp	r3, #0
 801e5e2:	d009      	beq.n	801e5f8 <UTIL_TIMER_IRQ_Handler+0xe4>
 801e5e4:	4b0a      	ldr	r3, [pc, #40]	@ (801e610 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e5e6:	681b      	ldr	r3, [r3, #0]
 801e5e8:	7a1b      	ldrb	r3, [r3, #8]
 801e5ea:	2b00      	cmp	r3, #0
 801e5ec:	d104      	bne.n	801e5f8 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801e5ee:	4b08      	ldr	r3, [pc, #32]	@ (801e610 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e5f0:	681b      	ldr	r3, [r3, #0]
 801e5f2:	4618      	mov	r0, r3
 801e5f4:	f000 f858 	bl	801e6a8 <TimerSetTimeout>
 801e5f8:	69bb      	ldr	r3, [r7, #24]
 801e5fa:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e5fc:	687b      	ldr	r3, [r7, #4]
 801e5fe:	f383 8810 	msr	PRIMASK, r3
}
 801e602:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801e604:	bf00      	nop
 801e606:	3724      	adds	r7, #36	@ 0x24
 801e608:	46bd      	mov	sp, r7
 801e60a:	bd90      	pop	{r4, r7, pc}
 801e60c:	0801f804 	.word	0x0801f804
 801e610:	20001c54 	.word	0x20001c54

0801e614 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801e614:	b580      	push	{r7, lr}
 801e616:	b082      	sub	sp, #8
 801e618:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801e61a:	4b06      	ldr	r3, [pc, #24]	@ (801e634 <UTIL_TIMER_GetCurrentTime+0x20>)
 801e61c:	69db      	ldr	r3, [r3, #28]
 801e61e:	4798      	blx	r3
 801e620:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801e622:	4b04      	ldr	r3, [pc, #16]	@ (801e634 <UTIL_TIMER_GetCurrentTime+0x20>)
 801e624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e626:	6878      	ldr	r0, [r7, #4]
 801e628:	4798      	blx	r3
 801e62a:	4603      	mov	r3, r0
}
 801e62c:	4618      	mov	r0, r3
 801e62e:	3708      	adds	r7, #8
 801e630:	46bd      	mov	sp, r7
 801e632:	bd80      	pop	{r7, pc}
 801e634:	0801f804 	.word	0x0801f804

0801e638 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801e638:	b580      	push	{r7, lr}
 801e63a:	b084      	sub	sp, #16
 801e63c:	af00      	add	r7, sp, #0
 801e63e:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801e640:	4b0a      	ldr	r3, [pc, #40]	@ (801e66c <UTIL_TIMER_GetElapsedTime+0x34>)
 801e642:	69db      	ldr	r3, [r3, #28]
 801e644:	4798      	blx	r3
 801e646:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801e648:	4b08      	ldr	r3, [pc, #32]	@ (801e66c <UTIL_TIMER_GetElapsedTime+0x34>)
 801e64a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e64c:	6878      	ldr	r0, [r7, #4]
 801e64e:	4798      	blx	r3
 801e650:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801e652:	4b06      	ldr	r3, [pc, #24]	@ (801e66c <UTIL_TIMER_GetElapsedTime+0x34>)
 801e654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e656:	68f9      	ldr	r1, [r7, #12]
 801e658:	68ba      	ldr	r2, [r7, #8]
 801e65a:	1a8a      	subs	r2, r1, r2
 801e65c:	4610      	mov	r0, r2
 801e65e:	4798      	blx	r3
 801e660:	4603      	mov	r3, r0
}
 801e662:	4618      	mov	r0, r3
 801e664:	3710      	adds	r7, #16
 801e666:	46bd      	mov	sp, r7
 801e668:	bd80      	pop	{r7, pc}
 801e66a:	bf00      	nop
 801e66c:	0801f804 	.word	0x0801f804

0801e670 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801e670:	b480      	push	{r7}
 801e672:	b085      	sub	sp, #20
 801e674:	af00      	add	r7, sp, #0
 801e676:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801e678:	4b0a      	ldr	r3, [pc, #40]	@ (801e6a4 <TimerExists+0x34>)
 801e67a:	681b      	ldr	r3, [r3, #0]
 801e67c:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801e67e:	e008      	b.n	801e692 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801e680:	68fa      	ldr	r2, [r7, #12]
 801e682:	687b      	ldr	r3, [r7, #4]
 801e684:	429a      	cmp	r2, r3
 801e686:	d101      	bne.n	801e68c <TimerExists+0x1c>
    {
      return true;
 801e688:	2301      	movs	r3, #1
 801e68a:	e006      	b.n	801e69a <TimerExists+0x2a>
    }
    cur = cur->Next;
 801e68c:	68fb      	ldr	r3, [r7, #12]
 801e68e:	695b      	ldr	r3, [r3, #20]
 801e690:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801e692:	68fb      	ldr	r3, [r7, #12]
 801e694:	2b00      	cmp	r3, #0
 801e696:	d1f3      	bne.n	801e680 <TimerExists+0x10>
  }
  return false;
 801e698:	2300      	movs	r3, #0
}
 801e69a:	4618      	mov	r0, r3
 801e69c:	3714      	adds	r7, #20
 801e69e:	46bd      	mov	sp, r7
 801e6a0:	bc80      	pop	{r7}
 801e6a2:	4770      	bx	lr
 801e6a4:	20001c54 	.word	0x20001c54

0801e6a8 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801e6a8:	b590      	push	{r4, r7, lr}
 801e6aa:	b085      	sub	sp, #20
 801e6ac:	af00      	add	r7, sp, #0
 801e6ae:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801e6b0:	4b11      	ldr	r3, [pc, #68]	@ (801e6f8 <TimerSetTimeout+0x50>)
 801e6b2:	6a1b      	ldr	r3, [r3, #32]
 801e6b4:	4798      	blx	r3
 801e6b6:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801e6b8:	687b      	ldr	r3, [r7, #4]
 801e6ba:	2201      	movs	r2, #1
 801e6bc:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801e6be:	687b      	ldr	r3, [r7, #4]
 801e6c0:	681c      	ldr	r4, [r3, #0]
 801e6c2:	4b0d      	ldr	r3, [pc, #52]	@ (801e6f8 <TimerSetTimeout+0x50>)
 801e6c4:	699b      	ldr	r3, [r3, #24]
 801e6c6:	4798      	blx	r3
 801e6c8:	4602      	mov	r2, r0
 801e6ca:	68fb      	ldr	r3, [r7, #12]
 801e6cc:	4413      	add	r3, r2
 801e6ce:	429c      	cmp	r4, r3
 801e6d0:	d207      	bcs.n	801e6e2 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801e6d2:	4b09      	ldr	r3, [pc, #36]	@ (801e6f8 <TimerSetTimeout+0x50>)
 801e6d4:	699b      	ldr	r3, [r3, #24]
 801e6d6:	4798      	blx	r3
 801e6d8:	4602      	mov	r2, r0
 801e6da:	68fb      	ldr	r3, [r7, #12]
 801e6dc:	441a      	add	r2, r3
 801e6de:	687b      	ldr	r3, [r7, #4]
 801e6e0:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801e6e2:	4b05      	ldr	r3, [pc, #20]	@ (801e6f8 <TimerSetTimeout+0x50>)
 801e6e4:	689b      	ldr	r3, [r3, #8]
 801e6e6:	687a      	ldr	r2, [r7, #4]
 801e6e8:	6812      	ldr	r2, [r2, #0]
 801e6ea:	4610      	mov	r0, r2
 801e6ec:	4798      	blx	r3
}
 801e6ee:	bf00      	nop
 801e6f0:	3714      	adds	r7, #20
 801e6f2:	46bd      	mov	sp, r7
 801e6f4:	bd90      	pop	{r4, r7, pc}
 801e6f6:	bf00      	nop
 801e6f8:	0801f804 	.word	0x0801f804

0801e6fc <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801e6fc:	b480      	push	{r7}
 801e6fe:	b085      	sub	sp, #20
 801e700:	af00      	add	r7, sp, #0
 801e702:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801e704:	4b14      	ldr	r3, [pc, #80]	@ (801e758 <TimerInsertTimer+0x5c>)
 801e706:	681b      	ldr	r3, [r3, #0]
 801e708:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801e70a:	4b13      	ldr	r3, [pc, #76]	@ (801e758 <TimerInsertTimer+0x5c>)
 801e70c:	681b      	ldr	r3, [r3, #0]
 801e70e:	695b      	ldr	r3, [r3, #20]
 801e710:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801e712:	e012      	b.n	801e73a <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801e714:	687b      	ldr	r3, [r7, #4]
 801e716:	681a      	ldr	r2, [r3, #0]
 801e718:	68bb      	ldr	r3, [r7, #8]
 801e71a:	681b      	ldr	r3, [r3, #0]
 801e71c:	429a      	cmp	r2, r3
 801e71e:	d905      	bls.n	801e72c <TimerInsertTimer+0x30>
    {
        cur = next;
 801e720:	68bb      	ldr	r3, [r7, #8]
 801e722:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801e724:	68bb      	ldr	r3, [r7, #8]
 801e726:	695b      	ldr	r3, [r3, #20]
 801e728:	60bb      	str	r3, [r7, #8]
 801e72a:	e006      	b.n	801e73a <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801e72c:	68fb      	ldr	r3, [r7, #12]
 801e72e:	687a      	ldr	r2, [r7, #4]
 801e730:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801e732:	687b      	ldr	r3, [r7, #4]
 801e734:	68ba      	ldr	r2, [r7, #8]
 801e736:	615a      	str	r2, [r3, #20]
        return;
 801e738:	e009      	b.n	801e74e <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801e73a:	68fb      	ldr	r3, [r7, #12]
 801e73c:	695b      	ldr	r3, [r3, #20]
 801e73e:	2b00      	cmp	r3, #0
 801e740:	d1e8      	bne.n	801e714 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801e742:	68fb      	ldr	r3, [r7, #12]
 801e744:	687a      	ldr	r2, [r7, #4]
 801e746:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801e748:	687b      	ldr	r3, [r7, #4]
 801e74a:	2200      	movs	r2, #0
 801e74c:	615a      	str	r2, [r3, #20]
}
 801e74e:	3714      	adds	r7, #20
 801e750:	46bd      	mov	sp, r7
 801e752:	bc80      	pop	{r7}
 801e754:	4770      	bx	lr
 801e756:	bf00      	nop
 801e758:	20001c54 	.word	0x20001c54

0801e75c <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801e75c:	b580      	push	{r7, lr}
 801e75e:	b084      	sub	sp, #16
 801e760:	af00      	add	r7, sp, #0
 801e762:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801e764:	4b0b      	ldr	r3, [pc, #44]	@ (801e794 <TimerInsertNewHeadTimer+0x38>)
 801e766:	681b      	ldr	r3, [r3, #0]
 801e768:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801e76a:	68fb      	ldr	r3, [r7, #12]
 801e76c:	2b00      	cmp	r3, #0
 801e76e:	d002      	beq.n	801e776 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801e770:	68fb      	ldr	r3, [r7, #12]
 801e772:	2200      	movs	r2, #0
 801e774:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801e776:	687b      	ldr	r3, [r7, #4]
 801e778:	68fa      	ldr	r2, [r7, #12]
 801e77a:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801e77c:	4a05      	ldr	r2, [pc, #20]	@ (801e794 <TimerInsertNewHeadTimer+0x38>)
 801e77e:	687b      	ldr	r3, [r7, #4]
 801e780:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801e782:	4b04      	ldr	r3, [pc, #16]	@ (801e794 <TimerInsertNewHeadTimer+0x38>)
 801e784:	681b      	ldr	r3, [r3, #0]
 801e786:	4618      	mov	r0, r3
 801e788:	f7ff ff8e 	bl	801e6a8 <TimerSetTimeout>
}
 801e78c:	bf00      	nop
 801e78e:	3710      	adds	r7, #16
 801e790:	46bd      	mov	sp, r7
 801e792:	bd80      	pop	{r7, pc}
 801e794:	20001c54 	.word	0x20001c54

0801e798 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801e798:	b580      	push	{r7, lr}
 801e79a:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801e79c:	2218      	movs	r2, #24
 801e79e:	2100      	movs	r1, #0
 801e7a0:	4807      	ldr	r0, [pc, #28]	@ (801e7c0 <UTIL_ADV_TRACE_Init+0x28>)
 801e7a2:	f7fe fffc 	bl	801d79e <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801e7a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801e7aa:	2100      	movs	r1, #0
 801e7ac:	4805      	ldr	r0, [pc, #20]	@ (801e7c4 <UTIL_ADV_TRACE_Init+0x2c>)
 801e7ae:	f7fe fff6 	bl	801d79e <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801e7b2:	4b05      	ldr	r3, [pc, #20]	@ (801e7c8 <UTIL_ADV_TRACE_Init+0x30>)
 801e7b4:	681b      	ldr	r3, [r3, #0]
 801e7b6:	4805      	ldr	r0, [pc, #20]	@ (801e7cc <UTIL_ADV_TRACE_Init+0x34>)
 801e7b8:	4798      	blx	r3
 801e7ba:	4603      	mov	r3, r0
}
 801e7bc:	4618      	mov	r0, r3
 801e7be:	bd80      	pop	{r7, pc}
 801e7c0:	20001c58 	.word	0x20001c58
 801e7c4:	20001c70 	.word	0x20001c70
 801e7c8:	0801f844 	.word	0x0801f844
 801e7cc:	0801ea39 	.word	0x0801ea39

0801e7d0 <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801e7d0:	b480      	push	{r7}
 801e7d2:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801e7d4:	4b06      	ldr	r3, [pc, #24]	@ (801e7f0 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801e7d6:	8a5a      	ldrh	r2, [r3, #18]
 801e7d8:	4b05      	ldr	r3, [pc, #20]	@ (801e7f0 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801e7da:	8a1b      	ldrh	r3, [r3, #16]
 801e7dc:	429a      	cmp	r2, r3
 801e7de:	d101      	bne.n	801e7e4 <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801e7e0:	2301      	movs	r3, #1
 801e7e2:	e000      	b.n	801e7e6 <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801e7e4:	2300      	movs	r3, #0
}
 801e7e6:	4618      	mov	r0, r3
 801e7e8:	46bd      	mov	sp, r7
 801e7ea:	bc80      	pop	{r7}
 801e7ec:	4770      	bx	lr
 801e7ee:	bf00      	nop
 801e7f0:	20001c58 	.word	0x20001c58

0801e7f4 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801e7f4:	b408      	push	{r3}
 801e7f6:	b580      	push	{r7, lr}
 801e7f8:	b08d      	sub	sp, #52	@ 0x34
 801e7fa:	af00      	add	r7, sp, #0
 801e7fc:	60f8      	str	r0, [r7, #12]
 801e7fe:	60b9      	str	r1, [r7, #8]
 801e800:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801e802:	2300      	movs	r3, #0
 801e804:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801e806:	2300      	movs	r3, #0
 801e808:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801e80a:	4b37      	ldr	r3, [pc, #220]	@ (801e8e8 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801e80c:	7a1b      	ldrb	r3, [r3, #8]
 801e80e:	461a      	mov	r2, r3
 801e810:	68fb      	ldr	r3, [r7, #12]
 801e812:	4293      	cmp	r3, r2
 801e814:	d902      	bls.n	801e81c <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801e816:	f06f 0304 	mvn.w	r3, #4
 801e81a:	e05e      	b.n	801e8da <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801e81c:	4b32      	ldr	r3, [pc, #200]	@ (801e8e8 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801e81e:	68da      	ldr	r2, [r3, #12]
 801e820:	68bb      	ldr	r3, [r7, #8]
 801e822:	4013      	ands	r3, r2
 801e824:	68ba      	ldr	r2, [r7, #8]
 801e826:	429a      	cmp	r2, r3
 801e828:	d002      	beq.n	801e830 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801e82a:	f06f 0305 	mvn.w	r3, #5
 801e82e:	e054      	b.n	801e8da <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801e830:	4b2d      	ldr	r3, [pc, #180]	@ (801e8e8 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801e832:	685b      	ldr	r3, [r3, #4]
 801e834:	2b00      	cmp	r3, #0
 801e836:	d00a      	beq.n	801e84e <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801e838:	687b      	ldr	r3, [r7, #4]
 801e83a:	2b00      	cmp	r3, #0
 801e83c:	d007      	beq.n	801e84e <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801e83e:	4b2a      	ldr	r3, [pc, #168]	@ (801e8e8 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801e840:	685b      	ldr	r3, [r3, #4]
 801e842:	f107 0116 	add.w	r1, r7, #22
 801e846:	f107 0218 	add.w	r2, r7, #24
 801e84a:	4610      	mov	r0, r2
 801e84c:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801e84e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801e852:	62bb      	str	r3, [r7, #40]	@ 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801e854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e856:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801e858:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801e85c:	4823      	ldr	r0, [pc, #140]	@ (801e8ec <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801e85e:	f7ff fa2b 	bl	801dcb8 <tiny_vsnprintf_like>
 801e862:	4603      	mov	r3, r0
 801e864:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  TRACE_Lock();
 801e866:	f000 f9f1 	bl	801ec4c <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801e86a:	8afa      	ldrh	r2, [r7, #22]
 801e86c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801e86e:	4413      	add	r3, r2
 801e870:	b29b      	uxth	r3, r3
 801e872:	f107 0214 	add.w	r2, r7, #20
 801e876:	4611      	mov	r1, r2
 801e878:	4618      	mov	r0, r3
 801e87a:	f000 f969 	bl	801eb50 <TRACE_AllocateBufer>
 801e87e:	4603      	mov	r3, r0
 801e880:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e884:	d025      	beq.n	801e8d2 <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801e886:	2300      	movs	r3, #0
 801e888:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 801e88a:	e00e      	b.n	801e8aa <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801e88c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801e88e:	8aba      	ldrh	r2, [r7, #20]
 801e890:	3330      	adds	r3, #48	@ 0x30
 801e892:	443b      	add	r3, r7
 801e894:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801e898:	4b15      	ldr	r3, [pc, #84]	@ (801e8f0 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801e89a:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801e89c:	8abb      	ldrh	r3, [r7, #20]
 801e89e:	3301      	adds	r3, #1
 801e8a0:	b29b      	uxth	r3, r3
 801e8a2:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801e8a4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801e8a6:	3301      	adds	r3, #1
 801e8a8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 801e8aa:	8afb      	ldrh	r3, [r7, #22]
 801e8ac:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801e8ae:	429a      	cmp	r2, r3
 801e8b0:	d3ec      	bcc.n	801e88c <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801e8b2:	8abb      	ldrh	r3, [r7, #20]
 801e8b4:	461a      	mov	r2, r3
 801e8b6:	4b0e      	ldr	r3, [pc, #56]	@ (801e8f0 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801e8b8:	18d0      	adds	r0, r2, r3
 801e8ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e8bc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801e8be:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801e8c2:	f7ff f9f9 	bl	801dcb8 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801e8c6:	f000 f9df 	bl	801ec88 <TRACE_UnLock>

    return TRACE_Send();
 801e8ca:	f000 f831 	bl	801e930 <TRACE_Send>
 801e8ce:	4603      	mov	r3, r0
 801e8d0:	e003      	b.n	801e8da <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801e8d2:	f000 f9d9 	bl	801ec88 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801e8d6:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801e8da:	4618      	mov	r0, r3
 801e8dc:	3734      	adds	r7, #52	@ 0x34
 801e8de:	46bd      	mov	sp, r7
 801e8e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801e8e4:	b001      	add	sp, #4
 801e8e6:	4770      	bx	lr
 801e8e8:	20001c58 	.word	0x20001c58
 801e8ec:	20002070 	.word	0x20002070
 801e8f0:	20001c70 	.word	0x20001c70

0801e8f4 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801e8f4:	b480      	push	{r7}
 801e8f6:	b083      	sub	sp, #12
 801e8f8:	af00      	add	r7, sp, #0
 801e8fa:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801e8fc:	4a03      	ldr	r2, [pc, #12]	@ (801e90c <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801e8fe:	687b      	ldr	r3, [r7, #4]
 801e900:	6053      	str	r3, [r2, #4]
}
 801e902:	bf00      	nop
 801e904:	370c      	adds	r7, #12
 801e906:	46bd      	mov	sp, r7
 801e908:	bc80      	pop	{r7}
 801e90a:	4770      	bx	lr
 801e90c:	20001c58 	.word	0x20001c58

0801e910 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801e910:	b480      	push	{r7}
 801e912:	b083      	sub	sp, #12
 801e914:	af00      	add	r7, sp, #0
 801e916:	4603      	mov	r3, r0
 801e918:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801e91a:	4a04      	ldr	r2, [pc, #16]	@ (801e92c <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801e91c:	79fb      	ldrb	r3, [r7, #7]
 801e91e:	7213      	strb	r3, [r2, #8]
}
 801e920:	bf00      	nop
 801e922:	370c      	adds	r7, #12
 801e924:	46bd      	mov	sp, r7
 801e926:	bc80      	pop	{r7}
 801e928:	4770      	bx	lr
 801e92a:	bf00      	nop
 801e92c:	20001c58 	.word	0x20001c58

0801e930 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801e930:	b580      	push	{r7, lr}
 801e932:	b088      	sub	sp, #32
 801e934:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801e936:	2300      	movs	r3, #0
 801e938:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801e93a:	2300      	movs	r3, #0
 801e93c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e93e:	f3ef 8310 	mrs	r3, PRIMASK
 801e942:	613b      	str	r3, [r7, #16]
  return(result);
 801e944:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801e946:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801e948:	b672      	cpsid	i
}
 801e94a:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801e94c:	f000 f9ba 	bl	801ecc4 <TRACE_IsLocked>
 801e950:	4603      	mov	r3, r0
 801e952:	2b00      	cmp	r3, #0
 801e954:	d15d      	bne.n	801ea12 <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801e956:	f000 f979 	bl	801ec4c <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801e95a:	4b34      	ldr	r3, [pc, #208]	@ (801ea2c <TRACE_Send+0xfc>)
 801e95c:	8a1a      	ldrh	r2, [r3, #16]
 801e95e:	4b33      	ldr	r3, [pc, #204]	@ (801ea2c <TRACE_Send+0xfc>)
 801e960:	8a5b      	ldrh	r3, [r3, #18]
 801e962:	429a      	cmp	r2, r3
 801e964:	d04d      	beq.n	801ea02 <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801e966:	4b31      	ldr	r3, [pc, #196]	@ (801ea2c <TRACE_Send+0xfc>)
 801e968:	789b      	ldrb	r3, [r3, #2]
 801e96a:	2b01      	cmp	r3, #1
 801e96c:	d117      	bne.n	801e99e <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801e96e:	4b2f      	ldr	r3, [pc, #188]	@ (801ea2c <TRACE_Send+0xfc>)
 801e970:	881a      	ldrh	r2, [r3, #0]
 801e972:	4b2e      	ldr	r3, [pc, #184]	@ (801ea2c <TRACE_Send+0xfc>)
 801e974:	8a1b      	ldrh	r3, [r3, #16]
 801e976:	1ad3      	subs	r3, r2, r3
 801e978:	b29a      	uxth	r2, r3
 801e97a:	4b2c      	ldr	r3, [pc, #176]	@ (801ea2c <TRACE_Send+0xfc>)
 801e97c:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801e97e:	4b2b      	ldr	r3, [pc, #172]	@ (801ea2c <TRACE_Send+0xfc>)
 801e980:	2202      	movs	r2, #2
 801e982:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801e984:	4b29      	ldr	r3, [pc, #164]	@ (801ea2c <TRACE_Send+0xfc>)
 801e986:	2200      	movs	r2, #0
 801e988:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801e98a:	4b28      	ldr	r3, [pc, #160]	@ (801ea2c <TRACE_Send+0xfc>)
 801e98c:	8a9b      	ldrh	r3, [r3, #20]
 801e98e:	2b00      	cmp	r3, #0
 801e990:	d105      	bne.n	801e99e <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801e992:	4b26      	ldr	r3, [pc, #152]	@ (801ea2c <TRACE_Send+0xfc>)
 801e994:	2200      	movs	r2, #0
 801e996:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801e998:	4b24      	ldr	r3, [pc, #144]	@ (801ea2c <TRACE_Send+0xfc>)
 801e99a:	2200      	movs	r2, #0
 801e99c:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801e99e:	4b23      	ldr	r3, [pc, #140]	@ (801ea2c <TRACE_Send+0xfc>)
 801e9a0:	789b      	ldrb	r3, [r3, #2]
 801e9a2:	2b00      	cmp	r3, #0
 801e9a4:	d115      	bne.n	801e9d2 <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801e9a6:	4b21      	ldr	r3, [pc, #132]	@ (801ea2c <TRACE_Send+0xfc>)
 801e9a8:	8a5a      	ldrh	r2, [r3, #18]
 801e9aa:	4b20      	ldr	r3, [pc, #128]	@ (801ea2c <TRACE_Send+0xfc>)
 801e9ac:	8a1b      	ldrh	r3, [r3, #16]
 801e9ae:	429a      	cmp	r2, r3
 801e9b0:	d908      	bls.n	801e9c4 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801e9b2:	4b1e      	ldr	r3, [pc, #120]	@ (801ea2c <TRACE_Send+0xfc>)
 801e9b4:	8a5a      	ldrh	r2, [r3, #18]
 801e9b6:	4b1d      	ldr	r3, [pc, #116]	@ (801ea2c <TRACE_Send+0xfc>)
 801e9b8:	8a1b      	ldrh	r3, [r3, #16]
 801e9ba:	1ad3      	subs	r3, r2, r3
 801e9bc:	b29a      	uxth	r2, r3
 801e9be:	4b1b      	ldr	r3, [pc, #108]	@ (801ea2c <TRACE_Send+0xfc>)
 801e9c0:	829a      	strh	r2, [r3, #20]
 801e9c2:	e006      	b.n	801e9d2 <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801e9c4:	4b19      	ldr	r3, [pc, #100]	@ (801ea2c <TRACE_Send+0xfc>)
 801e9c6:	8a1b      	ldrh	r3, [r3, #16]
 801e9c8:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801e9cc:	b29a      	uxth	r2, r3
 801e9ce:	4b17      	ldr	r3, [pc, #92]	@ (801ea2c <TRACE_Send+0xfc>)
 801e9d0:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801e9d2:	4b16      	ldr	r3, [pc, #88]	@ (801ea2c <TRACE_Send+0xfc>)
 801e9d4:	8a1b      	ldrh	r3, [r3, #16]
 801e9d6:	461a      	mov	r2, r3
 801e9d8:	4b15      	ldr	r3, [pc, #84]	@ (801ea30 <TRACE_Send+0x100>)
 801e9da:	4413      	add	r3, r2
 801e9dc:	61bb      	str	r3, [r7, #24]
 801e9de:	697b      	ldr	r3, [r7, #20]
 801e9e0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e9e2:	68fb      	ldr	r3, [r7, #12]
 801e9e4:	f383 8810 	msr	PRIMASK, r3
}
 801e9e8:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801e9ea:	f7e3 ff4b 	bl	8002884 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801e9ee:	4b11      	ldr	r3, [pc, #68]	@ (801ea34 <TRACE_Send+0x104>)
 801e9f0:	68db      	ldr	r3, [r3, #12]
 801e9f2:	4a0e      	ldr	r2, [pc, #56]	@ (801ea2c <TRACE_Send+0xfc>)
 801e9f4:	8a92      	ldrh	r2, [r2, #20]
 801e9f6:	4611      	mov	r1, r2
 801e9f8:	69b8      	ldr	r0, [r7, #24]
 801e9fa:	4798      	blx	r3
 801e9fc:	4603      	mov	r3, r0
 801e9fe:	77fb      	strb	r3, [r7, #31]
 801ea00:	e00d      	b.n	801ea1e <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801ea02:	f000 f941 	bl	801ec88 <TRACE_UnLock>
 801ea06:	697b      	ldr	r3, [r7, #20]
 801ea08:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ea0a:	68bb      	ldr	r3, [r7, #8]
 801ea0c:	f383 8810 	msr	PRIMASK, r3
}
 801ea10:	e005      	b.n	801ea1e <TRACE_Send+0xee>
 801ea12:	697b      	ldr	r3, [r7, #20]
 801ea14:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ea16:	687b      	ldr	r3, [r7, #4]
 801ea18:	f383 8810 	msr	PRIMASK, r3
}
 801ea1c:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801ea1e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801ea22:	4618      	mov	r0, r3
 801ea24:	3720      	adds	r7, #32
 801ea26:	46bd      	mov	sp, r7
 801ea28:	bd80      	pop	{r7, pc}
 801ea2a:	bf00      	nop
 801ea2c:	20001c58 	.word	0x20001c58
 801ea30:	20001c70 	.word	0x20001c70
 801ea34:	0801f844 	.word	0x0801f844

0801ea38 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801ea38:	b580      	push	{r7, lr}
 801ea3a:	b088      	sub	sp, #32
 801ea3c:	af00      	add	r7, sp, #0
 801ea3e:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801ea40:	2300      	movs	r3, #0
 801ea42:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ea44:	f3ef 8310 	mrs	r3, PRIMASK
 801ea48:	617b      	str	r3, [r7, #20]
  return(result);
 801ea4a:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801ea4c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801ea4e:	b672      	cpsid	i
}
 801ea50:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801ea52:	4b3c      	ldr	r3, [pc, #240]	@ (801eb44 <TRACE_TxCpltCallback+0x10c>)
 801ea54:	789b      	ldrb	r3, [r3, #2]
 801ea56:	2b02      	cmp	r3, #2
 801ea58:	d106      	bne.n	801ea68 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801ea5a:	4b3a      	ldr	r3, [pc, #232]	@ (801eb44 <TRACE_TxCpltCallback+0x10c>)
 801ea5c:	2200      	movs	r2, #0
 801ea5e:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801ea60:	4b38      	ldr	r3, [pc, #224]	@ (801eb44 <TRACE_TxCpltCallback+0x10c>)
 801ea62:	2200      	movs	r2, #0
 801ea64:	821a      	strh	r2, [r3, #16]
 801ea66:	e00a      	b.n	801ea7e <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801ea68:	4b36      	ldr	r3, [pc, #216]	@ (801eb44 <TRACE_TxCpltCallback+0x10c>)
 801ea6a:	8a1a      	ldrh	r2, [r3, #16]
 801ea6c:	4b35      	ldr	r3, [pc, #212]	@ (801eb44 <TRACE_TxCpltCallback+0x10c>)
 801ea6e:	8a9b      	ldrh	r3, [r3, #20]
 801ea70:	4413      	add	r3, r2
 801ea72:	b29b      	uxth	r3, r3
 801ea74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801ea78:	b29a      	uxth	r2, r3
 801ea7a:	4b32      	ldr	r3, [pc, #200]	@ (801eb44 <TRACE_TxCpltCallback+0x10c>)
 801ea7c:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801ea7e:	4b31      	ldr	r3, [pc, #196]	@ (801eb44 <TRACE_TxCpltCallback+0x10c>)
 801ea80:	8a1a      	ldrh	r2, [r3, #16]
 801ea82:	4b30      	ldr	r3, [pc, #192]	@ (801eb44 <TRACE_TxCpltCallback+0x10c>)
 801ea84:	8a5b      	ldrh	r3, [r3, #18]
 801ea86:	429a      	cmp	r2, r3
 801ea88:	d04d      	beq.n	801eb26 <TRACE_TxCpltCallback+0xee>
 801ea8a:	4b2e      	ldr	r3, [pc, #184]	@ (801eb44 <TRACE_TxCpltCallback+0x10c>)
 801ea8c:	8adb      	ldrh	r3, [r3, #22]
 801ea8e:	2b01      	cmp	r3, #1
 801ea90:	d149      	bne.n	801eb26 <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801ea92:	4b2c      	ldr	r3, [pc, #176]	@ (801eb44 <TRACE_TxCpltCallback+0x10c>)
 801ea94:	789b      	ldrb	r3, [r3, #2]
 801ea96:	2b01      	cmp	r3, #1
 801ea98:	d117      	bne.n	801eaca <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801ea9a:	4b2a      	ldr	r3, [pc, #168]	@ (801eb44 <TRACE_TxCpltCallback+0x10c>)
 801ea9c:	881a      	ldrh	r2, [r3, #0]
 801ea9e:	4b29      	ldr	r3, [pc, #164]	@ (801eb44 <TRACE_TxCpltCallback+0x10c>)
 801eaa0:	8a1b      	ldrh	r3, [r3, #16]
 801eaa2:	1ad3      	subs	r3, r2, r3
 801eaa4:	b29a      	uxth	r2, r3
 801eaa6:	4b27      	ldr	r3, [pc, #156]	@ (801eb44 <TRACE_TxCpltCallback+0x10c>)
 801eaa8:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801eaaa:	4b26      	ldr	r3, [pc, #152]	@ (801eb44 <TRACE_TxCpltCallback+0x10c>)
 801eaac:	2202      	movs	r2, #2
 801eaae:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801eab0:	4b24      	ldr	r3, [pc, #144]	@ (801eb44 <TRACE_TxCpltCallback+0x10c>)
 801eab2:	2200      	movs	r2, #0
 801eab4:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801eab6:	4b23      	ldr	r3, [pc, #140]	@ (801eb44 <TRACE_TxCpltCallback+0x10c>)
 801eab8:	8a9b      	ldrh	r3, [r3, #20]
 801eaba:	2b00      	cmp	r3, #0
 801eabc:	d105      	bne.n	801eaca <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801eabe:	4b21      	ldr	r3, [pc, #132]	@ (801eb44 <TRACE_TxCpltCallback+0x10c>)
 801eac0:	2200      	movs	r2, #0
 801eac2:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801eac4:	4b1f      	ldr	r3, [pc, #124]	@ (801eb44 <TRACE_TxCpltCallback+0x10c>)
 801eac6:	2200      	movs	r2, #0
 801eac8:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801eaca:	4b1e      	ldr	r3, [pc, #120]	@ (801eb44 <TRACE_TxCpltCallback+0x10c>)
 801eacc:	789b      	ldrb	r3, [r3, #2]
 801eace:	2b00      	cmp	r3, #0
 801ead0:	d115      	bne.n	801eafe <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801ead2:	4b1c      	ldr	r3, [pc, #112]	@ (801eb44 <TRACE_TxCpltCallback+0x10c>)
 801ead4:	8a5a      	ldrh	r2, [r3, #18]
 801ead6:	4b1b      	ldr	r3, [pc, #108]	@ (801eb44 <TRACE_TxCpltCallback+0x10c>)
 801ead8:	8a1b      	ldrh	r3, [r3, #16]
 801eada:	429a      	cmp	r2, r3
 801eadc:	d908      	bls.n	801eaf0 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801eade:	4b19      	ldr	r3, [pc, #100]	@ (801eb44 <TRACE_TxCpltCallback+0x10c>)
 801eae0:	8a5a      	ldrh	r2, [r3, #18]
 801eae2:	4b18      	ldr	r3, [pc, #96]	@ (801eb44 <TRACE_TxCpltCallback+0x10c>)
 801eae4:	8a1b      	ldrh	r3, [r3, #16]
 801eae6:	1ad3      	subs	r3, r2, r3
 801eae8:	b29a      	uxth	r2, r3
 801eaea:	4b16      	ldr	r3, [pc, #88]	@ (801eb44 <TRACE_TxCpltCallback+0x10c>)
 801eaec:	829a      	strh	r2, [r3, #20]
 801eaee:	e006      	b.n	801eafe <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801eaf0:	4b14      	ldr	r3, [pc, #80]	@ (801eb44 <TRACE_TxCpltCallback+0x10c>)
 801eaf2:	8a1b      	ldrh	r3, [r3, #16]
 801eaf4:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801eaf8:	b29a      	uxth	r2, r3
 801eafa:	4b12      	ldr	r3, [pc, #72]	@ (801eb44 <TRACE_TxCpltCallback+0x10c>)
 801eafc:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801eafe:	4b11      	ldr	r3, [pc, #68]	@ (801eb44 <TRACE_TxCpltCallback+0x10c>)
 801eb00:	8a1b      	ldrh	r3, [r3, #16]
 801eb02:	461a      	mov	r2, r3
 801eb04:	4b10      	ldr	r3, [pc, #64]	@ (801eb48 <TRACE_TxCpltCallback+0x110>)
 801eb06:	4413      	add	r3, r2
 801eb08:	61fb      	str	r3, [r7, #28]
 801eb0a:	69bb      	ldr	r3, [r7, #24]
 801eb0c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801eb0e:	693b      	ldr	r3, [r7, #16]
 801eb10:	f383 8810 	msr	PRIMASK, r3
}
 801eb14:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801eb16:	4b0d      	ldr	r3, [pc, #52]	@ (801eb4c <TRACE_TxCpltCallback+0x114>)
 801eb18:	68db      	ldr	r3, [r3, #12]
 801eb1a:	4a0a      	ldr	r2, [pc, #40]	@ (801eb44 <TRACE_TxCpltCallback+0x10c>)
 801eb1c:	8a92      	ldrh	r2, [r2, #20]
 801eb1e:	4611      	mov	r1, r2
 801eb20:	69f8      	ldr	r0, [r7, #28]
 801eb22:	4798      	blx	r3
 801eb24:	e00a      	b.n	801eb3c <TRACE_TxCpltCallback+0x104>
 801eb26:	69bb      	ldr	r3, [r7, #24]
 801eb28:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801eb2a:	68fb      	ldr	r3, [r7, #12]
 801eb2c:	f383 8810 	msr	PRIMASK, r3
}
 801eb30:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801eb32:	f7e3 feaf 	bl	8002894 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801eb36:	f000 f8a7 	bl	801ec88 <TRACE_UnLock>
  }
}
 801eb3a:	bf00      	nop
 801eb3c:	bf00      	nop
 801eb3e:	3720      	adds	r7, #32
 801eb40:	46bd      	mov	sp, r7
 801eb42:	bd80      	pop	{r7, pc}
 801eb44:	20001c58 	.word	0x20001c58
 801eb48:	20001c70 	.word	0x20001c70
 801eb4c:	0801f844 	.word	0x0801f844

0801eb50 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801eb50:	b480      	push	{r7}
 801eb52:	b087      	sub	sp, #28
 801eb54:	af00      	add	r7, sp, #0
 801eb56:	4603      	mov	r3, r0
 801eb58:	6039      	str	r1, [r7, #0]
 801eb5a:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801eb5c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801eb60:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801eb62:	f3ef 8310 	mrs	r3, PRIMASK
 801eb66:	60fb      	str	r3, [r7, #12]
  return(result);
 801eb68:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801eb6a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801eb6c:	b672      	cpsid	i
}
 801eb6e:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801eb70:	4b35      	ldr	r3, [pc, #212]	@ (801ec48 <TRACE_AllocateBufer+0xf8>)
 801eb72:	8a5a      	ldrh	r2, [r3, #18]
 801eb74:	4b34      	ldr	r3, [pc, #208]	@ (801ec48 <TRACE_AllocateBufer+0xf8>)
 801eb76:	8a1b      	ldrh	r3, [r3, #16]
 801eb78:	429a      	cmp	r2, r3
 801eb7a:	d11b      	bne.n	801ebb4 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801eb7c:	4b32      	ldr	r3, [pc, #200]	@ (801ec48 <TRACE_AllocateBufer+0xf8>)
 801eb7e:	8a5b      	ldrh	r3, [r3, #18]
 801eb80:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801eb84:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801eb86:	88fa      	ldrh	r2, [r7, #6]
 801eb88:	8afb      	ldrh	r3, [r7, #22]
 801eb8a:	429a      	cmp	r2, r3
 801eb8c:	d33a      	bcc.n	801ec04 <TRACE_AllocateBufer+0xb4>
 801eb8e:	4b2e      	ldr	r3, [pc, #184]	@ (801ec48 <TRACE_AllocateBufer+0xf8>)
 801eb90:	8a1b      	ldrh	r3, [r3, #16]
 801eb92:	88fa      	ldrh	r2, [r7, #6]
 801eb94:	429a      	cmp	r2, r3
 801eb96:	d235      	bcs.n	801ec04 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801eb98:	4b2b      	ldr	r3, [pc, #172]	@ (801ec48 <TRACE_AllocateBufer+0xf8>)
 801eb9a:	2201      	movs	r2, #1
 801eb9c:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801eb9e:	4b2a      	ldr	r3, [pc, #168]	@ (801ec48 <TRACE_AllocateBufer+0xf8>)
 801eba0:	8a5a      	ldrh	r2, [r3, #18]
 801eba2:	4b29      	ldr	r3, [pc, #164]	@ (801ec48 <TRACE_AllocateBufer+0xf8>)
 801eba4:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801eba6:	4b28      	ldr	r3, [pc, #160]	@ (801ec48 <TRACE_AllocateBufer+0xf8>)
 801eba8:	8a1b      	ldrh	r3, [r3, #16]
 801ebaa:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801ebac:	4b26      	ldr	r3, [pc, #152]	@ (801ec48 <TRACE_AllocateBufer+0xf8>)
 801ebae:	2200      	movs	r2, #0
 801ebb0:	825a      	strh	r2, [r3, #18]
 801ebb2:	e027      	b.n	801ec04 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801ebb4:	4b24      	ldr	r3, [pc, #144]	@ (801ec48 <TRACE_AllocateBufer+0xf8>)
 801ebb6:	8a5a      	ldrh	r2, [r3, #18]
 801ebb8:	4b23      	ldr	r3, [pc, #140]	@ (801ec48 <TRACE_AllocateBufer+0xf8>)
 801ebba:	8a1b      	ldrh	r3, [r3, #16]
 801ebbc:	429a      	cmp	r2, r3
 801ebbe:	d91b      	bls.n	801ebf8 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801ebc0:	4b21      	ldr	r3, [pc, #132]	@ (801ec48 <TRACE_AllocateBufer+0xf8>)
 801ebc2:	8a5b      	ldrh	r3, [r3, #18]
 801ebc4:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801ebc8:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801ebca:	88fa      	ldrh	r2, [r7, #6]
 801ebcc:	8afb      	ldrh	r3, [r7, #22]
 801ebce:	429a      	cmp	r2, r3
 801ebd0:	d318      	bcc.n	801ec04 <TRACE_AllocateBufer+0xb4>
 801ebd2:	4b1d      	ldr	r3, [pc, #116]	@ (801ec48 <TRACE_AllocateBufer+0xf8>)
 801ebd4:	8a1b      	ldrh	r3, [r3, #16]
 801ebd6:	88fa      	ldrh	r2, [r7, #6]
 801ebd8:	429a      	cmp	r2, r3
 801ebda:	d213      	bcs.n	801ec04 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801ebdc:	4b1a      	ldr	r3, [pc, #104]	@ (801ec48 <TRACE_AllocateBufer+0xf8>)
 801ebde:	2201      	movs	r2, #1
 801ebe0:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801ebe2:	4b19      	ldr	r3, [pc, #100]	@ (801ec48 <TRACE_AllocateBufer+0xf8>)
 801ebe4:	8a5a      	ldrh	r2, [r3, #18]
 801ebe6:	4b18      	ldr	r3, [pc, #96]	@ (801ec48 <TRACE_AllocateBufer+0xf8>)
 801ebe8:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801ebea:	4b17      	ldr	r3, [pc, #92]	@ (801ec48 <TRACE_AllocateBufer+0xf8>)
 801ebec:	8a1b      	ldrh	r3, [r3, #16]
 801ebee:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801ebf0:	4b15      	ldr	r3, [pc, #84]	@ (801ec48 <TRACE_AllocateBufer+0xf8>)
 801ebf2:	2200      	movs	r2, #0
 801ebf4:	825a      	strh	r2, [r3, #18]
 801ebf6:	e005      	b.n	801ec04 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801ebf8:	4b13      	ldr	r3, [pc, #76]	@ (801ec48 <TRACE_AllocateBufer+0xf8>)
 801ebfa:	8a1a      	ldrh	r2, [r3, #16]
 801ebfc:	4b12      	ldr	r3, [pc, #72]	@ (801ec48 <TRACE_AllocateBufer+0xf8>)
 801ebfe:	8a5b      	ldrh	r3, [r3, #18]
 801ec00:	1ad3      	subs	r3, r2, r3
 801ec02:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801ec04:	8afa      	ldrh	r2, [r7, #22]
 801ec06:	88fb      	ldrh	r3, [r7, #6]
 801ec08:	429a      	cmp	r2, r3
 801ec0a:	d90f      	bls.n	801ec2c <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801ec0c:	4b0e      	ldr	r3, [pc, #56]	@ (801ec48 <TRACE_AllocateBufer+0xf8>)
 801ec0e:	8a5a      	ldrh	r2, [r3, #18]
 801ec10:	683b      	ldr	r3, [r7, #0]
 801ec12:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801ec14:	4b0c      	ldr	r3, [pc, #48]	@ (801ec48 <TRACE_AllocateBufer+0xf8>)
 801ec16:	8a5a      	ldrh	r2, [r3, #18]
 801ec18:	88fb      	ldrh	r3, [r7, #6]
 801ec1a:	4413      	add	r3, r2
 801ec1c:	b29b      	uxth	r3, r3
 801ec1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801ec22:	b29a      	uxth	r2, r3
 801ec24:	4b08      	ldr	r3, [pc, #32]	@ (801ec48 <TRACE_AllocateBufer+0xf8>)
 801ec26:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801ec28:	2300      	movs	r3, #0
 801ec2a:	82bb      	strh	r3, [r7, #20]
 801ec2c:	693b      	ldr	r3, [r7, #16]
 801ec2e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ec30:	68bb      	ldr	r3, [r7, #8]
 801ec32:	f383 8810 	msr	PRIMASK, r3
}
 801ec36:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801ec38:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801ec3c:	4618      	mov	r0, r3
 801ec3e:	371c      	adds	r7, #28
 801ec40:	46bd      	mov	sp, r7
 801ec42:	bc80      	pop	{r7}
 801ec44:	4770      	bx	lr
 801ec46:	bf00      	nop
 801ec48:	20001c58 	.word	0x20001c58

0801ec4c <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801ec4c:	b480      	push	{r7}
 801ec4e:	b085      	sub	sp, #20
 801ec50:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ec52:	f3ef 8310 	mrs	r3, PRIMASK
 801ec56:	607b      	str	r3, [r7, #4]
  return(result);
 801ec58:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801ec5a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801ec5c:	b672      	cpsid	i
}
 801ec5e:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801ec60:	4b08      	ldr	r3, [pc, #32]	@ (801ec84 <TRACE_Lock+0x38>)
 801ec62:	8adb      	ldrh	r3, [r3, #22]
 801ec64:	3301      	adds	r3, #1
 801ec66:	b29a      	uxth	r2, r3
 801ec68:	4b06      	ldr	r3, [pc, #24]	@ (801ec84 <TRACE_Lock+0x38>)
 801ec6a:	82da      	strh	r2, [r3, #22]
 801ec6c:	68fb      	ldr	r3, [r7, #12]
 801ec6e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ec70:	68bb      	ldr	r3, [r7, #8]
 801ec72:	f383 8810 	msr	PRIMASK, r3
}
 801ec76:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801ec78:	bf00      	nop
 801ec7a:	3714      	adds	r7, #20
 801ec7c:	46bd      	mov	sp, r7
 801ec7e:	bc80      	pop	{r7}
 801ec80:	4770      	bx	lr
 801ec82:	bf00      	nop
 801ec84:	20001c58 	.word	0x20001c58

0801ec88 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801ec88:	b480      	push	{r7}
 801ec8a:	b085      	sub	sp, #20
 801ec8c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ec8e:	f3ef 8310 	mrs	r3, PRIMASK
 801ec92:	607b      	str	r3, [r7, #4]
  return(result);
 801ec94:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801ec96:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801ec98:	b672      	cpsid	i
}
 801ec9a:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801ec9c:	4b08      	ldr	r3, [pc, #32]	@ (801ecc0 <TRACE_UnLock+0x38>)
 801ec9e:	8adb      	ldrh	r3, [r3, #22]
 801eca0:	3b01      	subs	r3, #1
 801eca2:	b29a      	uxth	r2, r3
 801eca4:	4b06      	ldr	r3, [pc, #24]	@ (801ecc0 <TRACE_UnLock+0x38>)
 801eca6:	82da      	strh	r2, [r3, #22]
 801eca8:	68fb      	ldr	r3, [r7, #12]
 801ecaa:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ecac:	68bb      	ldr	r3, [r7, #8]
 801ecae:	f383 8810 	msr	PRIMASK, r3
}
 801ecb2:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801ecb4:	bf00      	nop
 801ecb6:	3714      	adds	r7, #20
 801ecb8:	46bd      	mov	sp, r7
 801ecba:	bc80      	pop	{r7}
 801ecbc:	4770      	bx	lr
 801ecbe:	bf00      	nop
 801ecc0:	20001c58 	.word	0x20001c58

0801ecc4 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801ecc4:	b480      	push	{r7}
 801ecc6:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801ecc8:	4b05      	ldr	r3, [pc, #20]	@ (801ece0 <TRACE_IsLocked+0x1c>)
 801ecca:	8adb      	ldrh	r3, [r3, #22]
 801eccc:	2b00      	cmp	r3, #0
 801ecce:	bf14      	ite	ne
 801ecd0:	2301      	movne	r3, #1
 801ecd2:	2300      	moveq	r3, #0
 801ecd4:	b2db      	uxtb	r3, r3
}
 801ecd6:	4618      	mov	r0, r3
 801ecd8:	46bd      	mov	sp, r7
 801ecda:	bc80      	pop	{r7}
 801ecdc:	4770      	bx	lr
 801ecde:	bf00      	nop
 801ece0:	20001c58 	.word	0x20001c58

0801ece4 <memset>:
 801ece4:	4402      	add	r2, r0
 801ece6:	4603      	mov	r3, r0
 801ece8:	4293      	cmp	r3, r2
 801ecea:	d100      	bne.n	801ecee <memset+0xa>
 801ecec:	4770      	bx	lr
 801ecee:	f803 1b01 	strb.w	r1, [r3], #1
 801ecf2:	e7f9      	b.n	801ece8 <memset+0x4>

0801ecf4 <__libc_init_array>:
 801ecf4:	b570      	push	{r4, r5, r6, lr}
 801ecf6:	4d0d      	ldr	r5, [pc, #52]	@ (801ed2c <__libc_init_array+0x38>)
 801ecf8:	4c0d      	ldr	r4, [pc, #52]	@ (801ed30 <__libc_init_array+0x3c>)
 801ecfa:	1b64      	subs	r4, r4, r5
 801ecfc:	10a4      	asrs	r4, r4, #2
 801ecfe:	2600      	movs	r6, #0
 801ed00:	42a6      	cmp	r6, r4
 801ed02:	d109      	bne.n	801ed18 <__libc_init_array+0x24>
 801ed04:	4d0b      	ldr	r5, [pc, #44]	@ (801ed34 <__libc_init_array+0x40>)
 801ed06:	4c0c      	ldr	r4, [pc, #48]	@ (801ed38 <__libc_init_array+0x44>)
 801ed08:	f000 f89a 	bl	801ee40 <_init>
 801ed0c:	1b64      	subs	r4, r4, r5
 801ed0e:	10a4      	asrs	r4, r4, #2
 801ed10:	2600      	movs	r6, #0
 801ed12:	42a6      	cmp	r6, r4
 801ed14:	d105      	bne.n	801ed22 <__libc_init_array+0x2e>
 801ed16:	bd70      	pop	{r4, r5, r6, pc}
 801ed18:	f855 3b04 	ldr.w	r3, [r5], #4
 801ed1c:	4798      	blx	r3
 801ed1e:	3601      	adds	r6, #1
 801ed20:	e7ee      	b.n	801ed00 <__libc_init_array+0xc>
 801ed22:	f855 3b04 	ldr.w	r3, [r5], #4
 801ed26:	4798      	blx	r3
 801ed28:	3601      	adds	r6, #1
 801ed2a:	e7f2      	b.n	801ed12 <__libc_init_array+0x1e>
 801ed2c:	0801fefc 	.word	0x0801fefc
 801ed30:	0801fefc 	.word	0x0801fefc
 801ed34:	0801fefc 	.word	0x0801fefc
 801ed38:	0801ff00 	.word	0x0801ff00
 801ed3c:	00000000 	.word	0x00000000

0801ed40 <floor>:
 801ed40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ed44:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801ed48:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 801ed4c:	2e13      	cmp	r6, #19
 801ed4e:	4602      	mov	r2, r0
 801ed50:	460b      	mov	r3, r1
 801ed52:	460c      	mov	r4, r1
 801ed54:	4605      	mov	r5, r0
 801ed56:	4680      	mov	r8, r0
 801ed58:	dc35      	bgt.n	801edc6 <floor+0x86>
 801ed5a:	2e00      	cmp	r6, #0
 801ed5c:	da17      	bge.n	801ed8e <floor+0x4e>
 801ed5e:	a334      	add	r3, pc, #208	@ (adr r3, 801ee30 <floor+0xf0>)
 801ed60:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ed64:	f7e1 fa16 	bl	8000194 <__adddf3>
 801ed68:	2200      	movs	r2, #0
 801ed6a:	2300      	movs	r3, #0
 801ed6c:	f7e1 fe58 	bl	8000a20 <__aeabi_dcmpgt>
 801ed70:	b150      	cbz	r0, 801ed88 <floor+0x48>
 801ed72:	2c00      	cmp	r4, #0
 801ed74:	da57      	bge.n	801ee26 <floor+0xe6>
 801ed76:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801ed7a:	432c      	orrs	r4, r5
 801ed7c:	2500      	movs	r5, #0
 801ed7e:	42ac      	cmp	r4, r5
 801ed80:	4c2d      	ldr	r4, [pc, #180]	@ (801ee38 <floor+0xf8>)
 801ed82:	bf08      	it	eq
 801ed84:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 801ed88:	4623      	mov	r3, r4
 801ed8a:	462a      	mov	r2, r5
 801ed8c:	e024      	b.n	801edd8 <floor+0x98>
 801ed8e:	4f2b      	ldr	r7, [pc, #172]	@ (801ee3c <floor+0xfc>)
 801ed90:	4137      	asrs	r7, r6
 801ed92:	ea01 0c07 	and.w	ip, r1, r7
 801ed96:	ea5c 0c00 	orrs.w	ip, ip, r0
 801ed9a:	d01d      	beq.n	801edd8 <floor+0x98>
 801ed9c:	a324      	add	r3, pc, #144	@ (adr r3, 801ee30 <floor+0xf0>)
 801ed9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eda2:	f7e1 f9f7 	bl	8000194 <__adddf3>
 801eda6:	2200      	movs	r2, #0
 801eda8:	2300      	movs	r3, #0
 801edaa:	f7e1 fe39 	bl	8000a20 <__aeabi_dcmpgt>
 801edae:	2800      	cmp	r0, #0
 801edb0:	d0ea      	beq.n	801ed88 <floor+0x48>
 801edb2:	2c00      	cmp	r4, #0
 801edb4:	bfbe      	ittt	lt
 801edb6:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 801edba:	4133      	asrlt	r3, r6
 801edbc:	18e4      	addlt	r4, r4, r3
 801edbe:	ea24 0407 	bic.w	r4, r4, r7
 801edc2:	2500      	movs	r5, #0
 801edc4:	e7e0      	b.n	801ed88 <floor+0x48>
 801edc6:	2e33      	cmp	r6, #51	@ 0x33
 801edc8:	dd0a      	ble.n	801ede0 <floor+0xa0>
 801edca:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801edce:	d103      	bne.n	801edd8 <floor+0x98>
 801edd0:	f7e1 f9e0 	bl	8000194 <__adddf3>
 801edd4:	4602      	mov	r2, r0
 801edd6:	460b      	mov	r3, r1
 801edd8:	4610      	mov	r0, r2
 801edda:	4619      	mov	r1, r3
 801eddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ede0:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 801ede4:	f04f 3cff 	mov.w	ip, #4294967295
 801ede8:	fa2c f707 	lsr.w	r7, ip, r7
 801edec:	4207      	tst	r7, r0
 801edee:	d0f3      	beq.n	801edd8 <floor+0x98>
 801edf0:	a30f      	add	r3, pc, #60	@ (adr r3, 801ee30 <floor+0xf0>)
 801edf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801edf6:	f7e1 f9cd 	bl	8000194 <__adddf3>
 801edfa:	2200      	movs	r2, #0
 801edfc:	2300      	movs	r3, #0
 801edfe:	f7e1 fe0f 	bl	8000a20 <__aeabi_dcmpgt>
 801ee02:	2800      	cmp	r0, #0
 801ee04:	d0c0      	beq.n	801ed88 <floor+0x48>
 801ee06:	2c00      	cmp	r4, #0
 801ee08:	da0a      	bge.n	801ee20 <floor+0xe0>
 801ee0a:	2e14      	cmp	r6, #20
 801ee0c:	d101      	bne.n	801ee12 <floor+0xd2>
 801ee0e:	3401      	adds	r4, #1
 801ee10:	e006      	b.n	801ee20 <floor+0xe0>
 801ee12:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801ee16:	2301      	movs	r3, #1
 801ee18:	40b3      	lsls	r3, r6
 801ee1a:	441d      	add	r5, r3
 801ee1c:	4545      	cmp	r5, r8
 801ee1e:	d3f6      	bcc.n	801ee0e <floor+0xce>
 801ee20:	ea25 0507 	bic.w	r5, r5, r7
 801ee24:	e7b0      	b.n	801ed88 <floor+0x48>
 801ee26:	2500      	movs	r5, #0
 801ee28:	462c      	mov	r4, r5
 801ee2a:	e7ad      	b.n	801ed88 <floor+0x48>
 801ee2c:	f3af 8000 	nop.w
 801ee30:	8800759c 	.word	0x8800759c
 801ee34:	7e37e43c 	.word	0x7e37e43c
 801ee38:	bff00000 	.word	0xbff00000
 801ee3c:	000fffff 	.word	0x000fffff

0801ee40 <_init>:
 801ee40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ee42:	bf00      	nop
 801ee44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ee46:	bc08      	pop	{r3}
 801ee48:	469e      	mov	lr, r3
 801ee4a:	4770      	bx	lr

0801ee4c <_fini>:
 801ee4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ee4e:	bf00      	nop
 801ee50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ee52:	bc08      	pop	{r3}
 801ee54:	469e      	mov	lr, r3
 801ee56:	4770      	bx	lr
